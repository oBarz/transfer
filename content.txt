C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\config\AppConfig.java

package com.spglobal.ratings.ratingsdata.config;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Configuration;

import lombok.Data;


@Configuration
@Data
public class AppConfig {

    @Value("${rating.user.profile.service.url}")
    private String ratingUserProfileUrl;

    @Value("${rpm.job.generate.criteria.url}")
    private String rpmGenerateCriteriaUrl;

    @Value("${R360_OKTA_API_KEY}")
    private String apiKey;
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\controller\ArticlePDFController.java

package com.spglobal.ratings.ratingsdata.controller;


import org.apache.commons.lang3.ObjectUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.spglobal.ratings.ratingsdata.model.Response;
import com.spglobal.ratings.ratingsdata.service.ArticlePDFService;
import com.spglobal.ratings.ratingsdata.util.RatingsDataConstant;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import lombok.extern.slf4j.Slf4j;
import org.springframework.web.server.ResponseStatusException;

@Slf4j
@RestController
@RequestMapping(path = RatingsDataConstant.BASE_PATH, produces = MediaType.APPLICATION_JSON_VALUE)
public class ArticlePDFController {
	
	@Autowired
	private ArticlePDFService articlePDFService;
	
	@Operation(summary = "get Article PDF by Article ID")
	@ApiResponses(value = {
			@ApiResponse(responseCode = "200", description = "get article pdf articles by article id") })
	@GetMapping(value="/getArticlepdf" , produces={"application/pdf"})
	public byte[] getArticlePDF(
			@RequestParam(value = "articleId") Long articleId,
			@RequestHeader HttpHeaders httpHeaders) {
		log.info("@Controller ArticlePDF method: calling service for Article PDF");

		Response<byte[]> response = new Response<>();
		response.setName("get Article PDF");
		response.setDescription("Article PDF for article id");
		byte[] pdf = articlePDFService.getArticlePDFByArticleId(articleId);
			if(ObjectUtils.isEmpty(pdf)) {
				throw new ResponseStatusException(
						HttpStatus.NOT_FOUND, "Article not found for Article Id:" +articleId
				);
			}

		return pdf;
	}
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\controller\CacheController.java

package com.spglobal.ratings.ratingsdata.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.spglobal.ratings.ratingsdata.util.RatingsDataConstant;
import com.spglobal.ratings.ratingsdata.util.RedisUtility;
import com.spglobal.ratings.ratingsdata.util.ResponseHandler;

@RestController
@RequestMapping(path = RatingsDataConstant.BASE_PATH, produces = MediaType.APPLICATION_JSON_VALUE)
public class CacheController {
	
	@Autowired
	private RedisUtility utility;
	@GetMapping("/clear/cache")
	public ResponseEntity<Object> ClearCache(@RequestParam("key") String key) {
		return ResponseHandler.generateResponse(RatingsDataConstant.SUCCESS, HttpStatus.OK, utility.clearRiskGuageCache(key));
	}

}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\controller\CommonFeaturesController.java

package com.spglobal.ratings.ratingsdata.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.util.CollectionUtils;
import org.springframework.util.ObjectUtils;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.spglobal.ratings.ratingsdata.entity.CLOABSContacts;
import com.spglobal.ratings.ratingsdata.entity.Contacts;
import com.spglobal.ratings.ratingsdata.entity.EntityDetails;
import com.spglobal.ratings.ratingsdata.entity.RelatedEntities;
import com.spglobal.ratings.ratingsdata.entity.SnlEntityDetailsUnrated;
import com.spglobal.ratings.ratingsdata.entity.TimeZone;
import com.spglobal.ratings.ratingsdata.model.EntitiesPayload;
import com.spglobal.ratings.ratingsdata.model.InstnNamesRequest;
import com.spglobal.ratings.ratingsdata.service.CommonFeaturesService;
import com.spglobal.ratings.ratingsdata.util.RatingsDataConstant;
import com.spglobal.ratings.ratingsdata.util.ResponseHandler;

import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@RestController
@RequestMapping(path = RatingsDataConstant.BASE_PATH, produces = MediaType.APPLICATION_JSON_VALUE)
public class CommonFeaturesController {

	@Autowired
	CommonFeaturesService commonFeaturesService;

	@GetMapping("/relatedEntity/entity/{entityId}")
	public ResponseEntity<Object> getRelatedEntitiesByEntityId(@PathVariable("entityId") Long entityId, 
			@RequestHeader HttpHeaders httpHeaders) {
		List<RelatedEntities> entityResponse = commonFeaturesService.getRelatedEntitiesByEntityId(entityId, httpHeaders);
		return CollectionUtils.isEmpty(entityResponse)
				? ResponseHandler.generateResponse(RatingsDataConstant.FAILURE, HttpStatus.NOT_FOUND, null)
				: ResponseHandler.generateResponse(RatingsDataConstant.SUCCESS, HttpStatus.OK, entityResponse);
								
	}

	@GetMapping("/relatedEntity/{type}/{id}")
	public ResponseEntity<Object> getRelatedEntitiesByType(@PathVariable("type") String type, @PathVariable("id") String id,
															@RequestHeader HttpHeaders httpHeaders) {
		log.info("@CommonFeaturesController -- getRelatedEntitiesByType");
		if (ObjectUtils.isEmpty(type)) {
			return ResponseHandler.generateResponse(RatingsDataConstant.FAILURE, HttpStatus.BAD_REQUEST, "Invalid Parameters");
		}

		List<RelatedEntities> entityResponse = commonFeaturesService.getRelatedEntitiesByType(type, id, httpHeaders);
		return CollectionUtils.isEmpty(entityResponse)
				? ResponseHandler.generateResponse(RatingsDataConstant.FAILURE, HttpStatus.NOT_FOUND, null)
				: ResponseHandler.generateResponse(RatingsDataConstant.SUCCESS, HttpStatus.OK, entityResponse);

	}

	@GetMapping("/orgTicker/{type}/{id}")
	public ResponseEntity<Object> getOrgAndTickerDetailsByType(@PathVariable("type") String type,
																@PathVariable("id") String id) {
		log.info("@CommonFeaturesController -- getOrgAndTickerDetailsByType");
		if (ObjectUtils.isEmpty(type)) {
			return ResponseHandler.generateResponse(RatingsDataConstant.FAILURE, HttpStatus.BAD_REQUEST, "Invalid Parameters");
		}
		List<EntityDetails> entityResponse = commonFeaturesService.getOrgAndTickerDetailsByType(type, id);
		return CollectionUtils.isEmpty(entityResponse)
				? ResponseHandler.generateResponse(RatingsDataConstant.FAILURE, HttpStatus.NOT_FOUND, null)
				: ResponseHandler.generateResponse(RatingsDataConstant.SUCCESS, HttpStatus.OK, entityResponse);

	}
	
	@GetMapping("/orgTicker/entity/{entityId}")
	public ResponseEntity<Object> getOrgAndTickerDetailsByEntityId(@PathVariable("entityId") Long entityId) {
		List<EntityDetails> entityResponse = commonFeaturesService.getOrgAndTickerDetailsByEntityId(entityId);
		return CollectionUtils.isEmpty(entityResponse)
				? ResponseHandler.generateResponse(RatingsDataConstant.FAILURE, HttpStatus.NOT_FOUND, null)
				: ResponseHandler.generateResponse(RatingsDataConstant.SUCCESS, HttpStatus.OK, entityResponse);
	}

    @ApiResponses(value = {
        @ApiResponse(responseCode = "200") })
    @PostMapping(path = "/orgTicker/getEntityDetails",  consumes = "application/json")
	public ResponseEntity<Object> getOrgAndTickerDetailForEntityIds(@RequestBody EntitiesPayload entitiesPayload) {
		log.info("@CommonFeaturesController -- getOrgAndTickerDetailForEntityIds");
		try {
			if (ObjectUtils.isEmpty(entitiesPayload)) {
				return ResponseHandler.generateResponse(RatingsDataConstant.FAILURE, HttpStatus.BAD_REQUEST, "Invalid Parameters");
			}
			if (CollectionUtils.isEmpty(entitiesPayload.getKeyInstns()) && CollectionUtils.isEmpty(entitiesPayload.getCapiqIds()) && CollectionUtils.isEmpty(entitiesPayload.getEntityIds())) {
				return ResponseHandler.generateResponse(RatingsDataConstant.FAILURE, HttpStatus.BAD_REQUEST, "Invalid Parameters");
			}else {
				if(!CollectionUtils.isEmpty(entitiesPayload.getCapiqIds())) {
					List<EntityDetails> entityResponse = commonFeaturesService.getOrgAndTickerDetailsForEntityIds(entitiesPayload.getCapiqIds(), RatingsDataConstant.CAPIQ_STR);
					return ResponseHandler.generateResponse(RatingsDataConstant.SUCCESS, HttpStatus.OK, entityResponse);
				}else
				if(!CollectionUtils.isEmpty(entitiesPayload.getEntityIds())) {
					List<EntityDetails> entityResponse = commonFeaturesService.getOrgAndTickerDetailsForEntityIds(entitiesPayload.getEntityIds(), RatingsDataConstant.COREID_STR);
					return ResponseHandler.generateResponse(RatingsDataConstant.SUCCESS, HttpStatus.OK, entityResponse);
				}else {
					List<EntityDetails> entityResponse = commonFeaturesService.getOrgAndTickerDetailsForEntityIds(entitiesPayload.getKeyInstns(), RatingsDataConstant.SNL_STR);
					return ResponseHandler.generateResponse(RatingsDataConstant.SUCCESS, HttpStatus.OK, entityResponse);
				}
			}
		}catch (Exception ex){
			log.error("Exception in @CommonFeaturesController--getOrgAndTickerDetailForEntityIds {}",ex.getMessage());
			return ResponseHandler.generateResponse(RatingsDataConstant.FAILURE, HttpStatus.BAD_REQUEST, ex.getMessage());
		}
	}
    
	@ApiResponses(value = { @ApiResponse(responseCode = "200", description = "get time zone details by TimeZoneAbbreviation") })
	@GetMapping("/getTimeZone")
	public ResponseEntity<Object> getTimeone(@RequestParam("timeZone") String timeZone) {
		List<TimeZone> obj = commonFeaturesService.getTimeZone(timeZone);
		return CollectionUtils.isEmpty(obj)
				? ResponseHandler.generateResponse(RatingsDataConstant.FAILURE, HttpStatus.NO_CONTENT, null)
				: ResponseHandler.generateResponse(RatingsDataConstant.SUCCESS, HttpStatus.OK, obj);
	}

	@ApiResponses(value = { @ApiResponse(responseCode = "200", description = "get commericals contacts") })
	@GetMapping("/commercial/contacts")
	public ResponseEntity<Object> getcommercialContacts(@RequestParam(value = "entityId", required = false) Long entityId,
														@RequestParam(value = "capiq", required = false) String capiqId,
														@RequestParam("contactType") String contactType) {
		if(ObjectUtils.isEmpty(entityId) && ObjectUtils.isEmpty(capiqId)){
			return ResponseHandler.generateResponse(RatingsDataConstant.FAILURE, HttpStatus.BAD_REQUEST, "Request parameters are empty.");
		}
		List<Contacts> obj = commonFeaturesService.getContacts(entityId,capiqId, contactType);
		return CollectionUtils.isEmpty(obj)
				? ResponseHandler.generateResponse(RatingsDataConstant.FAILURE, HttpStatus.NOT_FOUND, null)
				: ResponseHandler.generateResponse(RatingsDataConstant.SUCCESS, HttpStatus.OK, obj);
	}
	
	@ApiResponses(value = { @ApiResponse(responseCode = "200", description = "get CLO ABS contacts") })
	@GetMapping("/getCLOABSContacts")
	public ResponseEntity<Object> getCLOABSContacts(@RequestParam("entityId") Long entityId, 
			@RequestParam("subSectorCode") String subSectorCode, @RequestParam(value = "contactType",required=false) String contactType) {
		List<CLOABSContacts> obj = commonFeaturesService.getCLOABSContacts(entityId,subSectorCode,contactType);
		return CollectionUtils.isEmpty(obj)
				? ResponseHandler.generateResponse(RatingsDataConstant.FAILURE, HttpStatus.NOT_FOUND, null)
				: ResponseHandler.generateResponse(RatingsDataConstant.SUCCESS, HttpStatus.OK, obj);
	}
	
	@ApiResponses(value = { @ApiResponse(responseCode = "200") })
	@PostMapping(path = "/getInstnDetails", consumes = "application/json")
	public ResponseEntity<Object> getInstitutionNameInList(@RequestBody InstnNamesRequest instnNames) {
		if (ObjectUtils.isEmpty(instnNames.getInstnNames())) {
			return ResponseHandler.generateResponse(RatingsDataConstant.FAILURE, HttpStatus.BAD_REQUEST,
					RatingsDataConstant.INSTN_NAMES_ERROR_MSG);
		}
		List<SnlEntityDetailsUnrated> findByInstitutionNameInList = commonFeaturesService
				.getInstitutionDetails(instnNames.getInstnNames());
		return CollectionUtils.isEmpty(findByInstitutionNameInList)
				? ResponseHandler.generateResponse(RatingsDataConstant.FAILURE, HttpStatus.NOT_FOUND, null)
				: ResponseHandler.generateResponse(RatingsDataConstant.SUCCESS, HttpStatus.OK,
						findByInstitutionNameInList);

	}

}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\controller\ConfigController.java

package com.spglobal.ratings.ratingsdata.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.spglobal.ratings.ratingsdata.entity.ConfigDetails;
import com.spglobal.ratings.ratingsdata.service.ConfigDetailsService;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@RestController
@RequestMapping(path = "/configData/api", produces = MediaType.APPLICATION_JSON_VALUE)
public class ConfigController {
	
    @Autowired
    private ConfigDetailsService configDetailsService;
    
    @GetMapping("/getConfigDetails") 
    public ConfigDetails getConfigDetails(@RequestParam(value = "configKey") String configKey ) {
        log.info("@ConfigController getConfigDetails method: calling configDetailsService.getConfigDetails");
        return configDetailsService.getConfigDetails(configKey);
    }   

    @Operation(summary = "get configuration details for the given keys")
    @ApiResponses(value = {
    	@ApiResponse(responseCode = "200", description = "get  config key values") })
    	@PostMapping(path = "/getConfigDetail",  consumes = "application/json")
    	public List<ConfigDetails> getConfigDetail(@RequestBody List<String> commaSepKeys) {
    	log.info("@ConfigController getConfigDetail method: calling get configuration details for the given keys");
    	
    	return configDetailsService.getConfigDetail(commaSepKeys);
    }
    
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\controller\Controller.java

package com.spglobal.ratings.ratingsdata.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.util.CollectionUtils;
import org.springframework.util.ObjectUtils;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.spglobal.ratings.ratingsdata.entity.CoreOrgIdKeyInstnMap;
import com.spglobal.ratings.ratingsdata.entity.CoreOrgIdKeyInstnSPIdMap;
import com.spglobal.ratings.ratingsdata.entity.DashBoardMyRating;
import com.spglobal.ratings.ratingsdata.entity.EntityCurrentRating;
import com.spglobal.ratings.ratingsdata.entity.EntityRatings;
import com.spglobal.ratings.ratingsdata.entity.EntityRatingsHistory;
import com.spglobal.ratings.ratingsdata.entity.EntityRatingsHistoryPublic;
import com.spglobal.ratings.ratingsdata.entity.EntityRatingsHistoryTAC;
import com.spglobal.ratings.ratingsdata.entity.EntityRatingsPublic;
import com.spglobal.ratings.ratingsdata.entity.EntityRatingsTACPublic;
import com.spglobal.ratings.ratingsdata.entity.IssuesAndMaturities;
import com.spglobal.ratings.ratingsdata.entity.IssuesAndMaturitiesHistory;
import com.spglobal.ratings.ratingsdata.entity.IssuesAndMaturitiesHistoryPublic;
import com.spglobal.ratings.ratingsdata.entity.IssuesAndMaturitiesPublic;
import com.spglobal.ratings.ratingsdata.entity.PeersCurrentRatings;
import com.spglobal.ratings.ratingsdata.entity.PeersEntityRatingsPublic;
import com.spglobal.ratings.ratingsdata.entity.RatingHistoryLastTenYrsPublic;
import com.spglobal.ratings.ratingsdata.entity.ScoresAndModifiers;
import com.spglobal.ratings.ratingsdata.entity.ScoresAndModifiersPublic;
import com.spglobal.ratings.ratingsdata.model.DebtTypes;
import com.spglobal.ratings.ratingsdata.model.EntityTypeIdsRequest;
import com.spglobal.ratings.ratingsdata.model.EntityTypeIdsResponse;
import com.spglobal.ratings.ratingsdata.model.IssuesAndMaturitiesData;
import com.spglobal.ratings.ratingsdata.model.RatingHistoryData;
import com.spglobal.ratings.ratingsdata.model.RatingsData;
import com.spglobal.ratings.ratingsdata.service.CoreOrgIdService;
import com.spglobal.ratings.ratingsdata.service.DashboardMyRatingService;
import com.spglobal.ratings.ratingsdata.service.EntityCurrentRatingService;
import com.spglobal.ratings.ratingsdata.service.EntityRatingsHistoryPublicService;
import com.spglobal.ratings.ratingsdata.service.EntityRatingsHistoryService;
import com.spglobal.ratings.ratingsdata.service.EntityRatingsPublicService;
import com.spglobal.ratings.ratingsdata.service.EntityRatingsService;
import com.spglobal.ratings.ratingsdata.service.IssuesAndMaturitiesHistoryPublicService;
import com.spglobal.ratings.ratingsdata.service.IssuesAndMaturitiesHistoryService;
import com.spglobal.ratings.ratingsdata.service.IssuesAndMaturitiesPublicService;
import com.spglobal.ratings.ratingsdata.service.IssuesAndMaturitiesService;
import com.spglobal.ratings.ratingsdata.service.PeersEntityRatingsService;
import com.spglobal.ratings.ratingsdata.service.RatingHistoryLastTenYrsService;
import com.spglobal.ratings.ratingsdata.service.ScoresAndModifiersPublicService;
import com.spglobal.ratings.ratingsdata.service.ScoresAndModifiersService;
import com.spglobal.ratings.ratingsdata.util.RatingsDataConstant;
import com.spglobal.ratings.ratingsdata.util.ResponseHandler;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@RestController
@RequestMapping(path = RatingsDataConstant.BASE_PATH, produces = MediaType.APPLICATION_JSON_VALUE)
public class Controller {
    
    @Autowired
    private EntityRatingsHistoryPublicService ratingsHistoryPublicService;
    
    @Autowired
    private ScoresAndModifiersPublicService scoresAndModifiersPublicService;

    @Autowired
    private EntityRatingsPublicService entityRatingsPublicService;

    @Autowired
    private EntityCurrentRatingService entityCurrentRatingService;

    @Autowired
    private RatingHistoryLastTenYrsService ratingHistoryLastTenYrsService;
    
    @Autowired
    private PeersEntityRatingsService peersEntityRatingsService;

    @Autowired
    private EntityRatingsService entityRatingsService;
    
    @Autowired
    private EntityRatingsHistoryService entityRatingsHistoryService;
    
    @Autowired
    private IssuesAndMaturitiesPublicService issuesAndMaturitiesPublicService;
    
    @Autowired
    private IssuesAndMaturitiesService issuesAndMaturitiesService;
    
    @Autowired
    private IssuesAndMaturitiesHistoryPublicService issuesAndMaturitiesHistoryPublicService;
    
    @Autowired
    private IssuesAndMaturitiesHistoryService issuesAndMaturitiesHistoryService;
    
    @Autowired
    private DashboardMyRatingService dashboardMyRatingService;

    @Autowired
    private CoreOrgIdService coreOrgIdService;
    
    @Autowired
    private ScoresAndModifiersService scoresAndModifiersService;

    
    @Operation(summary = "get public ratings for entity")
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "get public ratings for entity") })
        @GetMapping("/publicratings/{entityId}")
        public List<EntityRatingsPublic> getPublicEntityRatings(@PathVariable("entityId") Long entityId) {
        //log.info("@Controller getPublicEntityRatings method: calling ratings service for entity");
        
        return entityRatingsPublicService.getPublicEntityRatings(entityId);
    }

    @Operation(summary = "get public ratings for entity")
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "get public ratings for entity") })
        @GetMapping("/scoresmodifiers/{subsector}/{entityId}")
        public List<ScoresAndModifiersPublic> getScoresAndModifiers(@PathVariable("entityId") String entityId, @PathVariable("subsector") String subsector) {
        //log.info("@Controller getPublicEntityRatings method: calling ratings service for entity");

        return scoresAndModifiersPublicService.getScoresAndModifiers(entityId, subsector);
    }
    
    @Operation(summary = "get public rating details for entity")
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "get public rating details for entity") })
        @GetMapping("/publicratings/{entityId}/{ratingDetailId}")
        public EntityRatingsPublic getPublicEntityRatingDetails(@PathVariable("entityId") Long entityId, @PathVariable("ratingDetailId") Long ratingDetailId) {
        //log.info("@Controller getPublicEntityRatingDetails method: calling ratings service for entity");
        
        return entityRatingsPublicService.getPublicEntityRatingDetails(entityId, ratingDetailId);
    }
    
    
    @Operation(summary = "get ratings for entity")
    @ApiResponses(value = {@ApiResponse(responseCode = "200", description = "get ratings for entity")})
    @GetMapping("/ratings/{entityId}/{capiqId}")
    public ResponseEntity<Object> getEntityRatings(@PathVariable("entityId") Long entityId,
                                                   @PathVariable("capiqId") Long capiqId,
                                                   @RequestHeader("Authorization") String authHeader) {
        //log.info("@Controller getEntityRatings method: calling ratings service for entity");
        RatingsData ratings = entityRatingsService.getEntityRatings(entityId, capiqId, authHeader);
        if (ratings.getMessage() != null && ratings.getMessage().equals("The User is not entitiled to view ratings for entity")) {
            return ResponseHandler.generateResponse(RatingsDataConstant.FAILURE, HttpStatus.UNAUTHORIZED, null);
        } else if (ratings.getEntityRatings() == null || ratings.getEntityRatings().size() == 0) {
            return ResponseHandler.generateResponse(RatingsDataConstant.SUCCESS, HttpStatus.NO_CONTENT, null);
        } else {
            return ResponseHandler.generateResponse(RatingsDataConstant.SUCCESS, HttpStatus.OK, ratings);
        }
    }
    
    @Operation(summary = "get rating details for entity")
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "get rating details for entity") })
        @GetMapping("/ratings/{entityId}/{ratingDetailId}/{capiqId}")
        public ResponseEntity<Object> getEntityRatingDetails(@PathVariable("entityId") Long entityId,
                                                             @PathVariable("ratingDetailId") Long ratingDetailId,
                                                             @PathVariable("capiqId") Long capiqId,
                                                             @RequestHeader("Authorization") String authHeader) {
        //log.info("@Controller getEntityRatingDetails method: calling ratings service for entity");
    	EntityRatings ratingDetails = entityRatingsService.getEntityRatingDetails(entityId, ratingDetailId, capiqId, authHeader);
    	return ObjectUtils.isEmpty(ratingDetails)
				? ResponseHandler.generateResponse(RatingsDataConstant.FAILURE, HttpStatus.NOT_FOUND, null)
				: ResponseHandler.generateResponse(RatingsDataConstant.SUCCESS, HttpStatus.OK, ratingDetails);
        
//        return entityRatingsService.getEntityRatingDetails(entityId, ratingDetailId, snlId, authHeader);
    }
    

    @Operation(summary ="get public ratings History for entity with particular debt_type_code and rating_type_code")
    @ApiResponses(value = {
            @ApiResponse(responseCode  = "200", description  = "get public ratings history for entity ") })
        @GetMapping("/publicratingsHistory/{entityId}/{debtTypeCode}/{ratingTypeCode}")
        public List<EntityRatingsHistoryPublic> getPublicEntityRatingsHistory(@PathVariable("entityId") Long entityId,
                                                                              @PathVariable("debtTypeCode") String debtTypeCode,
                                                                              @PathVariable("ratingTypeCode") String ratingTypeCode) {
            //log.info("@Controller getPublicEntityRatingsHistory method: calling ratings history service for entity");
        
            return ratingsHistoryPublicService.getPublicEntityRatingsHistory(entityId, debtTypeCode, ratingTypeCode);
        }
    
    @Operation(summary ="get ratings History for entity with particular debt_type_code and rating_type_code")
    @ApiResponses(value = {
            @ApiResponse(responseCode  = "200", description  = "get ratings history for entity ") })
        @GetMapping("/ratingsHistory/{entityId}/{debtTypeCode}/{ratingTypeCode}/{capiqId}")
        public List<EntityRatingsHistory> getEntityRatingsHistory(@PathVariable("entityId") Long entityId,
                                                                  @PathVariable("debtTypeCode") String debtTypeCode,
                                                                  @PathVariable("ratingTypeCode") String ratingTypeCode,
                                                                  @PathVariable("capiqId") Long capiqId,
                                                                  @RequestHeader("Authorization") String authHeader) {
            //log.info("@Controller getEntityRatingsHistory method: calling ratings history service for entity");
        
            return entityRatingsHistoryService.getEntityRatingsHistory(entityId, debtTypeCode, ratingTypeCode, capiqId, authHeader);
        }
    
    @Operation(summary ="get public issues and maturities for entity")
    @ApiResponses(value = {
            @ApiResponse(responseCode  = "200", description  = "get public issues and maturities for entity ") })
       @GetMapping("/publicissuesandmaturities/{entityId}")
       public List<IssuesAndMaturitiesPublic> getPublicIssuesAndMaturities(@PathVariable("entityId") Long entityId) {
        //log.info("@Controller getPublicIssuesAndMaturities method: calling issuesAndMaturitiesPublicService.getPublicIssuesAndMaturities");
        return issuesAndMaturitiesPublicService.getPublicIssuesAndMaturities(entityId);
       }

    @Operation(summary ="get public issues and maturities for entity with particular debt_type (filter from UI)")
    @ApiResponses(value = {
            @ApiResponse(responseCode  = "200", description  = "get public issues and maturities for entity ") })
       @GetMapping("/publicissuesandmaturities/{entityId}/{debtTypeCode}")
       public List<IssuesAndMaturitiesPublic> getPublicIssuesAndMaturities(@PathVariable("entityId") Long entityId, @PathVariable("debtTypeCode") String debtTypeCode) {
        //log.info("@Controller getPublicIssuesAndMaturities method: calling issuesAndMaturitiesPublicService.getPublicIssuesAndMaturitiesDebtTypeCode");
        return issuesAndMaturitiesPublicService.getPublicIssuesAndMaturitiesByDebtTypeCode(entityId, debtTypeCode);
       }
    
    @Operation(summary ="get public issues and maturities details for entity")
    @ApiResponses(value = {
            @ApiResponse(responseCode  = "200", description  = "get public issues and maturities details for entity ") })
       @GetMapping("/publicissuesandmaturities")
       public IssuesAndMaturitiesPublic getPublicIssuesAndMaturitiesDetails(@RequestParam(value = "entityId") Long entityId,
                                                                            @RequestParam(value = "ratingDetailId") Long ratingDetailId) {
        //log.info("@Controller getIssuesAndMaturities method: calling issuesAndMaturitiesPublicservice.getPublicIssuesAndMaturitiesDetails");
        return issuesAndMaturitiesPublicService.getPublicIssuesAndMaturitiesDetails(entityId, ratingDetailId);
       }
    
    @Operation(summary ="get issues and maturities for entity")
    @ApiResponses(value = {
            @ApiResponse(responseCode  = "200", description  = "get issues and maturities for entity ") })
       @GetMapping("/issuesandmaturities/{entityId}/{capiqId}")
       public ResponseEntity<Object> getIssuesAndMaturities(@PathVariable("entityId") Long entityId,
                                                            @PathVariable("capiqId") Long capiqId,
                                                            @RequestHeader("Authorization") String authHeader) {
        //log.info("@Controller getIssuesAndMaturities method: calling issuesAndMaturitiesService.getIssuesAndMaturities");
        //return issuesAndMaturitiesService.getIssuesAndMaturities(entityId, snlId, authHeader);
    	IssuesAndMaturitiesData issuesAndMaturities = issuesAndMaturitiesService.getIssuesAndMaturities(entityId, capiqId, authHeader);
         if (issuesAndMaturities.getMessage() != null && issuesAndMaturities.getMessage().equals("The User is not entitiled to view issues and maturities for entity")) {
         	return ResponseHandler.generateResponse(RatingsDataConstant.FAILURE, HttpStatus.UNAUTHORIZED, null);
         } else if (issuesAndMaturities.getIssuesAndMaturities() == null || issuesAndMaturities.getIssuesAndMaturities().size() == 0) {
         	return ResponseHandler.generateResponse(RatingsDataConstant.SUCCESS, HttpStatus.NO_CONTENT, null);
         }
         else {
         	return ResponseHandler.generateResponse(RatingsDataConstant.SUCCESS, HttpStatus.OK, issuesAndMaturities);
         }
       }

    @Operation(summary ="get issues and maturities for entity with particular debt_type (filter from UI)")
    @ApiResponses(value = {
            @ApiResponse(responseCode  = "200", description  = "get issues and maturities for entity ") })
       @GetMapping("/issuesandmaturities/{entityId}/{debtTypeCode}/{capiqId}")
       public ResponseEntity<Object> getIssuesAndMaturities(@PathVariable("entityId") Long entityId,
                                                            @PathVariable("debtTypeCode") String debtTypeCode,
                                                            @PathVariable("capiqId") Long capiqId,
                                                            @RequestHeader("Authorization") String authHeader) {
        //log.info("@Controller getIssuesAndMaturities method: calling issuesAndMaturitiesService.getIssuesAndMaturitiesDebtTypeCode");
        //return issuesAndMaturitiesService.getIssuesAndMaturitiesByDebtTypeCode(entityId, debtTypeCode, snlId, authHeader);
    	IssuesAndMaturitiesData issuesAndMaturities = issuesAndMaturitiesService.getIssuesAndMaturitiesByDebtTypeCode(entityId, debtTypeCode, capiqId, authHeader);
        if (issuesAndMaturities.getMessage() != null && issuesAndMaturities.getMessage().equals("The User is not entitiled to view issues and maturities for entity")) {
        	return ResponseHandler.generateResponse(RatingsDataConstant.FAILURE, HttpStatus.UNAUTHORIZED, null);
        } else if (issuesAndMaturities.getIssuesAndMaturities() == null || issuesAndMaturities.getIssuesAndMaturities().size() == 0) {
        	return ResponseHandler.generateResponse(RatingsDataConstant.SUCCESS, HttpStatus.NO_CONTENT, null);
        }
        else {
        	return ResponseHandler.generateResponse(RatingsDataConstant.SUCCESS, HttpStatus.OK, issuesAndMaturities);
        }
       }
    
    @Operation(summary ="get issues and maturities details for entity")
    @ApiResponses(value = {
            @ApiResponse(responseCode  = "200", description  = "get issues and maturities details for entity ") })
       @GetMapping("/issuesandmaturities")
       public ResponseEntity<Object> getIssuesAndMaturitiesDetails(@RequestParam(value = "entityId") Long entityId,
                                                                   @RequestParam(value = "ratingDetailId") Long ratingDetailId,
                                                                   @RequestParam("capiq") Long capiqId,
                                                                   @RequestHeader("Authorization") String authHeader) {
        //log.info("@Controller getIssuesAndMaturities method: calling issuesAndMaturitiesservice.getIssuesAndMaturitiesDetails");
    	IssuesAndMaturities details = issuesAndMaturitiesService.getIssuesAndMaturitiesDetails(entityId, ratingDetailId, capiqId, authHeader);
    	return ObjectUtils.isEmpty(details)
				? ResponseHandler.generateResponse(RatingsDataConstant.FAILURE, HttpStatus.NOT_FOUND, null)
				: ResponseHandler.generateResponse(RatingsDataConstant.SUCCESS, HttpStatus.OK, details);
//        return issuesAndMaturitiesService.getIssuesAndMaturitiesDetails(entityId, ratingDetailId, snlId, authHeader);
       }
    
    @Operation(summary ="get debt type dropdown values for an entity)")
    @ApiResponses(value = {
            @ApiResponse(responseCode  = "200", description  = "get debt type dropdown values for an entity ") })
       @GetMapping("/debtTypeDetails/{entityId}/{capiqId}")
       public List<DebtTypes> getDropdownDebtTypes(@PathVariable("entityId") Long entityId,
                                                   @PathVariable("capiqId") Long capiqId,
                                                   @RequestHeader("Authorization") String authHeader) {
        //log.info("@Controller getDropdownDebtTypes method: calling issuesAndMaturitiesService.getDropdownDebtTypes");
        return issuesAndMaturitiesService.getDropdownDebtTypes(entityId, capiqId, authHeader);
       }

    @Operation(summary ="get public issues and maturities History for instrument with particular rating_type_code and instrument_detail_id")
    @ApiResponses(value = {
            @ApiResponse(responseCode  = "200", description  = "get public issues and maturities history for instrument ") })
        @GetMapping("/publicissuesandmaturitiesHistory/{instrumentId}/{ratingTypeCode}/{instrumentDetailId}")
        public List<IssuesAndMaturitiesHistoryPublic> getPublicIssuesAndMaturitiesHistory(@PathVariable("instrumentId") Long instrumentId,
                                                                                          @PathVariable("ratingTypeCode") String ratingTypeCode,
                                                                                          @PathVariable("instrumentDetailId") Long instrumentDetailId) {
            //log.info("@Controller getPublicIssuesAndMaturitiesHistory method: calling issues and maturities history service for instrument");
        
            return issuesAndMaturitiesHistoryPublicService.getPublicIssuesAndMaturitiesHistory(instrumentId, ratingTypeCode, instrumentDetailId);
        }
    
    @Operation(summary ="get pubic debt type dropdown values for an entity)")
    @ApiResponses(value = {
            @ApiResponse(responseCode  = "200", description  = "get debt type dropdown values for an entity ") })
       @GetMapping("/debtTypeDetailsPublic")
       public List<DebtTypes> getDropdownDebtTypesPublic(@RequestParam(value = "entityId") Long entityId) {
        return issuesAndMaturitiesPublicService.getDropdownDebtTypesPublic(entityId);
       }
    
    @Operation(summary ="get issues and maturities History for instrument with particular rating_type_code and instrument_detail_id")
    @ApiResponses(value = {
            @ApiResponse(responseCode  = "200", description  = "get issues and maturities history for instrument ") })
        @GetMapping("/issuesandmaturitiesHistory/{instrumentId}/{ratingTypeCode}/{instrumentDetailId}/{capiqId}")
        public List<IssuesAndMaturitiesHistory> getIssuesAndMaturitiesHistory(@PathVariable("instrumentId") Long instrumentId,
                                                                              @PathVariable("ratingTypeCode") String ratingTypeCode,
                                                                              @PathVariable("instrumentDetailId") Long instrumentDetailId,
                                                                              @PathVariable("capiqId") Long capiqId,
                                                                              @RequestHeader("Authorization") String authHeader) {
            //log.info("@Controller getIssuesAndMaturitiesHistory method: calling issues and maturities history service for instrument");
        
            return issuesAndMaturitiesHistoryService.getIssuesAndMaturitiesHistory(instrumentId, ratingTypeCode, instrumentDetailId, capiqId, authHeader);
        }
    
    @Operation(summary ="get scores and modifiers for entity")
    @ApiResponses(value = {
            @ApiResponse(responseCode  = "200", description  = "get scores and modifiers for entity ") })
       @GetMapping("/scoresandmodifiers/{subSector}/{entityId}/{capiqId}")
       public ResponseEntity<Object> getScoresAndModifiers(@PathVariable("entityId") String entityId,
                                                           @PathVariable("subSector") String subSector,
                                                           @PathVariable("capiqId") Long capiqId,
                                                           @RequestHeader("Authorization") String authHeader) {
        //log.info("@Controller getScoresAndModifiers method: calling scoresAndModifiersService.getScoresAndModifiers");
    	List<ScoresAndModifiers> scores = scoresAndModifiersService.getScoresAndModifiers(entityId, subSector, capiqId, authHeader);
    	return CollectionUtils.isEmpty(scores)
				? ResponseHandler.generateResponse(RatingsDataConstant.FAILURE, HttpStatus.NO_CONTENT, null)
				: ResponseHandler.generateResponse(RatingsDataConstant.SUCCESS, HttpStatus.OK, scores);
       }
 
    @Operation(summary = "get entity current rating")
    @ApiResponses(value = {
        @ApiResponse(responseCode = "200", description = "get current rating for entity") })
        @GetMapping("/entityCurrentRating")
        public EntityCurrentRating getEntityCurrentRating(@RequestParam(value = "entityId") Long entityId) {
        //log.info("@Controller getEntityRatings method: calling ratings service for entity");
        
        return entityCurrentRatingService.getEntityCurrentRating(entityId);
    }

    @Operation(summary = "get entity rating history for last 10 years")
    @ApiResponses(value = {
        @ApiResponse(responseCode = "200", description = "get  rating for entity") })
        @PostMapping(path = "/getRatingHistoryLastTenYrs",  consumes = "application/json")
        public List<RatingHistoryLastTenYrsPublic> getRatingHistoryLastTenYrs(@RequestBody RatingHistoryData ratingHistData,@RequestHeader("Authorization") String authHeader) { 
        log.info("@Controller getRatingHistoryLastTenYrs method: calling ratings service for entity");
        
        return ratingHistoryLastTenYrsService.getRatingHistoryLastTenYrs(ratingHistData,authHeader);
    }

    @Operation(summary = "get peers entity rating ")
    @ApiResponses(value = {
        @ApiResponse(responseCode = "200", description = "get  rating for entity") })
        @PostMapping(path = "/getPeersEntityRatings",  consumes = "application/json")
        public List<PeersEntityRatingsPublic> getPeersEntityRatings(@RequestBody RatingHistoryData ratingHistData,@RequestHeader("Authorization") String authHeader) { 
        log.info("@Controller getPeersEntityRatings method: calling ratings service for entity");
        
        return peersEntityRatingsService.getPeersEntityRatings(ratingHistData,authHeader);
    }
    
    @Operation(summary = "get entity ratings history for last 10 years")
    @ApiResponses(value = {
        @ApiResponse(responseCode = "200", description = "get current rating for peers/suppliers/counterparties") })
        @PostMapping(path = "/getPeersCurrentRatings",  consumes = "application/json")
        public List<PeersCurrentRatings> getPeersCurrentRating(@RequestBody String commaSepOrgIds) {
        
        return ratingHistoryLastTenYrsService.getPeersCurrentRatings(commaSepOrgIds);
    }

    @Operation(summary = "get entity issuers and maturities rating")
    @ApiResponses(value = {
        @ApiResponse(responseCode = "200", description = "get current rating for entity") })
        @GetMapping("/getEntityIssuersRating")
        public List<IssuesAndMaturities> getEntityIssuersRating(@RequestParam(value = "entityId") Long entityId) {
        //log.info("@Controller getEntityRatings method: calling ratings service for entity");
        
        return entityCurrentRatingService.getEntityIssuersRating(entityId);
    }
    
    
    @Operation(summary = "get my ratings ")
    @ApiResponses(value = {
        @ApiResponse(responseCode = "200", description = "get my ratings of dashboard for entity") })
        @GetMapping("/myRating")
        public DashBoardMyRating getDashboardMyRatings(@RequestParam(value = "entityId") Long entityId) {
        log.info("@Controller getDashboardMyRatings method: calling ratings service for entity");
        
        return dashboardMyRatingService.getDashboardMyRatingsDetails(entityId);
    }

    @Operation(summary = "get core org ids for key instns")
    @ApiResponses(value = {@ApiResponse(responseCode = "200", description = "get core org ids for key instns")})
    @PostMapping(path = "/getCoreOrgIds", consumes = "application/json")
    public List<CoreOrgIdKeyInstnMap> getCoreOrgIds(@RequestBody String commaSepKeyInstns) {
        return coreOrgIdService.getCoreOrgIds(commaSepKeyInstns);
    }

    @Operation(summary = "get issues and maturities for entity with no auth check")
    @ApiResponses(value = {
    @ApiResponse(responseCode = "200", description = "get issues and maturities for entity with no auth check") })
    @GetMapping("/entityIssuesMaturities")
    public List<IssuesAndMaturities> getEntityIssuesMaturities(@RequestParam(value = "entityId") Long entityId) {
        log.info("@Controller getEntityIssuesMaturities method: calling issuesAndMaturitiesService.getIssuesAndMaturities");
        return issuesAndMaturitiesService.getIssuesAndMaturities(entityId);
    }

    @Operation(summary = "get entity current rating")
    @ApiResponses(value = {
    @ApiResponse(responseCode = "200", description = "get current rating for entity") })
    @GetMapping("/entityCurrentRatings")
    public EntityCurrentRating getEntityCurrentRatings(@RequestParam(value = "entityId") Long entityId,
                                                       @RequestParam(value = "capiq") Long capiqId,
                                                       @RequestParam(value = "pcFlag",required=false) Long pcFlag,
                                                       @RequestHeader("Authorization") String authHeader) {
        log.info("@Controller getEntityCurrentRatings method: calling ratings service for entity");
        return entityCurrentRatingService.getEntityCurrentRatings(entityId,capiqId,pcFlag,authHeader);
    }
    
    @Operation(summary = "get entity TAC rating")
    @ApiResponses(value = {
    @ApiResponse(responseCode = "200", description = "get current rating for entity") })
    @GetMapping("/entityRatingsTAC")
    public List<EntityRatingsTACPublic> getEntityRatingsTAC(@RequestParam(value = "entityId") Long entityId,
                                                            @RequestParam(value = "capiq") Long capiqId,
                                                            @RequestParam(value = "pcFlag",required=false) Long pcFlag, @RequestHeader("Authorization") String authHeader) {
        log.info("@Controller entityRatingsTAC method: calling ratings service for entity");
        return entityCurrentRatingService.getEntityRatingsTAC(entityId,capiqId,pcFlag,authHeader);
    }


    @Operation(summary = "get TAC ratings History for entity with particular rating_type_code")
    @ApiResponses(value = {@ApiResponse(responseCode = "200", description = "get ratings history for entity ")})
    @GetMapping("/ratingsHistoryTAC")
    public List<EntityRatingsHistoryTAC> getEntityRatingsHistoryTAC(@RequestParam("entityId") Long entityId,
                                                                    @RequestParam("debtTypeCode") String debtTypeCode,
                                                                    @RequestParam("ratingTypeCode") String ratingTypeCode,
                                                                    @RequestParam("capiq") Long capiqId,
                                                                    @RequestParam(value = "pcFlag", required = false) Long pcFlag,
                                                                    @RequestHeader("Authorization") String authHeader) {
        //log.info("@Controller getEntityRatingsHistory method: calling ratings history service for entity");
        return entityRatingsHistoryService.getEntityRatingsHistoryTAC(entityId, debtTypeCode, ratingTypeCode, capiqId, pcFlag, authHeader);
    }


    @Operation(summary = "get core org ids for capiq/keyInsts")
    @ApiResponses(value = {@ApiResponse(responseCode = "200", description = "get core org ids for capiq/keyInsts")})
    @GetMapping(path = "/getCoreOrgIdsByType")
    public List<CoreOrgIdKeyInstnMap> getCoreOrgIdsByTypeandList(@RequestHeader(name = "type") String type, @RequestHeader(name = "values") List<String> idsList) {
        log.info("@Controller getCoreOrgIdsByTypeandList");
        return coreOrgIdService.getCoreOrgIdsByTypeandList(type, idsList);
    }
    
	@Operation(summary = "get capiqids for coreids or sporgids or snlids")
	@ApiResponses(value = {
			@ApiResponse(responseCode = "200", description = "get capiqids for the given coreids/keyInsts/spids") })
	@PostMapping(path = "/getCapiqIdsByType", consumes = "application/json")
	public ResponseEntity<Object> getCapiqIdsbyCoreSnlSpIds(@RequestBody EntityTypeIdsRequest entityTypeIdsRequest) {
		if (!ObjectUtils.isEmpty(entityTypeIdsRequest) && !ObjectUtils.isEmpty(entityTypeIdsRequest.getEntityType())
				&& (RatingsDataConstant.COREID_STR.equalsIgnoreCase(entityTypeIdsRequest.getEntityType())
						|| RatingsDataConstant.SNLID_STR.equalsIgnoreCase(entityTypeIdsRequest.getEntityType())
						|| RatingsDataConstant.SPID_STR.equalsIgnoreCase(entityTypeIdsRequest.getEntityType()))) {
			EntityTypeIdsResponse entityTypeIdsResponse = coreOrgIdService
					.getCapiqIdsbyCoreSnlSpIds(entityTypeIdsRequest);
			return CollectionUtils.isEmpty(entityTypeIdsResponse.getEntityIdCapIQIdMap())
					? ResponseHandler.generateResponse(RatingsDataConstant.FAILURE, HttpStatus.NOT_FOUND, null)
					: ResponseHandler.generateResponse(RatingsDataConstant.SUCCESS, HttpStatus.OK,
							entityTypeIdsResponse);
		}
		return ResponseHandler.generateResponse(RatingsDataConstant.FAILURE, HttpStatus.BAD_REQUEST, null);
	}
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\controller\CriteriaArticleController.java

package com.spglobal.ratings.ratingsdata.controller;

import com.spglobal.ratings.ratingsdata.entity.CriteriaArticlesByTypes;
import com.spglobal.ratings.ratingsdata.entity.CriteriaTypeLookupEntity;
import com.spglobal.ratings.ratingsdata.service.CriteriaArticleService;
import com.spglobal.ratings.ratingsdata.util.RatingsDataConstant;
import com.spglobal.ratings.ratingsdata.util.ResponseHandler;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.util.ObjectUtils;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.Optional;

@RestController
@RequestMapping(path = RatingsDataConstant.BASE_PATH, produces = MediaType.APPLICATION_JSON_VALUE)
public class CriteriaArticleController {
	
	@Autowired
	CriteriaArticleService criteriaArticleService;

	@GetMapping("/getCriteriaType")
	public ResponseEntity<Object> getCriteriaTypeDropdownValues() {		
		List<CriteriaTypeLookupEntity> criteriaTypeRes = null;
		try {
			criteriaTypeRes = criteriaArticleService.getCriteriaTypes();
			return ResponseHandler.generateResponse(RatingsDataConstant.SUCCESS, HttpStatus.OK, criteriaTypeRes);
		}catch (Exception e) {
			return ResponseHandler.generateResponse(RatingsDataConstant.FAILURE, HttpStatus.INTERNAL_SERVER_ERROR, criteriaTypeRes);
		}
		 
	}

	@Operation(summary = "getCriteriaArticlesByTypes")
	@ApiResponses(value = {
			@ApiResponse(responseCode = "200", description = "get Criteria Articles") })
	@PostMapping("/getCriteriaArticlesByTypes")
	public ResponseEntity<Object> getCriteriaArticlesByTypes(@RequestBody CriteriaArticlesByTypes criteriaArticlesByTypes) {
		Optional<String> archiveInd = Optional.ofNullable(criteriaArticlesByTypes.getArchiveInd());
		List<CriteriaArticlesByTypes> response = criteriaArticleService.getCriteriaArticlesByTypes(criteriaArticlesByTypes.getCriteriaTypeId(), archiveInd.orElse(null));
		return ObjectUtils.isEmpty(response)
				? ResponseHandler.generateResponse(RatingsDataConstant.FAILURE, HttpStatus.NOT_FOUND, null)
				: ResponseHandler.generateResponse(RatingsDataConstant.SUCCESS, HttpStatus.OK, response);
	}


}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\controller\CyberRiskAssessmentController.java

package com.spglobal.ratings.ratingsdata.controller;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.spglobal.ratings.ratingsdata.entity.PeerSuppliersPortfolioContents;
import com.spglobal.ratings.ratingsdata.model.Response;
import com.spglobal.ratings.ratingsdata.service.CyberRiskAssessmentPublicService;
import com.spglobal.ratings.ratingsdata.util.RatingsDataConstant;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@RestController
@RequestMapping(path = RatingsDataConstant.BASE_PATH, produces = MediaType.APPLICATION_JSON_VALUE)
public class CyberRiskAssessmentController {
	
	
	 @Autowired
	 private CyberRiskAssessmentPublicService craPeersPortfolioPublicService;
	 
	 @Operation(summary = "get peers portfolio content for cyber peers")
	 @ApiResponses(value = {
	            @ApiResponse(responseCode = "200", description = "get contents of cyber peers") })	   
	@GetMapping(path = "/cyberPeersPortfolioContents")
	public Response<List<PeerSuppliersPortfolioContents>> getCyberPeersPortfolioContents(
			@RequestParam("keyInstnIds") List<String> keyInstnIds, @RequestParam("domain") Optional<String> domain) {
		Response<List<PeerSuppliersPortfolioContents>> response = new Response<List<PeerSuppliersPortfolioContents>>();
		
		try {
			String domainName = domain.orElse("");
			log.info("--optional param domain-"+domain);
			response.setElements(craPeersPortfolioPublicService.getCyberPeersPortfolioContents(keyInstnIds,domainName));
			response.setName("CyberPeerPortfolioContents");
			response.setDescription("Data for CyberPeerPortfolioContents");
			response.setStatus(Response.Status.SUCCESS);
			response.setMessage("For valid input sucessfully retrieves the data for CyberPeerPortfolioContents");
			log.info("Getting data for CyberPeerPortfolioContents");
		} catch (Exception exception) {
			log.error("Exception: @Controller -> getCyberPeerPortfolioContents: {}", exception.getMessage());
			response.setStatus(Response.Status.FAILURE);
			response.setMessage("Failed to retrieve the data for getCyberPeerPortfolioContents");
		}
		return response;
	}

}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\controller\DefinitionsController.java

package com.spglobal.ratings.ratingsdata.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.util.CollectionUtils;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.spglobal.ratings.ratingsdata.entity.DefinitionsConfig;
import com.spglobal.ratings.ratingsdata.service.DefinitionsConfigService;
import com.spglobal.ratings.ratingsdata.util.RatingsDataConstant;
import com.spglobal.ratings.ratingsdata.util.ResponseHandler;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@RestController
@RequestMapping(path = RatingsDataConstant.BASE_PATH, produces = MediaType.APPLICATION_JSON_VALUE)
public class DefinitionsController {

	@Autowired
	private DefinitionsConfigService definitionsConfigService;

	@Operation(summary = "get definitions for scores and modifiers")
	@ApiResponses(value = { @ApiResponse(responseCode = "200", description = "get definitions for specified type") })
	@GetMapping("/definitionsByType")
	public ResponseEntity<Object> getDefinitionsByType(
			@RequestParam(name = "type", required = true) String analyticCaseType,
			@RequestParam(name = "elementType", required = false) List<String> dataElementType,
			@RequestParam(name = "elementGroup", required = false) List<String> dataElementGroup) {

		try {
			List<DefinitionsConfig> entityResponse = definitionsConfigService.getDefinitionDetails(analyticCaseType,
					dataElementType, dataElementGroup);
			return CollectionUtils.isEmpty(entityResponse)
					? (ResponseHandler.generateResponse(RatingsDataConstant.FAILURE, HttpStatus.NOT_FOUND, null))
					: (ResponseHandler.generateResponse(RatingsDataConstant.SUCCESS, HttpStatus.OK, entityResponse));
		} catch (Exception exception) {
			log.error("Exception @DefinitionsController getDefinitionsByType method --> Failed: {}",
					exception.getMessage());
			return ResponseHandler.generateResponse(RatingsDataConstant.FAILURE, HttpStatus.INTERNAL_SERVER_ERROR,
					exception.getMessage());
		}
	}
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\controller\FinancialAndReconController.java

package com.spglobal.ratings.ratingsdata.controller;

import java.util.Collection;
import java.util.HashMap;
import java.util.List;
import java.util.Set;

import org.apache.commons.lang3.ObjectUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.util.CollectionUtils;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.spglobal.ratings.ratingsdata.entity.CurrencyExchangeRate;
import com.spglobal.ratings.ratingsdata.entity.CurrencyLookupEntity;
import com.spglobal.ratings.ratingsdata.entity.FinancialPeers;
import com.spglobal.ratings.ratingsdata.entity.LanguageTranslationEntity;
import com.spglobal.ratings.ratingsdata.entity.MNemonicDetailsEntity;
import com.spglobal.ratings.ratingsdata.entity.PeriodDetailsEntity;
import com.spglobal.ratings.ratingsdata.model.EntitiesPayload;
import com.spglobal.ratings.ratingsdata.model.ReconciliationData;
import com.spglobal.ratings.ratingsdata.model.ReconciliationResponseData;
import com.spglobal.ratings.ratingsdata.service.CurrencyExchangeRateService;
import com.spglobal.ratings.ratingsdata.service.FinancialRatingService;
import com.spglobal.ratings.ratingsdata.service.ReconciliationRatingService;
import com.spglobal.ratings.ratingsdata.util.RatingsDataConstant;
import com.spglobal.ratings.ratingsdata.util.ResponseHandler;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;

//@Slf4j
@RestController
@RequestMapping(path = RatingsDataConstant.BASE_PATH, produces = MediaType.APPLICATION_JSON_VALUE)
public class FinancialAndReconController {

	@Autowired
	FinancialRatingService financialRatingService;

	@Autowired
	private CurrencyExchangeRateService currencyExchangeRateService;

	@Autowired
	ReconciliationRatingService reconciliationRatingService;

	@GetMapping("/financial")
	public ResponseEntity<Object> getFinancialRatingDetails(@RequestParam("coreId") Long coreId,
			@RequestParam("template") String templateType,
			@RequestParam(name = "periodType", required = false) String periodType,
			@RequestParam(name = "trgCurrency") String trgCurrency) {
		if (ObjectUtils.isNotEmpty(periodType) && !(RatingsDataConstant.QUARTERLY.equalsIgnoreCase(periodType)
				|| RatingsDataConstant.ANNUALLY.equalsIgnoreCase(periodType))) {
			return ResponseHandler.generateResponse(RatingsDataConstant.FAILURE, HttpStatus.BAD_REQUEST,
					"Invalid PeriodType");
		}

		if (!isValidCurrency(trgCurrency)) {
			return ResponseHandler.generateResponse(RatingsDataConstant.FAILURE, HttpStatus.BAD_REQUEST,
					"Invalid Currency Code");
		}

		Collection<HashMap<String, Object>> entityResponse = financialRatingService.getFinancialRatingDetails(coreId,
				templateType, periodType, trgCurrency);
		return ResponseHandler.generateResponse(RatingsDataConstant.SUCCESS, HttpStatus.OK, entityResponse);
	}

	@GetMapping("/financial/custom")
	public ResponseEntity<Object> getCustomFinancialRatingDetails(@RequestParam("coreId") Long coreId,
			@RequestParam("template") String templateType, @RequestParam("finPeriodIdList") List<String> periods,
			@RequestParam(name = "trgCurrency") String trgCurrency) {
		if (!isValidCurrency(trgCurrency)) {
			return ResponseHandler.generateResponse(RatingsDataConstant.FAILURE, HttpStatus.BAD_REQUEST,
					"Invalid Currency Code");
		}
		Collection<HashMap<String, Object>> entityResponse = financialRatingService
				.getCustomFinancialRatingDetails(coreId, templateType, periods, trgCurrency);
		return ResponseHandler.generateResponse(RatingsDataConstant.SUCCESS, HttpStatus.OK, entityResponse);
	}

	@GetMapping("/financial/periods")
	public ResponseEntity<Object> getFinancialPeriods(@RequestParam("coreId") Long coreId,
			@RequestParam("periodList") List<String> periods) {
		List<PeriodDetailsEntity> entityResponse = financialRatingService.getFinancialPeriods(coreId, periods);
		return ResponseHandler.generateResponse(RatingsDataConstant.SUCCESS, HttpStatus.OK, entityResponse);
	}

	@GetMapping("/financial/mnemonic")
	public ResponseEntity<Object> getMNemonic(@RequestParam("template") String templateName,
			@RequestParam("trgCurrency") String trgCurrency) {
		if (!isValidCurrency(trgCurrency)) {
			return ResponseHandler.generateResponse(RatingsDataConstant.FAILURE, HttpStatus.BAD_REQUEST,
					"Invalid Currency Code");
		}
		List<MNemonicDetailsEntity> entityResponse = financialRatingService.getMNemonic(templateName, trgCurrency);
		return ResponseHandler.generateResponse(RatingsDataConstant.SUCCESS, HttpStatus.OK, entityResponse);
	}

	@GetMapping("/financial/exchangeRates")
	public ResponseEntity<Object> getCurrencyExchangeRates(@RequestParam("asOfDates") Set<Long> asOfDates,
			@RequestParam("trgCurrency") String trgCurrency) {
		if (!isValidCurrency(trgCurrency)) {
			return ResponseHandler.generateResponse(RatingsDataConstant.FAILURE, HttpStatus.BAD_REQUEST,
					"Invalid Currency Code");
		}
		List<CurrencyExchangeRate> currencyExchangeRates = currencyExchangeRateService
				.getCurrencyExchangeRates(asOfDates, trgCurrency);
		return ResponseHandler.generateResponse(RatingsDataConstant.SUCCESS, HttpStatus.OK, currencyExchangeRates);
	}

	@Operation(summary = "Get peer entities financial data")
	@ApiResponses(value = {
			@ApiResponse(responseCode = "200", description = "get peer entities financial data for peers/suppliers/counterparties") })
	@PostMapping(path = "/financial/getPeersFinancial", consumes = "application/json")
	public ResponseEntity<Object> getFinancialPeers(@RequestBody EntitiesPayload entities) {
		List<String> commaSepEntities = entities.getEntityIds();
		String template = entities.getTemplate();
		String currency = entities.getCurrency();
		if (CollectionUtils.isEmpty(commaSepEntities) || template.isEmpty()) {
			return ResponseHandler.generateResponse(RatingsDataConstant.FAILURE, HttpStatus.BAD_REQUEST,
					"Invalid Parameters");
		} else {
			List<FinancialPeers> financialPeers = financialRatingService.getFinancialPeers(commaSepEntities, template,
					currency);
			return ResponseHandler.generateResponse(RatingsDataConstant.SUCCESS, HttpStatus.OK, financialPeers);
		}
	}

	@GetMapping("/reconciliation/v2")
	public ResponseEntity<Object> getReconciliationRatingDetails(@RequestParam("coreId") Long coreId,
			@RequestParam(name = "periodType", required = false) String periodType,
			@RequestParam(name = "trgCurrency") String trgCurrency) {
		// If period type is empty then by default we will fetch annual period data
		if (ObjectUtils.isNotEmpty(periodType) && !(RatingsDataConstant.QUARTERLY.equalsIgnoreCase(periodType)
				|| RatingsDataConstant.ANNUALLY.equalsIgnoreCase(periodType))) {
			return ResponseHandler.generateResponse(RatingsDataConstant.FAILURE, HttpStatus.BAD_REQUEST,
					"Invalid PeriodType");
		}
		if (!isValidCurrency(trgCurrency)) {
			return ResponseHandler.generateResponse(RatingsDataConstant.FAILURE, HttpStatus.BAD_REQUEST,
					"Invalid Currency Code");
		}
		List<ReconciliationData> entityResponse = reconciliationRatingService.getReconciliationRatingDetails(coreId,
				periodType, trgCurrency);
		return ResponseHandler.generateResponse(RatingsDataConstant.SUCCESS, HttpStatus.OK, entityResponse);
	}

	@GetMapping("/reconciliation/v2/custom")
	public ResponseEntity<Object> getCustomReconciliationRatingDetails(@RequestParam("coreId") Long coreId,
			@RequestParam("periodIdList") List<String> periods,
			@RequestParam(name = "trgCurrency") String trgCurrency) {
		if (!isValidCurrency(trgCurrency)) {
			return ResponseHandler.generateResponse(RatingsDataConstant.FAILURE, HttpStatus.BAD_REQUEST,
					"Invalid Currency Code");
		}
		List<ReconciliationData> entityResponse = reconciliationRatingService
				.getCustomReconciliationRatingDetails(coreId, periods, trgCurrency);
		return ResponseHandler.generateResponse(RatingsDataConstant.SUCCESS, HttpStatus.OK, entityResponse);
	}
	
	@GetMapping("/reconciliation")
	public ResponseEntity<Object> getReconciliationRatingDetailsV2(@RequestParam("coreId") Long coreId,
			@RequestParam(name = "periodType", required = false) String periodType,
			@RequestParam(name = "trgCurrency") String trgCurrency) {
		// If period type is empty then by default we will fetch annual period data
		if (ObjectUtils.isNotEmpty(periodType) && !(RatingsDataConstant.QUARTERLY.equalsIgnoreCase(periodType)
				|| RatingsDataConstant.ANNUALLY.equalsIgnoreCase(periodType))) {
			return ResponseHandler.generateResponse(RatingsDataConstant.FAILURE, HttpStatus.BAD_REQUEST,
					"Invalid PeriodType");
		}
		if (!isValidCurrency(trgCurrency)) {
			return ResponseHandler.generateResponse(RatingsDataConstant.FAILURE, HttpStatus.BAD_REQUEST,
					"Invalid Currency Code");
		}
		ReconciliationResponseData entityResponse = reconciliationRatingService.getReconciliationRatingDetailsV2(coreId, periodType,
				trgCurrency);
		return ResponseHandler.generateResponse(RatingsDataConstant.SUCCESS, HttpStatus.OK, entityResponse);
	}

	@GetMapping("/reconciliation/custom")
	public ResponseEntity<Object> getCustomReconciliationRatingDetailsV2(@RequestParam("coreId") Long coreId,
			@RequestParam("periodIdList") List<String> periods,
			@RequestParam(name = "trgCurrency") String trgCurrency) {
		if (!isValidCurrency(trgCurrency)) {
			return ResponseHandler.generateResponse(RatingsDataConstant.FAILURE, HttpStatus.BAD_REQUEST,
					"Invalid Currency Code");
		}
		ReconciliationResponseData entityResponse = reconciliationRatingService.getCustomReconciliationRatingDetailsV2(coreId, periods,
				trgCurrency);
		return ResponseHandler.generateResponse(RatingsDataConstant.SUCCESS, HttpStatus.OK, entityResponse);
	}

	@GetMapping("/currencyLookup")
	public ResponseEntity<Object> getCurrencyLookup() {
		List<CurrencyLookupEntity> currencyLookup = currencyExchangeRateService.findByCurrencyLookup();
		return ResponseHandler.generateResponse(RatingsDataConstant.SUCCESS, HttpStatus.OK, currencyLookup);
	}

	@GetMapping("/translation")
	public ResponseEntity<Object> getForeignTranslationDetails(@RequestParam("culture") String culture, @RequestParam("type") String type ) {
		if (culture.equalsIgnoreCase("en-US")) {
			List<CurrencyLookupEntity> currencyLookup = currencyExchangeRateService.findByCurrencyLookup();
			return ResponseHandler.generateResponse(RatingsDataConstant.SUCCESS, HttpStatus.OK, currencyLookup);			
		} else {			
			List<LanguageTranslationEntity> currenctLanguageTranslation = currencyExchangeRateService
					.findCurrencyByLanguageCodeAndType(culture, type);
			return ResponseHandler.generateResponse(RatingsDataConstant.SUCCESS, HttpStatus.OK,
					currenctLanguageTranslation);
		}
	}

//
//	@GetMapping("/getcache")
//	public void getCacheKeys() {
//		utility.showKeys();
//	}
	
	private boolean isValidCurrency(String currencyCode) {
		return currencyExchangeRateService.isValidCurrencyCode(currencyCode);
	}
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\controller\InvestorSentimentController.java

package com.spglobal.ratings.ratingsdata.controller;

import com.spglobal.ratings.ratingsdata.entity.InvestorSentimentNumbersRecentStudies;
import com.spglobal.ratings.ratingsdata.service.InvestorSentimentServiceImpl;
import com.spglobal.ratings.ratingsdata.util.RatingsDataUtil;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.web.bind.annotation.*;

import com.spglobal.ratings.ratingsdata.entity.InvestorSentimentCommentry;
import com.spglobal.ratings.ratingsdata.model.InvestorSentimentSectorResponse;
import com.spglobal.ratings.ratingsdata.model.Response;
import com.spglobal.ratings.ratingsdata.service.InvestorSentimentSectorService;
import com.spglobal.ratings.ratingsdata.util.RatingsDataConstant;

import java.util.ArrayList;
import java.util.List;

import lombok.extern.slf4j.Slf4j;

@Slf4j
@RestController
@RequestMapping(path = RatingsDataConstant.BASE_PATH, produces = MediaType.APPLICATION_JSON_VALUE)
public class InvestorSentimentController {

	@Autowired
	InvestorSentimentSectorService sectorService;

	@Autowired
	InvestorSentimentServiceImpl investorSentimentService;

	@Autowired
	RatingsDataUtil ratingsDataUtil;

	@GetMapping("/investorsentiment/sectors")
	public Response<InvestorSentimentSectorResponse> getDefaultSelectIndustry(@RequestParam("profileSpecialization") String profileSpecialization,
																			  @RequestParam("entityId") Long entityId) {
		log.info("@InvestorSentimentController getDefaultSelectIndustry method: calling service for sector");
		Response<InvestorSentimentSectorResponse> response = new Response<InvestorSentimentSectorResponse>();
		try {
			response.setName("Sectors");
			response.setDescription("Investor Sentiment sectors");
			log.info("Getting Investor Sentiment sectors");
			response.setElements(sectorService.getSectorsAndDefaultIndustry(profileSpecialization,entityId));
			response.setStatus(Response.Status.SUCCESS);
			response.setMessage("Sucessfully retrieved Investor Sentiment sectors");
		} catch (Exception exception) {
			log.error("Exception: @InvestorSentimentController -> getDefaultSelectIndustry: {}", exception.getMessage());
			response.setStatus(Response.Status.FAILURE);
			response.setMessage("Failed to retrieve the Investor Sentiment sectors");
		}
		return response;
	}

	@Operation(summary = "get By-The-Numbers and Recent Studies for IndustryId")
	@ApiResponses(value = {
			@ApiResponse(responseCode = "200", description = "get By-The-Numbers and Recent Studies for IndustryId") })
	@PostMapping("/investorsentiment/getNumbersByIndustryAndType")
	public List<InvestorSentimentNumbersRecentStudies> getNumbersByIndustryAndType(@RequestBody InvestorSentimentNumbersRecentStudies investorSentimentNumbersRecentStudies) {
		log.info("@InvestorSentimentController getNumbersByIndustryAndType({})", ratingsDataUtil.sanitizeString(String.valueOf(investorSentimentNumbersRecentStudies)));
		List<InvestorSentimentNumbersRecentStudies> investorSentimentNumbersRecentStudiesList = new ArrayList<>();
		try {
			investorSentimentNumbersRecentStudiesList = investorSentimentService.getInvestorSentimentNumbersByIndustryIdAndType(investorSentimentNumbersRecentStudies.getIndustryId(), investorSentimentNumbersRecentStudies.getType());
		} catch (Exception exception) {
			log.error("Exception: @InvestorSentimentController -> getNumbersByIndustryAndType: {}", exception.getMessage());
		}
		return investorSentimentNumbersRecentStudiesList;
	}

	@Operation(summary = "this method gets Commentry by Industry Id")
	@ApiResponses(value = {@ApiResponse(responseCode = "200", description = "get Commentry IndustryId") })
	@GetMapping("/investorsentiment/getCommentry")
	public List<InvestorSentimentCommentry> getInvestorSentimentCommentryByIndustryId(@RequestParam("industryId") Long industryId) {
		log.info("@ConfigController commentry method: calling commentry");
		List<InvestorSentimentCommentry> investorSentimentCommentryList = new ArrayList<>();
		try {
			investorSentimentCommentryList = investorSentimentService.getInvestorSentimentCommentryByIndustryId(industryId);
		} catch (Exception exception) {
			log.error("Exception: @InvestorSentimentController -> getCommentry: {}", exception.getMessage());
		}
		return investorSentimentCommentryList;
	}

	@GetMapping("/investorsentiment/sectorsByApp")
	public Response<InvestorSentimentSectorResponse> getDefaultSelectIndustryByApplication(@RequestParam("application") String application,
																			  @RequestParam("entityId") Long entityId) {
		log.info("@InvestorSentimentController getDefaultSelectIndustry method: calling service for sector");
		Response<InvestorSentimentSectorResponse> response = new Response<InvestorSentimentSectorResponse>();
		try {
			response.setName("Sectors");
			response.setDescription("Investor Sentiment sectors");
			log.info("Getting Investor Sentiment sectors");
			response.setElements(sectorService.getSectorsAndDefaultIndustrByApp(application,entityId));
			response.setStatus(Response.Status.SUCCESS);
			response.setMessage("Sucessfully retrieved Investor Sentiment sectors");
		} catch (Exception exception) {
			log.error("Exception: @InvestorSentimentController -> getDefaultSelectIndustry: {}", exception.getMessage());
			response.setStatus(Response.Status.FAILURE);
			response.setMessage("Failed to retrieve the Investor Sentiment sectors");
		}
		return response;
	}


}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\controller\MultimediaController.java

package com.spglobal.ratings.ratingsdata.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.spglobal.ratings.ratingsdata.entity.MultimediaPodcasts;
import com.spglobal.ratings.ratingsdata.entity.MultimediaSector;
import com.spglobal.ratings.ratingsdata.service.MultimediaService;
import com.spglobal.ratings.ratingsdata.util.RatingsDataConstant;
import com.spglobal.ratings.ratingsdata.util.ResponseHandler;

import lombok.extern.slf4j.Slf4j;

@Slf4j
@RestController
@RequestMapping(path = RatingsDataConstant.BASE_PATH, produces = MediaType.APPLICATION_JSON_VALUE)
public class MultimediaController {
	
	@Autowired
	MultimediaService multiMediaService;
	
	@GetMapping("/multimedia/sectorlist")
	public ResponseEntity<?> getSectorSubSectorTree() {
		
		log.info("@MultimediaController getSectorSubSectorTree method: calling service for sector tree");
		try {
			List<MultimediaSector> result = multiMediaService.getSectorSubSecotrTree();
			return ResponseHandler.generateResponse(RatingsDataConstant.SUCCESS, HttpStatus.OK, result);
		} catch (Exception e) {
			log.error("Exception: @MultimediaController -> getSectorSubSectorTree: {}", e.getMessage());
			return ResponseHandler.generateResponse(RatingsDataConstant.FAILURE, HttpStatus.INTERNAL_SERVER_ERROR,
					e.getMessage());

		}
	}
	
	@GetMapping("/multimedia/podcasts")
	public ResponseEntity<?> getVideosAndPodCasts(@RequestParam("fileType") String fileType,
			@RequestParam(name="limit", required = false) Integer limit) {
		
		log.info("@MultimediaController getVideosAndPodCasts method: calling service for video podcasts");
		try {
			List<MultimediaPodcasts> result = multiMediaService.getVideosAndPodCasts(fileType, limit);
			return ResponseHandler.generateResponse(RatingsDataConstant.SUCCESS, HttpStatus.OK, result);
		} catch (Exception e) {
			log.error("Exception: @MultimediaController -> getVideosAndPodCasts: {}", e.getMessage());
			return ResponseHandler.generateResponse(RatingsDataConstant.FAILURE, HttpStatus.INTERNAL_SERVER_ERROR,
					e.getMessage());

		}
	}


}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\controller\PeersManagementController.java

package com.spglobal.ratings.ratingsdata.controller;

import java.util.List;
import java.util.Map;

import org.apache.commons.lang3.ObjectUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.spglobal.ratings.ratingsdata.entity.UspfPeerPortfolioData;
import com.spglobal.ratings.ratingsdata.model.AnalystPeerVo;
import com.spglobal.ratings.ratingsdata.model.Response;
import com.spglobal.ratings.ratingsdata.service.PeersManagementService;
import com.spglobal.ratings.ratingsdata.util.RatingsDataConstant;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@RestController
@RequestMapping(path = RatingsDataConstant.BASE_PATH, produces = MediaType.APPLICATION_JSON_VALUE)
public class PeersManagementController {

	@Autowired
	private PeersManagementService peersManagementService;

	@Operation(summary = "Get analyst peers info by key_instn_id or core_id")
	@ApiResponses(value = {
			@ApiResponse(responseCode = "200", description = "Get analyst peers info by key_instn_id or core_id or capiq id") })
	@GetMapping("/getAnalystPeers")
	public Response<List<? extends AnalystPeerVo>> getAnalystPeers(@RequestParam(name = "keyInstn", required = false) String keyInstn,
																   @RequestParam(name = "coreId", required = false) Long coreId,
																   @RequestParam(name = "capiq", required = false) String capiqId) {
		log.info("@PeerManagmentController getAnalystPeers --> fetching analyst peers");

		Response<List<? extends AnalystPeerVo>> response = new Response<List<? extends AnalystPeerVo>>();
		response.setName("S&P Analyst Peers");
		response.setDescription("S&P Analyst Peers");

		try {
			if (ObjectUtils.isEmpty(coreId) && ObjectUtils.isEmpty(keyInstn) && ObjectUtils.isEmpty(capiqId)) {
				log.error("IllegalArgumentException @PeersManagementController getAnalystPeers() --> Failed");
				response.setStatus(Response.Status.FAILURE);
				response.setMessage("Request parameters should not to be null");
				return response;
			}

			response.setValue(peersManagementService.getPeersById(coreId, keyInstn, capiqId));
			response.setStatus(Response.Status.SUCCESS);
			response.setMessage("Sucessfully retrieved the Analyst Peers");
		} catch (Exception exception) {
			log.error("Exception: @PeersManagementController -> getAnalystPeers: " + exception.getMessage());
			response.setStatus(Response.Status.FAILURE);
			response.setMessage("Failed to retrieve the analyst peers info for KeyInstn [" + keyInstn + "], CoreId["
					+ coreId + "] , CapiqId["+capiqId+"] {}" + exception.getMessage());
		}
		return response;
	}

	@Operation(summary = "Get peer portfolio contents info by asIds")
	@ApiResponses(value = {
			@ApiResponse(responseCode = "200", description = "Get peer portfolio contents info by asIds") })
	@GetMapping("/getUspfPortfolioContents")
	public Response<Map<String, Map<String, Map<String, List<UspfPeerPortfolioData>>>>> getUspfPortfolioContents(
			@RequestParam(name = "asIds") List<Long> asIds) {
		log.info("@PeerManagmentController getUspfPortfolioContents --> fetching peer portfolio contents");

		Response<Map<String, Map<String, Map<String, List<UspfPeerPortfolioData>>>>> response = new Response<Map<String, Map<String, Map<String, List<UspfPeerPortfolioData>>>>>();
		response.setName("USPF peer portfolio contents");
		response.setDescription("USPF peer portfolio contents");

		try {
			if (ObjectUtils.isEmpty(asIds)) {
				log.error("IllegalArgumentException @PeersManagementController getUspfPortfolioContents() --> Failed");
				throw new IllegalArgumentException("asIds parameter should not to be null");
			}

			response.setElements(peersManagementService.getUspfPeerPortfolioContents(asIds));
			response.setStatus(Response.Status.SUCCESS);
			response.setMessage("Sucessfully retrieved the Peer portfolio contents");
		} catch (Exception exception) {
			log.error("Exception: @PeersManagementController -> getUspfPortfolioContents: " + exception.getMessage());
			response.setStatus(Response.Status.FAILURE);
			response.setMessage(
					"Failed to retrieve the peer protfolio info for asIds [" + asIds + "] " + exception.getMessage());
		}
		return response;
	}

}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\controller\RatingArticlesController.java

package com.spglobal.ratings.ratingsdata.controller;

import com.spglobal.ratings.ratingsdata.entity.RatingArticleTypes;
import com.spglobal.ratings.ratingsdata.entity.RatingArticles;
import com.spglobal.ratings.ratingsdata.entity.RatingCriteriaArticles;
import com.spglobal.ratings.ratingsdata.model.*;
import com.spglobal.ratings.ratingsdata.service.RatingArticlesPublicPvtService;
import com.spglobal.ratings.ratingsdata.service.RatingArticlesService;
import com.spglobal.ratings.ratingsdata.service.RatingCriteriaArticlesService;
import com.spglobal.ratings.ratingsdata.util.RatingArticlesResponseHandler;
import com.spglobal.ratings.ratingsdata.util.RatingsDataConstant;
import com.spglobal.ratings.ratingsdata.util.ResponseHandler;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@Slf4j
@RestController
@RequestMapping(path = RatingsDataConstant.BASE_PATH, produces = MediaType.APPLICATION_JSON_VALUE)
public class RatingArticlesController {

	@Autowired
	private RatingCriteriaArticlesService ratingCriteriaArticlesService;

	@Autowired
	private RatingArticlesService ratingArticlesService;
	
	@Autowired
	private RatingArticlesPublicPvtService ratingArticlesPublicPvtService;

	@Operation(summary = "get rating criteria articles by rating_detail_id")
	@ApiResponses(value = {
			@ApiResponse(responseCode = "200", description = "get rating criteria articles by rating_detail_id") })
	@GetMapping("/getRatingCriteriaArticles")
	public Response<List<? extends RatingCriteriaArticles>> getRatingCriteriaArticles(
			@RequestParam(value = "capiq") Long capiqId,
			@RequestParam(value = "ratingDetailId") Long ratingDetailId,
			@RequestParam(value = "confidential") boolean confidential,
			@RequestHeader HttpHeaders httpHeaders) {
		log.info("@Controller getRatingCriteriaArticles method: calling service for rating criteria articles");

		Response<List<? extends RatingCriteriaArticles>> response = new Response<List<? extends RatingCriteriaArticles>>();
		response.setName("Rating Criteria Articles");
		response.setDescription("Rating Criteria Articles for Rating Detail Id");
		try {
			response.setElements(ratingCriteriaArticlesService.getRatingCriteriaArticles(capiqId, ratingDetailId, confidential, httpHeaders));
			response.setStatus(Response.Status.SUCCESS);
			response.setMessage("Sucessfully retrieved the Rating Criteria Articles for CapIqId [" + capiqId + "], RatingDetailId [" + ratingDetailId + "]");
		} catch (Exception exception) {
			log.error("Exception: @Controller -> getRatingCriteriaArticles: " + exception.getMessage());
			response.setStatus(Response.Status.FAILURE);
			response.setMessage("Failed to retrieve the Rating Criteria Articles for CapIqId [" + capiqId + "], RatingDetailId [" + ratingDetailId + "]");
		}
		return response;
	}

	//View public rating articles
	@Operation(summary = "get rating articles by entity_id")
	@ApiResponses(value = { @ApiResponse(responseCode = "200", description = "get rating articles by entity_id") })
	@PostMapping("/getRatingArticles")
	public Response<List<? extends RatingArticles>> getRatingArticles(
			@RequestBody RatingArticlesDetailSearch ratingArticlesDetailSearch,
			@RequestHeader HttpHeaders httpHeaders) {
		log.info("@Controller getRatingArticles method: calling service for rating articles");

		Response<List<? extends RatingArticles>> response = new Response<List<? extends RatingArticles>>();
		response.setName("Rating Articles");
		response.setDescription("Rating Articles for Entity Id");
		try {
			response.setElements(ratingArticlesService.getRatingArticles(ratingArticlesDetailSearch));
			response.setStatus(Response.Status.SUCCESS);
			response.setMessage("Sucessfully retrieved the Rating Articles for Entity [" + ratingArticlesDetailSearch.getEntityId() + "]");
		} catch (Exception exception) {
			log.error("Exception: @Controller -> getRatingArticles: " + exception.getMessage());
			response.setStatus(Response.Status.FAILURE);
			response.setMessage("Failed to retrieve the Rating Articles for Entity [" + ratingArticlesDetailSearch.getEntityId() + "]: " + exception.getMessage());
		}
		return response;
	}
	
	@Operation(summary = "get public pvt rating articles by entity_id")
	@ApiResponses(value = { @ApiResponse(responseCode = "200", description = "get public pvt rating articles by entity_id") })
	@PostMapping("/getRatingArticlesPublicPvt/{capiqId}")
	public ResponseEntity<Object> getPublicPvtRatingArticles(
			@PathVariable("capiqId") Long capiqId,
			@RequestBody RatingArticlesSearch ratingArticlesSearch, 
			@RequestHeader("Authorization") String authHeader,
			@RequestHeader HttpHeaders httpHeaders) {
		log.info("@Controller getPublicPvtRatingArticles method: calling service for rating articles");
		
		try {
			RatingArticlesData ratingArticlesData = ratingArticlesPublicPvtService.getRatingArticles(ratingArticlesSearch, capiqId, authHeader);
			if(ratingArticlesData.getMessage().equals("The User is not entitiled to view non-public articles for entity")) { 
				return ResponseHandler.generateResponse(RatingsDataConstant.FAILURE, HttpStatus.UNAUTHORIZED, ratingArticlesData.getMessage());
			} else if(ratingArticlesData.getMessage().equals("success") && ratingArticlesData.getRatingArticles().isEmpty()) {
				return ResponseHandler.generateResponse(RatingsDataConstant.SUCCESS, HttpStatus.NO_CONTENT, null);
			} else {
				return ResponseHandler.generateResponse(RatingsDataConstant.SUCCESS, HttpStatus.OK, ratingArticlesData.getRatingArticles());
			}
		}catch(Exception e) {
			log.error("Exception while fetching Non-Public Articles --> "+e);
			return ResponseHandler.generateResponse(RatingsDataConstant.FAILURE, HttpStatus.NOT_FOUND, null);
		}	
	}
	
	@Operation(summary = "get dashboard public pvt rating articles by entity_id")
	@ApiResponses(value = { @ApiResponse(responseCode = "200", description = "get dashboard public pvt rating articles by entity_id") })
	@GetMapping("/getDashboardRatingArticles")
	public ResponseEntity<Object> getDashboardPublicPvtRatingArticles(
			@RequestParam(value = "entityId") String entityId, @RequestParam(value = "countryCode") String countryCode,
			@RequestParam(value = "capiq") Long capiqId,
			@RequestHeader("Authorization") String authHeader,
			@RequestHeader HttpHeaders httpHeaders) {
		log.info("@Controller getDashboardPublicPvtRatingArticles method: calling service for rating articles");
		
		try {
			RatingArticlesData ratingArticlesData = ratingArticlesPublicPvtService.getDashboardRatingArticles(entityId, countryCode, capiqId, authHeader);
			if(ratingArticlesData.getMessage().equals("The User is not entitiled to view non-public articles for entity")) { 
				return ResponseHandler.generateResponse(RatingsDataConstant.FAILURE, HttpStatus.UNAUTHORIZED, ratingArticlesData.getMessage());
			} else if(ratingArticlesData.getMessage().equals("success") && ratingArticlesData.getRatingArticles().isEmpty()) {
				return ResponseHandler.generateResponse(RatingsDataConstant.SUCCESS, HttpStatus.NO_CONTENT, null);
			} else {
				return ResponseHandler.generateResponse(RatingsDataConstant.SUCCESS, HttpStatus.OK, ratingArticlesData.getRatingArticles());
			}
		}catch(Exception e) {
			log.error("Exception while fetching Non-Public Articles on dashboard --> "+e);
			return ResponseHandler.generateResponse(RatingsDataConstant.FAILURE, HttpStatus.NOT_FOUND, null);
		}	
	}

	@Operation(summary = "get rating article types")
	@ApiResponses(value = { @ApiResponse(responseCode = "200", description = "get rating article types") })
	@GetMapping("/getRatingArticleTypes")
	public Response<List<RatingArticleTypes>> getRatingArticlesTypes(
			@RequestParam(value = "articleTypeIds") List<Long> articleTypeIds, @RequestHeader HttpHeaders httpHeaders) {
		log.info("@Controller getRatingArticlesTypes method: calling service for rating article types");

		Response<List<RatingArticleTypes>> response = new Response<List<RatingArticleTypes>>();
		response.setName("Rating Article Types");
		response.setDescription("Rating Article Types");
		try {
			response.setElements(ratingArticlesService.getRatingArticlesTypes(articleTypeIds));
			response.setStatus(Response.Status.SUCCESS);
			response.setMessage("Sucessfully retrieved the Rating Article Types");
		} catch (Exception exception) {
			log.error("Exception: @Controller -> getRatingArticlesTypes: " + exception.getMessage());
			response.setStatus(Response.Status.FAILURE);
			response.setMessage("Failed to retrieve the Rating Article Types: " + exception.getMessage());
		}
		return response;
	}

	@Operation(summary = "get rating articles by entity_ids with Server Side Pagination")
	@ApiResponses(value = { @ApiResponse(responseCode = "200", description = "get rating articles by entity_ids with Server Side Pagination") })
	@PostMapping("/getRatingArticlesSSP")
	public ResponseSSP<List<?>> getRatingArticlesSSP(
			@RequestBody RatingArticlesSearchSSP ratingArticlesSearch, 
			@RequestHeader HttpHeaders httpHeaders) {
		log.info("@Controller getRatingArticlesSSP method: calling service for rating articles");

		ResponseSSP<List<?>> response = new ResponseSSP<List<?>>();
		response.setName(RatingsDataConstant.RATING_ARTICLES_SSP_NAME);
		response.setDescription(RatingsDataConstant.RATING_ARTICLES_SSP_DESC);
		try {
			List<?> ratingArticlesSSP = ratingArticlesService.getRatingArticlesSSP(ratingArticlesSearch);
			response.setCount(ratingArticlesService.getPublicRatingArticlesSSPTotalCount(ratingArticlesSearch));
			response.setElements(ratingArticlesSSP); 
			response.setStatus(ResponseSSP.Status.SUCCESS);
			response.setMessage(RatingsDataConstant.RATING_ARTICLES_SSP_SUCC_MSG + ratingArticlesSearch.getEntityIds() + "]");
		} catch (Exception exception) {
			log.error("Exception: @Controller -> getRatingArticles: {}", exception.getMessage());
			response.setStatus(ResponseSSP.Status.FAILURE);
			response.setMessage(RatingsDataConstant.RATING_ARTICLES_SSP_FAIL_MSG + ratingArticlesSearch.getEntityIds() + "]: " + exception.getMessage());
		}
		return response;
	}
	
	@Operation(summary = "get peers public pvt rating articles")
	@ApiResponses(value = { @ApiResponse(responseCode = "200", description = "get peers rating articles") })
	@PostMapping("/getPeersRatingArticles/{entityId}/{capiqId}")
	public ResponseEntity<Object> getPeersRatingArticles(
			@PathVariable("entityId") Long entityId,
			@PathVariable("capiqId") Long capiqId,
			@RequestBody RatingArticlesSearchSSP ratingArticlesSearch, 
			@RequestHeader("Authorization") String authHeader,
			@RequestHeader HttpHeaders httpHeaders) {
		log.info("@Controller getPeersRatingArticles method: calling service for peer rating articles");
		
		try {
			RatingArticlesPeersData ratingArticlesData = ratingArticlesPublicPvtService.getPeersRatingArticles(ratingArticlesSearch, entityId, capiqId, authHeader);
			if(ratingArticlesData.getMessage().equals("The User is not entitiled to view non-public articles for entity")) { 
				return RatingArticlesResponseHandler.generateResponse(RatingsDataConstant.FAILURE, HttpStatus.UNAUTHORIZED, null, null, false);
			} else if(ratingArticlesData.getMessage().equals("success") && ratingArticlesData.getRatingArticles().isEmpty()) {
				return RatingArticlesResponseHandler.generateResponse(RatingsDataConstant.SUCCESS, HttpStatus.NO_CONTENT, null, null, false);
			} else {
				return RatingArticlesResponseHandler.generateResponse(RatingsDataConstant.SUCCESS, HttpStatus.OK, ratingArticlesData.getRatingArticles(), ratingArticlesPublicPvtService.getPeersRatingArticlesCount(ratingArticlesSearch, entityId).getRatingArticlesCount(), ratingArticlesPublicPvtService.getPeersRatingArticlesCount(ratingArticlesSearch, entityId).isPcData());
			}
		}catch(Exception e) {
			log.error("Exception while fetching Non-Public Articles --> "+e);
			return RatingArticlesResponseHandler.generateResponse(RatingsDataConstant.FAILURE, HttpStatus.NOT_FOUND, null, null, false);
		}	
	}

}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\controller\ScoresController.java

package com.spglobal.ratings.ratingsdata.controller;

import java.util.List;

import com.spglobal.ratings.ratingsdata.exception.ApplicationRuntimeException;
import org.apache.commons.lang3.ObjectUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.spglobal.ratings.ratingsdata.entity.DefinitionsConfig;
import com.spglobal.ratings.ratingsdata.entity.PeerSuppliersPortfolioContents;
import com.spglobal.ratings.ratingsdata.entity.ScoresAndModifiersPublic;
import com.spglobal.ratings.ratingsdata.entity.UspfPeerSuppliersPortfolioContents;
import com.spglobal.ratings.ratingsdata.model.EntitiesPayload;
import com.spglobal.ratings.ratingsdata.model.Response;
import com.spglobal.ratings.ratingsdata.model.StateAndProvince;
import com.spglobal.ratings.ratingsdata.model.UspfFilterData;
import com.spglobal.ratings.ratingsdata.model.UspfFilterDropdownData;
import com.spglobal.ratings.ratingsdata.service.DefinitionsConfigService;
import com.spglobal.ratings.ratingsdata.service.ScoresAndModifiersPublicService;
import com.spglobal.ratings.ratingsdata.util.RatingsDataConstant;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import jakarta.validation.Valid;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@RestController
@RequestMapping(path = RatingsDataConstant.BASE_PATH, produces = MediaType.APPLICATION_JSON_VALUE)
public class ScoresController {
    @Autowired
    private DefinitionsConfigService definitionsConfigService ;
    @Autowired
    private ScoresAndModifiersPublicService scoresAndModifiersPublicService;
    @Operation(summary = "get definitions for scores and modifiers")
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "get definitions for scores and modifiers in peers, suppliers & counterparties") })
    @GetMapping("/scoresModifiersDefinitions")
    public Response<List<DefinitionsConfig>> getDefinitions() {
        log.info("@Controller getDefinitions method: calling ratings service for definitions");
        Response<List<DefinitionsConfig>> response = new Response<List<DefinitionsConfig>>();
        try {
            response.setName("Definitions");
            response.setDescription("Definition for Scores and Modifiers");
            response.setStatus(Response.Status.SUCCESS);
            response.setMessage("Sucessfully retrieved the Definitions for Scores and Modifiers");
            log.info("Getting definitions for scores and modifiers");
            response.setElements(definitionsConfigService.getDefinitionDetails());

        } catch(Exception exception) {
            log.error("Exception: @Controller -> getDefinitions: {}", exception.getMessage());
            response.setStatus(Response.Status.FAILURE);
            response.setMessage("Failed to retrieve the Definitions for Scores and Modifiers");
        }
        return response;
    }
    @PostMapping(path= "/peerScoresModifiers" ,  consumes = "application/json")
    public Response<List<ScoresAndModifiersPublic>> getPeerSuppliersCPScoresAndModifiers(@RequestBody EntitiesPayload entities ) {
        Response<List<ScoresAndModifiersPublic>> response = new Response<List<ScoresAndModifiersPublic>>();
        try {

            response.setElements(scoresAndModifiersPublicService.getPeerScoresAndModifiers(entities));
            response.setName("Factors Scores Modifiers");
            response.setDescription("Data for Factors, Scores and Modifiers");
            response.setStatus(Response.Status.SUCCESS);
            response.setMessage("Sucessfully retrieved the data for Factors,Scores and Modifiers");
            log.info("Getting data for factors, scores and modifiers");

        } catch (Exception exception) {
            log.error("Exception: @Controller -> getPublicPeerScoresAndModifiers: {}", exception.getMessage());
            response.setStatus(Response.Status.FAILURE);
            response.setMessage("Failed to retrieve the data for Factors, Scores and Modifiers");
        }
        return response;
    }
    
	@GetMapping(path = "/peerSuppliersPortfolioContents")
	public Response<List<PeerSuppliersPortfolioContents>> getPeerSuppliersPortfolioContents(
			@RequestParam(value = "keyInstnIds",required = false) List<String> keyInstnIds,
	        @RequestParam(value = "capiqs",required = false) List<String> capiqIds,
			@RequestParam(value = "entityIds",required = false) List<String> entityIds) {
		Response<List<PeerSuppliersPortfolioContents>> response = new Response<List<PeerSuppliersPortfolioContents>>();
		try {
			if(ObjectUtils.isEmpty(keyInstnIds) && ObjectUtils.isEmpty(capiqIds) && ObjectUtils.isEmpty(entityIds)){
				response.setStatus(Response.Status.FAILURE);
				response.setMessage("Request params are empty");
			}else {
				response.setElements(scoresAndModifiersPublicService.getPeerSuppliersPortfolioContents(keyInstnIds, capiqIds, entityIds));
				response.setName("PeerSuppliersPortfolioContents");
				response.setDescription("Data for PeerSuppliersPortfolioContents");
				response.setStatus(Response.Status.SUCCESS);
				response.setMessage("For valid input sucessfully retrieves the data for PeerSuppliersPortfolioContents");
				log.info("Getting data for PeerSuppliersPortfolioContents");
			}
		} catch (Exception exception) {
			log.error("Exception: @Controller -> getPeerSuppliersPortfolioContents: {}", exception.getMessage());
			response.setStatus(Response.Status.FAILURE);
			response.setMessage("Failed to retrieve the data for PeerSuppliersPortfolioContents");
		}
		return response;
	}
	
	@PostMapping(path = "/uspfPeerPortfolioContents")
	public Response<List<UspfPeerSuppliersPortfolioContents>> getUspfPeerSuppliersPortfolioContents(
			@RequestBody @Valid UspfFilterData uspfFilterData) {
		Response<List<UspfPeerSuppliersPortfolioContents>> response = new Response<List<UspfPeerSuppliersPortfolioContents>>();
		try {
			response.setElements(scoresAndModifiersPublicService.getUspfPeerSuppliersPortfolioContents(uspfFilterData));
			response.setName("UspfPeerSuppliersPortfolioContents");
			response.setDescription("Data for UspfPeerSuppliersPortfolioContents");
			response.setStatus(Response.Status.SUCCESS);
			response.setMessage(
					"For valid input sucessfully retrieves the data for UspfPeerSuppliersPortfolioContents");
			log.info("Getting data for UspfPeerSuppliersPortfolioContents");
		} catch (Exception exception) {
			log.error("Exception: @Controller -> getUspfPeerSuppliersPortfolioContents: {}", exception.getMessage());
			response.setStatus(Response.Status.FAILURE);
			response.setMessage("Failed to retrieve the data for UspfPeerSuppliersPortfolioContents");
		}
		return response;
	}
	/**
	 * This GET API is used for get getUspfPeersPortfolioData by passing savedSet values as query parameters
	 * @param asIds
	 * @return list of Uspf Peer Suppliers Portfolio Contents
	 */
	@GetMapping(path = "/getUspfPeersPortfolioData")
	public Response<List<UspfPeerSuppliersPortfolioContents>> getUspfPeersPortfolioData(
			@RequestParam("asIds") @Valid List<Long> asIds) {
		Response<List<UspfPeerSuppliersPortfolioContents>> response = new Response<List<UspfPeerSuppliersPortfolioContents>>();
		try {
			response.setElements(scoresAndModifiersPublicService.getUspfPeersPortfolioData(asIds));
			response.setName("getUspfPeersPortfolioData");
			response.setDescription("Data for getUspfPeersPortfolioData");
			response.setStatus(Response.Status.SUCCESS);
			response.setMessage(
					"For valid input sucessfully retrieves the data for getUspfPeersPortfolioData");
			log.info("Getting data for getUspfPeersPortfolioData");
		} catch (Exception exception) {
			log.error("Exception: @Controller -> getUspfPeersPortfolioData: {}", exception.getMessage());
			response.setStatus(Response.Status.FAILURE);
			response.setMessage("Failed to retrieve the data for getUspfPeersPortfolioData");
		}
		return response;
	}

	@GetMapping(path = "/uspfPeersFiltersData")
	public Response<UspfFilterDropdownData> getuspfPeersFiltersData() {
		Response<UspfFilterDropdownData> response = new Response<UspfFilterDropdownData>();
		try {
			response.setElements(scoresAndModifiersPublicService.getuspfPeersFiltersData());
			response.setName("UspfPeersFiltersData");
			response.setDescription("Data for UspfPeersFiltersData");
			response.setStatus(Response.Status.SUCCESS);
			response.setMessage(
					"Sucessfully retrieves the data for UspfPeersFiltersData");
			log.info("Getting data for UspfPeersFiltersData");
		} catch (Exception exception) {
			log.error("Exception: @Controller -> getuspfPeersFiltersData: {}", exception.getMessage());
			response.setStatus(Response.Status.FAILURE);
			response.setMessage("Failed to retrieve the data for UspfPeersFiltersData");
		}
		return response;
	}
	@GetMapping(path = "/getStateAndProvinceData")
	public Response<StateAndProvince> getStateAndProvinceData() {
		Response<StateAndProvince> response = new Response<StateAndProvince>();
		try {
			response.setElements(scoresAndModifiersPublicService.getStateAndProvinceData());
			response.setName("getStateAndProvinceData");
			response.setDescription("Data for getStateAndProvinceData");
			response.setStatus(Response.Status.SUCCESS);
			response.setMessage(
					"Sucessfully retrieves the data for getStateAndProvinceData");
			log.info("Getting data for getStateAndProvinceData");
		} catch (Exception exception) {
			log.error("Exception: @Controller -> getStateAndProvinceData: {}", exception.getMessage());
			response.setStatus(Response.Status.FAILURE);
			response.setMessage("Failed to retrieve the data for getStateAndProvinceData");
		}
		return response;
	}
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\controller\SectorResearchController.java

package com.spglobal.ratings.ratingsdata.controller;

import com.spglobal.ratings.ratingsdata.entity.SectorsArticleEntity;
import com.spglobal.ratings.ratingsdata.entity.SectorsEntity;
import com.spglobal.ratings.ratingsdata.entity.SectorsGeographyEntity;
import com.spglobal.ratings.ratingsdata.entity.RatingDistRatingCodesEntity;
import com.spglobal.ratings.ratingsdata.entity.RatingDistIndustryEntity;
import com.spglobal.ratings.ratingsdata.entity.RatingDistGeoEntity;
import com.spglobal.ratings.ratingsdata.entity.RatingDistICRTotalsEntity;

import com.spglobal.ratings.ratingsdata.service.SectorResearchService;
import com.spglobal.ratings.ratingsdata.util.RatingsDataConstant;
import com.spglobal.ratings.ratingsdata.util.ResponseHandler;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import java.util.List;

@Slf4j
@RestController
@RequestMapping(path = RatingsDataConstant.BASE_PATH, produces = MediaType.APPLICATION_JSON_VALUE)
public class SectorResearchController {

	@Autowired
	SectorResearchService sectorResearchService;

	@GetMapping("/sector/sectorslist")
	public ResponseEntity<Object> getSectors() {
		log.info("@SectorResearchController getSectors method: calling service for sectors");
		try {
			List<SectorsEntity> sectorsEntities = sectorResearchService.getSectors();
			return ResponseHandler.generateResponse(RatingsDataConstant.SUCCESS, HttpStatus.OK, sectorsEntities);
		} catch (Exception e) {
			log.error("Exception: @SectorResearchController -> getSectors: {}", e.getMessage());
			return ResponseHandler.generateResponse(RatingsDataConstant.FAILURE, HttpStatus.INTERNAL_SERVER_ERROR,
					e.getMessage());

		}
	}

	@GetMapping("/sector/sectorsgeolist")
	public ResponseEntity<Object> getSectorsGeography() {
		log.info("@SectorResearchController getSectorsGeography method: calling service for sectors");
		try {
			List<SectorsGeographyEntity> sectorsGeographyEntities = sectorResearchService.getSectorsGeography();
			return ResponseHandler.generateResponse(RatingsDataConstant.SUCCESS, HttpStatus.OK, sectorsGeographyEntities);
		} catch (Exception e) {
			log.error("Exception: @SectorResearchController -> getSectorsGeography: {}", e.getMessage());
			return ResponseHandler.generateResponse(RatingsDataConstant.FAILURE, HttpStatus.INTERNAL_SERVER_ERROR,
					e.getMessage());

		}
	}

	@GetMapping("/sector/sectorsarticlebysubjectlist")
	public ResponseEntity<Object> getSectorsArticleBySubject(@RequestParam(name = "subSectorCode", required = true)  Long subject) {
		log.info("@SectorResearchController getSectorsArticleBySubject method - calling service for sectors");
		try {
			List<SectorsArticleEntity> sectorsArticleEntities = sectorResearchService.getSectorsArticleBySubject(subject);
			return ResponseHandler.generateResponse(RatingsDataConstant.SUCCESS, HttpStatus.OK, sectorsArticleEntities);
		} catch (Exception e) {
			log.error("Exception: @SectorResearchController -> getSectorsArticleBySubject: {}", e.getMessage());
			return ResponseHandler.generateResponse(RatingsDataConstant.FAILURE, HttpStatus.INTERNAL_SERVER_ERROR,
					e.getMessage());

		}
	}

	@GetMapping("/sector/sectorsarticlelist") //called from UI
	public ResponseEntity<Object> getSectorsArticle(@RequestParam(name = "subject")  Long subject, @RequestParam(name = "subSectorCode", required = false) List<String> subSectorCode, @RequestParam(name = "industryCode", required = false) List<String> industryCode, @RequestParam(name = "regionCode", required = false)  List <String> regionCode, @RequestParam(name = "fromArticleDate", required = false)  String fromArticleDate, @RequestParam(name = "toArticleDate", required = false)  String toArticleDate ) {
		log.info("@SectorResearchController getSectorsArticle method - calling service for sectors");
		try {
			List<SectorsArticleEntity> sectorsArticleEntities = sectorResearchService.getSectorsArticle(subject, subSectorCode, industryCode, regionCode, fromArticleDate, toArticleDate);
			return ResponseHandler.generateResponse(RatingsDataConstant.SUCCESS, HttpStatus.OK, sectorsArticleEntities);
		} catch (Exception e) {
			log.error("Exception: @SectorResearchController -> getSectorsArticle: {}", e.getMessage());
			return ResponseHandler.generateResponse(RatingsDataConstant.FAILURE, HttpStatus.INTERNAL_SERVER_ERROR,
					e.getMessage());

		}
	}
	
	@GetMapping("/sector/sectorsallarticlelist") //called from UI
	public ResponseEntity<Object> getAllArticle() {
		log.info("@SectorResearchController getAllArticle method: calling service for sectors");
		try {
			List<SectorsArticleEntity> sectorsArticleEntities = sectorResearchService.getAllArticle();
			return ResponseHandler.generateResponse(RatingsDataConstant.SUCCESS, HttpStatus.OK, sectorsArticleEntities);
		} catch (Exception e) {
			log.error("Exception: @SectorResearchController -> getAllArticle: {}", e.getMessage());
			return ResponseHandler.generateResponse(RatingsDataConstant.FAILURE, HttpStatus.INTERNAL_SERVER_ERROR,
					e.getMessage());

		}
	}

	@GetMapping("/sector/sectorsallarticlefilterlist")
	public ResponseEntity<Object> getAllArticleFilter(@RequestParam(name = "subSectorCode", required = false) List<String> subSectorCode, @RequestParam(name = "industryCode", required = false) List<String> industryCode, @RequestParam(name = "regionCode", required = false)  List <String> regionCode, @RequestParam(name = "fromArticleDate", required = false)  String fromArticleDate, @RequestParam(name = "toArticleDate", required = false)  String toArticleDate, @RequestParam(name = "maxArticles", required = false)  Long maxArticles ) {
		log.info("@SectorResearchController getAllArticle method: calling service for sectors");
		try {
			List<SectorsArticleEntity> sectorsArticleEntities = sectorResearchService.getAllArticleFilter(subSectorCode, industryCode, regionCode, fromArticleDate, toArticleDate, maxArticles);
			return ResponseHandler.generateResponse(RatingsDataConstant.SUCCESS, HttpStatus.OK, sectorsArticleEntities);
		} catch (Exception e) {
			log.error("Exception: @SectorResearchController -> getAllArticle: {}", e.getMessage());
			return ResponseHandler.generateResponse(RatingsDataConstant.FAILURE, HttpStatus.INTERNAL_SERVER_ERROR,
					e.getMessage());

		}
	}
	
	@GetMapping("/sector/ratingdistratingscodes")
	public ResponseEntity<Object> getRatingDistRatingCodes() {
		log.info("@SectorResearchController getRatingDistRatingCodes method: calling service for distibutions");
		try {
			List<RatingDistRatingCodesEntity> ratingsCodes = sectorResearchService.getRatingDistRatingCodes();
			return ResponseHandler.generateResponse(RatingsDataConstant.SUCCESS, HttpStatus.OK, ratingsCodes);
		} catch (Exception e) {
			log.error("Exception: @SectorResearchController -> getRatingDistRatingCodes: {}", e.getMessage());
			return ResponseHandler.generateResponse(RatingsDataConstant.FAILURE, HttpStatus.INTERNAL_SERVER_ERROR,
					e.getMessage());

		}
	}

	@GetMapping("/sector/ratingdistindustrylist")
	public ResponseEntity<Object> getRatingDistIndustryList() {
		log.info("@SectorResearchController getRatingDistIndustryList method: calling service for distibutions");
		try {
			List<RatingDistIndustryEntity> industries = sectorResearchService.getRatingDistIndustryList();
			return ResponseHandler.generateResponse(RatingsDataConstant.SUCCESS, HttpStatus.OK, industries);
		} catch (Exception e) {
			log.error("Exception: @SectorResearchController -> getRatingDistIndustryList: {}", e.getMessage());
			return ResponseHandler.generateResponse(RatingsDataConstant.FAILURE, HttpStatus.INTERNAL_SERVER_ERROR,
					e.getMessage());

		}
	}

	@GetMapping("/sector/ratingdistgeolist")
	public ResponseEntity<Object> getRatingDistGeoList() {
		log.info("@SectorResearchController getRatingDistGeoList method: calling service for distibutions");
		try {
			List<RatingDistGeoEntity> geographies = sectorResearchService.getRatingDistGeoList();
			return ResponseHandler.generateResponse(RatingsDataConstant.SUCCESS, HttpStatus.OK, geographies);
		} catch (Exception e) {
			log.error("Exception: @SectorResearchController -> getRatingDistgeoList: {}", e.getMessage());
			return ResponseHandler.generateResponse(RatingsDataConstant.FAILURE, HttpStatus.INTERNAL_SERVER_ERROR,
					e.getMessage());

		}
	}
	
	@GetMapping("/sector/ratingdisticrsymboltotal")
	public ResponseEntity<Object> getRatingDistICRSymbolTotals(@RequestParam(name = "countriesCSVlist", required = false) String countriesCSVlist, @RequestParam(name = "regionsCSVlist", required = false) String regionsCSVlist, @RequestParam(name = "sectorList",required = false)  List<String> sectorList, @RequestParam(name = "symbolList",required = false) List<String> symbolList ) {
		log.info("@SectorResearchController getRatingDistICRSymbolTotals method: calling service for ICR symbol total");
		try {
			List<RatingDistICRTotalsEntity> ratingDistICRTotalsEntities = sectorResearchService.getICRTotalsByGeoAndSectors(countriesCSVlist, regionsCSVlist, sectorList, symbolList);
			return ResponseHandler.generateResponse(RatingsDataConstant.SUCCESS, HttpStatus.OK, ratingDistICRTotalsEntities);
		} catch (Exception e) {
			log.error("Exception: @SectorResearchController -> getRatingDistICRSymbolTotals: {}", e.getMessage());
			return ResponseHandler.generateResponse(RatingsDataConstant.FAILURE, HttpStatus.INTERNAL_SERVER_ERROR,
					e.getMessage());

		}
	}

	@GetMapping("/dashboard/sectorResearch")
	public ResponseEntity<Object> getDashboardSectorResearch(@RequestParam(name = "subSectorCode", required = false) String subSectorCode,
															 @RequestParam(name = "limit", required = false)  Integer limit ) {
		log.info("@SectorResearchController getDashboardSectorResearch method: start");
		try {
			List<SectorsArticleEntity> responseEntity = sectorResearchService.getDashboardSectorResearchArticles(subSectorCode, limit);
			return ResponseHandler.generateResponse(RatingsDataConstant.SUCCESS, HttpStatus.OK, responseEntity);
		} catch (Exception e) {
			log.error("Exception: @SectorResearchController -> getDashboardSectorResearch: {}", e.getMessage());
			return ResponseHandler.generateResponse(RatingsDataConstant.FAILURE, HttpStatus.INTERNAL_SERVER_ERROR,
					e.getMessage());

		}
	}
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\controller\SovereignResearchController.java

package com.spglobal.ratings.ratingsdata.controller;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.spglobal.ratings.ratingsdata.entity.SovereignBICRAScores;
import com.spglobal.ratings.ratingsdata.entity.SovereignCountryEntity;
import com.spglobal.ratings.ratingsdata.entity.SovereignCountrySummary;
import com.spglobal.ratings.ratingsdata.entity.SovereignDashboard;
import com.spglobal.ratings.ratingsdata.entity.SovereignFSMajorFactors;
import com.spglobal.ratings.ratingsdata.entity.SovereignFSIICRA;
import com.spglobal.ratings.ratingsdata.entity.SovereignPeerBICRAScores;
import com.spglobal.ratings.ratingsdata.entity.SovereignResearchRatingDistribution;
import com.spglobal.ratings.ratingsdata.entity.SovereignRiskEntity;
import com.spglobal.ratings.ratingsdata.entity.SovereignTopFiveFinInst;
import com.spglobal.ratings.ratingsdata.service.SovereignResearchService;
import com.spglobal.ratings.ratingsdata.util.RatingsDataConstant;
import com.spglobal.ratings.ratingsdata.util.ResponseHandler;

import lombok.extern.slf4j.Slf4j;

@Slf4j
@RestController
@RequestMapping(path = RatingsDataConstant.BASE_PATH, produces = MediaType.APPLICATION_JSON_VALUE)
public class SovereignResearchController {

	@Autowired
	SovereignResearchService sovereignResearchService;

	@GetMapping("/sovereign/countrylist")
	public ResponseEntity<Object> getSovereignCountries() {
		log.info("@SovereignResearchController getSovereignCountries method: calling service for country list");
		try {
			List<SovereignCountryEntity> countryList = sovereignResearchService.getSovereignCountries();
			return ResponseHandler.generateResponse(RatingsDataConstant.SUCCESS, HttpStatus.OK, countryList);
		} catch (Exception e) {
			log.error("Exception: @SovereignResearchController -> getSovereignCountries: {}", e.getMessage());
			return ResponseHandler.generateResponse(RatingsDataConstant.FAILURE, HttpStatus.INTERNAL_SERVER_ERROR,
					e.getMessage());

		}

	}

	@GetMapping("/sovereign/summary")
	public ResponseEntity<Object> getSummary(@RequestParam("country") String country) {
		log.info("@SovereignResearchController getSummary method: calling service for summary");
		try {
			List<SovereignCountrySummary> sovSummary = sovereignResearchService.getSovereignCountrySummary(country);
			return ResponseHandler.generateResponse(RatingsDataConstant.SUCCESS, HttpStatus.OK, sovSummary);
		} catch (Exception e) {
			log.error("Exception: @SovereignResearchController -> getSummary: {}", e.getMessage());
			return ResponseHandler.generateResponse(RatingsDataConstant.FAILURE, HttpStatus.INTERNAL_SERVER_ERROR,
					e.getMessage());

		}

	}
	
	@GetMapping("/sovereign/riskindicators")
	public ResponseEntity<Object> getSovereignRiskIndicatorsData(@RequestParam("country") String country) {
		log.info("@SovereignResearchController getSovereignRiskIndicatorsData method: calling service for risk data");
		try {
			List<SovereignRiskEntity> riskData = sovereignResearchService.getSovereignRiskIndicatorsData(country);
			return ResponseHandler.generateResponse(RatingsDataConstant.SUCCESS, HttpStatus.OK, riskData);
		} catch (Exception e) {
			log.error("Exception: @SovereignResearchController -> getSovereignRiskIndicatorsData: {}", e.getMessage());
			return ResponseHandler.generateResponse(RatingsDataConstant.FAILURE, HttpStatus.INTERNAL_SERVER_ERROR,
					e.getMessage());

		}

	}
	
		
	@GetMapping("/sovereign/topfive_fi")
	public ResponseEntity<?> getTopFiveFinInsData(@RequestParam("country") String country) {
		log.info("@SovereignResearchController getTopFiveFinInsData method: calling service for top5 bicra data");
		try {
			List<SovereignTopFiveFinInst> riskData = sovereignResearchService.getTopFiveFinInsData(country);
			return ResponseHandler.generateResponse(RatingsDataConstant.SUCCESS, HttpStatus.OK, riskData);
		} catch (Exception e) {
			log.error("Exception: @SovereignResearchController -> getTopFiveFinInsData: {}", e.getMessage());
			return ResponseHandler.generateResponse(RatingsDataConstant.FAILURE, HttpStatus.INTERNAL_SERVER_ERROR,
					e.getMessage());

		}

	}
	
	@GetMapping("/sovereign/bicrascores")
	public ResponseEntity<?> getBICRAScores(@RequestParam("country") String country) {
		log.info("@SovereignResearchController getBICRAScores method: calling service for BICRAScores data");
		try {
			List<SovereignBICRAScores> bicraScoreData = sovereignResearchService.getBICRAScores(country);
			return ResponseHandler.generateResponse(RatingsDataConstant.SUCCESS, HttpStatus.OK, bicraScoreData);
		} catch (Exception e) {
			log.error("Exception: @SovereignResearchController -> getBICRAScores: {}", e.getMessage());
			return ResponseHandler.generateResponse(RatingsDataConstant.FAILURE, HttpStatus.INTERNAL_SERVER_ERROR,
					e.getMessage());

		}

	}
	
	@GetMapping("/sovereign/peer_bicrascores")
	public ResponseEntity<?> getPeerBICRAScores(@RequestParam("country") String country, @RequestParam("domain") Optional<String> domain) {
		log.info("@SovereignResearchController getPeerBICRAScores method: calling service for PeerBICRAScores data");
		try {
			String domainName = domain.orElse("");
			List<SovereignPeerBICRAScores> peerbicraScoreData = sovereignResearchService.getPeerBICRAScores(country, domainName);
			return ResponseHandler.generateResponse(RatingsDataConstant.SUCCESS, HttpStatus.OK, peerbicraScoreData);
		} catch (Exception e) {
			log.error("Exception: @SovereignResearchController -> getPeerBICRAScores: {}", e.getMessage());
			return ResponseHandler.generateResponse(RatingsDataConstant.FAILURE, HttpStatus.INTERNAL_SERVER_ERROR,
					e.getMessage());

		}

	}
	
	@GetMapping("/sovereign/fs_majorfactors")
	public ResponseEntity<?> getMajorFactors(@RequestParam("country") String country) {
		log.info("@SovereignResearchController getMajorFactors method: calling service for Major Factors data");
		try {
			List<SovereignFSMajorFactors> result = sovereignResearchService.getMajorFactors(country);
			return ResponseHandler.generateResponse(RatingsDataConstant.SUCCESS, HttpStatus.OK, result);
		} catch (Exception e) {
			log.error("Exception: @SovereignResearchController -> getMajorFactors: {}", e.getMessage());
			return ResponseHandler.generateResponse(RatingsDataConstant.FAILURE, HttpStatus.INTERNAL_SERVER_ERROR,
					e.getMessage());

		}

	}
	
	@GetMapping("/sovereign/fs_iicra")
	public ResponseEntity<?> getIICRAIndicators(@RequestParam("country") String country) {
		log.info("@SovereignResearchController getIICRAIndicators method: calling service for iicra data");
		try {
			List<SovereignFSIICRA> result = sovereignResearchService.getIICRAIndicators(country);
			return ResponseHandler.generateResponse(RatingsDataConstant.SUCCESS, HttpStatus.OK, result);
		} catch (Exception e) {
			log.error("Exception: @SovereignResearchController -> getIICRAIndicators: {}", e.getMessage());
			return ResponseHandler.generateResponse(RatingsDataConstant.FAILURE, HttpStatus.INTERNAL_SERVER_ERROR,
					e.getMessage());

		}

	}
	
	@GetMapping("/sovereign/dashboard")
	public ResponseEntity<?> getSovDashboardData(@RequestParam("country") String country, 
			@RequestParam("entityId") Optional<Long> entityId) {
		log.info("@SovereignResearchController getSovDashboardData method: calling service for dashboard data");
		try {
			//Long param_entityId = entityId.orElse(null);
			List<SovereignDashboard> result = sovereignResearchService.getSovDashboardData(country,entityId);
			return ResponseHandler.generateResponse(RatingsDataConstant.SUCCESS, HttpStatus.OK, result);
		} catch (Exception e) {
			log.error("Exception: @SovereignResearchController -> getSovDashboardData: {}", e.getMessage());
			return ResponseHandler.generateResponse(RatingsDataConstant.FAILURE, HttpStatus.INTERNAL_SERVER_ERROR,
					e.getMessage());

		}

	}	
	
	@GetMapping("/sovereign/researchRatingDistribution")
	public ResponseEntity<?> getSovResearchRatingDistribution(@RequestParam("entityId") Long entityId) {
		log.info("@SovereignResearchController getSovResearchRatingDistribution method: calling service for Research Rating Distribution data");
		try {
			List<SovereignResearchRatingDistribution> result = sovereignResearchService.getSovResearchRatingDistrbutionData(entityId);
			return ResponseHandler.generateResponse(RatingsDataConstant.SUCCESS, HttpStatus.OK, result);
		} catch (Exception e) {
			log.error("Exception: @SovereignResearchController -> getSovResearchRatingDistribution: {}", e.getMessage());
			return ResponseHandler.generateResponse(RatingsDataConstant.FAILURE, HttpStatus.INTERNAL_SERVER_ERROR,
					e.getMessage());
		}
	}	
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\controller\UspfRatingsController.java

package com.spglobal.ratings.ratingsdata.controller;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;

import org.apache.commons.lang3.ObjectUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.spglobal.ratings.ratingsdata.entity.IssuesMaturitiesUSPFPub;
import com.spglobal.ratings.ratingsdata.entity.RatingUspfEconomicFinDetails;
import com.spglobal.ratings.ratingsdata.entity.UspfAnalyticalContacts;
import com.spglobal.ratings.ratingsdata.entity.UspfCurrentRatings;
import com.spglobal.ratings.ratingsdata.entity.UspfDashboardRatings;
import com.spglobal.ratings.ratingsdata.entity.UspfNonIssuerBasedRatingHisotry;
import com.spglobal.ratings.ratingsdata.entity.UspfNonIssuerBasedRatings;
import com.spglobal.ratings.ratingsdata.entity.UspfRatingsRoles;
import com.spglobal.ratings.ratingsdata.entity.UspfRelatedArticles;
import com.spglobal.ratings.ratingsdata.entity.UspfRelatedCriteria;
import com.spglobal.ratings.ratingsdata.model.USPFMinMaxDates;
import com.spglobal.ratings.ratingsdata.model.UspfNonIssuerBasedFilterData;
import com.spglobal.ratings.ratingsdata.service.UspfRatingsService;
import com.spglobal.ratings.ratingsdata.util.RatingsDataConstant;
import com.spglobal.ratings.ratingsdata.util.ResponseHandler;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import jakarta.validation.Valid;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@RestController
@RequestMapping(path = RatingsDataConstant.BASE_PATH, produces = MediaType.APPLICATION_JSON_VALUE)
public class UspfRatingsController {
	
	@Autowired
	UspfRatingsService uspfRatingService;
	
	@GetMapping("/uspf/currentratings")
	public ResponseEntity<?> getCurrentRatings(@RequestParam("entityId") Long entityId, @RequestParam("roleCode") Optional<List<String>> roleCode,
			@RequestParam(name="asId", required = false ) Long asId, @RequestParam(name="ratingTypeCode", required = false ) String ratingTypeCode) {
		
		log.info("@UspfRatingsController getRatingsData method: calling service for current ratings");
		try {
			List<UspfCurrentRatings> currentRatingsLt = uspfRatingService.getCurrentRatings(entityId,roleCode,asId,ratingTypeCode);
			return ResponseHandler.generateResponse(RatingsDataConstant.SUCCESS, HttpStatus.OK, currentRatingsLt);
		} catch (Exception e) {
			log.error("Exception: @UspfRatingsController -> getRatingsData: {}", e.getMessage());
			return ResponseHandler.generateResponse(RatingsDataConstant.FAILURE, HttpStatus.INTERNAL_SERVER_ERROR,
					e.getMessage());

		}
	}
	
	@GetMapping("/uspf/dashboard")
	public ResponseEntity<?> getUspfDashboardRating(@RequestParam("entityId") Long entityId) {
		
		log.info("@UspfRatingsController getUspfDashboardRating method: calling service for dashboard ratings");
		try {
			List<UspfDashboardRatings> dashBoardRatingsLt = uspfRatingService.getDashBoardRatings(entityId);
			return ResponseHandler.generateResponse(RatingsDataConstant.SUCCESS, HttpStatus.OK, dashBoardRatingsLt);
		} catch (Exception e) {
			log.error("Exception: @UspfRatingsController -> getRatingsData: {}", e.getMessage());
			return ResponseHandler.generateResponse(RatingsDataConstant.FAILURE, HttpStatus.INTERNAL_SERVER_ERROR,
					e.getMessage());

		}
	}
	
	@GetMapping("/uspf/ratingRoles")
	public ResponseEntity<?> getUspfRatingRoles() {
		
		log.info("@UspfRatingsController getUspfRatingRoles method: calling service for ratings roles");
		try {
			List<UspfRatingsRoles> roleList = uspfRatingService.getRoles();
			return ResponseHandler.generateResponse(RatingsDataConstant.SUCCESS, HttpStatus.OK, roleList);
		} catch (Exception e) {
			log.error("Exception: @UspfRatingsController -> getUspfRatingRoles: {}", e.getMessage());
			return ResponseHandler.generateResponse(RatingsDataConstant.FAILURE, HttpStatus.INTERNAL_SERVER_ERROR,
					e.getMessage());

		}
	}
	
	
	@GetMapping("/uspf/releatedArticles")
	public ResponseEntity<?> getUspfReleatedArticles(@RequestParam("instrumentId") Long instrumentId, 
			@RequestParam("articleTypeId") List<Integer> articleTypeId,
			@RequestParam("fromDate") String fromDate,
			@RequestParam("toDate") String toDate) {
		
		log.info("@UspfRatingsController getUspfReleatedArticles method: calling service for releated articles");
		try {
			List<UspfRelatedArticles> roleList = uspfRatingService.getRelatedArticles(instrumentId,articleTypeId,fromDate,toDate);
			return ResponseHandler.generateResponse(RatingsDataConstant.SUCCESS, HttpStatus.OK, roleList);
		} catch (Exception e) {
			log.error("Exception: @UspfRatingsController -> getUspfReleatedArticles: {}", e.getMessage());
			return ResponseHandler.generateResponse(RatingsDataConstant.FAILURE, HttpStatus.INTERNAL_SERVER_ERROR,
					e.getMessage());

		}
	}
	
	@GetMapping("/uspf-dashboard/ratingarticles")
	public ResponseEntity<?> getUspfDashboardRatingArticles(@RequestParam("instrumentId") Long instrumentId) {
		
		log.info("@UspfRatingsController getUspfDashboardRatingArticles method: calling service for entity articles");
		try {
			List<UspfRelatedArticles> articleList = uspfRatingService.getDashboardArticles(instrumentId);
			return ResponseHandler.generateResponse(RatingsDataConstant.SUCCESS, HttpStatus.OK, articleList);
		} catch (Exception e) {
			log.error("Exception: @UspfRatingsController -> getUspfDashboardRatingArticles: {}", e.getMessage());
			return ResponseHandler.generateResponse(RatingsDataConstant.FAILURE, HttpStatus.INTERNAL_SERVER_ERROR,
					e.getMessage());

		}
	}
	
	@GetMapping("/uspf-dashboard/peerRatingArticles")
	public ResponseEntity<?> getUspfDashboardPeerRatingArticles(@RequestParam("securityIds") List<Long> securityIds) {
		log.info("@UspfRatingsController getUspfDashboardPeerRatingArticles method: calling service for dashboard peer articles");
		try {
			List<UspfRelatedArticles> articleList = uspfRatingService.getDashboardPeerArticles(securityIds);
			return ResponseHandler.generateResponse(RatingsDataConstant.SUCCESS, HttpStatus.OK, articleList);
		} catch (Exception e) {
			log.error("Exception: @UspfRatingsController -> getUspfDashboardPeerRatingArticles: {}", e.getMessage());
			return ResponseHandler.generateResponse(RatingsDataConstant.FAILURE, HttpStatus.INTERNAL_SERVER_ERROR,
					e.getMessage());
		}
	}
	
	
	@GetMapping("/uspf/nibRatings")
	public ResponseEntity<?> getUspfNonIssuerbasedRatings(@RequestParam("entityId") Long entityId) {
		log.info(
				"@UspfRatingsController getUspfNonIssuerbasedRatings method: calling service for non issuer based ratings");
		try {
			List<UspfNonIssuerBasedRatings> result = uspfRatingService.getNonIssuerBasedRatings(entityId);
			return ResponseHandler.generateResponse(RatingsDataConstant.SUCCESS, HttpStatus.OK, result);
		} catch (Exception e) {
			log.error("Exception: @UspfRatingsController -> getUspfNonIssuerbasedRatings: {}", e.getMessage());
			return ResponseHandler.generateResponse(RatingsDataConstant.FAILURE, HttpStatus.INTERNAL_SERVER_ERROR,
					e.getMessage());

		}
	}
	
	@PostMapping("/uspf/nibRatings_filter")
	public ResponseEntity<?> getUspfNonIssuerbasedRatingsFilter(@RequestBody @Valid UspfNonIssuerBasedFilterData filterData) {
		log.info(
				"@UspfRatingsController getUspfNonIssuerbasedRatings method: calling service for non issuer based ratings with filters");
		try {
			List<?> result = uspfRatingService.getNIBRatingsFilterData(filterData);
			return ResponseHandler.generateResponse(RatingsDataConstant.SUCCESS, HttpStatus.OK, result);
		} catch (Exception e) {
			log.error("Exception: @UspfRatingsController -> getUspfNonIssuerbasedRatings: {}", e.getMessage());
			return ResponseHandler.generateResponse(RatingsDataConstant.FAILURE, HttpStatus.INTERNAL_SERVER_ERROR,
					e.getMessage());

		}
	}
	
	@GetMapping("/uspf/nibRatingsHistory")
	public ResponseEntity<?> getUspfNonIssuerbasedRatingHistory(@RequestParam("instrumentId") Long instrumentId,
			@RequestParam("instrDetailId") Optional<Long> instrDetailId,
			@RequestParam("ratingTypeCode") String ratingTypeCode) {

		log.info(
				"@UspfRatingsController getUspfNonIssuerbasedRatingHistory method: calling service for  non issuer based ratings history");
		try {

			List<UspfNonIssuerBasedRatingHisotry> result = uspfRatingService
					.getNonIssuerBasedRatingHistory(instrumentId, instrDetailId.orElse(null), ratingTypeCode);
			return ResponseHandler.generateResponse(RatingsDataConstant.SUCCESS, HttpStatus.OK, result);
		} catch (Exception e) {
			log.error("Exception: @UspfRatingsController -> getUspfNonIssuerbasedRatingHistory: {}", e.getMessage());
			return ResponseHandler.generateResponse(RatingsDataConstant.FAILURE, HttpStatus.INTERNAL_SERVER_ERROR,
					e.getMessage());

		}
	}
	
	@GetMapping("/uspf/analyticalContacts")
	public ResponseEntity<?> getUspfAnalyticalContacts(@RequestParam("securityId") Long securityId) {

		log.info("@UspfRatingsController getUspfAnalyticalContacts method: calling service for analytical contacts");
		try {

			List<UspfAnalyticalContacts> result = uspfRatingService.getUspfAnalyticalContacts(securityId);
			return ResponseHandler.generateResponse(RatingsDataConstant.SUCCESS, HttpStatus.OK, result);
		} catch (Exception e) {
			log.error("Exception: @UspfRatingsController -> getUspfAnalyticalContacts: {}", e.getMessage());
			return ResponseHandler.generateResponse(RatingsDataConstant.FAILURE, HttpStatus.INTERNAL_SERVER_ERROR,
					e.getMessage());

		}
	}


	
	@GetMapping("/uspf/relatedcriteria")
	public ResponseEntity<?> getUspfRelatedCriteriaArticles(@RequestParam("ratingDetialId") Long ratingDetialId) {

		log.info("@UspfRatingsController getUspfRelatedCriteriaArticles method: calling service for related criteria");
		try {

			List<UspfRelatedCriteria> result = uspfRatingService.getRelatedCriteriaArticles(ratingDetialId);
			return ResponseHandler.generateResponse(RatingsDataConstant.SUCCESS, HttpStatus.OK, result);
		} catch (Exception e) {
			log.error("Exception: @UspfRatingsController -> getUspfAnalyticalContacts: {}", e.getMessage());
			return ResponseHandler.generateResponse(RatingsDataConstant.FAILURE, HttpStatus.INTERNAL_SERVER_ERROR,
					e.getMessage());

		}
	}
	
	@GetMapping("/uspf/maturitydetails")
	public ResponseEntity<?> getNIBIssuerMaturityDetails(@RequestParam("entityId") Long entityId, @RequestParam("instrumentId") Long instrumentId) {
		log.info(
				"@UspfRatingsController getNIBIssuerMaturityDetails method: calling service for maturity details");
		try {
			List<UspfNonIssuerBasedRatings> result = uspfRatingService.getIssuerMaturityDetails(entityId, instrumentId);
			return ResponseHandler.generateResponse(RatingsDataConstant.SUCCESS, HttpStatus.OK, result);
		} catch (Exception e) {
			log.error("Exception: @UspfRatingsController -> getNIBIssuerMaturityDetails: {}", e.getMessage());
			return ResponseHandler.generateResponse(RatingsDataConstant.FAILURE, HttpStatus.INTERNAL_SERVER_ERROR,
					e.getMessage());

		}
	}
	
	@Operation(summary = "get uspf economic data for ratings")
	@ApiResponses(value = { @ApiResponse(responseCode = "200", description = "get uspf economic data for ratings") })
	@GetMapping("/getUspfEconomicData")
	public ResponseEntity<?> getUspfEconomicData(
			@RequestParam(value = "asId") List<Long> asIds, @RequestHeader HttpHeaders httpHeaders) {
		Map<String, Map<String, Map<String, List<RatingUspfEconomicFinDetails>>>> result= new HashMap<>();
		try {
			if (ObjectUtils.isEmpty(asIds)) {
				log.error("IllegalArgumentException @PeersManagementController getUspfPortfolioContents() --> Failed");
				throw new IllegalArgumentException("asIds parameter should not to be null");
			}
			result=uspfRatingService.getUspfEconomicFinData(asIds);
			
		} catch (Exception exception) {
			log.error("Exception: @Controller -> getRatingArticlesTypes: " + exception.getMessage());
			return ResponseHandler.generateResponse(RatingsDataConstant.FAILURE, HttpStatus.INTERNAL_SERVER_ERROR,
					exception.getMessage());
		}
		return ResponseHandler.generateResponse(RatingsDataConstant.SUCCESS, HttpStatus.OK, result);
	}

	
	@Operation(summary = "get public issues and maturities details for USPF analytical security id")
	@ApiResponses(value = {
			@ApiResponse(responseCode = "200", description = "get public issues and maturities details for analytical security id ") })
	@GetMapping("/getIssuesMaturitiesUSPFPub")
	public ResponseEntity<?> getIssuesMaturitiesUSPFPub(
			@RequestParam(value = "asId") Long asId,
			@RequestParam(value = "ratingDetailId", required = false) Long ratingDetailId,
			@RequestParam(value = "instrumentId", required = false) Long instrumentId,
			@RequestParam(value = "issueNameOnly", required = false) Boolean issueNameOnly) {
		
		try {
			
			List<IssuesMaturitiesUSPFPub> result=uspfRatingService.getUspfIssuesMaturities(asId,
					ratingDetailId, instrumentId, issueNameOnly);
			return ResponseHandler.generateResponse(RatingsDataConstant.SUCCESS, HttpStatus.OK, result);

		} catch (Exception exception) {
			log.error("Exception: @USPFController -> getIssuesMaturitiesUSPFPub: " + exception.getMessage());
			return ResponseHandler.generateResponse(RatingsDataConstant.FAILURE, HttpStatus.INTERNAL_SERVER_ERROR,
					exception.getMessage());
		}
		
	}
	
	@Operation(summary = "get public issues and maturities details for USPF analytical security id")
	@ApiResponse(responseCode = "200", description = "get public issues and maturities details for analytical security id ")
	@GetMapping("/getInMUSPFPubMinMaxDates")
	public ResponseEntity<?> getMinAndMaxDatesIandM(@RequestParam(value = "asId") Long asId) {
		try {
			USPFMinMaxDates result = uspfRatingService.getIsseAndMaturitesMinMaxDates(asId);
			return ResponseHandler.generateResponse(RatingsDataConstant.SUCCESS, HttpStatus.OK, result);

		} catch (Exception e) {
			log.error("Exception: @USPFController -> getMinAndMaxDatesIandM: " + e.getMessage());
			return ResponseHandler.generateResponse(RatingsDataConstant.FAILURE, HttpStatus.INTERNAL_SERVER_ERROR,
					e.getMessage());
		}
	}



}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\dao\ArticlePDFDao.java

package com.spglobal.ratings.ratingsdata.dao;


import java.util.Objects;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import com.spglobal.ratings.ratingsdata.entity.ArticlePDFDetails;
import com.spglobal.ratings.ratingsdata.repository.ArticlePDFRepository;

import lombok.extern.slf4j.Slf4j;

@Slf4j
@Component
public class ArticlePDFDao {
	
	@Autowired
	private ArticlePDFRepository articlePDFRepository;
	
	public byte[] getArticlePDFByArticleId(Long articleId) {
		log.info("@ArticlePDFDao getArticlePDFByArticleId --> fetching article PDF");
		byte[] pdf = null;
		try {
			ArticlePDFDetails articlePDFDetails = articlePDFRepository.findByArticleId(articleId).orElse(null);
			if(!Objects.isNull(articlePDFDetails)) {
				pdf=articlePDFDetails.getPdf();
			}
		}catch(IllegalArgumentException iae) {
			log.error("IllegalArgumentException @ArticlePDFDao getArticlePDFByArticleId method --> Failed: {}", iae.getMessage());
			throw iae;
		} catch(Exception e) {
			log.error("Exception @ArticlePDFDao getArticlePDFByArticleId method --> Failed: {}", e.getMessage());
			throw e;
		}
		return pdf;
	}

}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\dao\CommonFeaturesDAO.java

package com.spglobal.ratings.ratingsdata.dao;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.stream.Collectors;

import org.apache.commons.lang3.ObjectUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.HttpHeaders;
import org.springframework.stereotype.Component;
import org.springframework.util.CollectionUtils;

import com.spglobal.ratings.ratingsdata.entity.CLOABSContacts;
import com.spglobal.ratings.ratingsdata.entity.Contacts;
import com.spglobal.ratings.ratingsdata.entity.CoreOrgIdKeyInstnMap;
import com.spglobal.ratings.ratingsdata.entity.EntityDetails;
import com.spglobal.ratings.ratingsdata.entity.RelatedEntities;
import com.spglobal.ratings.ratingsdata.entity.SnlEntityDetailsUnrated;
import com.spglobal.ratings.ratingsdata.entity.TimeZone;
import com.spglobal.ratings.ratingsdata.repository.CLOABSContactsRepository;
import com.spglobal.ratings.ratingsdata.repository.ContactsRepository;
import com.spglobal.ratings.ratingsdata.repository.CoreOrgIdKeyInstnMapRepository;
import com.spglobal.ratings.ratingsdata.repository.SnlEntityDetailsUnratedRepository;
import com.spglobal.ratings.ratingsdata.repository.TimeZoneRepository;
import com.spglobal.ratings.ratingsdata.repository.ViewEntityDetailsRepository;
import com.spglobal.ratings.ratingsdata.repository.ViewRelatedCNEntitiesRepository;
import com.spglobal.ratings.ratingsdata.repository.ViewRelatedEntitiesRepository;
import com.spglobal.ratings.ratingsdata.util.RatingsDataUtil;

import lombok.extern.slf4j.Slf4j;

@Slf4j
@Component
public class CommonFeaturesDAO {

	@Autowired
	ViewEntityDetailsRepository viewEntityDetailsRepository;

	@Autowired
	ViewRelatedEntitiesRepository viewRelatedEntitiesRepository;
	
	/*@Autowired
	ViewRelatedCNEntitiesRepository viewRelatedCNEntitiesRepository;
	
	@Autowired
	SnlEntityDetailsRepository snlEntityDetailsRepository;*/

	@Autowired
	SnlEntityDetailsUnratedRepository snlEntityDetailsUnratedRepository;
	
	@Autowired
	ContactsRepository contactsRepository;

	@Autowired
	TimeZoneRepository timeZoneRepository;

	@Autowired
	CoreOrgIdKeyInstnMapRepository coreOrgIdKeyInstnMapRepo;

	@Autowired
	private RatingsDataUtil ratingsUtil;
	
	@Autowired
	CLOABSContactsRepository contactsRepoCLOABS;


	@Value("#{${cn.entities.to.hide}}")
	private List<Long> cnEntities;
	
	public List<EntityDetails> getOrgAndTickerDetailsByEntityId(Long entityId) {
		log.info("@CommonFeaturesDAO getOrgAndTickerDetailsByEntityId --> fetch ticker details for entity: {} ",
				ratingsUtil.sanitizeString(entityId.toString()));
		try {
			return viewEntityDetailsRepository.findByEntityId(entityId);
		} catch (IllegalArgumentException iae) {
			log.error("IllegalArgumentException @CommonFeaturesDAO getOrgAndTickerDetailsByEntityId method --> Failed: {}",
					iae.getMessage());
		} catch (Exception e) {
			log.error("Exception @CommonFeaturesDAO getOrgAndTickerDetailsByEntityId method --> Failed: {}", e.getMessage());
		}
		return Collections.emptyList();
	}

	public List<RelatedEntities> getRelatedEntitiesByEntityId(Long entityId, HttpHeaders httpHeaders) {
		log.info("@CommonFeaturesDAO getRelatedEntitiesByEntityId --> fetch ticker details for entity: {} ",
				ratingsUtil.sanitizeString(entityId.toString()));
		try {
			//boolean isCnDomain = RestApiUtil.isCnDomain(httpHeaders);
//			return isCnDomain ? viewRelatedCNEntitiesRepository.findByEntityId(entityId)
//					: viewRelatedEntitiesRepository.findByEntityId(entityId);
			List<RelatedEntities> entities = viewRelatedEntitiesRepository.findByEntityId(entityId);
			return entities;
		} catch (IllegalArgumentException iae) {
			log.error("IllegalArgumentException @CommonFeaturesDAO getRelatedEntitiesByEntityId method --> Failed: {}", 
					iae.getMessage());
		} catch (Exception e) {
			log.error("Exception @CommonFeaturesDAO getRelatedEntitiesByEntityId method --> Failed: {}", e.getMessage());
		}
		return Collections.emptyList();
	}

	public List<RelatedEntities> getRelatedEntitiesBySNLID(String snlId, HttpHeaders httpHeaders) {
		log.info("@CommonFeaturesDAO getRelatedEntitiesBySNLID --> fetch ticker details for entity: {} ",
				ratingsUtil.sanitizeString(snlId.toString()));
		try {
			//boolean isCnDomain = RestApiUtil.isCnDomain(httpHeaders);
			List<RelatedEntities> entities = viewRelatedEntitiesRepository.findByKeyInstId(snlId);
			return entities;
		} catch (IllegalArgumentException iae) {
			log.error("IllegalArgumentException @CommonFeaturesDAO getRelatedEntitiesBySNLID method --> Failed: {}",
					iae.getMessage());
		} catch (Exception e) {
			log.error("Exception @CommonFeaturesDAO getRelatedEntitiesBySNLID method --> Failed: {}", e.getMessage());
		}
		return Collections.emptyList();
	}
	
	private List<RelatedEntities> filterCNEntities(List<RelatedEntities> originalEntities) {
		log.info("Original entities {} {} " , originalEntities, cnEntities);
		if (!CollectionUtils.isEmpty(originalEntities)) {
			return originalEntities.stream().filter(value -> !cnEntities.contains(value.getRelatedEntityId()))
					.collect(Collectors.toList());
		}
		return originalEntities;

	}

	public List<EntityDetails> getOrgAndTickerDetailsForsnlIds(List<String> snlIds) {
		try {
			log.info("@CommonFeaturesDAO getOrgAndTickerDetailsForEntityIds --> fetch ticker details for snlIds: {} ",
					ratingsUtil.sanitizeString(snlIds.toString()));
			List<EntityDetails> dbSnls = viewEntityDetailsRepository.findOrgAndTickerDetailsForSnlIds(snlIds);
			if ((!ObjectUtils.isEmpty(dbSnls)) && (dbSnls.size() < snlIds.size())) {
				List<String> snlIdsfromDB = dbSnls.stream().map(EntityDetails::getSnlId)
						.collect(Collectors.toList());
				List<String> unratedSnlIds = new ArrayList<>();
				snlIds.forEach(e -> {
					if (!snlIdsfromDB.contains(e)) {
						unratedSnlIds.add(e);
					}
				});

				List<SnlEntityDetailsUnrated> dbSnlUnrated = snlEntityDetailsUnratedRepository
						.findBySnlIds(unratedSnlIds);
				if (!ObjectUtils.isEmpty(dbSnlUnrated)) {
					dbSnls.addAll(covertToRated(dbSnlUnrated));
				}
			}
			return dbSnls;
		} catch (IllegalArgumentException iae) {
			log.error(
					"IllegalArgumentException @CommonFeaturesDAO getOrgAndTickerDetailsForsnlIds method --> Failed: {}",
					iae.getMessage());
		} catch (Exception e) {
			log.error("Exception @CommonFeaturesDAO getOrgAndTickerDetailsForsnlIds method --> Failed: {}",
					e.getMessage());
		}
		return Collections.emptyList();
	}

	public List<EntityDetails> getOrgAndTickerDetailsForSnlId(Long snlId) {
		log.info("@CommonFeaturesDAO getOrgAndTickerDetailsForsnlId --> fetch ticker details for snlId: {} ",
				ratingsUtil.sanitizeString(snlId.toString()));
		try {
			List<EntityDetails> finalSnl = viewEntityDetailsRepository.findBySnlId(snlId.toString());
			if (ObjectUtils.isEmpty(finalSnl)) {
				List<SnlEntityDetailsUnrated> snlUnrated = snlEntityDetailsUnratedRepository
						.findBySnlId(snlId.toString());
				log.info(
						"@CommonFeaturesDAO getOrgAndTickerDetailsForsnlId --> fetch ticker details for snlId in Unrated ");
				if (ObjectUtils.isNotEmpty(snlUnrated)) {
					finalSnl.addAll(covertToRated(snlUnrated));
				} else
					log.info("@CommonFeaturesDAO getOrgAndTickerDetailsForsnlId --> details for snlId not found");
			}
			return finalSnl;
		} catch (IllegalArgumentException iae) {
			log.error(
					"IllegalArgumentException @CommonFeaturesDAO getOrgAndTickerDetailsForsnlId method --> Failed: {}",
					iae.getMessage());
		} catch (Exception e) {
			log.error("Exception @CommonFeaturesDAO getOrgAndTickerDetailsForsnlId method --> Failed: {}",
					e.getMessage());
		}
		return Collections.emptyList();
	}
	
	public List<SnlEntityDetailsUnrated> findByInstitutionNameInList(List<String> instnNames) {
		List<String> instnNamesUppercase = instnNames.stream().map(String::toUpperCase).collect(Collectors.toList());
		return snlEntityDetailsUnratedRepository.findByInstitutionNameInList(instnNamesUppercase);
	}

	public List<EntityDetails> covertToRated(List<SnlEntityDetailsUnrated> snlUnratedList) {
		List<EntityDetails> convertedSnls = new ArrayList();
		if(!ObjectUtils.isEmpty(snlUnratedList)) {
			snlUnratedList.forEach(e -> {
				EntityDetails entityObj = new EntityDetails();
				entityObj.setSnlId(e.getSnlId());
				entityObj.setCapiqId(e.getCapiqId());
				entityObj.setTicker(e.getTicker());
				entityObj.setInstitutionName(e.getInstitutionName());
				convertedSnls.add(entityObj);
			});
		}
		return convertedSnls;
	}

	public List<TimeZone> getTimeZone(String timeZone) {
		log.info("@CommonFeaturesDAO getTimeZone --> fetch timeZone details: {} ",
				timeZone);
		try {
			return timeZoneRepository.findTimeZone(timeZone);
		} catch (IllegalArgumentException iae) {
			log.error("IllegalArgumentException @CommonFeaturesDAO getTimeZone method --> Failed: {}",
					iae.getMessage());
		} catch (Exception e) {
			log.error("Exception @CommonFeaturesDAO getTimeZone method --> Failed: {}", e.getMessage());
		}
		return Collections.emptyList();
	}
	
	public List<Contacts> getContacts(Long entityId, String capiqId, String contactType) {
		List<Contacts> contactsList = new ArrayList<Contacts>();
		try {
			CoreOrgIdKeyInstnMap coreMap;
			if(ObjectUtils.isNotEmpty(entityId)){
				coreMap = coreOrgIdKeyInstnMapRepo.getByFinsIdentifier(entityId.toString());
			}else{
				coreMap = coreOrgIdKeyInstnMapRepo.findByCapIQId(capiqId);
			}
			if (ObjectUtils.isNotEmpty(coreMap) && ObjectUtils.isNotEmpty(coreMap.getCoreFinsIdentifier())) {
				contactType = ObjectUtils.isEmpty(contactType) ? "" : contactType.toLowerCase();
				Long coreId = Long.valueOf(coreMap.getCoreFinsIdentifier());
				contactsList = contactsRepository.findByEntityIdAndContactType(coreId, contactType);
				return contactsList;
			}
		} catch (IllegalArgumentException iae) {
			log.error("IllegalArgumentException @CommonFeaturesDAO getContacts method --> Failed: {}",
					iae.getMessage());
		} catch (Exception e) {
			log.error("Exception @CommonFeaturesDAO getContacts method --> Failed: {}", e.getMessage());
		}
		return contactsList;
	}
	
	/**
	 * @param entityId
	 * @param contactType
	 * @return
	 */
	public List<CLOABSContacts> getCLOABSContacts(Long entityId, String subSectorCode, String contactType) {
		List<CLOABSContacts> contactsList = new ArrayList<CLOABSContacts>();
		try {
			if(!ObjectUtils.isEmpty(contactType)) {
				contactsList = contactsRepoCLOABS.findByEntityIdAndSubSectorCodeAndContactType(entityId,subSectorCode,contactType);
			}
			else
			  contactsList = contactsRepoCLOABS.findByEntityIdAndSubSectorCode(entityId, subSectorCode);
			
			return contactsList;
		} catch (IllegalArgumentException iae) {
			log.error("IllegalArgumentException @CommonFeaturesDAO getCLOABSContacts method --> Failed: {}",
					iae.getMessage());
		} catch (Exception e) {
			log.error("Exception @CommonFeaturesDAO getCLOABSContacts method --> Failed: {}", e.getMessage());
		}
		return contactsList;
	}

	public List<EntityDetails> getOrgAndTickerDetailsForCapiqId(String capiqId) {
		log.info("@CommonFeaturesDAO getOrgAndTickerDetailsForCapiqId --> fetch ticker details for capiqid: {} ",
				ratingsUtil.sanitizeString(capiqId));
		try {
			List<EntityDetails> entityList = viewEntityDetailsRepository.findByCapiqId(capiqId);
			if (CollectionUtils.isEmpty(entityList)) {
				List<SnlEntityDetailsUnrated> snlUnrated = snlEntityDetailsUnratedRepository
						.findByCapiqId(capiqId);
				log.info(
						"@CommonFeaturesDAO getOrgAndTickerDetailsForCapiqId --> fetch ticker details for capiqId in Unrated ");
				if (!CollectionUtils.isEmpty(snlUnrated)) {
					entityList.addAll(covertToRated(snlUnrated));
				} else
					log.info("@CommonFeaturesDAO getOrgAndTickerDetailsForCapiqId --> details for capiqId not found");
			}
			return entityList;
		} catch (IllegalArgumentException iae) {
			log.error(
					"IllegalArgumentException @CommonFeaturesDAO getOrgAndTickerDetailsForCapiqId method --> Failed: {}",
					iae.getMessage());
		} catch (Exception e) {
			log.error("Exception @CommonFeaturesDAO getOrgAndTickerDetailsForCapiqId method --> Failed: {}",
					e.getMessage());
		}
		return Collections.emptyList();
	}

	public List<EntityDetails> getOrgAndTickerDetailsForCapiqIds(List<String> list) {
		try {
			log.info("@CommonFeaturesDAO getOrgAndTickerDetailsForCapiqIds --> fetch ticker details for capiqs: {} ",
					ratingsUtil.sanitizeString(list.toString()));
			List<EntityDetails> entityDetailsList = viewEntityDetailsRepository.findOrgAndTickerDetailsForCapiqIds(list);
			if ((!ObjectUtils.isEmpty(entityDetailsList)) && (entityDetailsList.size() < list.size())) {
				List<String> capiqsFromDB = entityDetailsList.stream().map(EntityDetails::getCapiqId)
						.collect(Collectors.toList());
				List<String> unratedCapIds = new ArrayList<>();
				list.forEach(e -> {
					if (!capiqsFromDB.contains(e)) {
						unratedCapIds.add(e);
					}
				});

				List<SnlEntityDetailsUnrated> dbSnlUnrated = snlEntityDetailsUnratedRepository
						.findByCapiqIds(unratedCapIds);
				if (!ObjectUtils.isEmpty(dbSnlUnrated)) {
					entityDetailsList.addAll(covertToRated(dbSnlUnrated));
				}
			}
			return entityDetailsList;
		} catch (IllegalArgumentException iae) {
			log.error(
					"IllegalArgumentException @CommonFeaturesDAO getOrgAndTickerDetailsForCapiqIds method --> Failed: {}",
					iae.getMessage());
		} catch (Exception e) {
			log.error("Exception @CommonFeaturesDAO getOrgAndTickerDetailsForCapiqIds method --> Failed: {}",
					e.getMessage());
		}
		return Collections.emptyList();
	}

	public List<RelatedEntities> getRelatedEntitiesByCapiq(String capiqId) {
		log.info("@CommonFeaturesDAO getRelatedEntitiesByCapiq --> fetch ticker details for entity: {} ",
				ratingsUtil.sanitizeString(capiqId.toString()));
		try {
			//boolean isCnDomain = RestApiUtil.isCnDomain(httpHeaders);
			List<RelatedEntities> entities = viewRelatedEntitiesRepository.findByCapiqId(capiqId);
			return entities;
		} catch (IllegalArgumentException iae) {
			log.error("IllegalArgumentException @CommonFeaturesDAO getRelatedEntitiesByCapiq method --> Failed: {}",
					iae.getMessage());
		} catch (Exception e) {
			log.error("Exception @CommonFeaturesDAO getRelatedEntitiesByCapiq method --> Failed: {}", e.getMessage());
		}
		return Collections.emptyList();
	}

	public List<EntityDetails> getOrgAndTickerDetailsByEntityIds(List<String> listOfIds) {
		log.info("@CommonFeaturesDAO getOrgAndTickerDetailsByEntityId --> fetch ticker details for entity: {} ",
				ratingsUtil.sanitizeString(listOfIds.toString()));
		try {
			return viewEntityDetailsRepository.findOrgAndTickerDetailsForEntityIds(listOfIds);
		} catch (IllegalArgumentException iae) {
			log.error("IllegalArgumentException @CommonFeaturesDAO getOrgAndTickerDetailsByEntityId method --> Failed: {}",
					iae.getMessage());
		} catch (Exception e) {
			log.error("Exception @CommonFeaturesDAO getOrgAndTickerDetailsByEntityId method --> Failed: {}", e.getMessage());
		}
		return Collections.emptyList();
	}
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\dao\ConfigDetailsDao.java

package com.spglobal.ratings.ratingsdata.dao;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import com.spglobal.ratings.ratingsdata.entity.ConfigDetails;
import com.spglobal.ratings.ratingsdata.repository.ConfigDetailsRepository;

import lombok.extern.slf4j.Slf4j;

@Component
@Slf4j
public class ConfigDetailsDao {
	//@Autowired
	//private RatingsDataUtil ratingsUtil;
	
	@Autowired
	private ConfigDetailsRepository configDetailsRepository;
	
	public List<ConfigDetails> getConfigDetails(List<String> commaSepKeys) {
		//log.info("@ConfigDetailsDao getConfigDetails --> fetching config details for the keys: " +ratingsUtil.sanitizeString(commaSepKeys));
		
		List<ConfigDetails> configDetailsList = null;
		try {
			
			configDetailsList = configDetailsRepository.findByConfigKeys(commaSepKeys);
			
		} catch(IllegalArgumentException iae) {
			log.error("IllegalArgumentException @ConfigDetailsDao getConfigDetails method --> Failed: {}", iae.getMessage());
		} catch(Exception e) {
			log.error("Exception @ConfigDetailsDao getConfigDetails method --> Failed: {}", e.getMessage());
		}
		
		return configDetailsList;
	}


}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\dao\CoreOrgIdKeyInstnMapDao.java

package com.spglobal.ratings.ratingsdata.dao;

import java.util.Collections;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import com.spglobal.ratings.ratingsdata.entity.CoreOrgIdKeyInstnMap;
import com.spglobal.ratings.ratingsdata.entity.CoreOrgIdKeyInstnSPIdMap;
import com.spglobal.ratings.ratingsdata.model.EntityTypeIdsRequest;
import com.spglobal.ratings.ratingsdata.repository.CoreOrgIdKeyInstnMapRepository;
import com.spglobal.ratings.ratingsdata.repository.CoreOrgIdKeyInstnSPIdMapRepository;
import com.spglobal.ratings.ratingsdata.util.RatingsDataConstant;

import lombok.extern.slf4j.Slf4j;

@Component
@Slf4j
public class CoreOrgIdKeyInstnMapDao {

	@Autowired
	private CoreOrgIdKeyInstnMapRepository coreOrgIdKeyInstnMapRepo;
	
	@Autowired
	private CoreOrgIdKeyInstnSPIdMapRepository coreOrgIdKeyInstnSPIdMapRepository;

	public List<CoreOrgIdKeyInstnMap> getCoreOrgIds(List<String> orgIdsLngArrayList) {
		List<CoreOrgIdKeyInstnMap> coreOrgIdKeyInstnMap = null;
		try {
			coreOrgIdKeyInstnMap = coreOrgIdKeyInstnMapRepo.findByFinsIdentifier(orgIdsLngArrayList);
		} catch (IllegalArgumentException iae) {
			log.error("IllegalArgumentException @CoreOrgIdKeyInstnMapDao getCoreOrgIdKeyInstnMap method --> Failed: {}", iae.getMessage());
		} catch (Exception e) {
			log.error("Exception @CoreOrgIdKeyInstnMapDao getCoreOrgIdKeyIds method --> Failed: {}", e.getMessage());
		}
		return coreOrgIdKeyInstnMap;
	}

	public List<CoreOrgIdKeyInstnMap> getCoreOrgIdsByTypeandList(String type, List<String> idsList) throws Exception {
		try {
			if (RatingsDataConstant.CAPIQ_STR.equalsIgnoreCase(type)) {
				return coreOrgIdKeyInstnMapRepo.getOrgIdByCapiqIds(idsList);
			}
			if (type != null && type.equalsIgnoreCase(RatingsDataConstant.SNL_STR)) {
				return coreOrgIdKeyInstnMapRepo.findByFinsIdentifier(idsList);
			}

		} catch (Exception e) {
			log.error("Exception @CoreOrgIdKeyInstnMapDao getCoreOrgIds method --> Failed: {}", e.getMessage());
			throw e;
		}
		return Collections.emptyList();
	}

	public List<CoreOrgIdKeyInstnMap> getCoreOrgIdsByCapiqId(List<String> idsList) {
		List<CoreOrgIdKeyInstnMap> coreOrgIdKeyInstnMap = null;
		try {
			coreOrgIdKeyInstnMap = coreOrgIdKeyInstnMapRepo.getOrgIdByCapiqIds(idsList);
		} catch(IllegalArgumentException iae) {
			log.error("IllegalArgumentException @CoreOrgIdKeyInstnMapDao getCoreOrgIdsByCapiqId method --> Failed: {}", iae.getMessage());
		} catch(Exception e) {
			log.error("Exception @CoreOrgIdKeyInstnMapDao getCoreOrgIdsByCapiqId method --> Failed: {}", e.getMessage());
		}
		return coreOrgIdKeyInstnMap;
	}
	
	public List<CoreOrgIdKeyInstnSPIdMap> getCapiqIdsbyCoreSnlSpIds(EntityTypeIdsRequest entityTypeIdsRequest) {
		List<CoreOrgIdKeyInstnSPIdMap> capIQIdsByCoreIds = Collections.emptyList();
		if (entityTypeIdsRequest.getEntityType().equalsIgnoreCase(RatingsDataConstant.COREID_STR)) {
			capIQIdsByCoreIds = coreOrgIdKeyInstnSPIdMapRepository
					.getCapIQIdsByCoreIds(entityTypeIdsRequest.getEntityIds());
			
		}
		if (entityTypeIdsRequest.getEntityType().equalsIgnoreCase(RatingsDataConstant.SPID_STR)) {
			capIQIdsByCoreIds = coreOrgIdKeyInstnSPIdMapRepository
					.getCapIQIdsBySpIds(entityTypeIdsRequest.getEntityIds());
		}
		if (entityTypeIdsRequest.getEntityType().equalsIgnoreCase(RatingsDataConstant.SNLID_STR)) {
			capIQIdsByCoreIds = coreOrgIdKeyInstnSPIdMapRepository
					.getCapIQIdsBySnlIds(entityTypeIdsRequest.getEntityIds());
		}
		return capIQIdsByCoreIds;
	}
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\dao\CurrencyExchangeRateDao.java

package com.spglobal.ratings.ratingsdata.dao;

import java.util.List;
import java.util.Set;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.cache.annotation.Cacheable;
import org.springframework.stereotype.Component;
import org.springframework.util.CollectionUtils;

import com.spglobal.ratings.ratingsdata.entity.CurrencyExchangeRate;
import com.spglobal.ratings.ratingsdata.entity.CurrencyLookupEntity;
import com.spglobal.ratings.ratingsdata.entity.LanguageTranslationEntity;
import com.spglobal.ratings.ratingsdata.entity.MnemonicMagnitudeEntity;
import com.spglobal.ratings.ratingsdata.repository.CurrencyExchangeRateRepository;
import com.spglobal.ratings.ratingsdata.repository.CurrencyLookupRepository;
import com.spglobal.ratings.ratingsdata.repository.LanguageTranslationRepository;
import com.spglobal.ratings.ratingsdata.repository.MnemonicMagnitudeRepository;
import com.spglobal.ratings.ratingsdata.util.RedisConstants;

@Component
public class CurrencyExchangeRateDao {

	@Autowired
	private CurrencyExchangeRateRepository currencyExchangeRateRepository;

	@Autowired
	private CurrencyLookupRepository currencyLookupRepository;
	
	@Autowired
	private LanguageTranslationRepository languageTranslationRepository;
	
	@Autowired
	private MnemonicMagnitudeRepository mnemonicMagnitudeRepository;

    @Cacheable(value = RedisConstants.MAJOR_CURRENCY_CONV_CACHE , unless="#result.isEmpty()")
	public List<CurrencyExchangeRate> getMajorCurrencyExchangeRates(Set<Long> sortedasOfDates, String trgCurrency) {
		List<CurrencyExchangeRate> majorCurrencyConversion = currencyExchangeRateRepository.getMajorCurrencyConversion(sortedasOfDates, trgCurrency);
		if(CollectionUtils.isEmpty(majorCurrencyConversion) ||  (majorCurrencyConversion.size() != sortedasOfDates.size())) {
			majorCurrencyConversion = currencyExchangeRateRepository.getMajorCurrencyConversionWithRange(sortedasOfDates, trgCurrency);
		}
			return majorCurrencyConversion;
	}

    @Cacheable(value = RedisConstants.MINOR_CURRENCY_CONV_CACHE , unless="#result.isEmpty()")
	public List<CurrencyExchangeRate> getMinorCurrencyExchangeRates(Set<Long> sortedasOfDates, String trgCurrency) {
		List<CurrencyExchangeRate> minorCurrencyConversion = currencyExchangeRateRepository.getMinorCurrencyConversion(sortedasOfDates, trgCurrency);
		if(CollectionUtils.isEmpty(minorCurrencyConversion) ||  (minorCurrencyConversion.size() != sortedasOfDates.size())) {
			minorCurrencyConversion = currencyExchangeRateRepository.getMinorCurrencyConversionWithRange(sortedasOfDates, trgCurrency);	
		}
		return minorCurrencyConversion;
	}
	
    @Cacheable(value = RedisConstants.CURRENCY_LOOKUP_CACHE , unless="#result.isEmpty()")
	public List<CurrencyLookupEntity> findByCurrencyLookup() {
		return currencyLookupRepository.findByCurrencyLookup();
	}
	
    @Cacheable(value = RedisConstants.CURRENCY_TRANSLATION_BY_CODE , unless="#result.isEmpty()")
	public List<LanguageTranslationEntity> findCurrencyByLanguageCodeAndType(String languageCode, String type) {
		return languageTranslationRepository.findCurrencyByLanguageCodeAndType(languageCode, type);
	}
	
    @Cacheable(value = RedisConstants.CURRENCY_CODE_CACHE , unless="#result=null")
	public CurrencyLookupEntity getCurrencyByCurrencyCode(String isoCurrencyCode) {
		return currencyLookupRepository.findByIsoCurrencyCode(isoCurrencyCode);
	}
	
    @Cacheable(value = RedisConstants.MNEMONIC_MAGNITUDE_BY_CURRENCY_CODE , unless="#result=null")
	public MnemonicMagnitudeEntity getMnemonicMagnitude(String currencyCode) {
		return mnemonicMagnitudeRepository.getMnemonicMagnitude(currencyCode);
	}

}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\dao\CyberRiskAssessmentPublicDao.java

package com.spglobal.ratings.ratingsdata.dao;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Comparator;
import java.util.List;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springframework.util.ObjectUtils;

import com.spglobal.ratings.ratingsdata.entity.PeerSuppliersPortfolioContents;
import com.spglobal.ratings.ratingsdata.entity.ScoresAndModifiersPublic;
import com.spglobal.ratings.ratingsdata.entity.SnlEntityDetailsUnrated;
import com.spglobal.ratings.ratingsdata.entity.UspfPeerSuppliersPortfolioContents;
import com.spglobal.ratings.ratingsdata.entity.UspfRatingCodes;
import com.spglobal.ratings.ratingsdata.entity.UspfStateLookup;
import com.spglobal.ratings.ratingsdata.model.SectorSubSectorData;
import com.spglobal.ratings.ratingsdata.model.UspfFilterData;
import com.spglobal.ratings.ratingsdata.model.UspfFilterDropdownData;
import com.spglobal.ratings.ratingsdata.model.UspfStateData;
import com.spglobal.ratings.ratingsdata.repository.PortfolioContentsRepository;
import com.spglobal.ratings.ratingsdata.repository.ScoresAndModifiersPublicRepository;
import com.spglobal.ratings.ratingsdata.repository.SectorSubsectorEntityRepository;
import com.spglobal.ratings.ratingsdata.repository.SnlEntityDetailsUnratedRepository;
import com.spglobal.ratings.ratingsdata.repository.UspfPortfolioContentsRepository;
import com.spglobal.ratings.ratingsdata.repository.UspfRatingCodesRepository;
import com.spglobal.ratings.ratingsdata.repository.UspfStateLookupRepository;
import com.spglobal.ratings.ratingsdata.util.RatingsDataConstant;
import com.spglobal.ratings.ratingsdata.util.RatingsDataUtil;

import lombok.extern.slf4j.Slf4j;

@Component
@Slf4j
public class CyberRiskAssessmentPublicDao {
    
    @Autowired
    private RatingsDataUtil ratingsUtil;
    
   
    @Autowired
    private PortfolioContentsRepository portfolioContentsRepository;
    
    @Autowired
    private SnlEntityDetailsUnratedRepository snlEntityDetailsUnratedRepository;

    
	public List<PeerSuppliersPortfolioContents> getCyberPeersPortfolioContents(List<String> keyInstnIds, String domain) {
		log.info(
				"@CyberRiskAssessmentPublicDao getCyberPeersPortfolioContents --> fetch Cyber Peers PortfolioContents: "
						+ ratingsUtil.sanitizeString(keyInstnIds.toString()));

		List<PeerSuppliersPortfolioContents> portfolioContents = null;
		//Note
		//Cyber Risk DAO is using the view vw_peers_portfoliocontents for rated orgs
		//and passes list of keyinstns to generic view using same db repo and entity already defined for peers/suppliers flow
		//unrated orgs it is using vw_urated_entity_details
		try {
			long start = System.currentTimeMillis();
			
			//rated peers part
			if(RatingsDataConstant.COUNTRY_CODE_CN.equalsIgnoreCase(domain)) {
				log.info("Getting Cyber Peers for CN domain----");
				portfolioContents = portfolioContentsRepository.findByKeyInstnIdsForCNDomain(keyInstnIds);
			}
			else {
				portfolioContents = portfolioContentsRepository.findByKeyInstnIds(keyInstnIds);
			}
			
			//unrated peers part
			List<String> remainingOrgs = findRemainingOrg(keyInstnIds,portfolioContents); // if there was no data for any of keyinstn in previous call
			if(!ObjectUtils.isEmpty(remainingOrgs)) {
				log.info("Getting Unrated Cyber Peers ----");

				List<PeerSuppliersPortfolioContents> unratedPortfolioContents = new ArrayList<>();
				List<SnlEntityDetailsUnrated>  unratedSnlEntityDetails = 
						RatingsDataConstant.COUNTRY_CODE_CN.equalsIgnoreCase(domain)?snlEntityDetailsUnratedRepository.findBySnlIdsForCNDomain(remainingOrgs)
								:snlEntityDetailsUnratedRepository.findBySnlIds(remainingOrgs);
				if (!ObjectUtils.isEmpty(unratedSnlEntityDetails)) {
					unratedSnlEntityDetails.forEach(unratedSnlEntity -> {
						if ((unratedSnlEntity!=null)) {
							PeerSuppliersPortfolioContents unrateedPeersContents = new PeerSuppliersPortfolioContents();
							unrateedPeersContents.setKeyInstnId(unratedSnlEntity.getSnlId());
							unrateedPeersContents.setEntityName(unratedSnlEntity.getInstitutionName());
							unrateedPeersContents.setStateName(unratedSnlEntity.getStateName());
							unrateedPeersContents.setCountryname(unratedSnlEntity.getCountryName());
							unrateedPeersContents.setIndustry(unratedSnlEntity.getIndustryName());
							unrateedPeersContents.setActiveRatingInd('X'); // Not Applicable for unrated orgs so putting X (For rated orgs either Y or N)
							unrateedPeersContents.setFinancialsAvailable('X'); // for unrated orgs putting X (For rated orgs either Y or N)
							unratedPortfolioContents.add(unrateedPeersContents);
						}
					});
				}
				portfolioContents.addAll(unratedPortfolioContents);
			}
			
			long time = System.currentTimeMillis() - start;
			log.info("@CyberRiskAssessmentPublicDao getCyberPeersPortfolioContents --> Time of execution of query: " +time);
		} catch (IllegalArgumentException iae) {
			log.error(
					"IllegalArgumentException @CyberRiskAssessmentPublicDao getCyberPeersPortfolioContents method --> Failed: {}",
					iae.getMessage());
		} catch (Exception e) {
			log.error("Exception @CyberRiskAssessmentPublicDao getCyberPeersPortfolioContents method --> Failed: {}",
					e.getMessage());
		}
		return portfolioContents;
	}


	private List<String> findRemainingOrg(List<String> keyInstnIds,List<PeerSuppliersPortfolioContents> portfolioContents) {
		
		List<String> unratedOrgs  = null;
		List<String> ratedOrgs  = new ArrayList<>();
		log.info("Getting Unrated Orgs ----");
		
		if (!ObjectUtils.isEmpty(portfolioContents)) {
			portfolioContents.forEach(e -> {
				if(e!=null){
					String snlId = e.getKeyInstnId();
					ratedOrgs.add(snlId);
				}
					
			});
				
		}
		unratedOrgs = new ArrayList<>(keyInstnIds);
		unratedOrgs.removeAll(ratedOrgs);	
		
		return unratedOrgs;
	}
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\dao\DashboardMyRatingDao.java

package com.spglobal.ratings.ratingsdata.dao;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import com.spglobal.ratings.ratingsdata.entity.DashBoardMyRating;
import com.spglobal.ratings.ratingsdata.repository.DashboardMyRatingRepository;
import com.spglobal.ratings.ratingsdata.util.RatingsDataUtil;

import lombok.extern.slf4j.Slf4j;

@Component
@Slf4j
public class DashboardMyRatingDao {
	
	@Autowired
	DashboardMyRatingRepository myRatingRepository;
	
	@Autowired
	private RatingsDataUtil ratingsUtil;
	
	public DashBoardMyRating getDashBoardMyRatingDetails(Long entityId) {
		log.info("@DashboardMyRatingDao getDashBoardMyRatingDetails --> fetch rating details for entity: " +ratingsUtil.sanitizeString(entityId.toString()));
		
		DashBoardMyRating ratingDetails = null;
		try {
			ratingDetails = myRatingRepository.findByEntityId(entityId);
		} catch(IllegalArgumentException iae) {
			log.error("IllegalArgumentException @DashboardMyRatingDao getDashBoardMyRatingDetails method --> Failed: {}", iae.getMessage());
		} catch(Exception e) {
			log.error("Exception @DashboardMyRatingDao getDashBoardMyRatingDetails method --> Failed: {}", e.getMessage());
		}
		return ratingDetails;
	}
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\dao\DefinitionsConfigDAO.java

package com.spglobal.ratings.ratingsdata.dao;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.cache.annotation.Cacheable;
import org.springframework.stereotype.Component;
import org.springframework.util.CollectionUtils;

import com.spglobal.ratings.ratingsdata.entity.DefinitionsConfig;
import com.spglobal.ratings.ratingsdata.repository.DefinitionsConfigRepository;
import com.spglobal.ratings.ratingsdata.util.RedisConstants;

import lombok.extern.slf4j.Slf4j;

@Component
@Slf4j
public class DefinitionsConfigDAO {
	@Autowired
	private DefinitionsConfigRepository definitionsConfigRepository;

	public List<DefinitionsConfig> getDefinitionConfigDetails() {
		try {
			log.info("calling getDefinitions method -----------");
			return definitionsConfigRepository.getDefinitions();

		} catch (IllegalArgumentException iae) {
			log.error("IllegalArgumentException @DefinitionsConfig getDefinitionConfigDetails method --> Failed: {}",
					iae.getMessage());
		} catch (Exception e) {
			log.error("Exception @DefinitionsConfig getDefinitionConfigDetails method --> Failed: {}", e.getMessage());
		}
		return null;
	}

    @Cacheable(value = RedisConstants.DEFINATIONS_BY_TYPE_CACHE , unless="#result.isEmpty()")
	public List<DefinitionsConfig> getDefinitionConfigDetails(String analyticCaseType, List<String> dataElementType,
			List<String> dataElementGroup) {
		try {
			log.info("calling getDefinitions method -----------");

			analyticCaseType = analyticCaseType.toLowerCase();
			if (!CollectionUtils.isEmpty(dataElementType)) {
				dataElementType.replaceAll(String::toLowerCase);
			}
			if (!CollectionUtils.isEmpty(dataElementGroup)) {
				dataElementGroup.replaceAll(String::toLowerCase);
			}
			return definitionsConfigRepository.getDefinitions(analyticCaseType, dataElementType, dataElementGroup);

		} catch (IllegalArgumentException iae) {
			log.error("IllegalArgumentException @DefinitionsConfig getDefinitionConfigDetails method --> Failed: {}",
					iae.getMessage());
			throw iae;
		} catch (Exception exception) {
			log.error("Exception @DefinitionsConfig getDefinitionConfigDetails method --> Failed: {}", exception.getMessage());
			throw exception;
		}
	}
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\dao\DeriveRatingDao.java

package com.spglobal.ratings.ratingsdata.dao;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import com.spglobal.ratings.ratingsdata.entity.DeriveRating;
import com.spglobal.ratings.ratingsdata.repository.DeriveRatingRepository;

import lombok.extern.slf4j.Slf4j;

@Slf4j
@Component
public class DeriveRatingDao {

	@Autowired
	private DeriveRatingRepository deriveRatingRepository;
	
	public DeriveRating getDeriveRatingByRatingDetailId(Long ratingDetailId) throws Exception {
		log.info("@DeriveRatingDao getDeriveRatingByRatingDetailId --> fetching details for ratingDetailId: " + ratingDetailId);
		if(ratingDetailId == null) {
			log.error("IllegalArgumentException @DeriveRatingDao getDeriveRatingByRatingDetailId method --> Failed");
			throw new IllegalArgumentException("ratingDetailId parameter should not be null");
		}
		
		DeriveRating deriveRating = null;
		try {
			deriveRating = deriveRatingRepository.getDeriveRatingByRatingDetailId(ratingDetailId);
		} catch(Exception exception) {
			log.error("Exception @DeriveRatingDao getDeriveRatingByRatingDetailId method --> Failed: {}", exception.getMessage());
			throw exception;
		}
		return deriveRating;
	}
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\dao\EntityCurrentRatingDao.java

package com.spglobal.ratings.ratingsdata.dao;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import com.spglobal.ratings.ratingsdata.entity.EntityCurrentRating;
import com.spglobal.ratings.ratingsdata.entity.EntityCurrentRatingPublic;
import com.spglobal.ratings.ratingsdata.entity.EntityRatingsTACPublic;
import com.spglobal.ratings.ratingsdata.entity.EntityRatingsTACPvt;
import com.spglobal.ratings.ratingsdata.repository.EntityCurrentRatingPublicRepo;
import com.spglobal.ratings.ratingsdata.repository.EntityCurrentRatingRepository;
import com.spglobal.ratings.ratingsdata.repository.EntityRatingsTACPublicRepo;
import com.spglobal.ratings.ratingsdata.repository.EntityRatingsTACPvtRepo;
import com.spglobal.ratings.ratingsdata.util.RatingsDataUtil;

import lombok.extern.slf4j.Slf4j;

@Component
@Slf4j
public class EntityCurrentRatingDao {
	
	@Autowired
	private RatingsDataUtil ratingsUtil;
	
	@Autowired
	private EntityCurrentRatingRepository entityCurrentRatingRepo;
	
	@Autowired
	private EntityCurrentRatingPublicRepo entityCurrentRatingPublicRepo;
	
	@Autowired
	private EntityRatingsTACPublicRepo entityRatingsTACPublicRepo;
	
	@Autowired
	private EntityRatingsTACPvtRepo entityRatingsTACPvtRepo;
	
	
	public EntityCurrentRating getEntityCurrentRating(Long entityId) {
		log.info("@EntityCurrentRatingDao getEntityCurrentRating --> fetching current rating for entity: " +ratingsUtil.sanitizeString(entityId.toString()));
		
		EntityCurrentRating currentRating = null;
		try {
			currentRating = entityCurrentRatingRepo.findByEntityId(entityId);
		} catch(IllegalArgumentException iae) {
			log.error("IllegalArgumentException @EntityCurrentRatingDao getEntityCurrentRating method --> Failed: {}", iae.getMessage());
		} catch(Exception e) {
			log.error("Exception @EntityCurrentRatingDao getEntityCurrentRating method --> Failed: {}", e.getMessage());
		}
		return currentRating;
	}
	public EntityCurrentRatingPublic getEntityCurrentRatingPublic(Long entityId) {
		log.info("@EntityCurrentRatingDao getEntityCurrentRatingPublic --> fetching current rating for entity: " +ratingsUtil.sanitizeString(entityId.toString()));
		
		EntityCurrentRatingPublic currentRating = null;
		try {
			currentRating = entityCurrentRatingPublicRepo.findByEntityId(entityId);
		} catch(IllegalArgumentException iae) {
			log.error("IllegalArgumentException @EntityCurrentRatingDao getEntityCurrentRatingPublic method --> Failed: {}", iae.getMessage());
		} catch(Exception e) {
			log.error("Exception @EntityCurrentRatingDao getEntityCurrentRatingPublic method --> Failed: {}", e.getMessage());
		}
		return currentRating;
	}
	
	public List<EntityRatingsTACPublic> getEntityRatingsTACPublic(Long entityId) {
		log.info("@EntityCurrentRatingDao EntityRatingsTACPublic --> fetching current rating for entity: " +ratingsUtil.sanitizeString(entityId.toString()));
		
		 List<EntityRatingsTACPublic> entityRatingsList = null;
		try {
			entityRatingsList = entityRatingsTACPublicRepo.findByEntityId(entityId);
		} catch(IllegalArgumentException iae) {
			log.error("IllegalArgumentException @EntityCurrentRatingDao getEntityRatingsTACPublic method --> Failed: {}", iae.getMessage());
		} catch(Exception e) {
			log.error("Exception @EntityCurrentRatingDao getEntityRatingsTACPublic method --> Failed: {}", e.getMessage());
		}
		return entityRatingsList;
	}
	
	public List<EntityRatingsTACPvt> getEntityRatingsTACPvt(Long entityId) {
		log.info("@EntityCurrentRatingDao EntityRatingsTACPvt --> fetching current rating for entity: " +ratingsUtil.sanitizeString(entityId.toString()));
		
		List<EntityRatingsTACPvt> entityRatingsList = null;
		try {
			entityRatingsList = entityRatingsTACPvtRepo.findByEntityId(entityId);
		} catch(IllegalArgumentException iae) {
			log.error("IllegalArgumentException @EntityCurrentRatingDao getEntityRatingsTACPvt method --> Failed: {}", iae.getMessage());
		} catch(Exception e) {
			log.error("Exception @EntityCurrentRatingDao getEntityRatingsTACPvt method --> Failed: {}", e.getMessage());
		}
		return entityRatingsList;
	}
	
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\dao\EntityRatingsDao.java

package com.spglobal.ratings.ratingsdata.dao;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import com.spglobal.ratings.ratingsdata.entity.EntityRatings;
import com.spglobal.ratings.ratingsdata.repository.EntityRatingsRepository;
import com.spglobal.ratings.ratingsdata.util.RatingsDataUtil;

import lombok.extern.slf4j.Slf4j;

@Component
@Slf4j
public class EntityRatingsDao {
	
	@Autowired
	private RatingsDataUtil ratingsUtil;
	
	@Autowired
	private EntityRatingsRepository entityRatingsRepo;
	
	public List<EntityRatings> getEntityRatings(Long entityId) {
		log.info("@EntityRatingsDao getEntityRatings --> fetch ratings for entity: " +ratingsUtil.sanitizeString(entityId.toString()));
		
		List<EntityRatings> entityRatings = null;
		try {
			entityRatings = entityRatingsRepo.findByEntityId(entityId);
		} catch(IllegalArgumentException iae) {
			log.error("IllegalArgumentException @EntityRatingsDao getEntityRatings method --> Failed: {}", iae.getMessage());
		} catch(Exception e) {
			log.error("Exception @EntityRatingsDao getEntityRatings method --> Failed: {}", e.getMessage());
		}
		return entityRatings;
	}
	
	public EntityRatings getEntityRatingDetails(Long entityId, Long ratingDetailId) {
		log.info("@EntityRatingsDao getEntityRatingDetails --> fetch rating details for entity: " +ratingsUtil.sanitizeString(entityId.toString()));
		
		EntityRatings ratingDetails = null;
		try {
			ratingDetails = entityRatingsRepo.findByEntityIdAndRatingDetailId(entityId, ratingDetailId);
		} catch(IllegalArgumentException iae) {
			log.error("IllegalArgumentException @EntityRatingsDao getEntityRatingDetails method --> Failed: {}", iae.getMessage());
		} catch(Exception e) {
			log.error("Exception @EntityRatingsDao getEntityRatingDetails method --> Failed: {}", e.getMessage());
		}
		return ratingDetails;
	}

}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\dao\EntityRatingsHistoryDao.java

package com.spglobal.ratings.ratingsdata.dao;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import com.spglobal.ratings.ratingsdata.entity.EntityRatingsHistTACPub;
import com.spglobal.ratings.ratingsdata.entity.EntityRatingsHistory;
import com.spglobal.ratings.ratingsdata.entity.EntityRatingsHistoryTAC;
import com.spglobal.ratings.ratingsdata.repository.EntityRatingsHistTACPubRepo;
import com.spglobal.ratings.ratingsdata.repository.EntityRatingsHistoryRepository;
import com.spglobal.ratings.ratingsdata.repository.EntityRatingsHistoryTACRepo;
import com.spglobal.ratings.ratingsdata.util.RatingsDataUtil;

import lombok.extern.slf4j.Slf4j;

@Component
@Slf4j
public class EntityRatingsHistoryDao {
	
	@Autowired
	private RatingsDataUtil ratingsUtil;
	
	@Autowired
	private EntityRatingsHistoryRepository entityRatingsHistoryRepo;
	
	@Autowired
	private EntityRatingsHistoryTACRepo entityRatingsHistoryTACRepo;
	
	@Autowired
	private EntityRatingsHistTACPubRepo entityRatingsHistTACPubRepo;

	
	/**
	 * @param entityId
	 * @param debtTypeCode
	 * @param ratingTypeCode
	 * @return
	 */
	public List<EntityRatingsHistory> getEntityRatingsHistory(Long entityId, String debtTypeCode, String ratingTypeCode) {
		log.info("@EntityRatingsHistoryDAO: getEntityRatingsHistory for Entity " +ratingsUtil.sanitizeString(entityId.toString()) + "with "
				+ "debt type code" +ratingsUtil.sanitizeString(ratingTypeCode) + "and rating type code " +ratingsUtil.sanitizeString(ratingTypeCode));
		
		List<EntityRatingsHistory> entityRatingsHistory  = null;
		
		try {
			entityRatingsHistory = entityRatingsHistoryRepo.findByEntityIdAndDebtTypeCodeAndRatingTypeCode(entityId, debtTypeCode, ratingTypeCode);
		} catch(IllegalArgumentException iae) {
			log.debug("IllegalArgumentException @EntityRatingsHistoryDAO --> Failed: {}", iae.getMessage());
		} catch (Exception e) {
			log.error(" Exception @EntityRatingsHistoryDAO @getEntityRatingsHistory --> Failed: {}", e.getMessage());
		} 
		return entityRatingsHistory;
	}

	
	/**
	 * @param entityId
	 * @param debtTypeCode
	 * @param ratingTypeCode
	 * @return
	 */
	public List<EntityRatingsHistTACPub> getEntityRatingsHistTACPub(Long entityId, String debtTypeCode, String ratingTypeCode) {
		log.info("@EntityRatingsHistoryDAO: getEntityRatingsHistTACPub for Entity " +ratingsUtil.sanitizeString(entityId.toString()) + "with "
				+ "debt type code" +ratingsUtil.sanitizeString(debtTypeCode) + "and rating type code " +ratingsUtil.sanitizeString(ratingTypeCode));
		
		List<EntityRatingsHistTACPub> entityRatingsHistory  = null;
		
		try {
			entityRatingsHistory = entityRatingsHistTACPubRepo.findByEntityIdAndDebtTypeCodeAndRatingTypeCode(entityId, debtTypeCode, ratingTypeCode);
		} catch(IllegalArgumentException iae) {
			log.debug("IllegalArgumentException @EntityRatingsHistoryDAO getEntityRatingsHistTACPub --> Failed: {}", iae.getMessage());
		} catch (Exception e) {
			log.error(" Exception @EntityRatingsHistoryDAO @getEntityRatingsHistTACPub --> Failed: {}", e.getMessage());
		} 
		return entityRatingsHistory;
	}
	
	/**
	 * @param entityId
	 * @param debtTypeCode
	 * @param ratingTypeCode
	 * @return
	 */
	public List<EntityRatingsHistoryTAC> getEntityRatingsHistoryTAC(Long entityId, String debtTypeCode, String ratingTypeCode) {
		log.info("@EntityRatingsHistoryDAO: getEntityRatingsHistoryTAC for Entity " +ratingsUtil.sanitizeString(entityId.toString()) + "with "
				+ "debt type code" +ratingsUtil.sanitizeString(ratingTypeCode) + "and rating type code " +ratingsUtil.sanitizeString(ratingTypeCode));
		
		List<EntityRatingsHistoryTAC> entityRatingsHistory  = null;
		
		try {
			entityRatingsHistory = entityRatingsHistoryTACRepo.findByEntityIdAndDebtTypeCodeAndRatingTypeCode(entityId, debtTypeCode, ratingTypeCode);
		} catch(IllegalArgumentException iae) {
			log.debug("IllegalArgumentException @EntityRatingsHistoryDAO getEntityRatingsHistoryTAC --> Failed: {}", iae.getMessage());
		} catch (Exception e) {
			log.error(" Exception @EntityRatingsHistoryDAO @getEntityRatingsHistoryTAC --> Failed: {}", e.getMessage());
		} 
		return entityRatingsHistory;
	}
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\dao\EntityRatingsHistoryPublicDao.java

package com.spglobal.ratings.ratingsdata.dao;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import com.spglobal.ratings.ratingsdata.entity.EntityRatingsHistoryPublic;
import com.spglobal.ratings.ratingsdata.repository.EntityRatingsHistoryPublicRepository;
import com.spglobal.ratings.ratingsdata.util.RatingsDataUtil;

import lombok.extern.slf4j.Slf4j;

@Component
@Slf4j
public class EntityRatingsHistoryPublicDao {
	
	@Autowired
	private RatingsDataUtil ratingsUtil;
	
	@Autowired
	private EntityRatingsHistoryPublicRepository ratingsHistoryRepo;
	
	public List<EntityRatingsHistoryPublic> getPublicEntityRatingsHistory(Long entityId, String debtTypeCode, String ratingTypeCode) {
		
		log.info("@EntityRatingsHistoryPublicDAO: getPublicEntityRatingsHistory for Entity " +ratingsUtil.sanitizeString(entityId.toString()) + "with "
				+ "debt type code" +ratingsUtil.sanitizeString(ratingTypeCode) + "and rating type code " +ratingsUtil.sanitizeString(ratingTypeCode));
		
		List<EntityRatingsHistoryPublic> entityRatingsHistory  = null;
		
		try {
			entityRatingsHistory = ratingsHistoryRepo.findByEntityIdAndDebtTypeCodeAndRatingTypeCode(entityId, debtTypeCode, ratingTypeCode);
		} catch(IllegalArgumentException iae) {
			log.debug("IllegalArgumentException @EntityRatingsHistoryPublicDAO --> Failed: {}", iae.getMessage());
		} catch (Exception e) {
			log.error(" Exception @EntityRatingsHistoryPublicDAO @getPublicEntityRatingsHistory --> Failed: {}", e.getMessage());
		} 
		return entityRatingsHistory;
	}

}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\dao\EntityRatingsPublicDao.java

package com.spglobal.ratings.ratingsdata.dao;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import com.spglobal.ratings.ratingsdata.entity.EntityRatingsPublic;
import com.spglobal.ratings.ratingsdata.repository.EntityRatingsPublicRepository;
import com.spglobal.ratings.ratingsdata.util.RatingsDataUtil;

import lombok.extern.slf4j.Slf4j;

@Component
@Slf4j
public class EntityRatingsPublicDao {
	
	@Autowired
	private RatingsDataUtil ratingsUtil;
	
	@Autowired
	private EntityRatingsPublicRepository entityRatingsRepo;
	
	public List<EntityRatingsPublic> getPublicEntityRatings(Long entityId) {
		log.info("@EntityRatingsPublicDao getPublicEntityRatings --> fetching ratings for entity: " +ratingsUtil.sanitizeString(entityId.toString()));
		
		List<EntityRatingsPublic> entityRatings = null;
		try {
			entityRatings = entityRatingsRepo.findByEntityId(entityId);
		} catch(IllegalArgumentException iae) {
			log.error("IllegalArgumentException @EntityRatingsPublicDao getPublicEntityRatings method --> Failed: {}", iae.getMessage());
		} catch(Exception e) {
			log.error("Exception @EntityRatingsPublicDao getPublicEntityRatings method --> Failed: {}", e.getMessage());
		}
		return entityRatings;
	}
	
	public EntityRatingsPublic getPublicEntityRatingDetails(Long entityId, Long ratingDetailId) {
		log.info("@EntityRatingsPublicDao getPublicEntityRatingDetails --> fetch rating details for entity: " +ratingsUtil.sanitizeString(entityId.toString()));
		
		EntityRatingsPublic ratingDetails = null;
		try {
			ratingDetails = entityRatingsRepo.findByEntityIdAndRatingDetailId(entityId, ratingDetailId);
		} catch(IllegalArgumentException iae) {
			log.error("IllegalArgumentException @EntityRatingsPublicDao getPublicEntityRatingDetails method --> Failed: {}", iae.getMessage());
		} catch(Exception e) {
			log.error("Exception @EntityRatingsPublicDao getPublicEntityRatingDetails method --> Failed: {}", e.getMessage());
		}
		return ratingDetails;
	}

}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\dao\FinancialRatingDao.java

package com.spglobal.ratings.ratingsdata.dao;

import java.util.Collections;
import java.util.List;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springframework.util.ObjectUtils;

import com.spglobal.ratings.ratingsdata.entity.FinancialPeers;
import com.spglobal.ratings.ratingsdata.entity.MNemonicDetailsEntity;
import com.spglobal.ratings.ratingsdata.entity.MnemonicMagnitudeEntity;
import com.spglobal.ratings.ratingsdata.entity.PeriodDetailsEntity;
import com.spglobal.ratings.ratingsdata.model.FinancialData;
import com.spglobal.ratings.ratingsdata.repository.ElementMasterRepository;
import com.spglobal.ratings.ratingsdata.repository.FinancialCustomRatingRepository;
import com.spglobal.ratings.ratingsdata.repository.FinancialLTMRatingRepository;
import com.spglobal.ratings.ratingsdata.repository.FinancialPeersRepository;
import com.spglobal.ratings.ratingsdata.repository.FinancialQuarterlyRatingRepository;
import com.spglobal.ratings.ratingsdata.repository.MnemonicMagnitudeRepository;
import com.spglobal.ratings.ratingsdata.repository.RatingPeriodRepository;
import com.spglobal.ratings.ratingsdata.util.FinancialRatingColumn;
import com.spglobal.ratings.ratingsdata.util.RatingsDataUtil;

import lombok.extern.slf4j.Slf4j;

@Component
@Slf4j
public class FinancialRatingDao {

	@Autowired
	private RatingsDataUtil ratingsUtil;

	@Autowired
	private FinancialQuarterlyRatingRepository financialQuartRatingsRepo;

	@Autowired
	private FinancialLTMRatingRepository financialLTMRatingsRepo;

	@Autowired
	private RatingPeriodRepository ratingPeriodRepository;

	@Autowired
	private ElementMasterRepository elementMasterRepository;
	
	@Autowired
	private FinancialCustomRatingRepository financialCustomRatingRepository;
	
	@Autowired
	private FinancialPeersRepository financialPeersRepository;
		
	@Autowired
	private MnemonicMagnitudeRepository mnemonicMagnitudeRepository;

	public List<FinancialData> getFinancialRatingDetails(Long coreId, String templateType) {
		log.info("@FinancialRatingDao getFinancialRatingDetails --> fetching ratings for coreId: {}",
				ratingsUtil.sanitizeString(coreId.toString()), ratingsUtil.sanitizeString(templateType));

		try {
			templateType = templateType.toLowerCase();
			return financialLTMRatingsRepo.findByCoreIdAndTemplateName(coreId, templateType);
		} catch (IllegalArgumentException iae) {
			log.error("IllegalArgumentException @FinancialRatingDao getFinancialRatingDetails method --> Failed: {}", iae.getMessage());
		} catch (Exception e) {
			log.error("Exception @FinancialRatingDao getFinancialRatingDetails method --> Failed: {}", e.getMessage());
		}
		return Collections.emptyList();
	}
	
	public List<FinancialData> getFinancialQuartelyRatingDetails(Long coreId, String templateType) {
		log.info("@FinancialRatingDao getFinancialQuartelyRatingDetails --> fetching ratings for coreId: {}",
				ratingsUtil.sanitizeString(coreId.toString()), ratingsUtil.sanitizeString(templateType));
		try {
			templateType = templateType.toLowerCase();
			return financialQuartRatingsRepo.findByCoreIdAndTemplateName(coreId, templateType);
		} catch (IllegalArgumentException iae) {
			log.error("IllegalArgumentException @FinancialRatingDao getFinancialQuartelyRatingDetails method --> Failed: {}", iae.getMessage());
		} catch (Exception e) {
			log.error("Exception @FinancialRatingDao getFinancialQuartelyRatingDetails method --> Failed: {}", e.getMessage());
		}
		return Collections.emptyList();
	}
	
	public List<FinancialData> getCustomFinancialRatingDetails(Long coreId, String templateType, List<String> periodIds) {
		log.info("@FinancialRatingDao getCustomFinancialRatingDetails --> fetching ratings for coreId: {}",
				ratingsUtil.sanitizeString(coreId.toString()));

		try {
			templateType = templateType.toLowerCase();
			return financialCustomRatingRepository.findByCoreIdAndTemplateNameAndFinPeriodId(coreId, templateType, periodIds);
		} catch (IllegalArgumentException iae) {
			log.error("IllegalArgumentException @FinancialRatingDao getCustomFinancialRatingDetails method --> Failed: {}", iae.getMessage());
		} catch (Exception e) {
			log.error("Exception @FinancialRatingDao getCustomFinancialRatingDetails method --> Failed: {}", e.getMessage());
		}
		return Collections.emptyList();
	}
	
	public List<PeriodDetailsEntity> getFinancialPeriods(Long coreId, List<String> periods) {
		log.info("@FinancialRatingDao getFinancialPeriods --> fetching ratings for coreId: {}",
				ratingsUtil.sanitizeString(coreId.toString()));

		List<PeriodDetailsEntity> entityRatings = null;
		try {
			periods.replaceAll(String::toLowerCase);
			entityRatings = ratingPeriodRepository.findByCoreIdAndPeriodTypeNamed(coreId, periods);
		} catch (IllegalArgumentException iae) {
			log.error("IllegalArgumentException @FinancialRatingDao getFinancialPeriods method --> Failed: {}", iae.getMessage());
		} catch (Exception e) {
			log.error("Exception @FinancialRatingDao getFinancialPeriods method --> Failed: {}", e.getMessage());
		}
		return entityRatings;
	}
	
	public List<MNemonicDetailsEntity> getMNemonic(String templateName, String trgCurrency) {
		List<MNemonicDetailsEntity> details = null;
		try {
			templateName = templateName.toLowerCase();
			details = elementMasterRepository.findByTemplateName(templateName);
			if (!ObjectUtils.isEmpty(trgCurrency)) {
				MnemonicMagnitudeEntity findByMnemonicMagnitude = mnemonicMagnitudeRepository.getMnemonicMagnitude(trgCurrency);
				details.stream().filter(s -> s.getMagnitude().equalsIgnoreCase(FinancialRatingColumn.FIN_MAGNITUDE_VAL)).forEach(
						f -> f.setProductCaption(f.getProductCaption().replace(FinancialRatingColumn.FIN_MAGNITUDE_VAL,
								!ObjectUtils.isEmpty(findByMnemonicMagnitude) ? findByMnemonicMagnitude.getConvertedMagnitude() : FinancialRatingColumn.REPORTED_CURRENCY_MAGNITUDE)));
			}

		} catch (IllegalArgumentException iae) {
			log.error("IllegalArgumentException @FinancialRatingDao getMNemonic method --> Failed: {}",
					iae.getMessage());
		} catch (Exception e) {
			log.error("Exception @FinancialRatingDao getMNemonic method --> Failed: {}", e.getMessage());
		}
		return details;
	}
	
	public List<FinancialPeers> getFinancialPeers(List<String> entities, String template) {
		try {
			List<Long> entitesArrayList = entities.stream().map(e -> Long.parseUnsignedLong(e)).collect(Collectors.toList());
			return financialPeersRepository.findByCoreIdAndTemplateName(entitesArrayList,template);
		} catch (IllegalArgumentException iae) {
			log.error("IllegalArgumentException @FinancialRatingDao getFinancialPeers method --> Failed: {}", iae.getMessage());
		} catch (Exception e) {
			log.error("Exception @FinancialRatingDao getFinancialPeers method --> Failed: {}", e.getMessage());
		}
		return Collections.emptyList();
	}
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\dao\InvestorSentimentDAO.java

package com.spglobal.ratings.ratingsdata.dao;

import com.spglobal.ratings.ratingsdata.entity.InvestorSentimentCommentry;
import com.spglobal.ratings.ratingsdata.entity.InvestorSentimentNumbersRecentStudies;
import com.spglobal.ratings.ratingsdata.repository.InvestorSentimentCommentryRepository;
import com.spglobal.ratings.ratingsdata.repository.InvestorSentimentNumbersRepository;
import com.spglobal.ratings.ratingsdata.util.RatingsDataUtil;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springframework.stereotype.Service;

import java.util.List;

@Slf4j
@Component
@Service
public class InvestorSentimentDAO {

    @Autowired
    private InvestorSentimentNumbersRepository investorSentimentNumbersRepository;

    @Autowired
    private InvestorSentimentCommentryRepository investorSentimentCommentaryRepository;

    @Autowired
    private RatingsDataUtil ratingsUtil;

    public List<InvestorSentimentNumbersRecentStudies> getInvestorSentimentNumbersByIndustryIdAndType(Long industryId, String type) {
        log.info("@InvestorSentimentDAO getInvestorSentimentNumbersByIndustryIdAndType({},{})", ratingsUtil.sanitizeString(String.valueOf(industryId)), ratingsUtil.sanitizeString(type));
        List<InvestorSentimentNumbersRecentStudies> investorSentimentNumbersRecentStudiesList = null;
        try {
            investorSentimentNumbersRecentStudiesList = investorSentimentNumbersRepository.findByIndustryIdAndType(industryId, type);
        } catch (Exception exception) {
            log.error("Exception @InvestorSentimentDAO getInvestorSentimentNumbersByIndustryIdAndType method --> Failed: {}", exception.getMessage());
            throw exception;
        }
        return investorSentimentNumbersRecentStudiesList;
    }

    public List<InvestorSentimentCommentry> getInvestorSentimentCommentryByIndustryId(Long industryId) {
        log.info("@InvestorSentimentDAO getInvestorSentimentCommentryByIndustryId({},{})", ratingsUtil.sanitizeString(String.valueOf(industryId)));
        List<InvestorSentimentCommentry> investorSentimentCommentry = null;
        try {
            investorSentimentCommentry = investorSentimentCommentaryRepository.getInvestorSentimentCommentryByIndustryId(industryId);
        } catch (Exception exception) {
            log.error("Exception @InvestorSentimentDAO getInvestorSentimentCommentry method --> Failed: {}", exception.getMessage());
            throw exception;
        }
        return investorSentimentCommentry;
    }
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\dao\IssuesAndMaturitiesDao.java

package com.spglobal.ratings.ratingsdata.dao;

import java.util.ArrayList;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import com.spglobal.ratings.ratingsdata.entity.IssuesAndMaturities;
import com.spglobal.ratings.ratingsdata.model.DebtTypes;
import com.spglobal.ratings.ratingsdata.repository.IssuesAndMaturitiesRepository;
import com.spglobal.ratings.ratingsdata.util.RatingsDataUtil;

import lombok.extern.slf4j.Slf4j;

@Component
@Slf4j
public class IssuesAndMaturitiesDao {
	
	 @Autowired
	 private IssuesAndMaturitiesRepository issuesAndMaturitiesRepo;
	 
	 @Autowired 
	 RatingsDataUtil ratingsUtil;
	
	public List<IssuesAndMaturities> getIssuesAndMaturitiesByEntityId(Long entityId){
		List<IssuesAndMaturities> issuesAndMaturities = null;
		log.info("@IssuesAndMaturitiesDao getIssuesAndMaturitiesByEntityId -> Request EntityId is  ::  " +ratingsUtil.sanitizeString(entityId.toString()));
		 try {
			 issuesAndMaturities = new ArrayList<IssuesAndMaturities>();
			 issuesAndMaturities = issuesAndMaturitiesRepo.findByEntityId(entityId);
		 }catch (IllegalArgumentException iae) {
			 log.error(" IllegalArgumentException @IssuesAndMaturitiesDao getIssuesAndMaturitiesByEntityId -> Failed: {}  ", iae.getMessage());
		} catch (Exception e) {
			log.error(" Exception @IssuesAndMaturitiesDao @getIssuesAndMaturitiesByEntityId --> Failed: {}", e.getMessage());
		} 
		return issuesAndMaturities;
	}
	
	public List<IssuesAndMaturities> getIssuesAndMaturitiesByEntityIdAndDebtTypeCode( Long entityId, String debtTypeCode){
		List<IssuesAndMaturities> issuesAndMaturities = null;
		log.info("@IssuesAndMaturitiesDao getIssuesAndMaturitiesByEntityIdAndDebtTypeCode -> Request EntityId is  ::  " +ratingsUtil.sanitizeString(entityId.toString()));
		log.info("@IssuesAndMaturitiesDao getIssuesAndMaturitiesByEntityIdAndDebtTypeCode -> Request Debt Type Code is  ::  "+ratingsUtil.sanitizeString(debtTypeCode));
		 try {
			 issuesAndMaturities = new ArrayList<IssuesAndMaturities>();
			 issuesAndMaturities = issuesAndMaturitiesRepo.findByEntityIdAndDebtTypeCode(entityId, debtTypeCode);
		 }catch (IllegalArgumentException iae) {
			 log.error(" IllegalArgumentException @IssuesAndMaturitiesDao getIssuesAndMaturitiesByEntityIdAndDebtTypeCode -> Failed: {} ", iae.getMessage());
		} catch (Exception e) {
			log.error(" Exception @IssuesAndMaturitiesDao @getIssuesAndMaturitiesByEntityIdAndDebtTypeCode --> Failed: {}", e.getMessage());
		} 
		return issuesAndMaturities;
	}
	
	public IssuesAndMaturities getIssuesAndMaturitiesDetails(Long entityId, Long ratingDetailId) {
		log.info("@IssuesAndMaturitiesDao getIssuesAndMaturitiesDetails -> getIssuesAndMaturitiesDetails for entityId " + ratingsUtil.sanitizeString(entityId.toString()));
		
		IssuesAndMaturities details = null;
		try {
			details = issuesAndMaturitiesRepo.findByEntityIdAndRatingDetailId(entityId, ratingDetailId);
		} catch(IllegalArgumentException iae) {
			log.error("IllegalArgumentException @IssuesAndMaturitiesDao getIssuesAndMaturitiesDetails -> Failed: {}", iae.getMessage());
		} catch(Exception e) {
			log.error("Exception @IssuesAndMaturitiesDao @getIssuesAndMaturitiesDetails --> Failed: {}", e.getMessage());
		}
		return details;
	}
	
	public List<DebtTypes> getDropdownDebtTypes(Long entityId) {
		log.info("@IssuesAndMaturitiesDao getDropdownDebtTypes -> getDropdownDebtTypes for entityId " + ratingsUtil.sanitizeString(entityId.toString()));
		
		List<DebtTypes> debtTypes = null;
		try {
			debtTypes = issuesAndMaturitiesRepo.findDistinctDebtTypeCodeAndDescriptionByEntityId(entityId);
		} catch(IllegalArgumentException iae) {
			log.error("IllegalArgumentException @IssuesAndMaturitiesDao getDropdownDebtTypes -> Failed: {} ", iae.getMessage());
		} catch(Exception e) {
			log.error("Exception @IssuesAndMaturitiesDao @getDropdownDebtTypes --> Failed: {}", e.getMessage());
		}
		return debtTypes;
	}

}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\dao\IssuesAndMaturitiesHistoryDao.java

package com.spglobal.ratings.ratingsdata.dao;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import com.spglobal.ratings.ratingsdata.entity.IssuesAndMaturitiesHistory;
import com.spglobal.ratings.ratingsdata.repository.IssuesAndMaturitiesHistoryRepository;
import com.spglobal.ratings.ratingsdata.util.RatingsDataUtil;

import lombok.extern.slf4j.Slf4j;

@Component
@Slf4j
public class IssuesAndMaturitiesHistoryDao {
	
	@Autowired
	private RatingsDataUtil ratingsUtil;
	
	@Autowired
	private IssuesAndMaturitiesHistoryRepository issuesAndMaturitiesHistoryRepo;
	
	public List<IssuesAndMaturitiesHistory> getIssuesAndMaturitiesHistory(Long instrumentId, String ratingTypeCode, Long instrumentDetailId) {
		log.info("IssuesAndMaturitiesHistoryDao: getIssuesAndMaturitiesHistory for instrumentId " +ratingsUtil.sanitizeString(instrumentId.toString())
				+ " with ratingTypeCode " +ratingsUtil.sanitizeString(ratingTypeCode) + " and instrumentDetailId " +ratingsUtil.sanitizeString(instrumentDetailId.toString()));
		
		List<IssuesAndMaturitiesHistory> issuesAndMaturitiesHistory = null;
		
		try {
			issuesAndMaturitiesHistory = issuesAndMaturitiesHistoryRepo.findByInstrumentIdAndRatingTypeCodeAndInstrumentDetailId(instrumentId, ratingTypeCode, instrumentDetailId);
		} catch(IllegalArgumentException iae) {
			log.debug("IllegalArgumentException @IssuesAndMaturitiesHistoryDao --> Failed: {}", iae.getMessage());
		} catch(Exception e) {
			log.debug("Exception @IssuesAndMaturitiesHistoryDao @getIssuesAndMaturitiesHistory --> Failed: {}", e.getMessage());
		}
		return issuesAndMaturitiesHistory;
	}

}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\dao\IssuesAndMaturitiesHistoryPublicDao.java

package com.spglobal.ratings.ratingsdata.dao;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import com.spglobal.ratings.ratingsdata.entity.IssuesAndMaturitiesHistoryPublic;
import com.spglobal.ratings.ratingsdata.repository.IssuesAndMaturitiesHistoryPublicRepository;
import com.spglobal.ratings.ratingsdata.util.RatingsDataUtil;

import lombok.extern.slf4j.Slf4j;

@Component
@Slf4j
public class IssuesAndMaturitiesHistoryPublicDao {
	
	@Autowired
	private RatingsDataUtil ratingsUtil;
	
	@Autowired
	private IssuesAndMaturitiesHistoryPublicRepository issuesAndMaturitiesHistoryRepo;
	
	public List<IssuesAndMaturitiesHistoryPublic> getPublicIssuesAndMaturitiesHistory(Long instrumentId, String ratingTypeCode, Long instrumentDetailId) {
		log.info("IssuesAndMaturitiesHistoryPublicDao: getPublicIssuesAndMaturitiesHistory for instrumentId " +ratingsUtil.sanitizeString(instrumentId.toString())
				+ " with ratingTypeCode " +ratingsUtil.sanitizeString(ratingTypeCode) + " and instrumentDetailId " +ratingsUtil.sanitizeString(instrumentDetailId.toString()));
		
		List<IssuesAndMaturitiesHistoryPublic> history = null;
		
		try {
			history = issuesAndMaturitiesHistoryRepo.findByInstrumentIdAndRatingTypeCodeAndInstrumentDetailId(instrumentId, ratingTypeCode, instrumentDetailId);
		} catch(IllegalArgumentException iae) {
			log.debug("IllegalArgumentException @IssuesAndMaturitiesHistoryPublicDao --> Failed: {}", iae.getMessage());
		} catch (Exception e) {
			log.error(" Exception @IssuesAndMaturitiesHistoryPublicDao @getPublicIssuesAndMaturitiesHistory --> Failed : {}", e.getMessage());
		} 
		return history;
	}

}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\dao\IssuesAndMaturitiesPublicDao.java

package com.spglobal.ratings.ratingsdata.dao;

import java.util.ArrayList;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import com.spglobal.ratings.ratingsdata.repository.IssuesAndMaturitiesPublicRepository;
import com.spglobal.ratings.ratingsdata.util.RatingsDataUtil;

import lombok.extern.slf4j.Slf4j;

import com.spglobal.ratings.ratingsdata.entity.IssuesAndMaturitiesPublic;

@Component
@Slf4j
public class IssuesAndMaturitiesPublicDao {
	
	 @Autowired
	 private IssuesAndMaturitiesPublicRepository issuesAndMaturitiesRepo;
	 
	 @Autowired 
	 RatingsDataUtil ratingsUtil;
	
	public List<IssuesAndMaturitiesPublic> getIssuesAndMaturitiesByEntityId(Long entityId){
		List<IssuesAndMaturitiesPublic> issuesAndMaturities = null;
		log.info("@IssuesAndMaturitiesPublicDao getIssuesAndMaturitiesByEntityId -> Request EntityId is  ::  " +ratingsUtil.sanitizeString(entityId.toString()));
		 try {
			 issuesAndMaturities = new ArrayList<IssuesAndMaturitiesPublic>();
			 issuesAndMaturities = issuesAndMaturitiesRepo.findByEntityId(entityId);
		 }catch (IllegalArgumentException iae) {
			 log.error(" IllegalArgumentException @IssuesAndMaturitiesPublicDao getIssuesAndMaturitiesByEntityId -> Failed: {}", iae.getMessage());
		} catch (Exception e) {
			log.error(" Exception @IssuesAndMaturitiesPublicDao @getIssuesAndMaturitiesByEntityId --> Failed: {}", e.getMessage());
		} 
		return issuesAndMaturities;
	}
	
	public List<IssuesAndMaturitiesPublic> getIssuesAndMaturitiesByEntityIdAndDebtTypeCode( Long entityId, String debtTypeCode){
		List<IssuesAndMaturitiesPublic> issuesAndMaturities = null;
		log.info("@IssuesAndMaturitiesPublicDao getIssuesAndMaturitiesByEntityIdAndDebtTypeCode -> Request EntityId is  ::  " +ratingsUtil.sanitizeString(entityId.toString()));
		log.info("@IssuesAndMaturitiesPublicDao getIssuesAndMaturitiesByEntityIdAndDebtTypeCode -> Request Debt Type Code is  ::  "+ratingsUtil.sanitizeString(debtTypeCode));
		 try {
			 issuesAndMaturities = new ArrayList<IssuesAndMaturitiesPublic>();
			 issuesAndMaturities = issuesAndMaturitiesRepo.findByEntityIdAndDebtTypeCode(entityId, debtTypeCode);
		 }catch (IllegalArgumentException iae) {
			 log.error(" IllegalArgumentException @IssuesAndMaturitiesPublicDao getIssuesAndMaturitiesByEntityIdAndDebtTypeCode -> Failed: {}", iae.getMessage());
		} catch (Exception e) {
			log.error(" Exception @IssuesAndMaturitiesPublicDao @getIssuesAndMaturitiesByEntityIdAndDebtTypeCode --> Failed: {}", e.getMessage());
		} 
		return issuesAndMaturities;
	}
	
	public IssuesAndMaturitiesPublic getIssuesAndMaturitiesDetails(Long entityId, Long ratingDetailId) {
		log.info("@IssuesAndMaturitiesPublicDao getIssuesAndMaturitiesDetails -> getIssuesAndMaturitiesDetails for entityId " + ratingsUtil.sanitizeString(entityId.toString()));
		
		IssuesAndMaturitiesPublic details = null;
		try {
			details = issuesAndMaturitiesRepo.findByEntityIdAndRatingDetailId(entityId, ratingDetailId);
		} catch(IllegalArgumentException iae) {
			log.error("IllegalArgumentException @IssuesAndMaturitiesPublicDao getIssuesAndMaturitiesDetails -> Failed: {}", iae.getMessage());
		} catch(Exception e) {
			log.error("Exception @IssuesAndMaturitiesPublicDao @getIssuesAndMaturitiesDetails --> Failed: {}", e.getMessage());
		}
		return details;
	}

}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\dao\IssuesMaturitiesUSPFPubDao.java

package com.spglobal.ratings.ratingsdata.dao;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springframework.util.CollectionUtils;
import org.springframework.util.ObjectUtils;

import com.spglobal.ratings.ratingsdata.entity.IssuesMaturitiesUSPFPub;
import com.spglobal.ratings.ratingsdata.model.InstrumentsData;
import com.spglobal.ratings.ratingsdata.model.USPFMinMaxDates;
import com.spglobal.ratings.ratingsdata.repository.IssuesMaturitiesUSPFPubRepository;
import com.spglobal.ratings.ratingsdata.util.RatingsDataUtil;

import lombok.extern.slf4j.Slf4j;

@Component
@Slf4j
public class IssuesMaturitiesUSPFPubDao {
	
	 @Autowired
	 private IssuesMaturitiesUSPFPubRepository issuesAndMaturitiesRepo;

	  
	 @Autowired 
	 RatingsDataUtil ratingsUtil;
	
		/**
		 * @param entityId
		 * @param securityId
		 * @param instrumentId
		 * @param instrusOnly
		 * @return
		 */
		public List<IssuesMaturitiesUSPFPub> getIssuesAndMaturitiesDetails(Long asId,
				Long ratingDetailId, Long instrumentId, Boolean issueNameOnly) {
			log.info(
					"@IssuesMaturitiesUSPFPubDao getIssuesAndMaturitiesDetails -> getIssuesAndMaturitiesDetails for asId {}");
			List<IssuesMaturitiesUSPFPub> detailsList = null;
			List<InstrumentsData> instrusData = null;
			try {

				if (!ObjectUtils.isEmpty(issueNameOnly) && issueNameOnly) {
					instrusData = issuesAndMaturitiesRepo
							.findDistinctIssueName(asId);
					if (!CollectionUtils.isEmpty(instrusData)) {
						detailsList = convertAsIssuesData(instrusData);
					}

				} else if (!ObjectUtils.isEmpty(instrumentId) && instrumentId > 0) {
					detailsList = issuesAndMaturitiesRepo.findBySecurityIdAndInstrumentId(asId, instrumentId);
				} else {
					if (!ObjectUtils.isEmpty(ratingDetailId) && ratingDetailId > 0) {
						detailsList = issuesAndMaturitiesRepo.findBySecurityIdAndRatingDetailId(asId, ratingDetailId);
					} else {
						detailsList = issuesAndMaturitiesRepo.findBySecurityId(asId);
					}

				}

			} catch (IllegalArgumentException iae) {
				iae.printStackTrace();
				log.error(
						"IllegalArgumentException @IssuesMaturitiesUSPFPubDao getIssuesAndMaturitiesDetails -> Failed: {}",
						iae.getMessage());
			} catch (Exception e) {
				e.printStackTrace();
				log.error("Exception @IssuesMaturitiesUSPFPubDao @getIssuesAndMaturitiesDetails --> Failed: {}",
						e.getMessage());
			}
			return detailsList;
		}

		private List<IssuesMaturitiesUSPFPub> convertAsIssuesData(List<InstrumentsData> instrusData) {

			List<IssuesMaturitiesUSPFPub> targetList = new ArrayList<IssuesMaturitiesUSPFPub>(instrusData.size());
			ArrayList<Long> list = new ArrayList<Long>(instrusData.size());
			for (InstrumentsData insData : instrusData) {
				if (!list.contains(insData.getInstrumentId())) {

					IssuesMaturitiesUSPFPub issusData = new IssuesMaturitiesUSPFPub();
					issusData.setIssueName(insData.getIssueName());
					issusData.setInstrumentId(insData.getInstrumentId());
					issusData.setSeries(insData.getSeries());

					list.add(insData.getInstrumentId());
					targetList.add(issusData);
				}
			}
			return targetList;
		}

		public USPFMinMaxDates getUSPFMinMaxDates(Long asId) throws Exception {
			USPFMinMaxDates uspfObj = new USPFMinMaxDates();

			try {
				List<IssuesMaturitiesUSPFPub> list = issuesAndMaturitiesRepo.findBySecurityId(asId);
				IssuesMaturitiesUSPFPub minObj = list.stream().filter(e -> e.getMaturityDate() != null ).min(Comparator.comparing(IssuesMaturitiesUSPFPub :: getMaturityDate)).get();
				IssuesMaturitiesUSPFPub maxObj = list.stream().filter(e -> e.getMaturityDate() != null ).max(Comparator.comparing(IssuesMaturitiesUSPFPub :: getMaturityDate)).get();				
				Integer minYear = minObj != null ? minObj.getMaturityDate().toLocalDate().getYear() : null;
				Integer maxYear = maxObj != null ? maxObj.getMaturityDate().toLocalDate().getYear() : null;

				uspfObj.setFromYear(minYear);
				uspfObj.setToYear(maxYear);
				uspfObj.setAsId(asId);
				
			} catch (Exception e) {
				log.error("Exception @IssuesMaturitiesUSPFPubDao --> getUSPFMinMaxDates {} ", e.getMessage());
				throw e;
			}
			return uspfObj;
		}
	
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\dao\PeersCurrentRatingsDao.java

package com.spglobal.ratings.ratingsdata.dao;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.apache.commons.lang3.ObjectUtils;

import com.spglobal.ratings.ratingsdata.entity.PeerCurrentRatings;
import com.spglobal.ratings.ratingsdata.entity.PeersCurrentRatings;
import com.spglobal.ratings.ratingsdata.repository.PeerCurrentRatingsRepository;
import com.spglobal.ratings.ratingsdata.repository.PeersCurrentRatingsRepository;
import com.spglobal.ratings.ratingsdata.util.RatingsDataUtil;

import lombok.extern.slf4j.Slf4j;

@Component
@Slf4j
public class PeersCurrentRatingsDao {

	@Autowired
	private RatingsDataUtil ratingsUtil;

	@Autowired
	private PeersCurrentRatingsRepository peersCurrentRatingsRepo;

	@Autowired
	private PeerCurrentRatingsRepository peerCurrentRatingsRepo;

	public List<PeersCurrentRatings> getPeersCurrentRatings(String commaSepOrgIds) {
		log.info("@PeersCurrentRatingsDao getPeersCurrentRatings --> fetching rating history for entity: "
				+ ratingsUtil.sanitizeString(commaSepOrgIds.toString()));

		List<PeersCurrentRatings> peerCurrentRatingsListPublic = null;
		PeerCurrentRatings peerCurrentRatingsListPubOrPriv = null;
		
		try {
		
			String[] orgIdsStrArray = commaSepOrgIds.split(",");
			List<Long> orgIdsLngArrayList = new ArrayList<Long>(orgIdsStrArray.length);   
			for (int i = 1; i < orgIdsStrArray.length; i++) {  
				orgIdsLngArrayList.add(Long.parseLong(orgIdsStrArray[i]));
			}
			
			peerCurrentRatingsListPubOrPriv = peerCurrentRatingsRepo.findByEntityId(Long.parseLong(orgIdsStrArray[0]));
			
			PeersCurrentRatings peersRating = convertAsPeersRating(peerCurrentRatingsListPubOrPriv);
		
			peerCurrentRatingsListPublic = peersCurrentRatingsRepo.findByEntityId(orgIdsLngArrayList);
			
			peerCurrentRatingsListPublic.add(peersRating);
			
			orgIdsLngArrayList.add(0,Long.parseLong(orgIdsStrArray[0]));
			
			if(peerCurrentRatingsListPublic != null && peerCurrentRatingsListPublic.size() > 0) {
				Collections.sort(peerCurrentRatingsListPublic, Comparator.comparing(item -> 
				orgIdsLngArrayList.indexOf(item.getEntityId())));
			}
			
		} catch(IllegalArgumentException iae) {
			log.error("IllegalArgumentException @PeersCurrentRatingsDao getPeersCurrentRatings method --> Failed: {}", iae.getMessage());
		} catch (Exception e) {
			log.error("Exception @PeersCurrentRatingsDao getPeersCurrentRatings method --> Failed: {}", e.getMessage());
		}
		return peerCurrentRatingsListPublic;
	}

	private PeersCurrentRatings convertAsPeersRating(PeerCurrentRatings peerCurrentRatingsListPubOrPriv) {
		PeersCurrentRatings data = new PeersCurrentRatings();

		if (ObjectUtils.isNotEmpty(peerCurrentRatingsListPubOrPriv)) {
			data.setActionFCLong(peerCurrentRatingsListPubOrPriv.getActionFCLong());
			data.setActionSTDLong(peerCurrentRatingsListPubOrPriv.getActionSTDLong());
			data.setConfidentialFCLong(peerCurrentRatingsListPubOrPriv.getConfidentialFCLong());
			data.setConfidentialSTDLong(peerCurrentRatingsListPubOrPriv.getConfidentialSTDLong());
			data.setCwOLDateFCLong(peerCurrentRatingsListPubOrPriv.getCwOLDateFCLong());
			data.setCwOLDdateSTDLong(peerCurrentRatingsListPubOrPriv.getCwOLDdateSTDLong());
			data.setCwOLDfclong(peerCurrentRatingsListPubOrPriv.getCwOLDfclong());
			data.setCwOLSTDLong(peerCurrentRatingsListPubOrPriv.getCwOLSTDLong());
			data.setEntityId(peerCurrentRatingsListPubOrPriv.getEntityId());
			data.setLastReviewDateFCLong(peerCurrentRatingsListPubOrPriv.getLastReviewDateFCLong());
			data.setLastReviewDateSTDLong(peerCurrentRatingsListPubOrPriv.getLastReviewDateSTDLong());
			data.setRatingDateFCLong(peerCurrentRatingsListPubOrPriv.getRatingDateFCLong());
			data.setRatingDateSTDLong(peerCurrentRatingsListPubOrPriv.getRatingDateSTDLong());
			data.setRatingFCLong(peerCurrentRatingsListPubOrPriv.getRatingFCLong());
			data.setRatingSTDLong(peerCurrentRatingsListPubOrPriv.getRatingSTDLong());
			data.setRatingTypeCodeFCLong(peerCurrentRatingsListPubOrPriv.getRatingTypeCodeFCLong());
			data.setRatingTypeCodeSTDLong(peerCurrentRatingsListPubOrPriv.getRatingTypeCodeSTDLong());
			data.setEntityLegalName(peerCurrentRatingsListPubOrPriv.getEntityLegalName());
		}
		return data;
	}

}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\dao\PeersEntityRatingsDao.java

package com.spglobal.ratings.ratingsdata.dao;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import com.spglobal.ratings.ratingsdata.entity.PeersEntityRatings;
import com.spglobal.ratings.ratingsdata.entity.PeersEntityRatingsPublic;
import com.spglobal.ratings.ratingsdata.repository.PeersEntityRatingsPubRepository;
import com.spglobal.ratings.ratingsdata.repository.PeersEntityRatingsRepository;

import lombok.extern.slf4j.Slf4j;

@Component
@Slf4j
public class PeersEntityRatingsDao {

	@Autowired
	private PeersEntityRatingsPubRepository peersEntityRatingsPubRepo;

	@Autowired
	private PeersEntityRatingsRepository peerEntityRatingsRepo;
	
	
	public List<PeersEntityRatings> getPeersEntityRatingsPubOrPriv(Long entityId) {

		List<PeersEntityRatings> peersRatingsList = peerEntityRatingsRepo.findByEntityId(entityId);
		return peersRatingsList;
		
	}
	
	public List<PeersEntityRatingsPublic> getPeersEntityRatingsPublic(List<Long> entityIds) {


		System.out.println("==========entityIds========"+entityIds);
		
		
		List<PeersEntityRatingsPublic> peersRatingsPubList = peersEntityRatingsPubRepo.findByEntityId(entityIds);
		 
		System.out.println("==========peersRatingsPubList========"+peersRatingsPubList);
		
		return peersRatingsPubList;
	}
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\dao\PeersManagementDao.java

package com.spglobal.ratings.ratingsdata.dao;

import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

import org.apache.commons.lang3.ObjectUtils;
import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import com.spglobal.ratings.ratingsdata.entity.AnalystPeerInfo;
import com.spglobal.ratings.ratingsdata.entity.UspfPeerPortfolioData;
import com.spglobal.ratings.ratingsdata.repository.AnalystPeerRepository;
import com.spglobal.ratings.ratingsdata.repository.USPFPortfolioContentDataRepository;
import com.spglobal.ratings.ratingsdata.util.RatingsDataConstant;

import lombok.extern.slf4j.Slf4j;

@Slf4j
@Component
public class PeersManagementDao {

	@Autowired
	private AnalystPeerRepository analystPeersRepository;
	
	@Autowired
	private USPFPortfolioContentDataRepository uspfPortfolioContentDataRepository;

	public List<AnalystPeerInfo> getPeersById(Long coreId, String keyInstnId, String capiqId) {
		log.info("@PeerManagmentDao getPeersById --> fetching analyst peers");

		List<AnalystPeerInfo> analystPeersList = null;
		try {
			if (!ObjectUtils.isEmpty(coreId)) {
				analystPeersList = analystPeersRepository.findByCoreId(coreId);
			}else if (!ObjectUtils.isEmpty(capiqId)) {
				analystPeersList = analystPeersRepository.findByCapiqId(capiqId);
			} else if (!ObjectUtils.isEmpty(keyInstnId)) {
				analystPeersList = analystPeersRepository.findByKeyInstnId(keyInstnId);
			}
		} catch (Exception exception) {
			log.error("Exception: @PeersManagementDao getPeersById  method --> Failed: {}",
					exception.getMessage());
			throw exception;

		}

		return analystPeersList;
	}

	public List<UspfPeerPortfolioData> getUspfPortfolioData(List<Long> asIds) {
		log.info("@PeersManagementDao getUspfPortfolioData --> fetch uspf PortfolioData: ");
		List<UspfPeerPortfolioData> portfolioCollateralDataList = new ArrayList<>();
		try {
			long start = System.currentTimeMillis();
			portfolioCollateralDataList = uspfPortfolioContentDataRepository.findAllByAsId(asIds);
			portfolioCollateralDataList = portfolioCollateralDataList.stream()
				    .map(portfolioData -> {
				    	if (StringUtils.isEmpty(portfolioData.getSubHeading())) {
				    		portfolioData.setSubHeading(portfolioData.getHeading());
				    	}
				    	if (StringUtils.isEmpty(portfolioData.getFinValue())) {
				    		portfolioData.setFinValue(RatingsDataConstant.NA);
				    	}
						if(portfolioData.getDataElement().equals("SP_FIN_PS2NetPensOPEBLiab")){
							portfolioData.setProductCaption(portfolioData.getProductCaption().concat(" "));
						}
						return portfolioData;
				    }).collect(Collectors.toList());
			long time = System.currentTimeMillis() - start;
			log.info("@PeersManagementDao getUspfPortfolioData --> Time of execution of query: " + time);
		} catch (IllegalArgumentException iae) {
			log.error("IllegalArgumentException @PeersManagementDao getUspfPortfolioData method --> Failed: {}",
					iae.getMessage());
		} catch (Exception e) {
			log.error("Exception @PeersManagementDao getUspfPortfolioData method --> Failed: {}", e.getMessage());
		}
		return portfolioCollateralDataList;
	}

}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\dao\RatingArticlesDao.java

package com.spglobal.ratings.ratingsdata.dao;

import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;

import com.spglobal.ratings.ratingsdata.model.RatingArticlesDetailSearch;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.PageRequest;
import org.springframework.stereotype.Component;
import org.springframework.data.domain.Sort;
import org.springframework.util.StringUtils;

import com.spglobal.ratings.ratingsdata.entity.RatingArticleTypes;
import com.spglobal.ratings.ratingsdata.entity.RatingArticles;
import com.spglobal.ratings.ratingsdata.model.RatingArticlesSearch;
import com.spglobal.ratings.ratingsdata.model.RatingArticlesSearchSSP;
import com.spglobal.ratings.ratingsdata.repository.RatingArticleTypesRepository;
import com.spglobal.ratings.ratingsdata.repository.RatingArticlesCNPublicRepository;
import com.spglobal.ratings.ratingsdata.repository.RatingArticlesCNPublicRepositorySSP;
import com.spglobal.ratings.ratingsdata.repository.RatingArticlesPublicRepository;
import com.spglobal.ratings.ratingsdata.repository.RatingArticlesPublicRepositorySSP;
import com.spglobal.ratings.ratingsdata.util.RatingsDataConstant;

import lombok.extern.slf4j.Slf4j;

@Slf4j
@Component
public class RatingArticlesDao {

	@Autowired
	private RatingArticlesPublicRepository ratingArticlesPublicRepository;
	
	@Autowired
	private RatingArticlesCNPublicRepository ratingArticlesCNPublicRepository;

	@Autowired
	private RatingArticleTypesRepository ratingArticleTypesRepository;
	
	@Autowired
	private RatingArticlesPublicRepositorySSP ratingArticlesPublicRepositorySSP;
	
	@Autowired
	private RatingArticlesCNPublicRepositorySSP ratingArticlesCNPublicRepositorySSP;

	public List<RatingArticleTypes> getRatingArticlesTypes(List<Long> articleTypeIds) throws Exception {
		log.info("@RatingArticlesDao getRatingArticlesTypes --> fetching article types for articleTypeIds: " + articleTypeIds);

		List<RatingArticleTypes> ratingArticleTypes = null;
		try {
			ratingArticleTypes = ratingArticleTypesRepository.getRatingArticleTypes(articleTypeIds);
		} catch (Exception exception) {
			log.error("Exception @RatingArticlesDao getRatingArticlesTypes method --> Failed: {}", exception.getMessage());
			throw exception;
		}

		return ratingArticleTypes;
	}

	public List<? extends RatingArticles> getPublicRatingArticles(RatingArticlesDetailSearch ratingArticlesDetailSearch) throws Exception {
		log.info("@RatingArticlesDao getPublicRatingArticles --> fetching public rating articles: " + ratingArticlesDetailSearch);

		List<? extends RatingArticles> ratingArticles = null;
		try {
			if(RatingsDataConstant.COUNTRY_CODE_CN.equalsIgnoreCase(ratingArticlesDetailSearch.getCountryCode())) {
				ratingArticles = ratingArticlesCNPublicRepository.getRatingArticles(ratingArticlesDetailSearch.getEntityId(),
						ratingArticlesDetailSearch.getArticleTypeIds(), PageRequest.of(0, ratingArticlesDetailSearch.getCount()));
			} else {
				ratingArticles = ratingArticlesPublicRepository.getRatingArticles(ratingArticlesDetailSearch.getEntityId(),
						ratingArticlesDetailSearch.getArticleTypeIds(), PageRequest.of(0, ratingArticlesDetailSearch.getCount()));
			}
		} catch (Exception exception) {
			log.error("Exception @RatingArticlesDao getPublicRatingArticles method --> Failed: {}", exception.getMessage());
			throw exception;
		}

		return ratingArticles;
	}

	public List<?> getPublicRatingArticlesSSP(RatingArticlesSearchSSP ratingArticlesSearch) throws Exception {
		log.info("@RatingArticlesDao getPublicRatingArticlesSSP --> fetching public rating articles: " + ratingArticlesSearch);

		List<?> ratingArticlesPeer = null;
		List<Sort.Order> sortOrders = new ArrayList<>();
		
		String sortOrder = ratingArticlesSearch.getSortOrder();
		String[] sortParams = ratingArticlesSearch.getSortBy().split(",");
		Arrays.asList(sortParams).forEach(sort -> {
			Sort.Order order = null;
			if (StringUtils.hasText(sortOrder) && sortOrder.equalsIgnoreCase(RatingsDataConstant.ORDER_DESC))
				order = new Sort.Order(Sort.Direction.DESC, sort);
			else
				order = new Sort.Order(Sort.Direction.ASC, sort);
			sortOrders.add(order);
		});
		
		try {
			if(RatingsDataConstant.COUNTRY_CODE_CN.equalsIgnoreCase(ratingArticlesSearch.getCountryCode())) {
				ratingArticlesPeer = ratingArticlesCNPublicRepositorySSP.getRatingArticlesSSP(ratingArticlesSearch.getEntityIds(),
						ratingArticlesSearch.getArticleTypeIds(), ratingArticlesSearch.getStartArticleDate(),
						ratingArticlesSearch.getEndArticleDate(), PageRequest.of(ratingArticlesSearch.getPageNumber(), ratingArticlesSearch.getCount(), Sort.by(sortOrders)), ratingArticlesSearch.getSearchText());
			} else {
				ratingArticlesPeer = ratingArticlesPublicRepositorySSP.getRatingArticlesSSP(ratingArticlesSearch.getEntityIds(),
						ratingArticlesSearch.getArticleTypeIds(), ratingArticlesSearch.getStartArticleDate(),
						ratingArticlesSearch.getEndArticleDate(), PageRequest.of(ratingArticlesSearch.getPageNumber(), ratingArticlesSearch.getCount(), Sort.by(sortOrders)), ratingArticlesSearch.getSearchText());
			}
		} catch (Exception exception) {
			log.error("Exception @RatingArticlesDao getPublicRatingArticlesSSP method --> Failed: {}", exception.getMessage());
			throw exception;
		}

		return ratingArticlesPeer;
	}
	
	public Long getPublicRatingArticlesSSPTotalCount(RatingArticlesSearchSSP ratingArticlesSearch) throws Exception {
		log.info("@RatingArticlesDao getPublicRatingArticlesSSPTotalCount --> fetching public rating articles count: ");

		Long articlesCount = null;
		
		try {
			if(RatingsDataConstant.COUNTRY_CODE_CN.equalsIgnoreCase(ratingArticlesSearch.getCountryCode())) {
				articlesCount = ratingArticlesCNPublicRepositorySSP.totalCount(ratingArticlesSearch.getEntityIds(),
						ratingArticlesSearch.getArticleTypeIds(), ratingArticlesSearch.getStartArticleDate(),
						ratingArticlesSearch.getEndArticleDate(), ratingArticlesSearch.getSearchText());
			} else {
				articlesCount = ratingArticlesPublicRepositorySSP.totalCount(ratingArticlesSearch.getEntityIds(),
						ratingArticlesSearch.getArticleTypeIds(), ratingArticlesSearch.getStartArticleDate(),
						ratingArticlesSearch.getEndArticleDate(), ratingArticlesSearch.getSearchText());
			}
		} catch (Exception exception) {
			log.error("Exception @RatingArticlesDao getPublicRatingArticlesSSP method --> Failed: {}", exception.getMessage());
			throw exception;
		}

		return articlesCount;
	}
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\dao\RatingArticlesPublicPvtDao.java

package com.spglobal.ratings.ratingsdata.dao;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.stereotype.Component;
import org.springframework.util.StringUtils;

import com.spglobal.ratings.ratingsdata.entity.RatingArticlesPublicPvt;
import com.spglobal.ratings.ratingsdata.entity.RatingArticlesPublicPvtPeers;
import com.spglobal.ratings.ratingsdata.model.RatingArticlesSearch;
import com.spglobal.ratings.ratingsdata.model.RatingArticlesSearchSSP;
import com.spglobal.ratings.ratingsdata.repository.RatingArticlesPublicPvtConfCNPeersRepository;
import com.spglobal.ratings.ratingsdata.repository.RatingArticlesPublicPvtConfCNRepository;
import com.spglobal.ratings.ratingsdata.repository.RatingArticlesPublicPvtConfPeersRepository;
import com.spglobal.ratings.ratingsdata.repository.RatingArticlesPublicPvtConfRepository;
import com.spglobal.ratings.ratingsdata.util.RatingsDataConstant;

import lombok.extern.slf4j.Slf4j;

@Component
@Slf4j
public class RatingArticlesPublicPvtDao {
	
	@Autowired
	private RatingArticlesPublicPvtConfRepository ratingArticlesRepository;
	
	@Autowired
	private RatingArticlesPublicPvtConfCNRepository ratingArticlesCNRepository;
	
	@Autowired
	private RatingArticlesPublicPvtConfPeersRepository ratingArticlesPeersRepository;
	
	@Autowired
	private RatingArticlesPublicPvtConfCNPeersRepository ratingArticlesCNPeersRepository;

	public List<? extends RatingArticlesPublicPvt> getRatingArticles(RatingArticlesSearch ratingArticlesSearch) throws Exception {
		log.info("@RatingArticlesPublicPvtDao getRatingArticles --> fetching rating articles: " + ratingArticlesSearch);

		List<? extends RatingArticlesPublicPvt> ratingArticles = null;
		try {
			if(RatingsDataConstant.COUNTRY_CODE_CN.equalsIgnoreCase(ratingArticlesSearch.getCountryCode())) {
				ratingArticles = ratingArticlesCNRepository.getCNRatingArticles(ratingArticlesSearch.getEntityId().toString(),
						ratingArticlesSearch.getArticleTypeIds(), ratingArticlesSearch.getStartArticleDate(),
						ratingArticlesSearch.getEndArticleDate());
			} else {
				ratingArticles = ratingArticlesRepository.getRatingArticles(ratingArticlesSearch.getEntityId().toString(),
						ratingArticlesSearch.getArticleTypeIds(), ratingArticlesSearch.getStartArticleDate(),
						ratingArticlesSearch.getEndArticleDate());
			}
		} catch(IllegalArgumentException iae) {
			log.error("Exception @RatingArticlesPublicPvtDao getRatingArticles method --> Failed: {}", iae.getMessage());
			throw iae;
		} catch (Exception exception) {
			log.error("Exception @RatingArticlesPublicPvtDao getRatingArticles method --> Failed: {}", exception.getMessage());
			throw exception;
		}

		return ratingArticles;
	}
	
	public List<? extends RatingArticlesPublicPvt> getDashboardRatingArticles(String entityId, String countryCode) throws Exception {
		log.info("@RatingArticlesPublicPvtDao getDashboardRatingArticles --> fetching rating articles: " + entityId);

		List<? extends RatingArticlesPublicPvt> ratingArticles = null;
		try {
			if(RatingsDataConstant.COUNTRY_CODE_CN.equalsIgnoreCase(countryCode)) {
				ratingArticles = ratingArticlesCNRepository.getCNDashboardRatingArticles(entityId);
			} else {
				ratingArticles = ratingArticlesRepository.getDashboardRatingArticles(entityId);
			}
		} catch(IllegalArgumentException iae) {
			log.error("Exception @RatingArticlesPublicPvtDao getDashboardRatingArticles method --> Failed: {}", iae.getMessage());
			throw iae;
		} catch (Exception exception) {
			log.error("Exception @RatingArticlesPublicPvtDao getDashboardRatingArticles method --> Failed: {}", exception.getMessage());
			throw exception;
		}

		return ratingArticles;
	}
	
	public List<? extends RatingArticlesPublicPvtPeers> getPeersRatingArticles(RatingArticlesSearchSSP ratingArticlesSearch) throws Exception {
		log.info("@RatingArticlesPublicPvtDao getPeersRatingArticles --> fetching rating articles: " + ratingArticlesSearch);

		List<? extends RatingArticlesPublicPvtPeers> ratingArticlesPeer = null;
		List<Sort.Order> sortOrders = new ArrayList<>();
		
		String sortOrder = ratingArticlesSearch.getSortOrder();
		String[] sortParams = ratingArticlesSearch.getSortBy().split(",");
		Arrays.asList(sortParams).forEach(sort -> {
			Sort.Order order = null;
			if (StringUtils.hasText(sortOrder) && sortOrder.equalsIgnoreCase(RatingsDataConstant.ORDER_DESC))
				order = new Sort.Order(Sort.Direction.DESC, sort);
			else
				order = new Sort.Order(Sort.Direction.ASC, sort);
			sortOrders.add(order);
		});
		
		try {
			if(RatingsDataConstant.COUNTRY_CODE_CN.equalsIgnoreCase(ratingArticlesSearch.getCountryCode())) {
				ratingArticlesPeer = ratingArticlesCNPeersRepository.getCNPeersRatingArticles(ratingArticlesSearch.getEntityIds(),
						ratingArticlesSearch.getArticleTypeIds(), ratingArticlesSearch.getStartArticleDate(),
						ratingArticlesSearch.getEndArticleDate(), PageRequest.of(ratingArticlesSearch.getPageNumber(), ratingArticlesSearch.getCount(), Sort.by(sortOrders)), ratingArticlesSearch.getSearchText());
			} else {
				ratingArticlesPeer = ratingArticlesPeersRepository.getPeersRatingArticles(ratingArticlesSearch.getEntityIds(),
						ratingArticlesSearch.getArticleTypeIds(), ratingArticlesSearch.getStartArticleDate(),
						ratingArticlesSearch.getEndArticleDate(), PageRequest.of(ratingArticlesSearch.getPageNumber(), ratingArticlesSearch.getCount(), Sort.by(sortOrders)), ratingArticlesSearch.getSearchText());
			}
		} catch (Exception exception) {
			log.error("Exception @RatingArticlesPublicPvtDao getPeersRatingArticles method --> Failed ::", exception.getMessage());
			throw exception;
		}

		return ratingArticlesPeer;
	}
	
	public List<? extends RatingArticlesPublicPvtPeers> getPeersRatingArticlesForCount(RatingArticlesSearchSSP ratingArticlesSearch) throws Exception {
		log.info("@RatingArticlesPublicPvtDao getPeersRatingArticles --> fetching rating articles: " + ratingArticlesSearch);

		List<? extends RatingArticlesPublicPvtPeers> ratingArticlesPeer = null;
		
		try {
			if(RatingsDataConstant.COUNTRY_CODE_CN.equalsIgnoreCase(ratingArticlesSearch.getCountryCode())) {
				ratingArticlesPeer = ratingArticlesCNPeersRepository.getCNPeersRatingArticlesForCount(ratingArticlesSearch.getEntityIds(),
						ratingArticlesSearch.getArticleTypeIds(), ratingArticlesSearch.getStartArticleDate(),
						ratingArticlesSearch.getEndArticleDate(), ratingArticlesSearch.getSearchText());
			} else {
				ratingArticlesPeer = ratingArticlesPeersRepository.getPeersRatingArticlesForCount(ratingArticlesSearch.getEntityIds(),
						ratingArticlesSearch.getArticleTypeIds(), ratingArticlesSearch.getStartArticleDate(),
						ratingArticlesSearch.getEndArticleDate(), ratingArticlesSearch.getSearchText());
			}
		} catch (Exception exception) {
			log.error("Exception @RatingArticlesPublicPvtDao getPeersRatingArticles method --> Failed ::", exception.getMessage());
			throw exception;
		}

		return ratingArticlesPeer;
	}
	
	public Long getPeersRatingArticlesTotalCount(RatingArticlesSearchSSP ratingArticlesSearch) throws Exception {
		log.info("@RatingArticlesPublicPvtDao getPeersRatingArticlesTotalCount --> fetching rating articles count: ");

		Long articlesCount = null;
		
		try {
			if(RatingsDataConstant.COUNTRY_CODE_CN.equalsIgnoreCase(ratingArticlesSearch.getCountryCode())) {
				articlesCount = ratingArticlesCNPeersRepository.peersCNtotalCount(ratingArticlesSearch.getEntityIds(),
						ratingArticlesSearch.getArticleTypeIds(), ratingArticlesSearch.getStartArticleDate(),
						ratingArticlesSearch.getEndArticleDate(), ratingArticlesSearch.getSearchText());
			} else {
				articlesCount = ratingArticlesPeersRepository.peersTotalCount(ratingArticlesSearch.getEntityIds(),
						ratingArticlesSearch.getArticleTypeIds(), ratingArticlesSearch.getStartArticleDate(),
						ratingArticlesSearch.getEndArticleDate(), ratingArticlesSearch.getSearchText());
			}
		} catch (Exception exception) {
			log.error("Exception @RatingArticlesPublicPvtDao getPeersRatingArticlesTotalCount method --> Failed ::", exception.getMessage());
			throw exception;
		}

		return articlesCount;
	}

}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\dao\RatingCriteriaArticlesDao.java

package com.spglobal.ratings.ratingsdata.dao;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import com.spglobal.ratings.ratingsdata.entity.RatingCriteriaArticlesPrivate;
import com.spglobal.ratings.ratingsdata.entity.RatingCriteriaArticlesPublic;
import com.spglobal.ratings.ratingsdata.repository.RatingCriteriaArticlesPrivateRepository;
import com.spglobal.ratings.ratingsdata.repository.RatingCriteriaArticlesPublicRepository;

import lombok.extern.slf4j.Slf4j;

@Slf4j
@Component
public class RatingCriteriaArticlesDao {
	
	@Autowired
	private RatingCriteriaArticlesPublicRepository rcaPublicRepository;
	
	@Autowired
	private RatingCriteriaArticlesPrivateRepository rcaPrivateRepository;
	
	public List<RatingCriteriaArticlesPublic> getArticlesByRatingDetailId(Long ratingDetailId) throws Exception {
		log.info("@RatingCriteriaArticlesDao getArticlesByRatingDetailId --> fetching rating criteria articles for ratingDetailId: " + ratingDetailId);
		if(ratingDetailId == null) {
			log.error("IllegalArgumentException @RatingCriteriaArticlesDao getArticlesByRatingDetailId method --> Failed");
			throw new IllegalArgumentException("ratingDetailId parameter should not be null");
		}
		
		List<RatingCriteriaArticlesPublic> ratingCriteriaArticles = null;
		try {
			ratingCriteriaArticles = rcaPublicRepository.findRatingCriteriaArticlesByRatingDetailId(ratingDetailId);
		} catch(Exception exception) {
			log.error("Exception @RatingCriteriaArticlesDao getArticlesByRatingDetailId method --> Failed: {}", exception.getMessage());
			throw exception;
		}
		return ratingCriteriaArticles;
	}
	
	public List<RatingCriteriaArticlesPrivate> getArticlesBySourceObjectIds(List<Long> sourceObjectIds) throws Exception {
		log.info("@RatingCriteriaArticlesDao getArticlesBySourceObjectIds --> sourceObjectIds: " + sourceObjectIds);
		if(sourceObjectIds == null) {
			log.error("IllegalArgumentException @RatingCriteriaArticlesDao getArticlesBySourceObjectIds method --> Failed");
			throw new IllegalArgumentException("sourceObjectIds parameter should not be null");
		}
		
		List<RatingCriteriaArticlesPrivate> ratingCriteriaArticles = null;
		try {
			ratingCriteriaArticles = rcaPrivateRepository.findRatingCriteriaArticlesBySourceObjectIds(sourceObjectIds);
		} catch(Exception exception) {
			log.error("Exception @RatingCriteriaArticlesDao getArticlesBySourceObjectIds method --> Failed: {}", exception.getMessage());
			throw exception;
		}
		return ratingCriteriaArticles;
	}

}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\dao\RatingHistoryLastTenYrsDao.java

package com.spglobal.ratings.ratingsdata.dao;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springframework.util.CollectionUtils;

import com.spglobal.ratings.ratingsdata.entity.RatingHistoryLastTenYrs;
import com.spglobal.ratings.ratingsdata.entity.RatingHistoryLastTenYrsPublic;
import com.spglobal.ratings.ratingsdata.repository.RatingHistoryLastTenYrsPubRepository;
import com.spglobal.ratings.ratingsdata.repository.RatingHistoryLastTenYrsRepository;

@Component
//@Slf4j
public class RatingHistoryLastTenYrsDao {

	@Autowired
	private RatingHistoryLastTenYrsRepository entityRatingHistoryRDRepo;

	@Autowired
	private RatingHistoryLastTenYrsPubRepository entityRatingHistoryPubRepo;

	public List<RatingHistoryLastTenYrs> getRatingHistLastTenYrsPubOrPriv(Long entityId) {

		List<RatingHistoryLastTenYrs> ratingHistoryList = entityRatingHistoryRDRepo.findByEntityId(entityId);
		return ratingHistoryList;
		
	}
	
	public List<RatingHistoryLastTenYrsPublic> getRatingHistLastTenYrsPublic(List<Long> entityIds) {

		List<RatingHistoryLastTenYrsPublic> ratingHistoryList = CollectionUtils.isEmpty(entityIds) ? null
				: entityRatingHistoryPubRepo.findByEntityId(entityIds);
		return ratingHistoryList;
	}

}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\dao\ReconciliationRatingDao.java

package com.spglobal.ratings.ratingsdata.dao;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import com.spglobal.ratings.ratingsdata.model.ReconciliationData;
import com.spglobal.ratings.ratingsdata.repository.ReconciliationCustomRatingRepository;
import com.spglobal.ratings.ratingsdata.repository.ReconciliationQuarterlyRatingRepository;
import com.spglobal.ratings.ratingsdata.repository.ReconciliationYearlyRatingRepository;

import lombok.extern.slf4j.Slf4j;

@Component
@Slf4j
public class ReconciliationRatingDao {

	@Autowired
	private ReconciliationQuarterlyRatingRepository reconciliationQuarterlyRatingRepo;

	@Autowired
	private ReconciliationYearlyRatingRepository reconciliationYearlyRatingRepo;

	@Autowired
	private ReconciliationCustomRatingRepository reconciliationCustomRatingRepository;

	public List<ReconciliationData> getReconciliationQuartelyRatingDetails(Long coreId) {

		List<ReconciliationData> reconcilQuarterlyData = null;
		try {
			reconcilQuarterlyData = reconciliationQuarterlyRatingRepo.findByCoreId(coreId);
		} catch (IllegalArgumentException iae) {
			log.error(
					"IllegalArgumentException @ReconciliationRatingDao getReconciliationQuartelyRatingDetail Failed: {}",
					iae.getMessage());
		} catch (Exception e) {
			log.error("Exception @ReconciliationRatingDao getReconciliationQuartelyRatingDetail method --> Failed: {}",
					e.getMessage());
		}
		return reconcilQuarterlyData;
	}

	public List<ReconciliationData> getReconciliationYearlyRatingDetails(Long coreId) {
		List<ReconciliationData> reconcilYearlyData = null;
		try {
			reconcilYearlyData = reconciliationYearlyRatingRepo.findByCoreId(coreId);
		} catch (IllegalArgumentException iae) {
			log.error(
					"IllegalArgumentException @ReconciliationRatingDao getReconciliationYearlyRatingDetails method --> Failed: {}",
					iae.getMessage());
		} catch (Exception e) {
			log.error("Exception @ReconciliationRatingDao getReconciliationYearlyRatingDetails method --> Failed: {}",
					e.getMessage());
		}
		return reconcilYearlyData;
	}

	public List<ReconciliationData> getCustomReconciliationRatingDetails(Long coreId, List<String> periodIds) {
		List<ReconciliationData> entityRatings = null;
		try {

			entityRatings = reconciliationCustomRatingRepository.findByCoreIdAndFinPeriodId(coreId, periodIds);
		} catch (IllegalArgumentException iae) {
			log.error(
					"IllegalArgumentException @FinancialRatingDao getCustomFinancialRatingDetails method --> Failed: {}",
					iae.getMessage());
		} catch (Exception e) {
			log.error("Exception @FinancialRatingDao getCustomFinancialRatingDetails method --> Failed: {}",
					e.getMessage());
		}
		return entityRatings;
	}

}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\dao\ScoresAndModifiersDao.java

package com.spglobal.ratings.ratingsdata.dao;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import com.spglobal.ratings.ratingsdata.entity.ScoresAndModifiers;
import com.spglobal.ratings.ratingsdata.repository.ScoresAndModifiersRepository;
import com.spglobal.ratings.ratingsdata.util.RatingsDataUtil;

import lombok.extern.slf4j.Slf4j;

@Component
@Slf4j
public class ScoresAndModifiersDao {
	
	@Autowired
	private RatingsDataUtil ratingsUtil;
	
	@Autowired
	private ScoresAndModifiersRepository scoresAndModifiersRepo;
	
	public List<ScoresAndModifiers> getScoresAndModifiers(String entityId, String subSector) {
		log.info("@ScoresAndModifiersDao getScoresAndModifiers --> fetch scores and modifiers for entity: " +ratingsUtil.sanitizeString(entityId.toString()) +
				"with subsector: " +ratingsUtil.sanitizeString(subSector));
		
		List<ScoresAndModifiers> scores = null;
		try {
			scores = scoresAndModifiersRepo.findByEntityIdAndAnalyticCaseType(entityId, subSector);
		} catch(IllegalArgumentException iae) {
			log.error("IllegalArgumentException @ScoresAndModifiersDao getScoresAndModifiers method --> Failed: {}", iae.getMessage());
		} catch(Exception e) {
			log.error("Exception @ScoresAndModifiersDao getScoresAndModifiers method --> Failed: {}", e.getMessage());
		}
		return scores;
	}

}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\dao\ScoresAndModifiersPublicDao.java

package com.spglobal.ratings.ratingsdata.dao;

import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;
import java.util.stream.Collectors;

import com.spglobal.ratings.ratingsdata.util.RatingsDataConstant;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import com.spglobal.ratings.ratingsdata.entity.GeographicUnit;
import com.spglobal.ratings.ratingsdata.entity.PeerSuppliersPortfolioContents;
import com.spglobal.ratings.ratingsdata.entity.ScoresAndModifiersPublic;
import com.spglobal.ratings.ratingsdata.entity.UspfPeerSuppliersPortfolioContents;
import com.spglobal.ratings.ratingsdata.entity.UspfRatingCodes;
import com.spglobal.ratings.ratingsdata.entity.UspfStateLookup;
import com.spglobal.ratings.ratingsdata.model.ProvinceData;
import com.spglobal.ratings.ratingsdata.model.SectorSubSectorData;
import com.spglobal.ratings.ratingsdata.model.StateAndProvince;
import com.spglobal.ratings.ratingsdata.model.UspfFilterData;
import com.spglobal.ratings.ratingsdata.model.UspfFilterDropdownData;
import com.spglobal.ratings.ratingsdata.model.UspfStateData;
import com.spglobal.ratings.ratingsdata.repository.GeographicUnitRepository;
import com.spglobal.ratings.ratingsdata.repository.PortfolioContentsRepository;
import com.spglobal.ratings.ratingsdata.repository.ScoresAndModifiersPublicRepository;
import com.spglobal.ratings.ratingsdata.repository.SectorSubsectorEntityRepository;
import com.spglobal.ratings.ratingsdata.repository.UspfPortfolioContentsRepository;
import com.spglobal.ratings.ratingsdata.repository.UspfRatingCodesRepository;
import com.spglobal.ratings.ratingsdata.repository.UspfStateLookupRepository;
import com.spglobal.ratings.ratingsdata.util.RatingsDataUtil;

import lombok.extern.slf4j.Slf4j;

@Component
@Slf4j
public class ScoresAndModifiersPublicDao {

	@Autowired
	private RatingsDataUtil ratingsUtil;

	@Autowired
	private ScoresAndModifiersPublicRepository scoresAndModifiersRepository;

	@Autowired
	private PortfolioContentsRepository portfolioContentsRepository;

	@Autowired
	private UspfPortfolioContentsRepository uspfPortfolioContentsRepository;

	@Autowired
	private UspfStateLookupRepository uspfStateLookupRepository;

	@Autowired
	private SectorSubsectorEntityRepository sectorSubsectorEntityRepository;

	@Autowired
	private UspfRatingCodesRepository uspfRatingCodesRepository;

	@Autowired
	private GeographicUnitRepository geographicUnitRepository;

	public List<ScoresAndModifiersPublic> getScoresAndModifiers(String entityId, String subsector) {
		log.info("@ScoresAndModifiersPublicDao getScoresAndModifiers --> fetch ratings for scores and modifiers: "
				+ ratingsUtil.sanitizeString(entityId.toString()));

		List<ScoresAndModifiersPublic> scoresAndModifiers = null;
		try {
			scoresAndModifiers = scoresAndModifiersRepository.findByEntityId(entityId, subsector);
		} catch (IllegalArgumentException iae) {
			log.error(
					"IllegalArgumentException @ScoresAndModifiersPublicDao getScoresAndModifiers method --> Failed: {}",
					iae.getMessage());
		} catch (Exception e) {
			log.error("Exception @ScoresAndModifiersPublicDao getScoresAndModifiers method --> Failed: {}",
					e.getMessage());
		}
		return scoresAndModifiers;
	}

	public List<ScoresAndModifiersPublic> getPeerScoresAndModifiers(List<String> entities, String subSector) {
		log.info("@ScoresAndModifiersPublicDao getPeerScoresAndModifiers --> fetch ratings for scores and modifiers: "
				+ ratingsUtil.sanitizeString(entities.toString()));

		List<ScoresAndModifiersPublic> scoresAndModifiers = null;
		try {
			scoresAndModifiers = scoresAndModifiersRepository.findByEntityIds(entities, subSector);
		} catch (IllegalArgumentException iae) {
			log.error(
					"IllegalArgumentException @ScoresAndModifiersPublicDao getPeerScoresAndModifiers method --> Failed: {}",
					iae.getMessage());
		} catch (Exception e) {
			log.error("Exception @ScoresAndModifiersPublicDao getScoresAndModifiers method --> Failed: {}",
					e.getMessage());
		}
		return scoresAndModifiers;
	}

	public List<PeerSuppliersPortfolioContents> getPeerSuppliersPortfolioContents(String type, List<String> ids) {
		log.info(
				"@ScoresAndModifiersPublicDao getPeerSuppliersPortfolioContents --> fetch Peer Suppliers PortfolioContents: "
						+ ratingsUtil.sanitizeString(ids.toString()));

		List<PeerSuppliersPortfolioContents> portfolioContents = null;
		try {
			long start = System.currentTimeMillis();
			if(type.equalsIgnoreCase(RatingsDataConstant.COREID_STR)){
				portfolioContents = portfolioContentsRepository.findByEntityIds(ids);
			}else if(type.equalsIgnoreCase(RatingsDataConstant.CAPIQ_STR)){
				portfolioContents = portfolioContentsRepository.findByCapiqIds(ids);
			}else if(type.equalsIgnoreCase(RatingsDataConstant.SNL_STR)){
				portfolioContents = portfolioContentsRepository.findByKeyInstnIds(ids);
			}
			long time = System.currentTimeMillis() - start;
			log.info("@ScoresAndModifiersPublicDao getPeerSuppliersPortfolioContents --> Time of execution of query: "
					+ time);
		} catch (IllegalArgumentException iae) {
			log.error(
					"IllegalArgumentException @ScoresAndModifiersPublicDao getPeerSuppliersPortfolioContents method --> Failed: {}",
					iae.getMessage());
		} catch (Exception e) {
			log.error("Exception @ScoresAndModifiersPublicDao getPeerSuppliersPortfolioContents method --> Failed: {}",
					e.getMessage());
		}
		return portfolioContents;
	}

	public List<UspfPeerSuppliersPortfolioContents> getUspfPeerSuppliersPortfolioContents(
			UspfFilterData uspfFilterData) {
		log.info(
				"@ScoresAndModifiersPublicDao getUspfPeerSuppliersPortfolioContents --> fetch USPF Peer Suppliers PortfolioContents: ");

		List<UspfPeerSuppliersPortfolioContents> uspfPortfolioContents = null;
		if (uspfFilterData.getSector() != null && uspfFilterData.getSubSector() != null
				&& uspfFilterData.getGeography() != null && uspfFilterData.getGeography().size() >= 1
				&& uspfFilterData.getRatingType() != null && uspfFilterData.getRatingScale() != null
				&& uspfFilterData.getRatingScale().size() >= 1) {
			try {
				long start = System.currentTimeMillis();
				uspfPortfolioContents = uspfPortfolioContentsRepository.findByFilteredData(uspfFilterData.getSector(),
						uspfFilterData.getSubSector(), uspfFilterData.getGeography(), uspfFilterData.getRatingType(),
						uspfFilterData.getRatingScale());
				long time = System.currentTimeMillis() - start;
				log.info(
						"@ScoresAndModifiersPublicDao getUspfPeerSuppliersPortfolioContents --> Time of execution of query: "
								+ time);
			} catch (IllegalArgumentException iae) {
				log.error(
						"IllegalArgumentException @ScoresAndModifiersPublicDao getUspfPeerSuppliersPortfolioContents method --> Failed: {}",
						iae.getMessage());
			} catch (Exception e) {
				log.error(
						"Exception @ScoresAndModifiersPublicDao getUspfPeerSuppliersPortfolioContents method --> Failed: {}",
						e.getMessage());
			}
		}
		return uspfPortfolioContents;
	}

	public List<UspfPeerSuppliersPortfolioContents> getUspfPeersPortfolioData(List<Long> asIdList) {
		log.info("@ScoresAndModifiersPublicDao getUspfPeersPortfolioData --> fetch USPF Peers Portfolio Data: ");

		List<UspfPeerSuppliersPortfolioContents> uspfPortfolioContents = null;
		try {
			long start = System.currentTimeMillis();
			uspfPortfolioContents = uspfPortfolioContentsRepository.findByAsIds(asIdList);
			long time = System.currentTimeMillis() - start;
			log.info("@ScoresAndModifiersPublicDao getUspfPeersPortfolioData --> Time of execution of query: " + time);
		} catch (IllegalArgumentException iae) {
			log.error(
					"IllegalArgumentException @ScoresAndModifiersPublicDao getUspfPeersPortfolioData method --> Failed: {}",
					iae.getMessage());
		} catch (Exception e) {
			log.error("Exception @ScoresAndModifiersPublicDao getUspfPeersPortfolioData method --> Failed: {}",
					e.getMessage());
		}
		return uspfPortfolioContents;
	}

	public UspfFilterDropdownData getuspfPeersFiltersData() {
		log.info("@ScoresAndModifiersPublicDao getuspfPeersFiltersData --> fetch USPF Peer FiltersData: ");

		UspfFilterDropdownData uspfFilterDropdownData = new UspfFilterDropdownData();

		try {
			long stateStart = System.currentTimeMillis();
			List<UspfStateLookup> uspfStateLookupData = uspfStateLookupRepository.findAllStates();
			long stateTime = System.currentTimeMillis() - stateStart;
			List<UspfStateData> uspfStatesDataList = uspfStateLookupData.stream()
					.map(p -> new UspfStateData(p.getStateCd(), p.getStateName()))
					.sorted(Comparator.comparing(UspfStateData::getStateName)).collect(Collectors.toList());
			uspfFilterDropdownData.setUspfStatesData(uspfStatesDataList);
			long sectorStart = System.currentTimeMillis();
			List<Object> objectdataList = sectorSubsectorEntityRepository.findSectorSubSectorDetails();
			long sectorTime = System.currentTimeMillis() - sectorStart;
			List<SectorSubSectorData> sectorSubsectorList = new ArrayList<>();
			for (Object objectdata : objectdataList) {
				SectorSubSectorData sectorSubSectorData = new SectorSubSectorData();
				Object[] obj = (Object[]) objectdata;
				sectorSubSectorData.setSectorName((String) obj[0]);
				sectorSubSectorData.setSubSectorName((String) obj[1]);
				sectorSubSectorData.setSectorCode((String) obj[2]);
				sectorSubSectorData.setSubSectorCode((String) obj[3]);
				sectorSubsectorList.add(sectorSubSectorData);
			}
			uspfFilterDropdownData.setSectorSubSector(sectorSubsectorList);
			long longStart = System.currentTimeMillis();
			List<UspfRatingCodes> uspfRatingCodesList = uspfRatingCodesRepository.findLongRatingData();
			long longTime = System.currentTimeMillis() - longStart;
			List<String> longRatingList = uspfRatingCodesList.stream().map(p -> p.getRatingSymbol()).distinct()
					.collect(Collectors.toList());
			uspfFilterDropdownData.setLongRatingData(longRatingList);
			long shortStart = System.currentTimeMillis();
			List<UspfRatingCodes> uspfShortRatingCodesList = uspfRatingCodesRepository.findShortRatingData();
			long shortTime = System.currentTimeMillis() - shortStart;
			List<String> shortRatingList = uspfShortRatingCodesList.stream().map(p -> p.getRatingSymbol()).distinct()
					.collect(Collectors.toList());
			uspfFilterDropdownData.setShortRatingData(shortRatingList);
			log.info("stateTime " + stateTime);
			log.info("sectorTime " + sectorTime);
			log.info("longTime " + longTime);
			log.info("shortTime " + shortTime);

		} catch (IllegalArgumentException iae) {
			log.error(
					"IllegalArgumentException @ScoresAndModifiersPublicDao getUspfPeerSuppliersPortfolioContents method --> Failed: {}",
					iae.getMessage());
		} catch (Exception e) {
			log.error(
					"Exception @ScoresAndModifiersPublicDao getUspfPeerSuppliersPortfolioContents method --> Failed: {}",
					e.getMessage());
		}

		return uspfFilterDropdownData;
	}

	public StateAndProvince getStateAndProvinceData() {
		log.info("@ScoresAndModifiersPublicDao getStateAndProvinceData --> fetch state and provice data bases on the coutry: ");
		StateAndProvince stateAndProvince = new StateAndProvince();
		try {
		
			List<UspfStateLookup> uspfStateLookupData = uspfStateLookupRepository.findAllStates();
			List<UspfStateData> uspfStatesDataList = uspfStateLookupData.stream()
					.map(p -> new UspfStateData(p.getStateCd(), p.getStateName()))
					.sorted(Comparator.comparing(UspfStateData::getStateName)).collect(Collectors.toList());
			stateAndProvince.setUspfStatesData(uspfStatesDataList);
			
			List<GeographicUnit> geoGraphicUnit = geographicUnitRepository.findAllgeographicUnitNamesByCountryCode();
			List<ProvinceData> provinceData = geoGraphicUnit.stream().map(p -> new ProvinceData(p.getGeograpchicUnitName(), p.getCountryCode()))
					.sorted(Comparator.comparing(ProvinceData::getProvinceName)).collect(Collectors.toList());
			stateAndProvince.setProvinceData(provinceData);
		} catch (IllegalArgumentException iae) {
			log.error(
					"IllegalArgumentException @ScoresAndModifiersPublicDao getStateAndProvinceData method --> Failed: {}",
					iae.getMessage());
		} catch (Exception e) {
			log.error(
					"Exception @ScoresAndModifiersPublicDao getStateAndProvinceData method --> Failed: {}",
					e.getMessage());
		}
			return stateAndProvince;
	}
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\entity\AnalystPeerInfo.java

package com.spglobal.ratings.ratingsdata.entity;

import jakarta.persistence.*;
import lombok.*;

import java.io.Serializable;

@Getter
@Setter
@Entity
@NoArgsConstructor
@AllArgsConstructor
@IdClass(value = RatingAnalystPeerInfoId.class)
@Table(name = "VW_RATING_ANALYST_PEERS", schema = "R360_APPDATA")
public class AnalystPeerInfo {

	@Column(name = "CORE_ID")
	private Long coreId;

	@Column(name = "KEY_INSTN_ID")
	private String keyInstnId;

	@Column(name = "CAPIQ_ID")
	private String capiqId;

	@Id
	@Column(name = "AP_OID_VENDOR")
	private Long apOidVendor;

	@Id
	@Column(name ="AP_KEY_INSTN_ID")
	private String apKeyInstnId;

	@Id
	@Column(name = "AP_CAPIQ_ID")
	private String apCapiqId;

	@Id
	@Column(name ="AP_FORM_ORDER")
	private Long apFormOrder;

}

@Data
class RatingAnalystPeerInfoId implements Serializable {

	private static final long serialVersionUID = 4265463698009448688L;
	private String apKeyInstnId;
	private String apCapiqId;
	private Long apFormOrder;
	private Long apOidVendor;

}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\entity\ArticlePDFDetails.java

package com.spglobal.ratings.ratingsdata.entity;

import jakarta.persistence.Column;
import jakarta.persistence.Table;
import lombok.*;
import jakarta.persistence.Entity;

import java.sql.Date;
import java.sql.Timestamp;

import jakarta.persistence.*;

@Getter
@Setter
@Entity
@Table(name = "ARTICLE_PDFS", schema="FGR")
public class ArticlePDFDetails {
	
	@Id
	@Column(name="ARTICLE_PDF_ID")
	private Long articlePDFId;
	
	@Column(name="ARTICLE_ID")
	private Long articleId;
	
	@Column(name="SOURCE_OBJECT_ID")
	private Long sourceObjectId;
	
	@Column(name="SOURCE_REV_ID")
	private Long sourceRevId;
	
	@Column(name="ARTICLE_COMPONENT_ID")
	private Long articleComponentId;
	
	@Column(name="MIME_TYPE")
	private String mimeType;
	
	@Lob
	@Column(name="BLOB_DATA")
	private byte[] pdf;
	
	@Column(name="STATUS_IND")
	private char statusInd;
	
	@Column(name="UPD_DATE")
	private Date updateDate;
	
	@Column(name="ACK_STATUS")
	private String ackStatus;
	
	@Column(name="ACK_DT")
	private Timestamp ackDate;
	
	@Column(name="CIQ_REP_IND")
	private Long ciqRepInd;
	
	
	
	
	

}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\entity\CLOABSContacts.java

package com.spglobal.ratings.ratingsdata.entity;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.Id;
import jakarta.persistence.NamedQuery;
import jakarta.persistence.Table;

import org.springframework.data.annotation.Immutable;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonProperty;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Entity
@Table(name = "vw_clo_abs_contacts", schema = "R360_APPDATA")
@Immutable
@Data
@NoArgsConstructor
@AllArgsConstructor
@NamedQuery(name = "CLOABSContacts.findByEntityIdAndSubSectorCode", query = "select e from CLOABSContacts e where e.entityId = :entityId and e.subSectorCode= :subSectorCode")
@NamedQuery(name = "CLOABSContacts.findByEntityIdAndSubSectorCodeAndContactType", query = "select e from CLOABSContacts e where e.entityId = :entityId and e.subSectorCode=:subSectorCode and e.contactType = :contactType")
public class CLOABSContacts {
	
	@JsonProperty("ENTITY_ID")
	@Column(name = "ENTITY_ID")
	private Long entityId;

	@Id
	@JsonProperty("FULL_NAME")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "FULL_NAME")
	private String fullName;
	
	
	@JsonProperty("EMPLOYEE_SPID")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "EMPLOYEE_SPID")
	private String employeeSPId;
	
	@JsonProperty("SUB_SECTOR_CODE")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "SUB_SECTOR_CODE")
	private String subSectorCode;
	
	@JsonProperty("ROLE")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "ROLE")
	private String role;
	
	@JsonProperty("PHONE")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "PHONE")
	private String phone;
	
	@JsonProperty("EMAIL")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "EMAIL")
	private String email;
	
	@JsonProperty("CONTACT_TYPE")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "CONTACT_TYPE")
	private String contactType;
	
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\entity\ConfigDetails.java

package com.spglobal.ratings.ratingsdata.entity;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.Id;
import jakarta.persistence.NamedQuery;
import jakarta.persistence.Table;
import lombok.Data;

@Entity
@Table(name = "CONFIGURATION_DETAILS", schema="R360_APPDATA")
@NamedQuery(name = "ConfigDetails.findByConfigKeys",
query = "select distinct e from ConfigDetails e where e.configKey in (:configKeys) ")
@Data
public class ConfigDetails {

	@Id
	@Column(name="CONFIG_KEY")
	private String configKey;
	
	@Column(name="CONFIG_VALUE")
	private Integer configValue;

	@Column(name="CONFIG_VALUES")
	private String configValues;

}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\entity\Contacts.java

package com.spglobal.ratings.ratingsdata.entity;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.Id;
import jakarta.persistence.NamedQuery;
import jakarta.persistence.Table;

import org.springframework.data.annotation.Immutable;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonProperty;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Entity
@Table(name = "vw_dashboard_contacts_non_uspf", schema = "R360_APPDATA")
@Immutable
@Data
@NoArgsConstructor
@AllArgsConstructor
@NamedQuery(name = "Contacts.findByEntityIdAndContactType", query = "select e from Contacts e where e.entityId = :entityId and LOWER(e.contactType)=:contactType")
public class Contacts {
	
	@JsonProperty("ENTITY_ID")
	@Column(name = "ENTITY_ID")
	private Long entityId;

	@Id
	@JsonProperty("FULL_NAME")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "FULL_NAME")
	private String fullName;
	
	@JsonProperty("ROLE")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "ROLE")
	private String role;
	
	@JsonProperty("PHONE")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "PHONE")
	private String phone;
	
	@JsonProperty("EMAIL")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "EMAIL")
	private String email;
	
	@JsonProperty("CONTACT_TYPE")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "CONTACT_TYPE")
	private String contactType;
	
	@JsonProperty("SPID")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "SPID")
	private String spid;
	
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\entity\CoreOrgIdKeyInstnMap.java

package com.spglobal.ratings.ratingsdata.entity;

import org.springframework.data.annotation.Immutable;

import jakarta.persistence.Entity;
import jakarta.persistence.NamedQuery;
import jakarta.persistence.Table;
import lombok.EqualsAndHashCode;

@Entity
@Table(name = "VW_ORG_KEY_INST_ID_MAPPING", schema = "R360_APPDATA")
@Immutable
@NamedQuery(name = "CoreOrgIdKeyInstnMap.findByFinsIdentifier", query = "select e from CoreOrgIdKeyInstnMap e where e.finsIdentifier in (:keyInstnIds)")
@NamedQuery(name = "CoreOrgIdKeyInstnMap.findByCapIQId", query = "select e from CoreOrgIdKeyInstnMap e where e.capIQFinsIdentifier in (:capiqId)")
@EqualsAndHashCode(callSuper=false)
public class CoreOrgIdKeyInstnMap extends CoreOrgIdKeyInstnMapBase {
	

}



C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\entity\CoreOrgIdKeyInstnMapBase.java

package com.spglobal.ratings.ratingsdata.entity;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

import jakarta.persistence.Column;
import jakarta.persistence.Id;
import jakarta.persistence.MappedSuperclass;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@MappedSuperclass
@Data
@NoArgsConstructor
@AllArgsConstructor
@JsonInclude(JsonInclude.Include.ALWAYS)
public class CoreOrgIdKeyInstnMapBase {
	
	@JsonProperty("CoreFinsIdentifier")
	@Column(name = "CORE_FINS_IDENTIFIER")
	private String coreFinsIdentifier;
	
	@JsonProperty("FinsIdentifier")
	@Column(name = "FINS_IDENTIFIER")
	private String finsIdentifier;
	
	@JsonProperty("CoreFinsIdContext")
	@Column(name = "CORE_FINS_ID_CONTEXT")
	private String coreFinsIdContext;
	
	@JsonProperty("FinsIdContext")
	@Column(name = "FINS_ID_CONTEXT")
	private String finsIdContext;
	
	@JsonProperty("FinsInstnOID")
	@Column(name = "LNK_FINANCIAL_INSTITUTION_OID")
	private String finsInstnOID;
	
	@JsonProperty("CapIQFinsIdContext")
	@Column(name = "CAPIQ_FINS_ID_CONTEXT")
	private String capIQFinsIdContext;
	
	@Id
	@JsonProperty("CapIQFinsIdentifier")
	@Column(name = "CAPIQ_FINS_IDENTIFIER")
	private String capIQFinsIdentifier;

}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\entity\CoreOrgIdKeyInstnSPIdMap.java

package com.spglobal.ratings.ratingsdata.entity;

import org.springframework.data.annotation.Immutable;

import com.fasterxml.jackson.annotation.JsonProperty;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.Table;
import lombok.Data;
import lombok.EqualsAndHashCode;

@Entity
@Table(name = "VW_ORG_KEY_INST_SP_ID_MAPPING", schema = "R360_APPDATA")
@Immutable
@EqualsAndHashCode(callSuper = false)
@Data
public class CoreOrgIdKeyInstnSPIdMap extends CoreOrgIdKeyInstnMapBase {
	@JsonProperty("spFinxIdContext")
	@Column(name = "SP_FINX_ID_CONTEXT")
	private String spFinxIdContext;

	@Column(name = "SP_FINS_IDENTIFIER")
	@JsonProperty("spFinsIdentifier")
	private String spFinsIdentifier;
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\entity\CriteriaArticlesByTypes.java

package com.spglobal.ratings.ratingsdata.entity;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import jakarta.persistence.*;
import lombok.Data;
import org.springframework.data.annotation.Immutable;

import java.io.Serializable;

@Entity
@Table(name = "VW_CRITERIA_ARTICLES", schema = "R360_APPDATA")
@Immutable
@Data
@JsonIgnoreProperties(ignoreUnknown = true)
@IdClass(CriteriaArticlesType.class)
@NamedQuery(name = "CriteriaArticlesByTypes.findCriteriaArticlesByTypes",
		query = "select distinct e from CriteriaArticlesByTypes e where e.criteriaTypeId in (:criteriaTypeId) and (:archiveInd is null or e.archiveInd <>:archiveInd)")
public class CriteriaArticlesByTypes implements Serializable {

	//Json Field Names are changed as part of Denodo View Replacement to avoid multiple changes in MFE
	@JsonProperty("KeyFileCollection")
	@Id
	@Column(name = "ARTICLE_ID")
	private int articleId;

	@JsonProperty("CRPresentationTitle")
	@Column(name = "TITLE")
	private String title;

	@JsonProperty("Presentationdate")
	@Column(name = "ARTICLE_DATE")
	private String articleDate;

	@JsonProperty("BestPersonName")
	@Column(name = "AUTHOR")
	private String author;

	@JsonProperty("CreditResearchArticleTopicAbbr")
	@Id
	@Column(name = "CRITERIA_TYPE_ID")
	private String criteriaTypeId;
	
	@JsonProperty("criteriaType")
	@Column(name = "CRITERIA_TYPE")
	private String criteriaType;

	@JsonProperty("OIDVendor")
	@Column(name = "ARCHIVE_IND")
	private String archiveInd;

}




C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\entity\CriteriaArticlesType.java

package com.spglobal.ratings.ratingsdata.entity;

import jakarta.persistence.Column;

public class CriteriaArticlesType {
    @Column(name = "ARTICLE_ID")
    private int articleId;

    @Column(name = "CRITERIA_TYPE_ID")
    private String criteriaTypeId;

}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\entity\CriteriaTypeLookupEntity.java

package com.spglobal.ratings.ratingsdata.entity;

import java.io.Serializable;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.Id;
import jakarta.persistence.IdClass;
import jakarta.persistence.Table;

import org.springframework.data.annotation.Immutable;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Entity
@Table(name = "CRITERIA_TYPES", schema = "R360_APPDATA")
@Immutable
@Data
@NoArgsConstructor
@AllArgsConstructor
@JsonInclude(JsonInclude.Include.ALWAYS)
@IdClass(CriteriaTypeLookupEntity.class)
public class CriteriaTypeLookupEntity implements Serializable {
	
	@JsonProperty("criteriaTypeId")
	@Id@Column(name = "CRITERIA_TYPE_ID")
	private Long criteriaTypeId;
	
	@JsonProperty("criteriaType")
	@Column(name = "CRITERIA_TYPE")
	private String criteriaType;

	@JsonIgnore
	@Column(name = "CRITERIA_TYPE_DESC")
	private String criteriaTypeDesc;
	
	@JsonIgnore
	@Id@Column(name = "RANK_ORDER_NUM")
	private int order;
	
	@JsonIgnore
	@Column(name = "ACTV_FLAG")
	private String actvFlag;

}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\entity\CurrencyExchangeRate.java

package com.spglobal.ratings.ratingsdata.entity;

import java.io.Serializable;
import java.sql.Date;
import java.sql.Timestamp;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.Id;
import jakarta.persistence.Table;

import org.springframework.data.annotation.Immutable;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Entity
@Table(name = "EXCHANGE_RATE", schema = "FXRT")
@Immutable
@Data
@NoArgsConstructor
@AllArgsConstructor
@JsonInclude(JsonInclude.Include.ALWAYS)

public class CurrencyExchangeRate implements Serializable {

	/**
	 * 
	 */
	private static final long serialVersionUID = 4191728566039226229L;

	@Id
	@JsonProperty("EXCH_RATE_ID")
	@Column(name = "EXCH_RATE_ID")
	private Long exchangeRateId;

	@Column(name = "DATE_ID")
	private Long dateID;

	@Column(name = "BASE_CURR_CODE")
	private String baseCurrCode;

	@Column(name = "TARGET_CURR_CODE")
	private String trgCurrCode;

	@Column(name = "PRICE_TYPE_CODE")
	private String priceTypeCode;

	@Column(name = "EXCH_RATE_TYPE_CODE")
	private String exchRateTypeCode;

	@Column(name = "EXCH_RATE_VAL")
	private Double exchRateVal;

	@Column(name = "EXCH_RATE_DATE")
	private Date exchRateDate;

	@Column(name = "ACTUAL_DATE_ID")
	private Long actualDateId;

	@Column(name = "DATA_SOURCE_CODE")
	private String dataSourceCode;

	@Column(name = "XWALK_CURR_CODE")
	private String xwalkCurrCode;

	@Column(name = "DERIVED_FLAG")
	private String derivedFlag;

	@Column(name = "BEST_RATE_FLAG")
	private String bestRateFlag;

	@Column(name = "SOURCE_UPD_TSTMP")
	private Timestamp sourceUpdTimeStamp;

	@Column(name = "LAST_UPD_TSTMP")
	private Timestamp lastUpdTimeStamp;

}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\entity\CurrencyLookupEntity.java

package com.spglobal.ratings.ratingsdata.entity;

import java.io.Serializable;

import org.springframework.data.annotation.Immutable;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.Id;
import jakarta.persistence.Table;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Entity
@Table(name = "R360_APP_CURRENCY", schema = "R360_USER_PREF")
@Immutable
@Data
@NoArgsConstructor
@AllArgsConstructor
@JsonInclude(JsonInclude.Include.ALWAYS)
public class CurrencyLookupEntity implements Serializable {

	private static final long serialVersionUID = 1L;

	@Id
	@JsonProperty("key")
	@Column(name = "CURRENCY_CD")
	private String isoCurrencyCode;

	@Column(name = "CURRENCY_NAME")
	@JsonProperty("value")
	private String currencyName;

	@Column(name = "CURRENCY_SYMBOL")
	private String currencySymbol;

	@Column(name = "MAGNITUDE_MULTIPLIER_DISPLAY")
	private Long numberOfMinorUnits;

	@Column(name = "RANK_ORDER_NUM")
	private Long rankOrderNum;

	@Column(name = "ACTV_FLAG")
	private String activeFlag;

}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\entity\DashBoardMyRating.java

package com.spglobal.ratings.ratingsdata.entity;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.Id;
import jakarta.persistence.Table;

import org.springframework.data.annotation.Immutable;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Entity
@Table(name = "VW_MY_RATING", schema = "R360_APPDATA")
@Immutable
@Data
@NoArgsConstructor
@AllArgsConstructor
//@NamedQuery(name = "DashBoardMyRating.findByEntityId", query = "select e from DashBoardMyRating e where e.entityId = ?1")
@JsonInclude(JsonInclude.Include.ALWAYS)
public class DashBoardMyRating {
	
	
	@JsonIgnore
	@Id@Column(name = "ENTITY_ID")
	private Long entityId;
	
	@JsonProperty("rating")
	@Column(name = "RATING")
	private String rating;
	
	@JsonProperty("debt_type")
	@Column(name = "DEBT_TYPE")
	private String debtType;
	
	@JsonProperty("rating_type")
	@Column(name = "RATING_TYPE")
	private String ratingType;
	
	@JsonProperty("creditwatch_outlook")
	@Column(name = "CREDITWATCH_OUTLOOK")
	private String creditwatchOutlook;
	
	@JsonProperty("activerating")
	@Column(name = "ENTITY_RATING_IND")
	private String entityRatingInd;

	
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\entity\DefinitionsConfig.java

package com.spglobal.ratings.ratingsdata.entity;

import lombok.Data;
import org.springframework.data.annotation.Immutable;

import jakarta.persistence.*;
import java.util.Date;

@Entity
@Table(name = "DATAELEMENT_UI_CONFIG", schema="R360_APPDATA")
@Immutable
@Data

public class DefinitionsConfig {
    @Id
    @Column(name="DATAELEMENT_UI_CONFIG_ID")
    private Integer uiConfigId;

    @Column(name="ANALYTIC_CASE_TYPE")
    private String analyticCaseType;
    @Column(name="DATAELEMENT_CODE")
    private String dataElementCode;

    @Column(name="DATAELEMENT_TYPE")
    private String dataElementType;

    @Column(name="DATAELEMENT_GROUP")
    private String dataElementGroup;

    @Column(name="FIN_DATA_ELEMENT_ID")
    private Integer elementId;

    @Column(name="DATAELEMENT_DISPLAY_NAME")
    private String displayName;

    @Column(name="DATAELEMENT_DEFINITION")
    private String definition;

    @Column(name="SORT_ORDER")
    private Integer sortOrder;

    @Column(name="HIGHLIGHT_FLAG")
    private String highlightFlag;

    @Column(name="CREATE_DTTM")
    private Date createdDatetime;

    @Column(name="CREATE_USER")
    private String createdUser;

    @Column(name="UPDATE_DTTM")
    private Date updatedDatetime;

    @Column(name="UPDATE_USER")
    private String updatedUser;

    public Integer getUiConfigId() {
        return uiConfigId;
    }

    public void setUiConfigId(Integer uiConfigId) {
        this.uiConfigId = uiConfigId;
    }

    public String getAnalyticCaseType() {
        return analyticCaseType;
    }

    public void setAnalyticCaseType(String analyticCaseType) {
        this.analyticCaseType = analyticCaseType;
    }

    public String  getDataElementCode() {
        return dataElementCode;
    }

    public void setDataElementCode(String dataElementCode) {
        this.dataElementCode = dataElementCode;
    }

    public String getDataElementType() {
        return dataElementType;
    }

    public void setDataElementType(String dataElementType) {
        this.dataElementType = dataElementType;
    }

    public String getDataElementGroup() {
        return dataElementGroup;
    }

    public void setDataElementGroup(String dataElementGroup) {
        this.dataElementGroup = dataElementGroup;
    }

    public Integer getElementId() {
        return elementId;
    }

    public void setElementId(Integer elementId) {
        this.elementId = elementId;
    }

    public String getDisplayName() {
        return displayName;
    }

    public void setDisplayName(String displayName) {
        this.displayName = displayName;
    }

    public String getDefinition() {
        return definition;
    }

    public void setDefinition(String definition) {
        this.definition = definition;
    }

    public Integer getSortOrder() {
        return sortOrder;
    }

    public void setSortOrder(Integer sortOrder) {
        this.sortOrder = sortOrder;
    }

    public String getHighlightFlag() {
        return highlightFlag;
    }

    public void setHighlightFlag(String highlightFlag) {
        this.highlightFlag = highlightFlag;
    }

    public Date getCreatedDatetime() {
        return createdDatetime;
    }

    public void setCreatedDatetime(Date createdDatetime) {
        this.createdDatetime = createdDatetime;
    }

    public String getCreatedUser() {
        return createdUser;
    }

    public void setCreatedUser(String createdUser) {
        this.createdUser = createdUser;
    }

    public Date getUpdatedDatetime() {
        return updatedDatetime;
    }

    public void setUpdatedDatetime(Date updatedDatetime) {
        this.updatedDatetime = updatedDatetime;
    }

    public String getUpdatedUser() {
        return updatedUser;
    }

    public void setUpdatedUser(String updatedUser) {
        this.updatedUser = updatedUser;
    }
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\entity\DeriveRating.java

package com.spglobal.ratings.ratingsdata.entity;

import java.sql.Timestamp;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.Id;
import jakarta.persistence.Table;

import org.springframework.data.annotation.Immutable;

import lombok.Data;

@Data
@Entity
@Immutable
@Table(name = "DERIV_RATING", schema = "DERIVATION")
public class DeriveRating {

	@Id
	@Column(name = "DERIV_RATING_ID")
	private Long deriveRatingId;

	@Column(name = "RATING_ID")
	private Long ratingId;

	@Column(name = "RATED_ENTITY_ID")
	private Long ratingEntityId;

	@Column(name = "RATED_ENTITY_DEBT_TYPE_ID")
	private Long ratingEntityDebtTypeId;

	@Column(name = "DERIV_ENTITY_TYPE_CODE")
	private String deriveEntityTypeCode;

	@Column(name = "DEBT_TYPE_CODE")
	private String debtTypeCode;

	@Column(name = "RATING_TYPE_CODE")
	private String ratingTypeCode;

	@Column(name = "RATING_CODE")
	private String ratingCode;

	@Column(name = "WORK_OBJECT_ID")
	private String workObjectId;

	@Column(name = "RATING_ACTION_TYPE")
	private String ratingActionType;

	@Column(name = "RATING_ACTION_WORD")
	private String ratingActionWord;

	@Column(name = "PRIOR_CW_OL_ACTION_WORD")
	private String priorCWOLActionWord;

	@Column(name = "CURRENT_CW_OL_ACTION_WORD")
	private String currentCWOLActionWord;

	@Column(name = "PRIOR_CW_VALUE")
	private String priorCWValue;

	@Column(name = "CURRENT_CW_VALUE")
	private String currentCWValue;

	@Column(name = "PRIOR_OL_VALUE")
	private String priorOLValue;

	@Column(name = "CURRENT_OL_VALUE")
	private String currentOLValue;

	@Column(name = "PRIOR_CW_OL")
	private String priorCWOL;

	@Column(name = "CURRENT_CW_OL")
	private String currentCWOL;

	@Column(name = "PRIOR_CW_DATE")
	private Timestamp priorCWDate;

	@Column(name = "CURRENT_CW_DATE")
	private Timestamp currentCWDate;

	@Column(name = "PRIOR_OL_DATE")
	private Timestamp priorOLDate;

	@Column(name = "CURRENT_OL_DATE")
	private Timestamp currentOLDate;

	@Column(name = "PRIOR_CW_OL_DATE")
	private Timestamp priorCWOLDate;

	@Column(name = "CURRENT_CW_OL_DATE")
	private Timestamp currentCWOLDate;

	@Column(name = "PRIOR_RATING_SYMBOL")
	private String priorityRatingSymbol;

	@Column(name = "CURRENT_RATING_SYMBOL")
	private String currentRatingSymbol;

	@Column(name = "PRIOR_CW_OL_IND")
	private Long priorCWOLInd;

	@Column(name = "CURRENT_CW_OL_IND")
	private Long currentCWOLInd;

	@Column(name = "PRIOR_RATING_ID")
	private Long priorRatingId;

	@Column(name = "PRIOR_RATING_DATE")
	private Timestamp priorRatingDate;

	@Column(name = "CURRENT_RATING_DATE")
	private Timestamp currentRatingDate;

	@Column(name = "RATING_ANALYST_ROLE_LABEL")
	private String ratingAnalystRoleLabel;

	@Column(name = "GLOBAL_OR_NATIONAL_SCALE")
	private String globalOrNationalScale;

	@Column(name = "PRIOR_REGULATORY_INDICATOR")
	private String priorRegulatoryIndicator;

	@Column(name = "ACTIVE_FLAG")
	private String activeFlag;

	@Column(name = "LAST_MODIFIED_DATE")
	private Timestamp lastModifiedDate;

	@Column(name = "LAST_MODIFIED_USER")
	private String lastModifiedUser;

	@Column(name = "PRIOR_RATING_CODE")
	private String priorRatingCode;

	@Column(name = "CURRENT_CW_IND")
	private String currentCWInd;

	@Column(name = "CURRENT_OL_IND")
	private String currentOLInd;

	@Column(name = "CWOL_ACTION_WORD_CODE")
	private String cwolActionWordCode;

	@Column(name = "CWOL_ACTION_WORD")
	private String cwolActionWord;

	@Column(name = "COMBO_ACTION_WORD_CODE")
	private String comboActionWordCode;

	@Column(name = "COMBO_ACTION_WORD")
	private String comboActionWord;

	@Column(name = "MI_COMBO_ACTION_WORD_CODE")
	private String miComboActionWordCode;

	@Column(name = "MI_COMBO_ACTION_WORD")
	private String miComboActionWord;

	@Column(name = "NON_AFFIRM_RATING_ID")
	private Long nonAffrimRatingId;

	@Column(name = "INTRA_BAND_RECOVERY_CHANGE")
	private String intraBandRecoveryChange;

}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\entity\EntityCurrentRating.java

package com.spglobal.ratings.ratingsdata.entity;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.Id;
import jakarta.persistence.Table;

import org.springframework.data.annotation.Immutable;

import com.fasterxml.jackson.annotation.JsonProperty;

import lombok.Data;

@Entity
@Table(name = "VW_ENTITY_CURRENT_RATING", schema = "R360_APPDATA")
@Immutable
@Data
//@NamedQuery(name = "EntityCurrentRating.findByEntityId", query = "select e from EntityCurrentRating e where e.entityId = ?1 FETCH FIRST 1 ROWS ONLY")
public class EntityCurrentRating {

	@JsonProperty("RatingSymbol")
	@Column(name = "CURRENT_RATING_SYMBOL")
	private String currentRatingSymbol;

	@JsonProperty("RatingDebtTypeDescription")
	@Column(name = "DEBT_TYPE_DESC")
	private String debtTypeDesc;

	@JsonProperty("p_entity_id")
	@Id
	@Column(name="ENTITY_ID")
	private Long entityId;

	@JsonProperty("RatingOrder")
	@Column(name = "RATINGS_ORDER")
	private Long ratingsOrder;

	@JsonProperty("ratingtypedesc")
	@Column(name = "RATING_TYPE_DESC")
	private String ratingTypeDesc;
	
	
	@JsonProperty("CreditWatchOutlook")
	@Column(name = "LATEST_NON_AFFIRM_CW_OL")
	private String creditWatchOutlook;
	
	@JsonProperty("ConfidentialIndic")
	@Column(name = "CONFIDENTIALITY_IND")
	private String confidentialIndic;
	
	@JsonProperty("ConfidentialCatCode")
	@Column(name = "CONFIDENTIAL_CATEGORY_CODE")
	private String confidentialCatCode;
	
	@JsonProperty("ConfidentialCatDesc")
	@Column(name = "CONFIDENTIAL_CATEGORY_DESC")
	private String confidentialCatDesc;
	

	public String getCurrentRatingSymbol() {
		return currentRatingSymbol;
	}

	public void setCurrentRatingSymbol(String currentRatingSymbol) {
		this.currentRatingSymbol = currentRatingSymbol;
	}

	public String getDebtTypeDesc() {
		return debtTypeDesc;
	}

	public void setDebtTypeDesc(String debtTypeDesc) {
		this.debtTypeDesc = debtTypeDesc;
	}

	public Long getEntityId() {
		return entityId;
	}

	public void setEntityId(Long entityId) {
		this.entityId = entityId;
	}

	public Long getRatingsOrder() {
		return ratingsOrder;
	}

	public void setRatingsOrder(Long ratingsOrder) {
		this.ratingsOrder = ratingsOrder;
	}

	public String getRatingTypeDesc() {
		return ratingTypeDesc;
	}

	public void setRatingTypeDesc(String ratingTypeDesc) {
		this.ratingTypeDesc = ratingTypeDesc;
	}
	
	public String getCreditWatchOutlook() {
		return creditWatchOutlook;
	}

	public void setCreditWatchOutlook(String creditWatchOutlook) {
		this.creditWatchOutlook = creditWatchOutlook;
	}

	public String getConfidentialIndic() {
		return confidentialIndic;
	}

	public void setConfidentialIndic(String confidentialIndic) {
		this.confidentialIndic = confidentialIndic;
	}
	
	public String getConfidentialCatCode() {
		return confidentialCatCode;
	}

	public void setConfidentialCatCode(String confidentialCatCode) {
		this.confidentialCatCode = confidentialCatCode;
	}

	public String getConfidentialCatDesc() {
		return confidentialCatDesc;
	}

	public void setconfidentialCatDesc(String confidentialCatDesc) {
		this.confidentialCatDesc = confidentialCatDesc;
	}

	@Override
	public String toString() {
		return "EntityCurrentRating [currentRatingSymbol=" + currentRatingSymbol + ", debtTypeDesc=" + debtTypeDesc
				+ ", entityId=" + entityId + ", ratingsOrder=" + ratingsOrder + ", ratingTypeDesc=" + ratingTypeDesc
				+ ", creditWatchOutlook=" + creditWatchOutlook + ", confidentialIndic=" + confidentialIndic
				+ ", confidentialCatCode=" + confidentialCatCode + ", confidentialCatDesc=" + confidentialCatDesc + "]";
	}
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\entity\EntityCurrentRatingPublic.java

package com.spglobal.ratings.ratingsdata.entity;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.Id;
import jakarta.persistence.Table;

import org.springframework.data.annotation.Immutable;

import com.fasterxml.jackson.annotation.JsonProperty;

import lombok.Data;

@Entity
@Table(name = "VW_ENTITY_CURRENT_RATING_PUBLIC", schema = "R360_APPDATA")
@Immutable
@Data
//@NamedQuery(name = "EntityCurrentRatingPublic.findByEntityId", query = "select e from EntityCurrentRatingPublic e where e.entityId = ?1 FETCH FIRST 1 ROWS ONLY")
public class EntityCurrentRatingPublic {

	@JsonProperty("RatingSymbol")
	@Column(name = "CURRENT_RATING_SYMBOL")
	private String currentRatingSymbol;

	@JsonProperty("RatingDebtTypeDescription")
	@Column(name = "DEBT_TYPE_DESC")
	private String debtTypeDesc;

	@JsonProperty("p_entity_id")
	@Id
	@Column(name="ENTITY_ID")
	private Long entityId;

	@JsonProperty("RatingOrder")
	@Column(name = "RATINGS_ORDER")
	private Long ratingsOrder;

	@JsonProperty("ratingtypedesc")
	@Column(name = "RATING_TYPE_DESC")
	private String ratingTypeDesc;
	
	
	@JsonProperty("CreditWatchOutlook")
	@Column(name = "LATEST_NON_AFFIRM_CW_OL")
	private String creditWatchOutlook;
	
	@JsonProperty("ConfidentialIndic")
	@Column(name = "CONFIDENTIALITY_IND")
	private String confidentialIndic;
	
	@JsonProperty("ConfidentialCatCode")
	@Column(name = "CONFIDENTIAL_CATEGORY_CODE")
	private String confidentialCatCode;
	
	@JsonProperty("ConfidentialCatDesc")
	@Column(name = "CONFIDENTIAL_CATEGORY_DESC")
	private String confidentialCatDesc;
	

	public String getCurrentRatingSymbol() {
		return currentRatingSymbol;
	}

	public void setCurrentRatingSymbol(String currentRatingSymbol) {
		this.currentRatingSymbol = currentRatingSymbol;
	}

	public String getDebtTypeDesc() {
		return debtTypeDesc;
	}

	public void setDebtTypeDesc(String debtTypeDesc) {
		this.debtTypeDesc = debtTypeDesc;
	}

	public Long getEntityId() {
		return entityId;
	}

	public void setEntityId(Long entityId) {
		this.entityId = entityId;
	}

	public Long getRatingsOrder() {
		return ratingsOrder;
	}

	public void setRatingsOrder(Long ratingsOrder) {
		this.ratingsOrder = ratingsOrder;
	}

	public String getRatingTypeDesc() {
		return ratingTypeDesc;
	}

	public void setRatingTypeDesc(String ratingTypeDesc) {
		this.ratingTypeDesc = ratingTypeDesc;
	}
	
	public String getCreditWatchOutlook() {
		return creditWatchOutlook;
	}

	public void setCreditWatchOutlook(String creditWatchOutlook) {
		this.creditWatchOutlook = creditWatchOutlook;
	}

	public String getConfidentialIndic() {
		return confidentialIndic;
	}

	public void setConfidentialIndic(String confidentialIndic) {
		this.confidentialIndic = confidentialIndic;
	}
	
	public String getConfidentialCatCode() {
		return confidentialCatCode;
	}

	public void setConfidentialCatCode(String confidentialCatCode) {
		this.confidentialCatCode = confidentialCatCode;
	}

	public String getConfidentialCatDesc() {
		return confidentialCatDesc;
	}

	public void setconfidentialCatDesc(String confidentialCatDesc) {
		this.confidentialCatDesc = confidentialCatDesc;
	}

	@Override
	public String toString() {
		return "EntityCurrentRating [currentRatingSymbol=" + currentRatingSymbol + ", debtTypeDesc=" + debtTypeDesc
				+ ", entityId=" + entityId + ", ratingsOrder=" + ratingsOrder + ", ratingTypeDesc=" + ratingTypeDesc
				+ ", creditWatchOutlook=" + creditWatchOutlook + ", confidentialIndic=" + confidentialIndic
				+ ", confidentialCatCode=" + confidentialCatCode + ", confidentialCatDesc=" + confidentialCatDesc + "]";
	}
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\entity\EntityDetails.java

package com.spglobal.ratings.ratingsdata.entity;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.Id;
import jakarta.persistence.NamedQuery;
import jakarta.persistence.Table;

import org.springframework.data.annotation.Immutable;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonProperty;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Entity
@Table(name = "VW_ENTITY_DETAILS", schema = "R360_APPDATA")
@Immutable
@Data
@NoArgsConstructor
@AllArgsConstructor
@NamedQuery(name = "EntityDetails.findByEntityId", query = "select distinct e from EntityDetails e where e.entityId = ?1")
@NamedQuery(name = "EntityDetails.findBySnlId", query = "select e from EntityDetails e where e.snlId = :snlId")
@NamedQuery(name = "EntityDetails.findByCapiqId", query = "select e from EntityDetails e where e.capiqId = :capiqId")
public class EntityDetails {
	
	@JsonProperty("core_id")
	@Column(name = "ENTITY_ID")
	private Long entityId;

	@Id
	@JsonProperty("capiq_id")
	@Column(name = "CAPIQ_ID")
	private String capiqId;


	@JsonProperty("snl_id")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "KEY_INSTN_ID")
	private String snlId;
	
	@JsonProperty("institution_name")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "ENTITY_NAME")
	private String institutionName;
	
	@JsonProperty("ticker")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "TICKER")
	private String ticker;
	
	@JsonProperty("primary_sector_code")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "PRIMARY_SECTOR_CODE")
	private String primarySectorCode;
	
	@JsonProperty("primary_sub_sector_code")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "PRIMARY_SUB_SECTOR_CODE")
	private String primarySubSectorCode;
	
	@JsonProperty("country_code")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "COUNTRY_CODE")
	private String countryCode;
	
	@JsonProperty("active_rating_ind")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "ACTIVE_RATING_IND")
	private String activeRatingInd;

	@JsonInclude(Include.ALWAYS)
	@JsonProperty("cra_ind")
	@Column(name = "CRA_IND")
	private String craInd;
	
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\entity\EntityRatings.java

package com.spglobal.ratings.ratingsdata.entity;

import java.sql.Date;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.Id;
import jakarta.persistence.IdClass;
import jakarta.persistence.NamedQuery;
import jakarta.persistence.Table;

import org.springframework.data.annotation.Immutable;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonInclude.Include;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Entity
@Table(name = "VW_ENTITY_RATINGS", schema = "R360_APPDATA")
@Immutable
@Data
@NoArgsConstructor
@AllArgsConstructor
@IdClass(RatingsId.class)
@NamedQuery(name = "EntityRatings.findByEntityId",
query = "select distinct e from EntityRatings e where e.entityId = ?1"
		+ " ORDER BY entityId ASC, derivedDebtTypeSortOrder ASC, NLSSORT(longShortInd, 'NLS_SORT = binary') ASC,"
		+ "ratingTypeSortOrder ASC")
public class EntityRatings {
	
	@JsonProperty("p_entity_id")
	@Id
	private Long entityId;
	
	@JsonProperty("debt_type_code")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "DEBT_TYPE_CODE")
	private String debtTypeCode;
	
	@JsonProperty("debt_type")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "DEBT_TYPE_DESC")
	private String debtTypeDesc;
	
	@JsonProperty("rating_type_code")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "RATING_TYPE_CODE")
	private String ratingTypeCode;
	
	@JsonProperty("rating_type")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "RATING_TYPE_DESC")
	private String ratingTypeDesc;
	
	@JsonProperty("rating")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "CURRENT_RATING_SYMBOL")
	private String currentRatingSymbol;
	
	@JsonProperty("rating_date")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "RATING_DATE")
	private Date ratingDate;
	
	@JsonProperty("last_review_date")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "LAST_REVIEW_DATE")
	private Date lastReviewDate;
	
	@JsonProperty("regulatory_indicator")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "REGULATORY_INDICATOR")
	private String regulatoryIndicator;
	
	@JsonInclude(Include.ALWAYS)
	@Column(name = "ACTION")
	private String action;
	
	@JsonProperty("creditwatch_outlook")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "LATEST_NON_AFFIRM_CW_OL")
	private String latestNonAffirmCWOL;
	
	@JsonProperty("creditwatch_outlook_date")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "LATEST_NON_AFFIRM_CW_OL_DATE")
	private Date latestNonAffirmCWOLDate;
	
	@JsonProperty("srd_curr_ind")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "SRD_CURR_IND")
	private String srdCurrInd;
	
	@JsonProperty("rating_detail_id")
	@Id
	private Long ratingDetailId;
	
	@JsonProperty("data_admin_date")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "DATA_ADMIN_DATE")
	private Date dataAdminDate;
	
	@JsonProperty("debt_type_sort_order")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "DEBT_TYPE_SORT_ORDER")
	private int debtTypeSortOrder;
	
	@JsonProperty("derived_debt_type_sort_order")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "DERIVED_DEBT_TYPE_SORT_ORDER")
	private int derivedDebtTypeSortOrder;
	
	@JsonProperty("long_short_ind")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "LONG_SHORT_IND")
	private String longShortInd;
	
	@JsonProperty("rating_type_sort_order")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "RATING_TYPE_SORT_ORDER")
	private Long ratingTypeSortOrder;
	
	@JsonInclude(Include.ALWAYS)
	@Column(name = "RATING_ID")
	private Long rating_id;
	
	@JsonProperty("primary_sector_code")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "PRIMARY_SECTOR_CODE")
	private String primarySectorCode;
	
	@JsonProperty("primary_sub_sector_code")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "PRIMARY_SUB_SECTOR_CODE")
	private String primarySubSectorCode;
	
	@JsonProperty("confidentiality_ind")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "CONFIDENTIALITY_IND")
	private String confidentialityInd;
	
	@JsonProperty("confidential_category_code")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "CONFIDENTIAL_CATEGORY_CODE")
	private String confidentialCategoryCode;

}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\entity\EntityRatingsHistory.java

package com.spglobal.ratings.ratingsdata.entity;

import java.sql.Date;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.Id;
import jakarta.persistence.IdClass;
import jakarta.persistence.NamedQuery;
import jakarta.persistence.Table;

import org.springframework.data.annotation.Immutable;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonInclude.Include;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Entity
@Table(name = "VW_ENTITY_RATINGS_HISTORY", schema = "R360_APPDATA")
@Immutable
@Data
@NoArgsConstructor
@AllArgsConstructor
@IdClass(RatingsId.class)
@NamedQuery(name = "EntityRatingsHistory.findByEntityIdAndDebtTypeCodeAndRatingTypeCode",
query = "select distinct e from EntityRatingsHistory e where e.entityId = ?1 and e.debtTypeCode=?2 and e.ratingTypeCode=?3"
		+ " ORDER BY dataAdminDate DESC")
public class EntityRatingsHistory {
	
	@JsonProperty("p_entity_id")
	@Id
	private Long entityId;
	
	@JsonProperty("debt_type_code")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "DEBT_TYPE_CODE")
	private String debtTypeCode;
	
	@JsonProperty("rating_type_code")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "RATING_TYPE_CODE")
	private String ratingTypeCode;
	
	@JsonProperty("rating_type")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "RATING_TYPE_DESCRIPTION")
	private String ratingTypeDescription;
	
	@JsonInclude(Include.ALWAYS)
	@Column(name = "RATING")
	private String rating;
	
	@JsonProperty("rating_date")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "RATING_DATE")
	private Date ratingDate;
	
	@JsonInclude(Include.ALWAYS)
	@Column(name = "ACTION")
	private String action;
	
	@JsonProperty("creditwatch_outlook")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "CREDITWATCH_OUTLOOK")
	private String creditwatchOutlook;
	
	@JsonProperty("creditwatch_outlook_date")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "CREDITWATCH_OUTLOOK_DATE")
	private Date creditwatchOutlookDate;
	
	@JsonProperty("rating_detail_id")
	@Id
	private Long ratingDetailId;
	
	@JsonProperty("data_admin_date")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "DATA_ADMIN_DATE")
	private Date dataAdminDate;
	
	@JsonProperty("confidentiality_ind")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "CONFIDENTIALITY_IND")
	private String confidentialityInd;
	
	@JsonProperty("confidential_category_code")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "CONFIDENTIAL_CATEGORY_CODE")
	private String confidentialCategoryCode;
	
	@Override
	public String toString() {
		return "ENTITY_RATINGS_HISTORY[p_entity_id=" + entityId + ", debt_type_code=" + debtTypeCode +
				", rating_type_code=" + ratingTypeCode + ", rating_type_description=" + ratingTypeDescription + 
				", rating=" + rating + ", rating_date=" + ratingDate + ", action=" + action +
				", creditwatch_outlook=" + creditwatchOutlook + ", creditwatch_outlook_date=" + creditwatchOutlookDate +
				", rating_detail_id=" + ratingDetailId + ", data_admin_date=" + dataAdminDate + ", confidentiality_ind=" +confidentialityInd+ 
				", confidential_category_code=" +confidentialCategoryCode+ "]";
				
	}

	public Long getEntityId() {
		return entityId;
	}

	public void setEntityId(Long entityId) {
		this.entityId = entityId;
	}

	public String getDebtTypeCode() {
		return debtTypeCode;
	}

	public void setDebtTypeCode(String debtTypeCode) {
		this.debtTypeCode = debtTypeCode;
	}

	public String getRatingTypeCode() {
		return ratingTypeCode;
	}

	public void setRatingTypeCode(String ratingTypeCode) {
		this.ratingTypeCode = ratingTypeCode;
	}

	public String getRatingTypeDescription() {
		return ratingTypeDescription;
	}

	public void setRatingTypeDescription(String ratingTypeDescription) {
		this.ratingTypeDescription = ratingTypeDescription;
	}

	public String getRating() {
		return rating;
	}

	public void setRating(String rating) {
		this.rating = rating;
	}

	public Date getRatingDate() {
		return ratingDate;
	}

	public void setRatingDate(Date ratingDate) {
		this.ratingDate = ratingDate;
	}

	public String getAction() {
		return action;
	}

	public void setAction(String action) {
		this.action = action;
	}

	public String getCreditwatchOutlook() {
		return creditwatchOutlook;
	}

	public void setCreditwatchOutlook(String creditwatchOutlook) {
		this.creditwatchOutlook = creditwatchOutlook;
	}

	public Date getCreditwatchOutlookDate() {
		return creditwatchOutlookDate;
	}

	public void setCreditwatchOutlookDate(Date creditwatchOutlookDate) {
		this.creditwatchOutlookDate = creditwatchOutlookDate;
	}

	public Long getRatingDetailId() {
		return ratingDetailId;
	}

	public void setRatingDetailId(Long ratingDetailId) {
		this.ratingDetailId = ratingDetailId;
	}

	public Date getDataAdminDate() {
		return dataAdminDate;
	}

	public void setDataAdminDate(Date dataAdminDate) {
		this.dataAdminDate = dataAdminDate;
	}

	public String getConfidentialityInd() {
		return confidentialityInd;
	}

	public void setConfidentialityInd(String confidentialityInd) {
		this.confidentialityInd = confidentialityInd;
	}

	public String getConfidentialCategoryCode() {
		return confidentialCategoryCode;
	}

	public void setConfidentialCategoryCode(String confidentialCategoryCode) {
		this.confidentialCategoryCode = confidentialCategoryCode;
	}
	
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\entity\EntityRatingsHistoryPublic.java

package com.spglobal.ratings.ratingsdata.entity;

import java.sql.Date;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.Id;
import jakarta.persistence.IdClass;
import jakarta.persistence.NamedQuery;
import jakarta.persistence.Table;

import org.springframework.data.annotation.Immutable;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonInclude.Include;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Entity
@Table(name = "VW_ENTITY_RATINGS_HISTORY_PUBLIC", schema = "R360_APPDATA")
@Immutable
@Data
@NoArgsConstructor
@AllArgsConstructor
@IdClass(RatingsId.class)
@NamedQuery(name = "EntityRatingsHistoryPublic.findByEntityIdAndDebtTypeCodeAndRatingTypeCode",
query = "select distinct e from EntityRatingsHistoryPublic e where e.entityId = ?1 and e.debtTypeCode=?2 and e.ratingTypeCode=?3"
		+ " ORDER BY dataAdminDate DESC")
public class EntityRatingsHistoryPublic {
	
	@JsonProperty("p_entity_id")
	@Id
	private Long entityId;
	
	@JsonProperty("debt_type_code")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "DEBT_TYPE_CODE")
	private String debtTypeCode;
	
	@JsonProperty("rating_type_code")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "RATING_TYPE_CODE")
	private String ratingTypeCode;
	
	@JsonProperty("rating_type")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "RATING_TYPE_DESCRIPTION")
	private String ratingTypeDescription;
	
	@JsonInclude(Include.ALWAYS)
	@Column(name = "RATING")
	private String rating;
	
	@JsonProperty("rating_date")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "RATING_DATE")
	private Date ratingDate;
	
	@JsonInclude(Include.ALWAYS)
	@Column(name = "ACTION")
	private String action;
	
	@JsonProperty("creditwatch_outlook")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "CREDITWATCH_OUTLOOK")
	private String creditwatchOutlook;
	
	@JsonProperty("creditwatch_outlook_date")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "CREDITWATCH_OUTLOOK_DATE")
	private Date creditwatchOutlookDate;
	
	@JsonProperty("rating_detail_id")
	@Id
	private Long ratingDetailId;
	
	@JsonProperty("data_admin_date")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "DATA_ADMIN_DATE")
	private Date dataAdminDate;
	
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\entity\EntityRatingsHistoryTAC.java

package com.spglobal.ratings.ratingsdata.entity;

import java.sql.Date;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.Id;
import jakarta.persistence.IdClass;
import jakarta.persistence.NamedQuery;
import jakarta.persistence.Table;

import org.springframework.data.annotation.Immutable;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonInclude.Include;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Entity
@Table(name = "VW_ENTITY_RATINGS_HISTORY_TAC", schema = "R360_APPDATA")
@Immutable
@Data
@NoArgsConstructor
@AllArgsConstructor
@IdClass(RatingsId.class)
@NamedQuery(name = "EntityRatingsHistoryTAC.findByEntityIdAndDebtTypeCodeAndRatingTypeCode",
query = "select distinct e from EntityRatingsHistoryTAC e where e.entityId = ?1 and e.debtTypeCode=?2 and e.ratingTypeCode=?3"
		+ " ORDER BY dataAdminDate DESC")
public class EntityRatingsHistoryTAC {
	
	@JsonProperty("p_entity_id")
	@Id
	private Long entityId;
	
	@JsonProperty("debt_type_code")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "DEBT_TYPE_CODE")
	private String debtTypeCode;
	
	@JsonProperty("rating_type_code")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "RATING_TYPE_CODE")
	private String ratingTypeCode;
	
	@JsonProperty("rating_type")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "RATING_TYPE_DESCRIPTION")
	private String ratingTypeDescription;
	
	@JsonInclude(Include.ALWAYS)
	@Column(name = "RATING")
	private String rating;
	
	@JsonProperty("rating_date")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "RATING_DATE")
	private Date ratingDate;
	
	@JsonInclude(Include.ALWAYS)
	@Column(name = "ACTION")
	private String action;
	
	@JsonProperty("creditwatch_outlook")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "CREDITWATCH_OUTLOOK")
	private String creditwatchOutlook;
	
	@JsonProperty("creditwatch_outlook_date")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "CREDITWATCH_OUTLOOK_DATE")
	private Date creditwatchOutlookDate;
	
	@JsonProperty("rating_detail_id")
	@Id
	private Long ratingDetailId;
	
	@JsonProperty("data_admin_date")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "DATA_ADMIN_DATE")
	private Date dataAdminDate;
	
	@JsonProperty("confidentiality_ind")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "CONFIDENTIALITY_IND")
	private String confidentialityInd;
	
	@JsonProperty("confidential_category_code")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "CONFIDENTIAL_CATEGORY_CODE")
	private String confidentialCategoryCode;
	
	@Override
	public String toString() {
		return "ENTITY_RATINGS_HISTORY[p_entity_id=" + entityId + ", debt_type_code=" + debtTypeCode +
				", rating_type_code=" + ratingTypeCode + ", rating_type_description=" + ratingTypeDescription + 
				", rating=" + rating + ", rating_date=" + ratingDate + ", action=" + action +
				", creditwatch_outlook=" + creditwatchOutlook + ", creditwatch_outlook_date=" + creditwatchOutlookDate +
				", rating_detail_id=" + ratingDetailId + ", data_admin_date=" + dataAdminDate + ", confidentiality_ind=" +confidentialityInd+ 
				", confidential_category_code=" +confidentialCategoryCode+ "]";
				
	}

	public Long getEntityId() {
		return entityId;
	}

	public void setEntityId(Long entityId) {
		this.entityId = entityId;
	}

	public String getDebtTypeCode() {
		return debtTypeCode;
	}

	public void setDebtTypeCode(String debtTypeCode) {
		this.debtTypeCode = debtTypeCode;
	}

	public String getRatingTypeCode() {
		return ratingTypeCode;
	}

	public void setRatingTypeCode(String ratingTypeCode) {
		this.ratingTypeCode = ratingTypeCode;
	}

	public String getRatingTypeDescription() {
		return ratingTypeDescription;
	}

	public void setRatingTypeDescription(String ratingTypeDescription) {
		this.ratingTypeDescription = ratingTypeDescription;
	}

	public String getRating() {
		return rating;
	}

	public void setRating(String rating) {
		this.rating = rating;
	}

	public Date getRatingDate() {
		return ratingDate;
	}

	public void setRatingDate(Date ratingDate) {
		this.ratingDate = ratingDate;
	}

	public String getAction() {
		return action;
	}

	public void setAction(String action) {
		this.action = action;
	}

	public String getCreditwatchOutlook() {
		return creditwatchOutlook;
	}

	public void setCreditwatchOutlook(String creditwatchOutlook) {
		this.creditwatchOutlook = creditwatchOutlook;
	}

	public Date getCreditwatchOutlookDate() {
		return creditwatchOutlookDate;
	}

	public void setCreditwatchOutlookDate(Date creditwatchOutlookDate) {
		this.creditwatchOutlookDate = creditwatchOutlookDate;
	}

	public Long getRatingDetailId() {
		return ratingDetailId;
	}

	public void setRatingDetailId(Long ratingDetailId) {
		this.ratingDetailId = ratingDetailId;
	}

	public Date getDataAdminDate() {
		return dataAdminDate;
	}

	public void setDataAdminDate(Date dataAdminDate) {
		this.dataAdminDate = dataAdminDate;
	}

	public String getConfidentialityInd() {
		return confidentialityInd;
	}

	public void setConfidentialityInd(String confidentialityInd) {
		this.confidentialityInd = confidentialityInd;
	}

	public String getConfidentialCategoryCode() {
		return confidentialCategoryCode;
	}

	public void setConfidentialCategoryCode(String confidentialCategoryCode) {
		this.confidentialCategoryCode = confidentialCategoryCode;
	}
	
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\entity\EntityRatingsHistTACPub.java

package com.spglobal.ratings.ratingsdata.entity;

import java.sql.Date;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.Id;
import jakarta.persistence.IdClass;
import jakarta.persistence.NamedQuery;
import jakarta.persistence.Table;

import org.springframework.data.annotation.Immutable;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonInclude.Include;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Entity
@Table(name = "VW_ENTITY_RATINGS_HISTORY_TAC_PUBLIC", schema = "R360_APPDATA")
@Immutable
@Data
@NoArgsConstructor
@AllArgsConstructor
@IdClass(RatingsId.class)
@NamedQuery(name = "EntityRatingsHistTACPub.findByEntityIdAndDebtTypeCodeAndRatingTypeCode",
query = "select distinct e from EntityRatingsHistTACPub e where e.entityId = ?1 and e.debtTypeCode=?2 and e.ratingTypeCode=?3"
		+ " ORDER BY dataAdminDate DESC")
public class EntityRatingsHistTACPub {
	
	@JsonProperty("p_entity_id")
	@Id
	private Long entityId;
	
	@JsonProperty("debt_type_code")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "DEBT_TYPE_CODE")
	private String debtTypeCode;
	
	@JsonProperty("rating_type_code")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "RATING_TYPE_CODE")
	private String ratingTypeCode;
	
	@JsonProperty("rating_type")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "RATING_TYPE_DESCRIPTION")
	private String ratingTypeDescription;
	
	@JsonInclude(Include.ALWAYS)
	@Column(name = "RATING")
	private String rating;
	
	@JsonProperty("rating_date")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "RATING_DATE")
	private Date ratingDate;
	
	@JsonInclude(Include.ALWAYS)
	@Column(name = "ACTION")
	private String action;
	
	@JsonProperty("creditwatch_outlook")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "CREDITWATCH_OUTLOOK")
	private String creditwatchOutlook;
	
	@JsonProperty("creditwatch_outlook_date")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "CREDITWATCH_OUTLOOK_DATE")
	private Date creditwatchOutlookDate;
	
	@JsonProperty("rating_detail_id")
	@Id
	private Long ratingDetailId;
	
	@JsonProperty("data_admin_date")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "DATA_ADMIN_DATE")
	private Date dataAdminDate;
	
	@JsonProperty("confidentiality_ind")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "CONFIDENTIALITY_IND")
	private String confidentialityInd;
	
	@JsonProperty("confidential_category_code")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "CONFIDENTIAL_CATEGORY_CODE")
	private String confidentialCategoryCode;
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\entity\EntityRatingsPublic.java

package com.spglobal.ratings.ratingsdata.entity;

import java.sql.Date;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.Id;
import jakarta.persistence.IdClass;
import jakarta.persistence.NamedQuery;
import jakarta.persistence.Table;

import org.springframework.data.annotation.Immutable;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonInclude.Include;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Entity
@Table(name = "VW_ENTITY_RATINGS_PUBLIC", schema = "R360_APPDATA")
@Immutable
@Data
@NoArgsConstructor
@AllArgsConstructor
@IdClass(RatingsId.class)
@NamedQuery(name = "EntityRatingsPublic.findByEntityId",
query = "select distinct e from EntityRatingsPublic e where e.entityId = ?1"
		+ " ORDER BY entityId ASC, derivedDebtTypeSortOrder ASC, NLSSORT(longShortInd, 'NLS_SORT = binary') ASC,"
		+ "ratingTypeSortOrder ASC")
public class EntityRatingsPublic {
	
	@JsonProperty("p_entity_id")
	@Id
	private Long entityId;
	
	@JsonProperty("debt_type_code")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "DEBT_TYPE_CODE")
	private String debtTypeCode;
	
	@JsonProperty("debt_type")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "DEBT_TYPE_DESC")
	private String debtTypeDesc;
	
	@JsonProperty("rating_type_code")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "RATING_TYPE_CODE")
	private String ratingTypeCode;
	
	@JsonProperty("rating_type")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "RATING_TYPE_DESC")
	private String ratingTypeDesc;
	
	@JsonProperty("rating")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "CURRENT_RATING_SYMBOL")
	private String currentRatingSymbol;
	
	@JsonProperty("rating_date")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "RATING_DATE")
	private Date ratingDate;
	
	@JsonProperty("last_review_date")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "LAST_REVIEW_DATE")
	private Date lastReviewDate;
	
	@JsonProperty("regulatory_indicator")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "REGULATORY_INDICATOR")
	private String regulatoryIndicator;
	
	@JsonInclude(Include.ALWAYS)
	@Column(name = "ACTION")
	private String action;
	
	@JsonProperty("creditwatch_outlook")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "LATEST_NON_AFFIRM_CW_OL")
	private String latestNonAffirmCWOL;
	
	@JsonProperty("creditwatch_outlook_date")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "LATEST_NON_AFFIRM_CW_OL_DATE")
	private Date latestNonAffirmCWOLDate;
	
	@JsonProperty("srd_curr_ind")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "SRD_CURR_IND")
	private String srdCurrInd;
	
	@JsonProperty("rating_detail_id")
	@Id
	private Long ratingDetailId;
	
	@JsonProperty("data_admin_date")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "DATA_ADMIN_DATE")
	private Date dataAdminDate;
	
	@JsonProperty("debt_type_sort_order")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "DEBT_TYPE_SORT_ORDER")
	private int debtTypeSortOrder;
	
	@JsonProperty("derived_debt_type_sort_order")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "DERIVED_DEBT_TYPE_SORT_ORDER")
	private int derivedDebtTypeSortOrder;
	
	@JsonProperty("long_short_ind")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "LONG_SHORT_IND")
	private String longShortInd;
	
	@JsonProperty("rating_type_sort_order")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "RATING_TYPE_SORT_ORDER")
	private Long ratingTypeSortOrder;
	
	@JsonInclude(Include.ALWAYS)
	@Column(name = "RATING_ID")
	private Long rating_id;
	
	@JsonProperty("primary_sector_code")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "PRIMARY_SECTOR_CODE")
	private String primarySectorCode;
	
	@JsonProperty("primary_sub_sector_code")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "PRIMARY_SUB_SECTOR_CODE")
	private String primarySubSectorCode;
	
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\entity\EntityRatingsTACPublic.java

package com.spglobal.ratings.ratingsdata.entity;

import java.sql.Date;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.Id;
import jakarta.persistence.IdClass;
import jakarta.persistence.NamedQuery;
import jakarta.persistence.Table;

import org.springframework.data.annotation.Immutable;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonInclude.Include;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Entity
@Table(name = "VW_ENTITY_RATINGS_PUBLIC_TAC", schema = "R360_APPDATA")
@Immutable
@Data
@NoArgsConstructor
@AllArgsConstructor
@IdClass(RatingsId.class)
@NamedQuery(name = "EntityRatingsTACPublic.findByEntityId",
query = "select distinct e from EntityRatingsTACPublic e where e.entityId = ?1"
		+ " ORDER BY entityId ASC, derivedDebtTypeSortOrder ASC, NLSSORT(longShortInd, 'NLS_SORT = binary') ASC,"
		+ "ratingTypeSortOrder ASC")
public class EntityRatingsTACPublic {
	
	@JsonProperty("p_entity_id")
	@Id
	private Long entityId;
	
	@JsonProperty("debt_type_code")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "DEBT_TYPE_CODE")
	private String debtTypeCode;
	
	@JsonProperty("debt_type")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "DEBT_TYPE_DESC")
	private String debtTypeDesc;
	
	@JsonProperty("rating_type_code")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "RATING_TYPE_CODE")
	private String ratingTypeCode;
	
	@JsonProperty("rating_type")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "RATING_TYPE_DESC")
	private String ratingTypeDesc;
	
	@JsonProperty("rating")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "CURRENT_RATING_SYMBOL")
	private String currentRatingSymbol;
	
	@JsonProperty("rating_date")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "RATING_DATE")
	private Date ratingDate;
	
	@JsonProperty("last_review_date")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "LAST_REVIEW_DATE")
	private Date lastReviewDate;
	
	@JsonProperty("regulatory_indicator")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "REGULATORY_INDICATOR")
	private String regulatoryIndicator;
	
	@JsonInclude(Include.ALWAYS)
	@Column(name = "ACTION")
	private String action;
	
	@JsonProperty("creditwatch_outlook")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "LATEST_NON_AFFIRM_CW_OL")
	private String latestNonAffirmCWOL;
	
	@JsonProperty("creditwatch_outlook_date")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "LATEST_NON_AFFIRM_CW_OL_DATE")
	private Date latestNonAffirmCWOLDate;
	
	@JsonProperty("srd_curr_ind")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "SRD_CURR_IND")
	private String srdCurrInd;
	
	@JsonProperty("rating_detail_id")
	@Id
	private Long ratingDetailId;
	
	@JsonProperty("data_admin_date")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "DATA_ADMIN_DATE")
	private Date dataAdminDate;
	
	@JsonProperty("debt_type_sort_order")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "DEBT_TYPE_SORT_ORDER")
	private int debtTypeSortOrder;
	
	@JsonProperty("derived_debt_type_sort_order")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "DERIVED_DEBT_TYPE_SORT_ORDER")
	private int derivedDebtTypeSortOrder;
	
	@JsonProperty("long_short_ind")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "LONG_SHORT_IND")
	private String longShortInd;
	
	@JsonProperty("rating_type_sort_order")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "RATING_TYPE_SORT_ORDER")
	private Long ratingTypeSortOrder;
	
	@JsonInclude(Include.ALWAYS)
	@Column(name = "RATING_ID")
	private Long rating_id;
	
	@JsonProperty("primary_sector_code")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "PRIMARY_SECTOR_CODE")
	private String primarySectorCode;
	
	@JsonProperty("primary_sub_sector_code")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "PRIMARY_SUB_SECTOR_CODE")
	private String primarySubSectorCode;
	
	@JsonProperty("confidential_category_code")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "CONFIDENTIAL_CATEGORY_CODE")
	private String confidentialCategoryCode;

	
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\entity\EntityRatingsTACPvt.java

package com.spglobal.ratings.ratingsdata.entity;

import java.sql.Date;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.Id;
import jakarta.persistence.IdClass;
import jakarta.persistence.NamedQuery;
import jakarta.persistence.Table;

import org.springframework.data.annotation.Immutable;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonInclude.Include;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Entity
@Table(name = "VW_ENTITY_RATINGS_TAC_PVT", schema = "R360_APPDATA")
@Immutable
@Data
@NoArgsConstructor
@AllArgsConstructor
@IdClass(RatingsId.class)
@NamedQuery(name = "EntityRatingsTACPvt.findByEntityId",
query = "select distinct e from EntityRatingsTACPvt e where e.entityId = ?1"
		+ " ORDER BY entityId ASC, derivedDebtTypeSortOrder ASC, NLSSORT(longShortInd, 'NLS_SORT = binary') ASC,"
		+ "ratingTypeSortOrder ASC")
public class EntityRatingsTACPvt {
	
	@JsonProperty("p_entity_id")
	@Id
	private Long entityId;
	
	@JsonProperty("debt_type_code")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "DEBT_TYPE_CODE")
	private String debtTypeCode;
	
	@JsonProperty("debt_type")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "DEBT_TYPE_DESC")
	private String debtTypeDesc;
	
	@JsonProperty("rating_type_code")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "RATING_TYPE_CODE")
	private String ratingTypeCode;
	
	@JsonProperty("rating_type")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "RATING_TYPE_DESC")
	private String ratingTypeDesc;
	
	@JsonProperty("rating")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "CURRENT_RATING_SYMBOL")
	private String currentRatingSymbol;
	
	@JsonProperty("rating_date")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "RATING_DATE")
	private Date ratingDate;
	
	@JsonProperty("last_review_date")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "LAST_REVIEW_DATE")
	private Date lastReviewDate;
	
	@JsonProperty("regulatory_indicator")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "REGULATORY_INDICATOR")
	private String regulatoryIndicator;
	
	@JsonInclude(Include.ALWAYS)
	@Column(name = "ACTION")
	private String action;
	
	@JsonProperty("creditwatch_outlook")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "LATEST_NON_AFFIRM_CW_OL")
	private String latestNonAffirmCWOL;
	
	@JsonProperty("creditwatch_outlook_date")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "LATEST_NON_AFFIRM_CW_OL_DATE")
	private Date latestNonAffirmCWOLDate;
	
	@JsonProperty("srd_curr_ind")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "SRD_CURR_IND")
	private String srdCurrInd;
	
	@JsonProperty("rating_detail_id")
	@Id
	private Long ratingDetailId;
	
	@JsonProperty("data_admin_date")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "DATA_ADMIN_DATE")
	private Date dataAdminDate;
	
	@JsonProperty("debt_type_sort_order")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "DEBT_TYPE_SORT_ORDER")
	private int debtTypeSortOrder;
	
	@JsonProperty("derived_debt_type_sort_order")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "DERIVED_DEBT_TYPE_SORT_ORDER")
	private int derivedDebtTypeSortOrder;
	
	@JsonProperty("long_short_ind")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "LONG_SHORT_IND")
	private String longShortInd;
	
	@JsonProperty("rating_type_sort_order")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "RATING_TYPE_SORT_ORDER")
	private Long ratingTypeSortOrder;
	
	@JsonInclude(Include.ALWAYS)
	@Column(name = "RATING_ID")
	private Long rating_id;
	
	@JsonProperty("primary_sector_code")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "PRIMARY_SECTOR_CODE")
	private String primarySectorCode;
	
	@JsonProperty("primary_sub_sector_code")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "PRIMARY_SUB_SECTOR_CODE")
	private String primarySubSectorCode;
	
	@JsonProperty("confidential_category_code")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "CONFIDENTIAL_CATEGORY_CODE")
	private String confidentialCategoryCode;

}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\entity\FinancialCustomRatingEntity.java

package com.spglobal.ratings.ratingsdata.entity;

import java.io.Serializable;

import jakarta.persistence.Entity;
import jakarta.persistence.IdClass;
import jakarta.persistence.Table;

import org.springframework.data.annotation.Immutable;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.spglobal.ratings.ratingsdata.model.FinancialData;

@Entity
@Table(name = "VW_R360_FINANCIALS_DATA", schema = "R360_APPDATA")
@Immutable
@IdClass(FinancialRatingId.class)
@JsonInclude(JsonInclude.Include.ALWAYS)
public class FinancialCustomRatingEntity extends FinancialData implements Serializable {
	private static final long serialVersionUID = 1L;
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\entity\FinancialLTMRatingEntity.java

package com.spglobal.ratings.ratingsdata.entity;

import java.io.Serializable;

import jakarta.persistence.Entity;
import jakarta.persistence.IdClass;
import jakarta.persistence.Table;

import org.springframework.data.annotation.Immutable;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.spglobal.ratings.ratingsdata.model.FinancialData;

@Entity
@Table(name = "VW_R360_FINDATA_5YRS_LTM", schema = "R360_APPDATA")
@Immutable
@IdClass(FinancialRatingId.class)
@JsonInclude(JsonInclude.Include.ALWAYS)
public class FinancialLTMRatingEntity extends FinancialData implements Serializable {
	private static final long serialVersionUID = -2012748464735095803L;
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\entity\FinancialPeers.java

package com.spglobal.ratings.ratingsdata.entity;

import java.sql.Date;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.Id;
import jakarta.persistence.IdClass;
import jakarta.persistence.Table;

import org.springframework.data.annotation.Immutable;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonInclude.Include;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Entity
@Table(name = "VW_R360_FINANCIALS_DATA_PEERS", schema = "R360_APPDATA")
@JsonInclude(JsonInclude.Include.ALWAYS)
@Immutable
@Data
@NoArgsConstructor
@AllArgsConstructor
@IdClass(FinancialPeersId.class)
public class FinancialPeers {

    @Id
    @JsonProperty("core_id")
    @Column(name = "CORE_ID")
    private Long coreId;

    @JsonProperty("data_source_system")
    @Column(name = "DATA_SOURCE_SYSTEM")
    @JsonInclude(Include.ALWAYS)
    private String dataSourceSystem;

    @JsonProperty("data_element_cd")
    @Column(name = "DATA_ELEMENT_CD")
    @JsonInclude(Include.ALWAYS)
    private String dataElementCd;

    @JsonProperty("data_point_value")
    @Column(name = "DATA_POINT_VALUE")
    @JsonInclude(Include.ALWAYS)
    private Double dataPointValue;

    @JsonProperty("template_name")
    @Column(name = "TEMPLATE_NAME")
    @JsonInclude(Include.ALWAYS)
    private String templateName;

    @JsonProperty("period_state")
    @Column(name = "PERIOD_STATE")
    @JsonInclude(Include.ALWAYS)
    private String periodState;

    @JsonProperty("period_end_date")
    @Column(name = "PERIOD_END_DATE")
    @JsonInclude(Include.ALWAYS)
    private Date periodEndDate;

    @JsonProperty("last_updated_date")
    @Column(name = "LAST_UPDATED_DATE")
    @JsonInclude(Include.ALWAYS)
    private Date lastUpdatedDate;

    @JsonProperty("fiscalyear")
    @Column(name = "FISCALYEAR")
    @JsonInclude(Include.ALWAYS)
    private String fiscalyear;

    @JsonProperty("reported_currency")
    @Column(name = "REPORTED_CURRENCY")
    @JsonInclude(Include.ALWAYS)
    private String reportedCurrency;

    @JsonProperty("fin_period_id")
    @Column(name = "FIN_PERIOD_ID")
    @JsonInclude(Include.ALWAYS)
    private String finPeriodId;

    @JsonProperty("fin_entity_id")
    @Column(name = "FIN_ENTITY_ID")
    @JsonInclude(Include.ALWAYS)
    private Long finEntityId;

    @JsonProperty("fiscal_year")
    @Column(name = "FISCAL_YEAR")
    @JsonInclude(Include.ALWAYS)
    private Long fiscalYear;

    @JsonProperty("period_type_cd")
    @Column(name = "PERIOD_TYPE_CD")
    @JsonInclude(Include.ALWAYS)
    private String periodTypeCd;

    @JsonProperty("period_type_name")
    @Column(name = "PERIOD_TYPE_NAME")
    @JsonInclude(Include.ALWAYS)
    private String periodTypeName;

    @JsonProperty("magnitude")
    @Column(name = "MAGNITUDE")
    private String magnitude;

    @JsonProperty("product_decimal")
    @Column(name = "PRODUCT_DECIMAL")
    private Integer productDecimal;

}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\entity\FinancialPeersId.java

package com.spglobal.ratings.ratingsdata.entity;

import java.io.Serializable;

import jakarta.persistence.Column;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@NoArgsConstructor
@AllArgsConstructor
public class FinancialPeersId implements Serializable{

    /**
     * 
     */
    private static final long serialVersionUID = 1L;
    
    @Column(name="CORE_ID")
    private Long coreId;
    
    @Column(name="DATA_ELEMENT_CD")
    private String dataElementCd;

}



C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\entity\FinancialQuarterlyRatingEntity.java

package com.spglobal.ratings.ratingsdata.entity;

import java.io.Serializable;

import jakarta.persistence.Entity;
import jakarta.persistence.IdClass;
import jakarta.persistence.Table;

import org.springframework.data.annotation.Immutable;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.spglobal.ratings.ratingsdata.model.FinancialData;

@Entity
@Table(name = "VW_R360_FINDATA_5QTRS", schema = "R360_APPDATA")
@Immutable
@IdClass(FinancialRatingId.class)
@JsonInclude(JsonInclude.Include.ALWAYS)
public class FinancialQuarterlyRatingEntity extends FinancialData implements Serializable {

	private static final long serialVersionUID = -2012748464735095803L;
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\entity\FinancialRatingId.java

package com.spglobal.ratings.ratingsdata.entity;

import java.io.Serializable;

import jakarta.persistence.Column;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;


@Data
@NoArgsConstructor
@AllArgsConstructor
public class FinancialRatingId implements Serializable{

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;

	
	@Column(name="ID")
	private Long id;
	
	@Column(name = "DATA_ELEMENT_CD")
	private String dataElementCd;

}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\entity\GeographicUnit.java

package com.spglobal.ratings.ratingsdata.entity;

import java.io.Serializable;
import java.sql.Date;

import org.springframework.data.annotation.Immutable;

import com.fasterxml.jackson.annotation.JsonInclude;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.Id;
import jakarta.persistence.Table;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Entity
@Table(name = "GEOGRAPHIC_UNIT", schema = "GS_GC")
@Immutable
@Data
@NoArgsConstructor
@AllArgsConstructor
@JsonInclude(JsonInclude.Include.ALWAYS)
public class GeographicUnit implements Serializable {

	private static final long serialVersionUID = 1L;

	@Id
	@Column(name = "PARENT_GEOGRAPHIC_UNIT_ID")
	private String parentGeograpchicUnitId;

	@Column(name = "PARENT_GEO_UNIT_TYPE")
	private Character parentGeoUnitType;

	@Column(name = "PARENT_GEOGRAPHIC_UNIT_COUNT")
	private Long parentGeograpchicUnitCount;

	@Column(name = "LNK_TIME_ZONE")
	private Character linkTimezone;

	@Column(name = "LNK_CALENDAR_ID")
	private Character linkCalenderId;

	@Column(name = "LNK_NLS_CODE")
	private Character lnkNlsCode;

	@Column(name = "LNK_GEOGRAPHIC_UNIT_ID")
	private Character linkGeograpchicUnitId;

	@Column(name = "LNK_GEOGRAPHIC_UNIT_TYPE")
	private Character linkGeograpchicUnitType;

	@Column(name = "LNK_GEOGRAPHIC_UNIT_COUNT")
	private Long lnkGeograpchicUnitCount;

	@Column(name = "LNK_COUNTRY_SUBDIVISION_CODE")
	private String linkCountrySubDivisionCode;
	
	@Column(name = "CROSS_REFERENCE_OID")
	private Character crossReferenceOID;
	
	@Column(name = "START_DATETIME")
	private Date startDateTime;
	
	@Column(name = "END_DATETIME")
	private Date endDateTime;
	
	@Column(name = "CITY_CODE")
	private String cityCode;
	
	@Column(name = "CITY_CODE_TYPE")
	private String cityCodeType;
	
	@Column(name = "CONTINENT_CODE")
	private Character continentCode;
	
	@Column(name = "COUNTRY_CODE")
	private String countryCode;
	
	@Column(name = "COUNTY_CODE")
	private String countyCode;
	
	@Column(name = "COUNTY_CODE_TYPE")
	private String countyCodeType;
	
	@Column(name = "CSD_PERMITTED_IND")
	private Character csdPermittedInd;
	
	@Column(name = "POSTAL_CODE")
	private String postalCode;
	
	@Column(name = "PREFERRED_CURRENCY")
	private Character preferredCurrency;
	
	@Column(name = "STATE_PROVINCE_CODE")
	private String stateProvinceCode;
	
	@Column(name = "STOP_PAYMENT_INDICATOR")
	private Character stopPaymentIndicator;
	
	@Column(name = "CITY_TOWN_NAME")
	private String cityTownName;
	
	@Column(name = "COUNTY_NAME")
	private String countyName;
	
	@Column(name = "GEOGRAPHIC_UNIT_NAME")
	private String geograpchicUnitName;
	
	@Column(name = "REGION_NAME")
	private String regionName;
	
	@Column(name = "TOWNSHIP_MUNICIPALITY_NAME")
	private String townshipMunicipalityName;
	
	@Column(name = "GEOGRAPHIC_UNIT_DESCRIPTION")
	private String geographicUnitDescription;
	
	@Column(name = "LAST_CHANGE_DATETIME")
	private Date lastChangeDateTime;
	
	@Column(name = "LAST_CHANGE_USER_ID")
	private String lastChangeUserId;
	
	@Column(name = "DATA_STATUS")
	private String dataStatus;
	
	@Column(name = "DATA_SOURCE_ID")
	private String dataSourceId;
	
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\entity\InvestorSentimentCommentry.java

package com.spglobal.ratings.ratingsdata.entity;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import jakarta.persistence.*;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;
import org.springframework.data.annotation.Immutable;
import java.io.Serializable;

@Data
@NoArgsConstructor
@AllArgsConstructor
@Immutable
@JsonIgnoreProperties(ignoreUnknown = true)
@Entity(name = "InvestorSentimentCommentry")
@IdClass(value = InvSenNumbersCommentryCompKey.class)
@Table(name = "R360_INV_SEN_COMMENTARY", schema = "DSMPSTG")

public class InvestorSentimentCommentry {

    @Id
    @JsonProperty("industryId")
    @Column(name = "INDUSTRY_ID")
    private Long industryId;

    @Id
    @JsonProperty("displayOrder")
    @Column(name = "DISPLAY_ORDER")
    private int displayOrder;

    @JsonProperty("commentary")
    @Column(name = "COMMENTARY")
    private String commentary;

    @JsonProperty("lastModifiedUser")
    @Column(name = "LAST_MODIFIED_USER")
    private String lastModifiedUser;

    @JsonProperty("lastModifiedDate")
    @Column(name = "LAST_MODIFIED_DATE")
    private String lastModifiedDate;
}




C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\entity\InvestorSentimentIndustry.java

package com.spglobal.ratings.ratingsdata.entity;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.Id;
import jakarta.persistence.Table;

import org.springframework.data.annotation.Immutable;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;
@Entity
@Table(name = "VW_ENTITY_INV_SEN_INDUSTRY", schema = "R360_APPDATA")
@Immutable
@Data
@NoArgsConstructor
@AllArgsConstructor
@JsonInclude(JsonInclude.Include.ALWAYS)
public class InvestorSentimentIndustry {
	
	@JsonIgnore
	@Id@Column(name="ENTITY_ID")
	private Long entityId;
	
	@JsonProperty("industry_id")
	@Column(name="INDUSTRY_ID")
	private Integer industryId;
	
	@JsonProperty("sector_id")
	@Column(name="SECTOR_ID")
	private Integer sectorId;
		
	@JsonProperty("sector_name")
	@Column(name="SECTOR_NAME")
	private String sectorName;
	

}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\entity\InvestorSentimentNumbersRecentStudies.java

package com.spglobal.ratings.ratingsdata.entity;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import jakarta.persistence.*;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;
import org.springframework.data.annotation.Immutable;

import java.io.Serializable;

@Data
@NoArgsConstructor
@AllArgsConstructor
@Immutable
@JsonIgnoreProperties(ignoreUnknown = true)
@Entity(name = "InvestorSentimentNumbersRecentStudies")
@IdClass(value = InvSenNumbersRecentStudiesCompKey.class)
@Table(name = "R360_INV_SEN_NUMBERS", schema = "DSMPSTG")
public class InvestorSentimentNumbersRecentStudies {

    @Id
    @JsonProperty("industryId")
    @Column(name = "INDUSTRY_ID")
    private Long industryId;

    @JsonProperty("type")
    @Column(name = "TYPE")
    private String type;

    @Id
    @JsonProperty("mnemonicCode")
    @Column(name = "MNEMONIC_CODE")
    private String mnemonicCode;

    @JsonProperty("displayOrder")
    @Column(name = "DISPLAY_ORDER")
    private int displayOrder;

    @JsonProperty("value")
    @Column(name = "VALUE")
    private String value;

    @JsonProperty("valueDesc")
    @Column(name = "VALUE_DESC")
    private String valueDesc;

    @JsonProperty("lastModifiedUser")
    @Column(name = "LAST_MODIFIED_USER")
    private String lastModifiedUser;

    @JsonProperty("lastModifiedDate")
    @Column(name = "LAST_MODIFIED_DATE")
    private String lastModifiedDate;

}

@Data
class InvSenNumbersRecentStudiesCompKey implements Serializable {

    private static final long serialVersionUID = 4265463698009448688L;
    private Long industryId;
    private String mnemonicCode;
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\entity\InvestorSentimentSectors.java

package com.spglobal.ratings.ratingsdata.entity;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.Id;
import jakarta.persistence.SecondaryTable;
import jakarta.persistence.Table;

import org.springframework.data.annotation.Immutable;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Entity
@Table(name = "VW_INVESTOR_SENTIMENT_SECTOR_LIST", schema = "R360_APPDATA")
@Immutable
@Data
@NoArgsConstructor
@AllArgsConstructor
@JsonInclude(JsonInclude.Include.ALWAYS)
public class InvestorSentimentSectors {
	
	
	@JsonProperty("industry_id")
	@Id@Column(name="INDUSTRY_ID")
	private Integer industryId;
	
	@JsonProperty("sector_id")
	@Column(name="SECTOR_ID")
	private Integer sectorId;
	
	@JsonProperty("parent_sector_id")
	@Column(name="PARENT_SECTOR_ID")
	private Integer parentSectorId;
	
	@JsonProperty("sector_name")
	@Column(name="SECTOR_NAME")
	private String sectorName;
	
	@JsonProperty("parent_sector_name")
	@Column(name="PARENT_SECTOR_NAME")
	private String parentSectorName;
	
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\entity\InvSenNumbersCommentryCompKey.java

package com.spglobal.ratings.ratingsdata.entity;

import lombok.Data;

import java.io.Serializable;

@Data
public class InvSenNumbersCommentryCompKey implements Serializable {

    private static final long serialVersionUID = 4265463698009448688L;
	private Long industryId;
	private int displayOrder;
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\entity\IssuesAndMaturitiedId.java

package com.spglobal.ratings.ratingsdata.entity;

import java.io.Serializable;

import jakarta.persistence.Column;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;


@Data
@NoArgsConstructor
@AllArgsConstructor
public class IssuesAndMaturitiedId implements Serializable{

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;

	
	@Column(name="ENTITY_ID")
	private Long entityId;
	
	@Column(name="INSTRUMENT_ID")
	private Long instrumentId;

	@Column(name="RATING_DETAIL_ID")
	private Long ratingDetailId;
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\entity\IssuesAndMaturities.java

package com.spglobal.ratings.ratingsdata.entity;

import java.sql.Date;
import java.sql.Timestamp;

import org.hibernate.annotations.Immutable;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonProperty;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.Id;
import jakarta.persistence.IdClass;
import jakarta.persistence.NamedQuery;
import jakarta.persistence.Table;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Entity
@Immutable
@Data
@NoArgsConstructor
@AllArgsConstructor
@Table(name = "vw_issues_maturities", schema="R360_APPDATA")
@IdClass(IssuesAndMaturitiedId.class)
@NamedQuery(name = "IssuesAndMaturities.findByEntityId",
query = "select distinct e from IssuesAndMaturities e where e.entityId = ?1"
		+ " ORDER BY sortOrder ASC,maturityDateDerived DESC, ratingDate DESC, precedenceNum ASC")
@NamedQuery(name = "IssuesAndMaturities.findByEntityIdAndDebtTypeCode",
query = "select distinct e from IssuesAndMaturities e where e.entityId = ?1 and e.debtTypeCode=?2"
		+ " ORDER BY sortOrder ASC,maturityDateDerived DESC, ratingDate DESC, precedenceNum ASC")
@NamedQuery(name = "IssuesAndMaturities.findByEntityIdAndRatingDetailId",
query = "select distinct e from IssuesAndMaturities e where e.entityId = ?1 and e.ratingDetailId=?2"
		+ " ORDER BY sortOrder ASC,maturityDateDerived DESC, ratingDate DESC, precedenceNum ASC")
@NamedQuery(name = "IssuesAndMaturities.findDistinctDebtTypeCodeAndDescriptionByEntityId",
query = "select distinct new com.spglobal.ratings.ratingsdata.model.DebtTypes(e.debtTypeCode, e.description, e.entityId, e.sortOrder) from"
		+ " com.spglobal.ratings.ratingsdata.entity.IssuesAndMaturities e where e.entityId=?1 ORDER BY sortOrder ASC")
public class IssuesAndMaturities {
	
	@JsonProperty("p_entity_id")
    @Id
	private Long entityId;
	
	@JsonProperty("instrument_id")
	@Id
	private Long instrumentId;
	
	@JsonProperty("instrument_detail_id")
	@JsonInclude(Include.ALWAYS)
	@Column(name="INSTRUMENT_DETAIL_ID")
	private Long instrumentDetailId;
	
	@JsonProperty("description")
	@JsonInclude(Include.ALWAYS)
	@Column(name="INSTRUMENT_NAME")
	private String instrumentName;
	
	@JsonProperty("debt_type_code")
	@JsonInclude(Include.ALWAYS)
	@Column(name="DEBT_TYPE_CODE")
	private String debtTypeCode;
	
	@JsonProperty("debt_type")
	@JsonInclude(Include.ALWAYS)
	@Column(name="DESCRIPTION")
	private String description;
	
	@JsonProperty("maturity_date")
	@JsonInclude(Include.ALWAYS)
	@JsonFormat(pattern="MM/dd/yyyy")
	@Column(name="MATURITY_DATE")
	private Date maturityDate;
	
	@JsonProperty("maturity_date_derived")
	@JsonInclude(Include.ALWAYS)
	@Column(name="MATURITY_DATE_DERIVED")
	private Timestamp maturityDateDerived;
	
	@JsonProperty("cusip")
	@JsonInclude(Include.ALWAYS)
	@Column(name="CUSIP")
	private String cusip;
	
	@JsonProperty("isin")
	@JsonInclude(Include.ALWAYS)
	@Column(name="ISIN")
	private String isin;
	
	@JsonProperty("cins")
	@JsonInclude(Include.ALWAYS)
	@Column(name="CINS")
	private String cins;
	
	@JsonProperty("rating_type_code")
	@JsonInclude(Include.ALWAYS)
	@Column(name="RATING_TYPE_CODE")
	private String ratingTypeCode;
	
	@JsonProperty("rating_type")
	@JsonInclude(Include.ALWAYS)
	@Column(name="RATING_TYPE_DESCRIPTION")
	private String ratingTypeDescription;
	
	@JsonProperty("rating")
	@Column(name="CURRENT_RATING_SYMBOL")
	private String currentRatingSymbol;
	
	@JsonProperty("rating_date")
	@JsonInclude(Include.ALWAYS)
	@Column(name="RATING_DATE")
	private Date ratingDate;
	
	@JsonProperty("data_admin_date")
	@JsonInclude(Include.ALWAYS)
	@Column(name="DATA_ADMIN_DATE")
	private Date dataAdminDate;
	
	@JsonProperty("last_review_date")
	@JsonInclude(Include.ALWAYS)
	@Column(name="LAST_REVIEW_DATE")
	private Date lastReviewDate;
	
	@JsonProperty("regulatory_identifier")
	@JsonInclude(Include.ALWAYS)
	@Column(name="REGULATORY_INDICATOR")
	private String regulatoryIndicator;
	
	@JsonProperty("creditwatch_outlook")
	@JsonInclude(Include.ALWAYS)
	@Column(name="CURRENT_CW_OL")
	private String currentCwOl;
	
	@JsonProperty("creditwatch_outlook_date")
	@JsonInclude(Include.ALWAYS)
	@Column(name="CURRENT_CW_OL_DATE")
	private Date currentCwOlDate;
	
	@JsonProperty("issue_program_type")
	@JsonInclude(Include.ALWAYS)
	@Column(name="ISSUE_PROGRAM_TYPE")
	private String issueProgramType;
	
	@JsonProperty("coupon_rate")
	@JsonInclude(Include.ALWAYS)
	@Column(name="COUPON_RATE")
	private String couponRate;
	
	@JsonProperty("original_principal_balance")
	@JsonInclude(Include.ALWAYS)
	@Column(name="ORIGINAL_PRINCIPAL_BALANCE")
	private String originalPrincipalBalance;
	
	@JsonProperty("currency")
	@JsonInclude(Include.ALWAYS)
	@Column(name="CURRENCY")
	private String currency;
	
	@JsonProperty("sort_order")
	@JsonInclude(Include.ALWAYS)
	@Column(name="SORT_ORDER")
	private Integer sortOrder;
	
	@JsonProperty("precedence_num")
	@JsonInclude(Include.ALWAYS)
	@Column(name="PRECEDENCE_NUM")
	private Integer precedenceNum;
	
	@JsonProperty("rating_detail_id")
	@Id
	private Long ratingDetailId;
	
	@JsonProperty("confidentiality_ind")
	@JsonInclude(Include.ALWAYS)
	@Column(name="CONFIDENTIALITY_IND")
	private String confidentialityInd;
	
	@JsonProperty("confidential_category_code")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "CONFIDENTIAL_CATEGORY_CODE")
	private String confidentialCategoryCode;
	
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\entity\IssuesAndMaturitiesHistory.java

package com.spglobal.ratings.ratingsdata.entity;

import java.sql.Date;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.Id;
import jakarta.persistence.IdClass;
import jakarta.persistence.NamedQuery;
import jakarta.persistence.Table;

import org.springframework.data.annotation.Immutable;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonInclude.Include;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Entity
@Table(name = "VW_ISSUES_MATURITIES_HISTORY", schema = "R360_APPDATA")
@Immutable
@Data
@NoArgsConstructor
@AllArgsConstructor
@IdClass(IssuesAndMaturitiesHistoryId.class)
@NamedQuery(name = "IssuesAndMaturitiesHistory.findByInstrumentIdAndRatingTypeCodeAndInstrumentDetailId",
query = "select distinct e from IssuesAndMaturitiesHistory e where e.instrumentId = ?1 and e.ratingTypeCode=?2 and e.instrumentDetailId=?3"
		+ " ORDER BY ratingDate DESC, dataAdminDate DESC")
public class IssuesAndMaturitiesHistory {
	
	@JsonProperty("p_instrument_id")
	@Id
	private Long instrumentId;
	
	@JsonProperty("p_instrument_detail_id")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "INSTRUMENT_DETAIL_ID")
	private Long instrumentDetailId;
	
	@JsonProperty("ratingTypeCode")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "RATING_TYPE_CODE")
	private String ratingTypeCode;
	
	@JsonProperty("rating_type")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "RATING_TYPE_DESCRIPTION")
	private String ratingTypeDescription;
	
	@JsonProperty("rating")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "RATING")
	private String rating;
	
	@JsonProperty("rating_date")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "RATING_DATE")
	private Date ratingDate;
	
	@JsonProperty("action")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "ACTION")
	private String action;
	
	@JsonProperty("creditwatch_outlook")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "CREDITWATCH_OUTLOOK")
	private String creditwatchOutlook;
	
	@JsonProperty("creditwatch_outlook_date")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "CREDITWATCH_OUTLOOK_DATE")
	private Date creditwatchOutlookDate;
	
	@JsonProperty("debt_type_code")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "DEBT_TYPE_CODE")
	private String debtTypeCode;
	
	@JsonProperty("rating_detail_id")
	@Id
	private Long ratingDetailId;
	
	@JsonProperty("data_admin_date")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "DATA_ADMIN_DATE")
	private Date dataAdminDate;
	
	@JsonProperty("confidentiality_ind")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "CONFIDENTIALITY_IND")
	private String confidentialityInd;
	
	@JsonProperty("confidential_category_code")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "CONFIDENTIAL_CATEGORY_CODE")
	private String confidentialCategoryCode;

}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\entity\IssuesAndMaturitiesHistoryId.java

package com.spglobal.ratings.ratingsdata.entity;

import java.io.Serializable;

import jakarta.persistence.Column;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@NoArgsConstructor
@AllArgsConstructor
public class IssuesAndMaturitiesHistoryId implements Serializable {
	
	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;

	
	@Column(name="INSTRUMENT_ID")
	private Long instrumentId;
	
	@Column(name="RATING_DETAIL_ID")
	private Long ratingDetailId;

}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\entity\IssuesAndMaturitiesHistoryPublic.java

package com.spglobal.ratings.ratingsdata.entity;

import java.sql.Date;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.Id;
import jakarta.persistence.IdClass;
import jakarta.persistence.NamedQuery;
import jakarta.persistence.Table;

import org.springframework.data.annotation.Immutable;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonInclude.Include;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Entity
@Table(name = "VW_ISSUES_MATURITIES_HISTORY_PUBLIC", schema = "R360_APPDATA")
@Immutable
@Data
@NoArgsConstructor
@AllArgsConstructor
@IdClass(IssuesAndMaturitiesHistoryId.class)
@NamedQuery(name = "IssuesAndMaturitiesHistoryPublic.findByInstrumentIdAndRatingTypeCodeAndInstrumentDetailId",
query = "select distinct e from IssuesAndMaturitiesHistoryPublic e where e.instrumentId = ?1 and e.ratingTypeCode=?2 and e.instrumentDetailId=?3"
		+ " ORDER BY ratingDate DESC, dataAdminDate DESC")
public class IssuesAndMaturitiesHistoryPublic {
	
	@JsonProperty("p_instrument_id")
	@Id
	private Long instrumentId;
	
	@JsonProperty("p_instrument_detail_id")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "INSTRUMENT_DETAIL_ID")
	private Long instrumentDetailId;
	
	@JsonProperty("p_rating_type_code")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "RATING_TYPE_CODE")
	private String ratingTypeCode;
	
	@JsonProperty("rating_type")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "RATING_TYPE_DESCRIPTION")
	private String ratingTypeDescription;
	
	@JsonProperty("rating")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "RATING")
	private String rating;
	
	@JsonProperty("rating_date")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "RATING_DATE")
	private Date ratingDate;
	
	@JsonProperty("action")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "ACTION")
	private String action;
	
	@JsonProperty("creditwatch_outlook")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "CREDITWATCH_OUTLOOK")
	private String creditwatchOutlook;
	
	@JsonProperty("creditwatch_outlook_date")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "CREDITWATCH_OUTLOOK_DATE")
	private Date creditwatchOutlookDate;
	
	@JsonProperty("debt_type_code")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "DEBT_TYPE_CODE")
	private String debtTypeCode;
	
	@JsonProperty("rating_detail_id")
	@Id
	private Long ratingDetailId;
	
	@JsonProperty("data_admin_date")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "DATA_ADMIN_DATE")
	private Date dataAdminDate;

}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\entity\IssuesAndMaturitiesPublic.java

package com.spglobal.ratings.ratingsdata.entity;

import java.sql.Date;
import java.sql.Timestamp;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.Id;
import jakarta.persistence.IdClass;
import jakarta.persistence.NamedQuery;
import jakarta.persistence.Table;

import org.hibernate.annotations.Immutable;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonInclude.Include;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Entity
@Immutable
@Table(name = "vw_issues_maturities_public", schema="R360_APPDATA")
@Data
@NoArgsConstructor
@AllArgsConstructor
@IdClass(IssuesAndMaturitiedId.class)
@NamedQuery(name = "IssuesAndMaturitiesPublic.findByEntityId",
query = "select distinct e from IssuesAndMaturitiesPublic e where e.entityId = ?1"
		+ " ORDER BY sortOrder ASC,maturityDateDerived DESC, ratingDate DESC, precedenceNum ASC")
@NamedQuery(name = "IssuesAndMaturitiesPublic.findByEntityIdAndDebtTypeCode",
query = "select distinct e from IssuesAndMaturitiesPublic e where e.entityId = ?1 and e.debtTypeCode=?2"
		+ " ORDER BY sortOrder ASC,maturityDateDerived DESC, ratingDate DESC, precedenceNum ASC")
@NamedQuery(name = "IssuesAndMaturitiesPublic.findByEntityIdAndRatingDetailId",
query = "select distinct e from IssuesAndMaturitiesPublic e where e.entityId = ?1 and e.ratingDetailId=?2"
		+ " ORDER BY sortOrder ASC,maturityDateDerived DESC, ratingDate DESC, precedenceNum ASC")
public class IssuesAndMaturitiesPublic {
	
	@JsonProperty("p_entity_id")
    @Id
	private Long entityId;
	
	@JsonProperty("instrument_id")
	@Id
	private Long instrumentId;
	
	@JsonProperty("instrument_detail_id")
	@JsonInclude(Include.ALWAYS)
	@Column(name="INSTRUMENT_DETAIL_ID")
	private Long instrumentDetailId;
	
	@JsonProperty("description")
	@JsonInclude(Include.ALWAYS)
	@Column(name="INSTRUMENT_NAME")
	private String instrumentName;
	
	@JsonProperty("debt_type_code")
	@JsonInclude(Include.ALWAYS)
	@Column(name="DEBT_TYPE_CODE")
	private String debtTypeCode;
	
	@JsonProperty("debt_type")
	@JsonInclude(Include.ALWAYS)
	@Column(name="DESCRIPTION")
	private String description;
	
	@JsonProperty("maturity_date")
	@JsonInclude(Include.ALWAYS)
	@JsonFormat(pattern="MM/dd/yyyy")
	@Column(name="MATURITY_DATE")
	private Date maturityDate;
	
	@JsonProperty("maturity_date_derived")
	@JsonInclude(Include.ALWAYS)
	@Column(name="MATURITY_DATE_DERIVED")
	private Timestamp maturityDateDerived;
	
	@JsonProperty("cusip")
	@JsonInclude(Include.ALWAYS)
	@Column(name="CUSIP")
	private String cusip;
	
	@JsonProperty("isin")
	@JsonInclude(Include.ALWAYS)
	@Column(name="ISIN")
	private String isin;
	
	@JsonProperty("cins")
	@JsonInclude(Include.ALWAYS)
	@Column(name="CINS")
	private String cins;
	
	@JsonProperty("rating_type_code")
	@JsonInclude(Include.ALWAYS)
	@Column(name="RATING_TYPE_CODE")
	private String ratingTypeCode;
	
	@JsonProperty("rating_type")
	@JsonInclude(Include.ALWAYS)
	@Column(name="RATING_TYPE_DESCRIPTION")
	private String ratingTypeDescription;
	
	@JsonProperty("rating")
	@JsonInclude(Include.ALWAYS)
	@Column(name="CURRENT_RATING_SYMBOL")
	private String currentRatingSymbol;
	
	@JsonProperty("rating_date")
	@JsonInclude(Include.ALWAYS)
	@Column(name="RATING_DATE")
	private Date ratingDate;
	
	@JsonProperty("data_admin_date")
	@JsonInclude(Include.ALWAYS)
	@Column(name="DATA_ADMIN_DATE")
	private Date dataAdminDate;
	
	@JsonProperty("last_review_date")
	@JsonInclude(Include.ALWAYS)
	@Column(name="LAST_REVIEW_DATE")
	private Date lastReviewDate;
	
	@JsonProperty("regulatory_identifier")
	@JsonInclude(Include.ALWAYS)
	@Column(name="REGULATORY_INDICATOR")
	private String regulatoryIndicator;
	
	@JsonProperty("creditwatch_outlook")
	@JsonInclude(Include.ALWAYS)
	@Column(name="CURRENT_CW_OL")
	private String currentCwOl;
	
	@JsonProperty("creditwatch_outlook_date")
	@JsonInclude(Include.ALWAYS)
	@Column(name="CURRENT_CW_OL_DATE")
	private Date currentCwOlDate;
	
	@JsonProperty("issue_program_type")
	@JsonInclude(Include.ALWAYS)
	@Column(name="ISSUE_PROGRAM_TYPE")
	private String issueProgramType;
	
	@JsonProperty("coupon_rate")
	@JsonInclude(Include.ALWAYS)
	@Column(name="COUPON_RATE")
	private String couponRate;
	
	@JsonProperty("original_principal_balance")
	@JsonInclude(Include.ALWAYS)
	@Column(name="ORIGINAL_PRINCIPAL_BALANCE")
	private String originalPrincipalBalance;
	
	@JsonProperty("currency")
	@JsonInclude(Include.ALWAYS)
	@Column(name="CURRENCY")
	private String currency;
	
	@JsonProperty("sort_order")
	@JsonInclude(Include.ALWAYS)
	@Column(name="SORT_ORDER")
	private Integer sortOrder;
	
	@JsonProperty("precedence_num")
	@JsonInclude(Include.ALWAYS)
	@Column(name="PRECEDENCE_NUM")
	private Integer precedenceNum;
	
	@JsonProperty("rating_detail_id")
	@Id
	private Long ratingDetailId;
	
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\entity\IssuesMaturitiesUSPFPub.java

package com.spglobal.ratings.ratingsdata.entity;

import java.sql.Date;

import org.hibernate.annotations.Immutable;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonProperty;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.Id;
import jakarta.persistence.IdClass;
import jakarta.persistence.Table;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;


@Entity
@Immutable
@Table(name = "VW_ISSUES_MATURITIES_USPF_PUBLIC", schema="R360_APPDATA")
@Data
@NoArgsConstructor
@AllArgsConstructor
@IdClass(IssuesMaturitiesUSPFPubId.class)
public class IssuesMaturitiesUSPFPub {
	
	@JsonProperty("instrument_id")
	@Id@Column(name="INSTRUMENT_ID")
	private Long instrumentId;
	
	@JsonProperty("rating_detail_id")
	@Id@Column(name="RATING_DETAIL_ID")
	private Long ratingDetailId;
	
	@JsonProperty("instrument_detail_id")
	@Column(name="INSTRUMENT_DETAIL_ID")
	private Long instrumentDetailId;
	
	@JsonProperty("issue_name")
	@Column(name="ISSUE_NAME")
	private String issueName;
	
	@JsonProperty("insurance_provider")
	@Column(name="INSURANCE_PROVIDER")
	private String insuranceProvider;
	
	@JsonProperty("cusip")
	@Column(name="CUSIP")
	private String cusip;
	
	@JsonProperty("maturity_date")
	@JsonFormat(pattern="MM/dd/yyyy")
	@Column(name="MATURITY_DATE")
	private Date maturityDate;
	
	@JsonProperty("rating_type_code")
	@Column(name="RATING_TYPE_CODE")
	private String ratingTypeCode;
	
	@JsonProperty("rating_type")
	@Column(name="RATING_TYPE")
	private String ratingType;

	@JsonProperty("rating")
	@Column(name="RATING")
	private String rating;
	
	@JsonProperty("rating_date")
	@JsonInclude(Include.ALWAYS)
	@Column(name="RATING_DATE")
	private Date ratingDate;
	
	@JsonProperty("data_admin_date")
	@Column(name="DATA_ADMIN_DATE")
	private Date dataAdminDate;
	
	@JsonProperty("last_review_date")
	@Column(name="LAST_REVIEW_DATE")
	private Date lastReviewDate;
	
	@JsonProperty("coupon_rate")
	@Column(name="COUPON_RATE")
	private String couponRate;
	
	@JsonProperty("creditwatch_outlook")
	@Column(name="CREDITWATCH_OUTLOOK")
	private String currentCwOl;
	
	@JsonProperty("creditwatch_outlook_date")
	@Column(name="CREDITWATCH_OUTLOOK_DATE")
	private Date currentCwOlDate;
	
	@JsonProperty("refunded")
	@Column(name="REFUNDED")
	private String refunded;

	@JsonProperty("regulatory_identifier")
	@Column(name="REGULATORY_IDENTIFIER")
	private String regulatoryIdentifier;

	@JsonProperty("action")
	@Column(name="ACTION")
	private String action;
	
	@JsonProperty("series")
	@Column(name="SERIES")
	private String series;
	
	@JsonProperty("security_Id")
	@Id@Column(name="AS_ID")
	private Long asId;
	
	@JsonIgnore
	@Column(name="DATEBEGUN")
	private String datebegun;
	
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\entity\IssuesMaturitiesUSPFPubId.java

package com.spglobal.ratings.ratingsdata.entity;

import java.io.Serializable;

import jakarta.persistence.Column;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;


@Data
@NoArgsConstructor
@AllArgsConstructor
public class IssuesMaturitiesUSPFPubId implements Serializable {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;


	@Column(name="AS_ID")
	private Long asId;
	
	@Column(name="INSTRUMENT_ID")
	private Long instrumentId;
	
	@Column(name="RATING_DETAIL_ID")
	private Long ratingDetailId;
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\entity\LanguageTranslationEntity.java

package com.spglobal.ratings.ratingsdata.entity;

import java.io.Serializable;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.Id;
import jakarta.persistence.Table;

import org.springframework.data.annotation.Immutable;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Entity
@Table(name = "FOREIGN_LANGUAGE_TRANS", schema = "R360_USER_PREF")
@Immutable
@Data
@NoArgsConstructor
@AllArgsConstructor
@JsonInclude(JsonInclude.Include.ALWAYS)
public class LanguageTranslationEntity implements Serializable {
	
	/**
	 * 
	 */
	private static final long serialVersionUID = 6978138964570474168L;

	@Id
	@Column(name = "FOREIGN_LANGUAGE_TRANS_ID")	
	private String languageTranslationId;
	
	@Column(name = "R360_APP_LANGUAGE_CD")
	private String languageCode;

	@Column(name = "ITEM_TYPE")
	private String itemType;
	
	@Column(name = "ITEM_VALUE")
	@JsonProperty("key")
	private String itemValue;

	@Column(name = "FOREIGN_LANGUAGE_VALUE")
	@JsonProperty("value")
	private String foreignLanguageValue;
	
	@Column(name = "ACTV_FLAG")
	private String activeFlag;


}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\entity\MNemonicDetailsEntity.java

package com.spglobal.ratings.ratingsdata.entity;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.Id;
import jakarta.persistence.Table;

import org.springframework.data.annotation.Immutable;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Entity
@Table(name = "VW_R360_FIN_MNEMONICS_METADATA", schema = "R360_APPDATA")
@Immutable
@Data
@NoArgsConstructor
@AllArgsConstructor
@JsonInclude(JsonInclude.Include.ALWAYS)
public class MNemonicDetailsEntity {
	
	@Id
	@JsonProperty("mnemonic")
	@Column(name = "MNEMONIC")
	private String mNemonic;

	@JsonProperty("templateName")
	@Column(name = "TEMPLATE_NAME")
	private String templateName;

	@JsonProperty("sectionName")
	@Column(name = "SECTION_NAME")
	private String sectionName;

	@JsonProperty("productCaption")
	@Column(name = "PRODUCT_CAPTION")
	private String productCaption;
	
	@JsonProperty("productCaptionDefinition")
	@Column(name = "COLUMN_DEFINITION")
	private String productCaptionDefinition;

	@JsonProperty("magnitude")
	@Column(name = "MAGNITUDE")
	private String magnitude;

	@JsonProperty("productDecimal")
	@Column(name = "PRODUCT_DECIMAL")
	private Integer productDecimal;

	@JsonProperty("sortOrder")
	@Column(name = "SORT_ORDER")
	private Integer sortOrder;

	@JsonProperty("highlightFlag")
	@Column(name = "HIGHLIGHT_FLAG")
	private String highlightFlag;

	@JsonProperty("rowSeperatorFlag")
	@Column(name = "ROW_SEPERATOR_FLAG")
	private String rowSeperatorFlag;

	@JsonProperty("colDetailMode")
	@Column(name = "COL_DETAIL_MODE")
	private Integer colDetailMode;		
	
	@JsonProperty("hiddenMnemFlag")
	@Column(name = "HIDDEN_MNEM_FLAG")
	private String hiddenMnemFlag;		

}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\entity\MnemonicMagnitudeEntity.java

package com.spglobal.ratings.ratingsdata.entity;

import java.io.Serializable;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.Id;
import jakarta.persistence.Table;

import org.springframework.data.annotation.Immutable;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Entity
@Table(name = "VW_R360_FIN_MNEMONICMAGNITUDE", schema = "R360_APPDATA")
@Immutable
@Data
@NoArgsConstructor
@AllArgsConstructor
@JsonInclude(JsonInclude.Include.ALWAYS)
public class MnemonicMagnitudeEntity implements Serializable {

	private static final long serialVersionUID = -3762336971267111741L;

	@Id
	@JsonProperty("currencyCode")
	@Column(name = "CURRENCY_CD")
	private String currencyCode;

	@JsonProperty("magnitude")
	@Column(name = "MAGNITUDE")
	private String magnitude;

	@JsonProperty("convertedMagnitude")
	@Column(name = "CONV_MAGNITUDE")
	private String convertedMagnitude;

	@JsonProperty("magnitudeConstantQuantity")
	@Column(name = "MAGNITUDE_CONSTANT_QUANTITY")
	private Integer magnitudeConstantQuantity;

}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\entity\MultimediaPodcasts.java

package com.spglobal.ratings.ratingsdata.entity;

import java.sql.Timestamp;
import java.util.Date;

import org.springframework.data.annotation.Immutable;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.Id;
import jakarta.persistence.Table;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Entity
@Table(name = "DATA_SP_PODCAST", schema = "SPDIRECT")
@Immutable
@Data
@NoArgsConstructor
@AllArgsConstructor
@JsonInclude(JsonInclude.Include.ALWAYS)
public class MultimediaPodcasts {
	
	@JsonProperty("RT_GUID")
	@Column(name="GUID")
	private String guId;
	
	@JsonProperty("RT_PUBDATE")
	@Column(name="PUBDATE")
	private String publishDate;
	
	@JsonProperty("RT_DESCRIPTION")
	@Column(name="DESCRIPTION")
	private String description;
	
	@JsonProperty("RT_URL_LINK")
	@Column(name="URL_LINK")
	private String urlLink;
	
	@JsonProperty("RT_BATCH_CNT")
	@Column(name="BATCH_CNT")
	private Integer batchCount;
	
	@JsonProperty("RT_CREATE_DATE")
	@Column(name="CREATE_DATE")
	private String createDate;
	
	@JsonProperty("RT_TITLE")
	@Column(name="TITLE")
	private String title;
	
	@JsonProperty("RT_FILE_TYPE")
	@Column(name="FILE_TYPE")
	private String fileType;
	
	@JsonProperty("RT_PODCAST_ID")
	@Id@Column(name="PODCAST_ID")
	private Long podcastId;
	
	@JsonProperty("RT_AUTHOR")
	@Column(name="AUTHOR")
	private String author;
	
	@JsonProperty("RT_DURATION")
	@Column(name="DURATION")
	private String duration;
	
	@JsonProperty("RT_CONTEXTVURL")
	@Column(name="CONTEXTVURL")
	private String contextVideoUrl;
	
	@JsonProperty("RT_REGION")
	@Column(name="REGION")
	private String region;
	
	@JsonProperty("RT_SECTOR")
	@Column(name="SECTOR")
	private String sector;	
	
	@JsonProperty("RT_SUBSECTOR")
	@Column(name="SUBSECTOR")
	private String subSector;	
	
	@JsonProperty("RT_SUMMARY")
	@Column(name="SUMMARY")
	private String summary;	
	
	@JsonProperty("RT_LANGUAGE")
	@Column(name="LANGUAGE")
	private String language;	
	
	@JsonProperty("RT_THUMBNAIL")
	@Column(name="THUMBNAIL")
	private String thumbNail;

	@JsonProperty("RT_SECTOR_ID")
	@Column(name="SECTOR_ID")
	private String sectorId;

	@JsonProperty("RT_SUBSECTOR_ID")
	@Column(name="SUBSECTOR_ID")
	private String subSectorId;

}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\entity\MultimediaSector.java

package com.spglobal.ratings.ratingsdata.entity;

import org.springframework.data.annotation.Immutable;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.Id;
import jakarta.persistence.Table;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Entity
@Table(name = "SECTOR_SUBSECTOR_TREE", schema = "SPDIRECT")
@Immutable
@Data
@NoArgsConstructor
@AllArgsConstructor
@JsonInclude(JsonInclude.Include.ALWAYS)
public class MultimediaSector {
	
	@JsonProperty("MULTIMEDIA_TREE_KEY")
	@Id@Column(name="MULTIMEDIA_TREE_KEY")
	private Integer sectorTreeKey;
	
	@JsonProperty("SECTOR_SUBSECTOR_NAME")
	@Column(name="SECTOR_SUBSECTOR_NAME")
	private String sectorSubSectorName;
	
	@JsonProperty("MULTIMEDIA_TREE_PARENT")
	@Column(name="MULTIMEDIA_TREE_PARENT")
	private String parentTreeKey;
	
	
	
	

}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\entity\PeerCurrentRatings.java

package com.spglobal.ratings.ratingsdata.entity;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.Id;
import jakarta.persistence.NamedQuery;
import jakarta.persistence.Table;

import org.springframework.data.annotation.Immutable;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonInclude.Include;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;


@Entity
@Table(name = "VW_ENTITY_CURRENT_RATING_PEERS_PVT_PUB_PIVOT", schema = "R360_APPDATA")
@Immutable
@Data
@NoArgsConstructor
@AllArgsConstructor
@NamedQuery(name = "PeerCurrentRatings.findByEntityId", query = "select e from PeerCurrentRatings e where e.entityId = ?1")
public class PeerCurrentRatings {

	@JsonProperty("action_fclong")			
	@JsonInclude(value=Include.ALWAYS)
	@Column(name = "ACTION_FCLONG")			
	private String actionFCLong;			

	@JsonProperty("action_stdlong")			
	@JsonInclude(value=Include.ALWAYS)
	@Column(name = "ACTION_STDLONG")			
	private String actionSTDLong;			

	@JsonProperty("confidential_fclong")		
	@JsonInclude(value=Include.ALWAYS)
	@Column(name = "CONFIDENTIAL_FCLONG")	
	private String confidentialFCLong;	

	@JsonProperty("confidential_stdlong")	
	@JsonInclude(value=Include.ALWAYS)
	@Column(name = "CONFIDENTIAL_STDLONG")	
	private String confidentialSTDLong;

	@JsonProperty("cw_ol_date_fclong")		
	@JsonInclude(value=Include.ALWAYS)
	@Column(name = "CW_OL_DATE_FCLONG")		
	private String cwOLDateFCLong;		

	@JsonProperty("cw_ol_date_stdlong")		
	@JsonInclude(value=Include.ALWAYS)
	@Column(name = "CW_OL_DATE_STDLONG")		
	private String cwOLDdateSTDLong;		

	@JsonInclude(value=Include.ALWAYS)
	@Column(name = "CW_OL_FCLONG")			
	@JsonProperty("cw_ol_fclong")			
	private String cwOLDfclong;			

	@JsonProperty("cw_ol_stdlong")			
	@JsonInclude(value=Include.ALWAYS)
	@Column(name = "CW_OL_STDLONG")			
	private String cwOLSTDLong;			

	@JsonProperty("entity_id")
	@Id
	@JsonInclude(value=Include.ALWAYS)
	@Column(name = "ENTITY_ID")				
	private Long entityId;				

	@JsonProperty("last_review_date_fclong")	
	@JsonInclude(value=Include.ALWAYS)
	@Column(name = "LAST_REVIEW_DATE_FCLONG")	
	private String lastReviewDateFCLong;	

	@JsonProperty("last_review_date_stdlong")
	@JsonInclude(value=Include.ALWAYS)
	@Column(name = "LAST_REVIEW_DATE_STDLONG")
	private String lastReviewDateSTDLong;

	@JsonProperty("rating_date_fclong")		
	@JsonInclude(value=Include.ALWAYS)
	@Column(name = "RATING_DATE_FCLONG")		
	private String ratingDateFCLong;		

	@JsonProperty("rating_date_stdlong")		
	@JsonInclude(value=Include.ALWAYS)
	@Column(name = "RATING_DATE_STDLONG")		
	private String ratingDateSTDLong;		

	@JsonProperty("rating_fclong")			
	@JsonInclude(value=Include.ALWAYS)
	@Column(name = "RATING_FCLONG")			
	private String ratingFCLong;			

	@JsonProperty("rating_stdlong")			
	@JsonInclude(value=Include.ALWAYS)
	@Column(name = "RATING_STDLONG")			
	private String ratingSTDLong;			

	@JsonProperty("rating_type_code_fclong")	
	@JsonInclude(value=Include.ALWAYS)
	@Column(name = "RATING_TYPE_CODE_FCLONG")
	private String ratingTypeCodeFCLong;
	
	
	@JsonProperty("rating_type_code_stdlong")
	@JsonInclude(value=Include.ALWAYS)
	@Column(name = "RATING_TYPE_CODE_STDLONG")
	private String ratingTypeCodeSTDLong;
	
	@JsonProperty("entity_legal_name")
	@JsonInclude(value=Include.ALWAYS)
	@Column(name = "ENTITY_LEGAL_NAME")
	private String entityLegalName;
	
	
	public String getActionFCLong() {
		return actionFCLong;
	}


	public void setActionFCLong(String actionFCLong) {
		this.actionFCLong = actionFCLong;
	}


	public String getActionSTDLong() {
		return actionSTDLong;
	}


	public void setActionSTDLong(String actionSTDLong) {
		this.actionSTDLong = actionSTDLong;
	}


	public String getConfidentialFCLong() {
		return confidentialFCLong;
	}


	public void setConfidentialFCLong(String confidentialFCLong) {
		this.confidentialFCLong = confidentialFCLong;
	}


	public String getConfidentialSTDLong() {
		return confidentialSTDLong;
	}


	public void setConfidentialSTDLong(String confidentialSTDLong) {
		this.confidentialSTDLong = confidentialSTDLong;
	}


	public String getCwOLDateFCLong() {
		return cwOLDateFCLong;
	}


	public void setCwOLDateFCLong(String cwOLDateFCLong) {
		this.cwOLDateFCLong = cwOLDateFCLong;
	}


	public String getCwOLDdateSTDLong() {
		return cwOLDdateSTDLong;
	}


	public void setCwOLDdateSTDLong(String cwOLDdateSTDLong) {
		this.cwOLDdateSTDLong = cwOLDdateSTDLong;
	}


	public String getCwOLDfclong() {
		return cwOLDfclong;
	}


	public void setCwOLDfclong(String cwOLDfclong) {
		this.cwOLDfclong = cwOLDfclong;
	}


	public String getCwOLSTDLong() {
		return cwOLSTDLong;
	}


	public void setCwOLSTDLong(String cwOLSTDLong) {
		this.cwOLSTDLong = cwOLSTDLong;
	}


	public Long getEntityId() {
		return entityId;
	}


	public void setEntityId(Long entityId) {
		this.entityId = entityId;
	}


	public String getLastReviewDateFCLong() {
		return lastReviewDateFCLong;
	}


	public void setLastReviewDateFCLong(String lastReviewDateFCLong) {
		this.lastReviewDateFCLong = lastReviewDateFCLong;
	}


	public String getLastReviewDateSTDLong() {
		return lastReviewDateSTDLong;
	}


	public void setLastReviewDateSTDLong(String lastReviewDateSTDLong) {
		this.lastReviewDateSTDLong = lastReviewDateSTDLong;
	}


	public String getRatingDateFCLong() {
		return ratingDateFCLong;
	}


	public void setRatingDateFCLong(String ratingDateFCLong) {
		this.ratingDateFCLong = ratingDateFCLong;
	}


	public String getRatingDateSTDLong() {
		return ratingDateSTDLong;
	}


	public void setRatingDateSTDLong(String ratingDateSTDLong) {
		this.ratingDateSTDLong = ratingDateSTDLong;
	}


	public String getRatingFCLong() {
		return ratingFCLong;
	}


	public void setRatingFCLong(String ratingFCLong) {
		this.ratingFCLong = ratingFCLong;
	}


	public String getRatingSTDLong() {
		return ratingSTDLong;
	}


	public void setRatingSTDLong(String ratingSTDLong) {
		this.ratingSTDLong = ratingSTDLong;
	}


	public String getRatingTypeCodeFCLong() {
		return ratingTypeCodeFCLong;
	}


	public void setRatingTypeCodeFCLong(String ratingTypeCodeFCLong) {
		this.ratingTypeCodeFCLong = ratingTypeCodeFCLong;
	}


	public String getRatingTypeCodeSTDLong() {
		return ratingTypeCodeSTDLong;
	}


	public void setRatingTypeCodeSTDLong(String ratingTypeCodeSTDLong) {
		this.ratingTypeCodeSTDLong = ratingTypeCodeSTDLong;
	}

	public String getEntityLegalName() {
		return entityLegalName;
	}

	public void setEntityLegalName(String entityLegalName) {
		this.entityLegalName = entityLegalName;
	}
	
	@Override
	public String toString() {
		return "Test [actionFCLong=" + actionFCLong + ", actionSTDLong=" + actionSTDLong + ", confidentialFCLong="
				+ confidentialFCLong + ", confidentialSTDLong=" + confidentialSTDLong + ", cwOLDateFCLong="
				+ cwOLDateFCLong + ", cwOLDdateSTDLong=" + cwOLDdateSTDLong + ", cwOLDfclong=" + cwOLDfclong
				+ ", cwOLSTDLong=" + cwOLSTDLong + ", entityId=" + entityId + ", lastReviewDateFCLong="
				+ lastReviewDateFCLong + ", lastReviewDateSTDLong=" + lastReviewDateSTDLong + ", ratingDateFCLong="
				+ ratingDateFCLong + ", ratingDateSTDLong=" + ratingDateSTDLong + ", ratingFCLong=" + ratingFCLong
				+ ", ratingSTDLong=" + ratingSTDLong + ", ratingTypeCodeFCLong=" + ratingTypeCodeFCLong
				+ ", ratingTypeCodeSTDLong=" + ratingTypeCodeSTDLong + " , entityLegalName=" + entityLegalName + "]";
	}
	
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\entity\PeersCurrentRatings.java

package com.spglobal.ratings.ratingsdata.entity;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.Id;
import jakarta.persistence.NamedQuery;
import jakarta.persistence.Table;

import org.springframework.data.annotation.Immutable;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonInclude.Include;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;


@Entity
@Table(name = "VW_ENTITY_RATINGS_PEERS_PUBLIC_PIVOT", schema = "R360_APPDATA")
@Immutable
@Data
@NoArgsConstructor
@AllArgsConstructor
@NamedQuery(name = "PeersCurrentRatings.findByEntityId", query = "select e from PeersCurrentRatings e where e.entityId in (:entityIds)")
public class PeersCurrentRatings {

	public PeersCurrentRatings(Long entityId) {
		super();
		this.entityId = entityId;
	}
	
	@JsonProperty("action_fclong")
	@JsonInclude(value=Include.ALWAYS)
	@Column(name = "ACTION_FCLONG")			
	private String actionFCLong;			

	@JsonProperty("action_stdlong")			
	@JsonInclude(value=Include.ALWAYS)
	@Column(name = "ACTION_STDLONG")			
	private String actionSTDLong;			

	@JsonProperty("confidential_fclong")	
	@JsonInclude(value=Include.ALWAYS)
	@Column(name = "CONFIDENTIAL_FCLONG")	
	private String confidentialFCLong;	

	@JsonProperty("confidential_stdlong")	
	@JsonInclude(value=Include.ALWAYS)
	@Column(name = "CONFIDENTIAL_STDLONG")	
	private String confidentialSTDLong;

	@JsonProperty("cw_ol_date_fclong")		
	@JsonInclude(value=Include.ALWAYS)
	@Column(name = "CW_OL_DATE_FCLONG")		
	private String cwOLDateFCLong;		

	@JsonProperty("cw_ol_date_stdlong")		
	@JsonInclude(value=Include.ALWAYS)
	@Column(name = "CW_OL_DATE_STDLONG")		
	private String cwOLDdateSTDLong;		

	@JsonInclude(value=Include.ALWAYS)
	@Column(name = "CW_OL_FCLONG")			
	@JsonProperty("cw_ol_fclong")			
	private String cwOLDfclong;			

	@JsonProperty("cw_ol_stdlong")			
	@JsonInclude(value=Include.ALWAYS)
	@Column(name = "CW_OL_STDLONG")			
	private String cwOLSTDLong;			

	@JsonProperty("entity_id")
	@Id
	@JsonInclude(value=Include.ALWAYS)
	@Column(name = "ENTITY_ID")				
	private Long entityId;				

	@JsonProperty("last_review_date_fclong")	
	@JsonInclude(value=Include.ALWAYS)
	@Column(name = "LAST_REVIEW_DATE_FCLONG")	
	private String lastReviewDateFCLong;	

	@JsonProperty("last_review_date_stdlong")
	@JsonInclude(value=Include.ALWAYS)
	@Column(name = "LAST_REVIEW_DATE_STDLONG")
	private String lastReviewDateSTDLong;

	@JsonProperty("rating_date_fclong")		
	@JsonInclude(value=Include.ALWAYS)
	@Column(name = "RATING_DATE_FCLONG")		
	private String ratingDateFCLong;		

	@JsonProperty("rating_date_stdlong")		
	@JsonInclude(value=Include.ALWAYS)
	@Column(name = "RATING_DATE_STDLONG")		
	private String ratingDateSTDLong;		

	@JsonProperty("rating_fclong")			
	@JsonInclude(value=Include.ALWAYS)
	@Column(name = "RATING_FCLONG")			
	private String ratingFCLong;			

	@JsonProperty("rating_stdlong")			
	@JsonInclude(value=Include.ALWAYS)
	@Column(name = "RATING_STDLONG")			
	private String ratingSTDLong;			

	@JsonProperty("rating_type_code_fclong")	
	@JsonInclude(value=Include.ALWAYS)
	@Column(name = "RATING_TYPE_CODE_FCLONG")
	private String ratingTypeCodeFCLong;
	
	
	@JsonProperty("rating_type_code_stdlong")
	@JsonInclude(value=Include.ALWAYS)
	@Column(name = "RATING_TYPE_CODE_STDLONG")
	private String ratingTypeCodeSTDLong;
	
	@JsonProperty("entity_legal_name")
	@JsonInclude(value=Include.ALWAYS)
	@Column(name = "ENTITY_LEGAL_NAME")
	private String entityLegalName;
	
	public String getActionFCLong() {
		return actionFCLong;
	}


	public void setActionFCLong(String actionFCLong) {
		this.actionFCLong = actionFCLong;
	}


	public String getActionSTDLong() {
		return actionSTDLong;
	}


	public void setActionSTDLong(String actionSTDLong) {
		this.actionSTDLong = actionSTDLong;
	}


	public String getConfidentialFCLong() {
		return confidentialFCLong;
	}


	public void setConfidentialFCLong(String confidentialFCLong) {
		this.confidentialFCLong = confidentialFCLong;
	}


	public String getConfidentialSTDLong() {
		return confidentialSTDLong;
	}


	public void setConfidentialSTDLong(String confidentialSTDLong) {
		this.confidentialSTDLong = confidentialSTDLong;
	}


	public String getCwOLDateFCLong() {
		return cwOLDateFCLong;
	}


	public void setCwOLDateFCLong(String cwOLDateFCLong) {
		this.cwOLDateFCLong = cwOLDateFCLong;
	}


	public String getCwOLDdateSTDLong() {
		return cwOLDdateSTDLong;
	}


	public void setCwOLDdateSTDLong(String cwOLDdateSTDLong) {
		this.cwOLDdateSTDLong = cwOLDdateSTDLong;
	}


	public String getCwOLDfclong() {
		return cwOLDfclong;
	}


	public void setCwOLDfclong(String cwOLDfclong) {
		this.cwOLDfclong = cwOLDfclong;
	}


	public String getCwOLSTDLong() {
		return cwOLSTDLong;
	}


	public void setCwOLSTDLong(String cwOLSTDLong) {
		this.cwOLSTDLong = cwOLSTDLong;
	}


	public Long getEntityId() {
		return entityId;
	}


	public void setEntityId(Long entityId) {
		this.entityId = entityId;
	}


	public String getLastReviewDateFCLong() {
		return lastReviewDateFCLong;
	}


	public void setLastReviewDateFCLong(String lastReviewDateFCLong) {
		this.lastReviewDateFCLong = lastReviewDateFCLong;
	}


	public String getLastReviewDateSTDLong() {
		return lastReviewDateSTDLong;
	}


	public void setLastReviewDateSTDLong(String lastReviewDateSTDLong) {
		this.lastReviewDateSTDLong = lastReviewDateSTDLong;
	}


	public String getRatingDateFCLong() {
		return ratingDateFCLong;
	}


	public void setRatingDateFCLong(String ratingDateFCLong) {
		this.ratingDateFCLong = ratingDateFCLong;
	}


	public String getRatingDateSTDLong() {
		return ratingDateSTDLong;
	}


	public void setRatingDateSTDLong(String ratingDateSTDLong) {
		this.ratingDateSTDLong = ratingDateSTDLong;
	}


	public String getRatingFCLong() {
		return ratingFCLong;
	}


	public void setRatingFCLong(String ratingFCLong) {
		this.ratingFCLong = ratingFCLong;
	}


	public String getRatingSTDLong() {
		return ratingSTDLong;
	}


	public void setRatingSTDLong(String ratingSTDLong) {
		this.ratingSTDLong = ratingSTDLong;
	}


	public String getRatingTypeCodeFCLong() {
		return ratingTypeCodeFCLong;
	}


	public void setRatingTypeCodeFCLong(String ratingTypeCodeFCLong) {
		this.ratingTypeCodeFCLong = ratingTypeCodeFCLong;
	}


	public String getRatingTypeCodeSTDLong() {
		return ratingTypeCodeSTDLong;
	}


	public void setRatingTypeCodeSTDLong(String ratingTypeCodeSTDLong) {
		this.ratingTypeCodeSTDLong = ratingTypeCodeSTDLong;
	}

	public String getEntityLegalName() {
		return entityLegalName;
	}

	public void setEntityLegalName(String entityLegalName) {
		this.entityLegalName = entityLegalName;
	}

	@Override
	public String toString() {
		return "Test [actionFCLong=" + actionFCLong + ", actionSTDLong=" + actionSTDLong + ", confidentialFCLong="
				+ confidentialFCLong + ", confidentialSTDLong=" + confidentialSTDLong + ", cwOLDateFCLong="
				+ cwOLDateFCLong + ", cwOLDdateSTDLong=" + cwOLDdateSTDLong + ", cwOLDfclong=" + cwOLDfclong
				+ ", cwOLSTDLong=" + cwOLSTDLong + ", entityId=" + entityId + ", lastReviewDateFCLong="
				+ lastReviewDateFCLong + ", lastReviewDateSTDLong=" + lastReviewDateSTDLong + ", ratingDateFCLong="
				+ ratingDateFCLong + ", ratingDateSTDLong=" + ratingDateSTDLong + ", ratingFCLong=" + ratingFCLong
				+ ", ratingSTDLong=" + ratingSTDLong + ", ratingTypeCodeFCLong=" + ratingTypeCodeFCLong
				+ ", ratingTypeCodeSTDLong=" + ratingTypeCodeSTDLong + " , entityLegalName=" + entityLegalName + "]";
	}
	
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\entity\PeersEntityRatings.java

package com.spglobal.ratings.ratingsdata.entity;

import java.sql.Date;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.Id;
import jakarta.persistence.IdClass;
import jakarta.persistence.NamedQuery;
import jakarta.persistence.Table;

import org.springframework.data.annotation.Immutable;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonProperty;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Entity
@Table(name = "VW_CURRENT_RATINGS_PEERS_PVT_PUB", schema = "R360_APPDATA")
@Immutable
@Data
@NoArgsConstructor
@AllArgsConstructor
@IdClass(RatingsId.class)
@NamedQuery(name = "PeersEntityRatings.findByEntityId", query = "select e from PeersEntityRatings e where e.entityId = ?1")
public class PeersEntityRatings {
	
	@JsonProperty("p_entity_id")
	@Id
	@Column(name="ENTITY_ID")
	private Long entityId;
	
	@JsonInclude(Include.ALWAYS)
	@Column(name = "ACTION")
	private String action;

	@JsonProperty("confidential_category_code")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "CONFIDENTIAL_CATEGORY_CODE")
	private String confidentialCategoryCode;

	@JsonProperty("rating")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "CURRENT_RATING_SYMBOL")
	private String currentRatingSymbol;

	@JsonProperty("data_admin_date")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "DATA_ADMIN_DATE")
	private Date dataAdminDate;

	@JsonProperty("debt_type_code")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "DEBT_TYPE_CODE")
	private String debtTypeCode;

	@JsonProperty("last_review_date")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "LAST_REVIEW_DATE")
	private Date lastReviewDate;

	@JsonProperty("creditwatch_outlook")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "LATEST_NON_AFFIRM_CW_OL")
	private String latestNonAffirmCWOL;
	
	@JsonProperty("creditwatch_outlook_date")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "LATEST_NON_AFFIRM_CW_OL_DATE")
	private Date latestNonAffirmCWOLDate;

	@JsonProperty("rating_date")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "RATING_DATE")
	private Date ratingDate;

	@JsonProperty("rating_detail_id")
	@Id
	private Long ratingDetailId;

	@JsonProperty("rating_type_code")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "RATING_TYPE_CODE")
	private String ratingTypeCode;
	
	@JsonProperty("entity_legal_name")
	@JsonInclude(value=Include.ALWAYS)
	@Column(name = "ENTITY_LEGAL_NAME")
	private String entityLegalName;

	
	public Long getEntityId() {
		return entityId;
	}

	public void setEntityId(Long entityId) {
		this.entityId = entityId;
	}

	public String getAction() {
		return action;
	}

	public void setAction(String action) {
		this.action = action;
	}

	public String getConfidentialCategoryCode() {
		return confidentialCategoryCode;
	}

	public void setConfidentialCategoryCode(String confidentialCategoryCode) {
		this.confidentialCategoryCode = confidentialCategoryCode;
	}

	public String getCurrentRatingSymbol() {
		return currentRatingSymbol;
	}

	public void setCurrentRatingSymbol(String currentRatingSymbol) {
		this.currentRatingSymbol = currentRatingSymbol;
	}

	public Date getDataAdminDate() {
		return dataAdminDate;
	}

	public void setDataAdminDate(Date dataAdminDate) {
		this.dataAdminDate = dataAdminDate;
	}

	public String getDebtTypeCode() {
		return debtTypeCode;
	}

	public void setDebtTypeCode(String debtTypeCode) {
		this.debtTypeCode = debtTypeCode;
	}

	public Date getLastReviewDate() {
		return lastReviewDate;
	}

	public void setLastReviewDate(Date lastReviewDate) {
		this.lastReviewDate = lastReviewDate;
	}

	public String getLatestNonAffirmCWOL() {
		return latestNonAffirmCWOL;
	}

	public void setLatestNonAffirmCWOL(String latestNonAffirmCWOL) {
		this.latestNonAffirmCWOL = latestNonAffirmCWOL;
	}

	public Date getLatestNonAffirmCWOLDate() {
		return latestNonAffirmCWOLDate;
	}

	public void setLatestNonAffirmCWOLDate(Date latestNonAffirmCWOLDate) {
		this.latestNonAffirmCWOLDate = latestNonAffirmCWOLDate;
	}

	public Date getRatingDate() {
		return ratingDate;
	}

	public void setRatingDate(Date ratingDate) {
		this.ratingDate = ratingDate;
	}

	public Long getRatingDetailId() {
		return ratingDetailId;
	}

	public void setRatingDetailId(Long ratingDetailId) {
		this.ratingDetailId = ratingDetailId;
	}

	public String getRatingTypeCode() {
		return ratingTypeCode;
	}

	public void setRatingTypeCode(String ratingTypeCode) {
		this.ratingTypeCode = ratingTypeCode;
	}

	public String getEntityLegalName() {
		return entityLegalName;
	}

	public void setEntityLegalName(String entityLegalName) {
		this.entityLegalName = entityLegalName;
	}

}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\entity\PeersEntityRatingsPublic.java

package com.spglobal.ratings.ratingsdata.entity;

import java.sql.Date;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.Id;
import jakarta.persistence.IdClass;
import jakarta.persistence.NamedQuery;
import jakarta.persistence.Table;

import org.springframework.data.annotation.Immutable;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonProperty;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Entity
@Table(name = "VW_ENTITY_RATINGS_PEERS_PUBLIC", schema = "R360_APPDATA")
@Immutable
@Data
@NoArgsConstructor
@AllArgsConstructor
@IdClass(RatingsId.class)
@NamedQuery(name = "PeersEntityRatingsPublic.findByEntityId", query = "select e from PeersEntityRatingsPublic e where e.entityId in (:entityIds)")
public class PeersEntityRatingsPublic {
	
	public PeersEntityRatingsPublic(Long entityId) {
		super();
		this.entityId = entityId;
	}

	
	@JsonProperty("p_entity_id")
	@Id
	@Column(name="ENTITY_ID")
	private Long entityId;
	
	@JsonInclude(Include.ALWAYS)
	@Column(name = "ACTION")
	private String action;

	@JsonProperty("confidential_category_code")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "CONFIDENTIAL_CATEGORY_CODE")
	private String confidentialCategoryCode;

	@JsonProperty("rating")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "CURRENT_RATING_SYMBOL")
	private String currentRatingSymbol;

	@JsonProperty("data_admin_date")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "DATA_ADMIN_DATE")
	private Date dataAdminDate;

	@JsonProperty("debt_type_code")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "DEBT_TYPE_CODE")
	private String debtTypeCode;

	@JsonProperty("entity_legal_name")
	@JsonInclude(value=Include.ALWAYS)
	@Column(name = "ENTITY_LEGAL_NAME")
	private String entityLegalName;
	
	@JsonProperty("last_review_date")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "LAST_REVIEW_DATE")
	private Date lastReviewDate;

	@JsonProperty("creditwatch_outlook")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "LATEST_NON_AFFIRM_CW_OL")
	private String latestNonAffirmCWOL;
	
	@JsonProperty("creditwatch_outlook_date")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "LATEST_NON_AFFIRM_CW_OL_DATE")
	private Date latestNonAffirmCWOLDate;

	@JsonProperty("rating_date")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "RATING_DATE")
	private Date ratingDate;

	@JsonProperty("rating_detail_id")
	@Id
	private Long ratingDetailId;

	@JsonProperty("rating_type_code")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "RATING_TYPE_CODE")
	private String ratingTypeCode;
	
	public Long getEntityId() {
		return entityId;
	}

	public void setEntityId(Long entityId) {
		this.entityId = entityId;
	}

	public String getAction() {
		return action;
	}

	public void setAction(String action) {
		this.action = action;
	}

	public String getConfidentialCategoryCode() {
		return confidentialCategoryCode;
	}

	public void setConfidentialCategoryCode(String confidentialCategoryCode) {
		this.confidentialCategoryCode = confidentialCategoryCode;
	}

	public String getCurrentRatingSymbol() {
		return currentRatingSymbol;
	}

	public void setCurrentRatingSymbol(String currentRatingSymbol) {
		this.currentRatingSymbol = currentRatingSymbol;
	}

	public Date getDataAdminDate() {
		return dataAdminDate;
	}

	public void setDataAdminDate(Date dataAdminDate) {
		this.dataAdminDate = dataAdminDate;
	}

	public String getDebtTypeCode() {
		return debtTypeCode;
	}

	public void setDebtTypeCode(String debtTypeCode) {
		this.debtTypeCode = debtTypeCode;
	}

	public Date getLastReviewDate() {
		return lastReviewDate;
	}

	public void setLastReviewDate(Date lastReviewDate) {
		this.lastReviewDate = lastReviewDate;
	}

	public String getLatestNonAffirmCWOL() {
		return latestNonAffirmCWOL;
	}

	public void setLatestNonAffirmCWOL(String latestNonAffirmCWOL) {
		this.latestNonAffirmCWOL = latestNonAffirmCWOL;
	}

	public Date getLatestNonAffirmCWOLDate() {
		return latestNonAffirmCWOLDate;
	}

	public void setLatestNonAffirmCWOLDate(Date latestNonAffirmCWOLDate) {
		this.latestNonAffirmCWOLDate = latestNonAffirmCWOLDate;
	}

	public Date getRatingDate() {
		return ratingDate;
	}

	public void setRatingDate(Date ratingDate) {
		this.ratingDate = ratingDate;
	}

	public Long getRatingDetailId() {
		return ratingDetailId;
	}

	public void setRatingDetailId(Long ratingDetailId) {
		this.ratingDetailId = ratingDetailId;
	}

	public String getRatingTypeCode() {
		return ratingTypeCode;
	}

	public void setRatingTypeCode(String ratingTypeCode) {
		this.ratingTypeCode = ratingTypeCode;
	}

	public String getEntityLegalName() {
		return entityLegalName;
	}

	public void setEntityLegalName(String entityLegalName) {
		this.entityLegalName = entityLegalName;
	}
	
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\entity\PeerSuppliersPortfolioContents.java

package com.spglobal.ratings.ratingsdata.entity;

import java.io.Serializable;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.Id;
import jakarta.persistence.Table;

import org.springframework.data.annotation.Immutable;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonProperty;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Entity
@Table(name = "vw_peers_portfolio_contents", schema = "R360_APPDATA")
@Immutable
@Data
@NoArgsConstructor
@AllArgsConstructor
public class PeerSuppliersPortfolioContents implements Serializable {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	
	@Id
	@JsonProperty("entity_id")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "ENTITY_ID")
	private Long entityId;

	@JsonProperty("key_instn_id")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "KEY_INSTN_ID")
	private String keyInstnId;

	@JsonProperty("capiq_id")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "CAPIQ_ID")
	private String capiqId;

	@JsonProperty("entity_name")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "ENTITY_NAME")
	private String entityName;

	@JsonProperty("state_name")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "STATE_NAME")
	private String stateName;

	@JsonProperty("country_name")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "COUNTRY_NAME")
	private String countryname;

	@JsonProperty("rating")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "RATING")
	private String rating;

	@JsonProperty("creditwatch_outlook")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "CREDITWATCH_OUTLOOK")
	private String creditWatchOutlook;

	@JsonProperty("primary_sector_code")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "PRIMARY_SECTOR_CODE")
	private String primarySectorCode;

	@JsonProperty("primary_sub_sector_code")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "PRIMARY_SUB_SECTOR_CODE")
	private String primarySubSectorCode;

	@JsonProperty("active_rating_ind")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "ACTIVE_RATING_IND")
	private char activeRatingInd;

	@JsonProperty("financials_available")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "FINANCIALS_AVAILABLE")
	private char financialsAvailable;
	
	@JsonProperty("industry")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "INDUSTRY")
	private String industry;

}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\entity\PeriodDetailsEntity.java

package com.spglobal.ratings.ratingsdata.entity;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.Id;
import jakarta.persistence.Table;

import org.springframework.data.annotation.Immutable;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Entity
@Table(name = "VW_R360_FIN_PERIODS_RANK", schema = "R360_APPDATA")
@Immutable
@Data
@NoArgsConstructor
@AllArgsConstructor
@JsonInclude(JsonInclude.Include.ALWAYS)
public class PeriodDetailsEntity {
	
	@Id
	@JsonProperty("finPeriodId")
	@Column(name = "FIN_PERIOD_ID")
	private String finPeriodId;

	@JsonProperty("RN")
	@Column(name = "RN")
	private Long rn;
	
	@JsonProperty("finEntityId")
	@Column(name = "FIN_ENTITY_ID")
	private String finEntityId;

	@JsonProperty("fiscalYear")
	@Column(name = "FISCAL_YEAR")
	private String fiscalYear;
	
	@JsonProperty("periodTypeCd")
	@Column(name = "PERIOD_TYPE_CD")
	private String periodTypeCd;

	@JsonProperty("periodTypeName")
	@Column(name = "PERIOD_TYPE_NAME")
	private String periodTypeName;

	@JsonProperty("coreId")
	@Column(name = "CORE_ID")
	private Long coreId;
	
	@JsonProperty("dropDownValues")
	@Column(name = "FISCALYEAR")
	private String fiscalyearDropDownValues;

}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\entity\RatingArticles.java

package com.spglobal.ratings.ratingsdata.entity;

import java.sql.Timestamp;

import jakarta.persistence.Column;
import jakarta.persistence.Id;
import jakarta.persistence.MappedSuperclass;

import org.springframework.data.annotation.Immutable;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.spglobal.ratings.ratingsdata.util.TimestampSerializer;

import lombok.Data;

@Data
@Immutable
@MappedSuperclass
public class RatingArticles {

	@Id
	@JsonProperty("article_id")
	@Column(name = "ARTICLE_ID")
	private Long articleId;

	@JsonProperty("core_id")
	@Column(name = "ENTITY_ID")
	private Long entityId;

	@JsonProperty("abstract_data")
	@Column(name = "ABSTRACT")
	private String abstract_data;

	@JsonProperty("article_date")
	@JsonSerialize(using = TimestampSerializer.class)
	@Column(name = "ARTICLE_DATE")
	private Timestamp articleDate;

	@JsonProperty("article_title")
	@Column(name = "TITLE")
	private String articleTitle;

	@JsonProperty("article_author")
	@Column(name = "AUTHOR")
	private String fullName;
	
	@JsonProperty("article_type_id")
	@Column(name = "ARTICLE_TYPE_ID")
	private Long articleTypeId;
	
	@JsonProperty("article_type")
	@Column(name = "ARTICLE_TYPE")
	private String articleType;

}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\entity\RatingArticlesCNPublic.java

package com.spglobal.ratings.ratingsdata.entity;

import jakarta.persistence.Entity;
import jakarta.persistence.Table;

@Entity(name = "RatingArticlesCNPublic")
@Table(name = "VW_RATING_ARTICLES_CN", schema = "R360_APPDATA")
public class RatingArticlesCNPublic extends RatingArticles {

}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\entity\RatingArticlesPeer.java

package com.spglobal.ratings.ratingsdata.entity;

import java.sql.Timestamp;

import jakarta.persistence.Column;
import jakarta.persistence.EmbeddedId;
import jakarta.persistence.Id;
import jakarta.persistence.IdClass;
import jakarta.persistence.MappedSuperclass;

import org.springframework.data.annotation.Immutable;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.spglobal.ratings.ratingsdata.util.TimestampSerializer;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@Immutable
@MappedSuperclass
@IdClass(RatingArticlesPeerPK.class)
@AllArgsConstructor
@NoArgsConstructor
public class RatingArticlesPeer {

	@Id
	@JsonProperty("article_id")
	@Column(name = "ARTICLE_ID")
	private Long articleId;
	
	@Id
	@JsonProperty("core_id")
	@Column(name = "ENTITY_ID")
	private Long entityId;
	
	@JsonProperty("entity_name")
	@Column(name = "ENTITY_NAME")
	private String entityName;

	@JsonProperty("article_date")
	@JsonSerialize(using = TimestampSerializer.class)
	@Column(name = "ARTICLE_DATE")
	private Timestamp articleDate;

	@JsonProperty("article_title")
	@Column(name = "TITLE")
	private String articleTitle;

	@JsonProperty("article_author")
	@Column(name = "AUTHOR")
	private String fullName;
	
	@JsonProperty("article_type_id")
	@Column(name = "ARTICLE_TYPE_ID")
	private Long articleTypeId;
	
	@JsonProperty("article_type")
	@Column(name = "ARTICLE_TYPE")
	private String articleType;
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\entity\RatingArticlesPeerCNPublic.java

package com.spglobal.ratings.ratingsdata.entity;

import jakarta.persistence.Entity;
import jakarta.persistence.Table;

@Entity(name = "RatingArticlesPeerCNPublic")
@Table(name = "VW_RATING_ARTICLES_CN_PEERS", schema = "R360_APPDATA")
public class RatingArticlesPeerCNPublic extends RatingArticlesPeer {

}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\entity\RatingArticlesPeerPK.java

package com.spglobal.ratings.ratingsdata.entity;

import java.io.Serializable;
import java.sql.Timestamp;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.NoArgsConstructor;
@AllArgsConstructor
@NoArgsConstructor
@EqualsAndHashCode

public class RatingArticlesPeerPK implements Serializable {
	private Long articleId;

	private Long entityId;

}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\entity\RatingArticlesPeerPublic.java

package com.spglobal.ratings.ratingsdata.entity;

import jakarta.persistence.Entity;
import jakarta.persistence.Table;

@Entity(name = "RatingArticlesPeerPublic")
@Table(name = "VW_RATING_ARTICLES_PEERS", schema = "R360_APPDATA")
public class RatingArticlesPeerPublic extends RatingArticlesPeer {

}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\entity\RatingArticlesPublic.java

package com.spglobal.ratings.ratingsdata.entity;

import jakarta.persistence.Entity;
import jakarta.persistence.Table;

@Entity(name = "RatingArticlesPublic")
@Table(name = "VW_RATING_ARTICLES", schema = "R360_APPDATA")
public class RatingArticlesPublic extends RatingArticles {

}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\entity\RatingArticlesPublicPvt.java

package com.spglobal.ratings.ratingsdata.entity;

import java.sql.Timestamp;

import jakarta.persistence.Column;
import jakarta.persistence.Id;
import jakarta.persistence.MappedSuperclass;

import org.springframework.data.annotation.Immutable;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.spglobal.ratings.ratingsdata.util.TimestampSerializer;

import lombok.Data;

@Data
@Immutable
@MappedSuperclass
public class RatingArticlesPublicPvt {
	
	@Id
	@JsonProperty("article_id")
	@Column(name = "ARTICLE_ID")
	private String articleId;

	@JsonProperty("core_id")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "ENTITY_ID")
	private String entityId;

	@JsonProperty("article_date")
	@JsonInclude(Include.ALWAYS)
	@JsonSerialize(using = TimestampSerializer.class)
	@Column(name = "ARTICLE_DATE")
	private Timestamp articleDate;

	@JsonProperty("article_title")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "TITLE")
	private String articleTitle;

	@JsonProperty("article_author")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "AUTHOR")
	private String fullName;
	
	@JsonProperty("article_type_id")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "ARTICLE_TYPE_ID")
	private Long articleTypeId;
	
	@JsonProperty("article_type")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "ARTICLE_TYPE")
	private String articleType;
	
	@JsonProperty("confidentiality_ind")
	@JsonInclude(Include.ALWAYS)
	@Column(name="CONFIDENTIALITY_IND")
	private String confidentialityInd;
	
	@JsonProperty("confidential_category_code")
	@JsonInclude(Include.ALWAYS)
	@Column(name="confidential_category_code")
	private String confidentialCategoryCode;

}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\entity\RatingArticlesPublicPvtConf.java

package com.spglobal.ratings.ratingsdata.entity;

import jakarta.persistence.Entity;
import jakarta.persistence.Table;

@Entity(name = "RatingArticlesPublicPvtConf")
@Table(name = "VW_RATING_ARTICLES_PUBLIC_PVT", schema = "R360_APPDATA")
public class RatingArticlesPublicPvtConf extends RatingArticlesPublicPvt {

}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\entity\RatingArticlesPublicPvtConfCN.java

package com.spglobal.ratings.ratingsdata.entity;

import jakarta.persistence.Entity;
import jakarta.persistence.Table;

@Entity(name = "RatingArticlesPublicPvtConfCN")
@Table(name = "VW_RATING_ARTICLES_PUBLIC_PVT_CN", schema = "R360_APPDATA")
public class RatingArticlesPublicPvtConfCN extends RatingArticlesPublicPvt{

}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\entity\RatingArticlesPublicPvtConfCNPeers.java

package com.spglobal.ratings.ratingsdata.entity;

import jakarta.persistence.Entity;
import jakarta.persistence.Table;

@Entity(name = "RatingArticlesPublicPvtConfCNPeers")
@Table(name = "VW_RATING_ARTICLES_PUBLIC_PVT_CN_PEERS", schema = "R360_APPDATA")
public class RatingArticlesPublicPvtConfCNPeers extends RatingArticlesPublicPvtPeers {

}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\entity\RatingArticlesPublicPvtConfPeers.java

package com.spglobal.ratings.ratingsdata.entity;

import jakarta.persistence.Entity;
import jakarta.persistence.Table;

@Entity(name = "RatingArticlesPublicPvtConfPeers")
@Table(name = "VW_RATING_ARTICLES_PUBLIC_PVT_PEERS", schema = "R360_APPDATA")
public class RatingArticlesPublicPvtConfPeers extends RatingArticlesPublicPvtPeers {

}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\entity\RatingArticlesPublicPvtPeers.java

package com.spglobal.ratings.ratingsdata.entity;

import java.sql.Timestamp;

import jakarta.persistence.Column;
import jakarta.persistence.Id;
import jakarta.persistence.IdClass;
import jakarta.persistence.MappedSuperclass;

import org.springframework.data.annotation.Immutable;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.spglobal.ratings.ratingsdata.util.TimestampSerializer;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@Immutable
@MappedSuperclass
@IdClass(RatingArticlesPublicPvtPeersId.class)
@AllArgsConstructor
@NoArgsConstructor
public class RatingArticlesPublicPvtPeers {
	
	@JsonProperty("core_id")
	@Id
	private Long entityId;
	
	@JsonProperty("entity_name")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "ENTITY_NAME")
	private String entityName;
	
	@JsonProperty("article_id")
	@Id
	private String articleId;
	
	@JsonProperty("article_title")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "TITLE")
	private String title;
	
	@JsonProperty("article_type")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "ARTICLE_TYPE")
	private String articleType;
	
	@JsonProperty("article_date")
	@JsonInclude(Include.ALWAYS)
	@JsonSerialize(using = TimestampSerializer.class)
	@Column(name = "ARTICLE_DATE")
	private Timestamp articleDate;
	
	@JsonProperty("article_author")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "AUTHOR")
	private String fullName;
	
	@JsonProperty("article_type_id")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "ARTICLE_TYPE_ID")
	private Long articleTypeId;
	
	@JsonProperty("confidentiality_ind")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "CONFIDENTIALITY_IND")
	private String confidentialityInd;
	
	@JsonProperty("confidential_category_code")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "CONFIDENTIAL_CATEGORY_CODE")
	private String confidentialCategoryCode;

}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\entity\RatingArticlesPublicPvtPeersId.java

package com.spglobal.ratings.ratingsdata.entity;

import java.io.Serializable;

import jakarta.persistence.Column;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.NoArgsConstructor;

@Data
@AllArgsConstructor
@NoArgsConstructor
@EqualsAndHashCode
public class RatingArticlesPublicPvtPeersId implements Serializable {
	
	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	
	@Column(name = "ENTITY_ID")
	private Long entityId;
	
	@Column(name = "ARTICLE_ID")
	private String articleId;

}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\entity\RatingArticleTypes.java

package com.spglobal.ratings.ratingsdata.entity;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.Id;
import jakarta.persistence.Table;

import org.springframework.data.annotation.Immutable;

import com.fasterxml.jackson.annotation.JsonProperty;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@NoArgsConstructor
@AllArgsConstructor
@Immutable
@Entity(name = "RatingArticleTypes")
@Table(name = "CRARTICLE_TYPES", schema = "R360_APPDATA")
public class RatingArticleTypes {

	@Id
	@JsonProperty("article_type_id")
	@Column(name = "CRARTICLE_TYPE_ID")
	private Long articleTypeId;

	@JsonProperty("article_type")
	@Column(name = "CRARTICLE_TYPE")
	private String articleType;

}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\entity\RatingCriteriaArticles.java

package com.spglobal.ratings.ratingsdata.entity;

import java.sql.Timestamp;

import jakarta.persistence.Column;
import jakarta.persistence.Id;
import jakarta.persistence.MappedSuperclass;

import org.springframework.data.annotation.Immutable;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.spglobal.ratings.ratingsdata.util.TimestampSerializer;

import lombok.Data;

@Data
@Immutable
@MappedSuperclass
public class RatingCriteriaArticles {

	@JsonProperty("rating_detail_id")
	@Column(name = "RATING_DETAIL_ID")
	private Long ratingDetailId;

	@JsonProperty("source_rating_id")
	@Column(name = "SOURCE_RATING_ID")
	private Long sourceRatingId;

	@Id
	@JsonProperty("criteria_article_id")
	@Column(name = "CRITERIA_ARTICLE_ID")
	private Long criteriaArticleId;

	@JsonProperty("article_date")
	@JsonSerialize(using = TimestampSerializer.class)
	@Column(name = "ARTICLE_DATE")
	private Timestamp articleDate;

	@JsonProperty("preferred_title")
	@Column(name = "PREFERRED_TITLE")
	private String preferredTitle;

	@JsonProperty("last_name")
	@Column(name = "LAST_NAME")
	private String lastName;

	@JsonProperty("first_name")
	@Column(name = "FIRST_NAME")
	private String firstName;

	@JsonProperty("full_name")
	@Column(name = "FULL_NAME")
	private String fullName;

}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\entity\RatingCriteriaArticlesPrivate.java

package com.spglobal.ratings.ratingsdata.entity;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.Table;

import com.fasterxml.jackson.annotation.JsonProperty;

import lombok.Getter;
import lombok.Setter;

@Setter
@Getter
@Entity(name = "RatingCriteriaArticlesPrivate")
@Table(name = "VW_RATING_CRITERIA_ARTICLES_PVT", schema = "R360_APPDATA")
public class RatingCriteriaArticlesPrivate extends RatingCriteriaArticles {

	@JsonProperty("pcr_region")
	@Column(name = "PCR_REGION")
	private String pcrRegion;
	
	@JsonProperty("source_object_id")
	@Column(name = "SOURCE_OBJECT_ID")
	private Long sourceObjectId;
	
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\entity\RatingCriteriaArticlesPublic.java

package com.spglobal.ratings.ratingsdata.entity;

import java.io.Serializable;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.Id;
import jakarta.persistence.IdClass;
import jakarta.persistence.Table;

import com.fasterxml.jackson.annotation.JsonProperty;

import lombok.Data;
import lombok.Getter;
import lombok.Setter;

@Setter
@Getter
@Entity(name = "RatingCriteriaArticlesPublic")
@IdClass(value = RatingCriteriaArticlesId.class)
@Table(name = "VW_RATING_CRITERIA_ARTICLES_PUBLIC", schema = "R360_APPDATA")
public class RatingCriteriaArticlesPublic extends RatingCriteriaArticles {

	@Id
	@JsonProperty("pcr_region")
	@Column(name = "PCR_REGION")
	private String pcrRegion;
	
}

@Data
class RatingCriteriaArticlesId implements Serializable {
	
	private static final long serialVersionUID = 2964081497400314175L;
	private String pcrRegion;
	private Long criteriaArticleId;
	
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\entity\RatingDetails.java

package com.spglobal.ratings.ratingsdata.entity;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.Id;
import jakarta.persistence.Table;

@Entity
@Table(name = "RATING_DETAILS", schema="FGR_PRIME")
public class RatingDetails {
	
	@Id
	@Column(name="RATING_DETAIL_ID")
	private Long ratingDetailId;
	
	@Column(name="RATING_ID")
	private Long ratingId;

	public Long getRatingDetailId() {
		return ratingDetailId;
	}

	public void setRatingDetailId(Long ratingDetailId) {
		this.ratingDetailId = ratingDetailId;
	}

	public Long getRatingId() {
		return ratingId;
	}

	public void setRatingId(Long ratingId) {
		this.ratingId = ratingId;
	}
	
}





C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\entity\RatingDistGeoEntity.java

package com.spglobal.ratings.ratingsdata.entity;


import com.fasterxml.jackson.annotation.JsonInclude;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.Id;
import jakarta.persistence.IdClass;
import jakarta.persistence.Table;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;
import org.springframework.data.annotation.Immutable;

@Entity
@Table(name = "VW_RATING_DIST_GEO", schema = "R360_APPDATA")
@Immutable
@Data
@NoArgsConstructor
@AllArgsConstructor
@JsonInclude(JsonInclude.Include.ALWAYS)
@IdClass(RatingDistGeoEntity.class)
public class RatingDistGeoEntity {

    @Id
    @Column(name = "REGION_CODE")
    private String regionCode;

    @Column(name = "REGION")
    private String region;
    
    @Id
    @Column(name = "COUNTRY_CODE")
    private String countryCode;

    @Column(name = "COUNTRY_NAME")
    private String countryName;

    @Column(name = "EMERGING_FLAG")
    private String emergingFlag;

}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\entity\RatingDistICRTotalsEntity.java

package com.spglobal.ratings.ratingsdata.entity;

import java.util.List;

import com.fasterxml.jackson.annotation.JsonInclude;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.Id;
import jakarta.persistence.Table;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;
import org.springframework.data.annotation.Immutable;

@Entity
@Table(name = "RATING_DIST_FILTERED", schema = "R360_APPDATA")
@Immutable
@Data
@NoArgsConstructor
@AllArgsConstructor
@JsonInclude(JsonInclude.Include.ALWAYS)
public class RatingDistICRTotalsEntity {

    @Id
    @Column(name = "GSECTOR")
    private String gSector;

    @Column(name = "SECTOR_DESCRIPTION")
    private String sectorDescription;

    @Column(name = "AAA")
    private Integer  aaa;

    @Column(name = "AA_P")
    private  Integer aa_p;

    @Column(name = "AA")
    private  Integer aa;

    @Column(name = "AA_M")
    private  Integer aa_m;

    @Column(name = "A_P")
    private  Integer a_p;

    @Column(name = "A")
    private  Integer a;

    @Column(name = "A_M")
    private  Integer a_m;

    @Column(name = "BBB_P")
    private  Integer bbb_p;

    @Column(name = "BBB")
    private  Integer bbb;

    @Column(name = "BBB_M")
    private  Integer bbb_m;

    @Column(name = "BB_P")
    private  Integer bb_p;

    @Column(name = "BB")
    private  Integer bb;

    @Column(name = "BB_M")
    private  Integer bb_m;

    @Column(name = "B_P")
    private  Integer b_p;

    @Column(name = "B")
    private  Integer b;

    @Column(name = "B_M")
    private  Integer b_m;

    @Column(name = "CCC_P")
    private  Integer ccc_p;

    @Column(name = "CCC")
    private  Integer ccc;

    @Column(name = "CCC_M")
    private  Integer ccc_m;

    @Column(name = "CC")
    private  Integer cc;

    @Column(name = "C")
    private  Integer c;

    @Column(name = "SD")
    private  Integer sd;

    @Column(name = "D")
    private  Integer d;
    
    @Column(name = "TOTAL")
    private  Integer total;
    
    private void adjustTotal (Integer val) {
		if (val!=null) {
			 total = Integer.valueOf (total.intValue() - val.intValue());
		}   	
    }
    
    public void setNA(List<String> symbolList) {
    	for (String s: symbolList) {
    		if (s.equals("AAA")) {

    			adjustTotal (aaa);
    			aaa=-1;
    		}
    		else if (s.equals("AA+")) {
    			adjustTotal (aa_p);
    			aa_p=-1;
    		}
    		else if (s.equals("AA")) {
    			adjustTotal (aa);
    			aa=-1;
    		}
    		else if (s.equals("AA-")) {
    			adjustTotal (aa_m);
    			aa_m=-1;
    		}
    		else if (s.equals("A+")) {
    			adjustTotal (a_p);
    			a_p=-1;
    		}
    		else if (s.equals("A")) {
    			adjustTotal (a);
    			a=-1;		
    		}
    		else if (s.equals("A-")) {
    			adjustTotal (a_m);   			
    			a_m=-1;
    		}
    		else if (s.equals("BBB+")) {
    			adjustTotal (bbb_p);       			
    			bbb_p=-1; 
    		}
    		else if (s.equals("BBB")) {
    			adjustTotal (bbb);   
    			bbb=-1;
    		}
    		else if (s.equals("BBB-")) {
    			adjustTotal (bbb_m);      			
    			bbb_m=-1;
    		}
    		else if (s.equals("BB+")) {
    			adjustTotal (bb_p);      			
    			bb_p=-1;
    		}
    		else if (s.equals("BB")) {
    			adjustTotal (bb);       			
    			bb=-1;
    		}
    		else if (s.equals("BB-")) {
    			adjustTotal (bb_m);   
    			bb_m=-1;
    		}
    		else if (s.equals("B+")) {
    			adjustTotal (b_p);   
    			b_p=-1;
    		}
    		else if (s.equals("B")) {
    			adjustTotal (b);   
    			b=-1;
    		}
    		else if (s.equals("B-")) {
    			adjustTotal (b_m);   
    			b_m=-1;
    		}
    		else if (s.equals("CCC+")) {
    			adjustTotal (ccc_p);   
    			ccc_p=-1;
    		}
    		else if (s.equals("CCC")) {
    			adjustTotal (ccc);   
    			ccc=-1;
    		}
    		else if (s.equals("CCC-")) {
    			adjustTotal (ccc_m);   
    			ccc_m=-1;
    		}
    		else if (s.equals("CC")) {
    			adjustTotal (cc);   
    			cc=-1;
    		}
    		else if (s.equals("C")) {
    			adjustTotal (c);   
    			c=-1;
    		}
    		else if (s.equals("SD")) {
    			adjustTotal (sd);   
    			sd=-1;
    		}
    		else if (s.equals("D")) {
    			adjustTotal (d);   
    			d=-1;
    		}
    	}
    }
    
    
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\entity\RatingDistIndustryEntity.java

package com.spglobal.ratings.ratingsdata.entity;


import com.fasterxml.jackson.annotation.JsonInclude;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.Id;
import jakarta.persistence.Table;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;
import org.springframework.data.annotation.Immutable;

@Entity
@Table(name = "VW_RATING_DIST_INDUSTRY", schema = "R360_APPDATA")
@Immutable
@Data
@NoArgsConstructor
@AllArgsConstructor
@JsonInclude(JsonInclude.Include.ALWAYS)
public class RatingDistIndustryEntity {

    @Id
    @Column(name = "INDUSTRY_CODE")
    private String industryCode;

    @Column(name = "INDUSTRY_NAME")
    private String industryName;
    
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\entity\RatingDistRatingCodesEntity.java

package com.spglobal.ratings.ratingsdata.entity;


import com.fasterxml.jackson.annotation.JsonInclude;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.Id;
import jakarta.persistence.Table;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;
import org.springframework.data.annotation.Immutable;

@Entity
@Table(name = "VW_RATING_DIST_RATING_CODES ", schema = "R360_APPDATA")
@Immutable
@Data
@NoArgsConstructor
@AllArgsConstructor
@JsonInclude(JsonInclude.Include.ALWAYS)
public class RatingDistRatingCodesEntity {

	@Id
    @Column(name = "SOURCE_SORT_ORDER")
    private Long sourceSortOrder;

    @Column(name = "RATING_SYMBOL")
    private String ratingsSymbol;
    
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\entity\RatingHistoryLastTenYrs.java


package com.spglobal.ratings.ratingsdata.entity;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.Id;
import jakarta.persistence.IdClass;
import jakarta.persistence.NamedQuery;
import jakarta.persistence.Table;

import org.springframework.data.annotation.Immutable;

import com.fasterxml.jackson.annotation.JsonProperty;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;


@Entity
@Table(name = "VW_ENTITY_RATINGS_HISTORY_LAST_10YRS", schema = "R360_APPDATA")
@Immutable
@Data
@NoArgsConstructor
@AllArgsConstructor
@IdClass(RatingsId.class)
@NamedQuery(name = "RatingHistoryLastTenYrs.findByEntityId", query = "select e from RatingHistoryLastTenYrs e where e.entityId = ?1")
public class RatingHistoryLastTenYrs {

	@JsonProperty("filename_DataPointvalue")
	@Column(name = "CURRENT_RATING_SYMBOL")
	private String currentRatingSymbol;

	@JsonProperty("debt_type_code")
	@Column(name = "DEBT_TYPE_CODE")
	private String debtTypeCode;

    @JsonProperty("debt_type_desc")
	@Column(name = "DEBT_TYPE_DESC")
	private String debtTypeDesc;

	@JsonProperty("p_entity_id")
	@Id
	@Column(name="ENTITY_ID")
	private Long entityId;

	@JsonProperty("Abbreviation")
	@Column(name = "ENTITY_NAME")
	private String entityName;

	@JsonProperty("filename_DataPointDate")
	@Column(name = "RATING_DATE")
	private String ratingDate;

	@JsonProperty("rating_detail_id")
	@Column(name="RATING_DETAIL_ID")
	private Long ratingDetailId;
	
	
	@JsonProperty("ratingtype")
	@Column(name = "RATING_TYPE_CODE")
	private String ratingTypeCode;

	
	@JsonProperty("rating_type_desc")
	@Column(name = "RATING_TYPE_DESC")
	private String ratingTypeDesc;


	@JsonProperty("rating_type_sort_order")
	@Column(name = "RATING_TYPE_SORTORDER")
	private Long ratingTypeSortorder;

	
	@JsonProperty("confidentiality_ind")
	@Column(name = "CONFIDENTIALITY_IND")
	private String confidentialityInd;
	
	@JsonProperty("confidential_category_code")
	@Column(name = "CONFIDENTIAL_CATEGORY_CODE")
	private String confidentialCategoryCode;
	
	@JsonProperty("confidential_category_desc")
	@Column(name = "CONFIDENTIAL_CATEGORY_DESC")
	private String confidentialCategoryDesc;
	
	public String getCurrentRatingSymbol() {
		return currentRatingSymbol;
	}


	public void setCurrentRatingSymbol(String currentRatingSymbol) {
		this.currentRatingSymbol = currentRatingSymbol;
	}


	public String getDebtTypeCode() {
		return debtTypeCode;
	}


	public void setDebtTypeCode(String debtTypeCode) {
		this.debtTypeCode = debtTypeCode;
	}


	public String getDebtTypeDesc() {
		return debtTypeDesc;
	}


	public void setDebtTypeDesc(String debtTypeDesc) {
		this.debtTypeDesc = debtTypeDesc;
	}


	public Long getEntityId() {
		return entityId;
	}


	public void setEntityId(Long entityId) {
		this.entityId = entityId;
	}


	public String getEntityName() {
		return entityName;
	}


	public void setEntityName(String entityName) {
		this.entityName = entityName;
	}


	public String getRatingDate() {
		return ratingDate;
	}


	public void setRatingDate(String ratingDate) {
		this.ratingDate = ratingDate;
	}


	public Long getRatingDetailId() {
		return ratingDetailId;
	}


	public void setRatingDetailId(Long ratingDetailId) {
		this.ratingDetailId = ratingDetailId;
	}


	public String getRatingTypeCode() {
		return ratingTypeCode;
	}


	public void setRatingTypeCode(String ratingTypeCode) {
		this.ratingTypeCode = ratingTypeCode;
	}


	public String getRatingTypeDesc() {
		return ratingTypeDesc;
	}


	public void setRatingTypeDesc(String ratingTypeDesc) {
		this.ratingTypeDesc = ratingTypeDesc;
	}


	public Long getRatingTypeSortorder() {
		return ratingTypeSortorder;
	}


	public void setRatingTypeSortorder(Long ratingTypeSortorder) {
		this.ratingTypeSortorder = ratingTypeSortorder;
	}

	public String getConfidentialCategoryCode() {
		return confidentialCategoryCode;
	}

	public void setConfidentialCategoryCode(String confidentialCategoryCode) {
		this.confidentialCategoryCode = confidentialCategoryCode;
	}

	public String getConfidentialCategoryDesc() {
		return confidentialCategoryDesc;
	}

	public void setConfidentialCategoryDesc(String confidentialCategoryDesc) {
		this.confidentialCategoryDesc = confidentialCategoryDesc;
	}

	@Override
	public String toString() {
		return "RatingHistoryLastTenYrsPublic [currentRatingSymbol=" + currentRatingSymbol + ", debtTypeCode="
				+ debtTypeCode + ", debtTypeDesc=" + debtTypeDesc + ", entityId=" + entityId + ", entityName="
				+ entityName + ", ratingDate=" + ratingDate + ", ratingDetailId=" + ratingDetailId + ", ratingTypeCode="
				+ ratingTypeCode + ", ratingTypeDesc=" + ratingTypeDesc + ", ratingTypeSortorder=" + ratingTypeSortorder
				+ ", confidentialCategoryCode=" + confidentialCategoryCode 
				+ ", confidentialCategoryDesc=" + confidentialCategoryDesc + "]";

	}
	
		
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\entity\RatingHistoryLastTenYrsPublic.java


package com.spglobal.ratings.ratingsdata.entity;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.Id;
import jakarta.persistence.IdClass;
import jakarta.persistence.NamedQuery;
import jakarta.persistence.Table;

import org.springframework.data.annotation.Immutable;

import com.fasterxml.jackson.annotation.JsonProperty;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;


@Entity
@Table(name = "VW_ENTITY_RATINGS_HISTORY_LAST_10YRS_PUBLIC", schema = "R360_APPDATA")
@Immutable
@Data
@NoArgsConstructor
@AllArgsConstructor
@IdClass(RatingsId.class)
@NamedQuery(name = "RatingHistoryLastTenYrsPublic.findByEntityId", query = "select e from RatingHistoryLastTenYrsPublic e where e.entityId in (:entityIds) ORDER BY e.ratingDate ASC")
public class RatingHistoryLastTenYrsPublic {

	public RatingHistoryLastTenYrsPublic(Long entityId) {
		super();
		this.entityId = entityId;
	}
	
	@JsonProperty("filename_DataPointvalue")
	@Column(name = "CURRENT_RATING_SYMBOL")
	private String currentRatingSymbol;

	@JsonProperty("debt_type_code")
	@Column(name = "DEBT_TYPE_CODE")
	private String debtTypeCode;

    @JsonProperty("debt_type_desc")
	@Column(name = "DEBT_TYPE_DESC")
	private String debtTypeDesc;

	@JsonProperty("p_entity_id")
	@Id
	@Column(name="ENTITY_ID")
	private Long entityId;

	@JsonProperty("Abbreviation")
	@Column(name = "ENTITY_NAME")
	private String entityName;

	@JsonProperty("filename_DataPointDate")
	@Column(name = "RATING_DATE")
	private String ratingDate;

	@JsonProperty("rating_detail_id")
	@Column(name="RATING_DETAIL_ID")
	private Long ratingDetailId;
	
	
	@JsonProperty("ratingtype")
	@Column(name = "RATING_TYPE_CODE")
	private String ratingTypeCode;

	
	@JsonProperty("rating_type_desc")
	@Column(name = "RATING_TYPE_DESC")
	private String ratingTypeDesc;


	@JsonProperty("rating_type_sort_order")
	@Column(name = "RATING_TYPE_SORTORDER")
	private Long ratingTypeSortorder;

	@JsonProperty("confidential_category_code")
	@Column(name = "CONFIDENTIAL_CATEGORY_CODE")
	private String confidentialCategoryCode;
	
	@JsonProperty("confidential_category_desc")
	@Column(name = "CONFIDENTIAL_CATEGORY_DESC")
	private String confidentialCategoryDesc;
	
	public String getCurrentRatingSymbol() {
		return currentRatingSymbol;
	}


	public void setCurrentRatingSymbol(String currentRatingSymbol) {
		this.currentRatingSymbol = currentRatingSymbol;
	}


	public String getDebtTypeCode() {
		return debtTypeCode;
	}


	public void setDebtTypeCode(String debtTypeCode) {
		this.debtTypeCode = debtTypeCode;
	}


	public String getDebtTypeDesc() {
		return debtTypeDesc;
	}


	public void setDebtTypeDesc(String debtTypeDesc) {
		this.debtTypeDesc = debtTypeDesc;
	}


	public Long getEntityId() {
		return entityId;
	}


	public void setEntityId(Long entityId) {
		this.entityId = entityId;
	}


	public String getEntityName() {
		return entityName;
	}


	public void setEntityName(String entityName) {
		this.entityName = entityName;
	}


	public String getRatingDate() {
		return ratingDate;
	}


	public void setRatingDate(String ratingDate) {
		this.ratingDate = ratingDate;
	}


	public Long getRatingDetailId() {
		return ratingDetailId;
	}


	public void setRatingDetailId(Long ratingDetailId) {
		this.ratingDetailId = ratingDetailId;
	}


	public String getRatingTypeCode() {
		return ratingTypeCode;
	}


	public void setRatingTypeCode(String ratingTypeCode) {
		this.ratingTypeCode = ratingTypeCode;
	}


	public String getRatingTypeDesc() {
		return ratingTypeDesc;
	}


	public void setRatingTypeDesc(String ratingTypeDesc) {
		this.ratingTypeDesc = ratingTypeDesc;
	}


	public Long getRatingTypeSortorder() {
		return ratingTypeSortorder;
	}


	public void setRatingTypeSortorder(Long ratingTypeSortorder) {
		this.ratingTypeSortorder = ratingTypeSortorder;
	}


	public String getConfidentialCategoryCode() {
		return confidentialCategoryCode;
	}

	public void setConfidentialCategoryCode(String confidentialCategoryCode) {
		this.confidentialCategoryCode = confidentialCategoryCode;
	}

	
	public String getConfidentialCategoryDesc() {
		return confidentialCategoryDesc;
	}

	public void setConfidentialCategoryDesc(String confidentialCategoryDesc) {
		this.confidentialCategoryDesc = confidentialCategoryDesc;
	}

	
	@Override
	public String toString() {
		return "RatingHistoryLastTenYrsPublic [currentRatingSymbol=" + currentRatingSymbol + ", debtTypeCode="
				+ debtTypeCode + ", debtTypeDesc=" + debtTypeDesc + ", entityId=" + entityId + ", entityName="
				+ entityName + ", ratingDate=" + ratingDate + ", ratingDetailId=" + ratingDetailId + ", ratingTypeCode="
				+ ratingTypeCode + ", ratingTypeDesc=" + ratingTypeDesc + ", ratingTypeSortorder=" + ratingTypeSortorder
				+ ", confidentialCategoryCode=" +confidentialCategoryCode 
				+ ", confidentialCategoryDesc=" +confidentialCategoryDesc +"]";
	}
	
	
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\entity\RatingsId.java

package com.spglobal.ratings.ratingsdata.entity;

import java.io.Serializable;

import jakarta.persistence.Column;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;


@Data
@NoArgsConstructor
@AllArgsConstructor
public class RatingsId implements Serializable{

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;

	
	@Column(name="ENTITY_ID")
	private Long entityId;
	
	@Column(name="RATING_DETAIL_ID")
	private Long ratingDetailId;
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\entity\RatingUspfEconomicFinDetails.java

package com.spglobal.ratings.ratingsdata.entity;


import com.fasterxml.jackson.annotation.JsonInclude;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.Id;
import jakarta.persistence.IdClass;
import jakarta.persistence.Table;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.util.Date;

import org.springframework.data.annotation.Immutable;

@Entity
@Table(name = "VW_USPF_ECON_FIN_DATA", schema = "R360_APPDATA")
@Immutable
@Data
@NoArgsConstructor
@JsonInclude(JsonInclude.Include.ALWAYS)
@IdClass(RatingUspfEconomicFinDetailsId.class)
public class RatingUspfEconomicFinDetails {

    @Id
    @Column(name = "AS_ID")
    private Long securityId;
    
    @Id
    @Column(name = "DATA_ELEMENT_CODE")
    private String dataElementCode;
    

    @Column(name = "DATA_ELEMENT")
    private String dataElement;
    
    @Id
    @Column(name = "HEADING")
    private String heading;


    @Column(name = "SUB_HEADING")
    private String subHeading;
    
    

    @Column(name = "PRODUCT_CAPTION")
    private String productCaption;
    

    @Column(name = "FINVALUE")
    private String finValue;
    
    @Column(name = "AVG_3Y_FINVALUE")
    private String avg3YFinValue;
    
    @Column(name = "PRODUCT_MAGNITUDE")
    private String productMagnitude;
    
    @Column(name = "DATA_ELEMENT_DEFINITION")
    private String dataElementDesc;
    
    @Column(name = "PERIOD_END_DATE")
    private String periodEndDate;
    
    @Id
    @Column(name = "FISCAL_YEAR")
    private String fiscalYear;
    
    @Column(name = "PER_RANK")
    private String rankNum;
    
    @Column(name = "CURRENCY")
    private String currency;
   
    
    @Column(name = "LAST_UPDATED_DATE")
    private Date lastUpdatedTime;

    @Id
    @Column(name = "SORT_ORDER")
    private Long sortOrder;


}


class RatingUspfEconomicFinDetailsId{
	 @Id
     @Column(name = "AS_ID")
	 private Long securityId;
	 
	 @Id
	 @Column(name = "FISCAL_YEAR")
	 private String fiscalYear;
	 
	 @Id
     @Column(name = "DATA_ELEMENT_CODE")
	 private String dataElementCode;
    @Id
    @Column(name = "HEADING")
    private String heading;

    @Id
    @Column(name = "SORT_ORDER")
    private Long sortOrder;
	 
}



C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\entity\ReconciliationCustomRatingEntity.java

package com.spglobal.ratings.ratingsdata.entity;

import java.io.Serializable;

import jakarta.persistence.Entity;
import jakarta.persistence.IdClass;
import jakarta.persistence.Table;

import org.springframework.data.annotation.Immutable;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.spglobal.ratings.ratingsdata.model.ReconciliationData;

import lombok.NoArgsConstructor;

@Entity
@Table(name = "VW_R360_RECONCILIATION_CUSTOM", schema = "R360_APPDATA")
@Immutable
@IdClass(ReconRatingId.class)
@NoArgsConstructor
@JsonInclude(JsonInclude.Include.ALWAYS)
public class ReconciliationCustomRatingEntity extends ReconciliationData implements Serializable {
	private static final long serialVersionUID = -698017351867206439L;
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\entity\ReconciliationQuarterlyRatingEntity.java

package com.spglobal.ratings.ratingsdata.entity;

import java.io.Serializable;

import jakarta.persistence.Entity;
import jakarta.persistence.IdClass;
import jakarta.persistence.Table;

import org.springframework.data.annotation.Immutable;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.spglobal.ratings.ratingsdata.model.ReconciliationData;

@Entity
@Table(name = "VW_R360_RECON_FISCALQTRS", schema = "R360_APPDATA")
@Immutable
@IdClass(ReconRatingId.class)
@JsonInclude(JsonInclude.Include.ALWAYS)
public class ReconciliationQuarterlyRatingEntity extends ReconciliationData implements Serializable {
	private static final long serialVersionUID = 8310143059360531777L;
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\entity\ReconciliationYearlyRatingEntity.java

package com.spglobal.ratings.ratingsdata.entity;

import java.io.Serializable;

import jakarta.persistence.Entity;
import jakarta.persistence.IdClass;
import jakarta.persistence.Table;

import org.springframework.data.annotation.Immutable;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.spglobal.ratings.ratingsdata.model.ReconciliationData;

@Entity
@Table(name = "VW_R360_RECON_FISCALYRS", schema = "R360_APPDATA")
@Immutable
@IdClass(ReconRatingId.class)
@JsonInclude(JsonInclude.Include.ALWAYS)
public class ReconciliationYearlyRatingEntity extends ReconciliationData implements Serializable {
	private static final long serialVersionUID = 8310143059360531777L;
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\entity\ReconRatingId.java

package com.spglobal.ratings.ratingsdata.entity;

import java.io.Serializable;

import jakarta.persistence.Column;
import jakarta.persistence.Id;

import com.fasterxml.jackson.annotation.JsonProperty;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;


@Data
@NoArgsConstructor
@AllArgsConstructor
public class ReconRatingId implements Serializable{

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;

	
	@Column(name="ID")
	private Long id;
	
	@Column(name = "DATA_ELEMENT_CD")
	private String dataElementCd;
	
	@Column(name = "FIN_DATA_POINT_ID")
	@JsonProperty("FIN_DATA_POINT_ID")
	private Long finDataPointId;

}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\entity\RelatedCNEntities.java

package com.spglobal.ratings.ratingsdata.entity;

import org.springframework.data.annotation.Immutable;

import jakarta.persistence.Entity;
import jakarta.persistence.NamedQuery;
import jakarta.persistence.Table;


@Entity
@Table(name = "VW_RELATED_ENTITIES_CN", schema = "R360_APPDATA")
@Immutable
@NamedQuery(name = "RelatedCNEntities.findByEntityId", query = "select e from RelatedCNEntities e where e.entityId = ?1 order by sortOrder asc")
@NamedQuery(name = "RelatedCNEntities.findByKeyInstId", query = "select e from RelatedCNEntities e where e.snlId = ?1 order by sortOrder asc")
public class RelatedCNEntities extends RelatedEntities {

}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\entity\RelatedEntities.java

package com.spglobal.ratings.ratingsdata.entity;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonProperty;

import jakarta.persistence.Column;
import jakarta.persistence.Id;
import jakarta.persistence.MappedSuperclass;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;


@MappedSuperclass
@Data
@NoArgsConstructor
@AllArgsConstructor
@JsonInclude(JsonInclude.Include.ALWAYS)
public class RelatedEntities {
 	   
	@JsonProperty("entity_id")
	@Column(name = "ENTITY_ID")
	private Long entityId;

	@JsonProperty("snl_id")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "KEY_INSTN")
	private String snlId;

	@JsonProperty("capiq_id")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "CAPIQ_ID")
	private String capiqId;

	@JsonProperty("super_parent_id")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "SUPER_PARENT_ID")
	private Long superParentId;
	
	@Id
	@JsonProperty("related_entity_id")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "RE_ENTITY_ID")
	private Long relatedEntityId;
	
	@JsonProperty("related_entity_name")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "RE_NAME")
	private String relatedEntityName;
	
	@JsonProperty("related_entity_short_name")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "RE_SHORT_NAME")
	private String relatedEntityShortName;

	
	@JsonProperty("related_entity_legal_name")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "RE_LEGAL_NAME")
	private String relatedEntityLegalName;


	@JsonProperty("related_sub_sector")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "RE_SUB_SECTOR")
	private String relatedSubSector;

	@JsonProperty("family_level")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "FAMILY_LEVEL")
	private String familyLevel;
	
	
	@JsonProperty("sort_order")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "SORT_ORDER")
	private String sortOrder;

	@JsonProperty("related_capiq_id")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "RE_CAPIQ_ID")
	private String relatedCapiqId;
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\entity\RelatedEntity.java

package com.spglobal.ratings.ratingsdata.entity;

import org.springframework.data.annotation.Immutable;

import jakarta.persistence.Entity;
import jakarta.persistence.NamedQuery;
import jakarta.persistence.Table;

@Entity
@Table(name = "VW_RELATED_ENTITIES", schema = "R360_APPDATA")
@Immutable
@NamedQuery(name = "RelatedEntity.findByEntityId", query = "select e from RelatedEntity e where e.entityId = ?1 order by sortOrder asc")
@NamedQuery(name = "RelatedEntity.findByKeyInstId", query = "select e from RelatedEntity e where e.snlId = ?1 order by sortOrder asc")
public class RelatedEntity extends RelatedEntities {

}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\entity\ScoresAndModifiers.java

package com.spglobal.ratings.ratingsdata.entity;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.Id;
import jakarta.persistence.IdClass;
import jakarta.persistence.NamedQuery;
import jakarta.persistence.Table;

import org.springframework.data.annotation.Immutable;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonProperty;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Entity
@Table(name = "VW_SCORES_MODIFIERS_FACTORS", schema = "R360_APPDATA")
@Immutable
@Data
@NoArgsConstructor
@AllArgsConstructor
@IdClass(ScoresAndModifiersId.class)
@NamedQuery(name = "ScoresAndModifiers.findByEntityIdAndAnalyticCaseType",
query = "select distinct e from ScoresAndModifiers e where e.entityId = ?1 and e.analyticCaseType = ?2 "
		+ "order by sortOrder ASC")
public class ScoresAndModifiers {
	
	@JsonProperty("p_entity_id")
	@Id
	private String entityId;
	
	@JsonProperty("analytic_case_type")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "ANALYTIC_CASE_TYPE")
	private String analyticCaseType;
	
	@JsonProperty("score_name")
	@Id
	private String scoreName;
	
	@JsonProperty("score_value")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "SCORE_VALUE")
	private String scoreValue;
	
	@JsonProperty("score_value_desc")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "SCORE_VALUE_DESC")
	private String scoreValueDesc;
	
	@JsonProperty("score_group")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "SCORE_GROUP")
	private String scoreGroup;
	
	@JsonProperty("highlight_flag")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "HIGHLIGHT_FLAG")
	private String highlightFlag;
	
	@JsonProperty("sort_order")
	@JsonIgnore
	@Column(name = "SORT_ORDER")
	private Integer sortOrder;
	
	@JsonProperty("confidential_ind")
	@Id
	private String confidentialInd;
	
	@JsonProperty("confidential_category_code")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "CONFIDENTIAL_CATEGORY_CODE")
	private String confidentialCategoryCode;

}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\entity\ScoresAndModifiersId.java

package com.spglobal.ratings.ratingsdata.entity;

import java.io.Serializable;

import jakarta.persistence.Column;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@NoArgsConstructor
@AllArgsConstructor
public class ScoresAndModifiersId implements Serializable{

    /**
     * 
     */
    private static final long serialVersionUID = 1L;
    
    @Column(name="P_ENTITY_ID")
    private String entityId;
    
    @Column(name="SCORE_NAME")
    private String scoreName;
    
    @Column(name="CONFIDENTIAL_IND")
    private String confidentialInd;

}



C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\entity\ScoresAndModifiersPublic.java

package com.spglobal.ratings.ratingsdata.entity;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.Id;
import jakarta.persistence.IdClass;
import jakarta.persistence.Table;

import org.springframework.data.annotation.Immutable;

import com.fasterxml.jackson.annotation.JsonProperty;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Entity
@Table(name = "VW_SCORES_MODIFIERS_FACTORS_PUBLIC", schema = "R360_APPDATA")
@Immutable
@Data

@NoArgsConstructor
@AllArgsConstructor
@IdClass(ScoresAndModifiersPublicId.class)
public class ScoresAndModifiersPublic {

    @JsonProperty("analytic_case_type")
    @Column(name = "ANALYTIC_CASE_TYPE")
    private String analyticCaseType;

    @JsonProperty("score_name")
    @Id
    @Column(name = "SCORE_NAME")
    private String scoreName;

    @JsonProperty("score_value")
    @Column(name = "SCORE_VALUE")
    private String scoreValue;
    
    @JsonProperty("score_value_desc")
    @Column(name = "SCORE_VALUE_DESC")
    private String scoreValueDesc;

    @JsonProperty("score_group")
    @Column(name = "SCORE_GROUP")
    private String scoreGroup;

    @JsonProperty("highlight_flag")
    @Column(name = "HIGHLIGHT_FLAG")
    private String highlightFlag;

    @JsonProperty("p_entity_id")
    @Id
    @Column(name="P_ENTITY_ID")
    private String entityId;

    @Column(name="SORT_ORDER")
    private Integer sortOrder;
}



C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\entity\ScoresAndModifiersPublicId.java

package com.spglobal.ratings.ratingsdata.entity;

import java.io.Serializable;

import jakarta.persistence.Column;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@NoArgsConstructor
@AllArgsConstructor
public class ScoresAndModifiersPublicId implements Serializable{

    /**
     * 
     */
    private static final long serialVersionUID = 1L;
    
    @Column(name="P_ENTITY_ID")
    private String entityId;
    
    @Column(name="SCORE_NAME")
    private String scoreName;

}



C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\entity\SectorsArticleEntity.java

package com.spglobal.ratings.ratingsdata.entity;


import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.Id;
import jakarta.persistence.Table;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;
import org.springframework.data.annotation.Immutable;

@Entity
@Table(name = "VW_SECTOR_RSCH_ALL_BY_SUBJ ", schema = "R360_APPDATA")
@Immutable
@Data
@NoArgsConstructor
@AllArgsConstructor
@JsonInclude(JsonInclude.Include.ALWAYS)
public class SectorsArticleEntity {

    @Id
    @Column(name = "ARTICLE_ID")
    private Long articleId;

    @Column(name = "TITLE")
    private String title;
    
    @Column(name = "ARTICLE_DATE")
    private String articleDate;

    @Column(name = "AUTHOR")
    private String author;
    

}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\entity\SectorsEntity.java

package com.spglobal.ratings.ratingsdata.entity;


import com.fasterxml.jackson.annotation.JsonInclude;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.Id;
import jakarta.persistence.IdClass;
import jakarta.persistence.Table;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;
import org.springframework.data.annotation.Immutable;

@Entity
@Table(name = "VW_SECTOR_RSCH_SECTORS", schema = "R360_APPDATA")
@Immutable
@Data
@NoArgsConstructor
@AllArgsConstructor
@JsonInclude(JsonInclude.Include.ALWAYS)
@IdClass(SectorsEntity.class)
public class SectorsEntity {

    @Id
    @Column(name = "SUB_SECTOR_CODE")
    private String subSectorCode;

    @Column(name = "SUB_SECTOR")
    private String subSector;
    
    @Id
    @Column(name = "INDUSTRY_CODE")
    private String industryCode;

    @Column(name = "INDUSTRY")
    private String industry;

}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\entity\SectorsGeographyEntity.java

package com.spglobal.ratings.ratingsdata.entity;


import com.fasterxml.jackson.annotation.JsonInclude;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.Id;
import jakarta.persistence.Table;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;
import org.springframework.data.annotation.Immutable;

@Entity
@Table(name = "VW_SECTOR_RSCH_GEO", schema = "R360_APPDATA")
@Immutable
@Data
@NoArgsConstructor
@AllArgsConstructor
@JsonInclude(JsonInclude.Include.ALWAYS)
public class SectorsGeographyEntity {

	@Id@Column(name = "SUBJECT_ID")
	private Long subjectId;

	@Column(name = "LONG_DESCRIPTION")
	private String longDescription;

}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\entity\SectorSubsectorEntity.java

package com.spglobal.ratings.ratingsdata.entity;

import java.io.Serializable;

import org.springframework.data.annotation.Immutable;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.Id;
import jakarta.persistence.Table;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Entity
@Table(name = "PFPORTFOLIO", schema = "GS_GC")
@Immutable
@Data
@NoArgsConstructor
@AllArgsConstructor
public class SectorSubsectorEntity implements Serializable {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;

	@Column(name = "PORTFOLIO_SECTOR")
	private String portfolioSector;

	@Column(name = "PORTFOLIO_SECTOR_CODE")
	private String portfolioSectorCode;

	@Column(name = "PORTFOLIO_SUBSECTOR")
	private String portfolioSubSector;

	@Column(name = "PORTFOLIO_SUBSECTOR_CODE")
	private String portfolioSubSectorCode;

	@Column(name = "PORTFOLIO_NAME")
	private String portfolioName;

	@Id
	@Column(name = "PORTFOLIO_ID")
	private String portfolioId;

	@Column(name = "PORTFOLIO_ACBH")
	private String portfolioACBH;

}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\entity\SnlEntityDetailsUnrated.java

package com.spglobal.ratings.ratingsdata.entity;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.Id;
import jakarta.persistence.NamedQuery;
import jakarta.persistence.Table;

import org.springframework.data.annotation.Immutable;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonProperty;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Entity
@Table(name = "VW_UNRATED_ENTITY_DETAILS", schema = "R360_APPDATA")
@Immutable
@Data
@NoArgsConstructor
@AllArgsConstructor
@NamedQuery(name = "SnlEntityDetailsUnrated.findBySnlId", query = "select e from SnlEntityDetailsUnrated e where e.snlId = :snlId")
public class SnlEntityDetailsUnrated {


	@JsonProperty("snl_id")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "KEY_INSTN_ID")
	private String snlId;

	@Id
	@JsonProperty("capiq_id")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "CAPIQ_ID")
	private String capiqId;
	
	@JsonProperty("institution_name")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "ENTITY_NAME")
	private String institutionName;
	
	@JsonProperty("ticker")
	@Column(name = "TICKER")
	private String ticker;
	
	@JsonProperty("industry_code")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "INDUSTRY_CODE")
	private String industryCode;
	
	@JsonProperty("industry_name")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "INDUSTRY_NAME")
	private String industryName;
	
	@JsonProperty("counrtyCode")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "COUNTRY_CODE")
	private String countryCode;
	
	@JsonProperty("counrty_name")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "COUNTRY_NAME")
	private String countryName;
	
	@JsonProperty("state_code")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "STATE_CODE")
	private String stateCode;
	
	@JsonProperty("state_name")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "STATE_NAME")
	private String stateName;	
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\entity\SovereignBICRAScores.java

package com.spglobal.ratings.ratingsdata.entity;

import org.springframework.data.annotation.Immutable;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.Id;
import jakarta.persistence.Table;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Entity
@Table(name = "VW_SOV_BICRA_SCORES", schema = "R360_APPDATA")
@Immutable
@Data
@NoArgsConstructor
@AllArgsConstructor
@JsonInclude(JsonInclude.Include.ALWAYS)
public class SovereignBICRAScores {
	
	@JsonIgnore
	@Column(name="COUNTRY_CODE")
	private String countryCode;	

	@JsonIgnore
	@Id@Column(name="SCORE_CODE")
	private String scoreCode;
	
	@Column(name="SCORE_NAME")
	private String scoreName;
	
	@Column(name="SCORE_VALUE")
	private String scoreValue;
	
	@Column(name="HIERARCHY_LEVEL")
	private Integer hierarchyLevel;
	
	@Column(name="SCORE_SORT_ORDER")
	private String displayOrder;	
	
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\entity\SovereignCountryEntity.java

package com.spglobal.ratings.ratingsdata.entity;



import java.io.Serializable;

import org.springframework.data.annotation.Immutable;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.Id;
import jakarta.persistence.Table;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Entity
@Table(name = "VW_SOV_COUNTRY_LIST", schema = "R360_APPDATA")
@Immutable
@Data
@NoArgsConstructor
@AllArgsConstructor
@JsonInclude(JsonInclude.Include.ALWAYS)
public class SovereignCountryEntity  implements Serializable{

	/**
	 * 
	 */
	private static final long serialVersionUID = -1428533947885190030L;

	@JsonProperty("entityId")
	@Id@Column(name = "ENTITY_ID")
	private Long entityId;

	@JsonProperty("countryName")
	@Column(name = "COUNTRY_NAME")
	private String countryName;

	@JsonProperty("countryCode")
	@Column(name = "ISO2_CODE")
	private String countryCode;

	@JsonProperty("country3Code")
	@Column(name = "ISO3_CODE")
	private String country3Code;
	
	@JsonProperty("ratingType")
	@Column(name = "RATING_TYPE")
	private String ratingType;
	
	@JsonProperty("rating")
	@Column(name = "RATING")
	private String rating;
	

}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\entity\SovereignCountrySummary.java

package com.spglobal.ratings.ratingsdata.entity;

import java.io.Serializable;

import org.springframework.data.annotation.Immutable;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.Id;
import jakarta.persistence.Table;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Entity
@Table(name = "VW_SOV_RESEARCH_SUMMARY", schema = "R360_APPDATA")
@Immutable
@Data
@NoArgsConstructor
@AllArgsConstructor
@JsonInclude(JsonInclude.Include.ALWAYS)
public class SovereignCountrySummary implements Serializable{
	
	/**
	 * 
	 */
	private static final long serialVersionUID = 32887986666254777L;

	@JsonProperty("countryCode")
	@Column(name="COUNTRY_CODE")
	private String countryCode;
	
	@JsonProperty("title")
	@Column(name="TITLE")
	private String title;
	
	@JsonProperty("summaryText")
	@Column(name="DETAIL")
	private String summaryText;
	
	@JsonProperty("displayOrder")
	@Id@Column(name="DISPLAY_ORDER")
	private Integer displayOrder;
	
	@JsonProperty("lastModifiedDate")
	@Column(name="LAST_MODIFIED_DATE")
	private String lastModifiedDate;

}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\entity\SovereignDashboard.java

package com.spglobal.ratings.ratingsdata.entity;

import org.springframework.data.annotation.Immutable;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.Id;
import jakarta.persistence.Table;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Entity
@Table(name = "VW_SOV_DASHBOARD", schema = "R360_APPDATA")
@Immutable
@Data
@NoArgsConstructor
@AllArgsConstructor
@JsonInclude(JsonInclude.Include.ALWAYS)
public class SovereignDashboard {
	
	@JsonIgnore
	@Column(name="COUNTRY_ISO2_CODE")
	private String countryISO2Code;
	
	@JsonIgnore
	@Column(name="COUNTRY_ISO3_CODE")
	private String countryISO3Code;
	
	@Column(name="COUNTRY_NAME")
	private String countryName;
	
	@Column(name="TITLE")
	private String title;
	
	@Id@Column(name="SCORE_NAME")
	private String scoreName;
	
	@Column(name="SCORE_VALUE")
	private String scoreValue;	

}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\entity\SovereignFSIICRA.java

package com.spglobal.ratings.ratingsdata.entity;

import org.springframework.data.annotation.Immutable;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.Id;
import jakarta.persistence.Table;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Entity
@Table(name = "VW_SOV_FIN_SEC_IICRA", schema = "R360_APPDATA")
@Immutable
@Data
@NoArgsConstructor
@AllArgsConstructor
@JsonInclude(JsonInclude.Include.ALWAYS)
public class SovereignFSIICRA {
	
	@JsonIgnore
	@Id@Column(name="DATASET_ID")
	private Long datasetId;
	
	@JsonIgnore
	@Column(name="COUNTRY_CODE")
	private String countryCode;
	
	@JsonIgnore
	@Column(name="DE_MNEMONIC_CLASS")
	private String gridName;

	@Column(name="TITLE")
	private String title;
	
	@Column(name="INDICATOR")
	private String indicator;	
	
	@Column(name="INDICATOR_VALUE")
	private String indicatorValue;	
	
	@Column(name="INDICATOR_ORDER")
	private Integer indicatorOrder;	
	
	@Column(name="SORT_ORDER")
	private Integer sortOrder;
	
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\entity\SovereignFSMajorFactors.java

package com.spglobal.ratings.ratingsdata.entity;

import org.springframework.data.annotation.Immutable;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.Id;
import jakarta.persistence.Table;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Entity
@Table(name = "R360_ECON_FACTS_SCORES", schema = "DSMPSTG")
@Immutable
@Data
@NoArgsConstructor
@AllArgsConstructor
@JsonInclude(JsonInclude.Include.ALWAYS)
public class SovereignFSMajorFactors {
	
	@JsonIgnore
	@Id@Column(name="DATASET_ID")
	private Long datasetId;
	
	@JsonIgnore
	@Column(name="COUNTRY_CODE")
	private String countryCode;
	
	@Column(name="DE_MNEMONIC_CLASS")
	private String gridName;
	
	@Column(name="DE_NAME")
	private String dataElementName;
	
	@Column(name="DATA_VALUE")
	private String dataValue;
	
	@Column(name="DISPLAY_ORDER")
	private Integer displayOrder;
	

}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\entity\SovereignPeerBICRAScores.java

package com.spglobal.ratings.ratingsdata.entity;

import org.springframework.data.annotation.Immutable;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.Id;
import jakarta.persistence.IdClass;
import jakarta.persistence.Table;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Entity
@Table(name = "VW_SOV_PEER_BICRA_SCORES", schema = "R360_APPDATA")
@Immutable
@Data
@NoArgsConstructor
@AllArgsConstructor
@IdClass(SovereignPeerBICRAScoresId.class)
@JsonInclude(JsonInclude.Include.ALWAYS)
public class SovereignPeerBICRAScores {
	
	@JsonIgnore
	@Column(name="COUNTRY_CODE")
	private String countryCode;	
	
	@JsonIgnore
	@Id@Column(name="PEER_COUNTRY_CODE")
	private String peerCountryCode;
	
	@Column(name="PEER_COUNTRY_NAME")
	private String peerCountryName;

	@Id@Column(name="SCORE_NAME")
	private String scoreName;
	
	@Column(name="SCORE_VALUE")
	private String scoreValue;	
	
	@Column(name="ASSESSMENT_DATE")
	private String assessmentDate;	
	
	@Column(name="HOME_COUNTRY_IND")
	private String homeCountryInd;	
	
	@Column(name="SCORE_SORT_ORDER")
	private String scoreSortOrder;
	
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\entity\SovereignPeerBICRAScoresId.java

package com.spglobal.ratings.ratingsdata.entity;

import org.springframework.data.annotation.Immutable;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.Id;
import jakarta.persistence.Table;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;


@Immutable
@Data
@NoArgsConstructor
@AllArgsConstructor
@JsonInclude(JsonInclude.Include.ALWAYS)
public class SovereignPeerBICRAScoresId {	
	
	@Id@Column(name="PEER_COUNTRY_CODE")
	private String peerCountryCode;

	@Id@Column(name="SCORE_NAME")
	private String scoreName;
		
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\entity\SovereignResearchRatingDistribution.java

package com.spglobal.ratings.ratingsdata.entity;

import org.springframework.data.annotation.Immutable;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.Id;
import jakarta.persistence.Table;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Entity
@Table(name = "vw_entity_country_sector_rating_dist", schema = "R360_APPDATA")
@Immutable
@Data
@NoArgsConstructor
@AllArgsConstructor
@JsonInclude(JsonInclude.Include.ALWAYS)
public class SovereignResearchRatingDistribution {
	
	
	@Column(name="ENTITY_ID")
	@JsonIgnore
	private Long entityId;
	
	@Id
	@Column(name="RATING")
	private String rating;
	
	@Column(name="ISSUER_COUNT")
	private String issuerCount;
	
	@Column(name="GIS_SECTOR")
	private String gisSector;

}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\entity\SovereignRiskEntity.java

package com.spglobal.ratings.ratingsdata.entity;



import java.io.Serializable;

import org.springframework.data.annotation.Immutable;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.Id;
import jakarta.persistence.Table;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Entity
@Table(name = "VW_SOV_RISK_ECON_FIN_INDICATORS", schema = "R360_APPDATA")
@Immutable
@Data
@NoArgsConstructor
@AllArgsConstructor
@JsonInclude(JsonInclude.Include.ALWAYS)
public class SovereignRiskEntity implements Serializable{

	@JsonIgnore
	@Id@Column(name="DATASET_ID")
	private String datasetId;
	
	@JsonIgnore
	@Column(name="COUNTRY_CODE")
	private String countryCode;
	
	@JsonProperty("tabName")
	@Column(name="DATA_GROUP")
	private String dataGroup;

	
	@Column(name="GRID_NAME")
	private String gridName;
	
	@Column(name="SCORE_NAME")
	private String scoreName;
	
	@Column(name="SCORE_VALUE")
	private String scoreValue;
	
	@Column(name="FIN_YEAR")
	private String financialYear;
	
	@Column(name="DISPLAY_ORDER")
	private Integer displayOrder;
	
	@Column(name="LAST_MODIFIED_DATE")
	private String lastModifiedDate;
	
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\entity\SovereignTopFiveFinInst.java

package com.spglobal.ratings.ratingsdata.entity;

import org.springframework.data.annotation.Immutable;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.Id;
import jakarta.persistence.Table;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Entity
@Table(name = "R360_ECON_TOP5", schema = "DSMPSTG")
@Immutable
@Data
@NoArgsConstructor
@AllArgsConstructor
@JsonInclude(JsonInclude.Include.ALWAYS)
public class SovereignTopFiveFinInst {
	
	@JsonIgnore
	@Id@Column(name="DATASET_ID")
	private Long datasetId;
	
	@JsonIgnore
	@Column(name="COUNTRY_CODE")
	private String countryCode;
	
	@Column(name="FI_NAME")
	private String financialInsName;
	
	@Column(name="ASSETS")
	private Long assets;
	
	@Column(name="ASSETS_CURRENCY")
	private String assetsCurrency;
	
	@Column(name="COUNTER_CREDIT_RATING")
	private String creditRating;
	
	@Column(name="SYS_IMP")
	private String sysImp;
	
	@Column(name="DISPLAY_ORDER")
	private Integer displayOrder;
	
	@Column(name="DATA_AS_OF_DATE")
	private String dataAsOfDate;
	
	
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\entity\TimeZone.java

package com.spglobal.ratings.ratingsdata.entity;

import java.sql.Date;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.Id;
import jakarta.persistence.IdClass;
import jakarta.persistence.Table;

import org.springframework.data.annotation.Immutable;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonInclude.Include;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Entity
@Table(name = "VW_R360_APP_TIME_ZONE", schema = "R360_APPDATA")
@JsonInclude(JsonInclude.Include.ALWAYS)
@Immutable
@Data
@NoArgsConstructor
@AllArgsConstructor
public class TimeZone {

    @Id
    @JsonProperty("time_zone")
    @Column(name = "TIME_ZONE")
    private String timeZone;

    @JsonProperty("time_zone_name")
    @Column(name = "TIME_ZONE_NAME")
    @JsonInclude(Include.ALWAYS)
    private String timeZoneName;

    @JsonProperty("time_zone_display_name")
    @Column(name = "TIME_ZONE_DISPLAY_NAME")
    @JsonInclude(Include.ALWAYS)
    private String timeZoneDisplayName;

}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\entity\UspfAnalyticalContacts.java

package com.spglobal.ratings.ratingsdata.entity;

import org.springframework.data.annotation.Immutable;

import com.fasterxml.jackson.annotation.JsonInclude;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.Id;
import jakarta.persistence.IdClass;
import jakarta.persistence.Table;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Entity
@Table(name = "VW_USPF_ANALYTICAL_CONTACTS", schema = "R360_APPDATA")
@Immutable
@Data
@NoArgsConstructor
@AllArgsConstructor
@JsonInclude(JsonInclude.Include.ALWAYS)
public class UspfAnalyticalContacts {
   
	@Column(name="AS_ID")
	private Long analyticalSecId;
	
	@Column(name="FULL_NAME")
	private String name;
	
	@Column(name="ROLE")
	private String role;
	
	@Column(name="PHONE")
	private String phone;
	
	@Column(name="EMAIL")
	private String email;
	
	@Id@Column(name="SPID")
	private String employeeId;
	
	@Column(name="DISPLAY_SEQ_ORDER")
	private Integer displayOrder;

}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\entity\UspfCurrentRatings.java

package com.spglobal.ratings.ratingsdata.entity;

import org.springframework.data.annotation.Immutable;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.Id;
import jakarta.persistence.Table;
import lombok.Data;
import lombok.NoArgsConstructor;

@Entity
@Table(name = "VW_USPF_CURRENT_RATINGS", schema = "R360_APPDATA")
@Immutable
@Data
@NoArgsConstructor
@JsonInclude(JsonInclude.Include.ALWAYS)
public class UspfCurrentRatings {

	@Column(name="ENTITY_ID")
	private Long entityId;
	
	@Column(name="SECTOR")
	private String sector;
	
	@Column(name="SUB_SECTOR")
	private String subSector;
	
	@Id@Column(name="AS_ID")
	private Long securityId;
	
	@Column(name="AS_NAME")
	private String securityName;
	
	@Column(name="AS_INSTRUMENT_ID")
	private Long securityInstrumentId;
	
	@Column(name="RATING_TYPE")
	private String ratingType;
	
	@Column(name="RATING_DETAIL_ID")
	private Long ratingDetailId;
	
	@Column(name="RATING")
	private String rating;
	
	@Column(name="RATING_DATE")
	private String ratingDate;
	
	@Column(name="LAST_REVIEW_DATE")
	private String lastReviewDate;
	
	@Column(name="ACTION")
	private String action;
	
	@Column(name="CREDITWATCH_OUTLOOK")
	private String creditWatchOutlook;
	
	@Column(name="CREDITWATCH_OUTLOOK_DATE")
	private String creditWatchOutlookDate;
	
	@Column(name="LATEST_ARTICLE_DATE")
	private String latestArticleDate;
	
	@Column(name="ARTICLE_ID")
	private Long articleId;
	
	@JsonIgnore
	@Column(name="ROLE_CODE") 
	private String roleCode;
	
	@Column(name="RATING_TYPE_CODE")
	private String ratingTypeCode;

	public UspfCurrentRatings(Long entityId, Long securityId, Long securityInstrumentId, String sector,
			String subSector, String securityName, Long ratingDetailId, String ratingType, String rating,
			String ratingDate, String lastReviewDate, String action, String creditWatchOutlook,
			String creditWatchOutlookDate, String latestArticleDate, Long articleId, String ratingTypeCode) {
		super();
		this.entityId = entityId;
		this.securityId = securityId;
		this.securityInstrumentId = securityInstrumentId;
		this.sector = sector;
		this.subSector = subSector;
		this.securityName = securityName;
		this.ratingDetailId = ratingDetailId;
		this.ratingType = ratingType;
		this.rating = rating;
		this.ratingDate = ratingDate;
		this.lastReviewDate = lastReviewDate;
		this.action = action;
		this.creditWatchOutlook = creditWatchOutlook;
		this.creditWatchOutlookDate = creditWatchOutlookDate;
		this.latestArticleDate = latestArticleDate;
		this.articleId = articleId;
		this.ratingTypeCode = ratingTypeCode;
	}
	
}



C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\entity\UspfDashboardRatings.java

package com.spglobal.ratings.ratingsdata.entity;

import org.springframework.data.annotation.Immutable;

import com.fasterxml.jackson.annotation.JsonInclude;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.Id;
import jakarta.persistence.Table;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Entity
@Table(name = "VW_USPF_CURRENT_RATINGS_DASHBOARD", schema = "R360_APPDATA")
@Immutable
@Data
@NoArgsConstructor
@AllArgsConstructor
@JsonInclude(JsonInclude.Include.ALWAYS)
public class UspfDashboardRatings {

	@Column(name="ENTITY_ID")
	private Long entityId;
	
	@Column(name="SECTOR")
	private String sector;
	
	@Column(name="SECTOR_CODE")
	private String sectorCode;
	
	@Column(name="SUB_SECTOR")
	private String subSector;
	
	@Column(name="SUB_SECTOR_CODE")
	private String subSecotrCode;
	
	@Id@Column(name="AS_ID")
	private Long securityId;
	
	@Column(name="AS_NAME")
	private String securityName;
	
	@Column(name="AS_INSTRUMENT_ID")
	private Long securityInstrumentId;
	
	@Column(name="RATING_TYPE")
	private String ratingType;
	
	@Column(name="RATING_DETAIL_ID")
	private Long ratingDetailId;
	
	@Column(name="RATING")
	private String rating;
	
	@Column(name="CREDITWATCH_OUTLOOK")
	private String creditWatchOutlook;
	
	@Column(name="LONG_SHORT_IND")
	private String ratingTypeInd;	

}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\entity\UspfNonIssuerBasedRatingHisotry.java

package com.spglobal.ratings.ratingsdata.entity;

import org.springframework.data.annotation.Immutable;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.Id;
import jakarta.persistence.Table;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Entity
@Table(name = "VW_USPF_NIB_RATINGS_HISTORY", schema = "R360_APPDATA")
@Immutable
@Data
@NoArgsConstructor
@AllArgsConstructor
@JsonInclude(JsonInclude.Include.ALWAYS)
public class UspfNonIssuerBasedRatingHisotry {
	
	
	@Column(name="INSTRUMENT_ID")
	private Long instrumentId;
	
	@JsonIgnore
	@Column(name="INSTRUMENT_DETAIL_ID")
	private Long instrDetailId;
	
	@JsonIgnore
	@Id
	@Column(name="RATING_DETAIL_ID")
	private Long ratingDetailId;
	
	@JsonIgnore
	@Column(name="RATING_TYPE_CODE")
	private String ratingTypeCode;
	
	@Column(name="RATING_TYPE")
	private String ratingType;
	
	@Column(name="RATING")
	private String rating;

	@Column(name="RATING_DATE")
	private String ratingDate;

	@Column(name="REGULATORY_INDICATOR")
	private String regulatoryInd;
	
	@Column(name="ACTION")
	private String action;

	@Column(name="CREDITWATCH_OUTLOOK")
	private String creditWatchOutlook;
	
	@Column(name="CREDITWATCH_OUTLOOK_DATE")
	private String creditWatchOutlookDate;
	
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\entity\UspfNonIssuerBasedRatings.java

package com.spglobal.ratings.ratingsdata.entity;

import org.springframework.data.annotation.Immutable;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.Id;
import jakarta.persistence.Table;
import lombok.Data;
import lombok.NoArgsConstructor;

@Entity
@Table(name = "VW_USPF_NIB_RATINGS", schema = "R360_APPDATA")
@Immutable
@Data
@NoArgsConstructor
@JsonInclude(JsonInclude.Include.ALWAYS)
public class UspfNonIssuerBasedRatings {

	@Column(name="ENTITY_ID")
	private Long entityId;	
	
	@Column(name="INSTRUMENT_ID")
	private Long instrumentId;
	
	@Column(name="INSTRUMENT_DETAIL_ID")
	private Long instrDetailId;	
	
	@Id
	@Column(name="RATING_DETAIL_ID")
	private Long ratingDetailId;
	
	@Column(name="ROLE_CODE")
	private String roleCode;
	
	
	@Column(name="ISSUE_NAME")
	private String issueName;
	
	@Column(name="CUSIP")
	private String cusip;

	@Column(name="CATEGORY")
	private String category;
	
	@Column(name="MATURITY_DATE")
	private String maturityDate;
	
	@Column(name="RATING_TYPE")
	private String ratingType;
	
	@Column(name="RATING")
	private String rating;
	
	@Column(name="RATING_DATE")
	private String ratingDate;
	
	@Column(name="LAST_REVIEW_DATE")
	private String lastReviewDate;
	
	@Column(name="REGULATORY_INDICATOR")
	private String regulatoryInd;
	
	@Column(name="ACTION")
	private String action;

	@Column(name="CREDITWATCH_OUTLOOK")
	private String creditWatchOutlook;

	@Column(name="CREDITWATCH_OUTLOOK_DATE")
	private String creditWatchOutlookDate;

	@Column(name="COUPON_RATE")
	private String couponRate;

	@Column(name="REFUNDED_IND")
	private String refundedInd;
	
	@Column(name="INSURANCE_PROVIDER")
	private String insProvider;
	
	@Column(name="MUNICIPAL_SECURITY")
	private String muncipalSecurity;
	
	@Column(name="DATEBEGUN")
	private String dateBegun;
	
	@Column(name="SERIES")
	private String series;	
	
	@Column(name="RATING_TYPE_CODE")
	private String ratingTypeCode;
	
	@JsonIgnore
	@Column(name="SORT_CRITERIA1")
	private Integer sortCriteria1;
	
	@JsonIgnore
	@Column(name="SORT_CRITERIA2")
	private String sortCriteria2;
	
	@JsonIgnore
	@Column(name="SORT_CRITERIA3")
	private String sortCriteria3;

	public UspfNonIssuerBasedRatings(Long entityId, String issueName, Long instrumentId, Long instrDetailId,
			Long ratingDetailId, String cusip, String category, String maturityDate, String ratingType, String rating,
			String ratingDate, String lastReviewDate, String regulatoryInd, String action, String creditWatchOutlook,
			String creditWatchOutlookDate, String couponRate, String refundedInd, String insProvider,
			String muncipalSecurity, String dateBegun, String series, String ratingTypeCode, Integer sortCriteria1,
			String sortCriteria2, String sortCriteria3) {
		super();
		this.entityId = entityId;
		this.issueName = issueName;
		this.instrumentId = instrumentId;
		this.instrDetailId = instrDetailId;
		this.ratingDetailId = ratingDetailId;
		this.cusip = cusip;
		this.category = category;
		this.maturityDate = maturityDate;
		this.ratingType = ratingType;
		this.rating = rating;
		this.ratingDate = ratingDate;
		this.lastReviewDate = lastReviewDate;
		this.regulatoryInd = regulatoryInd;
		this.action = action;
		this.creditWatchOutlook = creditWatchOutlook;
		this.creditWatchOutlookDate = creditWatchOutlookDate;
		this.couponRate = couponRate;
		this.refundedInd = refundedInd;
		this.insProvider = insProvider;
		this.muncipalSecurity = muncipalSecurity;
		this.dateBegun = dateBegun;
		this.series = series;
		this.ratingTypeCode = ratingTypeCode;
		this.sortCriteria1 = sortCriteria1;
		this.sortCriteria2 = sortCriteria2;
		this.sortCriteria3 = sortCriteria3;
	}
	
	
	
}



C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\entity\UspfNonIssuerBasedRatingsIssue.java

package com.spglobal.ratings.ratingsdata.entity;

import org.springframework.data.annotation.Immutable;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.Id;
import jakarta.persistence.Table;
import lombok.Data;
import lombok.NoArgsConstructor;

@Entity
@Immutable
@Data
@Table(name = "VW_USPF_NIB_RATINGS_ISSUE_NAME", schema = "R360_APPDATA")
@NoArgsConstructor
@JsonInclude(JsonInclude.Include.ALWAYS)
public class UspfNonIssuerBasedRatingsIssue {

	@Column(name="ENTITY_ID")
	private Long entityId;		

	@Id@Column(name="INSTRUMENT_ID")
	private Long instrumentId;
		
	@Column(name="ISSUE_NAME")
	private String issueName;
	
	@Column(name="CATEGORY")
	private String category;
	
	@Column(name="DATEBEGUN")
	private String dateBegun;
	
	@Column(name="SERIES")
	private String series;
	
	@Column(name="ROLE_CODE")
	private String roleCode;
	
	@JsonIgnore
	@Column(name="SORT_CRITERIA1")
	private Integer sortCriteria1;

	@JsonIgnore
	@Column(name="SORT_CRITERIA2")
	private String sortCriteria2;

	@JsonIgnore
	@Column(name="SORT_CRITERIA3")
	private String sortCriteria3;
	
	public UspfNonIssuerBasedRatingsIssue(Long entityId, Long instrumentId, String issueName, String category,
			String dateBegun, String series, Integer sortCriteria1, String sortCriteria2, String sortCriteria3) {
		super();
		this.entityId = entityId;
		this.instrumentId = instrumentId;
		this.issueName = issueName;
		this.category = category;
		this.dateBegun = dateBegun;
		this.series = series;
		this.sortCriteria1 = sortCriteria1;
		this.sortCriteria2 = sortCriteria2;
		this.sortCriteria3 = sortCriteria3;
	}

}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\entity\UspfPeerPortfolioData.java

package com.spglobal.ratings.ratingsdata.entity;

import java.sql.Timestamp;

import org.springframework.data.annotation.Immutable;

import com.fasterxml.jackson.annotation.JsonInclude;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.Id;
import jakarta.persistence.IdClass;
import jakarta.persistence.Table;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Entity
@Table(name = "VW_USPF_ECON_FIN_DATA", schema = "R360_APPDATA")
@Immutable
@Data
@IdClass(UspfPeerPortfolioDataComponentID.class)
@NoArgsConstructor
@AllArgsConstructor
@JsonInclude(JsonInclude.Include.ALWAYS)
public class UspfPeerPortfolioData {

	@Id
	@Column(name = "AS_ID")
	private Long asId;

	@Id
	@Column(name = "PRODUCT_CAPTION")
	private String productCaption;

	@Column(name = "DATA_ELEMENT")
	private String dataElement;

	@Id
	@Column(name = "DATA_ELEMENT_CODE")
	private String dataElementCode;
	
	@Id
	@Column(name = "FISCAL_YEAR")
	private Integer fiscalYear;

	@Column(name = "FINVALUE")
	private String finValue;

	@Column(name = "LAST_UPDATED_DATE")
	private Timestamp lastUpdatedDate;
	
	@Column(name = "PERIOD_END_DATE")
	private Timestamp periodEndDate;

	@Column(name = "DATA_ELEMENT_DEFINITION")
	private String dataElementDefinition;

	@Id
	@Column(name = "HEADING")
	private String heading;


	@Column(name = "SUB_HEADING")
	private String subHeading;
	
	@Column(name = "CURRENCY")
	private String currency;
	
	@Column(name = "PER_RANK")
	private Integer rankNum;

	@Id
	@Column(name = "SORT_ORDER")
	private Integer sortOrder;
}

class UspfPeerPortfolioDataComponentID {

	@Id
	@Column(name = "AS_ID")
	private Long asId;

	@Id
	@Column(name = "PRODUCT_CAPTION")
	private String productCaption;

	@Id
	@Column(name = "DATA_ELEMENT_CODE")
	private String dataElementCode;
	
	@Id
	@Column(name = "FISCAL_YEAR")
	private Integer fiscalYear;

	@Id
	@Column(name = "HEADING")
	private String heading;

	@Id
	@Column(name = "SORT_ORDER")
	private Integer sortOrder;

}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\entity\UspfPeerSuppliersPortfolioContents.java

package com.spglobal.ratings.ratingsdata.entity;

import java.io.Serializable;
import java.sql.Date;

import org.springframework.data.annotation.Immutable;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonProperty;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.Id;
import jakarta.persistence.Table;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Entity
@Table(name = "vw_uspf_peers_portfolio_contents", schema = "R360_APPDATA")
@Immutable
@Data
@NoArgsConstructor
@AllArgsConstructor
public class UspfPeerSuppliersPortfolioContents implements Serializable {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;

	@JsonProperty("obligor")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "OBLIGOR")
	private String obligor;

	@JsonProperty("issuer")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "ISSUER")
	private String issuer;

	@Id
	@JsonProperty("asId")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "AS_ID")
	private Long asId;

	@JsonProperty("asName")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "AS_NAME")
	private String asName;

	@JsonProperty("sectorCode")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "SECTOR_CODE")
	private String sectorCode;

	@JsonProperty("sector")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "SECTOR")
	private String sector;

	@JsonProperty("subSectorCode")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "SUB_SECTOR_CODE")
	private String subSectorCode;

	@JsonProperty("subSector")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "SUB_SECTOR")
	private String subSector;

	@JsonProperty("stateCode")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "STATE_CODE")
	private String stateCode;

	@JsonProperty("ratingTypeCode")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "RATING_TYPE_CODE")
	private String ratingTypeCode;

	@JsonProperty("ratingType")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "RATING_TYPE")
	private String ratingType;

	@JsonProperty("rating")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "RATING")
	private String rating;

	@JsonProperty("ratingDate")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "RATING_DATE")
	private Date ratingDate;

	@JsonProperty("creditwatchOutlook")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "CREDITWATCH_OUTLOOK")
	private String creditwatchOutlook;

	@JsonProperty("creditwatchOutlookDate")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "CREDITWATCH_OUTLOOK_DATE")
	private Date creditwatchOutlookDate;
	
	@JsonProperty("lastReviewDate")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "LAST_REVIEW_DATE")
	private Date lastReviewDate;

	@JsonProperty("obligorEntityId")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "OBLIGOR_ENTITY_ID")
	private String obligorEntityId;
	
	@JsonProperty("issuerEntityId")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "ISSUER_ENTITY_ID")
	private String issuerEntityId;
	
	@JsonProperty("financialsAvailable")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "FINANCIALS_AVAILABLE")
	private String financialsAvailable;

	@JsonProperty("asInstrumentId")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "AS_INSTRUMENT_ID")
	private String asInstrumentId;

	@JsonProperty("ratingDetailId")
	@JsonInclude(Include.ALWAYS)
	@Column(name = "RATING_DETAIL_ID")
	private Long ratingDetailId;
	
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\entity\UspfRatingCodes.java

package com.spglobal.ratings.ratingsdata.entity;

import org.springframework.data.annotation.Immutable;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.Id;
import jakarta.persistence.Table;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Entity
@Table(name = "RATING_CODES", schema = "SPAPP")
@Immutable
@Data
@NoArgsConstructor
@AllArgsConstructor
public class UspfRatingCodes {

	@Id
	@Column(name = "RATING_SYMBOL")
	private String ratingSymbol;

	@Column(name = "RATING_CATEGORY_CODE")
	private String ratingCategoryCode;

	@Column(name = "SORT_ORDER")
	private String sortOrder;

	@Column(name = "UPD_DATE")
	private String UpdDate;

	@Column(name = "UPD_ID")
	private String updId;

	@Column(name = "ACTIVE_IND")
	private String activeInd;

	@Column(name = "LONG_SHORT_IND")
	private String longShortInd;

	@Column(name = "SOURCE_SORT_ORDER")
	private String sourceSortOrder;

	@Column(name = "SYMBOL_GROUP")
	private String symbolGroup;

	@Column(name = "SYMBOL_GROUP_ORDER")
	private String symbolGroupOrder;
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\entity\UspfRatingsRoles.java

package com.spglobal.ratings.ratingsdata.entity;

import org.springframework.data.annotation.Immutable;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.Id;
import jakarta.persistence.Table;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Entity
@Table(name = "ROLE_CODES", schema = "SPAPP")
@Immutable
@Data
@NoArgsConstructor
@AllArgsConstructor
@JsonInclude(JsonInclude.Include.ALWAYS)
public class UspfRatingsRoles {
	
	@Id@Column(name="ROLE_CODE")
	private String roleCode;
	
	@Column(name="DESCRIPTION")
	private String roleDesc;
	
	@JsonIgnore
	@Column(name="ACTIVE_IND")
	private String activeInd;

}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\entity\UspfRelatedArticles.java

package com.spglobal.ratings.ratingsdata.entity;

import org.springframework.data.annotation.Immutable;

import com.fasterxml.jackson.annotation.JsonIgnore;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.Id;
import jakarta.persistence.Table;
import lombok.Data;
import lombok.NoArgsConstructor;

@Entity
@Data
@NoArgsConstructor
@Immutable
@Table(name = "VW_RELATED_ARTICLES", schema = "R360_APPDATA")
public class UspfRelatedArticles {
	
	@JsonIgnore
	@Column(name = "RELATE_ID")
	private Long relateId;
	
	@Id@Column(name = "ARTICLE_ID")
	private Long articleId;
	
	@Column(name = "ARTICLE_TITLE")
	private String title;
	
	@Column(name = "ARTICLE_TYPE")
	private String articleType;
	
	@Column(name = "ARTICLE_TYPE_ID")
	private Integer articleTypeId;
	
	@Column(name = "ARTICLE_DATE")
	private String articleDate;
	
	@Column(name = "ARTICLE_AUTHOR")
	private String author;
	
	@Column(name = "ABSTRACT")
	private String summary;

	public UspfRelatedArticles(Long relateId, Long articleId, String title, String articleType, Integer articleTypeId,
			String articleDate, String author) {
		//super();
		this.relateId = relateId;
		this.articleId = articleId;
		this.title = title;
		this.articleType = articleType;
		this.articleTypeId = articleTypeId;
		this.articleDate = articleDate;
		this.author = author;
		//this.summary = summary;
	}
		

	
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\entity\UspfRelatedCriteria.java

package com.spglobal.ratings.ratingsdata.entity;

import org.springframework.data.annotation.Immutable;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.Id;
import jakarta.persistence.Table;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Entity
@Data
@Immutable
@Table(name = "VW_RELATED_CRITERIA_USPF", schema = "R360_APPDATA")
@NoArgsConstructor
@AllArgsConstructor
@JsonInclude(JsonInclude.Include.ALWAYS)
public class UspfRelatedCriteria {
	
	@Column(name = "RATING_DETAIL_ID")
	private Long ratingDetailId;
	
	@Id@Column(name = "ARTICLE_ID")
	private Long articleId;
	
	@Column(name = "ARTICLE_TITLE")
	private String title;

	@Column(name = "ARTICLE_DATE")
	private String articleDate;
	
	@Column(name = "ARTICLE_AUTHOR")
	private String author;
	
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\entity\UspfStateLookup.java

package com.spglobal.ratings.ratingsdata.entity;

import java.io.Serializable;
import java.sql.Date;

import org.springframework.data.annotation.Immutable;

import com.fasterxml.jackson.annotation.JsonInclude;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.Id;
import jakarta.persistence.Table;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Entity
@Table(name = "R360_APP_STATE", schema = "R360_USER_PREF")
@Immutable
@Data
@NoArgsConstructor
@AllArgsConstructor
@JsonInclude(JsonInclude.Include.ALWAYS)
public class UspfStateLookup implements Serializable {

	private static final long serialVersionUID = 1L;

	@Id
	@Column(name = "STATE_CD")
	private String stateCd;

	@Column(name = "STATE_NAME")
	private String stateName;

	@Column(name = "COUNTRY_CD")
	private String countryCd;

	@Column(name = "RANK_ORDER_NUM")
	private Long rankOrderNum;

	@Column(name = "ACTV_FLAG")
	private String actvFlag;

	@Column(name = "CREATE_DTTM")
	private Date createdDate;

	@Column(name = "CREATE_USER")
	private String createdUser;

	@Column(name = "UPDATE_DTTM")
	private Date updatedDate;

	@Column(name = "UPDATE_USER")
	private String updatedUser;

}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\exception\ApiError.java

package com.spglobal.ratings.ratingsdata.exception;

import java.time.LocalDateTime;

import org.springframework.http.HttpStatus;
import org.springframework.http.HttpStatusCode;

import com.fasterxml.jackson.annotation.JsonFormat;

import lombok.Data;

@Data
public class ApiError {
	private HttpStatusCode status;
	@JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "dd-MM-yyyy hh:mm:ss")
	private LocalDateTime timestamp;
	private String message;
	private String debugMessage;

	public ApiError() {
		timestamp = LocalDateTime.now();
	}

	public ApiError(HttpStatus status) {
		this();
		this.status = status;
	}

	public ApiError(HttpStatus status, String message) {
		this();
		this.status = status;
		this.message = message;
	}

	public ApiError(HttpStatus status, Throwable ex) {
		this();
		this.status = status;
		this.message = "Unexpected error";
		this.debugMessage = ex.getLocalizedMessage();
	}
	
	public ApiError(HttpStatusCode status, Throwable ex) {
		this();
		this.status = status;
		this.message = "Unexpected error";
		this.debugMessage = ex.getLocalizedMessage();
	}

	public ApiError(HttpStatus status, String message, Throwable ex) {
		this();
		this.status = status;
		this.message = message;
		this.debugMessage = ex.getLocalizedMessage();
	}
	
	public ApiError(HttpStatusCode status, String message, Throwable ex) {
		this();
		this.status = status;
		this.message = message;
		this.debugMessage = ex.getLocalizedMessage();
	}
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\exception\ApplicationRuntimeException.java

package com.spglobal.ratings.ratingsdata.exception;

import org.springframework.http.HttpStatus;

public class ApplicationRuntimeException extends RuntimeException {
    /**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	private int status;
    private String errorCode;
    private String message;
    private HttpStatus httpStatus;

    public ApplicationRuntimeException() {
        super();
    }

    public ApplicationRuntimeException(String errorCode) {
        super();
        this.errorCode = errorCode;
    }

    public ApplicationRuntimeException(HttpStatus httpStatus, String message) {
        this(httpStatus, 0, httpStatus.toString(), message);
    }

    public ApplicationRuntimeException(HttpStatus httpStatus, int status, String errorCode, String message) {
        super(message);
        this.httpStatus = httpStatus;
        this.message = message;
        this.errorCode = errorCode;
        this.status = status;
    }

    public int getStatus() {
        return status;
    }

    public HttpStatus getHttpStatus() {
        return httpStatus;
    }

    public String getErrorCode() {
        return errorCode;
    }

    @Override
    public String getMessage() {
        return message;
    }
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\exception\AuthorizationException.java

package com.spglobal.ratings.ratingsdata.exception;

import org.springframework.http.HttpStatus;

public class AuthorizationException extends ApplicationRuntimeException
{

	private static final long serialVersionUID = 1L;

	public AuthorizationException(){
	}

	public AuthorizationException(String errorCode){
		super(errorCode);
	}

	public AuthorizationException(HttpStatus httpStatus, String message){
		super(httpStatus,message);
	}

}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\exception\GlobalExceptionHandler.java

package com.spglobal.ratings.ratingsdata.exception;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.client.HttpClientErrorException;
import org.springframework.web.client.HttpServerErrorException;


@ControllerAdvice
public class GlobalExceptionHandler {

	@ExceptionHandler(AuthorizationException.class)
	public ResponseEntity<Object> handleAuthorizationException(AuthorizationException e) {
		return buildResponseEntity(new ApiError(HttpStatus.UNAUTHORIZED, e));
	}

	@ExceptionHandler(HttpClientErrorException.class)
	public ResponseEntity<Object> handleHttpClientErrorException(HttpClientErrorException ex) {
		return buildResponseEntity(new ApiError(ex.getStatusCode(), ex));
	}

	@ExceptionHandler(HttpServerErrorException.class)
	public ResponseEntity<Object> handleHttpServerErrorException(HttpServerErrorException ex) {
		return buildResponseEntity(new ApiError(ex.getStatusCode(), ex));
	}
	
	@ExceptionHandler(ApplicationRuntimeException.class)
	public ResponseEntity<Object> handleApplicationRuntimeException(ApplicationRuntimeException ex) {
		return buildResponseEntity(new ApiError(ex.getHttpStatus(), ex));
	}

	private ResponseEntity<Object> buildResponseEntity(ApiError apiError) {
		return new ResponseEntity<>(apiError, apiError.getStatus());
	}
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\model\AnalystPeerVo.java

package com.spglobal.ratings.ratingsdata.model;

import com.fasterxml.jackson.annotation.JsonProperty;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@NoArgsConstructor
@AllArgsConstructor
public class AnalystPeerVo {

	@JsonProperty("KeyInstn")
	private String keyInstance;

	@JsonProperty("CapIQ")
	private String capIqId;

	@JsonProperty("FormOrder")
	private long formOrder;

	@JsonProperty("OIDVendor")
	private Long oidVendor;

	@JsonProperty("Id")
	private int id;

}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\model\DebtTypes.java

package com.spglobal.ratings.ratingsdata.model;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@NoArgsConstructor
@AllArgsConstructor
public class DebtTypes {
	
	@JsonProperty("debt_type_code")
	private String debtTypeCode;
	
	@JsonProperty("debt_type_description")
	private String debtTypeDescription;
	
	@JsonProperty("p_entity_id")
	private Long entityId;
	
	@JsonIgnore
	private Integer sortOrder;

}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\model\EntitiesPayload.java

package com.spglobal.ratings.ratingsdata.model;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.Data;

import java.io.Serializable;
import java.util.List;
@Data
@JsonIgnoreProperties(ignoreUnknown = true)
public class EntitiesPayload implements Serializable {
    private static final long serialVersionUID = 1L;
	@JsonProperty("keyInstns")
    private List<String> keyInstns;
    @JsonProperty("template")
    private String template;
    @JsonProperty("subSector")
    private  String subSector;
    @JsonProperty("pcFlag")
    private  Integer pcFlag;
    @JsonProperty("homeEntity")
    private String homeEntity;
    @JsonProperty("currency")
    private String currency;
    @JsonProperty("capiqs")
    private List<String> capiqIds;
    @JsonProperty("entityIds")
    private List<String> entityIds;
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\model\EntityTypeIdsRequest.java

package com.spglobal.ratings.ratingsdata.model;

import java.io.Serializable;
import java.util.List;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@NoArgsConstructor
@AllArgsConstructor
@JsonIgnoreProperties(ignoreUnknown = true)
public class EntityTypeIdsRequest implements Serializable{

	/**
	 * 
	 */
	private static final long serialVersionUID = -8031884894932548520L;
	private String entityType;
	private List<String> entityIds;
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\model\EntityTypeIdsResponse.java

package com.spglobal.ratings.ratingsdata.model;

import java.io.Serializable;
import java.util.Map;

import com.fasterxml.jackson.annotation.JsonInclude;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@NoArgsConstructor
@AllArgsConstructor
@JsonInclude(JsonInclude.Include.ALWAYS)
public class EntityTypeIdsResponse implements Serializable{
	
	/**
	 * 
	 */
	private static final long serialVersionUID = -7001640262506762041L;
	
	private String entityType;
	private Map<String,String> entityIdCapIQIdMap;
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\model\FinancialData.java

package com.spglobal.ratings.ratingsdata.model;

import jakarta.persistence.Column;
import jakarta.persistence.Id;
import jakarta.persistence.MappedSuperclass;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@MappedSuperclass
@Data
@NoArgsConstructor
@AllArgsConstructor
@JsonInclude(JsonInclude.Include.ALWAYS)
public class FinancialData implements Cloneable {
	@Id
	@JsonProperty("ID")
	private Long id;

	@Id
	@JsonProperty("DATA_ELEMENT_CD")
	private String dataElementCd;

	@JsonProperty("FIN_PERIOD_ID")
	@Column(name = "FIN_PERIOD_ID")
	private String finPeriodId;

	@JsonProperty("FIN_ENTITY_ID")
	@Column(name = "FIN_ENTITY_ID")
	private String finEntityId;

	@JsonProperty("FISCALYEAR")
	@Column(name = "FISCALYEAR")
	private String fiscalYear;

	@JsonProperty("CORE_ID")
	@Column(name = "CORE_ID")
	private Long coreId;

	@JsonProperty("PERIOD_STATE")
	@Column(name = "PERIOD_STATE")
	private String periodState;

	@JsonProperty("REPORTED_CURRENCY")
	@Column(name = "REPORTED_CURRENCY")
	private String reportedCurrency;

	@JsonProperty("PERIOD_END_DATE")
	@Column(name = "PERIOD_END_DATE")
	private String periodEndDate;

	@JsonProperty("LAST_UPDATED_DATE")
	@Column(name = "LAST_UPDATED_DATE")
	private String lastUpdatedDate;

	@JsonProperty("TEMPLATE_NAME")
	@Column(name = "TEMPLATE_NAME")
	private String templateName;
	
	@JsonProperty("DATA_POINT_VALUE")
	@Column(name = "DATA_POINT_VALUE")
	private Double dataPointValue;

	@JsonProperty("MAGNITUDE")
	@Column(name = "MAGNITUDE")
	private String magnitude;

	@JsonProperty("PRODUCT_DECIMAL")
	@Column(name = "PRODUCT_DECIMAL")
	private String productDecimal;
	
	@Override
	public FinancialData clone() {
		return new FinancialData(id, dataElementCd, finPeriodId, finEntityId, fiscalYear, coreId, periodState,
				reportedCurrency, periodEndDate, lastUpdatedDate, templateName, dataPointValue, magnitude,
				productDecimal);
	}
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\model\InstnNamesRequest.java

package com.spglobal.ratings.ratingsdata.model;

import java.util.List;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@NoArgsConstructor
@AllArgsConstructor
@JsonIgnoreProperties(ignoreUnknown = true)
public class InstnNamesRequest {
	private List<String> instnNames;
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\model\InstrumentsData.java

package com.spglobal.ratings.ratingsdata.model;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;

import lombok.AllArgsConstructor;
import lombok.Data;

@Data
@AllArgsConstructor
public class InstrumentsData {
	
	@JsonProperty("issue_name")
	private String issueName;
	
	@JsonProperty("Instrument_Id")
	private Long instrumentId;
	
	@JsonProperty("series")
	private String series;
	
	@JsonProperty("datebegun")
	@JsonIgnore
	private String datebegun;

	
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\model\InvestorSentimentSectorResponse.java

package com.spglobal.ratings.ratingsdata.model;

import java.util.ArrayList;
import java.util.List;

import jakarta.persistence.Column;
import jakarta.persistence.Id;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.spglobal.ratings.ratingsdata.entity.InvestorSentimentIndustry;
import com.spglobal.ratings.ratingsdata.entity.InvestorSentimentSectors;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@NoArgsConstructor
@AllArgsConstructor
public class InvestorSentimentSectorResponse {
	
	@JsonProperty("sectorDropdwnSelect")
	private InvestorSentimentIndustry sectorDropdwnSelect;
	
	@JsonProperty("sectorsList")
	private List<InvestorSentimentSectors> sectorsList;
	
	@JsonProperty("default_select_sector")
	private String defaultSelectSector;
	


}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\model\IssuesAndMaturitiesData.java

package com.spglobal.ratings.ratingsdata.model;

import java.util.List;

import com.spglobal.ratings.ratingsdata.entity.IssuesAndMaturities;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@NoArgsConstructor
@AllArgsConstructor
public class IssuesAndMaturitiesData {
	
	private String message;
	private boolean pcData;
	
	private List<IssuesAndMaturities> issuesAndMaturities;

}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\model\KeyRtgProfileSpecialization.java

package com.spglobal.ratings.ratingsdata.model;

import com.fasterxml.jackson.annotation.JsonProperty;

public class KeyRtgProfileSpecialization {
	@JsonProperty("KeyRtgProfileSpecialization")
	private Integer keyRtgProfileSpecialization;
	@JsonProperty("PrimarySpecialization")
	private boolean primarySpecialization;
	@JsonProperty("KeyOnlineAccount")
	private Integer keyOnlineAccount;
	@JsonProperty("RatingProfileSpecialization")
	private String  ratingProfileSpecialization;
	@JsonProperty("KeyAccountRatingProfileSpec")
	private String  keyAccountRatingProfileSpec;
	public Integer getKeyRtgProfileSpecialization() {
		return keyRtgProfileSpecialization;
	}
	public boolean isPrimarySpecialization() {
		return primarySpecialization;
	}
	public Integer getKeyOnlineAccount() {
		return keyOnlineAccount;
	}
	public String getRatingProfileSpecialization() {
		return ratingProfileSpecialization;
	}
	public String getKeyAccountRatingProfileSpec() {
		return keyAccountRatingProfileSpec;
	}

}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\model\PeersRatingArticlesPvtData.java

package com.spglobal.ratings.ratingsdata.model;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@NoArgsConstructor
@AllArgsConstructor
public class PeersRatingArticlesPvtData {
	
	private Long ratingArticlesCount;
	private boolean pcData;

}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\model\PrimaryOrgInfo.java

package com.spglobal.ratings.ratingsdata.model;

import java.io.Serializable;

import com.fasterxml.jackson.annotation.JsonProperty;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@NoArgsConstructor
@AllArgsConstructor
public class PrimaryOrgInfo implements Serializable {
    private static final long serialVersionUID = -8804488485586842833L;
	@JsonProperty("AccountInstn") 
    public Integer accountInstn;

    @JsonProperty("CapIQID")
    private Long capiqId;
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\model\ProfileInfo.java

package com.spglobal.ratings.ratingsdata.model;

import java.io.Serializable;

import com.fasterxml.jackson.annotation.JsonProperty;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@NoArgsConstructor
@AllArgsConstructor
public class ProfileInfo implements Serializable {
	private static final long serialVersionUID = 1161249738688488009L;
	@JsonProperty("OnlineUserCompanyTypeId")
	public int onlineUserCompanyTypeId;
	@JsonProperty("OnlineUserCompanyDepartmentId")
	public int onlineUserCompanyDepartmentId;
	@JsonProperty("OnlineUserCompanyRoleId")
	public int onlineUserCompanyRoleId;
	@JsonProperty("CurrentProfile")
	public String currentProfile;
	@JsonProperty("CurrentProfileId")
	public int currentProfileId;
	@JsonProperty("CurrentProfileSpecializationId")
	public int currentProfileSpecializationId;
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\model\ProvinceData.java

package com.spglobal.ratings.ratingsdata.model;

import com.fasterxml.jackson.annotation.JsonProperty;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@NoArgsConstructor
@AllArgsConstructor
public class ProvinceData {

	@JsonProperty("provinceName")
	private String provinceName;
	
	@JsonProperty("countryCode")
	private String countryCode;
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\model\R360UserProfileData.java

package com.spglobal.ratings.ratingsdata.model;

import java.io.Serializable;
import java.util.ArrayList;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@NoArgsConstructor
@AllArgsConstructor
@JsonIgnoreProperties(ignoreUnknown = true)
public class R360UserProfileData implements Serializable {
	private static final long serialVersionUID = -583812249299112729L;
	@JsonProperty("OnlineUserId")
	public Long onlineUserId;
	@JsonProperty("Email")
	public String email;
	@JsonProperty("FirstName")
	public String firstName;
	@JsonProperty("LastName")
	public String lastName;
	@JsonProperty("DepartmentName")
	public String departmentName;
	@JsonProperty("JobTitle")
	public String jobTitle;
	@JsonProperty("Culture")
	public int culture;
	@JsonProperty("CurrencyId")
	public String currencyId;
	@JsonProperty("MeasurementStandardId")
	public int measurementStandardId;
	@JsonProperty("DisplayDensityId")
	public int displayDensityId;
	@JsonProperty("TimeZone")
	public String timeZone;
	@JsonProperty("ProfileInfo")
	public ProfileInfo profileInfo;
	@JsonProperty("OnlineUserRoles")
	public int onlineUserRoles;
	@JsonProperty("OnlineUserConfigurations")
	public ArrayList<Long> onlineUserConfigurations;
	@JsonProperty("Rating360Info")
	public ArrayList<Rating360Info> rating360Info;
	public String profileHash;

	@JsonProperty("OrgInfo")
	public Rating360Info orgInfo;
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\model\Rating360Info.java

package com.spglobal.ratings.ratingsdata.model;

import java.io.Serializable;
import java.util.ArrayList;

import com.fasterxml.jackson.annotation.JsonProperty;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@NoArgsConstructor
@AllArgsConstructor
public class Rating360Info implements Serializable {
	private static final long serialVersionUID = 116124973868488009L;
	@JsonProperty("PrimaryOrgInfo")
	public PrimaryOrgInfo primaryOrgInfo;
	@JsonProperty("SecondaryOrgInfo")
	public ArrayList<SecondaryOrgInfo> secondaryOrgInfo;
	@JsonProperty("R360DirectConnect")
	public boolean r360DirectConnect;
	@JsonProperty("RtgProfileTypeId")
	public int rtgProfileTypeId;
	@JsonProperty("RtgProfileType")
	public String rtgProfileType;
	@JsonProperty("RtgProfileSpecialization")
	public ArrayList<RtgProfileSpecialization> rtgProfileSpecialization;
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\model\RatingArticlesData.java

package com.spglobal.ratings.ratingsdata.model;

import java.util.List;

import com.spglobal.ratings.ratingsdata.entity.RatingArticlesPublicPvt;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@NoArgsConstructor
@AllArgsConstructor
public class RatingArticlesData {
	
	private String message;
	private List<? extends RatingArticlesPublicPvt> ratingArticles;

}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\model\RatingArticlesDetailSearch.java

package com.spglobal.ratings.ratingsdata.model;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.Data;

import java.util.List;

@Data
@JsonIgnoreProperties(ignoreUnknown = true)
public class RatingArticlesDetailSearch {
    @JsonProperty(value = "entityId")
    private List<Long> entityId;

    @JsonProperty(value = "articleTypeIds")
    private List<Long> articleTypeIds;

    @JsonProperty(value = "count")
    private Integer count;

    @JsonProperty(value = "countryCode")
    private String countryCode;
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\model\RatingArticlesPeersData.java

package com.spglobal.ratings.ratingsdata.model;

import java.util.List;

import com.spglobal.ratings.ratingsdata.entity.RatingArticlesPublicPvtPeers;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@NoArgsConstructor
@AllArgsConstructor
public class RatingArticlesPeersData {
	
	private String message;
	private Long count;
	private List<? extends RatingArticlesPublicPvtPeers> ratingArticles;

}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\model\RatingArticlesSearch.java

package com.spglobal.ratings.ratingsdata.model;

import java.sql.Timestamp;
import java.util.List;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.spglobal.ratings.ratingsdata.util.TimestampDeserializer;
import com.spglobal.ratings.ratingsdata.util.TimestampSerializer;

import lombok.Data;

@Data
@JsonIgnoreProperties(ignoreUnknown = true)
public class RatingArticlesSearch {
	
	@JsonProperty(value = "entityId")
	private Long entityId;
	
	@JsonProperty(value = "articleTypeIds")
	private List<Long> articleTypeIds;
	
	@JsonProperty(value = "startArticleDate")
	@JsonDeserialize(using = TimestampDeserializer.class)
	@JsonSerialize(using = TimestampSerializer.class)
	private Timestamp startArticleDate;
	
	@JsonProperty(value = "endArticleDate")
	@JsonDeserialize(using = TimestampDeserializer.class)
	@JsonSerialize(using = TimestampSerializer.class)
	private Timestamp endArticleDate;
	
	@JsonProperty(value = "count")
	private Integer count;
	
	@JsonProperty(value = "countryCode")
	private String countryCode;
	
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\model\RatingArticlesSearchSSP.java

package com.spglobal.ratings.ratingsdata.model;

import java.sql.Timestamp;
import java.util.List;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.spglobal.ratings.ratingsdata.util.TimestampDeserializer;
import com.spglobal.ratings.ratingsdata.util.TimestampSerializer;

import lombok.Data;

@Data
@JsonIgnoreProperties(ignoreUnknown = true)
public class RatingArticlesSearchSSP {
	
	@JsonProperty(value = "entityIds")
	private List<Long> entityIds;
	
	@JsonProperty(value = "articleTypeIds")
	private List<Long> articleTypeIds;
	
	@JsonProperty(value = "startArticleDate")
	@JsonDeserialize(using = TimestampDeserializer.class)
	@JsonSerialize(using = TimestampSerializer.class)
	private Timestamp startArticleDate;
	
	@JsonProperty(value = "endArticleDate")
	@JsonDeserialize(using = TimestampDeserializer.class)
	@JsonSerialize(using = TimestampSerializer.class)
	private Timestamp endArticleDate;
	
	@JsonProperty(value = "count")
	private Integer count;
	
	@JsonProperty(value = "countryCode")
	private String countryCode;
	
	@JsonProperty(value = "pageNumber")
	private Integer pageNumber;
	
	@JsonProperty(value = "sortOrder")
	private String sortOrder;
	
	@JsonProperty(value = "sortBy")
	private String sortBy;
	
	@JsonProperty(value = "searchText")
	private String searchText;
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\model\RatingDistRatingCodes.java

package com.spglobal.ratings.ratingsdata.model;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@AllArgsConstructor
@NoArgsConstructor
public class RatingDistRatingCodes {
    private Long sourceSortOrder;
    private String ratingsSymbol;
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\model\RatingHistoryData.java

package com.spglobal.ratings.ratingsdata.model;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@NoArgsConstructor
@AllArgsConstructor
@JsonIgnoreProperties(ignoreUnknown = true)
public class RatingHistoryData {
	private String commaSepOrgIds;
	private Integer pcFlag;
	private Long keyInstsn;
	private Long capiqId;
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\model\Ratings360Info.java

package com.spglobal.ratings.ratingsdata.model;

import com.fasterxml.jackson.annotation.JsonProperty;

import java.util.List;

public class Ratings360Info {

	@JsonProperty("SecondaryKeyInstns")
	private List<Integer> secondaryKeyInstns;
	@JsonProperty("PrimaryAccountInstn")
	private Integer primaryAccountInstn;
	@JsonProperty("keyRtgProfileType")
	private Integer keyRtgProfileType;
	@JsonProperty("R360DirectConnect")
	private boolean r360DirectConnect;
	@JsonProperty("RtgProfileType")
	private String rtgProfileType;
	@JsonProperty("KeyRtgProfileSpecialization")
	private List<KeyRtgProfileSpecialization> keyRtgProfileSpecialization;
	public List<Integer> getSecondaryKeyInstns() {
		return secondaryKeyInstns;
	}
	public Integer getPrimaryAccountInstn() {
		return primaryAccountInstn;
	}

	public Integer getKeyRtgProfileType() {
		return keyRtgProfileType;
	}

	public boolean isR360DirectConnect() {
		return r360DirectConnect;
	}

	public String getRtgProfileType() {
		return rtgProfileType;
	}

	public List<KeyRtgProfileSpecialization> getKeyRtgProfileSpecialization() {
		return keyRtgProfileSpecialization;
	}

}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\model\RatingsData.java

package com.spglobal.ratings.ratingsdata.model;

import java.util.List;

import com.spglobal.ratings.ratingsdata.entity.EntityRatings;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@NoArgsConstructor
@AllArgsConstructor
public class RatingsData {
	
	private String message;
	private boolean pcData;
	
	private List<EntityRatings> entityRatings;

}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\model\ReconciliationData.java

package com.spglobal.ratings.ratingsdata.model;

import jakarta.persistence.Column;
import jakarta.persistence.Id;
import jakarta.persistence.MappedSuperclass;
import jakarta.persistence.Transient;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@MappedSuperclass
@Data
@NoArgsConstructor
@AllArgsConstructor
@JsonInclude(JsonInclude.Include.ALWAYS)
public class ReconciliationData {

	@Id
	@Column(name = "FIN_DATA_POINT_ID")
	@JsonProperty("FIN_DATA_POINT_ID")
	private Long finDataPointId;
	
	@Id
	@JsonProperty("ID")
	private Long id;

	@JsonProperty("CORE_ID")
	@Column(name = "CORE_ID")
	private Long coreId;

	@Id
	@JsonProperty("DATA_ELEMENT_CD")
	private String dataElementCd;

	@JsonProperty("FIN_PERIOD_ID")
	@Column(name = "FIN_PERIOD_ID")
	private String finPeriodId;

	@JsonProperty("FISCALYEAR")
	@Column(name = "FISCALYEAR")
	private String fiscalYear;

	@JsonProperty("PRODUCT_CAPTION")
	@Column(name = "FILENAME_DATAPOINTNAME")
	private String fileName_DataPointName;

	@JsonProperty("DATA_POINT_VALUE")
	@Column(name = "DATA_POINT_VALUE")
	private Double dataPointValue;

	@JsonProperty("SECTION_NAME")
	@Column(name = "FILENAME_SECTIONNAME")
	private String sectionName;

	@JsonProperty("REPORTED_CURRENCY")
	@Column(name = "REPORTED_CURRENCY")
	private String reportedCurrency;

	@JsonProperty("PERIOD_START_DATE")
	@Column(name = "DATEBEGUN")
	private String periodStartDate;

	@JsonProperty("PERIOD_END_DATE")
	@Column(name = "DATEENDED")
	private String periodEndDate;

	@JsonProperty("FORMORDER")
	@Column(name = "FORMORDER")
	private Integer formOrder;

	@JsonProperty("MAGNITUDE")
	@Column(name = "MAGNITUDE")
	private String magnitude;

	@JsonProperty("PERIOD_STATE")
	@Column(name = "RATINGREVIEWSTATUS")
	private String periodState;

	@JsonProperty("CSDLASTUPDATE")
	@Column(name = "CSDLASTUPDATE")
	private String csdLastUpdate;

	@JsonProperty("PERIOD_TYPE_CD")
	@Column(name = "PERIOD_TYPE_CD")
	private String periodTypeCD;

	@JsonProperty("DATA_SOURCE")
	@Column(name = "DATA_SOURCE_SYSTEM")
	private String dataSource;
	
	@Transient
	@JsonProperty("TARGET_CURRENCY")
	private String trgCurrency;
	
	@JsonProperty("MAGNITUDEMULTIPLIER")
	@Column(name = "MAGNITUDEMULTIPLIER")
	private String magnitudeMultiplier;
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\model\ReconciliationPartiuclarPeriodData.java

package com.spglobal.ratings.ratingsdata.model;

import java.util.ArrayList;
import java.util.Map;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@NoArgsConstructor
@AllArgsConstructor
@JsonInclude(JsonInclude.Include.ALWAYS)
public class ReconciliationPartiuclarPeriodData {

	@JsonProperty("FIN_DATA_POINT_ID")
	private Long finDataPointId;

	@JsonProperty("DATA_ELEMENT_CD")
	private String dataElementCd;

	@JsonProperty("PRODUCT_CAPTION")
	private String fileName_DataPointName;

	@JsonProperty("DATA_POINT_VALUE")
	private Double dataPointValue;

	@JsonProperty("SECTION_NAME")
	private String sectionName;

	@JsonProperty("FORMORDER")
	private Integer formOrder;
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\model\ReconciliationPeriodData.java

package com.spglobal.ratings.ratingsdata.model;

import java.util.ArrayList;
import java.util.Map;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@NoArgsConstructor
@AllArgsConstructor
@JsonInclude(JsonInclude.Include.ALWAYS)
public class ReconciliationPeriodData {
	@JsonProperty("FIN_PERIOD_ID")
	private String finPeriodId;

	@JsonProperty("FISCALYEAR")
	private String fiscalYear;

	@JsonProperty("PERIOD_START_DATE")
	private String periodStartDate;

	@JsonProperty("PERIOD_END_DATE")
	private String periodEndDate;

	@JsonProperty("PERIOD_TYPE_CD")
	private String periodTypeCD;

	@JsonProperty("REPORTED_CURRENCY")
	private String reportedCurrency;

	@JsonProperty("PERIOD_STATE")
	private String periodState;

	@JsonProperty("CSDLASTUPDATE")
	private String csdLastUpdate;

	@JsonProperty("data")
	private ArrayList<ReconciliationPartiuclarPeriodData> data;
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\model\ReconciliationResponseData.java

package com.spglobal.ratings.ratingsdata.model;

import java.util.Map;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@NoArgsConstructor
@AllArgsConstructor
@JsonInclude(JsonInclude.Include.ALWAYS)
@JsonIgnoreProperties(ignoreUnknown = true)
public class ReconciliationResponseData {

	@JsonProperty("CORE_ID")
	private Long coreId;

	@JsonProperty("MAGNITUDE")
	private String magnitude;

	@JsonProperty("MAGNITUDEMULTIPLER")
	private String magnitudeMultipler;

	@JsonProperty("DATA_SOURCE")
	private String dataSource;

	@JsonProperty("TARGET_CURRENCY")
	private String trgCurrency;
	
	private Map<String, ReconciliationPeriodData> periodData;
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\model\Response.java

package com.spglobal.ratings.ratingsdata.model;

import lombok.Data;

@Data
public class Response<T> {

	private String name;
	
	private String description;
	
	private Status status;
	
	private String message;
	
	private T elements;
	
	private T value;

	public enum Status {
		SUCCESS, FAILURE , NOT_FOUND
	}

}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\model\ResponseSSP.java

package com.spglobal.ratings.ratingsdata.model;

import lombok.Data;

@Data
public class ResponseSSP<T> {

	private String name;
	
	private String description;
	
	private Status status;
	
	private String message;
	
	private Long count;
	
	private T elements;

	public enum Status {
		SUCCESS, FAILURE
	}

}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\model\RPMCriteria.java

package com.spglobal.ratings.ratingsdata.model;

import com.fasterxml.jackson.annotation.JsonProperty;

import lombok.AllArgsConstructor;
import lombok.Data;

@Data
public class RPMCriteria {

	@JsonProperty("Pub_date")
	private String PubDate;

	@JsonProperty("Pub_date_dbFormat")
	private String PubDateDbFormat;

	@JsonProperty("LinxId")
	private String linxId;

	@JsonProperty("LinxRevId")
	private String linxRevId;

	@JsonProperty("Name")
	private String name;

}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\model\RtgProfileSpecialization.java

package com.spglobal.ratings.ratingsdata.model;

import java.io.Serializable;

import com.fasterxml.jackson.annotation.JsonProperty;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@NoArgsConstructor
@AllArgsConstructor
public class RtgProfileSpecialization implements Serializable {
	private static final long serialVersionUID = 1430248636330274565L;
	@JsonProperty("RatingProfileSpecializationId") 
    public int ratingProfileSpecializationId;
    @JsonProperty("PrimarySpecialization") 
    public boolean primarySpecialization;
    @JsonProperty("RatingProfileSpecialization") 
    public String ratingProfileSpecialization;
    @JsonProperty("UserRtgProfileSpecId") 
    public int userRtgProfileSpecId;
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\model\SecondaryOrgInfo.java

package com.spglobal.ratings.ratingsdata.model;

import java.io.Serializable;

import com.fasterxml.jackson.annotation.JsonProperty;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@NoArgsConstructor
@AllArgsConstructor
public class SecondaryOrgInfo implements Serializable {
  	private static final long serialVersionUID = -6140895717611104267L;
	@JsonProperty("AccountInstn") 
    public Integer accountInstn;

	@JsonProperty("CapIQID")
	private Long capiqId;
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\model\SectorSubSectorData.java

package com.spglobal.ratings.ratingsdata.model;

import com.fasterxml.jackson.annotation.JsonProperty;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@NoArgsConstructor
@AllArgsConstructor
public class SectorSubSectorData {

	@JsonProperty("sectorCode")
	private String sectorCode;

	@JsonProperty("sectorName")
	private String sectorName;

	@JsonProperty("subSectorCode")
	private String subSectorCode;

	@JsonProperty("subSectorName")
	private String subSectorName;

}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\model\StateAndProvince.java

package com.spglobal.ratings.ratingsdata.model;

import java.io.Serializable;
import java.util.List;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;

import lombok.Data;

@Data
@JsonIgnoreProperties(ignoreUnknown = true)
public class StateAndProvince implements Serializable {
	
	private static final long serialVersionUID = 1L;
	@JsonProperty("uspfStatesData")
	private List<UspfStateData> uspfStatesData;
	@JsonProperty("provinceData")
	private List<ProvinceData> provinceData;
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\model\UserProfileData.java

package com.spglobal.ratings.ratingsdata.model;

import java.io.Serializable;
import java.util.List;

import lombok.Getter;
import lombok.Setter;

@Getter
@Setter
public class UserProfileData implements Serializable {
	private static final long serialVersionUID = -8681834450209178069L;
	private Long userId;
	private List<Long> onlineConfigurations;
	private Integer primaryEntity;
	private List<Integer> secondaryEntities;

	//capiq logic changes
	private Long primaryOrgCapiqId;
	private List<Long> secondaryOrgCapiqIds;
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\model\UserProfileR360Data.java

package com.spglobal.ratings.ratingsdata.model;

import java.util.List;

import com.fasterxml.jackson.annotation.JsonProperty;

public class UserProfileR360Data {

	@JsonProperty("KeyOnlineUser")
	private Long keyOnlineUser;
	@JsonProperty("OnlineConfigurations")
	private List<Long> onlineConfigurations;

	@JsonProperty("Ratings360Info")
	private Ratings360Info ratings360Info;

	public List<Long> getOnlineConfigurations() {
		return onlineConfigurations;
	}

	public void setOnlineConfigurations(List<Long> onlineConfigurations) {
		this.onlineConfigurations = onlineConfigurations;
	}

	public Ratings360Info getRatings360Info() {
		return ratings360Info;
	}

	public void setRatings360Info(Ratings360Info ratings360Info) {
		this.ratings360Info = ratings360Info;
	}

	public Long getKeyOnlineUser() {
		return keyOnlineUser;
	}
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\model\UspfFilterData.java

package com.spglobal.ratings.ratingsdata.model;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;

import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.NotEmpty;
import lombok.Data;

import java.io.Serializable;
import java.util.List;

@Data
@JsonIgnoreProperties(ignoreUnknown = true)
public class UspfFilterData implements Serializable {
	private static final long serialVersionUID = 1L;
	@NotBlank(message = "The field sector is required.")
	@JsonProperty("sector")
	private String sector;
	@NotBlank(message = "The field subSector is required.")
	@JsonProperty("subSector")
	private String subSector;
	@NotEmpty(message = "The field geography must not be empty")
	@JsonProperty("geography")
	private List<String> geography;
	@NotBlank(message = "The field ratingType is required.")
	@JsonProperty("ratingType")
	private String ratingType;
	@NotEmpty(message = "The field ratingScale must not be empty")
	@JsonProperty("ratingScale")
	private List<String> ratingScale;
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\model\UspfFilterDropdownData.java

package com.spglobal.ratings.ratingsdata.model;

import java.io.Serializable;
import java.util.Arrays;
import java.util.List;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;

import lombok.Data;

@Data
@JsonIgnoreProperties(ignoreUnknown = true)
public class UspfFilterDropdownData implements Serializable {
	
	private static final long serialVersionUID = 1L;
	@JsonProperty("sectorSubSector")
	private List<SectorSubSectorData> sectorSubSector;
	@JsonProperty("uspfStatesData")
	private List<UspfStateData> uspfStatesData;
	@JsonProperty("ratingTypes")
	private List<String> ratingTypes= Arrays.asList("STDLONG","STDSHORT");
	@JsonProperty("shortRatingData")
	private List<String> shortRatingData;
	@JsonProperty("longRatingData")
	private List<String> longRatingData;
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\model\USPFMinMaxDates.java

package com.spglobal.ratings.ratingsdata.model;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@NoArgsConstructor
@AllArgsConstructor
public class USPFMinMaxDates {
	
	private Long asId;
	private Integer fromYear;
	private Integer toYear;

}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\model\UspfNonIssuerBasedFilterData.java

package com.spglobal.ratings.ratingsdata.model;

import java.io.Serializable;
import java.util.List;
import java.util.Optional;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;

import lombok.Data;

@Data
@JsonIgnoreProperties(ignoreUnknown = true)
public class UspfNonIssuerBasedFilterData implements Serializable{
	
	private Long entityId;
	private List<String> role;
	private boolean issueNameOnly;
	private List<String> category;
	private String keyword;
	private Integer maturityYearFrom;
	private Integer maturityYearTo;

}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\model\UspfStateData.java

package com.spglobal.ratings.ratingsdata.model;

import com.fasterxml.jackson.annotation.JsonProperty;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@NoArgsConstructor
@AllArgsConstructor
public class UspfStateData {

	@JsonProperty("stateCode")
	private String stateCode;

	@JsonProperty("stateName")
	private String stateName;
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\r360\generic\wrapper\exception\SanitizeException.java

package com.spglobal.ratings.ratingsdata.r360.generic.wrapper.exception;

import org.springframework.http.HttpStatus;

public class SanitizeException extends RuntimeException {
	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	private int status;
	private String errorCode;
	private String message;
	private HttpStatus httpStatus;

	public SanitizeException() {
		super();
	}

	public SanitizeException(String errorCode) {
		super();
		this.errorCode = errorCode;
	}

	public SanitizeException(HttpStatus httpStatus, String message) {
		this(httpStatus, 0, httpStatus.toString(), message);
	}

	public SanitizeException(HttpStatus httpStatus, int status, String errorCode, String message) {
		super(message);
		this.httpStatus = httpStatus;
		this.message = message;
		this.errorCode = errorCode;
		this.status = status;
	}

	public int getStatus() {
		return status;
	}

	public HttpStatus getHttpStatus() {
		return httpStatus;
	}

	public String getErrorCode() {
		return errorCode;
	}

	@Override
	public String getMessage() {
		return message;
	}
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\r360\generic\wrapper\interceptor\AsymmetricKeyConfig.java

package com.spglobal.ratings.ratingsdata.r360.generic.wrapper.interceptor;

import java.security.KeyFactory;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.spec.PKCS8EncodedKeySpec;
import java.security.spec.X509EncodedKeySpec;
import java.util.Base64;

import javax.crypto.Cipher;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.SecretKeySpec;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

@Configuration
public class AsymmetricKeyConfig {

	@Value("${encryption.rsa.private-key}")
	private String privateKeyStr;

	@Value("${encryption.rsa.public-key}")
	private String publicKeyStr;


	@Value("${r360.key.decryption}")
	private String r360Decryption;
	
	@Value("${r360.key.decryption_rs}")
	private String r360DecryptionRS;
	
	@Bean
	public PrivateKey privateKey() throws Exception {
		byte[] keyBytes = Base64.getDecoder().decode(privateKeyStr);
		PKCS8EncodedKeySpec spec = new PKCS8EncodedKeySpec(keyBytes);
		KeyFactory kf = KeyFactory.getInstance("RSA");
		return kf.generatePrivate(spec);
	}

	@Bean
	public PublicKey publicKey() throws Exception {
		byte[] keyBytes = Base64.getDecoder().decode(publicKeyStr);
		X509EncodedKeySpec spec = new X509EncodedKeySpec(keyBytes);
		KeyFactory kf = KeyFactory.getInstance("RSA");
		return kf.generatePublic(spec);
	}

	public String decrypt(String encryptedData) throws Exception {
		try {
			PrivateKey privateKey = loadPrivateKey(privateKeyStr);
			Cipher cipher = Cipher.getInstance(r360DecryptionRS);
			cipher.init(Cipher.DECRYPT_MODE, privateKey);
			byte[] encryptedBytes1 = Base64.getDecoder().decode(encryptedData);
			byte[] decryptedBytes1 = cipher.doFinal(encryptedBytes1);
			return new String(decryptedBytes1);
		} catch (Exception e) {
			return encryptedData;
		}
	}

	public String decryptRequestBody(String encryptedData, String symmetricKey) throws Exception {
		try {
			byte[] keyBytes = hexToByteArray(symmetricKey);
			SecretKeySpec secretKeySpec = new SecretKeySpec(keyBytes, "AES");
			IvParameterSpec ivParameterSpec = new IvParameterSpec(keyBytes);

			Cipher cipher = Cipher.getInstance(r360Decryption);
			cipher.init(Cipher.DECRYPT_MODE, secretKeySpec, ivParameterSpec);

			byte[] encryptedBytes = Base64.getDecoder().decode(encryptedData);
			byte[] decryptedBytes = cipher.doFinal(encryptedBytes);
			String decryptedText = new String(decryptedBytes, "UTF-8");
			return decryptedText;
		} catch (Exception e) {
			return encryptedData;
		}
	}

	private byte[] hexToByteArray(String hexString) {
		int length = hexString.length();
		byte[] data = new byte[length / 2];
		for (int i = 0; i < length; i += 2) {
			data[i / 2] = (byte) ((Character.digit(hexString.charAt(i), 16) << 4)
					+ Character.digit(hexString.charAt(i + 1), 16));
		}
		return data;
	}
	
	private static PrivateKey loadPrivateKey(String base64PrivateKey) throws Exception {
		byte[] keyBytes = Base64.getDecoder().decode(base64PrivateKey);
		PKCS8EncodedKeySpec spec = new PKCS8EncodedKeySpec(keyBytes);
		KeyFactory keyFactory = KeyFactory.getInstance("RSA");
		return keyFactory.generatePrivate(spec);
	}
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\r360\generic\wrapper\interceptor\FilterConfig.java

package com.spglobal.ratings.ratingsdata.r360.generic.wrapper.interceptor;

import org.springframework.boot.web.servlet.FilterRegistrationBean;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

@Configuration
public class FilterConfig {
	@Autowired
	private AsymmetricKeyConfig asymmetricKeyConfig;

	@Bean
    public FilterRegistrationBean<XSSFilter> xssFilterRegistration() throws Exception {
        FilterRegistrationBean<XSSFilter> registrationBean = new FilterRegistrationBean<>();
        registrationBean.setFilter(new XSSFilter(asymmetricKeyConfig));
        registrationBean.addUrlPatterns("/*");
        return registrationBean;
    }
}



C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\r360\generic\wrapper\interceptor\RequestPartWrapper.java

package com.spglobal.ratings.ratingsdata.r360.generic.wrapper.interceptor;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.nio.charset.StandardCharsets;
import java.util.Collection;

import jakarta.servlet.http.Part;

public class RequestPartWrapper implements Part {
	private final Part originalPart;
	private final String sanitizedContent;

	public RequestPartWrapper(Part originalPart, String sanitizedContent) {
		this.originalPart = originalPart;
		this.sanitizedContent = sanitizedContent;
	}

	@Override
	public InputStream getInputStream() throws IOException {
		return new ByteArrayInputStream(sanitizedContent.getBytes(StandardCharsets.UTF_8));
	}

	@Override
	public String getName() {
		return originalPart.getName();
	}

	@Override
	public String getContentType() {
		return originalPart.getContentType();
	}

	@Override
	public String getSubmittedFileName() {
		return originalPart.getSubmittedFileName();
	}

	@Override
	public long getSize() {
		return sanitizedContent.getBytes(StandardCharsets.UTF_8).length;
	}

	@Override
	public void write(String fileName) throws IOException {
		originalPart.write(fileName);
	}

	@Override
	public void delete() throws IOException {
		originalPart.delete();
	}

	@Override
	public String getHeader(String name) {
		return originalPart.getHeader(name);
	}

	@Override
	public Collection<String> getHeaders(String name) {
		return originalPart.getHeaders(name);
	}

	@Override
	public Collection<String> getHeaderNames() {
		return originalPart.getHeaderNames();
	}

}



C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\r360\generic\wrapper\interceptor\SanitizeException.java

package com.spglobal.ratings.ratingsdata.r360.generic.wrapper.interceptor;

import org.springframework.http.HttpStatus;

public class SanitizeException extends RuntimeException {
	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	private int status;
	private String errorCode;
	private String message;
	private HttpStatus httpStatus;

	public SanitizeException() {
		super();
	}

	public SanitizeException(String errorCode) {
		super();
		this.errorCode = errorCode;
	}

	public SanitizeException(HttpStatus httpStatus, String message) {
		this(httpStatus, 0, httpStatus.toString(), message);
	}

	public SanitizeException(HttpStatus httpStatus, int status, String errorCode, String message) {
		super(message);
		this.httpStatus = httpStatus;
		this.message = message;
		this.errorCode = errorCode;
		this.status = status;
	}

	public int getStatus() {
		return status;
	}

	public HttpStatus getHttpStatus() {
		return httpStatus;
	}

	public String getErrorCode() {
		return errorCode;
	}

	@Override
	public String getMessage() {
		return message;
	}
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\r360\generic\wrapper\interceptor\WebSecurityConfig.java

package com.spglobal.ratings.ratingsdata.r360.generic.wrapper.interceptor;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.web.SecurityFilterChain;

@EnableWebSecurity
@Configuration
public class WebSecurityConfig {

	@Bean
	public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
		http.headers(h -> h.contentSecurityPolicy(c ->c.policyDirectives( "script-src 'self'")));
		http.csrf(csrf -> csrf.disable());
		return http.build();
	}
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\r360\generic\wrapper\interceptor\XSSFilter.java

package com.spglobal.ratings.ratingsdata.r360.generic.wrapper.interceptor;

import java.io.IOException;
import java.io.InputStream;

import org.owasp.validator.html.AntiSamy;
import org.owasp.validator.html.Policy;

import jakarta.servlet.Filter;
import jakarta.servlet.FilterChain;
import jakarta.servlet.FilterConfig;
import jakarta.servlet.ServletException;
import jakarta.servlet.ServletRequest;
import jakarta.servlet.ServletResponse;
import jakarta.servlet.http.HttpServletRequest;
import lombok.extern.slf4j.Slf4j;

@Slf4j
public class XSSFilter implements Filter {

	private AsymmetricKeyConfig asymmetricKeyConfig;
	
	private final AntiSamy antiSamy;
	private final Policy policy;
	private InputStream policyStream;

	public XSSFilter(AsymmetricKeyConfig asymmetricKeyConfig) throws Exception {
		this.asymmetricKeyConfig = asymmetricKeyConfig;
		this.policyStream = getClass().getClassLoader().getResourceAsStream("antisamy-slashdot.xml");
		this.policy = Policy.getInstance(this.policyStream);
		this.antiSamy = new AntiSamy();
	}

	@Override
	public void init(FilterConfig filterConfig) throws ServletException {
		// Initialization if needed
	}

	@Override
	public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)
			throws IOException, ServletException {
		if (request instanceof HttpServletRequest) {
			try {
				HttpServletRequest httpRequest = (HttpServletRequest) request;
				XSSRequestWrapper wrappedRequest = new XSSRequestWrapper(httpRequest, antiSamy, policy, asymmetricKeyConfig);
				chain.doFilter(wrappedRequest, response);
			} catch (Exception e) {
				log.error("Exception in the sanitization process {}", e.getMessage());
				// Any exception during sanity process dont break flow, resume it
				chain.doFilter(request, response);
			}
		} else {
			chain.doFilter(request, response);
		}
	}

	@Override
	public void destroy() {
		if (this.policyStream != null) {
			try {
				this.policyStream.close();
			} catch (IOException e) {
				log.error("Failed to close the antisamy policy stream: {}", e.getMessage());
			}
		}
	}
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\r360\generic\wrapper\interceptor\XSSRequestWrapper.java

package com.spglobal.ratings.ratingsdata.r360.generic.wrapper.interceptor;

import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

import org.owasp.validator.html.AntiSamy;
import org.owasp.validator.html.CleanResults;
import org.owasp.validator.html.Policy;
import org.springframework.http.HttpStatus;
import org.springframework.util.ObjectUtils;
import org.springframework.web.util.HtmlUtils;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;

import jakarta.servlet.ReadListener;
import jakarta.servlet.ServletException;
import jakarta.servlet.ServletInputStream;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletRequestWrapper;
import jakarta.servlet.http.Part;
import lombok.extern.slf4j.Slf4j;
@Slf4j
public class XSSRequestWrapper extends HttpServletRequestWrapper {

	private final AntiSamy antiSamy;
	private String sanitizedContent;
	private boolean isEncrypted = false;
	private final Policy policy;
	AsymmetricKeyConfig asymmetricKeyConfig;
	Map<String, String[]> modifiedParams;
	private String symmetricKey;
	private static final List<String> HEADERS_TO_REMOVE = List.of("isencrypted", "x-custom-encrypted-key" , "content-length");
	private final ObjectMapper objectMapper = new ObjectMapper();
	private boolean isRequestPartsProcessed;
	private boolean isRequestRequestURI;

	public XSSRequestWrapper(HttpServletRequest request, AntiSamy antiSamy, Policy policy,
			AsymmetricKeyConfig asymmetricKeyConfig) {
		super(request);
		this.antiSamy = antiSamy;
		this.policy = policy;
		this.asymmetricKeyConfig = asymmetricKeyConfig;
		this.isEncrypted = Boolean.parseBoolean(request.getHeader("isEncrypted"));
		this.symmetricKey = request.getHeader("x-custom-encrypted-key");
		this.sanitizedContent = sanitizeContent(request);
		this.isRequestPartsProcessed = false;
		this.isRequestRequestURI = false; 
	}

	@Override
	public Enumeration<String> getHeaderNames() {
		Enumeration<String> headerNames = super.getHeaderNames();
		List<String> headerList = Collections.list(headerNames);
		List<String> filteredHeaders = headerList.stream()
				.filter(header -> !HEADERS_TO_REMOVE.contains(header.toLowerCase())).collect(Collectors.toList());
		return Collections.enumeration(filteredHeaders);
	}

	@Override
	public String getHeader(String name) {
		if (HEADERS_TO_REMOVE.contains(name)) {
			return null; // Or return a default value if required
		}
		return super.getHeader(name);
	}

	@Override
	public Collection<Part> getParts() throws IOException, ServletException {
		Collection<Part> parts = super.getParts();
		if (!this.isRequestPartsProcessed) {
			Collection<Part> sanitizedParts = new ArrayList<>();

			for (Part part : parts) {
				if (!isFilePart(part)) {
					String sanitizedContent = sanitize(part);
					sanitizedParts.add(new RequestPartWrapper(part, sanitizedContent));
				} else {
					sanitizedParts.add(part);
				}
			}
			this.isRequestPartsProcessed = true;
			return sanitizedParts;
		}
		return parts;
	}

	
	private String sanitize(Part part) throws IOException {
		InputStream inputStream = null;
		try {
			inputStream = part.getInputStream();
			byte[] contentBytes = inputStream.readAllBytes();
			return sanitize(contentBytes.toString(), false, true);
		} catch (IOException inputException) {
			log.error("error on file upload {} ", inputException.getLocalizedMessage());
			throw inputException;
		} finally {
			if (inputStream != null) {
				safeClose(inputStream);
			}
		}
	}

	private void safeClose(InputStream fis) {
		if (fis != null) {
			try {
				fis.close();
			} catch (IOException ioError) {
				log.error("error on closing input stream in safeClose {} ", ioError.getLocalizedMessage());
			}
		}
	}

	private boolean isFilePart(Part part) {
	    String contentType = part.getContentType();
	    String contentDisposition = part.getHeader("Content-Disposition");

	    // Check both the content type and the presence of a filename in the Content-Disposition header
	    return (contentType != null && !contentType.startsWith("text")) ||
	           (contentDisposition != null && contentDisposition.contains("filename="));
	}

	private String sanitizeContent(HttpServletRequest request) {
		String sanitizedCont = "";
		try {
			this.setCustomHeaders(request);
			if (!ObjectUtils.isEmpty(request.getInputStream())) {
				String body = new BufferedReader(
						new InputStreamReader(request.getInputStream(), StandardCharsets.UTF_8)).lines()
								.collect(Collectors.joining("\n"));
				return sanitize(body, true, false);
			}
		} catch (Exception e) {
			log.error("Exception in sanitizeContent while sanitize body {} {}", e.getMessage(), e.getStackTrace());
			throw new SanitizeException(HttpStatus.INTERNAL_SERVER_ERROR,
					"Failed to sanitize request body" + e.getMessage());
		}
		return sanitizedCont;
	}

	private void setCustomHeaders(HttpServletRequest request) {
		modifiedParams = new HashMap<String, String[]>();
		modifiedParams.putAll(request.getParameterMap());
		if (isEncrypted) {
			final String prefix = "x-encrypted-";
			List<String> headersList = Collections.list(request.getHeaderNames());
			for (String headerValue : headersList) {
				String headerString = headerValue.toString();
				if (headerString.toLowerCase().startsWith(prefix)) {
					modifiedParams.remove(headerString.substring(prefix.length()));
					modifiedParams.put(headerString.substring(prefix.length()),
							new String[] { request.getHeader(headerString) });
				}
			}
		}
	}

	@Override
	public String[] getParameterValues(String parameter) {
		String[] values = super.getParameterValues(parameter);

		if (values == null) {
			return null;
		}

		int count = values.length;
		String[] sanitizedValues = new String[count];
		String[] modifiedValue = modifiedParams.get(parameter);

		for (int i = 0; i < count; i++) {
			if (!values[i].equalsIgnoreCase(modifiedValue[i])) {
				sanitizedValues[i] = sanitize(modifiedValue[i], false, false);
			} else {
				sanitizedValues[i] = sanitize(values[i], false, false);
			}
		}
		return sanitizedValues;
	}
	@Override
	public Map<String, String[]> getParameterMap() {
		Map<String, String[]> sanitizedMap = new HashMap<>();

		for (Map.Entry<String, String[]> entry : modifiedParams.entrySet()) {
			String[] sanitizedValues = new String[entry.getValue().length];
			for (int i = 0; i < entry.getValue().length; i++) {
				if (entry.getKey().equals("INPUT")) {
					sanitizedValues[i] = sanitize(entry.getValue()[i], false, true);
				} else {
					sanitizedValues[i] = sanitize(entry.getValue()[i], false, false);
				}
			}
			sanitizedMap.put(sanitize(entry.getKey(), false, false), sanitizedValues);
		}
		return sanitizedMap;
	}


	@Override
	public ServletInputStream getInputStream() throws IOException {
		ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(sanitizedContent.getBytes());
		return new ServletInputStream() {
			@Override
			public boolean isFinished() {
				return byteArrayInputStream.available() == 0;
			}

			@Override
			public boolean isReady() {
				return true;
			}

			@Override
			public void setReadListener(ReadListener listener) {
				// No implementation needed
			}

			@Override
			public int read() throws IOException {
				return byteArrayInputStream.read();
			}
		};
	}

	@Override
	public BufferedReader getReader() throws IOException {
		return new BufferedReader(new InputStreamReader(getInputStream()));
	}

	private String sanitize(String input, boolean isRequestBody, boolean isRequestPart) {
		if (ObjectUtils.isEmpty(input)) {
			return "";
		}
		try {
			if (isEncrypted) {
				if (isRequestBody) {
					String decryptedKey = asymmetricKeyConfig.decrypt(symmetricKey);
					JsonNode jsonNode = objectMapper.readTree(input);
					String keyValue = jsonNode.path("data").asText();
					input = asymmetricKeyConfig.decryptRequestBody(keyValue, decryptedKey);
				} if (isRequestPart) {
					String decryptedKey = asymmetricKeyConfig.decrypt(symmetricKey);
					input = asymmetricKeyConfig.decryptRequestBody(input, decryptedKey);
					input = converToJson(input);
				} else {
					input = asymmetricKeyConfig.decrypt(input);
				}
			}
			return sanitizeAndGetValue(input);

		} catch (Exception e) {
			log.error("Exception in sanitize body Decryption {} {}", e.getMessage(), e.getStackTrace());
			throw new SanitizeException(HttpStatus.INTERNAL_SERVER_ERROR, "Failed to sanitize input:" + e.getMessage());
		}
	}
	
	private String converToJson(String input) {
		if (ObjectUtils.isEmpty(input)) {
			return input;
		}
		try {
			ObjectMapper objectMapper = new ObjectMapper();
			JsonNode jsonNode = objectMapper.readTree(input);
			return jsonNode.asText();
		} catch (Exception e) {
			return input;
		}
	}

	private String sanitizeAndGetValue(String input) {
		try {
			if (ObjectUtils.isEmpty(input)) {
				return "";
			}
			CleanResults cleanResults = antiSamy.scan(input, policy, AntiSamy.DOM);
			String cleanValues = cleanResults.getCleanHTML();
			if (!ObjectUtils.isEmpty(cleanValues)) {
				cleanValues = HtmlUtils.htmlUnescape(cleanValues);
			}
			return cleanValues;
		} catch (Exception e) {
			log.error("Exception in sanitizeAndGetValue while sanitize body {} {}", e.getMessage(), e.getStackTrace());
			throw new SanitizeException(HttpStatus.INTERNAL_SERVER_ERROR, "Failed to sanitize input:" + e.getMessage());
		}
	}
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\RatingsDataApplication.java

package com.spglobal.ratings.ratingsdata;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.cache.annotation.EnableCaching;
import org.springframework.scheduling.annotation.EnableScheduling;

@SpringBootApplication
@EnableScheduling
@EnableCaching
public class RatingsDataApplication {
	public static void main(String[] args) {
		SpringApplication.run(RatingsDataApplication.class, args);
	}
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\repository\AnalystPeerRepository.java

package com.spglobal.ratings.ratingsdata.repository;

import java.util.List;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;
import com.spglobal.ratings.ratingsdata.entity.AnalystPeerInfo;

@Repository
public interface AnalystPeerRepository extends JpaRepository<AnalystPeerInfo, Long> {
	
	public List<AnalystPeerInfo> findByKeyInstnId(String keyInstnId);
	
	public List<AnalystPeerInfo> findByCoreId(Long coreId);
	
	public List<AnalystPeerInfo> findByCoreIdAndKeyInstnId(Long coreId, String keyInstnId);

	List<AnalystPeerInfo> findByCapiqId(String capiqId);


}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\repository\ArticlePDFRepository.java

package com.spglobal.ratings.ratingsdata.repository;

import java.util.Optional;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import com.spglobal.ratings.ratingsdata.entity.ArticlePDFDetails;

@Repository
public interface ArticlePDFRepository extends JpaRepository<ArticlePDFDetails, Long> {
	
	Optional<ArticlePDFDetails> findByArticleId(Long articleId);
	
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\repository\CLOABSContactsRepository.java

package com.spglobal.ratings.ratingsdata.repository;

import java.util.List;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import com.spglobal.ratings.ratingsdata.entity.CLOABSContacts;



@Repository
public interface CLOABSContactsRepository extends JpaRepository<CLOABSContacts, Long> {

	public List<CLOABSContacts> findByEntityIdAndSubSectorCodeAndContactType(@Param("entityId") Long entityId,@Param("subSectorCode") String subSectorCode,
			@Param("contactType") String contactType);
	
	public List<CLOABSContacts> findByEntityIdAndSubSectorCode(@Param("entityId") Long entityId,
			@Param("subSectorCode") String subSectorCode);

}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\repository\ConfigDetailsRepository.java

package com.spglobal.ratings.ratingsdata.repository;

import java.util.List;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import com.spglobal.ratings.ratingsdata.entity.ConfigDetails;

@Repository
public interface ConfigDetailsRepository extends JpaRepository<ConfigDetails, String[]>{

  public ConfigDetails findByConfigKey(String configKey);
  public List<ConfigDetails> findByConfigKeys(@Param("configKeys") List<String> configKeys);
	
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\repository\ContactsRepository.java

package com.spglobal.ratings.ratingsdata.repository;

import java.util.List;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import com.spglobal.ratings.ratingsdata.entity.Contacts;

@Repository
public interface ContactsRepository extends JpaRepository<Contacts, Long> {

	public List<Contacts> findByEntityIdAndContactType(@Param("entityId") Long entityId,
			@Param("contactType") String contactType);

}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\repository\CoreOrgIdKeyInstnMapRepository.java

package com.spglobal.ratings.ratingsdata.repository;

import java.util.List;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import com.spglobal.ratings.ratingsdata.entity.CoreOrgIdKeyInstnMap;

@Repository("CoreOrgIdKeyInstnMappingRepo")
public interface CoreOrgIdKeyInstnMapRepository extends JpaRepository<CoreOrgIdKeyInstnMap, String[]>{
	
	public List<CoreOrgIdKeyInstnMap> findByFinsIdentifier(@Param("keyInstnIds") List<String> keyInstnIds);

	public CoreOrgIdKeyInstnMap getByFinsIdentifier(@Param("finsIdentifier") String finsIdentifier);

	@Query("select e from CoreOrgIdKeyInstnMap e where e.capIQFinsIdentifier in (:capiqIds)")
	List<CoreOrgIdKeyInstnMap> getOrgIdByCapiqIds(@Param("capiqIds") List<String> capiqIds);

	CoreOrgIdKeyInstnMap findByCapIQId(@Param("capiqId") String capiQId);


}




C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\repository\CoreOrgIdKeyInstnSPIdMapRepository.java

package com.spglobal.ratings.ratingsdata.repository;

import java.util.List;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import com.spglobal.ratings.ratingsdata.entity.CoreOrgIdKeyInstnSPIdMap;

@Repository
public interface CoreOrgIdKeyInstnSPIdMapRepository extends JpaRepository<CoreOrgIdKeyInstnSPIdMap, String> {

	@Query("select e from CoreOrgIdKeyInstnSPIdMap e where e.coreFinsIdentifier in (:coreIds)")
	List<CoreOrgIdKeyInstnSPIdMap> getCapIQIdsByCoreIds(@Param("coreIds") List<String> coreIds);
	
	@Query("select e from CoreOrgIdKeyInstnSPIdMap e where e.finsIdentifier in (:snlIds)")
	List<CoreOrgIdKeyInstnSPIdMap> getCapIQIdsBySnlIds(@Param("snlIds") List<String> snlIds);
	
	@Query("select e from CoreOrgIdKeyInstnSPIdMap e where e.spFinsIdentifier in (:spIds)")
	List<CoreOrgIdKeyInstnSPIdMap> getCapIQIdsBySpIds(@Param("spIds") List<String> spIds);
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\repository\CriteriaArticleRepository.java

package com.spglobal.ratings.ratingsdata.repository;

import java.util.List;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;

import com.spglobal.ratings.ratingsdata.entity.CriteriaTypeLookupEntity;

public interface CriteriaArticleRepository extends JpaRepository<CriteriaTypeLookupEntity, String> {
	
	@Query("SELECT a FROM CriteriaTypeLookupEntity a WHERE a.actvFlag='Y'")
	public List<CriteriaTypeLookupEntity> findAll();

}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\repository\CriteriaArticleRepositoryByTypes.java

package com.spglobal.ratings.ratingsdata.repository;

import com.spglobal.ratings.ratingsdata.entity.CriteriaArticlesByTypes;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import java.util.List;
@Repository
public interface CriteriaArticleRepositoryByTypes extends JpaRepository<CriteriaArticlesByTypes, String> {
   public List<CriteriaArticlesByTypes> findCriteriaArticlesByTypes(@Param("criteriaTypeId") List<String> criteriaTypeId, @Param("archiveInd") String archiveInd);
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\repository\CurrencyExchangeRateRepository.java

package com.spglobal.ratings.ratingsdata.repository;

import java.util.List;
import java.util.Set;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import com.spglobal.ratings.ratingsdata.entity.CurrencyExchangeRate;

@Repository
public interface CurrencyExchangeRateRepository extends JpaRepository<CurrencyExchangeRate, Long> {

	@Query(value = "WITH temp_dates\r\n" + "     AS (SELECT FIN_PERIOD_ID,\r\n"
			+ "                         REPORTED_CURRENCY,\r\n"
			+ "                         PERIOD_END_DATE\r\n"
			+ "           FROM SPGIPRODUCT.FIN_PERIOD\r\n"
			+ "          WHERE FIN_PERIOD_ID IN (:finPeriodIds)),\r\n" + "     MINPERIOD\r\n"
			+ "     AS (SELECT ADD_MONTHS (MIN (PERIOD_END_DATE), -1) PERIOD_END_DATE\r\n"
			+ "           FROM temp_dates),\r\n" + "     exchange_rate_src\r\n" + "     AS (SELECT *\r\n"
			+ "           FROM (SELECT msrc.*,\r\n" + "tw.fin_period_id, tw.period_end_date,\r\n"
			+ "                        ROW_NUMBER ()\r\n"
			+ "                        OVER (PARTITION BY tw.fin_period_id, tw.period_end_date\r\n"
			+ "                              ORDER BY msrc.date_id DESC)\r\n" + "                           rno\r\n"
			+ "                   FROM fxrt.exchange_rate msrc, temp_dates tw, MINPERIOD MP\r\n"
			+ "                  WHERE     msrc.exch_rate_type_code = 'FIXING'\r\n"
			+ "                        AND msrc.best_rate_flag = 'Y'\r\n"
			+ "                        AND msrc.EXCH_RATE_DATE BETWEEN MP.PERIOD_END_DATE\r\n"
			+ "                                                    AND tw.period_end_date\r\n"
			+ "                        AND msrc.base_curr_code = tw.reported_currency\r\n"
			+ "                        AND msrc.target_curr_code = 'USD')\r\n" + "          WHERE rno = 1),\r\n"
			+ "     exchange_rate_trg\r\n" + "     AS (SELECT *\r\n" + "           FROM (SELECT msrc.*,\r\n"
			+ "                        tw.period_end_date,\r\n" + "                        ROW_NUMBER ()\r\n"
			+ "                        OVER (PARTITION BY tw.fin_period_id, tw.period_end_date\r\n"
			+ "                              ORDER BY msrc.date_id DESC)\r\n" + "                           rno, \r\n"
			+ "		tw.FIN_PERIOD_ID \r\n"
			+ "                   FROM fxrt.exchange_rate msrc, temp_dates tw, MINPERIOD MP\r\n"
			+ "                  WHERE     msrc.exch_rate_type_code = 'FIXING'\r\n"
			+ "                        AND msrc.best_rate_flag = 'Y'\r\n"
			+ "                        AND msrc.EXCH_RATE_DATE BETWEEN MP.PERIOD_END_DATE\r\n"
			+ "                                                    AND tw.period_end_date\r\n"
			+ "                        AND msrc.base_curr_code = 'USD'\r\n"
			+ "                        AND msrc.target_curr_code = :trgCurrency)\r\n" + "          WHERE rno = 1)\r\n"
			+ "SELECT mtrg.FIN_PERIOD_ID AS EXCH_RATE_ID,\r\n" + "       msrc.DATE_ID,\r\n" + "       msrc.base_curr_code,\r\n"
			+ "       mtrg.target_curr_code,\r\n" + "       msrc.price_type_code,\r\n"
			+ "       msrc.exch_rate_type_code,\r\n"
			+ "       (msrc.exch_rate_val * mtrg.exch_rate_val) EXCH_RATE_VAL,\r\n"
			+ "       msrc.period_end_date exch_rate_date,\r\n" + "       msrc.ACTUAL_DATE_ID,\r\n"
			+ "       msrc.DATA_SOURCE_CODE,\r\n" + "       msrc.XWALK_CURR_CODE,\r\n" + "       msrc.DERIVED_FLAG,\r\n"
			+ "       msrc.best_rate_flag,\r\n" + "       msrc.SOURCE_UPD_TSTMP,\r\n"
			+ "       msrc.LAST_UPD_TSTMP       \r\n" + "  FROM exchange_rate_src msrc, exchange_rate_trg mtrg\r\n"
			+ " WHERE msrc.period_end_date = mtrg.period_end_date and msrc.fin_period_id = mtrg.fin_period_id", nativeQuery = true)
	List<CurrencyExchangeRate> getMinorCurrencyConversionWithRange(@Param("finPeriodIds") Set<Long> finPeriodIds,
			@Param("trgCurrency") String trgCurrency);

	
	@Query(value = "WITH temp_dates AS (SELECT FIN_PERIOD_ID, REPORTED_CURRENCY, PERIOD_END_DATE FROM SPGIPRODUCT.FIN_PERIOD "
			+ "WHERE FIN_PERIOD_ID IN (:finPeriodIds)), "
			+ "exchange_rate_src  AS (SELECT * FROM "
			+ "(SELECT msrc.*,tw.fin_period_id,tw.period_end_date FROM fxrt.exchange_rate msrc, temp_dates tw "
			+ "WHERE msrc.exch_rate_type_code = 'FIXING' AND msrc.best_rate_flag = 'Y' AND msrc.EXCH_RATE_DATE = tw.period_end_date "
			+ "AND msrc.base_curr_code = tw.reported_currency AND msrc.target_curr_code = 'USD')), "
			+ "exchange_rate_trg  AS (SELECT * FROM "
			+ "(SELECT msrc.*, tw.period_end_date, tw.FIN_PERIOD_ID FROM "
			+ "fxrt.exchange_rate msrc, temp_dates tw WHERE "
			+ "msrc.exch_rate_type_code = 'FIXING' AND msrc.best_rate_flag = 'Y' AND msrc.EXCH_RATE_DATE = tw.period_end_date AND msrc.base_curr_code = 'USD'AND msrc.target_curr_code = :trgCurrency)) "
			+ "SELECT mtrg.FIN_PERIOD_ID AS EXCH_RATE_ID,msrc.DATE_ID,msrc.base_curr_code,mtrg.target_curr_code,msrc.price_type_code, msrc.exch_rate_type_code, "
			+ "(msrc.exch_rate_val * mtrg.exch_rate_val) as EXCH_RATE_VAL, msrc.period_end_date as exch_rate_date,msrc.ACTUAL_DATE_ID,msrc.DATA_SOURCE_CODE,msrc.XWALK_CURR_CODE,msrc.DERIVED_FLAG,msrc.best_rate_flag,msrc.SOURCE_UPD_TSTMP,msrc.LAST_UPD_TSTMP "
			+ "FROM exchange_rate_src msrc, exchange_rate_trg mtrg "
			+ "WHERE msrc.period_end_date = mtrg.period_end_date and msrc.fin_period_id = mtrg.fin_period_id", nativeQuery = true)
	List<CurrencyExchangeRate> getMinorCurrencyConversion(@Param("finPeriodIds") Set<Long> finPeriodIds,
			@Param("trgCurrency") String trgCurrency);

	@Query(value = "WITH temp_dates\r\n" + "     AS (SELECT FIN_PERIOD_ID,\r\n"
			+ "                         REPORTED_CURRENCY,\r\n"
			+ "                         PERIOD_END_DATE\r\n"
			+ "           FROM SPGIPRODUCT.FIN_PERIOD\r\n"
			+ "          WHERE FIN_PERIOD_ID IN (:finPeriodIds)),\r\n" + "     MINPERIOD\r\n"
			+ "     AS (SELECT ADD_MONTHS (MIN (PERIOD_END_DATE), -1) PERIOD_END_DATE\r\n"
			+ "           FROM temp_dates)\r\n" + "SELECT *\r\n"
			+ "  FROM (SELECT tw.FIN_PERIOD_ID AS EXCH_RATE_ID,\r\n" + "               msrc.DATE_ID,\r\n"
			+ "               msrc.base_curr_code,\r\n" + "               msrc.target_curr_code,\r\n"
			+ "               msrc.price_type_code,\r\n" + "               msrc.exch_rate_type_code,\r\n"
			+ "               msrc.exch_rate_val,\r\n" + "               tw.period_end_date exch_rate_date,\r\n"
			+ "               msrc.ACTUAL_DATE_ID,\r\n" + "               msrc.DATA_SOURCE_CODE,\r\n"
			+ "               msrc.XWALK_CURR_CODE,\r\n" + "               msrc.DERIVED_FLAG,\r\n"
			+ "               msrc.best_rate_flag,\r\n" + "               msrc.SOURCE_UPD_TSTMP,\r\n"
			+ "               msrc.LAST_UPD_TSTMP,\r\n" + "               ROW_NUMBER ()\r\n"
			+ "               OVER (PARTITION BY tw.fin_period_id, tw.period_end_date\r\n"
			+ "                     ORDER BY msrc.date_id DESC)\r\n" + "                  rno\r\n"
			+ "          FROM fxrt.exchange_rate msrc, temp_dates tw, MINPERIOD MP\r\n"
			+ "         WHERE     msrc.exch_rate_type_code = 'FIXING'\r\n"
			+ "               AND msrc.best_rate_flag = 'Y'\r\n"
			+ "               AND msrc.EXCH_RATE_DATE BETWEEN MP.PERIOD_END_DATE\r\n"
			+ "                                           AND tw.period_end_date\r\n"
			+ "               AND msrc.base_curr_code = tw.reported_currency\r\n"
			+ "               AND msrc.target_curr_code = :trgCurrency)\r\n" + " WHERE rno = 1", nativeQuery = true)
	List<CurrencyExchangeRate> getMajorCurrencyConversionWithRange(@Param("finPeriodIds") Set<Long> finPeriodIds,
			@Param("trgCurrency") String trgCurrency);
	
	@Query(value = "WITH temp_dates       AS (SELECT FIN_PERIOD_ID, REPORTED_CURRENCY, PERIOD_END_DATE FROM SPGIPRODUCT.FIN_PERIOD "
			+ "WHERE FIN_PERIOD_ID IN (:finPeriodIds)) "
			+ "SELECT * FROM "
			+ "(SELECT "
			+ "tw.FIN_PERIOD_ID AS EXCH_RATE_ID,msrc.DATE_ID,msrc.base_curr_code,msrc.target_curr_code,msrc.price_type_code,msrc.exch_rate_type_code,msrc.exch_rate_val,tw.period_end_date exch_rate_date, "
			+ "msrc.ACTUAL_DATE_ID,msrc.DATA_SOURCE_CODE,msrc.XWALK_CURR_CODE,msrc.DERIVED_FLAG,msrc.best_rate_flag,msrc.SOURCE_UPD_TSTMP,msrc.LAST_UPD_TSTMP "
			+ "FROM fxrt.exchange_rate msrc, temp_dates tw "
			+ "WHERE msrc.exch_rate_type_code = 'FIXING' AND msrc.best_rate_flag = 'Y' "
			+ "AND msrc.EXCH_RATE_DATE = tw.period_end_date AND msrc.base_curr_code = tw.reported_currency AND msrc.target_curr_code = :trgCurrency)" , nativeQuery = true)
	List<CurrencyExchangeRate> getMajorCurrencyConversion(@Param("finPeriodIds") Set<Long> finPeriodIds,
			@Param("trgCurrency") String trgCurrency);
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\repository\CurrencyLookupRepository.java

package com.spglobal.ratings.ratingsdata.repository;

import java.util.List;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import com.spglobal.ratings.ratingsdata.entity.CurrencyLookupEntity;

@Repository
public interface CurrencyLookupRepository extends JpaRepository<CurrencyLookupEntity, String> {

	@Query("SELECT clp FROM CurrencyLookupEntity clp WHERE clp.activeFlag = 'A' ORDER BY clp.isoCurrencyCode")
	public List<CurrencyLookupEntity> findByCurrencyLookup();
	
	public CurrencyLookupEntity findByIsoCurrencyCode(@Param("isoCurrencyCode") String isoCurrencyCode);
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\repository\DashboardMyRatingRepository.java

package com.spglobal.ratings.ratingsdata.repository;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import com.spglobal.ratings.ratingsdata.entity.DashBoardMyRating;

@Repository("DashboardMyRatingRepository")
public interface DashboardMyRatingRepository extends JpaRepository<DashBoardMyRating, Long> {
	
	public DashBoardMyRating findByEntityId(@Param("entityId") Long entityId);

}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\repository\DefinitionsConfigRepository.java

package com.spglobal.ratings.ratingsdata.repository;

import java.util.List;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;
import org.springframework.transaction.annotation.Transactional;

import com.spglobal.ratings.ratingsdata.entity.DefinitionsConfig;

@Transactional
@Repository("DefinitionsConfigRepository")
public interface DefinitionsConfigRepository extends JpaRepository<DefinitionsConfig, Long> {

	@Query("SELECT c FROM DefinitionsConfig c WHERE c.analyticCaseType ='IST' and c.dataElementGroup  in ('Scores','Modifiers') order by sortOrder ASC")
	List<DefinitionsConfig> getDefinitions();

	@Query("SELECT c FROM DefinitionsConfig c WHERE lower(c.analyticCaseType) = :analyticCaseType and (:dataElementType is null or ( lower(c.dataElementType) IN :dataElementType) ) and (:dataElementGroup is null or ( lower(c.dataElementGroup) IN :dataElementGroup)) order by sortOrder ASC")
	List<DefinitionsConfig> getDefinitions(@Param("analyticCaseType") String analyticCaseType,
			@Param("dataElementType") List<String> dataElementType,
			@Param("dataElementGroup") List<String> dataElementGroup);

}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\repository\DeriveRatingRepository.java

package com.spglobal.ratings.ratingsdata.repository;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import com.spglobal.ratings.ratingsdata.entity.DeriveRating;

@Repository("DeriveRatingRepository")
public interface DeriveRatingRepository extends JpaRepository<DeriveRating, Long> {

	@Query(value = "select dr from DeriveRating dr where dr.ratingId = :ratingDetailId and dr.activeFlag = 'Y'")
	public DeriveRating getDeriveRatingByRatingDetailId(@Param("ratingDetailId") Long ratingDetailId);

}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\repository\ElementMasterRepository.java

package com.spglobal.ratings.ratingsdata.repository;

import java.util.List;

import org.springframework.cache.annotation.Cacheable;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import com.spglobal.ratings.ratingsdata.entity.MNemonicDetailsEntity;
import com.spglobal.ratings.ratingsdata.util.RedisConstants;

@Repository
public interface ElementMasterRepository extends JpaRepository<MNemonicDetailsEntity, String>{

	@Query("SELECT pde FROM MNemonicDetailsEntity pde WHERE lower(pde.templateName) = :templateName ORDER BY sortOrder")
    @Cacheable(value = RedisConstants.MNEMONIC_CACHE_CACHE , unless="#result.isEmpty()")
	public List<MNemonicDetailsEntity> findByTemplateName(@Param("templateName") String templateName);
	
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\repository\EntityCurrentRatingPublicRepo.java

package com.spglobal.ratings.ratingsdata.repository;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import com.spglobal.ratings.ratingsdata.entity.EntityCurrentRatingPublic;

@Repository("EntityCurrentRatingPublicRepo")
public interface EntityCurrentRatingPublicRepo extends JpaRepository<EntityCurrentRatingPublic, Long >{
	
	public EntityCurrentRatingPublic findByEntityId(@Param("entityId") Long entityId);
	
}



C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\repository\EntityCurrentRatingRepository.java

package com.spglobal.ratings.ratingsdata.repository;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import com.spglobal.ratings.ratingsdata.entity.EntityCurrentRating;

@Repository("EntityCurrentRatingRepo")
public interface EntityCurrentRatingRepository extends JpaRepository<EntityCurrentRating, Long >{
	
	public EntityCurrentRating findByEntityId(@Param("entityId") Long entityId);
	
}



C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\repository\EntityRatingsHistoryPublicRepository.java

package com.spglobal.ratings.ratingsdata.repository;

import java.util.List;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import com.spglobal.ratings.ratingsdata.entity.EntityRatingsHistoryPublic;
import com.spglobal.ratings.ratingsdata.entity.RatingsId;

@Repository("EntityRatingsHistoryPublicRepo")
public interface EntityRatingsHistoryPublicRepository extends JpaRepository<EntityRatingsHistoryPublic, RatingsId>{
	
	public List<EntityRatingsHistoryPublic> findByEntityIdAndDebtTypeCodeAndRatingTypeCode(@Param("entityId") Long entityId, @Param("debtTypeCode") String debtTypeCode, @Param("ratingTypeCode") String ratingTypeCode);

}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\repository\EntityRatingsHistoryRepository.java

package com.spglobal.ratings.ratingsdata.repository;

import java.util.List;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import com.spglobal.ratings.ratingsdata.entity.EntityRatingsHistory;
import com.spglobal.ratings.ratingsdata.entity.RatingsId;

@Repository("EntityRatingsHistoryRepo")
public interface EntityRatingsHistoryRepository extends JpaRepository<EntityRatingsHistory, RatingsId>{
	
	public List<EntityRatingsHistory> findByEntityIdAndDebtTypeCodeAndRatingTypeCode(@Param("entityId") Long entityId, @Param("debtTypeCode") String debtTypeCode, @Param("ratingTypeCode") String ratingTypeCode);

}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\repository\EntityRatingsHistoryTACRepo.java

package com.spglobal.ratings.ratingsdata.repository;

import java.util.List;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import com.spglobal.ratings.ratingsdata.entity.EntityRatingsHistoryTAC;
import com.spglobal.ratings.ratingsdata.entity.RatingsId;

@Repository("EntityRatingsHistoryTACRepo")
public interface EntityRatingsHistoryTACRepo extends JpaRepository<EntityRatingsHistoryTAC, RatingsId>{
	
	public List<EntityRatingsHistoryTAC> findByEntityIdAndDebtTypeCodeAndRatingTypeCode(@Param("entityId") Long entityId, @Param("debtTypeCode") String debtTypeCode, @Param("ratingTypeCode") String ratingTypeCode);

}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\repository\EntityRatingsHistTACPubRepo.java

package com.spglobal.ratings.ratingsdata.repository;

import java.util.List;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import com.spglobal.ratings.ratingsdata.entity.EntityRatingsHistTACPub;
import com.spglobal.ratings.ratingsdata.entity.RatingsId;

@Repository("EntityRatingsHistTACPubRepo")
public interface EntityRatingsHistTACPubRepo extends JpaRepository<EntityRatingsHistTACPub, RatingsId>{
	
	public List<EntityRatingsHistTACPub> findByEntityIdAndDebtTypeCodeAndRatingTypeCode(@Param("entityId") Long entityId, @Param("debtTypeCode") String debtTypeCode, @Param("ratingTypeCode") String ratingTypeCode);

}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\repository\EntityRatingsPublicRepository.java

package com.spglobal.ratings.ratingsdata.repository;

import java.util.List;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import com.spglobal.ratings.ratingsdata.entity.EntityRatingsPublic;
import com.spglobal.ratings.ratingsdata.entity.RatingsId;

@Repository("EntityRatingsPublicRepo")
public interface EntityRatingsPublicRepository extends JpaRepository<EntityRatingsPublic, RatingsId>{
	
	public List<EntityRatingsPublic> findByEntityId(@Param("entityId") Long entityId);
	
	public EntityRatingsPublic findByEntityIdAndRatingDetailId(@Param("entityId") Long entityId, @Param("ratingDetailId") Long ratingDetailId);

}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\repository\EntityRatingsRepository.java

package com.spglobal.ratings.ratingsdata.repository;

import java.util.List;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import com.spglobal.ratings.ratingsdata.entity.EntityRatings;
import com.spglobal.ratings.ratingsdata.entity.RatingsId;

@Repository("EntityRatingsRepo")
public interface EntityRatingsRepository extends JpaRepository<EntityRatings, RatingsId> {
	
	public List<EntityRatings> findByEntityId(@Param("entityId") Long entityId);
	
	public EntityRatings findByEntityIdAndRatingDetailId(@Param("entityId") Long entityId, @Param("ratingDetailId") Long ratingDetailId);

}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\repository\EntityRatingsTACPublicRepo.java

package com.spglobal.ratings.ratingsdata.repository;

import java.util.List;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import com.spglobal.ratings.ratingsdata.entity.EntityRatingsTACPublic;
import com.spglobal.ratings.ratingsdata.entity.RatingsId;

@Repository("EntityRatingsTACPublicRepo")
public interface EntityRatingsTACPublicRepo extends JpaRepository<EntityRatingsTACPublic, RatingsId >{
	
	public List<EntityRatingsTACPublic> findByEntityId(@Param("entityId") Long entityId);
	
}



C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\repository\EntityRatingsTACPvtRepo.java

package com.spglobal.ratings.ratingsdata.repository;

import java.util.List;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import com.spglobal.ratings.ratingsdata.entity.EntityRatingsTACPvt;
import com.spglobal.ratings.ratingsdata.entity.RatingsId;

@Repository("EntityRatingsTACPvtRepo")
public interface EntityRatingsTACPvtRepo extends JpaRepository<EntityRatingsTACPvt, RatingsId >{
	
	public List<EntityRatingsTACPvt> findByEntityId(@Param("entityId") Long entityId);
	
}



C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\repository\FinancialCustomRatingRepository.java

package com.spglobal.ratings.ratingsdata.repository;

import java.util.List;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import com.spglobal.ratings.ratingsdata.entity.FinancialCustomRatingEntity;
import com.spglobal.ratings.ratingsdata.model.FinancialData;

@Repository
public interface FinancialCustomRatingRepository extends JpaRepository<FinancialCustomRatingEntity, Long> {
	
	@Query("SELECT pde FROM FinancialCustomRatingEntity pde WHERE pde.coreId = :coreId and lower(pde.templateName) = :templateName"
			+ " and pde.finPeriodId IN (:finPeriodId)")
	public List<FinancialData> findByCoreIdAndTemplateNameAndFinPeriodId(@Param("coreId") Long coreId, 
			@Param("templateName") String templateName, @Param("finPeriodId") List<String> finPeriodId);
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\repository\FinancialLTMRatingRepository.java

package com.spglobal.ratings.ratingsdata.repository;

import java.util.List;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import com.spglobal.ratings.ratingsdata.entity.FinancialLTMRatingEntity;
import com.spglobal.ratings.ratingsdata.model.FinancialData;

@Repository
public interface FinancialLTMRatingRepository extends JpaRepository<FinancialLTMRatingEntity, Long> {

	@Query("SELECT pde FROM FinancialLTMRatingEntity pde WHERE pde.coreId = :coreId and lower(pde.templateName) = :templateName")
	public List<FinancialData> findByCoreIdAndTemplateName(@Param("coreId") Long coreId,
			@Param("templateName") String templateName);
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\repository\FinancialPeersRepository.java

package com.spglobal.ratings.ratingsdata.repository;

import java.util.List;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import com.spglobal.ratings.ratingsdata.entity.FinancialPeers;
import com.spglobal.ratings.ratingsdata.entity.FinancialPeersId;

@Repository("FinancialPeersRepository")
public interface FinancialPeersRepository extends JpaRepository<FinancialPeers, FinancialPeersId> {
	
	@Query("select e from FinancialPeers e where e.coreId in (:coreIds) AND e.templateName = :templateName order by e.coreId")
	public List<FinancialPeers> findByCoreIdAndTemplateName(@Param("coreIds") List<Long> coreIds,
															@Param("templateName") String templateName);
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\repository\FinancialQuarterlyRatingRepository.java

package com.spglobal.ratings.ratingsdata.repository;

import java.util.List;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import com.spglobal.ratings.ratingsdata.entity.FinancialQuarterlyRatingEntity;
import com.spglobal.ratings.ratingsdata.model.FinancialData;

@Repository
public interface FinancialQuarterlyRatingRepository extends JpaRepository<FinancialQuarterlyRatingEntity, Long> {

	@Query("SELECT pde FROM FinancialQuarterlyRatingEntity pde WHERE pde.coreId = :coreId and lower(pde.templateName) = :templateName")
	public List<FinancialData> findByCoreIdAndTemplateName(@Param("coreId") Long coreId,
			@Param("templateName") String templateName);

}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\repository\GeographicUnitRepository.java

package com.spglobal.ratings.ratingsdata.repository;

import java.util.List;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.stereotype.Repository;

import com.spglobal.ratings.ratingsdata.entity.GeographicUnit;

@Repository
public interface GeographicUnitRepository extends JpaRepository<GeographicUnit, String> {

	@Query(value="SELECT * FROM gs_gc.geographic_unit gr WHERE PARENT_GEO_UNIT_TYPE='PROVINCE' AND COUNTRY_CODE='CA' AND END_DATETIME IS NULL",nativeQuery = true)
	public List<GeographicUnit> findAllgeographicUnitNamesByCountryCode();
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\repository\InvestorSentimentCommentryRepository.java

package com.spglobal.ratings.ratingsdata.repository;

import com.spglobal.ratings.ratingsdata.entity.InvestorSentimentCommentry;
import org.springframework.data.jpa.repository.JpaRepository;

import java.util.List;

import org.springframework.stereotype.Repository;

@Repository
public interface InvestorSentimentCommentryRepository extends JpaRepository<InvestorSentimentCommentry, Long>{

    public List<InvestorSentimentCommentry> getInvestorSentimentCommentryByIndustryId(Long industryId);

}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\repository\InvestorSentimentIndustryRepository.java

package com.spglobal.ratings.ratingsdata.repository;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import com.spglobal.ratings.ratingsdata.entity.InvestorSentimentIndustry;

@Repository
public interface InvestorSentimentIndustryRepository extends JpaRepository<InvestorSentimentIndustry, Long> {
	
	@Query("select ivs from InvestorSentimentIndustry ivs where ivs.entityId=:entityId")
	public InvestorSentimentIndustry findSectorIndustry(@Param("entityId") Long entityId);

}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\repository\InvestorSentimentNumbersRepository.java

package com.spglobal.ratings.ratingsdata.repository;

import com.spglobal.ratings.ratingsdata.entity.InvestorSentimentNumbersRecentStudies;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import java.util.List;

@Repository
public interface InvestorSentimentNumbersRepository extends JpaRepository<InvestorSentimentNumbersRecentStudies, Long> {

    public List<InvestorSentimentNumbersRecentStudies> findByIndustryIdAndType(Long industryId, String type);

}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\repository\InvestorSentimentSectorRepository.java

package com.spglobal.ratings.ratingsdata.repository;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import com.spglobal.ratings.ratingsdata.entity.InvestorSentimentSectors;

@Repository
public interface InvestorSentimentSectorRepository extends JpaRepository<InvestorSentimentSectors, Long> {
	
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\repository\IssuesAndMaturitiesHistoryPublicRepository.java

package com.spglobal.ratings.ratingsdata.repository;

import java.util.List;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import com.spglobal.ratings.ratingsdata.entity.IssuesAndMaturitiesHistoryId;
import com.spglobal.ratings.ratingsdata.entity.IssuesAndMaturitiesHistoryPublic;

@Repository("IssuesAndMaturitiesHistoryPublicRepo")
public interface IssuesAndMaturitiesHistoryPublicRepository extends JpaRepository<IssuesAndMaturitiesHistoryPublic, IssuesAndMaturitiesHistoryId>{
	
	public List<IssuesAndMaturitiesHistoryPublic> findByInstrumentIdAndRatingTypeCodeAndInstrumentDetailId(@Param("instrumentId") Long instrumentId, @Param("ratingTypeCode") String ratingTypeCode, @Param("instrumentDetailId") Long instrumentDetailId);

}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\repository\IssuesAndMaturitiesHistoryRepository.java

package com.spglobal.ratings.ratingsdata.repository;

import java.util.List;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import com.spglobal.ratings.ratingsdata.entity.IssuesAndMaturitiesHistory;
import com.spglobal.ratings.ratingsdata.entity.IssuesAndMaturitiesHistoryId;

@Repository("IssuesAndMaturitiesHistoryRepo")
public interface IssuesAndMaturitiesHistoryRepository extends JpaRepository<IssuesAndMaturitiesHistory, IssuesAndMaturitiesHistoryId>{
	
	public List<IssuesAndMaturitiesHistory> findByInstrumentIdAndRatingTypeCodeAndInstrumentDetailId(@Param("instrumentId") Long instrumentId, @Param("ratingTypeCode") String ratingTypeCode, @Param("instrumentDetailId") Long instrumentDetailId);

}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\repository\IssuesAndMaturitiesPublicRepository.java

package com.spglobal.ratings.ratingsdata.repository;

import java.util.List;

import org.springframework.data.repository.CrudRepository;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import com.spglobal.ratings.ratingsdata.entity.IssuesAndMaturitiedId;
import com.spglobal.ratings.ratingsdata.entity.IssuesAndMaturitiesPublic;

@Repository("IssuesAndMaturitiesPublicRepo")
public interface IssuesAndMaturitiesPublicRepository extends CrudRepository<IssuesAndMaturitiesPublic, IssuesAndMaturitiedId>{
	
		public List<IssuesAndMaturitiesPublic> findByEntityId(@Param("entityId") Long entityId);
		
		public List<IssuesAndMaturitiesPublic> findByEntityIdAndDebtTypeCode(@Param("entityId") Long entityId, @Param("debtTypeCode") String debtTypeCode);
		
		public IssuesAndMaturitiesPublic findByEntityIdAndRatingDetailId(@Param("entityId") Long entityId, @Param("ratingDetailId") Long ratingDetailId);

}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\repository\IssuesAndMaturitiesRepository.java

package com.spglobal.ratings.ratingsdata.repository;

import java.util.List;

import org.springframework.data.repository.CrudRepository;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import com.spglobal.ratings.ratingsdata.entity.IssuesAndMaturitiedId;
import com.spglobal.ratings.ratingsdata.entity.IssuesAndMaturities;
import com.spglobal.ratings.ratingsdata.model.DebtTypes;

@Repository("IssuesAndMaturitiesRepo")
public interface IssuesAndMaturitiesRepository extends CrudRepository<IssuesAndMaturities, IssuesAndMaturitiedId>{
	
		public List<IssuesAndMaturities> findByEntityId(@Param("entityId") Long entityId);
		
		public List<IssuesAndMaturities> findByEntityIdAndDebtTypeCode(@Param("entityId") Long entityId, @Param("debtTypeCode") String debtTypeCode);
		
		public IssuesAndMaturities findByEntityIdAndRatingDetailId(@Param("entityId") Long entityId, @Param("ratingDetailId") Long ratingDetailId);
		
		public List<DebtTypes> findDistinctDebtTypeCodeAndDescriptionByEntityId(@Param("entityId") Long entityId);

}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\repository\IssuesMaturitiesUSPFPubRepository.java

package com.spglobal.ratings.ratingsdata.repository;

import java.util.List;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import com.spglobal.ratings.ratingsdata.entity.IssuesAndMaturitiedId;
import com.spglobal.ratings.ratingsdata.entity.IssuesMaturitiesUSPFPub;
import com.spglobal.ratings.ratingsdata.model.InstrumentsData;
import com.spglobal.ratings.ratingsdata.model.USPFMinMaxDates;

@Repository("IssuesMaturitiesUSPFPubRepo")
public interface IssuesMaturitiesUSPFPubRepository
		extends JpaRepository<IssuesMaturitiesUSPFPub, IssuesAndMaturitiedId> {
	
	@Query("select e from IssuesMaturitiesUSPFPub e where e.asId=:asId")
	public List<IssuesMaturitiesUSPFPub> findBySecurityId(@Param("asId") Long asId);

	@Query("select e from IssuesMaturitiesUSPFPub e where e.asId=:asId and e.ratingDetailId=:ratingDetailId")
	public List<IssuesMaturitiesUSPFPub> findBySecurityIdAndRatingDetailId(@Param("asId") Long asId, @Param("ratingDetailId") Long ratingDetailId);

	@Query("select e from IssuesMaturitiesUSPFPub e where e.asId=:asId and e.instrumentId=:instrumentId")
	public List<IssuesMaturitiesUSPFPub> findBySecurityIdAndInstrumentId(@Param("asId") Long asId, @Param("instrumentId") Long instrumentId);

	@Query("select distinct new com.spglobal.ratings.ratingsdata.model.InstrumentsData(e.issueName, e.instrumentId, e.series, e.datebegun) from"
			+ " com.spglobal.ratings.ratingsdata.entity.IssuesMaturitiesUSPFPub e where e.asId=:asId order by e.datebegun desc nulls last,"
			+ " e.series asc nulls last, e.issueName asc")
	public List<InstrumentsData> findDistinctIssueName(@Param("asId") Long asId);	
	
	@Query(nativeQuery = true, value="SELECT MIN(EXTRACT(YEAR FROM maturity_date)) AS from_year, MAX(EXTRACT(YEAR FROM maturity_date)) AS to_year, "
			+ "as_id FROM r360_appdata.vw_issues_maturities_uspf_public WHERE  as_id = :asId GROUP BY as_id")
	List<Object> getMinAndMaxDates(@Param("asId") Long asId);

}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\repository\LanguageTranslationRepository.java

package com.spglobal.ratings.ratingsdata.repository;

import java.util.List;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import com.spglobal.ratings.ratingsdata.entity.CurrencyLookupEntity;
import com.spglobal.ratings.ratingsdata.entity.LanguageTranslationEntity;

@Repository
public interface LanguageTranslationRepository  extends JpaRepository<LanguageTranslationEntity, String> {

	@Query("SELECT lte FROM LanguageTranslationEntity lte WHERE lte.languageCode = :languageCode and lte.itemType = :type AND lte.activeFlag= 'Y' order by lte.itemValue")
	public List<LanguageTranslationEntity> findCurrencyByLanguageCodeAndType(@Param("languageCode") String languageCode, @Param("type")  String type);
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\repository\MnemonicMagnitudeRepository.java

package com.spglobal.ratings.ratingsdata.repository;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import com.spglobal.ratings.ratingsdata.entity.MnemonicMagnitudeEntity;

@Repository
public interface MnemonicMagnitudeRepository extends JpaRepository<MnemonicMagnitudeEntity, String> {

	@Query("SELECT pde FROM MnemonicMagnitudeEntity pde WHERE pde.currencyCode = :currencyCode")
	public MnemonicMagnitudeEntity getMnemonicMagnitude(@Param("currencyCode") String currencyCode);
	
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\repository\MultimediaPodcastsRepository.java

package com.spglobal.ratings.ratingsdata.repository;

import java.util.List;

import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import com.spglobal.ratings.ratingsdata.entity.MultimediaPodcasts;

@Repository
public interface MultimediaPodcastsRepository extends JpaRepository<MultimediaPodcasts, String> {
	
	@Query(nativeQuery = true , value="select * from SPDIRECT.DATA_SP_PODCAST where file_type= ?1 and pubdate > to_date('01/01/2019 00:00:00', 'MM/DD/YYYY HH24:MI:SS') and thumbnail is not null")
	//@Query("select mp from MultimediaPodcasts mp where mp.fileType = :fileType and to_date(mp.publishDate, 'MM/DD/YYYY HH24:MI:SS') > to_date('01/01/2019 00:00:00', 'MM/DD/YYYY HH24:MI:SS') and mp.thumbNail != null")
	public List<MultimediaPodcasts> getMultimediaPodcasts(@Param("fileType") String fileType) throws Exception;
	
	@Query(nativeQuery = true , value="select * from SPDIRECT.DATA_SP_PODCAST where file_type= ?1 and "
			+ "pubdate > to_date('01/01/2019 00:00:00', 'MM/DD/YYYY HH24:MI:SS') and thumbnail is not null order by PUBDATE DESC ")
	public List<MultimediaPodcasts> getDashboardMultimediaData(@Param("fileType") String fileType, Pageable pageable) throws Exception;


}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\repository\MultimediaSectorRepository.java

package com.spglobal.ratings.ratingsdata.repository;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import com.spglobal.ratings.ratingsdata.entity.MultimediaSector;

@Repository
public interface MultimediaSectorRepository extends JpaRepository<MultimediaSector, Long> {

}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\repository\PeerCurrentRatingsRepository.java

package com.spglobal.ratings.ratingsdata.repository;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import com.spglobal.ratings.ratingsdata.entity.PeerCurrentRatings;

@Repository("PeerCurrentRatingsRepository")
public interface PeerCurrentRatingsRepository extends JpaRepository<PeerCurrentRatings, Long >{
	
	//named query
	public PeerCurrentRatings findByEntityId(@Param("entityId") Long entityId);
		
}



C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\repository\PeersCurrentRatingsRepository.java

package com.spglobal.ratings.ratingsdata.repository;

import java.util.List;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import com.spglobal.ratings.ratingsdata.entity.PeersCurrentRatings;

@Repository("PeersCurrentRatingsRepository")
public interface PeersCurrentRatingsRepository extends JpaRepository<PeersCurrentRatings, Long[] >{
	
	//named query
	public List<PeersCurrentRatings> findByEntityId(@Param("entityIds") List<Long> entityIds);
	
}



C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\repository\PeersEntityRatingsPubRepository.java

package com.spglobal.ratings.ratingsdata.repository;

import java.util.List;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import com.spglobal.ratings.ratingsdata.entity.PeersEntityRatingsPublic;

@Repository("PeersEntityRatingsPubRepository")
public interface PeersEntityRatingsPubRepository extends JpaRepository<PeersEntityRatingsPublic, Long[] >{
	
	//named query
	public List<PeersEntityRatingsPublic> findByEntityId(@Param("entityIds") List<Long> entityIds);
	
}



C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\repository\PeersEntityRatingsRepository.java

package com.spglobal.ratings.ratingsdata.repository;

import java.util.List;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import com.spglobal.ratings.ratingsdata.entity.PeersEntityRatings;

@Repository("PeersEntityRatingsRepository")
public interface PeersEntityRatingsRepository extends JpaRepository<PeersEntityRatings, Long>{
	
	//named query
	public List<PeersEntityRatings> findByEntityId(@Param("entityId") Long entityId);
	
}



C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\repository\PortfolioContentsRepository.java

package com.spglobal.ratings.ratingsdata.repository;

import java.util.List;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import com.spglobal.ratings.ratingsdata.entity.PeerSuppliersPortfolioContents;

@Repository
public interface PortfolioContentsRepository extends JpaRepository<PeerSuppliersPortfolioContents, Long> {
	@Query("select psp from PeerSuppliersPortfolioContents psp where psp.keyInstnId in (:keyInstnIds)")
	public List<PeerSuppliersPortfolioContents> findByKeyInstnIds(@Param("keyInstnIds") List<String> keyInstnIds);
	
	@Query("select psp from PeerSuppliersPortfolioContents psp where psp.keyInstnId in (:keyInstnIds) and psp.countryname not in ('Taiwan', 'Hong Kong', 'Macao')")
	public List<PeerSuppliersPortfolioContents> findByKeyInstnIdsForCNDomain(@Param("keyInstnIds") List<String> keyInstnIds);

	@Query("select psp from PeerSuppliersPortfolioContents psp where psp.capiqId in (:capiqIds)")
	public List<PeerSuppliersPortfolioContents> findByCapiqIds(@Param("capiqIds") List<String> capiqIds);

	@Query("select psp from PeerSuppliersPortfolioContents psp where psp.capiqId in (:capiqIds) and psp.countryname not in ('Taiwan', 'Hong Kong', 'Macao')")
	public List<PeerSuppliersPortfolioContents> findByCapiqIdsForCNDomain(@Param("capiqIds") List<String> capiqIds);

	@Query("select psp from PeerSuppliersPortfolioContents psp where psp.entityId in (:entityIds)")
	public List<PeerSuppliersPortfolioContents> findByEntityIds(@Param("entityIds") List<String> entityIds);

	@Query("select psp from PeerSuppliersPortfolioContents psp where psp.entityId in (:entityIds) and psp.countryname not in ('Taiwan', 'Hong Kong', 'Macao')")
	public List<PeerSuppliersPortfolioContents> findByEntityIdsForCNDomain(@Param("entityIds") List<String> entityIds);

}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\repository\RatingArticlesCNPublicRepository.java

package com.spglobal.ratings.ratingsdata.repository;

import java.sql.Timestamp;
import java.util.List;

import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import com.spglobal.ratings.ratingsdata.entity.RatingArticlesCNPublic;

@Repository("RatingArticlesCNPublicRepository")
public interface RatingArticlesCNPublicRepository extends JpaRepository<RatingArticlesCNPublic, Long> {

	@Query("  select ra from RatingArticlesCNPublic ra" +
			" where ra.entityId in ( :entityId)"
			+ " and ra.articleTypeId in (:articleTypeIds)")
	public List<RatingArticlesCNPublic> getRatingArticles(@Param("entityId") List<Long> entityId,
														  @Param("articleTypeIds") List<Long> articleTypeIds, Pageable pageable);

}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\repository\RatingArticlesCNPublicRepositorySSP.java

package com.spglobal.ratings.ratingsdata.repository;

import java.sql.Timestamp;
import java.util.List;

import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import com.spglobal.ratings.ratingsdata.entity.RatingArticlesPeerCNPublic;

@Repository("RatingArticlesCNPublicRepositorySSP")
public interface RatingArticlesCNPublicRepositorySSP extends JpaRepository<RatingArticlesPeerCNPublic, Long> {

	@Query(value = "WITH TEMP AS (SELECT ART.*\r\n"
			+ "          FROM R360_APPDATA.vw_rating_articles_cn_peers art\r\n"
			+ "         WHERE art.ENTITY_ID IN ( :entityIds)\r\n"
			+ "         ORDER BY art.ARTICLE_DATE DESC\r\n"
			+ "         FETCH NEXT 5000 ROWS ONLY)\r\n"
			+ "SELECT TEMP.*\r\n"
			+ "  FROM TEMP\r\n"
			+ "where TEMP.ARTICLE_TYPE_ID in (:articleTypeIds) and TEMP.ARTICLE_DATE >= :startArticleDate\r\n"
			+ "and TEMP.ARTICLE_DATE <= :endArticleDate and (\r\n"
			+ "upper(TEMP.TITLE)  like '%' || upper(:searchText) || '%'\r\n"
			+ "OR upper(TEMP.ENTITY_NAME)  like '%' || upper(:searchText) || '%'\r\n"
			+ "OR upper(TEMP.ARTICLE_TYPE)  like '%' || upper(:searchText) || '%'\r\n"
			+ "OR TO_CHAR(TEMP.ARTICLE_DATE,'dd/mm/yyyy HH24:MI')  like '%' ||  :searchText  || '%'\r\n"
			+ "OR upper(TEMP.AUTHOR)  like '%' || upper(:searchText) || '%'\r\n"
			+ " ) ", nativeQuery=true)
	public List<RatingArticlesPeerCNPublic> getRatingArticlesSSP(@Param("entityIds") List<Long> entityIds,
			@Param("articleTypeIds") List<Long> articleTypeIds, @Param("startArticleDate") Timestamp startArticleDate,
			@Param("endArticleDate") Timestamp endArticleDate, Pageable pageable, @Param("searchText") String searchText);

	@Query(value = "WITH TEMP AS (SELECT ART.*\r\n"
			+ "          FROM R360_APPDATA.vw_rating_articles_cn_peers art\r\n"
			+ "         WHERE art.ENTITY_ID IN ( :entityIds)\r\n"
			+ "         ORDER BY art.ARTICLE_DATE DESC\r\n"
			+ "         FETCH NEXT 5000 ROWS ONLY)\r\n"
			+ "SELECT count(*)\r\n"
			+ "  FROM TEMP\r\n"
			+ "where TEMP.ARTICLE_TYPE_ID in (:articleTypeIds) and TEMP.ARTICLE_DATE >= :startArticleDate\r\n"
			+ "and TEMP.ARTICLE_DATE <= :endArticleDate and (\r\n"
			+ "upper(TEMP.TITLE)  like '%' || upper(:searchText) || '%'\r\n"
			+ "OR upper(TEMP.ENTITY_NAME)  like '%' || upper(:searchText) || '%'\r\n"
			+ "OR upper(TEMP.ARTICLE_TYPE)  like '%' || upper(:searchText) || '%'\r\n"
			+ "OR TO_CHAR(TEMP.ARTICLE_DATE,'dd/mm/yyyy HH24:MI')  like '%' ||  :searchText  || '%'\r\n"
			+ "OR upper(TEMP.AUTHOR)  like '%' || upper(:searchText) || '%'\r\n"
			+ " ) ", nativeQuery=true)
	long totalCount(@Param("entityIds") List<Long> entityIds,
			@Param("articleTypeIds") List<Long> articleTypeIds, @Param("startArticleDate") Timestamp startArticleDate,
			@Param("endArticleDate") Timestamp endArticleDate, @Param("searchText") String searchText);
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\repository\RatingArticlesPublicPvtConfCNPeersRepository.java

package com.spglobal.ratings.ratingsdata.repository;

import java.sql.Timestamp;
import java.util.List;

import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import com.spglobal.ratings.ratingsdata.entity.RatingArticlesPublicPvtConfCNPeers;
import com.spglobal.ratings.ratingsdata.entity.RatingArticlesPublicPvtPeersId;

@Repository("RatingArticlesPublicPvtConfCNPeersRepository")
public interface RatingArticlesPublicPvtConfCNPeersRepository extends JpaRepository<RatingArticlesPublicPvtConfCNPeers, RatingArticlesPublicPvtPeersId> {
	
	@Query(value = "WITH TEMP AS (SELECT ART.*\r\n"
			+ "          FROM R360_APPDATA.vw_rating_articles_public_pvt_cn_peers art\r\n"
			+ "         WHERE art.ENTITY_ID IN ( :entityIds)\r\n"
			+ "         ORDER BY art.ARTICLE_DATE DESC\r\n"
			+ "         FETCH NEXT 5000 ROWS ONLY)\r\n"
			+ "SELECT TEMP.*\r\n"
			+ "  FROM TEMP\r\n"
			+ "where TEMP.ARTICLE_TYPE_ID in (:articleTypeIds) and TEMP.ARTICLE_DATE >= :startArticleDate\r\n"
			+ "and TEMP.ARTICLE_DATE <= :endArticleDate and (\r\n"
			+ "upper(TEMP.TITLE)  like '%' || upper(:searchText) || '%'\r\n"
			+ "OR upper(TEMP.ENTITY_NAME)  like '%' || upper(:searchText) || '%'\r\n"
			+ "OR upper(TEMP.ARTICLE_TYPE)  like '%' || upper(:searchText) || '%'\r\n"
			+ "OR TO_CHAR(TEMP.ARTICLE_DATE,'dd/mm/yyyy HH24:MI')  like '%' ||  :searchText  || '%'\r\n"
			+ "OR upper(TEMP.AUTHOR)  like '%' || upper(:searchText) || '%'\r\n"
			+ "OR upper(TEMP.CONFIDENTIAL_CATEGORY_CODE) like '%' || upper(:searchText) || '%'\r\n"
			+ " ) ", nativeQuery=true)
	public List<RatingArticlesPublicPvtConfCNPeers> getCNPeersRatingArticles(@Param("entityIds") List<Long> entityIds,
			@Param("articleTypeIds") List<Long> articleTypeIds, @Param("startArticleDate") Timestamp startArticleDate,
			@Param("endArticleDate") Timestamp endArticleDate, Pageable pageable, @Param("searchText") String searchText);
	
	@Query(value = "WITH TEMP AS (SELECT ART.*\r\n"
			+ "          FROM R360_APPDATA.vw_rating_articles_public_pvt_cn_peers art\r\n"
			+ "         WHERE art.ENTITY_ID IN ( :entityIds)\r\n"
			+ "         ORDER BY art.ARTICLE_DATE DESC\r\n"
			+ "         FETCH NEXT 5000 ROWS ONLY)\r\n"
			+ "SELECT count(*)\r\n"
			+ "  FROM TEMP\r\n"
			+ "where TEMP.ARTICLE_TYPE_ID in (:articleTypeIds) and TEMP.ARTICLE_DATE >= :startArticleDate\r\n"
			+ "and TEMP.ARTICLE_DATE <= :endArticleDate and (\r\n"
			+ "upper(TEMP.TITLE)  like '%' || upper(:searchText) || '%'\r\n"
			+ "OR upper(TEMP.ENTITY_NAME)  like '%' || upper(:searchText) || '%'\r\n"
			+ "OR upper(TEMP.ARTICLE_TYPE)  like '%' || upper(:searchText) || '%'\r\n"
			+ "OR TO_CHAR(TEMP.ARTICLE_DATE,'dd/mm/yyyy HH24:MI')  like '%' ||  :searchText  || '%'\r\n"
			+ "OR upper(TEMP.AUTHOR)  like '%' || upper(:searchText) || '%'\r\n"
			+ "OR upper(TEMP.CONFIDENTIAL_CATEGORY_CODE) like '%' || upper(:searchText) || '%'\r\n"
			+ " ) ", nativeQuery=true)
	long peersCNtotalCount(@Param("entityIds") List<Long> entityIds,
			@Param("articleTypeIds") List<Long> articleTypeIds, @Param("startArticleDate") Timestamp startArticleDate,
			@Param("endArticleDate") Timestamp endArticleDate, @Param("searchText") String searchText);
	
	@Query(value = "WITH TEMP AS (SELECT ART.*\r\n"
			+ "          FROM R360_APPDATA.vw_rating_articles_public_pvt_cn_peers art\r\n"
			+ "         WHERE art.ENTITY_ID IN ( :entityIds)\r\n"
			+ "         ORDER BY art.ARTICLE_DATE DESC\r\n"
			+ "         FETCH NEXT 5000 ROWS ONLY)\r\n"
			+ "SELECT TEMP.*\r\n"
			+ "  FROM TEMP\r\n"
			+ "where TEMP.ARTICLE_TYPE_ID in (:articleTypeIds) and TEMP.ARTICLE_DATE >= :startArticleDate\r\n"
			+ "and TEMP.ARTICLE_DATE <= :endArticleDate and (\r\n"
			+ "upper(TEMP.TITLE)  like '%' || upper(:searchText) || '%'\r\n"
			+ "OR upper(TEMP.ENTITY_NAME)  like '%' || upper(:searchText) || '%'\r\n"
			+ "OR upper(TEMP.ARTICLE_TYPE)  like '%' || upper(:searchText) || '%'\r\n"
			+ "OR TO_CHAR(TEMP.ARTICLE_DATE,'dd/mm/yyyy HH24:MI')  like '%' ||  :searchText  || '%'\r\n"
			+ "OR upper(TEMP.AUTHOR)  like '%' || upper(:searchText) || '%'\r\n"
			+ "OR upper(TEMP.CONFIDENTIAL_CATEGORY_CODE) like '%' || upper(:searchText) || '%'\r\n"
			+ " ) ", nativeQuery=true)
	public List<RatingArticlesPublicPvtConfCNPeers> getCNPeersRatingArticlesForCount(@Param("entityIds") List<Long> entityIds,
			@Param("articleTypeIds") List<Long> articleTypeIds, @Param("startArticleDate") Timestamp startArticleDate,
			@Param("endArticleDate") Timestamp endArticleDate, @Param("searchText") String searchText);

}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\repository\RatingArticlesPublicPvtConfCNRepository.java

package com.spglobal.ratings.ratingsdata.repository;

import java.sql.Timestamp;
import java.util.List;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import com.spglobal.ratings.ratingsdata.entity.RatingArticlesPublicPvtConfCN;

@Repository("RatingArticlesPublicPvtConfCNRepo")
public interface RatingArticlesPublicPvtConfCNRepository extends JpaRepository<RatingArticlesPublicPvtConfCN, Long> {
	
	@Query("  select ra from RatingArticlesPublicPvtConfCN ra where ra.entityId=:entityId"
			+ " and ra.articleTypeId in (:articleTypeIds) and ra.articleDate >= :startArticleDate"
			+ " and ra.articleDate <= :endArticleDate")
	public List<RatingArticlesPublicPvtConfCN> getCNRatingArticles(@Param("entityId") String entityId,
			@Param("articleTypeIds") List<Long> articleTypeIds, @Param("startArticleDate") Timestamp startArticleDate,
			@Param("endArticleDate") Timestamp endArticleDate);
	
	@Query("  select ra from RatingArticlesPublicPvtConfCN ra where ra.entityId=:entityId"
			+ " order by ra.articleDate desc fetch first 20 row only")
	public List<RatingArticlesPublicPvtConfCN> getCNDashboardRatingArticles(@Param("entityId") String entityId);

}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\repository\RatingArticlesPublicPvtConfPeersRepository.java

package com.spglobal.ratings.ratingsdata.repository;

import java.sql.Timestamp;
import java.util.List;

import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import com.spglobal.ratings.ratingsdata.entity.RatingArticlesPublicPvtConfPeers;
import com.spglobal.ratings.ratingsdata.entity.RatingArticlesPublicPvtPeersId;

@Repository("RatingArticlesPublicPvtConfPeersRepository")
public interface RatingArticlesPublicPvtConfPeersRepository extends JpaRepository<RatingArticlesPublicPvtConfPeers, RatingArticlesPublicPvtPeersId> {
	
	@Query(value = "WITH TEMP AS (SELECT ART.*\r\n"
			+ "          FROM R360_APPDATA.vw_rating_articles_public_pvt_peers art\r\n"
			+ "         WHERE art.ENTITY_ID IN ( :entityIds)\r\n"
			+ "         ORDER BY art.ARTICLE_DATE DESC\r\n"
			+ "         FETCH NEXT 5000 ROWS ONLY)\r\n"
			+ "SELECT TEMP.*\r\n"
			+ "  FROM TEMP\r\n"
			+ "where TEMP.ARTICLE_TYPE_ID in (:articleTypeIds) and TEMP.ARTICLE_DATE >= :startArticleDate\r\n"
			+ "and TEMP.ARTICLE_DATE <= :endArticleDate and (\r\n"
			+ "upper(TEMP.TITLE)  like '%' || upper(:searchText) || '%'\r\n"
			+ "OR upper(TEMP.ENTITY_NAME)  like '%' || upper(:searchText) || '%'\r\n"
			+ "OR upper(TEMP.ARTICLE_TYPE)  like '%' || upper(:searchText) || '%'\r\n"
			+ "OR TO_CHAR(TEMP.ARTICLE_DATE,'dd/mm/yyyy HH24:MI')  like '%' ||  :searchText  || '%'\r\n"
			+ "OR upper(TEMP.AUTHOR)  like '%' || upper(:searchText) || '%'\r\n"
			+ "OR upper(TEMP.CONFIDENTIAL_CATEGORY_CODE) like '%' || upper(:searchText) || '%'\r\n"
			+ " ) ", nativeQuery=true)
	public List<RatingArticlesPublicPvtConfPeers> getPeersRatingArticles(@Param("entityIds") List<Long> entityIds,
			@Param("articleTypeIds") List<Long> articleTypeIds, @Param("startArticleDate") Timestamp startArticleDate,
			@Param("endArticleDate") Timestamp endArticleDate, Pageable pageable, @Param("searchText") String searchText);
	
	@Query(value = "WITH TEMP AS (SELECT ART.*\r\n"
			+ "          FROM R360_APPDATA.vw_rating_articles_public_pvt_peers art\r\n"
			+ "         WHERE art.ENTITY_ID IN ( :entityIds)\r\n"
			+ "         ORDER BY art.ARTICLE_DATE DESC\r\n"
			+ "         FETCH NEXT 5000 ROWS ONLY)\r\n"
			+ "SELECT count(*)\r\n"
			+ "  FROM TEMP\r\n"
			+ "where TEMP.ARTICLE_TYPE_ID in (:articleTypeIds) and TEMP.ARTICLE_DATE >= :startArticleDate\r\n"
			+ "and TEMP.ARTICLE_DATE <= :endArticleDate and (\r\n"
			+ "upper(TEMP.TITLE)  like '%' || upper(:searchText) || '%'\r\n"
			+ "OR upper(TEMP.ENTITY_NAME)  like '%' || upper(:searchText) || '%'\r\n"
			+ "OR upper(TEMP.ARTICLE_TYPE)  like '%' || upper(:searchText) || '%'\r\n"
			+ "OR TO_CHAR(TEMP.ARTICLE_DATE,'dd/mm/yyyy HH24:MI')  like '%' ||  :searchText  || '%'\r\n"
			+ "OR upper(TEMP.AUTHOR)  like '%' || upper(:searchText) || '%'\r\n"
			+ "OR upper(TEMP.CONFIDENTIAL_CATEGORY_CODE) like '%' || upper(:searchText) || '%'\r\n"
			+ " ) ", nativeQuery=true)
	long peersTotalCount(@Param("entityIds") List<Long> entityIds,
			@Param("articleTypeIds") List<Long> articleTypeIds, @Param("startArticleDate") Timestamp startArticleDate,
			@Param("endArticleDate") Timestamp endArticleDate, @Param("searchText") String searchText);
	
	@Query(value = "WITH TEMP AS (SELECT ART.*\r\n"
			+ "          FROM R360_APPDATA.vw_rating_articles_public_pvt_peers art\r\n"
			+ "         WHERE art.ENTITY_ID IN ( :entityIds)\r\n"
			+ "         ORDER BY art.ARTICLE_DATE DESC\r\n"
			+ "         FETCH NEXT 5000 ROWS ONLY)\r\n"
			+ "SELECT TEMP.*\r\n"
			+ "  FROM TEMP\r\n"
			+ "where TEMP.ARTICLE_TYPE_ID in (:articleTypeIds) and TEMP.ARTICLE_DATE >= :startArticleDate\r\n"
			+ "and TEMP.ARTICLE_DATE <= :endArticleDate and (\r\n"
			+ "upper(TEMP.TITLE)  like '%' || upper(:searchText) || '%'\r\n"
			+ "OR upper(TEMP.ENTITY_NAME)  like '%' || upper(:searchText) || '%'\r\n"
			+ "OR upper(TEMP.ARTICLE_TYPE)  like '%' || upper(:searchText) || '%'\r\n"
			+ "OR TO_CHAR(TEMP.ARTICLE_DATE,'dd/mm/yyyy HH24:MI')  like '%' ||  :searchText  || '%'\r\n"
			+ "OR upper(TEMP.AUTHOR)  like '%' || upper(:searchText) || '%'\r\n"
			+ "OR upper(TEMP.CONFIDENTIAL_CATEGORY_CODE) like '%' || upper(:searchText) || '%'\r\n"
			+ " ) ", nativeQuery=true)
	public List<RatingArticlesPublicPvtConfPeers> getPeersRatingArticlesForCount(@Param("entityIds") List<Long> entityIds,
			@Param("articleTypeIds") List<Long> articleTypeIds, @Param("startArticleDate") Timestamp startArticleDate,
			@Param("endArticleDate") Timestamp endArticleDate, @Param("searchText") String searchText);

}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\repository\RatingArticlesPublicPvtConfRepository.java

package com.spglobal.ratings.ratingsdata.repository;

import java.sql.Timestamp;
import java.util.List;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import com.spglobal.ratings.ratingsdata.entity.RatingArticlesPublicPvtConf;

@Repository("RatingArticlesPublicPvtConfRepo")
public interface RatingArticlesPublicPvtConfRepository extends JpaRepository<RatingArticlesPublicPvtConf, String> {
	
	@Query("  select ra from RatingArticlesPublicPvtConf ra where ra.entityId=:entityId"
			+ " and ra.articleTypeId in (:articleTypeIds) and ra.articleDate >= :startArticleDate"
			+ " and ra.articleDate <= :endArticleDate")
	public List<RatingArticlesPublicPvtConf> getRatingArticles(@Param("entityId") String entityId,
			@Param("articleTypeIds") List<Long> articleTypeIds, @Param("startArticleDate") Timestamp startArticleDate,
			@Param("endArticleDate") Timestamp endArticleDate);
	
	@Query("  select ra from RatingArticlesPublicPvtConf ra where ra.entityId=:entityId"
			+ " order by ra.articleDate desc fetch first 20 row only")
	public List<RatingArticlesPublicPvtConf> getDashboardRatingArticles(@Param("entityId") String entityId);

}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\repository\RatingArticlesPublicRepository.java

package com.spglobal.ratings.ratingsdata.repository;

import java.sql.Timestamp;
import java.util.List;

import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import com.spglobal.ratings.ratingsdata.entity.RatingArticlesPublic;

@Repository("RatingArticlesPublicRepository")
public interface RatingArticlesPublicRepository extends JpaRepository<RatingArticlesPublic, Long> {

	@Query("  select ra from RatingArticlesPublic ra" +
			" where ra.entityId in ( :entityId)"
			+ " and ra.articleTypeId in (:articleTypeIds)")
	public List<RatingArticlesPublic> getRatingArticles(@Param("entityId") List<Long> entityId,
														@Param("articleTypeIds") List<Long> articleTypeIds, Pageable pageable);
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\repository\RatingArticlesPublicRepositorySSP.java

package com.spglobal.ratings.ratingsdata.repository;

import java.sql.Timestamp;
import java.util.List;

import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import com.spglobal.ratings.ratingsdata.entity.RatingArticlesPeerPublic;

@Repository("RatingArticlesPublicRepositorySSP")
public interface RatingArticlesPublicRepositorySSP extends JpaRepository<RatingArticlesPeerPublic, Long> {

	@Query(value = "WITH TEMP AS (SELECT ART.*\r\n"
			+ "          FROM R360_APPDATA.vw_rating_articles_peers art\r\n"
			+ "         WHERE art.ENTITY_ID IN ( :entityIds)\r\n"
			+ "         ORDER BY art.ARTICLE_DATE DESC\r\n"
			+ "         FETCH NEXT 5000 ROWS ONLY)\r\n"
			+ "SELECT TEMP.*\r\n"
			+ "  FROM TEMP\r\n"
			+ "where TEMP.ARTICLE_TYPE_ID in (:articleTypeIds) and TEMP.ARTICLE_DATE >= :startArticleDate\r\n"
			+ "and TEMP.ARTICLE_DATE <= :endArticleDate and (\r\n"
			+ "upper(TEMP.TITLE)  like '%' || upper(:searchText) || '%'\r\n"
			+ "OR upper(TEMP.ENTITY_NAME)  like '%' || upper(:searchText) || '%'\r\n"
			+ "OR upper(TEMP.ARTICLE_TYPE)  like '%' || upper(:searchText) || '%'\r\n"
			+ "OR TO_CHAR(TEMP.ARTICLE_DATE,'dd/mm/yyyy HH24:MI')  like '%' ||  :searchText  || '%'\r\n"
			+ "OR upper(TEMP.AUTHOR)  like '%' || upper(:searchText) || '%'\r\n"
			+ " ) ", nativeQuery=true)
	public List<RatingArticlesPeerPublic> getRatingArticlesSSP(@Param("entityIds") List<Long> entityIds,
			@Param("articleTypeIds") List<Long> articleTypeIds, @Param("startArticleDate") Timestamp startArticleDate,
			@Param("endArticleDate") Timestamp endArticleDate, Pageable pageable, @Param("searchText") String searchText);

	@Query(value = "WITH TEMP AS (SELECT ART.*\r\n"
			+ "          FROM R360_APPDATA.vw_rating_articles_peers art\r\n"
			+ "         WHERE art.ENTITY_ID IN ( :entityIds)\r\n"
			+ "         ORDER BY art.ARTICLE_DATE DESC\r\n"
			+ "         FETCH NEXT 5000 ROWS ONLY)\r\n"
			+ "SELECT count(*)\r\n"
			+ "  FROM TEMP\r\n"
			+ "where TEMP.ARTICLE_TYPE_ID in (:articleTypeIds) and TEMP.ARTICLE_DATE >= :startArticleDate\r\n"
			+ "and TEMP.ARTICLE_DATE <= :endArticleDate and (\r\n"
			+ "upper(TEMP.TITLE)  like '%' || upper(:searchText) || '%'\r\n"
			+ "OR upper(TEMP.ENTITY_NAME)  like '%' || upper(:searchText) || '%'\r\n"
			+ "OR upper(TEMP.ARTICLE_TYPE)  like '%' || upper(:searchText) || '%'\r\n"
			+ "OR TO_CHAR(TEMP.ARTICLE_DATE,'dd/mm/yyyy HH24:MI')  like '%' ||  :searchText  || '%'\r\n"
			+ "OR upper(TEMP.AUTHOR)  like '%' || upper(:searchText) || '%'\r\n"
			+ " ) ", nativeQuery=true)
	long totalCount(@Param("entityIds") List<Long> entityIds,
			@Param("articleTypeIds") List<Long> articleTypeIds, @Param("startArticleDate") Timestamp startArticleDate,
			@Param("endArticleDate") Timestamp endArticleDate, @Param("searchText") String searchText);
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\repository\RatingArticleTypesRepository.java

package com.spglobal.ratings.ratingsdata.repository;

import java.util.List;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import com.spglobal.ratings.ratingsdata.entity.RatingArticleTypes;

@Repository("RatingArticleTypesRepository")
public interface RatingArticleTypesRepository extends JpaRepository<RatingArticleTypes, Long> {
	
	@Query("select rat from RatingArticleTypes rat where articleTypeId in (:articleTypeIds)")
	public List<RatingArticleTypes> getRatingArticleTypes(@Param("articleTypeIds") List<Long> articleTypeIds);

}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\repository\RatingCriteriaArticlesPrivateRepository.java

package com.spglobal.ratings.ratingsdata.repository;

import java.util.List;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import com.spglobal.ratings.ratingsdata.entity.RatingCriteriaArticles;
import com.spglobal.ratings.ratingsdata.entity.RatingCriteriaArticlesPrivate;

@Repository("RatingCriteriaArticlesPrivateRepository")
public interface RatingCriteriaArticlesPrivateRepository extends JpaRepository<RatingCriteriaArticlesPrivate, Long> {

	@Query(value = "select vrca FROM RatingCriteriaArticlesPrivate vrca where vrca.sourceObjectId in (:sourceObjectIds)")
	public List<RatingCriteriaArticlesPrivate> findRatingCriteriaArticlesBySourceObjectIds(@Param("sourceObjectIds") List<Long> sourceObjectIds);

}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\repository\RatingCriteriaArticlesPublicRepository.java

package com.spglobal.ratings.ratingsdata.repository;

import java.util.List;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import com.spglobal.ratings.ratingsdata.entity.RatingCriteriaArticlesPublic;

@Repository("RatingCriteriaArticlesPublicRepository")
public interface RatingCriteriaArticlesPublicRepository extends JpaRepository<RatingCriteriaArticlesPublic, Long> {

	@Query(value = "select vrca FROM RatingCriteriaArticlesPublic vrca where vrca.ratingDetailId = :ratingDetailId")
	public List<RatingCriteriaArticlesPublic> findRatingCriteriaArticlesByRatingDetailId(@Param("ratingDetailId") Long ratingDetailId);
	
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\repository\RatingDetailsRepository.java

package com.spglobal.ratings.ratingsdata.repository;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import com.spglobal.ratings.ratingsdata.entity.RatingDetails;

@Repository
public interface RatingDetailsRepository extends JpaRepository<RatingDetails, Long>{

 public RatingDetails findByRatingDetailId(Long ratingDetailId);
	
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\repository\RatingDistGeoRepository.java

package com.spglobal.ratings.ratingsdata.repository;

import com.spglobal.ratings.ratingsdata.entity.RatingDistGeoEntity;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import java.util.List;

@Repository
public interface RatingDistGeoRepository extends JpaRepository<RatingDistGeoEntity, Long>{
	public List<RatingDistGeoEntity> findAll();
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\repository\RatingDistICRTotalsRepository.java

package com.spglobal.ratings.ratingsdata.repository;

import java.util.List;


import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import com.spglobal.ratings.ratingsdata.entity.RatingDistICRTotalsEntity;

@Repository
public interface RatingDistICRTotalsRepository extends JpaRepository<RatingDistICRTotalsEntity, String> {

	@Query(nativeQuery = true, value = "SELECT rd.GSECTOR,rd.SECTOR_DESCRIPTION,rd.AAA,rd.AA_P,rd.AA,rd.AA_M,rd.A_P,rd.A,rd.A_M,rd.BBB_P,rd.BBB,rd.BBB_M,rd.BB_P,rd.BB,rd.BB_M,rd.B_P,rd.B,rd.B_M,rd.CCC_P,rd.CCC,rd.CCC_M,rd.CC,rd.C,rd.SD,rd.D,"+
			"NVL(AAA,0)+NVL(AA_P,0)+NVL(AA,0)+NVL(AA_M,0)+  NVL(A_P,0) + NVL(A,0)+NVL(A_M,0)+NVL(BBB_P,0)+NVL(BBB,0) +NVL(BBB_M,0)+NVL(BB_P,0)+NVL(BB,0)+NVL(BB_M,0) +NVL(B_P,0)+NVL(B,0)+NVL(B_M,0) + NVL(CCC_P,0) +NVL(CCC,0)+NVL(CCC_M,0)+NVL(CC,0)+NVL(C,0) +NVL(SD,0)+NVL(D,0) TOTAL "+
			"FROM R360_APPDATA.rating_dist_filtered (:countriesCSVlist, :regionsCSVlist) rd "+
            "WHERE (:nullableval is NULL) or GSECTOR in (:sectorList)")
    public List<RatingDistICRTotalsEntity> findICRTotalsByGeoAndSectors(@Param("countriesCSVlist") String countriesCSVlist, @Param("regionsCSVlist") String regionsCSVlist,  @Param("sectorList") List<String> sectorList,  @Param("nullableval") String nullableval );
		
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\repository\RatingDistIndustryRepository.java

package com.spglobal.ratings.ratingsdata.repository;

import java.util.List;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import com.spglobal.ratings.ratingsdata.entity.RatingDistIndustryEntity;

@Repository
public interface RatingDistIndustryRepository extends JpaRepository<RatingDistIndustryEntity, String> {
	public List<RatingDistIndustryEntity> findAll();
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\repository\RatingDistRatingCodesRepository.java

package com.spglobal.ratings.ratingsdata.repository;

import java.util.List;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import com.spglobal.ratings.ratingsdata.entity.RatingDistRatingCodesEntity;

@Repository
public interface RatingDistRatingCodesRepository extends JpaRepository<RatingDistRatingCodesEntity, String> {
	public List<RatingDistRatingCodesEntity> findAll();
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\repository\RatingHistoryLastTenYrsPubRepository.java

package com.spglobal.ratings.ratingsdata.repository;

import java.util.List;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import com.spglobal.ratings.ratingsdata.entity.RatingHistoryLastTenYrsPublic;

@Repository("RatingHistoryLastTenYrsPubRepository")
public interface RatingHistoryLastTenYrsPubRepository extends JpaRepository<RatingHistoryLastTenYrsPublic, Long[] >{
	
	public List<RatingHistoryLastTenYrsPublic> findByEntityId(@Param("entityIds") List<Long> entityIds);
	
}



C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\repository\RatingHistoryLastTenYrsRepository.java

package com.spglobal.ratings.ratingsdata.repository;

import java.util.List;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import com.spglobal.ratings.ratingsdata.entity.RatingHistoryLastTenYrs;

@Repository("RatingHistoryLastTenYrsRepository")
public interface RatingHistoryLastTenYrsRepository extends JpaRepository<RatingHistoryLastTenYrs, Long >{
	
	public List<RatingHistoryLastTenYrs> findByEntityId(@Param("entityId") Long entityId);
	
}



C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\repository\RatingPeriodRepository.java

package com.spglobal.ratings.ratingsdata.repository;

import java.util.List;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import com.spglobal.ratings.ratingsdata.entity.PeriodDetailsEntity;

@Repository
public interface RatingPeriodRepository extends JpaRepository<PeriodDetailsEntity, Long> {
	@Query("SELECT pde FROM PeriodDetailsEntity pde WHERE pde.coreId = :coreId and lower(pde.periodTypeName) IN (:periodTypeName)")
	public List<PeriodDetailsEntity> findByCoreIdAndPeriodTypeNamed(@Param("coreId") Long coreId, 
			@Param("periodTypeName") List<String> periodTypeName);
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\repository\ReconciliationCustomRatingRepository.java

package com.spglobal.ratings.ratingsdata.repository;


import java.util.List;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;


import com.spglobal.ratings.ratingsdata.entity.ReconciliationCustomRatingEntity;
import com.spglobal.ratings.ratingsdata.model.ReconciliationData;

@Repository
public interface ReconciliationCustomRatingRepository extends JpaRepository<ReconciliationCustomRatingEntity, Long> {
	
	@Query("SELECT pde FROM ReconciliationCustomRatingEntity pde WHERE pde.coreId = :coreId"
			+ " and pde.finPeriodId IN (:finPeriodId)")
	public List<ReconciliationData> findByCoreIdAndFinPeriodId(@Param("coreId") Long coreId, 
			 @Param("finPeriodId") List<String> finPeriodId);

}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\repository\ReconciliationQuarterlyRatingRepository.java

package com.spglobal.ratings.ratingsdata.repository;

import java.util.List;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import com.spglobal.ratings.ratingsdata.entity.ReconciliationQuarterlyRatingEntity;
import com.spglobal.ratings.ratingsdata.model.ReconciliationData;

@Repository
public interface ReconciliationQuarterlyRatingRepository extends JpaRepository<ReconciliationQuarterlyRatingEntity, Long> {

	@Query("SELECT ryd FROM ReconciliationQuarterlyRatingEntity ryd WHERE coreId= :coreId ORDER BY ryd.fiscalYear DESC, ryd.formOrder ASC")
	public List<ReconciliationData> findByCoreId(@Param("coreId") Long coreId);

}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\repository\ReconciliationYearlyRatingRepository.java

package com.spglobal.ratings.ratingsdata.repository;

import java.util.List;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import com.spglobal.ratings.ratingsdata.entity.ReconciliationYearlyRatingEntity;
import com.spglobal.ratings.ratingsdata.model.ReconciliationData;

@Repository
public interface ReconciliationYearlyRatingRepository extends JpaRepository<ReconciliationYearlyRatingEntity, Long> {

	@Query("SELECT ryd FROM ReconciliationYearlyRatingEntity ryd WHERE coreId= :coreId ORDER BY ryd.fiscalYear DESC, ryd.formOrder ASC")
	public List<ReconciliationData> findByCoreId(@Param("coreId") Long coreId);

}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\repository\ScoresAndModifiersPublicRepository.java

package com.spglobal.ratings.ratingsdata.repository;

import java.util.List;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;
import org.springframework.transaction.annotation.Transactional;

import com.spglobal.ratings.ratingsdata.entity.ScoresAndModifiersPublic;
import com.spglobal.ratings.ratingsdata.entity.ScoresAndModifiersPublicId;

@Transactional
@Repository("ScoresAndModifiersPublicRepository")
public interface ScoresAndModifiersPublicRepository extends JpaRepository<ScoresAndModifiersPublic, ScoresAndModifiersPublicId>{

    @Query("select e from ScoresAndModifiersPublic e where e.entityId = ?1 and e.analyticCaseType = ?2 order by sortOrder ASC")
    public List<ScoresAndModifiersPublic> findByEntityId(@Param("entityId") String entityId, @Param("subsector") String subsector);

    @Query("SELECT sm FROM ScoresAndModifiersPublic sm WHERE sm.entityId in :entityIds and sm.analyticCaseType =:subSector order by sortOrder ASC")
    List<ScoresAndModifiersPublic> findByEntityIds(@Param("entityIds") List<String> entityIds, @Param("subSector") String subSector);

}



C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\repository\ScoresAndModifiersRepository.java

package com.spglobal.ratings.ratingsdata.repository;

import java.util.List;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import com.spglobal.ratings.ratingsdata.entity.ScoresAndModifiers;
import com.spglobal.ratings.ratingsdata.entity.ScoresAndModifiersId;

@Repository("ScoresAndModifiersRepo")
public interface ScoresAndModifiersRepository extends JpaRepository<ScoresAndModifiers, ScoresAndModifiersId>{
	
	public List<ScoresAndModifiers> findByEntityIdAndAnalyticCaseType(@Param("entityId") String entityId, @Param("analyticCaseType") String analyticCaseType);

}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\repository\SectorsArticleRepository.java

package com.spglobal.ratings.ratingsdata.repository;

import java.util.List;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import com.spglobal.ratings.ratingsdata.entity.SectorsArticleEntity;

@Repository
public interface SectorsArticleRepository extends JpaRepository<SectorsArticleEntity, Long> {
	@Query(nativeQuery = true, value = "SELECT DISTINCT a.ARTICLE_ID, a.TITLE, a.ARTICLE_DATE, a.AUTHOR from R360_APPDATA.VW_SECTOR_RSCH_ALL_BY_SUBJ a WHERE a.SUBJECT=:subject and  ARTICLE_DATE> '10-OCT-2020' ")
	public List<SectorsArticleEntity> findBySubject(@Param("subject") Long subject);

	@Query(nativeQuery = true, value = "SELECT DISTINCT a.ARTICLE_ID, a.TITLE, a.ARTICLE_DATE, a.AUTHOR from R360_APPDATA.VW_SECTOR_RSCH_ALL_BY_SUBJ a WHERE a.SUBJECT=:subject and (((SUBSECTOR  in (:subSectorCode) or :subSectorCodeStr is NULL) and (INDUSTRY_CODE  in (:industryCode) or :industryCodeStr is NULL)) or ((SUBSECTOR=:uspfSubSector) and (USPF_CODE  in (:uspfCode) or :uspfCodeStr is NULL))) and (REGION_CODE  in (:regionCode) or :regionCodeStr is NULL) and ARTICLE_DATE between :fromArticleDate and :toArticleDate order by a.ARTICLE_DATE desc")
	public List<SectorsArticleEntity> findBySubject(@Param("subject") Long subject, @Param("subSectorCode") List <String> subSectorCode, @Param("subSectorCodeStr") String subSectorCodeStr, @Param("industryCode") List <String> industryCode, @Param("industryCodeStr") String industryCodeStr, @Param("regionCode") List<String> regionCode, @Param("regionCodeStr") String regionCodeStr, @Param("uspfCode") List <String> uspfCode, @Param("uspfCodeStr") String uspfCodeStr, @Param("fromArticleDate") String fromArticleDate, @Param("toArticleDate") String toArticleDate, @Param("uspfSubSector") String uspfSubSector);

	@Query(nativeQuery = true, value = "SELECT DISTINCT ARTICLE_ID, TITLE, ARTICLE_DATE, AUTHOR from R360_APPDATA.VW_SECTOR_RSCH_ALL WHERE SUBSECTOR in ('CORP') and  ARTICLE_DATE> '10-OCT-2020' ORDER BY ARTICLE_DATE DESC")
	public List<SectorsArticleEntity> findAll();

	@Query(nativeQuery = true, value = "SELECT DISTINCT a.ARTICLE_ID, a.TITLE, a.ARTICLE_DATE, a.AUTHOR from R360_APPDATA.VW_SECTOR_RSCH_ALL a WHERE (((SUBSECTOR  in (:subSectorCode) or :subSectorCodeStr is NULL) and (INDUSTRY_CODE  in (:industryCode) or :industryCodeStr is NULL)) or ((SUBSECTOR=:uspfSubSector) and (USPF_CODE  in (:uspfCode) or :uspfCodeStr is NULL))) and (REGION_CODE  in (:regionCode) or :regionCodeStr is NULL) and ARTICLE_DATE between :fromArticleDate and :toArticleDate order by a.ARTICLE_DATE desc")
	public List<SectorsArticleEntity> findByAllArticleFilter(@Param("subSectorCode") List <String> subSectorCode, @Param("subSectorCodeStr") String subSectorCodeStr, @Param("industryCode") List <String> industryCode, @Param("industryCodeStr") String industryCodeStr, @Param("regionCode") List<String> regionCode, @Param("regionCodeStr") String regionCodeStr, @Param("uspfCode") List <String> uspfCode, @Param("uspfCodeStr") String uspfCodeStr, @Param("fromArticleDate") String fromArticleDate, @Param("toArticleDate") String toArticleDate, @Param("uspfSubSector") String uspfSubSector);

	@Query(nativeQuery = true, value = "SELECT DISTINCT a.ARTICLE_ID, a.TITLE, a.ARTICLE_DATE, a.AUTHOR from R360_APPDATA.VW_SECTOR_RSCH_ALL a WHERE (((SUBSECTOR  in (:subSectorCode) or :subSectorCodeStr is NULL) and (INDUSTRY_CODE  in (:industryCode) or :industryCodeStr is NULL)) or ((SUBSECTOR=:uspfSubSector) and (USPF_CODE  in (:uspfCode) or :uspfCodeStr is NULL))) and (REGION_CODE  in (:regionCode) or :regionCodeStr is NULL) and ARTICLE_DATE between :fromArticleDate and :toArticleDate order by a.ARTICLE_DATE desc fetch first :maxrows rows only")
	public List<SectorsArticleEntity> findByAllArticleFilterLimited(@Param("subSectorCode") List <String> subSectorCode, @Param("subSectorCodeStr") String subSectorCodeStr, @Param("industryCode") List <String> industryCode, @Param("industryCodeStr") String industryCodeStr, @Param("regionCode") List<String> regionCode, @Param("regionCodeStr") String regionCodeStr, @Param("uspfCode") List <String> uspfCode, @Param("uspfCodeStr") String uspfCodeStr, @Param("fromArticleDate") String fromArticleDate, @Param("toArticleDate") String toArticleDate, @Param("uspfSubSector") String uspfSubSector, @Param("maxrows") long maxRows);

	@Query(nativeQuery = true, value = "SELECT DISTINCT article_id, title, article_date, NULL AS author " +
			" FROM r360_appdata.vw_sector_research_articles_dashboard " +
			" WHERE (:subSectorCode is null or subsector = :subSectorCode) " +
			"ORDER BY article_date DESC FETCH FIRST :recCount ROWS ONLY")
	List<SectorsArticleEntity> getDashboardSectorArticles(@Param("subSectorCode") String subSectorCode,
																 @Param("recCount") Integer limit);

}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\repository\SectorsGeographyRepository.java

package com.spglobal.ratings.ratingsdata.repository;

import com.spglobal.ratings.ratingsdata.entity.SectorsGeographyEntity;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import java.util.List;

@Repository
public interface SectorsGeographyRepository extends JpaRepository<SectorsGeographyEntity, Long>{
	public List<SectorsGeographyEntity> findAll();
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\repository\SectorsRepository.java

package com.spglobal.ratings.ratingsdata.repository;

import com.spglobal.ratings.ratingsdata.entity.SectorsEntity;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import java.util.List;

@Repository
public interface SectorsRepository extends JpaRepository<SectorsEntity, String> {
    public List<SectorsEntity> findAll();
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\repository\SectorSubsectorEntityRepository.java

package com.spglobal.ratings.ratingsdata.repository;

import java.util.List;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.stereotype.Repository;

import com.spglobal.ratings.ratingsdata.entity.SectorSubsectorEntity;

@Repository
public interface SectorSubsectorEntityRepository extends JpaRepository<SectorSubsectorEntity, String> {

	@Query(value = "select distinct portfolio_sector,portfolio_subsector,portfolio_sector_code,portfolio_subsector_code from GS_GC.pfportfolio where \r\n"
			+ "portfolio_subsector IS NOT NULL and portfolio_sector is not null order by portfolio_sector ", nativeQuery = true)
	public List<Object> findSectorSubSectorDetails();

}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\repository\SnlEntityDetailsUnratedRepository.java

package com.spglobal.ratings.ratingsdata.repository;

import java.util.List;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import com.spglobal.ratings.ratingsdata.entity.SnlEntityDetailsUnrated;

@Repository
public interface SnlEntityDetailsUnratedRepository extends JpaRepository<SnlEntityDetailsUnrated, Long> {

	public List<SnlEntityDetailsUnrated> findBySnlId(@Param("snlId") String snlId);

	@Query("select e from SnlEntityDetailsUnrated e where e.snlId in (:keyInstnIds)")
	public List<SnlEntityDetailsUnrated> findBySnlIds(@Param("keyInstnIds") List<String> keyInstnIds);

	@Query("select e from SnlEntityDetailsUnrated e where e.snlId in (:keyInstnIds) and e.countryName not in ('Taiwan', 'Hong Kong', 'Macao')")
	public List<SnlEntityDetailsUnrated> findBySnlIdsForCNDomain(@Param("keyInstnIds") List<String> keyInstnIds);

	@Query("select e from SnlEntityDetailsUnrated e where upper(e.institutionName) in (:institutionNames)")
	public List<SnlEntityDetailsUnrated> findByInstitutionNameInList(@Param("institutionNames") List<String> institutionNames);

	List<SnlEntityDetailsUnrated> findByCapiqId(@Param("capiqId") String capiqId);

	@Query("select e from SnlEntityDetailsUnrated e where e.capiqId in (:capiqIds)")
	List<SnlEntityDetailsUnrated> findByCapiqIds(@Param("capiqIds") List<String> capiqIds);
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\repository\SovereignBICRAScoreRepository.java

package com.spglobal.ratings.ratingsdata.repository;

import java.util.List;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import com.spglobal.ratings.ratingsdata.entity.SovereignBICRAScores;

@Repository
public interface SovereignBICRAScoreRepository extends JpaRepository<SovereignBICRAScores, String> {
	
   public List<SovereignBICRAScores> findByCountryCode(String countryCode);	
  
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\repository\SovereignCountryRepository.java

package com.spglobal.ratings.ratingsdata.repository;

import java.util.List;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.stereotype.Repository;

import com.spglobal.ratings.ratingsdata.entity.SovereignCountryEntity;

@Repository
public interface SovereignCountryRepository extends JpaRepository<SovereignCountryEntity, Long>{
	
	@Query("select e from SovereignCountryEntity e")
	public List<SovereignCountryEntity> getCountryList();
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\repository\SovereignDashboadRepository.java

package com.spglobal.ratings.ratingsdata.repository;

import java.util.List;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import com.spglobal.ratings.ratingsdata.entity.SovereignDashboard;

@Repository
public interface SovereignDashboadRepository extends JpaRepository<SovereignDashboard, String> {
	
	@Query("select sd from SovereignDashboard sd where sd.countryISO3Code=:countryCode")
	public List<SovereignDashboard> getSovDashBoardData(@Param("countryCode") String country);
	
	@Query(nativeQuery = true, value = "SELECT NULL AS country_iso2_code, NULL AS country_iso3_code, NULL AS country_name, "
			+ "'Sovereign Risk' AS title, rating_type_desc || ' \\ CreditWatch/Outlook' AS score_name, "
			+ "current_rating_symbol || ' \\ ' ||  latest_non_affirm_cw_ol AS score_value FROM "
			+ "r360_appdata.vw_entity_ratings_public  WHERE debt_type_code = 'ICR' "
			+ "AND rating_type_code IN ('FCLONG', 'STDLONG') AND entity_id = :entityId ORDER BY rating_type_code ")
	public List<SovereignDashboard> getDashboardDataBasedOnEntity(@Param("entityId") Long entityId);


}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\repository\SovereignFSIICRARepository.java

package com.spglobal.ratings.ratingsdata.repository;

import java.util.List;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import com.spglobal.ratings.ratingsdata.entity.SovereignFSIICRA;

@Repository
public interface SovereignFSIICRARepository extends JpaRepository<SovereignFSIICRA, String> {
	
	public List<SovereignFSIICRA> findByCountryCode(String country);


}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\repository\SovereignFSMajorFactorsRepository.java

package com.spglobal.ratings.ratingsdata.repository;

import java.util.List;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import com.spglobal.ratings.ratingsdata.entity.SovereignFSMajorFactors;

@Repository
public interface SovereignFSMajorFactorsRepository extends JpaRepository<SovereignFSMajorFactors, String>{
	
	@Query("select mf from SovereignFSMajorFactors mf where mf.countryCode = :countryCode and UPPER(gridName) IN ('MAJOR FACTORS') order by gridName, displayOrder")
	public List<SovereignFSMajorFactors> findByCountryCode(@Param("countryCode") String country);
	

}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\repository\SovereignPeerBICRARepository.java

package com.spglobal.ratings.ratingsdata.repository;

import java.util.List;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import com.spglobal.ratings.ratingsdata.entity.SovereignPeerBICRAScores;

@Repository
public interface SovereignPeerBICRARepository extends JpaRepository<SovereignPeerBICRAScores, String> {
	
   
   public List<SovereignPeerBICRAScores> findByCountryCode(String countryCode);	
   
   @Query("select pbs from SovereignPeerBICRAScores pbs where pbs.peerCountryCode not in ('TW', 'HK', 'MO') and pbs.countryCode = :countryCode")
   public List<SovereignPeerBICRAScores> getPeerBICRAForCNDomain(@Param("countryCode") String countryCode);	
  
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\repository\SovereignResearchRatingDistributionRepository.java

package com.spglobal.ratings.ratingsdata.repository;

import java.util.List;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import com.spglobal.ratings.ratingsdata.entity.SovereignResearchRatingDistribution;
import com.spglobal.ratings.ratingsdata.entity.SovereignRiskEntity;

@Repository
public interface SovereignResearchRatingDistributionRepository extends JpaRepository<SovereignResearchRatingDistribution, String>{

	public List<SovereignResearchRatingDistribution> findByEntityId(Long entityId);
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\repository\SovereignRiskRepository.java

package com.spglobal.ratings.ratingsdata.repository;

import java.util.List;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import com.spglobal.ratings.ratingsdata.entity.SovereignRiskEntity;

@Repository
public interface SovereignRiskRepository extends JpaRepository<SovereignRiskEntity, String>{

	public List<SovereignRiskEntity> findByCountryCode(String country);
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\repository\SovereignSummaryRepository.java

package com.spglobal.ratings.ratingsdata.repository;

import java.util.List;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import com.spglobal.ratings.ratingsdata.entity.SovereignCountrySummary;

@Repository
public interface SovereignSummaryRepository extends JpaRepository<SovereignCountrySummary, String>{
	
	public List<SovereignCountrySummary> findByCountryCode(String country);

}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\repository\SovereignTopFiveFinInstnsepo.java

package com.spglobal.ratings.ratingsdata.repository;

import java.util.List;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import com.spglobal.ratings.ratingsdata.entity.SovereignTopFiveFinInst;

@Repository
public interface SovereignTopFiveFinInstnsepo extends JpaRepository<SovereignTopFiveFinInst, String> {
	
	public List<SovereignTopFiveFinInst> findByCountryCode(String country);

}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\repository\TimeZoneRepository.java

package com.spglobal.ratings.ratingsdata.repository;

import java.util.List;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import com.spglobal.ratings.ratingsdata.entity.TimeZone;

@Repository
public interface TimeZoneRepository extends JpaRepository<TimeZone, Long> {
	
	@Query("select e from TimeZone e where e.timeZone =: timeZone OR e.timeZoneName =:timeZone")
	public List<TimeZone> findTimeZone(@Param("timeZone") String timeZone);

}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\repository\UspfAnalyticalContactsRepository.java

package com.spglobal.ratings.ratingsdata.repository;

import java.util.List;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import com.spglobal.ratings.ratingsdata.entity.UspfAnalyticalContacts;

@Repository
public interface UspfAnalyticalContactsRepository extends JpaRepository<UspfAnalyticalContacts, Long> {
	
	public List<UspfAnalyticalContacts> findByAnalyticalSecId(Long asId) throws Exception;

}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\repository\UspfCurrentRatingsRepository.java

package com.spglobal.ratings.ratingsdata.repository;

import java.util.List;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import com.spglobal.ratings.ratingsdata.entity.UspfCurrentRatings;

@Repository
public interface UspfCurrentRatingsRepository extends JpaRepository<UspfCurrentRatings, Long> {
		
	@Query("SELECT distinct new com.spglobal.ratings.ratingsdata.entity.UspfCurrentRatings(cr.entityId,"
			+ "cr.securityId,cr.securityInstrumentId,cr.sector,cr.subSector,cr.securityName,cr.ratingDetailId,cr.ratingType,"
			+ "cr.rating,cr.ratingDate,cr.lastReviewDate,cr.action,cr.creditWatchOutlook,cr.creditWatchOutlookDate,"
			+ "cr.latestArticleDate,cr.articleId, cr.ratingTypeCode) FROM UspfCurrentRatings cr WHERE cr.entityId=:entityId and (:securityId is null or cr.securityId=:securityId)"
			+ "and (:ratingTypeCode is null or cr.ratingTypeCode=:ratingTypeCode) order by cr.sector,cr.subSector,cr.securityName")
	public List<UspfCurrentRatings> getCurrentRatings(@Param("entityId") Long entityId, @Param("securityId") Long securityId, @Param("ratingTypeCode") String ratingTypeCode) throws Exception;
	
	
	@Query("SELECT distinct new com.spglobal.ratings.ratingsdata.entity.UspfCurrentRatings(cr.entityId,"
			+ "cr.securityId,cr.securityInstrumentId,cr.sector,cr.subSector,cr.securityName,cr.ratingDetailId,cr.ratingType,"
			+ "cr.rating,cr.ratingDate,cr.lastReviewDate,cr.action,cr.creditWatchOutlook,cr.creditWatchOutlookDate,cr.latestArticleDate,cr.articleId, cr.ratingTypeCode)"
			+ " FROM UspfCurrentRatings cr WHERE cr.entityId=:entityId and cr.roleCode in (:roleCode) order by cr.sector,cr.subSector,cr.securityName")
	public List<UspfCurrentRatings> getCurrentRatingsBasedonRoleCode(@Param("entityId") Long entityId,
			@Param("roleCode") List<String> roleCode) throws Exception;

}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\repository\UspfDashboardRatingsRepository.java

package com.spglobal.ratings.ratingsdata.repository;

import java.util.List;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import com.spglobal.ratings.ratingsdata.entity.UspfDashboardRatings;

@Repository
public interface UspfDashboardRatingsRepository extends JpaRepository<UspfDashboardRatings, Long> {
	
	public List<UspfDashboardRatings> findByEntityId(Long entityId);

}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\repository\UspfEconomicAndFinRepository.java

package com.spglobal.ratings.ratingsdata.repository;

import java.util.List;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import com.spglobal.ratings.ratingsdata.entity.RatingUspfEconomicFinDetails;
import com.spglobal.ratings.ratingsdata.entity.SectorsArticleEntity;

@Repository("UspfEconomicAndFinRepository")
public interface UspfEconomicAndFinRepository extends JpaRepository<RatingUspfEconomicFinDetails, Long> {
	
	@Query(nativeQuery = true, value = "select * from R360_APPDATA.vw_uspf_econ_fin_data ra "
			+ "WHERE ra.AS_ID IN :asIds")
	public List<RatingUspfEconomicFinDetails> findAsFilter(@Param("asIds") List <Long> asIds);


}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\repository\UspfNIBRatingsHistoryRepository.java

package com.spglobal.ratings.ratingsdata.repository;

import java.util.List;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import com.spglobal.ratings.ratingsdata.entity.UspfNonIssuerBasedRatingHisotry;

@Repository
public interface UspfNIBRatingsHistoryRepository extends JpaRepository<UspfNonIssuerBasedRatingHisotry, Long>{
	
	@Query("select rh from UspfNonIssuerBasedRatingHisotry rh where rh.instrumentId= :instrumentId "
			+ "and (:instrDetailId is null or rh.instrDetailId = :instrDetailId)"
			+ "  and rh.ratingTypeCode= :ratingTypeCode")
	public List<UspfNonIssuerBasedRatingHisotry> getRatingHistoryData(@Param("instrumentId") Long instrumentId,
			@Param("instrDetailId") Long instrDetailId , @Param("ratingTypeCode") String ratingTypeCode);

}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\repository\UspfNIBRatingsIssueNameRepository.java

package com.spglobal.ratings.ratingsdata.repository;

import java.util.List;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import com.spglobal.ratings.ratingsdata.entity.UspfNonIssuerBasedRatingsIssue;

@Repository
public interface UspfNIBRatingsIssueNameRepository extends JpaRepository<UspfNonIssuerBasedRatingsIssue, Long> {
	
	@Query("select distinct new com.spglobal.ratings.ratingsdata.entity.UspfNonIssuerBasedRatingsIssue(ri.entityId,"
			+ "ri.instrumentId,ri.issueName,ri.category,ri.dateBegun,ri.series,ri.sortCriteria1,ri.sortCriteria2,ri.sortCriteria3)"
			+ " from UspfNonIssuerBasedRatingsIssue ri where ri.entityId=:entityId and ri.roleCode in (:roleCode) "
			+ "and ri.category in (:category) and (:keyword is null or upper(ri.issueName) like '%' || upper(:keyword) || '%') "
			+ "order by ri.sortCriteria1,ri.sortCriteria2,ri.sortCriteria3,ri.dateBegun desc,ri.series,ri.issueName")
	public List<UspfNonIssuerBasedRatingsIssue> getUspfNIBRatingsWithIssueNameOnly(@Param("entityId") Long entityId,
			@Param("roleCode") List<String> roleCode, @Param("category") List<String> category,
			@Param("keyword") String keyword);
	
	

}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\repository\UspfNIBRatingsRepository.java

package com.spglobal.ratings.ratingsdata.repository;

import java.util.List;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;

import com.spglobal.ratings.ratingsdata.entity.UspfNonIssuerBasedRatings;

public interface UspfNIBRatingsRepository extends JpaRepository<UspfNonIssuerBasedRatings, Long>{
	
	
	@Query("select distinct new com.spglobal.ratings.ratingsdata.entity.UspfNonIssuerBasedRatings(nr.entityId,nr.issueName,nr.instrumentId,"
			+ "nr.instrDetailId,nr.ratingDetailId,nr.cusip,nr.category,nr.maturityDate,nr.ratingType,nr.rating,nr.ratingDate,nr.lastReviewDate,"
			+ "nr.regulatoryInd,nr.action,nr.creditWatchOutlook,nr.creditWatchOutlookDate,nr.couponRate,nr.refundedInd,nr.insProvider,nr.muncipalSecurity,"
			+ "nr.dateBegun,nr.series,nr.ratingTypeCode,nr.sortCriteria1,nr.sortCriteria2,nr.sortCriteria3) from UspfNonIssuerBasedRatings nr "
			+ "WHERE nr.entityId=:entityId ORDER BY nr.sortCriteria1,nr.sortCriteria2,nr.sortCriteria3,nr.dateBegun DESC,nr.series,nr.issueName,nr.maturityDate DESC,nr.ratingDate DESC")
	public List<UspfNonIssuerBasedRatings> getUspfNIBRatingsAll(@Param("entityId") Long entityId);

	
	@Query(nativeQuery = true ,value="select distinct entity_id,issue_name,cusip,category,maturity_date,rating_type,rating,"
			+ "rating_date,last_review_date,regulatory_indicator,action,creditwatch_outlook,creditwatch_outlook_date,"
			+ "coupon_rate,refunded_ind,insurance_provider,municipal_security,datebegun,series,instrument_id,instrument_detail_id,"
			+ "rating_detail_id,rating_type_code,sort_criteria1,sort_criteria2,sort_criteria3, null as role_code"
			+ " from r360_appdata.vw_uspf_nib_ratings "
			+ "WHERE entity_id=:entityId and role_code in (:roleCode) and category in (:category) "
			+ "and (:keyword is null or ((upper(cusip) like %:keyword% ) or (upper(issue_name) like %:keyword%)))"
			+ "and extract(year from maturity_date) between :maturityYearFrom and :maturityYearTo "
			+ "ORDER BY sort_criteria1,sort_criteria2,sort_criteria3,datebegun DESC,series,issue_name,maturity_date DESC,rating_date DESC")	
	public List<UspfNonIssuerBasedRatings> getUspfNIBRatingsFilterData(@Param("entityId") Long entityId,
			@Param("roleCode") List<String> roleCode, @Param("category") List<String> category,
			@Param("keyword") String keyword,
			@Param("maturityYearFrom") Integer maturityYearFrom,
			@Param("maturityYearTo") Integer maturityYearTo );	
	
	@Query("select distinct new com.spglobal.ratings.ratingsdata.entity.UspfNonIssuerBasedRatings(nr.entityId,nr.issueName,"
			+ "nr.instrumentId,nr.instrDetailId,nr.ratingDetailId,nr.cusip,nr.category,nr.maturityDate,nr.ratingType,nr.rating,nr.ratingDate,"
			+ "nr.lastReviewDate,nr.regulatoryInd,nr.action,nr.creditWatchOutlook,nr.creditWatchOutlookDate,nr.couponRate,nr.refundedInd,nr.insProvider,"
			+ "nr.muncipalSecurity,nr.dateBegun,nr.series,nr.ratingTypeCode,nr.sortCriteria1,nr.sortCriteria2,nr.sortCriteria3) "
			+ "from UspfNonIssuerBasedRatings nr WHERE nr.entityId=:entityId and nr.instrumentId=:instrumentId "
			+ "ORDER BY nr.sortCriteria1,nr.sortCriteria2,nr.sortCriteria3,nr.dateBegun DESC,nr.series,nr.issueName,nr.maturityDate DESC,nr.ratingDate DESC")
	public List<UspfNonIssuerBasedRatings> getIssuerMaturityDetails(@Param("entityId") Long entityId, @Param("instrumentId") Long insId);
	
	
	
	
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\repository\USPFPortfolioContentDataRepository.java

package com.spglobal.ratings.ratingsdata.repository;

import java.util.List;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import com.spglobal.ratings.ratingsdata.entity.UspfPeerPortfolioData;

@Repository
public interface USPFPortfolioContentDataRepository extends JpaRepository<UspfPeerPortfolioData, Long> {
	
	@Query("select upd from UspfPeerPortfolioData upd where upd.asId IN (:asIds) and upd.rankNum = 1")
	 public List<UspfPeerPortfolioData> findAllByAsId(@Param("asIds") List<Long> instrumentId);
	
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\repository\UspfPortfolioContentsRepository.java

package com.spglobal.ratings.ratingsdata.repository;

import java.util.List;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import com.spglobal.ratings.ratingsdata.entity.UspfPeerSuppliersPortfolioContents;

@Repository
public interface UspfPortfolioContentsRepository extends JpaRepository<UspfPeerSuppliersPortfolioContents, Long> {
	@Query("select upc from UspfPeerSuppliersPortfolioContents upc where upc.sectorCode =:sector "
			+ " and upc.subSectorCode=:subSector and upc.stateCode in (:geographyList) and upc.ratingTypeCode=:rateType "
			+ "and upc.rating in (:rateCodeList) ")
	public List<UspfPeerSuppliersPortfolioContents> findByFilteredData(@Param("sector") String sector,
			@Param("subSector") String subSector, @Param("geographyList") List<String> geographyList,
			@Param("rateType") String rateType, @Param("rateCodeList") List<String> rateCodeList);
	
	@Query("select upc from UspfPeerSuppliersPortfolioContents upc where upc.asId in (:asIdList) ")
	public List<UspfPeerSuppliersPortfolioContents> findByAsIds(@Param("asIdList") List<Long> asIdList);
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\repository\UspfRatingCodesRepository.java

package com.spglobal.ratings.ratingsdata.repository;

import java.util.List;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.stereotype.Repository;

import com.spglobal.ratings.ratingsdata.entity.UspfRatingCodes;

@Repository
public interface UspfRatingCodesRepository extends JpaRepository<UspfRatingCodes, String> {

	@Query("select urc from UspfRatingCodes urc where urc.ratingCategoryCode = 'STDLONG' and urc.activeInd='Y' and urc.ratingSymbol != 'NR' order by urc.sortOrder")
	public List<UspfRatingCodes> findLongRatingData();

	@Query("select urc from UspfRatingCodes urc where urc.ratingCategoryCode = 'STDSHORT' and urc.activeInd='Y' and urc.ratingSymbol != 'NR' order by urc.sortOrder")
	public List<UspfRatingCodes> findShortRatingData();
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\repository\UspfRatingsRoleRepository.java

package com.spglobal.ratings.ratingsdata.repository;

import java.util.List;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.stereotype.Repository;

import com.spglobal.ratings.ratingsdata.entity.UspfRatingsRoles;

@Repository
public interface UspfRatingsRoleRepository extends JpaRepository<UspfRatingsRoles, String>{
	
	@Query("select rr FROM UspfRatingsRoles rr where  rr.roleCode in ('ISSUER', 'OBLIGOR') and rr.activeInd='Y'")
	public List<UspfRatingsRoles> findByRoleCode();

}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\repository\UspfRelatedArticlesRepository.java

package com.spglobal.ratings.ratingsdata.repository;

import java.util.List;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;

import com.spglobal.ratings.ratingsdata.entity.UspfRelatedArticles;

public interface UspfRelatedArticlesRepository extends JpaRepository<UspfRelatedArticles, Long>{
	
	@Query(value="select ra.relate_id,ra.article_id, ra.article_title, ra.article_type_id, ra.article_type, "
			+ "ra.article_date, ra.article_author,null as abstract from r360_appdata.vw_related_articles ra "
			+ "WHERE ra.relate_id=:instrumentId and trunc(ra.article_date) between to_date(:fromDate,'MM/DD/YYYY') "
			+ "and to_date(:toDate,'MM/DD/YYYY') "  , nativeQuery = true)
	public List<UspfRelatedArticles> getRelatedArtciles(@Param("instrumentId") Long instrumentId, 
			@Param("fromDate") String fromDate, @Param("toDate") String toDate) throws Exception;
	
	@Query(value="select ra.relate_id,ra.article_id, ra.article_title, ra.article_type_id, ra.article_type, "
			+ "ra.article_date, ra.article_author,null as abstract from r360_appdata.vw_related_articles ra "
			+ "WHERE ra.relate_id=:instrumentId and ra.article_type_id in (:artilceTypeId) and"
			+ " trunc(ra.article_date) between to_date(:fromDate,'MM/DD/YYYY') and to_date(:toDate,'MM/DD/YYYY') " , nativeQuery = true)
	public List<UspfRelatedArticles> getRelatedArtcilesWithArticleType(@Param("instrumentId") Long instrumentId, 
			@Param("artilceTypeId") List<Integer> artilceTypeId,
			@Param("fromDate") String fromDate, @Param("toDate") String toDate) throws Exception;
	
	@Query(value="select ra.relate_id,ra.article_id, ra.article_title, ra.article_type_id, ra.article_type, "
			+ "ra.article_date, ra.article_author, ra.abstract from r360_appdata.vw_related_articles ra "
			+ "WHERE ra.relate_id = :instrumentId FETCH FIRST 20 ROWS ONLY", nativeQuery = true)
	public List<UspfRelatedArticles> getDashboardArticles(@Param("instrumentId") Long instrumentId) throws Exception;
	
	@Query(value="select distinct ra.article_id, ra.article_title, ra.article_type_id, ra.article_type, "
			+ "ra.article_date, ra.article_author, null as abstract, null as relate_id from r360_appdata.vw_uspf_peers_rating_articles ra "
			+ "WHERE ra.as_id in (:securityIds) order by ra.article_date desc FETCH FIRST 20 ROWS ONLY", nativeQuery = true)
	public List<UspfRelatedArticles> getDashboardPeerArticles(@Param("securityIds") List<Long> securityIds) throws Exception;


}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\repository\UspfRelatedCriteriaRepository.java

package com.spglobal.ratings.ratingsdata.repository;

import java.util.List;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import com.spglobal.ratings.ratingsdata.entity.UspfRelatedCriteria;

@Repository
public interface UspfRelatedCriteriaRepository extends JpaRepository<UspfRelatedCriteria, Long>{
	
	public List<UspfRelatedCriteria> findByRatingDetailId(Long ratingDetailId) throws Exception;

}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\repository\UspfStateLookupRepository.java

package com.spglobal.ratings.ratingsdata.repository;

import java.util.List;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.stereotype.Repository;

import com.spglobal.ratings.ratingsdata.entity.UspfStateLookup;

@Repository
public interface UspfStateLookupRepository extends JpaRepository<UspfStateLookup, String> {

	@Query(value="select * from r360_user_pref.r360_app_state",nativeQuery = true)
	public List<UspfStateLookup> findAllStates();
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\repository\ViewEntityDetailsRepository.java

package com.spglobal.ratings.ratingsdata.repository;

import java.util.List;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import com.spglobal.ratings.ratingsdata.entity.EntityDetails;

@Repository
public interface ViewEntityDetailsRepository extends JpaRepository<EntityDetails, Long> {

	public List<EntityDetails> findByEntityId(@Param("entityId") Long entityId);
	
	@Query("select e from EntityDetails e where e.entityId in (:entityIds) order by e.entityId")
	public List<EntityDetails> findOrgAndTickerDetailsForEntityIds(@Param("entityIds") List<String> entityIds);

	public List<EntityDetails> findBySnlId(@Param("snlId") String snlId);

	@Query("select e from EntityDetails e where e.snlId in (:snlIds) order by e.snlId")
	public List<EntityDetails> findOrgAndTickerDetailsForSnlIds(@Param("snlIds") List<String> snlIds);

	public List<EntityDetails> findByCapiqId(@Param("capiqId") String capiqId);

	@Query("select e from EntityDetails e where e.capiqId in (:capiqIds) order by e.capiqId")
	public List<EntityDetails> findOrgAndTickerDetailsForCapiqIds(@Param("capiqIds") List<String> capiqIds);

}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\repository\ViewRelatedCNEntitiesRepository.java

package com.spglobal.ratings.ratingsdata.repository;

import java.util.List;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import com.spglobal.ratings.ratingsdata.entity.RelatedCNEntities;
import com.spglobal.ratings.ratingsdata.entity.RelatedEntities;

@Repository
public interface ViewRelatedCNEntitiesRepository extends JpaRepository<RelatedCNEntities, Long> {
	
	public List<RelatedEntities> findByEntityId(@Param("entityId") Long entityId);
	
	public List<RelatedEntities> findByKeyInstId(@Param("snlId") String snlId);

	List<RelatedEntities> findByCapiqId(@Param("capiqId") String capiqId);


}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\repository\ViewRelatedEntitiesRepository.java

package com.spglobal.ratings.ratingsdata.repository;

import java.util.List;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import com.spglobal.ratings.ratingsdata.entity.RelatedEntities;
import com.spglobal.ratings.ratingsdata.entity.RelatedEntity;

@Repository
public interface ViewRelatedEntitiesRepository extends JpaRepository<RelatedEntity, Long> {
	
	public List<RelatedEntities> findByEntityId(@Param("entityId") Long entityId);
	
	public List<RelatedEntities> findByKeyInstId(@Param("snlId") String snlId);

	List<RelatedEntities> findByCapiqId(@Param("capiqId") String capiqId);

}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\service\ArticlePDFService.java

package com.spglobal.ratings.ratingsdata.service;

public interface ArticlePDFService {
	
	public byte[] getArticlePDFByArticleId(Long articleId);

}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\service\ArticlePDFServiceImpl.java

package com.spglobal.ratings.ratingsdata.service;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.spglobal.ratings.ratingsdata.dao.ArticlePDFDao;

import lombok.extern.slf4j.Slf4j;

@Service("articlePDFService")
@Slf4j
public class ArticlePDFServiceImpl implements ArticlePDFService {
	
	@Autowired
	private ArticlePDFDao articlePDFDao;
	
	
	@Override
	public byte[] getArticlePDFByArticleId(Long articleId) {
		log.info("@ArticlePDFServiceImpl getArticlePDFByArticleId --> fetching Article PDF: ");
			byte[] articlePDF =null;
		try {
			articlePDF= articlePDFDao.getArticlePDFByArticleId(articleId);
		}catch(Exception e)
		{
			log.error("@ArticlePDFDao getArticlePDFByArticleId method --> Failed: {}", e.getMessage());
			throw e;
		}
		return articlePDF;
	}
	
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\service\CommonFeaturesService.java

package com.spglobal.ratings.ratingsdata.service;

import java.util.List;

import org.springframework.http.HttpHeaders;

import com.spglobal.ratings.ratingsdata.entity.CLOABSContacts;
import com.spglobal.ratings.ratingsdata.entity.Contacts;
import com.spglobal.ratings.ratingsdata.entity.EntityDetails;
import com.spglobal.ratings.ratingsdata.entity.SnlEntityDetailsUnrated;
import com.spglobal.ratings.ratingsdata.entity.TimeZone;
import com.spglobal.ratings.ratingsdata.entity.RelatedEntities;


public interface CommonFeaturesService {

	public List<EntityDetails> getOrgAndTickerDetailsByEntityId(Long entityId);

	public List<RelatedEntities> getRelatedEntitiesByEntityId(Long entityId, HttpHeaders httpHeaders);

	public List<RelatedEntities> getRelatedEntitiesByType(String type, String snlId, HttpHeaders httpHeaders);

	public List<EntityDetails> getOrgAndTickerDetailsForEntityIds(List<String> list, String type);

	public List<TimeZone> getTimeZone(String timeZone);

	List<Contacts> getContacts(Long entityId, String capiqId, String contactType);
	
	List<CLOABSContacts> getCLOABSContacts(Long entityId, String SubSectorCode, String contactType);
	
	List<SnlEntityDetailsUnrated> getInstitutionDetails(List<String> instnNames);

	List<EntityDetails> getOrgAndTickerDetailsByType(String type, String id);
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\service\CommonFeaturesServiceImpl.java

package com.spglobal.ratings.ratingsdata.service;

import java.util.Collections;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.HttpHeaders;
import org.springframework.stereotype.Service;
import org.springframework.util.CollectionUtils;

import com.spglobal.ratings.ratingsdata.dao.CommonFeaturesDAO;
import com.spglobal.ratings.ratingsdata.entity.CLOABSContacts;
import com.spglobal.ratings.ratingsdata.entity.Contacts;
import com.spglobal.ratings.ratingsdata.entity.EntityDetails;
import com.spglobal.ratings.ratingsdata.entity.RelatedEntities;
import com.spglobal.ratings.ratingsdata.entity.SnlEntityDetailsUnrated;
import com.spglobal.ratings.ratingsdata.entity.TimeZone;
import com.spglobal.ratings.ratingsdata.util.RatingsDataConstant;
import org.springframework.util.ObjectUtils;

//@Slf4j
@Service
public class CommonFeaturesServiceImpl implements CommonFeaturesService {

	@Autowired
	CommonFeaturesDAO commonFeaturesDAO;

	@Value("${contact.default.email}")
	private String defaultEmail;

	@Override
	public List<EntityDetails> getOrgAndTickerDetailsByEntityId(Long entityId) {
		return commonFeaturesDAO.getOrgAndTickerDetailsByEntityId(entityId);
	}

	@Override
	public List<RelatedEntities> getRelatedEntitiesByEntityId(Long entityId, HttpHeaders httpHeaders) {
		return commonFeaturesDAO.getRelatedEntitiesByEntityId(entityId, httpHeaders);
	}

	@Override
	public List<RelatedEntities> getRelatedEntitiesByType(String type, String id, HttpHeaders httpHeaders) {
		if(!ObjectUtils.isEmpty(id)){
			if(RatingsDataConstant.SNL_TYPES_PARAM.contains(type)){
				return commonFeaturesDAO.getRelatedEntitiesBySNLID(id, httpHeaders);
			}
			if(RatingsDataConstant.CAPIQ_STR.equalsIgnoreCase(type)){
				return commonFeaturesDAO.getRelatedEntitiesByCapiq(id);
			}
		}
		return Collections.emptyList();
	}

	@Override
	public List<EntityDetails> getOrgAndTickerDetailsForEntityIds(List<String> listOfIds, String type) {
		List<EntityDetails> entityDetailsList = null;
		if(type != null){
			if(RatingsDataConstant.SNL_STR.equalsIgnoreCase(type)){
				entityDetailsList=commonFeaturesDAO.getOrgAndTickerDetailsForsnlIds(listOfIds);
			}
			if(RatingsDataConstant.CAPIQ_STR.equalsIgnoreCase(type)){
				entityDetailsList=commonFeaturesDAO.getOrgAndTickerDetailsForCapiqIds(listOfIds);
			}
			if(RatingsDataConstant.COREID_STR.equalsIgnoreCase(type)){
				entityDetailsList=commonFeaturesDAO.getOrgAndTickerDetailsByEntityIds(listOfIds);
			}
		}
		return entityDetailsList;
	}
	
	@Override
	public List<SnlEntityDetailsUnrated> getInstitutionDetails(List<String> instnNames) {
		return commonFeaturesDAO.findByInstitutionNameInList(instnNames);
	}

	@Override
	public List<EntityDetails> getOrgAndTickerDetailsByType(String type, String id) {

		if(RatingsDataConstant.SNL_TYPES_PARAM.contains(type) && !ObjectUtils.isEmpty(id)){
			return commonFeaturesDAO.getOrgAndTickerDetailsForSnlId(Long.valueOf(id));
		}
		if(RatingsDataConstant.CAPIQ_STR.equalsIgnoreCase(type) && !ObjectUtils.isEmpty(id)){
			return commonFeaturesDAO.getOrgAndTickerDetailsForCapiqId(id);
		}
		return Collections.emptyList();
	}


	@Override
	public List<TimeZone> getTimeZone(String timeZone) {
		return commonFeaturesDAO.getTimeZone(timeZone);
	}
	
	@Override
	public List<Contacts> getContacts(Long entityId, String capiqId, String contactType) {

		List<Contacts> contacts = commonFeaturesDAO.getContacts(entityId, capiqId, contactType);
		if (CollectionUtils.isEmpty(contacts)) {
			Contacts defaultContact = createDefaultContact();
			contacts.add(defaultContact);
		}
		return contacts;
	}

	private Contacts createDefaultContact() {
		Contacts defaultContact = new Contacts();
		defaultContact.setContactType(RatingsDataConstant.DEFAULT_CONTACT);
		defaultContact.setContactType(RatingsDataConstant.DEFAULT_ROLE);
		defaultContact.setEmail(defaultEmail);
		defaultContact.setEntityId(0l);
		return defaultContact;
	}
	

	/**
	 * @param entityId
	 * @param contactType
	 * @param subSectorCode
	 * @return
	 */
	@Override
	public List<CLOABSContacts> getCLOABSContacts(Long entityId,String subSectorCode, String contactType) {
		List<CLOABSContacts> contacts = commonFeaturesDAO.getCLOABSContacts(entityId,subSectorCode, contactType);
		if (CollectionUtils.isEmpty(contacts)) {
			CLOABSContacts defaultContact = createDefaultCLOABSContact();
			contacts.add(defaultContact);
		}
		return contacts;
	}
	
	private CLOABSContacts createDefaultCLOABSContact() {
		CLOABSContacts defaultContact = new CLOABSContacts();
		defaultContact.setContactType(RatingsDataConstant.DEFAULT_CONTACT);
		defaultContact.setContactType(RatingsDataConstant.DEFAULT_ROLE);
		defaultContact.setEmail(defaultEmail);
		defaultContact.setEntityId(0l);
		return defaultContact;
	}
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\service\ConfigDetailsService.java

package com.spglobal.ratings.ratingsdata.service;

import java.util.List;

import org.springframework.stereotype.Service;

import com.spglobal.ratings.ratingsdata.entity.ConfigDetails;

@Service
public interface ConfigDetailsService{

	public ConfigDetails getConfigDetails(String configKey);
	public List<ConfigDetails> getConfigDetail(List<String> commaSepKeys);
	ConfigDetails getConfigDetailsByUser(String configKey, String authToken);
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\service\ConfigDetailsServiceImpl.java

package com.spglobal.ratings.ratingsdata.service;

import java.util.List;

import jakarta.servlet.http.HttpServletRequest;

import org.apache.commons.lang3.ObjectUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpHeaders;
import org.springframework.stereotype.Service;
import org.springframework.web.context.request.RequestContextHolder;
import org.springframework.web.context.request.ServletRequestAttributes;

import com.spglobal.ratings.ratingsdata.dao.ConfigDetailsDao;
import com.spglobal.ratings.ratingsdata.entity.ConfigDetails;
import com.spglobal.ratings.ratingsdata.repository.ConfigDetailsRepository;

import lombok.extern.slf4j.Slf4j;

@Service("configDetailsService")
@Slf4j
public class ConfigDetailsServiceImpl implements ConfigDetailsService {

	@Autowired
	private ConfigDetailsRepository configDetailsRepository;

	@Autowired
	private ConfigDetailsDao configDetailsDao;
	
	@Override
	public ConfigDetails getConfigDetails(String configKey) {
		HttpServletRequest request = ((ServletRequestAttributes) RequestContextHolder.getRequestAttributes())
				.getRequest();
		String authToken = request.getHeader(HttpHeaders.AUTHORIZATION);
		
		if(!ObjectUtils.isEmpty(authToken)) {
			
		}

		return configDetailsRepository.findByConfigKey(configKey);
	}
	
	@Override
	public ConfigDetails getConfigDetailsByUser(String configKey, String authToken) {
//		HttpServletRequest request = ((ServletRequestAttributes) RequestContextHolder.getRequestAttributes())
//				.getRequest();
//		String authToken = request.getHeader(HttpHeaders.AUTHORIZATION);

		if(!ObjectUtils.isEmpty(authToken)) {
			
		}

		return configDetailsRepository.findByConfigKey(configKey);
	}

	@Override
	public List<ConfigDetails> getConfigDetail(List<String> commaSepKeys){
		
		return configDetailsDao.getConfigDetails(commaSepKeys);
		
	}
	
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\service\CoreOrgIdService.java

package com.spglobal.ratings.ratingsdata.service;

import java.util.List;

import org.springframework.stereotype.Service;

import com.spglobal.ratings.ratingsdata.entity.CoreOrgIdKeyInstnMap;
import com.spglobal.ratings.ratingsdata.model.EntityTypeIdsRequest;
import com.spglobal.ratings.ratingsdata.model.EntityTypeIdsResponse;

@Service
public interface CoreOrgIdService {

	public List<CoreOrgIdKeyInstnMap> getCoreOrgIds(String commaSepKeyInstns);

	List<CoreOrgIdKeyInstnMap> getCoreOrgIdsByTypeandList(String type, List<String> idsList);

    List<CoreOrgIdKeyInstnMap> getCoreOrgIdsByCapiq(List<String> capIqids);
    
    EntityTypeIdsResponse getCapiqIdsbyCoreSnlSpIds(EntityTypeIdsRequest entityTypeIdsRequest);
}



C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\service\CoreOrgIdServiceImpl.java

package com.spglobal.ratings.ratingsdata.service;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.util.CollectionUtils;
import org.springframework.util.ObjectUtils;

import com.spglobal.ratings.ratingsdata.dao.CoreOrgIdKeyInstnMapDao;
import com.spglobal.ratings.ratingsdata.entity.CoreOrgIdKeyInstnMap;
import com.spglobal.ratings.ratingsdata.entity.CoreOrgIdKeyInstnSPIdMap;
import com.spglobal.ratings.ratingsdata.exception.ApplicationRuntimeException;
import com.spglobal.ratings.ratingsdata.model.EntityTypeIdsRequest;
import com.spglobal.ratings.ratingsdata.model.EntityTypeIdsResponse;
import com.spglobal.ratings.ratingsdata.util.RatingsDataConstant;
import com.spglobal.ratings.ratingsdata.util.RatingsDataUtil;

import lombok.extern.slf4j.Slf4j;

@Service("coreOrgIdServiceImpl")
@Slf4j
public class CoreOrgIdServiceImpl implements CoreOrgIdService{

	@Autowired
	private RatingsDataUtil ratingsUtil;
	
	@Autowired
	private CoreOrgIdKeyInstnMapDao coreOrgIdKeyInstnMapDao;
	
	public List<CoreOrgIdKeyInstnMap> getCoreOrgIds(String commaSepKeyInstns)
	{
		log.info("@CoreOrgIdService getCoreOrgIds for keyInstnIds: " +ratingsUtil.sanitizeString(commaSepKeyInstns));
		
		List<CoreOrgIdKeyInstnMap> coreOrgIdsList = null;
		
		String[] keyInstnsArray = commaSepKeyInstns.split(",");
		log.info("keyInstnsArray.length-----------"+keyInstnsArray.length);
		List<String> orgIdsLngArrayList = new ArrayList<String>(keyInstnsArray.length);   
		
		for (int i = 0; i < keyInstnsArray.length; i++) {  
			orgIdsLngArrayList.add(keyInstnsArray[i]);
		}
		
		coreOrgIdsList = coreOrgIdKeyInstnMapDao.getCoreOrgIds(orgIdsLngArrayList);
		
		// sorting the result list based on the order of input entities
		if (coreOrgIdsList != null && coreOrgIdsList.size() > 0) {
			Collections.sort(coreOrgIdsList,
					Comparator.comparing(item -> orgIdsLngArrayList.indexOf(item.getFinsIdentifier())));
		}
		
		return coreOrgIdsList;
	}

	@Override
	public List<CoreOrgIdKeyInstnMap> getCoreOrgIdsByTypeandList(String type, List<String> idsList) throws ApplicationRuntimeException {
		log.info("CoreOrgIdServiceImpl--getCoreOrgIdsByTypeandList");
		try{
			if(ObjectUtils.isEmpty(type) || CollectionUtils.isEmpty(idsList)){
				return null;
			}else{
				return coreOrgIdKeyInstnMapDao.getCoreOrgIdsByTypeandList(type, idsList);
			}
		}catch (Exception e){
			log.error("Exception in getCoreOrgIdsByTypeandList {}",e.getMessage());
			throw new ApplicationRuntimeException(e.getMessage());
		}
	}

	@Override
	public List<CoreOrgIdKeyInstnMap> getCoreOrgIdsByCapiq(List<String> capIqids) throws ApplicationRuntimeException {
		log.info("CoreOrgIdServiceImpl--getCoreOrgIdsByCapiq");
		try{
			return coreOrgIdKeyInstnMapDao.getCoreOrgIdsByCapiqId(capIqids);
		}catch (Exception e){
			log.error("Exception in getCoreOrgIdsByCapiq {}",e.getMessage());
			throw new ApplicationRuntimeException(e.getMessage());
		}
	}
	
	@Override
	public EntityTypeIdsResponse getCapiqIdsbyCoreSnlSpIds(EntityTypeIdsRequest entityTypeIdsRequest) {
		List<CoreOrgIdKeyInstnSPIdMap> capIQIdsByCoreIds = Collections.emptyList();
		if (!ObjectUtils.isEmpty(entityTypeIdsRequest) && !ObjectUtils.isEmpty(entityTypeIdsRequest.getEntityIds())) {
			capIQIdsByCoreIds = coreOrgIdKeyInstnMapDao.getCapiqIdsbyCoreSnlSpIds(entityTypeIdsRequest);
		}
		capIQIdsByCoreIds = capIQIdsByCoreIds.stream().filter(Objects::nonNull).collect(Collectors.toList());
		Map<String, String> entityIdCapIqIdMap = new HashMap<>();
		EntityTypeIdsResponse entityTypeIdsResponse = new EntityTypeIdsResponse();
		entityTypeIdsResponse.setEntityType(entityTypeIdsRequest.getEntityType());
		List<String> entityIds = entityTypeIdsRequest.getEntityIds();
		for (String entityId : entityIds) {
			capIQIdsByCoreIds.stream().filter(capIQIdsByCoreId -> {
				if (entityTypeIdsRequest.getEntityType().equalsIgnoreCase(RatingsDataConstant.COREID_STR))
					return capIQIdsByCoreId.getCoreFinsIdentifier().equals(entityId);
				if (entityTypeIdsRequest.getEntityType().equalsIgnoreCase(RatingsDataConstant.SNLID_STR))
					return capIQIdsByCoreId.getFinsIdentifier().equals(entityId);
				if (entityTypeIdsRequest.getEntityType().equalsIgnoreCase(RatingsDataConstant.SPID_STR))
					return capIQIdsByCoreId.getSpFinsIdentifier().equals(entityId);
				return false;
			}).findFirst().ifPresent(
					capIQIdsByCoreId -> entityIdCapIqIdMap.put(entityId, capIQIdsByCoreId.getCapIQFinsIdentifier()));
			if (ObjectUtils.isEmpty(entityIdCapIqIdMap.get(entityId))) {
				entityIdCapIqIdMap.put(entityId, "");
			}
		}
		entityTypeIdsResponse.setEntityIdCapIQIdMap(entityIdCapIqIdMap);
		return entityTypeIdsResponse;
	}

}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\service\CriteriaArticleService.java

package com.spglobal.ratings.ratingsdata.service;

import com.spglobal.ratings.ratingsdata.entity.CriteriaArticlesByTypes;
import com.spglobal.ratings.ratingsdata.entity.CriteriaTypeLookupEntity;
import com.spglobal.ratings.ratingsdata.repository.CriteriaArticleRepository;
import com.spglobal.ratings.ratingsdata.repository.CriteriaArticleRepositoryByTypes;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Sort;
import org.springframework.stereotype.Service;

import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.Stream;

@Slf4j
@Service
public class CriteriaArticleService {
	
	@Autowired
	CriteriaArticleRepository criteriaRepository;

	@Autowired
	CriteriaArticleRepositoryByTypes criteriaArticleRepositoryByTypes;

	public List<CriteriaTypeLookupEntity> getCriteriaTypes(){
		return criteriaRepository.findAll(Sort.by(Sort.Direction.ASC, "order"));
		
	}

	public List<CriteriaArticlesByTypes> getCriteriaArticlesByTypes(String criteriaTypeIds, String archiveInd){
		List<CriteriaArticlesByTypes> criteriaArticlesByTypes = new ArrayList<>();
		try{
			List<String> criteriaTypeListArray = Stream.of(criteriaTypeIds.split(",", -1))
					.collect(Collectors.toList());
			criteriaArticlesByTypes = criteriaArticleRepositoryByTypes.findCriteriaArticlesByTypes(criteriaTypeListArray,archiveInd);
		} catch(Exception e){
			log.error("Exception @getCriteriaArticlesByTypes --> Failed: {}", e.getMessage());
		}
		return criteriaArticlesByTypes;
	}

}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\service\CurrencyExchangeRateService.java

package com.spglobal.ratings.ratingsdata.service;

import java.util.List;
import java.util.Map;
import java.util.Set;

import com.spglobal.ratings.ratingsdata.entity.CurrencyExchangeRate;
import com.spglobal.ratings.ratingsdata.entity.CurrencyLookupEntity;
import com.spglobal.ratings.ratingsdata.entity.FinancialPeers;
import com.spglobal.ratings.ratingsdata.entity.LanguageTranslationEntity;
import com.spglobal.ratings.ratingsdata.model.FinancialData;
import com.spglobal.ratings.ratingsdata.model.ReconciliationData;

public interface CurrencyExchangeRateService {

	List<CurrencyExchangeRate> getCurrencyExchangeRates(Set<Long> asOfDates, String trgCurrency);

	List<CurrencyLookupEntity> findByCurrencyLookup();
	
	List<LanguageTranslationEntity> findCurrencyByLanguageCodeAndType(String languageCode, String type);
	
	boolean isValidCurrencyCode(String currencyCode);

	Map<String, Map<String, Double>> getCurrencyMagnitudeConvertedFinData(
			Map<String, Map<String, Double>> finMnemonicsDataPointValues, String trgCurency);
	
	Map<String, Map<String, Double>> getMagnitudeConvertedFinData(
			Map<String, Map<String, Double>> finMnemonicsDataPointValues, String trgCurrency);

	List<FinancialData> getFinDataMagnitudeConvertForRC(List<FinancialData> financialData);

	List<ReconciliationData> getReconDataMagnitudeConvertForRC(List<ReconciliationData> reconData);

	List<FinancialPeers> getFinDataMagnitudeConvertForPeers(List<FinancialPeers> financialData);

}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\service\CurrencyExchangeRateServiceImpl.java

package com.spglobal.ratings.ratingsdata.service;

import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.util.CollectionUtils;
import org.springframework.util.ObjectUtils;

import com.spglobal.ratings.ratingsdata.dao.CurrencyExchangeRateDao;
import com.spglobal.ratings.ratingsdata.entity.CurrencyExchangeRate;
import com.spglobal.ratings.ratingsdata.entity.CurrencyLookupEntity;
import com.spglobal.ratings.ratingsdata.entity.FinancialPeers;
import com.spglobal.ratings.ratingsdata.entity.LanguageTranslationEntity;
import com.spglobal.ratings.ratingsdata.entity.MnemonicMagnitudeEntity;
import com.spglobal.ratings.ratingsdata.model.FinancialData;
import com.spglobal.ratings.ratingsdata.model.ReconciliationData;
import com.spglobal.ratings.ratingsdata.util.FinancialRatingColumn;
import com.spglobal.ratings.ratingsdata.util.RatingsDataConstant;

@Service
//@Slf4j
public class CurrencyExchangeRateServiceImpl implements CurrencyExchangeRateService {

	@Autowired
	private CurrencyExchangeRateDao currencyExchangeRateDao;

	@Value("${financials.major.currencies}")
	private List<String> majorCurrencies;

	@Override
	public List<CurrencyExchangeRate> getCurrencyExchangeRates(Set<Long> sortedfinPeriods, String trgCurrency) {
		List<CurrencyExchangeRate> currencyExchangeRates = null;
		if(CollectionUtils.isEmpty(sortedfinPeriods)) {
			return Collections.emptyList();
		}
		sortedfinPeriods = sortedfinPeriods.parallelStream().sorted().collect(Collectors.toSet());
		if (majorCurrencies.contains(trgCurrency)) {
			currencyExchangeRates = currencyExchangeRateDao.getMajorCurrencyExchangeRates(sortedfinPeriods, trgCurrency);
		} else {
			currencyExchangeRates = currencyExchangeRateDao.getMinorCurrencyExchangeRates(sortedfinPeriods, trgCurrency);
		}
		return currencyExchangeRates;
	}

	@Override
	public List<CurrencyLookupEntity> findByCurrencyLookup() {
		return currencyExchangeRateDao.findByCurrencyLookup();
	}
	
	@Override
	public List<LanguageTranslationEntity> findCurrencyByLanguageCodeAndType(String languageCode, String type){
		return currencyExchangeRateDao.findCurrencyByLanguageCodeAndType(languageCode, type);
	}
	
	@Override
	public boolean isValidCurrencyCode(String currencyCode) {
		CurrencyLookupEntity currency= currencyExchangeRateDao.getCurrencyByCurrencyCode(currencyCode);
		return !ObjectUtils.isEmpty(currency) || RatingsDataConstant.REPORTED_CURRENCIES.equalsIgnoreCase(currencyCode);
	}

	@Override
	public Map<String, Map<String, Double>> getCurrencyMagnitudeConvertedFinData(
			Map<String, Map<String, Double>> finMnemonicsDataPointValues, String trgCurrency) {
		// Map<String, Map<String, Double>> periodExchValues = new HashMap<>();
		if(CollectionUtils.isEmpty(finMnemonicsDataPointValues)) {
			return new HashMap<>();
		}
		Set<Long> finPeriods = new HashSet<Long>();
		finPeriods = finMnemonicsDataPointValues.keySet().parallelStream().map(value -> Long.parseLong(value)).collect(Collectors.toSet());
		List<CurrencyExchangeRate> currencyExchangeRates = getCurrencyExchangeRates(finPeriods, trgCurrency);
		Integer mangnitudeConstantQuantity = getMangnitudeConstantQuantity(trgCurrency);
		currencyExchangeRates.stream().forEach(s -> {
			Map<String, Double> map = finMnemonicsDataPointValues.get(s.getExchangeRateId().toString());
			for (Entry<String, Double> entry : map.entrySet())  {
				entry.setValue(applyMagnitudeMultipier(entry.getValue() * s.getExchRateVal(),mangnitudeConstantQuantity));
			}
		});
		return finMnemonicsDataPointValues;
	}

	private Double applyMagnitudeMultipier(Double val,Integer magnitudeConstantQuantity) {
		if(ObjectUtils.isEmpty(val)) {
			return val;
		}		
		return Double.valueOf(String.format(FinancialRatingColumn.DECIMAL_FORMATTER, (val / Math.pow(10, magnitudeConstantQuantity))));
	}

	@Override
	public Map<String, Map<String, Double>> getMagnitudeConvertedFinData(
			Map<String, Map<String, Double>> finMnemonicsDataPointValues, String trgCurrency) {
		//Map<String, Map<String, Double>> periodExchValues = new HashMap<>();
		if(CollectionUtils.isEmpty(finMnemonicsDataPointValues)) {
			return new HashMap<>();
		}		
		Integer mangnitudeConstantQuantity = getMangnitudeConstantQuantity(trgCurrency);
		for(Entry<String, Map<String, Double>> s : finMnemonicsDataPointValues.entrySet()) {			
			for (Entry<String, Double> entry : s.getValue().entrySet())  {
				entry.setValue(applyMagnitudeMultipier(entry.getValue(), mangnitudeConstantQuantity));
			}
		}

		return finMnemonicsDataPointValues;
	}

	@Override
	public List<FinancialData> getFinDataMagnitudeConvertForRC(List<FinancialData> financialData) {
		if (CollectionUtils.isEmpty(financialData)) {
			return financialData;
		}
		Map<String, Integer> reportedCurrencyMagnitudeConstantMap = new HashMap<>();

		financialData.forEach(s -> {
			if (!reportedCurrencyMagnitudeConstantMap.containsKey(s.getReportedCurrency())) {
				reportedCurrencyMagnitudeConstantMap.put(s.getReportedCurrency(),
						getMangnitudeConstantQuantity(s.getReportedCurrency()));
			}
		});

		for (FinancialData s : financialData) {
			if (s.getMagnitude().equalsIgnoreCase(FinancialRatingColumn.FIN_MAGNITUDE_VAL)) {
				s.setDataPointValue(applyMagnitudeMultipier(s.getDataPointValue(),
						reportedCurrencyMagnitudeConstantMap.get(s.getReportedCurrency())));
			}
		}
		return financialData;
	}
	
	@Override
	public List<ReconciliationData> getReconDataMagnitudeConvertForRC(List<ReconciliationData> reconData) {
		if (CollectionUtils.isEmpty(reconData)) {
			return reconData;
		}		
		
		Map<String, Integer> reportedCurrencyMagnitudeConstantMap = new HashMap<>();

		reconData.forEach(s -> {
			if (!reportedCurrencyMagnitudeConstantMap.containsKey(s.getReportedCurrency())) {
				reportedCurrencyMagnitudeConstantMap.put(s.getReportedCurrency(),
						getMangnitudeConstantQuantity(s.getReportedCurrency()));
			}
		});
		
		for (ReconciliationData s : reconData) {			
			if (s.getMagnitude().equalsIgnoreCase(FinancialRatingColumn.FIN_MAGNITUDE_VAL)) {
				s.setDataPointValue(applyMagnitudeMultipier(s.getDataPointValue(),reportedCurrencyMagnitudeConstantMap.get(s.getReportedCurrency())));
			}
		}
		return reconData;
	}
	
	@Override
    public List<FinancialPeers> getFinDataMagnitudeConvertForPeers(List<FinancialPeers> financialData) {
        if (CollectionUtils.isEmpty(financialData)) {
            return financialData;
        }        
        Map<String, Integer> reportedCurrencyMagnitudeConstantMap = new HashMap<>();

        financialData.forEach(s -> {
			if (!reportedCurrencyMagnitudeConstantMap.containsKey(s.getReportedCurrency())) {
				reportedCurrencyMagnitudeConstantMap.put(s.getReportedCurrency(),
						getMangnitudeConstantQuantity(s.getReportedCurrency()));
			}
		});
        for (FinancialPeers s : financialData) {        	
            if (s.getMagnitude().equalsIgnoreCase(FinancialRatingColumn.FIN_MAGNITUDE_VAL )) {
                s.setDataPointValue(applyMagnitudeMultipier(s.getDataPointValue(),reportedCurrencyMagnitudeConstantMap.get(s.getReportedCurrency())));
            }
        }
        return financialData;
    }

	private Integer getMangnitudeConstantQuantity(String currencyCode) {
		MnemonicMagnitudeEntity mnemonicMagnitude = currencyExchangeRateDao.getMnemonicMagnitude(currencyCode);
		return !ObjectUtils.isEmpty(mnemonicMagnitude) ? mnemonicMagnitude.getMagnitudeConstantQuantity()
				: FinancialRatingColumn.MAGNITUDE_CONSTANT;

	}
		
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\service\CyberRiskAssessmentPublicService.java

package com.spglobal.ratings.ratingsdata.service;

import java.util.ArrayList;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.spglobal.ratings.ratingsdata.dao.CyberRiskAssessmentPublicDao;
import com.spglobal.ratings.ratingsdata.entity.PeerSuppliersPortfolioContents;
import com.spglobal.ratings.ratingsdata.util.RatingsDataUtil;

import lombok.extern.slf4j.Slf4j;

@Service("cyberRiskAssessmentPublicService")
@Slf4j
public class CyberRiskAssessmentPublicService {
    
    @Autowired
    private RatingsDataUtil ratingsUtil;
    
    @Autowired
    private CyberRiskAssessmentPublicDao cyberRiskAssessmentDao;

    public List<PeerSuppliersPortfolioContents> getCyberPeersPortfolioContents(List<String> keyInstnIds,String domainName) {
    	log.info("@CyberRiskAssessmentPublicService getCyberPeersPortfolioContents for PortfolioContents: " +ratingsUtil.sanitizeString(keyInstnIds.toString()));
    	List<PeerSuppliersPortfolioContents> cyberPeersPortfolioContents = new ArrayList<PeerSuppliersPortfolioContents>();
    	cyberPeersPortfolioContents = cyberRiskAssessmentDao.getCyberPeersPortfolioContents(keyInstnIds, domainName);
    	return cyberPeersPortfolioContents;
	}
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\service\DashboardMyRatingService.java

package com.spglobal.ratings.ratingsdata.service;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.spglobal.ratings.ratingsdata.dao.DashboardMyRatingDao;
import com.spglobal.ratings.ratingsdata.dao.EntityRatingsDao;
import com.spglobal.ratings.ratingsdata.entity.DashBoardMyRating;
import com.spglobal.ratings.ratingsdata.util.RatingsDataUtil;

import lombok.extern.slf4j.Slf4j;

@Service("dashboardMyRatingService")
@Slf4j
public class DashboardMyRatingService {
	
	@Autowired
	private DashboardMyRatingDao dashboardMyRatingDao;
	
	@Autowired
	private RatingsDataUtil ratingsUtil;

	public DashBoardMyRating getDashboardMyRatingsDetails(Long entityId) {
		log.info("@DashboardMyRatingService getDashboardMyRatingsDetails for entity: " +ratingsUtil.sanitizeString(entityId.toString()));
		
		DashBoardMyRating ratingDetails = dashboardMyRatingDao.getDashBoardMyRatingDetails(entityId);
		return ratingDetails != null ? ratingDetails : null;
	}
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\service\DefinitionsConfigService.java

package com.spglobal.ratings.ratingsdata.service;
import com.spglobal.ratings.ratingsdata.entity.DefinitionsConfig;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
public interface DefinitionsConfigService {
    public List<DefinitionsConfig> getDefinitionDetails();
    public List<DefinitionsConfig> getDefinitionDetails(String analyticCaseType, List<String> dataElementType, List<String> dataElementGroup);
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\service\DefinitionsConfigServiceImpl.java

package com.spglobal.ratings.ratingsdata.service;

import java.util.Collections;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.spglobal.ratings.ratingsdata.dao.DefinitionsConfigDAO;
import com.spglobal.ratings.ratingsdata.entity.DefinitionsConfig;

import lombok.extern.slf4j.Slf4j;

@Service("definitionsConfigServiceImpl")
@Slf4j
public class DefinitionsConfigServiceImpl implements DefinitionsConfigService {

	@Autowired
	private DefinitionsConfigDAO definitionsConfigDAO;

	public List<DefinitionsConfig> getDefinitionDetails() {
		List<DefinitionsConfig> definitions;
		try {
			definitions = definitionsConfigDAO.getDefinitionConfigDetails();
		} catch (Exception exception) {
			log.error("Exception @definitionsConfigService getDefinitionDetails method --> Failed: {}",
					exception.getMessage());
			return Collections.emptyList();
		}
		return definitions;
	}

	public List<DefinitionsConfig> getDefinitionDetails(String analyticCaseType, List<String> dataElementType,
			List<String> dataElementGroup) {
		List<DefinitionsConfig> definitions;
		try {
			definitions = definitionsConfigDAO.getDefinitionConfigDetails(analyticCaseType, dataElementType,
					dataElementGroup);
		} catch (Exception exception) {
			log.error("Exception @definitionsConfigService getDefinitionDetails method --> Failed: {}",
					exception.getMessage());
			throw exception;
		}
		return definitions;
	}
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\service\EntityCurrentRatingService.java

package com.spglobal.ratings.ratingsdata.service;

import java.util.List;

import org.springframework.stereotype.Service;

import com.spglobal.ratings.ratingsdata.entity.EntityCurrentRating;
import com.spglobal.ratings.ratingsdata.entity.EntityRatingsTACPublic;
import com.spglobal.ratings.ratingsdata.entity.IssuesAndMaturities;

@Service
public interface EntityCurrentRatingService {
	
	public EntityCurrentRating getEntityCurrentRating(Long entityId);
	public EntityCurrentRating getEntityCurrentRatings(Long entityId,Long capiqId,Long pcFlag,String authHeader);
	public List<IssuesAndMaturities> getEntityIssuersRating(Long entityId);
	public List<EntityRatingsTACPublic> getEntityRatingsTAC(Long entityId, Long capiqId, Long pcFlag, String authHeader);
	
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\service\EntityCurrentRatingServiceImpl.java

package com.spglobal.ratings.ratingsdata.service;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang3.ObjectUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.spglobal.ratings.ratingsdata.dao.EntityCurrentRatingDao;
import com.spglobal.ratings.ratingsdata.dao.IssuesAndMaturitiesDao;
import com.spglobal.ratings.ratingsdata.entity.EntityCurrentRating;
import com.spglobal.ratings.ratingsdata.entity.EntityCurrentRatingPublic;
import com.spglobal.ratings.ratingsdata.entity.EntityRatingsTACPublic;
import com.spglobal.ratings.ratingsdata.entity.EntityRatingsTACPvt;
import com.spglobal.ratings.ratingsdata.entity.IssuesAndMaturities;
import com.spglobal.ratings.ratingsdata.util.RatingsDataUtil;

import lombok.extern.slf4j.Slf4j;

@Service("entityCurrentRatingService")
@Slf4j
public class EntityCurrentRatingServiceImpl implements EntityCurrentRatingService {

	@Autowired
	private RatingsDataUtil ratingsUtil;

	@Autowired
	private EntityCurrentRatingDao entityCurrentRatingDao;

	@Autowired
	private IssuesAndMaturitiesDao issuesAndMaturitiesDao;

	@Autowired
	private UserEntitlementCheckImpl userEntitlementCheck;

	public EntityCurrentRating getEntityCurrentRating(Long entityId) {
		log.info("@EntityCurrentRatingService getEntityCurrentRating for entity: "
				+ ratingsUtil.sanitizeString(entityId.toString()));

		EntityCurrentRating entityCurrentRating = entityCurrentRatingDao.getEntityCurrentRating(entityId);
		return entityCurrentRating;
	}

	public EntityCurrentRating getEntityCurrentRatings(Long entityId, Long capiqId, Long pcFlag, String authHeader) {
		log.info("@EntityCurrentRatingService getEntityCurrentRating for entity private: "
				+ ratingsUtil.sanitizeString(entityId.toString()));

		Integer privConfOssCheck = null;
		Integer entityEntitlementCheck = null;
		Map<String, List<Long>> userEntitlement = null;
		EntityCurrentRating entityCurrentRating = null;
		EntityCurrentRatingPublic entityCurrentRatingPub = null;
		
		if (pcFlag!= null && pcFlag == 0) {
		log.info("@EntityCurrentRatingService getEntityCurrentRating PCFlag 0 ");
			entityCurrentRatingPub = entityCurrentRatingDao.getEntityCurrentRatingPublic(entityId);
			if (entityCurrentRatingPub != null) {
				entityCurrentRating = convertAsPrivateObj(entityCurrentRatingPub);
			}
			return entityCurrentRating;
		} else {
			log.info("@EntityCurrentRatingService getEntityCurrentRating PCFlag 1 ");
			userEntitlement = new HashMap<>(userEntitlementCheck.entitlementChecksForUser(authHeader));
			if (userEntitlement != null) {
				privConfOssCheck = userEntitlementCheck.isUserEntitledToPrivateRatings(userEntitlement, authHeader);
				entityEntitlementCheck = userEntitlementCheck.isUserEntitledToEntity(capiqId, userEntitlement);
				if (privConfOssCheck == 1 && entityEntitlementCheck == 1) {
				    log.info("@EntityCurrentRatingService getEntityCurrentRating for entity private: "
							+ ratingsUtil.sanitizeString(entityId.toString()));
					entityCurrentRating = entityCurrentRatingDao.getEntityCurrentRating(entityId);
				} else {
					log.info("@EntityCurrentRatingService getEntityCurrentRating for entity public: "
							+ ratingsUtil.sanitizeString(entityId.toString()));
					entityCurrentRatingPub = entityCurrentRatingDao.getEntityCurrentRatingPublic(entityId);
					if (entityCurrentRatingPub != null) {
						entityCurrentRating = convertAsPrivateObj(entityCurrentRatingPub);
					}
				}
			}
		}
		return entityCurrentRating;
	}

	public List<IssuesAndMaturities> getEntityIssuersRating(Long entityId) {
		log.info("@EntityCurrentRatingService IssuesAndMaturities for entity: "
				+ ratingsUtil.sanitizeString(entityId.toString()));

		List<IssuesAndMaturities> entityCurrentRatings = issuesAndMaturitiesDao
				.getIssuesAndMaturitiesByEntityId(entityId);
		return entityCurrentRatings;
	}

	public List<EntityRatingsTACPublic> getEntityRatingsTAC(Long entityId, Long capiqId, Long pcFlag, String authHeader) {
		log.info("@EntityCurrentRatingService getEntityRatingsTAC for entity private: "
				+ ratingsUtil.sanitizeString(entityId.toString()));

		Integer privConfOssCheck = null;
		Integer entityEntitlementCheck = null;
		Map<String, List<Long>> userEntitlement = null;
		List<EntityRatingsTACPvt> entityRatingsTACPvtList = null;
		List<EntityRatingsTACPublic> entityRatingsTACPubList = null;
		
		if (pcFlag!= null && pcFlag == 0) {
		log.info("@EntityCurrentRatingService getEntityRatingsTAC PCFlag 0 ");
			entityRatingsTACPubList = entityCurrentRatingDao.getEntityRatingsTACPublic(entityId);
			return entityRatingsTACPubList;
		} else {
			log.info("@EntityCurrentRatingService getEntityRatingsTAC PCFlag 1 ");
			if(capiqId != null) {
				userEntitlement = new HashMap<>(userEntitlementCheck.entitlementChecksForUser(authHeader));
				if (userEntitlement != null) {
					privConfOssCheck = userEntitlementCheck.isUserEntitledToPrivateRatings(userEntitlement, authHeader);
					entityEntitlementCheck = userEntitlementCheck.isUserEntitledToEntity(capiqId, userEntitlement);
					if (privConfOssCheck == 1 && entityEntitlementCheck == 1) {
						log.info("@EntityCurrentRatingService getEntityRatingsTAC for entity private: "
								+ ratingsUtil.sanitizeString(entityId.toString()));
						entityRatingsTACPvtList = entityCurrentRatingDao.getEntityRatingsTACPvt(entityId);

						if (entityRatingsTACPvtList != null && entityRatingsTACPvtList.size() > 0) {
							entityRatingsTACPubList = convertAsPublicObj(entityRatingsTACPvtList);
						}
					} else {
						log.info("@EntityCurrentRatingService getEntityRatingsTAC for entity public: "
								+ ratingsUtil.sanitizeString(entityId.toString()));
						entityRatingsTACPubList = entityCurrentRatingDao.getEntityRatingsTACPublic(entityId);
					}
				}
			}else {
				log.info("@EntityCurrentRatingService getEntityRatingsTAC for entity public: "
						+ ratingsUtil.sanitizeString(entityId.toString()));
				entityRatingsTACPubList = entityCurrentRatingDao.getEntityRatingsTACPublic(entityId);
			}
		}
		return entityRatingsTACPubList;
	}
	
	private EntityCurrentRating convertAsPrivateObj(EntityCurrentRatingPublic sourceObj) {
		EntityCurrentRating target = new EntityCurrentRating();

		target.setCurrentRatingSymbol(sourceObj.getCurrentRatingSymbol());
		target.setDebtTypeDesc(sourceObj.getDebtTypeDesc());
		target.setEntityId(sourceObj.getEntityId());
		target.setRatingsOrder(sourceObj.getRatingsOrder());
		target.setRatingTypeDesc(sourceObj.getRatingTypeDesc());
		target.setCreditWatchOutlook(sourceObj.getCreditWatchOutlook());
		target.setConfidentialIndic(sourceObj.getConfidentialIndic());
		target.setConfidentialCatCode(sourceObj.getConfidentialCatCode());
		target.setconfidentialCatDesc(sourceObj.getConfidentialCatDesc());

		return target;

	}
	
	private List<EntityRatingsTACPublic> convertAsPublicObj(List<EntityRatingsTACPvt> sourceObjList) {
		
		List<EntityRatingsTACPublic> targetList = new ArrayList<>();
		EntityRatingsTACPublic target = null;;

		for(EntityRatingsTACPvt sourceObj : sourceObjList) {
			target = new EntityRatingsTACPublic();
			target.setCurrentRatingSymbol(sourceObj.getCurrentRatingSymbol());
			target.setDebtTypeDesc(sourceObj.getDebtTypeDesc());
			target.setEntityId(sourceObj.getEntityId());
			target.setRatingTypeDesc(sourceObj.getRatingTypeDesc());
			target.setLatestNonAffirmCWOL(sourceObj.getLatestNonAffirmCWOL());
			target.setDebtTypeCode(sourceObj.getDebtTypeCode());
			target.setDebtTypeDesc(sourceObj.getDebtTypeDesc());
			target.setRatingTypeCode(sourceObj.getRatingTypeCode());
			target.setRatingDate(sourceObj.getRatingDate());
			target.setLastReviewDate(sourceObj.getLastReviewDate());
			target.setRegulatoryIndicator(sourceObj.getRegulatoryIndicator());
			target.setAction(sourceObj.getAction());
			target.setLatestNonAffirmCWOLDate(sourceObj.getLatestNonAffirmCWOLDate());
			target.setSrdCurrInd(sourceObj.getSrdCurrInd());
			target.setRatingDetailId(sourceObj.getRatingDetailId());
			target.setDataAdminDate(sourceObj.getDataAdminDate());
			target.setDebtTypeSortOrder(sourceObj.getDebtTypeSortOrder());
			target.setDerivedDebtTypeSortOrder(sourceObj.getDerivedDebtTypeSortOrder());
			target.setLongShortInd(sourceObj.getLongShortInd());
			//target.setRatingTypeSortOrder(sourceObj.geRatingTypeSortOrder());
			target.setRating_id(sourceObj.getRating_id());
			target.setPrimarySectorCode(sourceObj.getPrimarySectorCode());
			target.setPrimarySubSectorCode(sourceObj.getPrimarySubSectorCode());
			target.setConfidentialCategoryCode(sourceObj.getConfidentialCategoryCode());

			targetList.add(target);

		}
		return targetList;

	}
	
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\service\EntityRatingsHistoryPublicService.java

package com.spglobal.ratings.ratingsdata.service;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.spglobal.ratings.ratingsdata.dao.EntityRatingsHistoryPublicDao;
import com.spglobal.ratings.ratingsdata.entity.EntityRatingsHistoryPublic;
import com.spglobal.ratings.ratingsdata.util.RatingsDataUtil;

import lombok.extern.slf4j.Slf4j;

@Service("entityRatingsHistoryPublic")
@Slf4j
public class EntityRatingsHistoryPublicService {
	
	@Autowired
	private RatingsDataUtil ratingsUtil;
	
	@Autowired
	private EntityRatingsHistoryPublicDao ratingsHistoryDAO;
	
	public List<EntityRatingsHistoryPublic> getPublicEntityRatingsHistory(Long entityId, String debtTypeCode, String ratingTypeCode){
		
		log.info("@EntityRatingsHistoryPublicService getPublicEntityRatingsHistory for entity " +ratingsUtil.sanitizeString(entityId.toString()) + "with "
				+ "debt type code" +ratingsUtil.sanitizeString(debtTypeCode) + "and rating type code " +ratingsUtil.sanitizeString(ratingTypeCode));
		
		List<EntityRatingsHistoryPublic> entityRatingsHistory = ratingsHistoryDAO.getPublicEntityRatingsHistory(entityId, debtTypeCode, ratingTypeCode);
		entityRatingsHistory.removeIf(history -> history.getAction().equals("Deleted Row"));
		return (entityRatingsHistory != null && entityRatingsHistory.size() > 0) ? entityRatingsHistory : null;
	}

}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\service\EntityRatingsHistoryService.java

package com.spglobal.ratings.ratingsdata.service;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.spglobal.ratings.ratingsdata.dao.EntityRatingsHistoryDao;
import com.spglobal.ratings.ratingsdata.entity.EntityRatingsHistTACPub;
import com.spglobal.ratings.ratingsdata.entity.EntityRatingsHistory;
import com.spglobal.ratings.ratingsdata.entity.EntityRatingsHistoryTAC;
import com.spglobal.ratings.ratingsdata.util.RatingsDataUtil;

import lombok.extern.slf4j.Slf4j;

@Service("entityRatingsHistoryService")
@Slf4j
public class EntityRatingsHistoryService {
	
	@Autowired
	private RatingsDataUtil ratingsUtil;
	
	@Autowired
	private EntityRatingsHistoryDao entityRatingsHistoryDao;
	
	@Autowired
	private UserEntitlementCheckImpl userEntitlementCheck;
	
	/**
	 * @param entityId
	 * @param debtTypeCode
	 * @param ratingTypeCode
	 * @param capiqId
	 * @param authHeader
	 * @return
	 */
	public List<EntityRatingsHistory> getEntityRatingsHistory(Long entityId, String debtTypeCode, String ratingTypeCode, Long capiqId, String authHeader) {
		log.info("@EntityRatingsHistoryService getEntityRatingsHistory for entity " +ratingsUtil.sanitizeString(entityId.toString()) + "with "
				+ "debt type code" +ratingsUtil.sanitizeString(debtTypeCode) + "and rating type code " +ratingsUtil.sanitizeString(ratingTypeCode));
		
		List<EntityRatingsHistory> entityRatingsHistory = null;
		Integer privConfOssCheck = null;
		Integer entityEntitlementCheck = null;
		Map<String,List<Long>> userEntitlement = new HashMap<>(userEntitlementCheck.entitlementChecksForUser(authHeader));
		if(userEntitlement != null) {
			privConfOssCheck = userEntitlementCheck.isUserEntitledToPrivateRatings(userEntitlement, authHeader);
			entityEntitlementCheck = userEntitlementCheck.isUserEntitledToEntity(capiqId, userEntitlement);
			if(privConfOssCheck == 1 && entityEntitlementCheck == 1) {
				entityRatingsHistory = entityRatingsHistoryDao.getEntityRatingsHistory(entityId, debtTypeCode, ratingTypeCode);
				entityRatingsHistory.removeIf(history -> history.getAction() != null && history.getAction().equals("Deleted Row"));
				for (EntityRatingsHistory ratingsHistory: entityRatingsHistory) {
					if(ratingsHistory.getConfidentialityInd().equals("N") && ratingsHistory.getConfidentialCategoryCode() == null) {
						ratingsHistory.setConfidentialCategoryCode("Public");
					} else if(ratingsHistory.getConfidentialityInd().equals("Y") && ratingsHistory.getConfidentialCategoryCode().equals("CIR")) {
						ratingsHistory.setConfidentialCategoryCode("Confidential(CIR)");
					} else if(ratingsHistory.getConfidentialityInd().equals("Y") && ratingsHistory.getConfidentialCategoryCode().equals("PVT")) {
						ratingsHistory.setConfidentialCategoryCode("Private");
					}
				}
			}
		}
		return (entityRatingsHistory != null && entityRatingsHistory.size() >0) ? entityRatingsHistory : null;
	}

	
	/**
	 * @param entityId
	 * @param debtTypeCode
	 * @param ratingTypeCode
	 * @param capiqId
	 * @param pcFlag
	 * @param authHeader
	 * @return
	 */
	public List<EntityRatingsHistoryTAC> getEntityRatingsHistoryTAC(Long entityId, String debtTypeCode, String ratingTypeCode, Long capiqId, Long pcFlag,String authHeader) {
		log.info("@EntityRatingsHistoryService getEntityRatingsHistoryTAC for entity " +ratingsUtil.sanitizeString(entityId.toString()) + "with "
				+ "debt type code" +ratingsUtil.sanitizeString(debtTypeCode) + "and rating type code " +ratingsUtil.sanitizeString(ratingTypeCode));
		
		Integer privConfOssCheck = null;
		Integer entityEntitlementCheck = null;

		List<EntityRatingsHistoryTAC> entityRatingsHistPvtPub = null;
		List<EntityRatingsHistTACPub> entityRatingsHistPub = null;

		if (pcFlag == null || pcFlag == 0) {

			entityRatingsHistPub = entityRatingsHistoryDao.getEntityRatingsHistTACPub(entityId, debtTypeCode,
					ratingTypeCode);

			if (entityRatingsHistPub != null && entityRatingsHistPub.size() > 0)
				entityRatingsHistPvtPub = convertAsPvtList(entityRatingsHistPub);
		} else {

			Map<String, List<Long>> userEntitlement = new HashMap<>(
					userEntitlementCheck.entitlementChecksForUser(authHeader));
			if (userEntitlement != null) {
				privConfOssCheck = userEntitlementCheck.isUserEntitledToPrivateRatings(userEntitlement, authHeader);
				entityEntitlementCheck = userEntitlementCheck.isUserEntitledToEntity(capiqId, userEntitlement);
				if (privConfOssCheck == 1 && entityEntitlementCheck == 1) {
					entityRatingsHistPvtPub = entityRatingsHistoryDao.getEntityRatingsHistoryTAC(entityId, debtTypeCode,
							ratingTypeCode);
					entityRatingsHistPvtPub.removeIf(
							history -> history.getAction() != null && history.getAction().equals("Deleted Row"));

					for (EntityRatingsHistoryTAC ratingsHistory : entityRatingsHistPvtPub) {
						if (ratingsHistory.getConfidentialityInd() != null && ratingsHistory.getConfidentialityInd().equals("N")
								&& ratingsHistory.getConfidentialCategoryCode() == null) {
							ratingsHistory.setConfidentialCategoryCode("Public");
						} else if (ratingsHistory.getConfidentialityInd() != null && ratingsHistory.getConfidentialityInd().equals("Y")
								&& ratingsHistory.getConfidentialCategoryCode() != null && ratingsHistory.getConfidentialCategoryCode().equals("CIR")) {
							ratingsHistory.setConfidentialCategoryCode("Confidential(CIR)");
						} else if (ratingsHistory.getConfidentialityInd() != null && ratingsHistory.getConfidentialityInd().equals("Y")
								&& ratingsHistory.getConfidentialCategoryCode() != null && ratingsHistory.getConfidentialCategoryCode().equals("PVT")) {
							ratingsHistory.setConfidentialCategoryCode("Private");
						}
					}
				}
			}
		}
		return entityRatingsHistPvtPub;
	}

	/**
	 * @param entityRatingsHistList
	 * @return
	 */
	private List<EntityRatingsHistoryTAC> convertAsPvtList(List<EntityRatingsHistTACPub> entityRatingsHistList) {

		EntityRatingsHistoryTAC target = null;;
		List<EntityRatingsHistoryTAC> entityRatingsHistPub = new ArrayList<EntityRatingsHistoryTAC>(entityRatingsHistList.size());

		
		for(EntityRatingsHistTACPub sourceObj : entityRatingsHistList) {
			target = new EntityRatingsHistoryTAC();
			target.setEntityId(sourceObj.getEntityId());
			target.setDebtTypeCode(sourceObj.getDebtTypeCode());
			target.setRatingTypeCode(sourceObj.getRatingTypeCode());
			target.setRatingDate(sourceObj.getRatingDate());
			target.setAction(sourceObj.getAction());
			target.setRating(sourceObj.getRating());
			target.setRatingDetailId(sourceObj.getRatingDetailId());
			target.setDataAdminDate(sourceObj.getDataAdminDate());
			target.setRatingTypeDescription(sourceObj.getRatingTypeDescription());
			target.setRatingTypeDescription(sourceObj.getRatingTypeDescription());
			target.setCreditwatchOutlook(sourceObj.getCreditwatchOutlook());
			target.setCreditwatchOutlookDate(sourceObj.getCreditwatchOutlookDate());
			target.setConfidentialityInd(sourceObj.getConfidentialityInd());
			target.setConfidentialCategoryCode(sourceObj.getConfidentialCategoryCode());
			
			entityRatingsHistPub.add(target);

		}
		return entityRatingsHistPub;
	}
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\service\EntityRatingsPublicService.java

package com.spglobal.ratings.ratingsdata.service;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.spglobal.ratings.ratingsdata.dao.EntityRatingsPublicDao;
import com.spglobal.ratings.ratingsdata.entity.EntityRatingsPublic;
import com.spglobal.ratings.ratingsdata.util.RatingsDataUtil;

import lombok.extern.slf4j.Slf4j;

@Service("entityRatingsPublicService")
@Slf4j
public class EntityRatingsPublicService {
    
    @Autowired
    private RatingsDataUtil ratingsUtil;
    
    @Autowired
    private EntityRatingsPublicDao entityRatingsDao;

    public List<EntityRatingsPublic> getPublicEntityRatings(Long entityId) {
        log.info("@EntityRatingsPublicService getPublicEntityRatings for entity: " +ratingsUtil.sanitizeString(entityId.toString()));
        
        List<EntityRatingsPublic> entityRatings = entityRatingsDao.getPublicEntityRatings(entityId);
        return (entityRatings != null && entityRatings.size() >0) ? entityRatings : null;
    }
    
    public EntityRatingsPublic getPublicEntityRatingDetails(Long entityId, Long ratingDetailId) {
        log.info("@EntityRatingsPublicService getPublicEntityRatingDetails for entity: " +ratingsUtil.sanitizeString(entityId.toString()));
        
        EntityRatingsPublic ratingDetails = entityRatingsDao.getPublicEntityRatingDetails(entityId, ratingDetailId);
        return ratingDetails != null ? ratingDetails : null;
    }
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\service\EntityRatingsService.java

package com.spglobal.ratings.ratingsdata.service;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.spglobal.ratings.ratingsdata.dao.EntityRatingsDao;
import com.spglobal.ratings.ratingsdata.entity.EntityRatings;
import com.spglobal.ratings.ratingsdata.model.RatingsData;
import com.spglobal.ratings.ratingsdata.util.RatingsDataUtil;

import lombok.extern.slf4j.Slf4j;

@Service("entityRatingsService")
@Slf4j
public class EntityRatingsService {
	
	@Autowired
	private RatingsDataUtil ratingsUtil;
	
	@Autowired
	private EntityRatingsDao entityRatingsDao;
	
	@Autowired
	private UserEntitlementCheckImpl userEntitlementCheck;
	
	public RatingsData getEntityRatings(Long entityId, Long capiqId, String authHeader) {
		log.info("@EntityRatingsService getEntityRatings for entity: " +ratingsUtil.sanitizeString(entityId.toString()));
		
		RatingsData ratingsdata = new RatingsData();
		List<EntityRatings> entityRatings = null;
		Integer privConfOssCheck = null;
		Integer entityEntitlementCheck = null;
		Map<String,List<Long>> userEntitlement = new HashMap<>(userEntitlementCheck.entitlementChecksForUser(authHeader));
		if(userEntitlement != null) {
			privConfOssCheck = userEntitlementCheck.isUserEntitledToPrivateRatings(userEntitlement, authHeader);
			entityEntitlementCheck = userEntitlementCheck.isUserEntitledToEntity(capiqId, userEntitlement);
			if(privConfOssCheck == 1 && entityEntitlementCheck == 1) {
				entityRatings = entityRatingsDao.getEntityRatings(entityId);
				for (EntityRatings entityRating: entityRatings) {
					if(entityRating.getConfidentialityInd().equals("N") && entityRating.getConfidentialCategoryCode() == null) {
						entityRating.setConfidentialCategoryCode("Public");
					} else if(entityRating.getConfidentialityInd().equals("Y") && entityRating.getConfidentialCategoryCode().equals("CIR")) {
						entityRating.setConfidentialCategoryCode("Confidential(CIR)");
						ratingsdata.setPcData(true);
					} else if(entityRating.getConfidentialityInd().equals("Y") && entityRating.getConfidentialCategoryCode().equals("PVT")) {
						entityRating.setConfidentialCategoryCode("Private");
						ratingsdata.setPcData(true);
					}
				}
				ratingsdata.setEntityRatings((entityRatings != null && entityRatings.size() >0) ? entityRatings : null);
				ratingsdata.setMessage("success");
			} else {
				ratingsdata.setMessage("The User is not entitiled to view ratings for entity");
			}
		}
		return ratingsdata;
	}
	
	public EntityRatings getEntityRatingDetails(Long entityId, Long ratingDetailId, Long capiqId, String authHeader) {
		log.info("@EntityRatingsService getEntityRatingDetails for entity: " +ratingsUtil.sanitizeString(entityId.toString()));
		
		EntityRatings ratingDetails = null;
		Integer privConfOssCheck = null;
		Integer entityEntitlementCheck = null;
		Map<String,List<Long>> userEntitlement = new HashMap<>(userEntitlementCheck.entitlementChecksForUser(authHeader));
		if(userEntitlement !=null) {
			privConfOssCheck = userEntitlementCheck.isUserEntitledToPrivateRatings(userEntitlement, authHeader);
			entityEntitlementCheck = userEntitlementCheck.isUserEntitledToEntity(capiqId, userEntitlement);
			if(privConfOssCheck == 1 && entityEntitlementCheck == 1) {
				ratingDetails = entityRatingsDao.getEntityRatingDetails(entityId, ratingDetailId);
				if(ratingDetails != null) {
					if(ratingDetails.getConfidentialityInd().equals("N") && ratingDetails.getConfidentialCategoryCode() == null) {
						ratingDetails.setConfidentialCategoryCode("Public");
					} else if(ratingDetails.getConfidentialityInd().equals("Y") && ratingDetails.getConfidentialCategoryCode().equals("CIR")) {
						ratingDetails.setConfidentialCategoryCode("Confidential(CIR)");
					} else if(ratingDetails.getConfidentialityInd().equals("Y") && ratingDetails.getConfidentialCategoryCode().equals("PVT")) {
						ratingDetails.setConfidentialCategoryCode("Private");
					}
				}
			}
		}
		return ratingDetails != null ? ratingDetails : null;
	}


}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\service\FinancialRatingService.java

package com.spglobal.ratings.ratingsdata.service;

import java.util.Collection;
import java.util.HashMap;
import java.util.List;

import com.spglobal.ratings.ratingsdata.entity.MNemonicDetailsEntity;
import com.spglobal.ratings.ratingsdata.entity.PeriodDetailsEntity;
import com.spglobal.ratings.ratingsdata.entity.FinancialPeers;

public interface FinancialRatingService {

	Collection<HashMap<String, Object>> getFinancialRatingDetails(Long coreId, String templateType, String periodType, String trgCurrency);

	List<PeriodDetailsEntity> getFinancialPeriods(Long coreId, List<String> periods);

	List<MNemonicDetailsEntity> getMNemonic(String templateName, String trgCurrency);

	Collection<HashMap<String, Object>> getCustomFinancialRatingDetails(Long coreId, String templateType, List<String> periodIds, String trgCurrency);

	List<FinancialPeers> getFinancialPeers(List<String> commaSepEntities, String template, String currency);
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\service\FinancialRatingServiceBase.java

package com.spglobal.ratings.ratingsdata.service;

import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.Set;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.stream.Collectors;

import org.apache.commons.lang3.ObjectUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.util.CollectionUtils;

import com.spglobal.ratings.ratingsdata.model.FinancialData;
import com.spglobal.ratings.ratingsdata.util.FinancialRatingColumn;
import com.spglobal.ratings.ratingsdata.util.RatingsDataConstant;

public class FinancialRatingServiceBase {

	@Autowired
	CurrencyExchangeRateService currencyExchangeRateService;

	protected Collection<HashMap<String, Object>> getYearlyRatingDetails(List<FinancialData> financialData,
			String trgCurrency, List<FinancialData> originalFinData) {
		HashMap<String, HashMap<String, Object>> consoliDateValues = new HashMap<String, HashMap<String, Object>>();
		if (!CollectionUtils.isEmpty(financialData)) {
			setPivotedFinancialData(consoliDateValues, financialData, trgCurrency, null);
			setMostRecent3YrsWeightedAvg(consoliDateValues, financialData, trgCurrency, originalFinData);

		}
		AtomicInteger index = new AtomicInteger();
		HashMap<String, HashMap<String, Object>> sortedConsoliDateValues = consoliDateValues.entrySet().stream()
				.sorted((t1, t2) -> t1.getValue().get(FinancialRatingColumn.RN).toString()
						.compareTo(t2.getValue().get(FinancialRatingColumn.RN).toString()))
				.map(value -> {
					value.getValue().put(FinancialRatingColumn.RN, index.getAndIncrement());
					return value;
				})
				.collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue, (e1, e2) -> e1, LinkedHashMap::new));
		return sortedConsoliDateValues.values();
	}

	private void setMostRecent3YrsWeightedAvg(HashMap<String, HashMap<String, Object>> consoliDateValues,
			List<FinancialData> financialData, String trgCurrency, List<FinancialData> originalFinData) {
		if (consoliDateValues.size() > 3 && consoliDateValues.containsKey(FinancialRatingColumn.LTM)
				|| consoliDateValues.size() > 2 && !consoliDateValues.containsKey(FinancialRatingColumn.LTM)) {

			Set<String> reportedCurrencies = financialData.stream()
					.filter(finData -> finData.getId() >= 2 && finData.getId() <= 4)
					.map(value -> value.getReportedCurrency()).collect(Collectors.toSet());
			Map<String, Double> aggregateMnemonicValue = new HashMap<String, Double>();
			if (RatingsDataConstant.REPORTED_CURRENCIES.equalsIgnoreCase(trgCurrency)
					&& !CollectionUtils.isEmpty(reportedCurrencies) && reportedCurrencies.size() > 1) {
				// Most recent year will have the id as 2
				List<String> mostRecentReportedCurrency = financialData.stream().filter(finData -> finData.getId() == 2)
						.map(value -> value.getReportedCurrency()).collect(Collectors.toList());
				List<FinancialData> convertedFinData = !CollectionUtils.isEmpty(mostRecentReportedCurrency)
						? getCurrencyConvertedFinData(originalFinData, mostRecentReportedCurrency.get(0))
						: financialData;
				aggregateMnemonicValue = convertedFinData.stream()
						.filter(finData -> finData.getId() >= 2 && finData.getId() <= 4
								&& ObjectUtils.isNotEmpty(finData.getDataPointValue()))
						.collect(Collectors.groupingBy(FinancialData::getDataElementCd,
								Collectors.averagingDouble(FinancialData::getDataPointValue)));
			} else {
				// In DB view we get Id column values from 2 onwards for the Fiscal Year periods
				aggregateMnemonicValue = financialData.stream()
						.filter(finData -> finData.getId() >= 2 && finData.getId() <= 4
								&& ObjectUtils.isNotEmpty(finData.getDataPointValue()))
						.collect(Collectors.groupingBy(FinancialData::getDataElementCd,
								Collectors.averagingDouble(FinancialData::getDataPointValue)));
			}
			
//			Map<String, Double> aggregateMnemonicValue = financialData.stream()
//					.filter(finData -> finData.getId() >= 2 && finData.getId() <= 4
//							&& ObjectUtils.isNotEmpty(finData.getDataPointValue()))
//					.collect(Collectors.groupingBy(FinancialData::getDataElementCd,
//							Collectors.averagingDouble(FinancialData::getDataPointValue)));

			HashMap<String, Object> mostRecent3PeriodsUnweightedAvg = getMostRecent3PeriodsUnweightedAvg(
					aggregateMnemonicValue, financialData, FinancialRatingColumn.MOST_RECENT_3YRS_UNWEIGHED_AVG,
					trgCurrency);

			consoliDateValues.put(FinancialRatingColumn.MOST_RECENT_3YRS_UNWEIGHED_AVG,
					mostRecent3PeriodsUnweightedAvg);
		}
	}

	protected Collection<HashMap<String, Object>> getQuarterlyRatingDetails(List<FinancialData> financialData,
			String trgCurrency, List<FinancialData> originalFinData) {
		HashMap<String, HashMap<String, Object>> consoliDateValues = new HashMap<String, HashMap<String, Object>>();
		if (!CollectionUtils.isEmpty(financialData)) {
			setPivotedFinancialData(consoliDateValues, financialData, trgCurrency, null);
			setMostRecent3QTRSWeightedAvg(consoliDateValues, financialData, trgCurrency, originalFinData);
		}
		return consoliDateValues.values();
	}

	private void setMostRecent3QTRSWeightedAvg(HashMap<String, HashMap<String, Object>> consoliDateValues,
			List<FinancialData> financialData, String trgCurrency, List<FinancialData> originalFinData) {
		if (consoliDateValues.size() > 2) {

			Set<String> reportedCurrencies = financialData.stream().filter(finData -> finData.getId() <= 3)
					.map(value -> value.getReportedCurrency()).collect(Collectors.toSet());
			Map<String, Double> aggregateMnemonicValue = new HashMap<String, Double>();
			if (RatingsDataConstant.REPORTED_CURRENCIES.equalsIgnoreCase(trgCurrency) && 
					!CollectionUtils.isEmpty(reportedCurrencies) && reportedCurrencies.size() > 1) {
				// Most recent quarter will have the id as 1
				List<String> mostRecentReportedCurrency = financialData.stream().filter(finData -> finData.getId() == 1)
						.map(value -> value.getReportedCurrency()).collect(Collectors.toList());
				List<FinancialData> convertedFinData = !CollectionUtils.isEmpty(mostRecentReportedCurrency)
						? getCurrencyConvertedFinData(originalFinData, mostRecentReportedCurrency.get(0))
						: financialData;
				aggregateMnemonicValue = convertedFinData.stream()
						.filter(finData -> finData.getId() <= 3 && ObjectUtils.isNotEmpty(finData.getDataPointValue()))
						.collect(Collectors.groupingBy(FinancialData::getDataElementCd,
								Collectors.averagingDouble(FinancialData::getDataPointValue)));
			} else {
				aggregateMnemonicValue = financialData.stream()
						.filter(finData -> finData.getId() <= 3 && ObjectUtils.isNotEmpty(finData.getDataPointValue()))
						.collect(Collectors.groupingBy(FinancialData::getDataElementCd,
								Collectors.averagingDouble(FinancialData::getDataPointValue)));
			}
			
			HashMap<String, Object> mostRecent3PeriodsUnweightedAvg = getMostRecent3PeriodsUnweightedAvg(
					aggregateMnemonicValue, financialData, FinancialRatingColumn.MOST_RECENT_3QTRS_UNWEIGHED_AVG,
					trgCurrency);

			consoliDateValues.put(FinancialRatingColumn.MOST_RECENT_3QTRS_UNWEIGHED_AVG,
					mostRecent3PeriodsUnweightedAvg);
		}
	}

	public static String updPeriodContainMnemonic(String mnemonic) {
		return ObjectUtils.isNotEmpty(mnemonic) ? mnemonic.replace(".", "_") : "";
	}

	protected HashMap<String, Object> getMostRecent3PeriodsUnweightedAvg(Map<String, Double> aggregateMnemonicValue,
			List<FinancialData> financialData, String ficalLable, String trgCurrency) {
		HashMap<String, Object> mostRecent3PeriodsAvg = new HashMap<String, Object>();
		// DecimalFormat df = new
		// DecimalFormat(FinancialRatingColumn.DECIMAL_FORMATTER);
		aggregateMnemonicValue.entrySet()
				.forEach(data -> mostRecent3PeriodsAvg.put(updPeriodContainMnemonic(data.getKey()),
						Double.valueOf(String.format(FinancialRatingColumn.DECIMAL_FORMATTER, data.getValue()))));

		Optional<FinancialData> latestPeriod = financialData.stream()
				.filter(finData -> finData.getFiscalYear() != FinancialRatingColumn.LTM && finData.getId() == 2)
				.findFirst();

		mostRecent3PeriodsAvg.put(FinancialRatingColumn.RN, "0");

		latestPeriod.ifPresent(finPeriod -> {
			mostRecent3PeriodsAvg.put(FinancialRatingColumn.FIN_ENTITY_ID, finPeriod.getFinEntityId());
			mostRecent3PeriodsAvg.put(FinancialRatingColumn.CORE_ID, finPeriod.getCoreId().toString());
			mostRecent3PeriodsAvg.put(FinancialRatingColumn.REPORTED_CURRENCY, finPeriod.getReportedCurrency());
			mostRecent3PeriodsAvg.put(FinancialRatingColumn.TARGET_CURRENCY,
					trgCurrency.equalsIgnoreCase(RatingsDataConstant.REPORTED_CURRENCIES)
							? finPeriod.getReportedCurrency()
							: trgCurrency);
		});

		mostRecent3PeriodsAvg.put("FISCAL_YEAR", ficalLable);
		return mostRecent3PeriodsAvg;

	}

	protected HashMap<String, HashMap<String, Object>> setPivotedFinancialData(
			HashMap<String, HashMap<String, Object>> consoliDateValues, List<FinancialData> financialData,
			String targetCurrency, List<String> periodIds) {
		financialData.forEach(data -> {
			String elementValue = updPeriodContainMnemonic(data.getDataElementCd());
			String trgtCurrency = RatingsDataConstant.REPORTED_CURRENCIES.equalsIgnoreCase(targetCurrency)
					? data.getReportedCurrency()
					: targetCurrency;
			Object rnId = CollectionUtils.isEmpty(periodIds) ? data.getId().toString()
					: periodIds.indexOf(data.getFinPeriodId());
			if (consoliDateValues.containsKey(data.getFiscalYear())) {
				HashMap<String, Object> existingDataValue = consoliDateValues.get(data.getFiscalYear());
				existingDataValue.put(elementValue, data.getDataPointValue());
			} else {
				HashMap<String, Object> newDataValue = new HashMap<String, Object>();
				newDataValue.put(FinancialRatingColumn.RN, rnId);
				newDataValue.put(FinancialRatingColumn.FIN_ENTITY_ID, data.getFinEntityId());
				newDataValue.put(FinancialRatingColumn.FIN_PERIOD_ID, data.getFinPeriodId());
				newDataValue.put(FinancialRatingColumn.CORE_ID, data.getCoreId().toString());
				newDataValue.put(FinancialRatingColumn.PERIOD_STATE, data.getPeriodState());
				newDataValue.put(FinancialRatingColumn.TARGET_CURRENCY, trgtCurrency);
				newDataValue.put(FinancialRatingColumn.REPORTED_CURRENCY, data.getReportedCurrency());
				newDataValue.put(FinancialRatingColumn.PERIOD_END_DATE, data.getPeriodEndDate());
				newDataValue.put(FinancialRatingColumn.LAST_UPDATED_DATE, data.getLastUpdatedDate());
				newDataValue.put(FinancialRatingColumn.FISCAL_YEAR, data.getFiscalYear());
				newDataValue.put(elementValue, data.getDataPointValue());
				consoliDateValues.put(data.getFiscalYear(), newDataValue);
			}
		});

		return consoliDateValues;
	}

	protected List<FinancialData> getCurrencyConvertedFinData(List<FinancialData> financialData, String trgCurrency) {

		if (CollectionUtils.isEmpty(financialData)) {
			return financialData;
		}
		if (RatingsDataConstant.REPORTED_CURRENCIES.equalsIgnoreCase(trgCurrency)) {
			return currencyExchangeRateService.getFinDataMagnitudeConvertForRC(financialData);
		} else {
			return this.getCurrencyConvertedData(financialData, trgCurrency);
		}
	}
	
	protected List<FinancialData> getCurrencyConvertedData(List<FinancialData> financialData, String trgCurrency) {
		Map<String, Map<String, Double>> convertedFinData = new HashMap<String, Map<String, Double>>();

		/*
		 * Get different Source and target currency code financial periods to apply the
		 * Currency conversion and Magnitude multiplier
		 */
		Map<String, Map<String, Double>> financialMnemonicValues = financialData.stream().filter(
				s -> !s.getReportedCurrency().equalsIgnoreCase(trgCurrency) && s.getMagnitude().equalsIgnoreCase(FinancialRatingColumn.FIN_MAGNITUDE_VAL)
				&& !ObjectUtils.isEmpty(s.getDataPointValue()))
				.collect(Collectors.groupingBy(FinancialData::getFinPeriodId,
						Collectors.toMap(FinancialData::getDataElementCd, FinancialData::getDataPointValue)));

		Map<String, Map<String, Double>> currencyConvertedFinData = currencyExchangeRateService
				.getCurrencyMagnitudeConvertedFinData(financialMnemonicValues, trgCurrency);

		convertedFinData.putAll(currencyConvertedFinData);

		/*
		 * Get same Source and target currency code financial periods to apply the
		 * Magnitude multiplier only
		 */
		Map<String, Map<String, Double>> financialMnemonicValues1 = financialData.stream().filter(
				s -> s.getReportedCurrency().equalsIgnoreCase(trgCurrency) && s.getMagnitude().equalsIgnoreCase(FinancialRatingColumn.FIN_MAGNITUDE_VAL)
				&& !ObjectUtils.isEmpty(s.getDataPointValue()))
				.collect(Collectors.groupingBy(FinancialData::getFinPeriodId,
						Collectors.toMap(FinancialData::getDataElementCd, FinancialData::getDataPointValue)));

		Map<String, Map<String, Double>> magnitudeConvertedFinData = currencyExchangeRateService
				.getMagnitudeConvertedFinData(financialMnemonicValues1, trgCurrency);

		// Combine both of them
		convertedFinData.putAll(magnitudeConvertedFinData);

		if (convertedFinData.size() > 0) {
			for (FinancialData financialDataElement : financialData) {
				Map<String, Double> dataElementValue = convertedFinData.get(financialDataElement.getFinPeriodId());
				if (!CollectionUtils.isEmpty(dataElementValue)) {
					Double elementValue = dataElementValue.get(financialDataElement.getDataElementCd());
					if (!ObjectUtils.isEmpty(elementValue)) {
						financialDataElement.setDataPointValue(elementValue);
					}
				}
			}
		}
		return financialData;
	}
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\service\FinancialRatingServiceImpl.java

package com.spglobal.ratings.ratingsdata.service;

import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.stream.Collectors;

import org.apache.commons.lang3.ObjectUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.util.CollectionUtils;

import com.spglobal.ratings.ratingsdata.dao.FinancialRatingDao;
import com.spglobal.ratings.ratingsdata.entity.FinancialPeers;
import com.spglobal.ratings.ratingsdata.entity.MNemonicDetailsEntity;
import com.spglobal.ratings.ratingsdata.entity.PeriodDetailsEntity;
import com.spglobal.ratings.ratingsdata.model.FinancialData;
import com.spglobal.ratings.ratingsdata.repository.ElementMasterRepository;
import com.spglobal.ratings.ratingsdata.util.FinancialRatingColumn;
import com.spglobal.ratings.ratingsdata.util.RatingsDataConstant;

//@Slf4j
@Service
public class FinancialRatingServiceImpl extends FinancialRatingServiceBase implements FinancialRatingService {
	@Autowired
	FinancialRatingDao financialRatingDao;
	@Autowired
	ElementMasterRepository elementMasterRepository;

	@Override
	public Collection<HashMap<String, Object>> getFinancialRatingDetails(Long coreId, String templateType,
			String periodType, String trgCurrency) {
		if (ObjectUtils.isNotEmpty(periodType) && RatingsDataConstant.QUARTERLY.equalsIgnoreCase(periodType)) {
			List<FinancialData> quartelyFinData = financialRatingDao.getFinancialQuartelyRatingDetails(coreId,
					templateType);
			List<FinancialData> originalValue = quartelyFinData.stream().map(FinancialData::clone).collect(Collectors.toList());
			List<FinancialData> convertedFinData = getCurrencyConvertedFinData(quartelyFinData, trgCurrency);
			return getQuarterlyRatingDetails(convertedFinData, trgCurrency, originalValue);
		} else {
			List<FinancialData> finData = financialRatingDao.getFinancialRatingDetails(coreId, templateType);
			List<FinancialData> originalValue = finData.stream().map(FinancialData::clone).collect(Collectors.toList());
			List<FinancialData> convertedFinData = getCurrencyConvertedFinData(finData, trgCurrency);
			return getYearlyRatingDetails(convertedFinData, trgCurrency, originalValue);
		}
	}

	@Override
	public Collection<HashMap<String, Object>> getCustomFinancialRatingDetails(Long coreId, String templateType,
			List<String> periodIds, String trgCurrency) {
		List<FinancialData> financialData = financialRatingDao.getCustomFinancialRatingDetails(coreId,
				templateType, periodIds);
		financialData = this.filterQuarterlyDataForHiddenMnemonics(financialData, templateType);
		HashMap<String, HashMap<String, Object>> consoliDateValues = new HashMap<String, HashMap<String, Object>>();
		if (!CollectionUtils.isEmpty(financialData)) {
			List<FinancialData> convertedFinData = getCurrencyConvertedFinData(financialData, trgCurrency);
			setPivotedFinancialData(consoliDateValues, convertedFinData, trgCurrency, periodIds);
		}
		return consoliDateValues.values();
	}

	private List<FinancialData> filterQuarterlyDataForHiddenMnemonics(List<FinancialData> financialData,
			String templateType) {
		templateType = templateType.toLowerCase();
		if (!CollectionUtils.isEmpty(financialData)) {
			// First find if the Selection has quarterly data
			List<FinancialData> quarterlyData = financialData.stream()
					.filter(data -> data.getFiscalYear().contains("Q")).collect(Collectors.toList());

			if (!CollectionUtils.isEmpty(quarterlyData)) {
				// IF quarterly data exists, get the template Details from cache
				List<MNemonicDetailsEntity> templateDetails = elementMasterRepository.findByTemplateName(templateType);
				if (!CollectionUtils.isEmpty(templateDetails)) {
					// Find if any retrived mnemonics has the hidden flag as true
					List<String> hiddenMnemonic = templateDetails.stream()
							.filter(data -> ObjectUtils.isNotEmpty(data.getHiddenMnemFlag())
									&& RatingsDataConstant.YES.equalsIgnoreCase(data.getHiddenMnemFlag()))
							.map(data -> data.getMNemonic()).collect(Collectors.toList());

					if (!CollectionUtils.isEmpty(hiddenMnemonic)) {
						// Filter the mnemonic which as filter flag as true
						List<FinancialData> filteredFinancialData = new ArrayList<FinancialData>();
						for (FinancialData val : financialData) {
							if(!(val.getFiscalYear().contains("Q") && hiddenMnemonic.contains(val.getDataElementCd()))) {
								filteredFinancialData.add(val);
							}
						}
						return filteredFinancialData;
					}

				}
			}
		}

		return financialData;
	}

	@Override
	public List<PeriodDetailsEntity> getFinancialPeriods(Long coreId, List<String> periods) {
		List<PeriodDetailsEntity> financialData = financialRatingDao.getFinancialPeriods(coreId, periods);
		return financialData;
	}

	@Override
	public List<MNemonicDetailsEntity> getMNemonic(String templateName, String trgCurrency) {
		List<MNemonicDetailsEntity> financialData = financialRatingDao.getMNemonic(templateName,trgCurrency);
		return financialData;
	}

	@Override

    public List<FinancialPeers> getFinancialPeers(List<String> entities, String template, String currency) {
        List<FinancialPeers> financialPeers = financialRatingDao.getFinancialPeers(entities, template);
        if (RatingsDataConstant.REPORTED_CURRENCIES.equalsIgnoreCase(currency)) {
            return currencyExchangeRateService.getFinDataMagnitudeConvertForPeers(financialPeers);
        } else {
            return this.getCurrencyConvertedDataPeers(financialPeers, currency);
        }
    }
	
	private List<FinancialPeers> getCurrencyConvertedDataPeers(List<FinancialPeers> financialData, String trgCurrency) {
        Map<String, Map<String, Double>> convertedFinData = new HashMap<String, Map<String, Double>>();
 
        /*
         * Get different Source and target currency code financial periods to apply the
         * Currency conversion and Magnitude multiplier
         */
        Map<String, Map<String, Double>> financialMnemonicValues = financialData.stream().filter(
                s -> !s.getReportedCurrency().equalsIgnoreCase(trgCurrency) && s.getMagnitude().equalsIgnoreCase(FinancialRatingColumn.FIN_MAGNITUDE_VAL)
				&& s.getDataPointValue() != null)
                .collect(Collectors.groupingBy(FinancialPeers::getFinPeriodId,
                        Collectors.toMap(FinancialPeers::getDataElementCd, FinancialPeers::getDataPointValue)));
 
        Map<String, Map<String, Double>> currencyConvertedFinData = currencyExchangeRateService
                .getCurrencyMagnitudeConvertedFinData(financialMnemonicValues, trgCurrency);

        convertedFinData.putAll(currencyConvertedFinData);

        /*
         * Get same Source and target currency code financial periods to apply the
         * Magnitude multiplier only
         */
        Map<String, Map<String, Double>> financialMnemonicValues1 = financialData.stream().filter(
                s -> s.getReportedCurrency().equalsIgnoreCase(trgCurrency) && s.getMagnitude().equalsIgnoreCase(FinancialRatingColumn.FIN_MAGNITUDE_VAL)
				&& s.getDataPointValue() != null)
                .collect(Collectors.groupingBy(FinancialPeers::getFinPeriodId,
                        Collectors.toMap(FinancialPeers::getDataElementCd, FinancialPeers::getDataPointValue)));

        Map<String, Map<String, Double>> magnitudeConvertedFinData = currencyExchangeRateService
                .getMagnitudeConvertedFinData(financialMnemonicValues1, trgCurrency);

        // Combine both of them
        convertedFinData.putAll(magnitudeConvertedFinData);

        if (convertedFinData.size() > 0) {
            for (FinancialPeers financialDataElement : financialData) {
                Map<String, Double> dataElementValue = convertedFinData.get(financialDataElement.getFinPeriodId());
                if (!CollectionUtils.isEmpty(dataElementValue)) {
                    Double elementValue = dataElementValue.get(financialDataElement.getDataElementCd());
                    if (!ObjectUtils.isEmpty(elementValue)) {
                        financialDataElement.setDataPointValue(elementValue);
                    }
                }
            }
        }
        return financialData;
    }

}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\service\InvestorSentimentSectorService.java

package com.spglobal.ratings.ratingsdata.service;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.spglobal.ratings.ratingsdata.entity.InvestorSentimentIndustry;
import com.spglobal.ratings.ratingsdata.entity.InvestorSentimentSectors;
import com.spglobal.ratings.ratingsdata.model.InvestorSentimentSectorResponse;
import com.spglobal.ratings.ratingsdata.repository.InvestorSentimentIndustryRepository;
import com.spglobal.ratings.ratingsdata.repository.InvestorSentimentSectorRepository;

import lombok.extern.slf4j.Slf4j;

@Slf4j
@Service
public class InvestorSentimentSectorService {

	@Autowired
	InvestorSentimentSectorRepository sectorRepository;

	@Autowired
	InvestorSentimentIndustryRepository industryRepository;

	private final String SF_CLO_PROFILE_SPEC_ID = "1";
	private final String SF_ABS_PROFILE_SPEC_ID = "6";
	private final String USPF_PROFILE_SPEC_ID = "3";
	
	private final String SF_CLO_SECTOR_TXT = "Structured Credit - CLO";
	private final String SF_ABS_SECTOR_TXT = "Asset-Backed Securities";
	private final String USPF_SECTOR_TXT = "State & Local Governments";
	
	private final Integer SF_CLO_SECTOR_ID = 23;
	private final Integer SF_ABS_SECTOR_ID = 34;
	private final Integer USPF_SECTOR_ID = 22;
	
	private final Integer SF_CLO_INDUSTRY_ID = 345;
	private final Integer SF_ABS_INDUSTRY_ID = 341;
	private final Integer USPF_INDUSTRY_ID = 245;

	private final String SF_CLO_PERSONA_ID = "7";
	private final String SF_ABS_PERSONA_ID = "8";


	
	public List<InvestorSentimentSectors> getSectorsList(String profileSpecialization, Long entityId) throws Exception {
		log.info("@InvestorSentimentSectorService -- getSectorsList");
		return sectorRepository.findAll();
	}

	public InvestorSentimentSectorResponse getSectorsAndDefaultIndustry(String profileSpecialization, Long entityId)
			throws Exception {
		log.info("@InvestorSentimentSectorService -- getSectorsAndDefaultIndustry");

		InvestorSentimentSectorResponse response = new InvestorSentimentSectorResponse();
		InvestorSentimentIndustry industrySelctObj = getDefaultProfileSector(profileSpecialization, entityId);
		response.setSectorsList(sectorRepository.findAll());
		response.setSectorDropdwnSelect(industrySelctObj);
		return response;
	}

	private InvestorSentimentIndustry getDefaultProfileSector(String profileSpecialization, Long entityId) {
	
		log.info("Default Industry for profile-- ");
		InvestorSentimentIndustry industrySelctObj = new InvestorSentimentIndustry();

		if (profileSpecialization.equals(SF_CLO_PROFILE_SPEC_ID)) {
			industrySelctObj.setSectorId(SF_CLO_SECTOR_ID);
			industrySelctObj.setIndustryId(SF_CLO_INDUSTRY_ID);
			industrySelctObj.setSectorName(SF_CLO_SECTOR_TXT);

		} else if (profileSpecialization.equals(SF_ABS_PROFILE_SPEC_ID)) {
			industrySelctObj.setSectorId(SF_ABS_SECTOR_ID);
			industrySelctObj.setIndustryId(SF_ABS_INDUSTRY_ID);
			industrySelctObj.setSectorName(SF_ABS_SECTOR_TXT);
		} else {
			industrySelctObj = industryRepository.findSectorIndustry(entityId);
		}
		log.info("Default Industry for profile :"+industrySelctObj.getIndustryId());

		return industrySelctObj;
	}

	private InvestorSentimentIndustry getDefaultApplicationSector(String appId, Long entityId) {

		log.info("Default Industry for application-- ");
		InvestorSentimentIndustry industrySelctObj = new InvestorSentimentIndustry();

		if (appId.equals(SF_CLO_PERSONA_ID)) {
			industrySelctObj.setSectorId(SF_CLO_SECTOR_ID);
			industrySelctObj.setIndustryId(SF_CLO_INDUSTRY_ID);
			industrySelctObj.setSectorName(SF_CLO_SECTOR_TXT);

		} else if (appId.equals(SF_ABS_PERSONA_ID)) {
			industrySelctObj.setSectorId(SF_ABS_SECTOR_ID);
			industrySelctObj.setIndustryId(SF_ABS_INDUSTRY_ID);
			industrySelctObj.setSectorName(SF_ABS_SECTOR_TXT);
		} else {
			industrySelctObj = industryRepository.findSectorIndustry(entityId);
		}
		log.info("Default Industry for application :"+industrySelctObj.getIndustryId());

		return industrySelctObj;
	}


	public InvestorSentimentSectorResponse getSectorsAndDefaultIndustrByApp(String application, Long entityId) throws Exception{
		log.info("@InvestorSentimentSectorService -- getSectorsAndDefaultIndustry");

		InvestorSentimentSectorResponse response = new InvestorSentimentSectorResponse();
		InvestorSentimentIndustry industrySelctObj = getDefaultApplicationSector(application, entityId);
		response.setSectorsList(sectorRepository.findAll());
		response.setSectorDropdwnSelect(industrySelctObj);
		return response;
	}
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\service\InvestorSentimentService.java

package com.spglobal.ratings.ratingsdata.service;

import com.spglobal.ratings.ratingsdata.entity.InvestorSentimentCommentry;
import com.spglobal.ratings.ratingsdata.entity.InvestorSentimentNumbersRecentStudies;
import org.springframework.stereotype.Service;

import java.util.List;

@Service("investorSentimentService")
public interface InvestorSentimentService {
    public List<InvestorSentimentNumbersRecentStudies> getInvestorSentimentNumbersByIndustryIdAndType(Long industryId, String type) throws Exception;
    public List<InvestorSentimentCommentry> getInvestorSentimentCommentryByIndustryId(Long industryId) ;
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\service\InvestorSentimentServiceImpl.java

package com.spglobal.ratings.ratingsdata.service;

import com.spglobal.ratings.ratingsdata.dao.InvestorSentimentDAO;
import com.spglobal.ratings.ratingsdata.entity.InvestorSentimentCommentry;
import com.spglobal.ratings.ratingsdata.entity.InvestorSentimentNumbersRecentStudies;
import com.spglobal.ratings.ratingsdata.repository.InvestorSentimentCommentryRepository;
import com.spglobal.ratings.ratingsdata.util.RatingsDataUtil;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.util.ObjectUtils;

import java.util.List;

@Slf4j
@Service("investorSentimentService")
public class InvestorSentimentServiceImpl implements  InvestorSentimentService {

    @Autowired
    private InvestorSentimentDAO investorSentimentDAO;

    @Autowired
    private RatingsDataUtil ratingsUtil;

    public List<InvestorSentimentNumbersRecentStudies> getInvestorSentimentNumbersByIndustryIdAndType(Long industryId, String type) throws Exception{
        log.info("@InvestorSentimentServiceImpl getInvestorSentimentNumbersByIndustryIdAndType({},{})", ratingsUtil.sanitizeString(String.valueOf(industryId)), ratingsUtil.sanitizeString(type));
        List<InvestorSentimentNumbersRecentStudies> investorSentimentNumbersRecentStudiesList = null;

        try {
            if (industryId != null && !ObjectUtils.isEmpty(type)) {
                investorSentimentNumbersRecentStudiesList = investorSentimentDAO.getInvestorSentimentNumbersByIndustryIdAndType(industryId, type);
            }
        } catch (Exception e) {
            log.error("Exception: @InvestorSentimentServiceImpl getInvestorSentimentNumbersByIndustryIdAndType  method --> Failed: {}", e.getMessage());
            throw e;
        }
        return investorSentimentNumbersRecentStudiesList;
    }

    public List<InvestorSentimentCommentry> getInvestorSentimentCommentryByIndustryId(Long industryId) {
        log.info("@InvestorSentimentServiceImpl getInvestorSentimentNumbersByIndustryId({},{})", ratingsUtil.sanitizeString(String.valueOf(industryId)));
        List<InvestorSentimentCommentry> investorSentimentCommentryList = null;
        try {
            if (industryId != null) {
                investorSentimentCommentryList = investorSentimentDAO.getInvestorSentimentCommentryByIndustryId(industryId);
            }
        } catch (Exception exception) {
            log.error("Exception: @InvestorSentimentServiceImpl getInvestorSentimentCommentryByIndustryId  method --> Failed: {}", exception.getMessage());
            throw exception;
        }
        return investorSentimentCommentryList;
    }

}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\service\IssuesAndMaturitiesHistoryPublicService.java

package com.spglobal.ratings.ratingsdata.service;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.util.ObjectUtils;

import com.spglobal.ratings.ratingsdata.dao.IssuesAndMaturitiesHistoryPublicDao;
import com.spglobal.ratings.ratingsdata.entity.IssuesAndMaturitiesHistoryPublic;
import com.spglobal.ratings.ratingsdata.util.RatingsDataUtil;

import lombok.extern.slf4j.Slf4j;

@Service("issuesAndMaturitesHistoryPublic")
@Slf4j
public class IssuesAndMaturitiesHistoryPublicService {
	
	@Autowired
	private RatingsDataUtil ratingsUtil;
	
	@Autowired
	private IssuesAndMaturitiesHistoryPublicDao issuesAndMaturitiesHistoryPublicDao;
	
	public List<IssuesAndMaturitiesHistoryPublic> getPublicIssuesAndMaturitiesHistory(Long instrumentId, String ratingTypeCode, Long instrumentDetailId) {
		log.info("IssuesAndMaturitiesHistoryPublicService: getPublicIssuesAndMaturitiesHistory for instrumentId " +ratingsUtil.sanitizeString(instrumentId.toString())
				+ " with ratingTypeCode " +ratingsUtil.sanitizeString(ratingTypeCode) + " and instrumentDetailId " +ratingsUtil.sanitizeString(instrumentDetailId.toString()));
		
		List<IssuesAndMaturitiesHistoryPublic> issuesAndMaturitiesHistory = issuesAndMaturitiesHistoryPublicDao.getPublicIssuesAndMaturitiesHistory(instrumentId, ratingTypeCode, instrumentDetailId);
		issuesAndMaturitiesHistory.removeIf(history -> !ObjectUtils.isEmpty(history.getAction()) && history.getAction().equals("Deleted Row"));
		return (issuesAndMaturitiesHistory != null && issuesAndMaturitiesHistory.size() > 0) ? issuesAndMaturitiesHistory : null;
	}

}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\service\IssuesAndMaturitiesHistoryService.java

package com.spglobal.ratings.ratingsdata.service;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.spglobal.ratings.ratingsdata.dao.IssuesAndMaturitiesHistoryDao;
import com.spglobal.ratings.ratingsdata.entity.IssuesAndMaturitiesHistory;
import com.spglobal.ratings.ratingsdata.util.RatingsDataUtil;

import lombok.extern.slf4j.Slf4j;

@Service("issuesAndMaturitiesHistory")
@Slf4j
public class IssuesAndMaturitiesHistoryService {
	
	@Autowired
	private RatingsDataUtil ratingsUtil;
	
	@Autowired
	private IssuesAndMaturitiesHistoryDao issuesAndMaturitiesHistoryDao;
	
	@Autowired
	private UserEntitlementCheckImpl userEntitlementCheck;
	
	public List<IssuesAndMaturitiesHistory> getIssuesAndMaturitiesHistory(Long instrumentId, String ratingTypeCode, Long instrumentDetailId, Long capiqId, String authHeader) {
		log.info("IssuesAndMaturitiesHistoryService: getIssuesAndMaturitiesHistory for instrumentId " +ratingsUtil.sanitizeString(instrumentId.toString())
		+ " with ratingTypeCode " +ratingsUtil.sanitizeString(ratingTypeCode) + " and instrumentDetailId " +ratingsUtil.sanitizeString(instrumentDetailId.toString()));
		
		List<IssuesAndMaturitiesHistory> issuesAndMaturitiesHistory = null;
		Integer privConfOssCheck = null;
		Integer entityEntitlementCheck = null;
		Map<String,List<Long>> userEntitlement = new HashMap<>(userEntitlementCheck.entitlementChecksForUser(authHeader));
		if(userEntitlement != null) {
			privConfOssCheck = userEntitlementCheck.isUserEntitledToPrivateRatings(userEntitlement, authHeader);
			entityEntitlementCheck = userEntitlementCheck.isUserEntitledToEntity(capiqId, userEntitlement);
			if(privConfOssCheck == 1 && entityEntitlementCheck == 1) {
				issuesAndMaturitiesHistory = issuesAndMaturitiesHistoryDao.getIssuesAndMaturitiesHistory(instrumentId, ratingTypeCode, instrumentDetailId);
				issuesAndMaturitiesHistory.removeIf(history -> history.getAction() != null && history.getAction().equals("Deleted Row"));
				for (IssuesAndMaturitiesHistory history: issuesAndMaturitiesHistory) {
					if(history.getConfidentialityInd().equals("N") && history.getConfidentialCategoryCode() == null) {
						history.setConfidentialCategoryCode("Public");
					} else if(history.getConfidentialityInd().equals("Y") && history.getConfidentialCategoryCode().equals("CIR")) {
						history.setConfidentialCategoryCode("Confidential(CIR)");
					} else if(history.getConfidentialityInd().equals("Y") && history.getConfidentialCategoryCode().equals("PVT")) {
						history.setConfidentialCategoryCode("Private");
					}
				}
			}
		}
		return (issuesAndMaturitiesHistory != null && issuesAndMaturitiesHistory.size() >0) ? issuesAndMaturitiesHistory : null;
	}

}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\service\IssuesAndMaturitiesPublicService.java

package com.spglobal.ratings.ratingsdata.service;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.spglobal.ratings.ratingsdata.dao.IssuesAndMaturitiesDao;
import com.spglobal.ratings.ratingsdata.dao.IssuesAndMaturitiesPublicDao;
import com.spglobal.ratings.ratingsdata.entity.IssuesAndMaturitiesPublic;
import com.spglobal.ratings.ratingsdata.model.DebtTypes;
import com.spglobal.ratings.ratingsdata.util.RatingsDataUtil;

import lombok.extern.slf4j.Slf4j;

@Service("issuesAndMaturitiesPublicService")
@Slf4j
public class IssuesAndMaturitiesPublicService {
	
	@Autowired
	private RatingsDataUtil ratingsUtil;
	
	@Autowired
	private IssuesAndMaturitiesPublicDao issuesAndMaturitiesPubDao;
	
	@Autowired
	private IssuesAndMaturitiesDao issuesAndMaturitiesDao;
	
	public List<IssuesAndMaturitiesPublic> getPublicIssuesAndMaturities(Long entityId) {
		log.info("@IssuesAndMaturitiesPublicService getPublicIssuesAndMaturities for entity: {}", ratingsUtil.sanitizeString(entityId.toString()));
		
		List<IssuesAndMaturitiesPublic> issuesAndMaturities = issuesAndMaturitiesPubDao.getIssuesAndMaturitiesByEntityId(entityId);
		return (issuesAndMaturities != null && issuesAndMaturities.size() > 0) ? issuesAndMaturities : null;	
	}
	
	public List<IssuesAndMaturitiesPublic> getPublicIssuesAndMaturitiesByDebtTypeCode(Long entityId, String debtTypeCode) {
		log.info("@IssuesAndMaturitiesPublicService getPublicIssuesAndMaturitiesByDebtTypeCode for entity:{} " ,ratingsUtil.sanitizeString(entityId.toString()));
		
		List<IssuesAndMaturitiesPublic> issuesAndMaturities = issuesAndMaturitiesPubDao.getIssuesAndMaturitiesByEntityIdAndDebtTypeCode(entityId, debtTypeCode);
		return (issuesAndMaturities != null && issuesAndMaturities.size() > 0) ? issuesAndMaturities : null;	
	}
	
	public IssuesAndMaturitiesPublic getPublicIssuesAndMaturitiesDetails(Long entityId, Long ratingDetailId) {
		log.info("@IssuesAndMaturitiesPublicService getPublicIssuesAndMaturitiesDetails for entity:{} " ,ratingsUtil.sanitizeString(entityId.toString()));
		
		IssuesAndMaturitiesPublic details = issuesAndMaturitiesPubDao.getIssuesAndMaturitiesDetails(entityId, ratingDetailId);
		return details != null ? details : null;
	}
	
	public List<DebtTypes> getDropdownDebtTypesPublic(Long entityId) {
		log.info("@IssuesAndMaturitiesPublicService getDropdownDebtTypesPublic for entity: {} ",
				 ratingsUtil.sanitizeString(entityId.toString()));

		List<DebtTypes> debtTypes = null;
			debtTypes = issuesAndMaturitiesDao.getDropdownDebtTypes(entityId);
		return debtTypes;
	}


}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\service\IssuesAndMaturitiesService.java

package com.spglobal.ratings.ratingsdata.service;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.spglobal.ratings.ratingsdata.dao.IssuesAndMaturitiesDao;
import com.spglobal.ratings.ratingsdata.entity.IssuesAndMaturities;
import com.spglobal.ratings.ratingsdata.model.DebtTypes;
import com.spglobal.ratings.ratingsdata.model.IssuesAndMaturitiesData;
import com.spglobal.ratings.ratingsdata.util.RatingsDataUtil;

import lombok.extern.slf4j.Slf4j;

@Service("issuesAndMaturitiesService")
@Slf4j
public class IssuesAndMaturitiesService {
	
	@Autowired
	private RatingsDataUtil ratingsUtil;
	
	@Autowired
	private IssuesAndMaturitiesDao issuesAndMaturitiesDao;
	
	@Autowired
	private UserEntitlementCheckImpl userEntitlementCheck;
	
	public List<IssuesAndMaturities> getIssuesAndMaturities(Long entityId) {
		log.info("@IssuesAndMaturitiesService getIssuesAndMaturities for entity: " +ratingsUtil.sanitizeString(entityId.toString()));
		
		List<IssuesAndMaturities> issuesAndMaturities = null;
		issuesAndMaturities = issuesAndMaturitiesDao.getIssuesAndMaturitiesByEntityId(entityId);
		return issuesAndMaturities;
	}
	
	public IssuesAndMaturitiesData getIssuesAndMaturities(Long entityId, Long capiqId, String authHeader) {
		log.info("@IssuesAndMaturitiesService getIssuesAndMaturities for entity: " +ratingsUtil.sanitizeString(entityId.toString()));
		
		IssuesAndMaturitiesData issuesAndMaturitiesData = new IssuesAndMaturitiesData();
		List<IssuesAndMaturities> issuesAndMaturities = null;
		Integer privConfOssCheck = null;
		Integer entityEntitlementCheck = null;
		Map<String,List<Long>> userEntitlement = new HashMap<>(userEntitlementCheck.entitlementChecksForUser(authHeader));
		if(userEntitlement != null) {
			privConfOssCheck = userEntitlementCheck.isUserEntitledToPrivateRatings(userEntitlement, authHeader);
			entityEntitlementCheck = userEntitlementCheck.isUserEntitledToEntity(capiqId, userEntitlement);
			if(privConfOssCheck == 1 && entityEntitlementCheck == 1) {
				issuesAndMaturities = issuesAndMaturitiesDao.getIssuesAndMaturitiesByEntityId(entityId);
				for(IssuesAndMaturities details : issuesAndMaturities) {
					if(details.getConfidentialityInd().equals("N") && details.getConfidentialCategoryCode() == null) {
						details.setConfidentialCategoryCode("Public");
					} else if(details.getConfidentialityInd().equals("Y") && details.getConfidentialCategoryCode().equals("CIR")) {
						details.setConfidentialCategoryCode("Confidential(CIR)");
						issuesAndMaturitiesData.setPcData(true);
					} else if(details.getConfidentialityInd().equals("Y") && details.getConfidentialCategoryCode().equals("PVT")) {
						details.setConfidentialCategoryCode("Private");
						issuesAndMaturitiesData.setPcData(true);
					}
				}
				issuesAndMaturitiesData.setIssuesAndMaturities((issuesAndMaturities != null && issuesAndMaturities.size() > 0) ? issuesAndMaturities : null);
				issuesAndMaturitiesData.setMessage("success");
			} else {
				issuesAndMaturitiesData.setMessage("The User is not entitiled to view issues and maturities for entity");
			}
		}
		return issuesAndMaturitiesData;
	}
	
	public IssuesAndMaturitiesData getIssuesAndMaturitiesByDebtTypeCode(Long entityId, String debtTypeCode, Long capiqId, String authHeader) {
		log.info("@IssuesAndMaturitiesService getIssuesAndMaturitiesByDebtTypeCode for entity: " +ratingsUtil.sanitizeString(entityId.toString()));
		
		IssuesAndMaturitiesData issuesAndMaturitiesData = new IssuesAndMaturitiesData();
		List<IssuesAndMaturities> issuesAndMaturities = null;
		Integer privConfOssCheck = null;
		Integer entityEntitlementCheck = null;
		Map<String,List<Long>> userEntitlement = new HashMap<>(userEntitlementCheck.entitlementChecksForUser(authHeader));
		if(userEntitlement != null) {
			privConfOssCheck = userEntitlementCheck.isUserEntitledToPrivateRatings(userEntitlement, authHeader);
			entityEntitlementCheck = userEntitlementCheck.isUserEntitledToEntity(capiqId, userEntitlement);
			if(privConfOssCheck == 1 && entityEntitlementCheck == 1) {
				issuesAndMaturities = issuesAndMaturitiesDao.getIssuesAndMaturitiesByEntityIdAndDebtTypeCode(entityId, debtTypeCode);
				for(IssuesAndMaturities details : issuesAndMaturities) {
					if(details.getConfidentialityInd().equals("N") && details.getConfidentialCategoryCode() == null) {
						details.setConfidentialCategoryCode("Public");
					} else if(details.getConfidentialityInd().equals("Y") && details.getConfidentialCategoryCode().equals("CIR")) {
						details.setConfidentialCategoryCode("Confidential(CIR)");
						issuesAndMaturitiesData.setPcData(true);
					} else if(details.getConfidentialityInd().equals("Y") && details.getConfidentialCategoryCode().equals("PVT")) {
						details.setConfidentialCategoryCode("Private");
						issuesAndMaturitiesData.setPcData(true);
					}
				}
				issuesAndMaturitiesData.setIssuesAndMaturities((issuesAndMaturities != null && issuesAndMaturities.size() > 0) ? issuesAndMaturities : null);
				issuesAndMaturitiesData.setMessage("success");
			} else {
				issuesAndMaturitiesData.setMessage("The User is not entitiled to view issues and maturities for entity");
			}
		}
		return issuesAndMaturitiesData;	
	}
	
	public IssuesAndMaturities getIssuesAndMaturitiesDetails(Long entityId, Long ratingDetailId, Long capiqId, String authHeader) {
		log.info("@IssuesAndMaturitiesService getIssuesAndMaturitiesDetails for entity: " +ratingsUtil.sanitizeString(entityId.toString()));
		
		IssuesAndMaturities details = null;
		Integer privConfOssCheck = null;
		Integer entityEntitlementCheck = null;
		Map<String,List<Long>> userEntitlement = new HashMap<>(userEntitlementCheck.entitlementChecksForUser(authHeader));
		if(userEntitlement != null) {
			privConfOssCheck = userEntitlementCheck.isUserEntitledToPrivateRatings(userEntitlement, authHeader);
			entityEntitlementCheck = userEntitlementCheck.isUserEntitledToEntity(capiqId, userEntitlement);
			if(privConfOssCheck == 1 && entityEntitlementCheck == 1) {
				details = issuesAndMaturitiesDao.getIssuesAndMaturitiesDetails(entityId, ratingDetailId);
				if(details != null) {
					if(details.getConfidentialityInd().equals("N") && details.getConfidentialCategoryCode() == null) {
						details.setConfidentialCategoryCode("Public");
					} else if(details.getConfidentialityInd().equals("Y") && details.getConfidentialCategoryCode().equals("CIR")) {
						details.setConfidentialCategoryCode("Confidential(CIR)");
					} else if(details.getConfidentialityInd().equals("Y") && details.getConfidentialCategoryCode().equals("PVT")) {
						details.setConfidentialCategoryCode("Private");
					}
				}
			}
		}
		return details != null ? details : null;
	}
	
	public List<DebtTypes> getDropdownDebtTypes(Long entityId, Long capiqId, String authHeader) {
		log.info("@IssuesAndMaturitiesService getDropdownDebtTypes for entity: "
				+ ratingsUtil.sanitizeString(entityId.toString()));

		List<DebtTypes> debtTypes = null;
		Integer privConfOssCheck = null;
		Integer entityEntitlementCheck = null;
			Map<String, List<Long>> userEntitlement = new HashMap<>(
					userEntitlementCheck.entitlementChecksForUser(authHeader));
			if (userEntitlement != null) {
				privConfOssCheck = userEntitlementCheck.isUserEntitledToPrivateRatings(userEntitlement, authHeader);
				entityEntitlementCheck = userEntitlementCheck.isUserEntitledToEntity(capiqId, userEntitlement);
				if (privConfOssCheck == 1 && entityEntitlementCheck == 1) {
					debtTypes = issuesAndMaturitiesDao.getDropdownDebtTypes(entityId);
				}
			}
		
		return (debtTypes != null && debtTypes.size() > 0) ? debtTypes : null;
	}

}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\service\MultimediaService.java

package com.spglobal.ratings.ratingsdata.service;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.util.ObjectUtils;

import com.spglobal.ratings.ratingsdata.entity.MultimediaPodcasts;
import com.spglobal.ratings.ratingsdata.entity.MultimediaSector;
import com.spglobal.ratings.ratingsdata.repository.MultimediaPodcastsRepository;
import com.spglobal.ratings.ratingsdata.repository.MultimediaSectorRepository;

import lombok.extern.slf4j.Slf4j;

@Slf4j
@Service
public class MultimediaService {

	@Autowired
	MultimediaSectorRepository sectorRepo;

	@Autowired
	MultimediaPodcastsRepository podcastsRepo;

	public List<MultimediaSector> getSectorSubSecotrTree() throws Exception {
		return sectorRepo.findAll();
	}

	public List<MultimediaPodcasts> getVideosAndPodCasts(String fileType, Integer limit) throws Exception {
		if(ObjectUtils.isEmpty(limit)) {
			log.info("@MultimediaService --> getVideosAndPodCasts method fetch all data");
			return podcastsRepo.getMultimediaPodcasts(fileType);
		}else {
			log.info("@MultimediaService --> getVideosAndPodCasts method for dashboard");
			return podcastsRepo.getDashboardMultimediaData(fileType,Pageable.ofSize(limit));
		}
	}

}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\service\PeersEntityRatingsService.java

package com.spglobal.ratings.ratingsdata.service;

import java.util.List;

import org.springframework.stereotype.Service;

import com.spglobal.ratings.ratingsdata.entity.PeersEntityRatingsPublic;
import com.spglobal.ratings.ratingsdata.model.RatingHistoryData;

@Service
public interface PeersEntityRatingsService {
	
	public List<PeersEntityRatingsPublic> getPeersEntityRatings(RatingHistoryData ratingHistoryData,String authHeader); 	
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\service\PeersEntityRatingsServiceImpl.java

package com.spglobal.ratings.ratingsdata.service;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.spglobal.ratings.ratingsdata.dao.PeersEntityRatingsDao;
import com.spglobal.ratings.ratingsdata.entity.PeersEntityRatings;
import com.spglobal.ratings.ratingsdata.entity.PeersEntityRatingsPublic;
import com.spglobal.ratings.ratingsdata.model.RatingHistoryData;
import com.spglobal.ratings.ratingsdata.util.RatingsDataUtil;

import lombok.extern.slf4j.Slf4j;

@Service("peersEntityRatingsServiceImpl")
@Slf4j
public class PeersEntityRatingsServiceImpl implements PeersEntityRatingsService {

	@Autowired
	private RatingsDataUtil ratingsUtil;
	
	@Autowired
	private PeersEntityRatingsDao peersEntityRatingsDao;
	
	@Autowired
	private UserEntitlementCheckImpl userEntitlementCheck;
	
	public List<PeersEntityRatingsPublic> getPeersEntityRatings(RatingHistoryData ratingHistoryData,String authHeader) {
		
		log.info("@PeersEntityRatingsServiceImpl getPeersEntityRatings --> fetching rating history for entity: "
				+ ratingsUtil.sanitizeString(ratingHistoryData.getCommaSepOrgIds()));

		String[] orgIdsStrArray = null;
		List<PeersEntityRatingsPublic> peersEntityRatingsPublic = null;
		List<PeersEntityRatings> peersEntityRatingsPubOrPriv = null;
		
		String commaSepOrgIds = ratingHistoryData.getCommaSepOrgIds();
		Integer pcFlag = ratingHistoryData.getPcFlag();
		//Long snlId = ratingHistoryData.getKeyInstsn();
		Long capiqId = ratingHistoryData.getCapiqId();

		if (pcFlag == 0) {
			log.info("PCFlag is 0 calling the public daga");
			peersEntityRatingsPublic = getAllPublicRatings(commaSepOrgIds);

		} else if (pcFlag == 1) {

			Integer privConfOssCheck = null;
			Integer entityEntitlementCheck = null;
			
			Map<String, List<Long>> userEntitlement = new HashMap<>(
					userEntitlementCheck.entitlementChecksForUser(authHeader));

			//log.info("snlId-----"+snlId);
			log.info("capiq id-----"+capiqId);
			if (userEntitlement != null && capiqId != null) {
				
				privConfOssCheck = userEntitlementCheck.isUserEntitledToPrivateRatings(userEntitlement, authHeader);
				entityEntitlementCheck = userEntitlementCheck.isUserEntitledToEntity(capiqId, userEntitlement);
				
				log.info("privConfOssCheck-------::" + entityEntitlementCheck + "::---------");
				
				if (privConfOssCheck == 1 && entityEntitlementCheck == 1) {
					log.info("User is entitled to see private data-------::");
					orgIdsStrArray = commaSepOrgIds.split(",");
					log.info("orgIdsStrArray.length-----------" + orgIdsStrArray.length);
					List<Long> orgIdsLngArrayList = new ArrayList<Long>(orgIdsStrArray.length);
					for (int i = 1; i < orgIdsStrArray.length; i++) {// excluding home entity from the first place
						orgIdsLngArrayList.add(Long.parseLong(orgIdsStrArray[i]));
					}

					try {

						peersEntityRatingsPubOrPriv = peersEntityRatingsDao.getPeersEntityRatingsPubOrPriv(Long.parseLong(orgIdsStrArray[0]));
						
						List<PeersEntityRatingsPublic> peersPublicRatings = convertAsPeersEntityRatingsPub(
								peersEntityRatingsPubOrPriv);

						log.info("calling findByOrderedEntityIdsPublic for the enities-----------" + orgIdsLngArrayList);
						peersEntityRatingsPublic = peersEntityRatingsDao.getPeersEntityRatingsPublic(orgIdsLngArrayList);

						peersEntityRatingsPublic.addAll(peersPublicRatings);

					} catch (IllegalArgumentException iae) {
						log.error(
								"IllegalArgumentException @PeersEntityRatingsDao getPeersEntityRatings method --> Failed: {}",
								iae.getMessage());
					} catch (Exception e) {
						log.error("Exception @PeersEntityRatingsDao getPeersEntityRatings method --> Failed: {}",
								e.getMessage());
					}

					//adding back the home entity for sorting the response as per input
					orgIdsLngArrayList.add(0, Long.parseLong(orgIdsStrArray[0]));

					// sorting the result list based on the order of input entities
					if (peersEntityRatingsPublic != null && peersEntityRatingsPublic.size() > 0) {
						Collections.sort(peersEntityRatingsPublic,
								Comparator.comparing(item -> orgIdsLngArrayList.indexOf(item.getEntityId())));
					}
				}
				else {
					peersEntityRatingsPublic = getAllPublicRatings(commaSepOrgIds);
				}
			}
			else {
				peersEntityRatingsPublic = getAllPublicRatings(commaSepOrgIds);
			}
		}
		
		return peersEntityRatingsPublic;
	}
	
	
	/**
	 * method do to convert  PeersEntityRatings as PeersEntityRatingsPublic 
	 * @param peersEntityRatingsPubOrPriv
	 * @return
	 */
	private List<PeersEntityRatingsPublic> convertAsPeersEntityRatingsPub(
			List<PeersEntityRatings> peersEntityRatingsPubOrPriv) {

		List<PeersEntityRatingsPublic> list = new ArrayList<PeersEntityRatingsPublic>();
		PeersEntityRatingsPublic data = null;

		for (PeersEntityRatings src : peersEntityRatingsPubOrPriv) {

			data = new PeersEntityRatingsPublic();
			data.setCurrentRatingSymbol(src.getCurrentRatingSymbol());
			data.setRatingDate(src.getRatingDate());
			data.setRatingDetailId(src.getRatingDetailId());
			data.setEntityId(src.getEntityId());
			data.setRatingTypeCode(src.getRatingTypeCode());
			data.setDebtTypeCode(src.getDebtTypeCode());
			data.setConfidentialCategoryCode(src.getConfidentialCategoryCode());
			data.setLastReviewDate(src.getLastReviewDate());
			data.setLatestNonAffirmCWOLDate(src.getLatestNonAffirmCWOLDate());
			data.setDataAdminDate(src.getDataAdminDate());			
			data.setEntityLegalName(src.getEntityLegalName());			
			data.setLatestNonAffirmCWOL(src.getLatestNonAffirmCWOL());
			data.setAction(src.getAction());

			list.add(data);
		}
		return list;
	}

	/**
	 * method to get all public ratings
	 * @param commaSepOrgIds
	 * @return
	 */
	private List<PeersEntityRatingsPublic> getAllPublicRatings(String commaSepOrgIds) {
		String[] orgIdsStrArray = null;
		List<PeersEntityRatingsPublic> peersEntityRatingsPublic = null;

		orgIdsStrArray = commaSepOrgIds.split(",");
		List<Long> orgIdsLngArrayList = new ArrayList<Long>(orgIdsStrArray.length);
		for (int i = 0; i < orgIdsStrArray.length; i++) {// getting all
			orgIdsLngArrayList.add(Long.parseLong(orgIdsStrArray[i]));
		}
		try {

			log.info("calling findByOrderedEntityIdsPublic for----all entities-------" + orgIdsLngArrayList);
			peersEntityRatingsPublic = peersEntityRatingsDao.getPeersEntityRatingsPublic(orgIdsLngArrayList);

		} catch (IllegalArgumentException iae) {
			log.error(
					"IllegalArgumentException @PeersEntityRatingsDao getPeersEntityRatings method --> Failed: {}",
					iae.getMessage());
		} catch (Exception e) {
			log.error("Exception @PeersEntityRatingsDao getPeersEntityRatings method --> Failed: {}", e.getMessage());
		}
		
		
		// sorting the result list based on the order of input entities
		if (peersEntityRatingsPublic != null && peersEntityRatingsPublic.size() > 0) {
			Collections.sort(peersEntityRatingsPublic,
					Comparator.comparing(item -> orgIdsLngArrayList.indexOf(item.getEntityId())));
		}
		return peersEntityRatingsPublic;
	}
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\service\PeersManagementService.java

package com.spglobal.ratings.ratingsdata.service;

import java.util.List;
import java.util.Map;

import org.springframework.stereotype.Service;

import com.spglobal.ratings.ratingsdata.entity.UspfPeerPortfolioData;
import com.spglobal.ratings.ratingsdata.model.AnalystPeerVo;

@Service
public interface PeersManagementService {
	
	public List<AnalystPeerVo> getPeersById(Long coreId, String keyInstnId, String capiqId);
	
	public Map<String,Map<String,Map<String,List<UspfPeerPortfolioData>>>> getUspfPeerPortfolioContents(List<Long> asIds);

}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\service\PeersManagementServiceImpl.java

package com.spglobal.ratings.ratingsdata.service;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang3.ObjectUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.util.CollectionUtils;

import com.spglobal.ratings.ratingsdata.dao.PeersManagementDao;
import com.spglobal.ratings.ratingsdata.entity.AnalystPeerInfo;
import com.spglobal.ratings.ratingsdata.entity.UspfPeerPortfolioData;
import com.spglobal.ratings.ratingsdata.model.AnalystPeerVo;
import com.spglobal.ratings.ratingsdata.util.CharacterCheck;

import lombok.extern.slf4j.Slf4j;

@Slf4j
@Service("PeersConfigServiceImpl")
public class PeersManagementServiceImpl implements PeersManagementService {

	@Autowired
	private PeersManagementDao peersManagementDao;

	@Override
	public List<AnalystPeerVo> getPeersById(Long coreId, String keyInstnId, String capiqId) {
		log.info("@PeerManagmentServie getPeersById --> fetching analyst peers");

		List<AnalystPeerInfo> analystPeersList = null;
		List<AnalystPeerVo> analystPeerVoList = new ArrayList<AnalystPeerVo>();

		if(!ObjectUtils.isEmpty(keyInstnId) && !keyInstnId.isEmpty() && !CharacterCheck.checkNumeric(keyInstnId)){
			log.error("Exception: @PeerManagmentServie getPeersById  method --> Failed: {} KeyInstnId should be numeric");
			throw new RuntimeException("KeyInstnId should be numeric");
		}

		try {
			analystPeersList = peersManagementDao.getPeersById(coreId, keyInstnId, capiqId);
			if (!CollectionUtils.isEmpty(analystPeersList)) {
				analystPeerVoList = analystPeerInfoToAnalystPeerVo(analystPeersList);
			}

		} catch (Exception exception) {
			log.error("Exception: @PeerManagmentServie getPeersById  method --> Failed: {}", exception.getMessage());
			throw exception;
		}
		return analystPeerVoList;
	}

	public List<AnalystPeerVo> analystPeerInfoToAnalystPeerVo(List<AnalystPeerInfo> analystPeersList) {
		log.info("@PeerManagmentServie analystPeerInfoToAnalystPeerVo --> coverting Entity data into model data");
		
		List<AnalystPeerVo> analystPeerVoList = new ArrayList<AnalystPeerVo>();
		int idCount = 0;
		for (AnalystPeerInfo el : analystPeersList) {
			AnalystPeerVo data = new AnalystPeerVo();
			data.setFormOrder(el.getApFormOrder());
			data.setId(idCount++);
			data.setKeyInstance(el.getApKeyInstnId());
			data.setOidVendor(el.getApOidVendor());
			data.setCapIqId(el.getApCapiqId());
			analystPeerVoList.add(data);
		}
		return analystPeerVoList;
	}

	@Override
	public Map<String, Map<String, Map<String, List<UspfPeerPortfolioData>>>> getUspfPeerPortfolioContents(
			List<Long> asIds) {
		log.info("@PeerManagmentServie getUspfPeerPortfolioContents --> fetching portfolio data ");
		List<UspfPeerPortfolioData> portfolioCollateralDataList = null;
		portfolioCollateralDataList = peersManagementDao.getUspfPortfolioData(asIds);
		Collections.sort(portfolioCollateralDataList, Comparator.comparing(UspfPeerPortfolioData::getSortOrder));
		Map<String, Map<String, Map<String, List<UspfPeerPortfolioData>>>> map = new LinkedHashMap<>();
		portfolioCollateralDataList.stream()
		.forEach(portfolioObj -> map.computeIfAbsent(portfolioObj.getHeading(), k -> new LinkedHashMap<>())
				.computeIfAbsent(portfolioObj.getSubHeading(), k -> new LinkedHashMap<>())
				.computeIfAbsent(portfolioObj.getProductCaption(), k -> new ArrayList<>()).add(portfolioObj));
		return map;
	}
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\service\RatingArticlesPublicPvtService.java

package com.spglobal.ratings.ratingsdata.service;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang3.ObjectUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.spglobal.ratings.ratingsdata.dao.RatingArticlesPublicPvtDao;
import com.spglobal.ratings.ratingsdata.entity.RatingArticlesPublicPvt;
import com.spglobal.ratings.ratingsdata.entity.RatingArticlesPublicPvtPeers;
import com.spglobal.ratings.ratingsdata.model.PeersRatingArticlesPvtData;
import com.spglobal.ratings.ratingsdata.model.RatingArticlesData;
import com.spglobal.ratings.ratingsdata.model.RatingArticlesPeersData;
import com.spglobal.ratings.ratingsdata.model.RatingArticlesSearch;
import com.spglobal.ratings.ratingsdata.model.RatingArticlesSearchSSP;

import lombok.extern.slf4j.Slf4j;

@Service("ratingArticlesPublicPvtService")
@Slf4j
public class RatingArticlesPublicPvtService {
	
	@Autowired
	private RatingArticlesPublicPvtDao ratingArticlesDao;
	
	@Autowired
	private UserEntitlementCheckImpl userEntitlementCheck;
	
	public RatingArticlesData getRatingArticles(RatingArticlesSearch ratingArticlesSearch, Long capiqId, String authHeader) throws Exception {
		log.info("@RatingArticlesPublicPvtService getRatingArticles --> fetching articles: " + ratingArticlesSearch);
		if (ratingArticlesSearch == null) {
			log.error("IllegalArgumentException @RatingArticlesPublicPvtService getRatingArticles method --> Failed");
			throw new IllegalArgumentException("ratingArticlesSearch parameter should not be null");
		}

		RatingArticlesData ratingArticlesData = new RatingArticlesData();
		List<? extends RatingArticlesPublicPvt> ratingArticles = null;
		Integer privConfOssCheck = null;
		Integer entityEntitlementCheck = null;
		Map<String,List<Long>> userEntitlement = new HashMap<>(userEntitlementCheck.entitlementChecksForUser(authHeader));
		try {
			if(userEntitlement != null) {
				privConfOssCheck = userEntitlementCheck.isUserEntitledToPrivateRatings(userEntitlement, authHeader);
				entityEntitlementCheck = userEntitlementCheck.isUserEntitledToEntity(capiqId, userEntitlement);
				if(privConfOssCheck == 1 && entityEntitlementCheck == 1) {
					ratingArticles = ratingArticlesDao.getRatingArticles(ratingArticlesSearch);
					for (RatingArticlesPublicPvt ra: ratingArticles) {
						if(ra.getConfidentialityInd().equals("N") && ra.getConfidentialCategoryCode() == null) {
							ra.setConfidentialCategoryCode("Public");
						} else if(ra.getConfidentialityInd().equals("Y") && ra.getConfidentialCategoryCode().equals("CIR")) {
							ra.setConfidentialCategoryCode("Confidential(CIR)");
						} else if(ra.getConfidentialityInd().equals("Y") && ra.getConfidentialCategoryCode().equals("PVT")) {
							ra.setConfidentialCategoryCode("Private");
						}
					}
					ratingArticlesData.setRatingArticles(ratingArticles);
					ratingArticlesData.setMessage("success");
				} else {
					ratingArticlesData.setMessage("The User is not entitiled to view non-public articles for entity");
				}
			}
		} catch (Exception exception) {
			log.error("Exception @RatingArticlesService getRatingArticles method --> Failed: {}", exception.getMessage());
			throw exception;
		}

		return ratingArticlesData;
	}
	
	public RatingArticlesData getDashboardRatingArticles(String entityId, String countryCode, Long capiqId, String authHeader) throws Exception {
		log.info("@RatingArticlesPublicPvtService getDashboardRatingArticles --> fetching articles: " + entityId);
		if (entityId == null) {
			log.error("IllegalArgumentException @RatingArticlesPublicPvtService getDashboardRatingArticles method --> Failed");
			throw new IllegalArgumentException("ratingArticlesSearch parameter should not be null");
		}

		RatingArticlesData ratingArticlesData = new RatingArticlesData();
		List<? extends RatingArticlesPublicPvt> ratingArticles = null;
		Integer privConfOssCheck = null;
		Integer entityEntitlementCheck = null;
		Map<String,List<Long>> userEntitlement = new HashMap<>(userEntitlementCheck.entitlementChecksForUser(authHeader));
		try {
			if(userEntitlement != null) {
				privConfOssCheck = userEntitlementCheck.isUserEntitledToPrivateRatings(userEntitlement, authHeader);
				entityEntitlementCheck = userEntitlementCheck.isUserEntitledToEntity(capiqId, userEntitlement);
				if(privConfOssCheck == 1 && entityEntitlementCheck == 1) {
					ratingArticles = ratingArticlesDao.getDashboardRatingArticles(entityId, countryCode);
					for (RatingArticlesPublicPvt ra: ratingArticles) {
						if(ra.getConfidentialityInd().equals("N") && ra.getConfidentialCategoryCode() == null) {
							ra.setConfidentialCategoryCode("Public");
						} else if(ra.getConfidentialityInd().equals("Y") && ra.getConfidentialCategoryCode().equals("CIR")) {
							ra.setConfidentialCategoryCode("Confidential(CIR)");
						} else if(ra.getConfidentialityInd().equals("Y") && ra.getConfidentialCategoryCode().equals("PVT")) {
							ra.setConfidentialCategoryCode("Private");
						}
					}
					ratingArticlesData.setRatingArticles(ratingArticles);
					ratingArticlesData.setMessage("success");
				} else {
					ratingArticlesData.setMessage("The User is not entitiled to view non-public articles for entity");
				}
			}
		} catch (Exception exception) {
			log.error("Exception @RatingArticlesService getRatingArticles method --> Failed: {}", exception.getMessage());
			throw exception;
		}

		return ratingArticlesData;
	}
	
	public RatingArticlesPeersData getPeersRatingArticles(RatingArticlesSearchSSP ratingArticlesSearch, Long entityId, Long capiqId, String authHeader) throws Exception {
		log.info("@RatingArticlesPublicPvtService getPeersRatingArticles --> fetching articles: " + ratingArticlesSearch);
		if (ratingArticlesSearch == null) {
			log.error("IllegalArgumentException @RatingArticlesPublicPvtService getPeersRatingArticles method --> Failed");
			throw new IllegalArgumentException("@getPeersRatingArticles ratingArticlesSearchSSP parameter should not be null");
		}
		if(ObjectUtils.isEmpty(capiqId)){
			log.error("IllegalArgumentException @RatingArticlesPublicPvtService getPeersRatingArticles method --> Failed");
			throw new IllegalArgumentException("@getPeersRatingArticles ratingArticlesSearchSSP parameter should not be null");
		}
		
		RatingArticlesPeersData ratingArticlesData = new RatingArticlesPeersData();
		List<? extends RatingArticlesPublicPvtPeers> ratingArticles = null;
		Integer privConfOssCheck = null;
		Integer entityEntitlementCheck = null;
		Map<String,List<Long>> userEntitlement = new HashMap<>(userEntitlementCheck.entitlementChecksForUser(authHeader));
		try {
			if(userEntitlement != null) {
				privConfOssCheck = userEntitlementCheck.isUserEntitledToPrivateRatings(userEntitlement, authHeader);
				entityEntitlementCheck = userEntitlementCheck.isUserEntitledToEntity(capiqId, userEntitlement);
				if(privConfOssCheck == 1 && entityEntitlementCheck == 1) {
					ratingArticles = ratingArticlesDao.getPeersRatingArticles(ratingArticlesSearch);
					
					List<Long> peerEntities = new ArrayList<Long>();
					for (int i = 0; i < ratingArticlesSearch.getEntityIds().size(); i++) {
						peerEntities.add(ratingArticlesSearch.getEntityIds().get(i));
					}
					if(!peerEntities.isEmpty()) {
						//excluding home entity from peer entities
						peerEntities.removeIf(p -> p.equals(entityId));
						//excluding pvt/conf docs for peers
						ratingArticles.removeIf(peers -> peerEntities.contains(peers.getEntityId()) && peers.getConfidentialityInd().equals("Y"));
					}
					
					for (RatingArticlesPublicPvtPeers ra: ratingArticles) {
						if(ra.getConfidentialityInd().equals("N") && ra.getConfidentialCategoryCode() == null) {
							ra.setConfidentialCategoryCode("Public");
						} else if(ra.getConfidentialityInd().equals("Y") && ra.getConfidentialCategoryCode().equals("CIR")) {
							ra.setConfidentialCategoryCode("Confidential(CIR)");
						} else if(ra.getConfidentialityInd().equals("Y") && ra.getConfidentialCategoryCode().equals("PVT")) {
							ra.setConfidentialCategoryCode("Private");
						}
					}
					ratingArticlesData.setRatingArticles(ratingArticles);
					ratingArticlesData.setMessage("success");
				} else {
					ratingArticlesData.setMessage("The User is not entitiled to view non-public articles for entity");
				}
			}
		} catch (Exception exception) {
			log.error("Exception @RatingArticlesPublicPvtService getPeersRatingArticles method --> Failed ::", exception.getMessage());
			throw exception;
		}

		return ratingArticlesData;
	}
	
	public Long getPeersRatingArticlesTotalCount(RatingArticlesSearchSSP ratingArticlesSearch) throws Exception {
		log.info("@RatingArticlesPublicPvtService getPeersRatingArticlesTotalCount --> fetching articles: " + ratingArticlesSearch);
		if (ratingArticlesSearch == null) {
			log.error("IllegalArgumentException @RatingArticlesPublicPvtService getPeersRatingArticlesTotalCount method --> Failed");
			throw new IllegalArgumentException("@getPeersRatingArticlesTotalCount ratingArticlesSearchSSP parameter should not be null");
		}
		
		Long ratingArticlesCount = null;
		try {
			ratingArticlesCount = ratingArticlesDao.getPeersRatingArticlesTotalCount(ratingArticlesSearch);
		} catch (Exception exception) {
			log.error("Exception @RatingArticlesPublicPvtService getPeersRatingArticlesTotalCount method --> Failed ::", exception.getMessage());
			throw exception;
		}

		return ratingArticlesCount;
	}
	
	public PeersRatingArticlesPvtData getPeersRatingArticlesCount(RatingArticlesSearchSSP ratingArticlesSearch, Long entityId) throws Exception {
		log.info("@RatingArticlesPublicPvtService getPeersRatingArticlesTotalCount --> fetching articles: " + ratingArticlesSearch);
		if (ratingArticlesSearch == null) {
			log.error("IllegalArgumentException @RatingArticlesPublicPvtService getPeersRatingArticlesTotalCount method --> Failed");
			throw new IllegalArgumentException("@getPeersRatingArticlesTotalCount ratingArticlesSearchSSP parameter should not be null");
		}
		
		PeersRatingArticlesPvtData ratingArticlesPvtData = new PeersRatingArticlesPvtData();
		List<? extends RatingArticlesPublicPvtPeers> ratingArticles = null;
		try {
			ratingArticles = ratingArticlesDao.getPeersRatingArticlesForCount(ratingArticlesSearch);
			List<Long> peerEntities = new ArrayList<Long>();
			for (int i = 0; i < ratingArticlesSearch.getEntityIds().size(); i++) {
				peerEntities.add(ratingArticlesSearch.getEntityIds().get(i));
			}
			if(!peerEntities.isEmpty()) {
				// excluding home entity from peer entities
				peerEntities.removeIf(p -> p.equals(entityId));
				//excluding pvt/conf docs for peers
				ratingArticles.removeIf(peers -> peerEntities.contains(peers.getEntityId()) && peers.getConfidentialityInd().equals("Y"));
			}
			ratingArticlesPvtData.setRatingArticlesCount(Long.valueOf(ratingArticles.size()));
			ratingArticlesPvtData.setPcData(ratingArticles.stream().anyMatch(peers -> ("Y").equals(peers.getConfidentialityInd())));
		} catch (Exception exception) {
			log.error("Exception @RatingArticlesPublicPvtService getPeersRatingArticlesTotalCount method --> Failed ::", exception.getMessage());
			throw exception;
		}

		return ratingArticlesPvtData;
	}

}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\service\RatingArticlesService.java

package com.spglobal.ratings.ratingsdata.service;

import java.util.List;

import com.spglobal.ratings.ratingsdata.model.RatingArticlesDetailSearch;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.spglobal.ratings.ratingsdata.dao.RatingArticlesDao;
import com.spglobal.ratings.ratingsdata.entity.RatingArticleTypes;
import com.spglobal.ratings.ratingsdata.entity.RatingArticles;
import com.spglobal.ratings.ratingsdata.model.RatingArticlesSearch;
import com.spglobal.ratings.ratingsdata.model.RatingArticlesSearchSSP;

import lombok.extern.slf4j.Slf4j;

@Slf4j
@Service("ratingArticlesService")
public class RatingArticlesService {
	
	@Autowired
	private RatingArticlesDao ratingArticlesDao;

	public List<RatingArticleTypes> getRatingArticlesTypes(List<Long> articleTypeIds) throws Exception {
		log.info("@RatingArticlesService getRatingArticlesTypes --> fetching article types for articleTypeIds: " + articleTypeIds);
		if (articleTypeIds == null) {
			log.error("IllegalArgumentException @RatingArticlesService getRatingArticlesTypes method --> Failed");
			throw new IllegalArgumentException("articleTypeIds parameter should not be null");
		}

		List<RatingArticleTypes> ratingArticleTypes = null;
		try {
			if(articleTypeIds != null && articleTypeIds.size() > 0) {
				ratingArticleTypes = ratingArticlesDao.getRatingArticlesTypes(articleTypeIds);
			}
		} catch (Exception exception) {
			log.error("Exception @RatingArticlesService getRatingArticlesTypes method --> Failed: {}", exception.getMessage());
			throw exception;
		}

		return ratingArticleTypes;
	}

	public List<? extends RatingArticles> getRatingArticles(RatingArticlesDetailSearch ratingArticlesDetailSearch) throws Exception {
		log.info("@RatingArticlesService getRatingArticles --> fetching articles: " + ratingArticlesDetailSearch);
		if (ratingArticlesDetailSearch == null) {
			log.error("IllegalArgumentException @RatingArticlesService getRatingArticles method --> Failed");
			throw new IllegalArgumentException("ratingArticlesSearch parameter should not be null");
		}

		List<? extends RatingArticles> ratingArticles = null;
		try {
			ratingArticles = ratingArticlesDao.getPublicRatingArticles(ratingArticlesDetailSearch);
		} catch (Exception exception) {
			log.error("Exception @RatingArticlesService getRatingArticles method --> Failed: {}", exception.getMessage());
			throw exception;
		}

		return ratingArticles;
	}

	public List<?> getRatingArticlesSSP(RatingArticlesSearchSSP ratingArticlesSearch) throws Exception {
		log.info("@RatingArticlesService getRatingArticles --> fetching articles: " + ratingArticlesSearch);
		if (ratingArticlesSearch == null) {
			log.error("IllegalArgumentException @RatingArticlesService getRatingArticlesSSP method --> Failed");
			throw new IllegalArgumentException("ratingArticlesSearchSSP parameter should not be null");
		}
		
		List<?> ratingArticles = null;
		try {
			ratingArticles = ratingArticlesDao.getPublicRatingArticlesSSP(ratingArticlesSearch);
		} catch (Exception exception) {
			log.error("Exception @RatingArticlesService getRatingArticles method --> Failed: {}", exception.getMessage());
			throw exception;
		}

		return ratingArticles;
	}
	
	public Long getPublicRatingArticlesSSPTotalCount(RatingArticlesSearchSSP ratingArticlesSearch) throws Exception {
		log.info("@RatingArticlesService getRatingArticles --> fetching articles: " + ratingArticlesSearch);
		if (ratingArticlesSearch == null) {
			log.error("IllegalArgumentException @RatingArticlesService getRatingArticlesSSP method --> Failed");
			throw new IllegalArgumentException("ratingArticlesSearchSSP parameter should not be null");
		}
		
		Long ratingArticlesCount = null;
		try {
			ratingArticlesCount = ratingArticlesDao.getPublicRatingArticlesSSPTotalCount(ratingArticlesSearch);
		} catch (Exception exception) {
			log.error("Exception @RatingArticlesService getRatingArticles method --> Failed: {}", exception.getMessage());
			throw exception;
		}

		return ratingArticlesCount;
	}
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\service\RatingCriteriaArticlesService.java

package com.spglobal.ratings.ratingsdata.service;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

import com.spglobal.ratings.ratingsdata.config.AppConfig;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.core.ParameterizedTypeReference;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;

import com.spglobal.ratings.ratingsdata.dao.DeriveRatingDao;
import com.spglobal.ratings.ratingsdata.dao.RatingCriteriaArticlesDao;
import com.spglobal.ratings.ratingsdata.entity.DeriveRating;
import com.spglobal.ratings.ratingsdata.entity.RatingCriteriaArticles;
import com.spglobal.ratings.ratingsdata.entity.RatingCriteriaArticlesPrivate;
import com.spglobal.ratings.ratingsdata.entity.RatingCriteriaArticlesPublic;
import com.spglobal.ratings.ratingsdata.model.RPMCriteria;
import com.spglobal.ratings.ratingsdata.util.RCAConstants;
import com.spglobal.ratings.ratingsdata.util.RestApiUtil;

import lombok.extern.slf4j.Slf4j;

@Slf4j
@Service("ratingCriteriaArticlesService")
public class RatingCriteriaArticlesService {

	@Autowired
	private RatingCriteriaArticlesDao ratingCriteriaArticlesDao;

	@Autowired
	private DeriveRatingDao deriveRatingDao;

	@Autowired
	private RestApiUtil restApiUtil;
	
	@Autowired
	private UserEntitlementCheckImpl userEntitlementCheck;

	@Autowired
	private AppConfig appConfig;

	public List<? extends RatingCriteriaArticles> getRatingCriteriaArticles(Long capiqId, Long ratingDetailId, boolean confidential, HttpHeaders httpHeaders) throws Exception {
		log.info("@RatingCriteriaArticlesService getRatingCriteriaArticles --> fetching articles for ratingDetailId: " + ratingDetailId);
		if (ratingDetailId == null) {
			log.error("IllegalArgumentException @RatingCriteriaArticlesService getRatingCriteriaArticles method --> Failed");
			throw new IllegalArgumentException("ratingDetailId parameter should not be null");
		}
		if (capiqId == null) {
			log.error("IllegalArgumentException @RatingCriteriaArticlesService getRatingCriteriaArticles method --> Failed");
			throw new IllegalArgumentException("Capiq parameter should not be null");
		}

		if (httpHeaders == null) {
			log.error("IllegalArgumentException @RatingCriteriaArticlesService getRatingCriteriaArticles method --> Failed");
			throw new IllegalArgumentException("HttpHeaders parameter should not be null");
		}

		List<? extends RatingCriteriaArticles> ratingCriteriaArticles = null;
		try {
			if(confidential) {
				ratingCriteriaArticles = getRatingCriteriaConfidentialArticles(capiqId, ratingDetailId, httpHeaders);
			} else {
				ratingCriteriaArticles = getRatingCriteriaPublicArticles(capiqId, ratingDetailId);
			}
		} catch (Exception exception) {
			log.error("Exception @RatingCriteriaArticlesService getRatingCriteriaArticles method --> Failed: {}", exception.getMessage());
			throw exception;
		}

		return ratingCriteriaArticles;
	}

	public List<RatingCriteriaArticlesPublic> getRatingCriteriaPublicArticles(Long capiqId, Long ratingDetailId) throws Exception {
		List<RatingCriteriaArticlesPublic> ratingCriteriaArticles = null;
		try {
			ratingCriteriaArticles = ratingCriteriaArticlesDao.getArticlesByRatingDetailId(ratingDetailId);
		} catch (Exception exception) {
			log.error("Exception @RatingCriteriaArticlesService getRatingCriteriaPublicArticles method --> Failed: {}", exception.getMessage());
			throw exception;
		}
		return ratingCriteriaArticles;
	}

	public List<RatingCriteriaArticlesPrivate> getRatingCriteriaConfidentialArticles(
			Long capiqId, Long ratingDetailId, HttpHeaders httpHeaders) throws Exception {
		List<RatingCriteriaArticlesPrivate> ratingCriteriaArticles = new ArrayList<RatingCriteriaArticlesPrivate>();
		String authorizationHeader = restApiUtil.getAuthorizationToken(httpHeaders);
		try {
			Map<String, List<Long>> userEntitlement = userEntitlementCheck.entitlementChecksForUser(authorizationHeader);
			Integer privConfOssCheck = userEntitlementCheck.isUserEntitledToPrivateRatings(userEntitlement, authorizationHeader);
			Integer entityEntitlementCheck = userEntitlementCheck.isUserEntitledToEntity(capiqId, userEntitlement);
			if (privConfOssCheck != 1 || entityEntitlementCheck != 1) {
				throw new Exception("User/Entity Entitlement is not authorized to get confidetial articles");
			}
			
			DeriveRating deriveRating = deriveRatingDao.getDeriveRatingByRatingDetailId(ratingDetailId);
			if (deriveRating != null && deriveRating.getWorkObjectId() != null) {

				Map<String, Object> rpmHeaders = new HashMap<String, Object>();
				rpmHeaders.put(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON);
				rpmHeaders.put(HttpHeaders.AUTHORIZATION, authorizationHeader);
				rpmHeaders.put(RCAConstants.SOURCE, RCAConstants.LINX);
				rpmHeaders.put(RCAConstants.LANGUAGE, RCAConstants.ENGLISH);
				rpmHeaders.put(RCAConstants.PUBDATE_FORMAT, RCAConstants.PUBDATE_FORMAT_VALUE);
				rpmHeaders.put(RCAConstants.APPLICATION, RCAConstants.RPM);
				rpmHeaders.put(RCAConstants.IS_CRITERIA_NON_PUBLIC, RCAConstants.TRUE);

				Map<String, Object> rpmParams = new HashMap<String, Object>();
				rpmParams.put(RCAConstants.JOBIDS_IN_CLAUSE, "'" + deriveRating.getWorkObjectId() + "'");

				ResponseEntity<List<RPMCriteria>> rpmResponse = restApiUtil.<List<RPMCriteria>>fetchApiContent(
						HttpMethod.POST, rpmHeaders, appConfig.getRpmGenerateCriteriaUrl(), rpmParams, new ParameterizedTypeReference<List<RPMCriteria>>() {});
				if (rpmResponse != null && rpmResponse.getBody() != null && rpmResponse.getBody().size() > 0) {
					log.info("RPM Job GenerateCriteriaList service response: " + rpmResponse.getStatusCode());
					List<Long> sourceObjectIds = rpmResponse.getBody().stream()
							.map(rpmCriteria -> rpmCriteria.getLinxId()).map(Long::parseLong).collect(Collectors.toList());
					if (sourceObjectIds != null && sourceObjectIds.size() > 0) {
						ratingCriteriaArticles = ratingCriteriaArticlesDao.getArticlesBySourceObjectIds(sourceObjectIds);
					}
				}
			}
		} catch (Exception exception) {
			log.error("Exception @RatingCriteriaArticlesService getRatingCriteriaConfidentialArticles method --> Failed: {}", exception.getMessage());
			throw exception;
		}
		return ratingCriteriaArticles;
	}
	
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\service\RatingHistoryLastTenYrsService.java

package com.spglobal.ratings.ratingsdata.service;

import java.util.List;

import org.springframework.stereotype.Service;

import com.spglobal.ratings.ratingsdata.entity.PeersCurrentRatings;
import com.spglobal.ratings.ratingsdata.entity.RatingHistoryLastTenYrsPublic;
import com.spglobal.ratings.ratingsdata.model.RatingHistoryData;

@Service
public interface RatingHistoryLastTenYrsService {
	
	public List<RatingHistoryLastTenYrsPublic> getRatingHistoryLastTenYrs(RatingHistoryData ratingHistoryData,String authHeader); 	
	public List<PeersCurrentRatings> getPeersCurrentRatings(String commaSepOrgIds);
		
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\service\RatingHistoryLastTenYrsServiceImpl.java

package com.spglobal.ratings.ratingsdata.service;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang3.ObjectUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.util.CollectionUtils;

import com.spglobal.ratings.ratingsdata.dao.PeersCurrentRatingsDao;
import com.spglobal.ratings.ratingsdata.dao.RatingHistoryLastTenYrsDao;
import com.spglobal.ratings.ratingsdata.entity.PeersCurrentRatings;
import com.spglobal.ratings.ratingsdata.entity.RatingHistoryLastTenYrs;
import com.spglobal.ratings.ratingsdata.entity.RatingHistoryLastTenYrsPublic;
import com.spglobal.ratings.ratingsdata.model.RatingHistoryData;
import com.spglobal.ratings.ratingsdata.util.RatingsDataUtil;

import lombok.extern.slf4j.Slf4j;

@Service("ratingHistoryLastTenYrsService")
@Slf4j
public class RatingHistoryLastTenYrsServiceImpl implements RatingHistoryLastTenYrsService{

	@Autowired
	private RatingsDataUtil ratingsUtil;
	
	@Autowired
	private RatingHistoryLastTenYrsDao ratingHistoryLastTenYrsDao;
	
	@Autowired
	private PeersCurrentRatingsDao peersCurrentRatingsDao;
	
	@Autowired
	private UserEntitlementCheckImpl userEntitlementCheck;
	
	public List<RatingHistoryLastTenYrsPublic> getRatingHistoryLastTenYrs(RatingHistoryData ratingHistoryData,String authHeader) {
		
		log.info("@RatingHistoryLastTenYrsServiceImpl getRatingHistoryLastTenYrs --> fetching rating history for entity: "
				+ ratingsUtil.sanitizeString(ratingHistoryData.getCommaSepOrgIds()));

		String[] orgIdsStrArray = null;
		List<RatingHistoryLastTenYrsPublic> ratingHistoryLastTenYrsPublic = null;
		List<RatingHistoryLastTenYrs> ratingHistoryLastTenYrsPubOrPriv = null;
		
		String commaSepOrgIds = ratingHistoryData.getCommaSepOrgIds();
		Integer pcFlag = ratingHistoryData.getPcFlag();
		//Long snlId = ratingHistoryData.getKeyInstsn();
		Long capiqId = ratingHistoryData.getCapiqId();

		if (pcFlag == 0) {
			log.info("PCFlag is 0 calling the public daga");
			ratingHistoryLastTenYrsPublic = getAllPublicRatings(commaSepOrgIds);

		} else if (pcFlag == 1) {

			Integer privConfOssCheck = null;
			Integer entityEntitlementCheck = null;
			
			Map<String, List<Long>> userEntitlement = new HashMap<>(
					userEntitlementCheck.entitlementChecksForUser(authHeader));

			log.info("capiqId-----"+capiqId);
			
			if (userEntitlement != null && capiqId != null) {
				
				privConfOssCheck = userEntitlementCheck.isUserEntitledToPrivateRatings(userEntitlement, authHeader);
				entityEntitlementCheck = userEntitlementCheck.isUserEntitledToEntity(capiqId, userEntitlement);
				
				log.info("privConfOssCheck-------::" + entityEntitlementCheck + "::---------");
				
				if (privConfOssCheck == 1 && entityEntitlementCheck == 1) {
					log.info("User is entitled to see private data-------::");
					orgIdsStrArray = commaSepOrgIds.split(",");
					log.info("orgIdsStrArray.length-----------" + orgIdsStrArray.length);
					List<Long> orgIdsLngArrayList = new ArrayList<Long>();
					for (int i = 1; i < orgIdsStrArray.length; i++) {// excluding home entity from the first place
						if(ObjectUtils.isNotEmpty(orgIdsStrArray[i]) && orgIdsStrArray[i].trim().length() > 0) {
							orgIdsLngArrayList.add(Long.parseLong(orgIdsStrArray[i]));
						}
					}

					if(!CollectionUtils.isEmpty(orgIdsLngArrayList) && ObjectUtils.isNotEmpty(orgIdsStrArray[0]) && orgIdsStrArray[0].trim().length() > 0) {
						try {

							ratingHistoryLastTenYrsPubOrPriv = ratingHistoryLastTenYrsDao.getRatingHistLastTenYrsPubOrPriv(Long.parseLong(orgIdsStrArray[0]));
							
							List<RatingHistoryLastTenYrsPublic> peersPublicRatings = convertAsRatingHistoryLastTenYrsPub(
									ratingHistoryLastTenYrsPubOrPriv);

							log.info("calling findByOrderedEntityIdsPublic for the enities-----------" + orgIdsLngArrayList);
							ratingHistoryLastTenYrsPublic = ratingHistoryLastTenYrsDao.getRatingHistLastTenYrsPublic(orgIdsLngArrayList);

							ratingHistoryLastTenYrsPublic.addAll(peersPublicRatings);

						} catch (IllegalArgumentException iae) {
							log.error(
									"IllegalArgumentException @RatingHistoryLastTenYrsDao getRatingHistoryLastTenYrs method --> Failed: {}",
									iae.getMessage());
						} catch (Exception e) {
							log.error("Exception @RatingHistoryLastTenYrsDao getRatingHistoryLastTenYrs method --> Failed: {}",
									e.getMessage());
						}

						if(ObjectUtils.isNotEmpty(orgIdsStrArray[0]) && orgIdsStrArray[0].trim().length() > 0) {
							//adding back the home entity for sorting the response as per input
							orgIdsLngArrayList.add(0, Long.parseLong(orgIdsStrArray[0]));
						}

						// sorting the result list based on the order of input entities
						if (ratingHistoryLastTenYrsPublic != null && ratingHistoryLastTenYrsPublic.size() > 0) {
							Collections.sort(ratingHistoryLastTenYrsPublic,
									Comparator.comparing(item -> orgIdsLngArrayList.indexOf(item.getEntityId())));
						}	
					}
				}
				else {
					ratingHistoryLastTenYrsPublic = getAllPublicRatings(commaSepOrgIds);
				}
			}
			else {
				ratingHistoryLastTenYrsPublic = getAllPublicRatings(commaSepOrgIds);
			}
		}
		
		return ratingHistoryLastTenYrsPublic;
	}
	
	public List<PeersCurrentRatings> getPeersCurrentRatings(String commaSepOrgIds) {
		log.info("@PeersCurrentRatingsImpl getPeersCurrentRatings for entity: " +ratingsUtil.sanitizeString(commaSepOrgIds));
		
		List<PeersCurrentRatings> PeersCurrentRatingsList = peersCurrentRatingsDao.getPeersCurrentRatings(commaSepOrgIds);
		return PeersCurrentRatingsList;
	}
	
	
	/**
	 * method do to convert  RatingHistoryLastTenYrs as RatingHistoryLastTenYrsPublic 
	 * @param ratingHistLastTenYrsPubOrPriv
	 * @return
	 */
	private List<RatingHistoryLastTenYrsPublic> convertAsRatingHistoryLastTenYrsPub(
			List<RatingHistoryLastTenYrs> ratingHistLastTenYrsPubOrPriv) {

		List<RatingHistoryLastTenYrsPublic> list = new ArrayList<RatingHistoryLastTenYrsPublic>();
		RatingHistoryLastTenYrsPublic data = null;

		for (RatingHistoryLastTenYrs src : ratingHistLastTenYrsPubOrPriv) {

			data = new RatingHistoryLastTenYrsPublic();
			data.setCurrentRatingSymbol(src.getCurrentRatingSymbol());
			data.setEntityName(src.getEntityName());
			data.setRatingDate(src.getRatingDate());
			data.setRatingDetailId(src.getRatingDetailId());
			data.setRatingTypeSortorder(src.getRatingTypeSortorder());
			data.setEntityId(src.getEntityId());
			data.setRatingTypeDesc(src.getRatingTypeDesc());
			data.setRatingTypeCode(src.getRatingTypeCode());
			data.setDebtTypeDesc(src.getDebtTypeDesc());
			data.setDebtTypeCode(src.getDebtTypeCode());
			data.setConfidentialCategoryCode(src.getConfidentialCategoryCode());
			data.setConfidentialCategoryDesc(src.getConfidentialCategoryDesc());

			list.add(data);
		}
		return list;
	}

	/**
	 * method to get all public ratings
	 * @param commaSepOrgIds
	 * @return
	 */
	private List<RatingHistoryLastTenYrsPublic> getAllPublicRatings(String commaSepOrgIds) {
		String[] orgIdsStrArray = null;
		List<RatingHistoryLastTenYrsPublic> ratingHistoryLastTenYrsPublic = null;

		orgIdsStrArray = commaSepOrgIds.split(",");
		List<Long> orgIdsLngArrayList = new ArrayList<Long>(orgIdsStrArray.length);
		for (int i = 0; i < orgIdsStrArray.length; i++) {// getting all
			if(ObjectUtils.isNotEmpty(orgIdsStrArray[i])) {
				try {
					orgIdsLngArrayList.add(Long.parseLong(orgIdsStrArray[i]));
				} catch (NumberFormatException nfe) {
					// No need to log as error
					log.info("Input error on getAllPublicRatings {}", nfe.getLocalizedMessage());
				}
			}
		}
		try {

			log.info("calling findByOrderedEntityIdsPublic for----all entities-------" + orgIdsLngArrayList);
			ratingHistoryLastTenYrsPublic = ratingHistoryLastTenYrsDao.getRatingHistLastTenYrsPublic(orgIdsLngArrayList);

		} catch (IllegalArgumentException iae) {
			log.error(
					"IllegalArgumentException @RatingHistoryLastTenYrsDao getRatingHistoryLastTenYrs method --> Failed: {}",
					iae.getMessage());
		} catch (Exception e) {
			log.error("Exception @RatingHistoryLastTenYrsDao getRatingHistoryLastTenYrs method --> Failed: {}", e.getMessage());
		}

		// sorting the result list based on the order of input entities
		if (!CollectionUtils.isEmpty(ratingHistoryLastTenYrsPublic)) {
			Collections.sort(ratingHistoryLastTenYrsPublic,
					Comparator.comparing(item -> orgIdsLngArrayList.indexOf(item.getEntityId())));
		}
		return ratingHistoryLastTenYrsPublic;
	}
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\service\ReconciliationRatingService.java

package com.spglobal.ratings.ratingsdata.service;

import java.util.List;

import com.spglobal.ratings.ratingsdata.model.ReconciliationData;
import com.spglobal.ratings.ratingsdata.model.ReconciliationResponseData;

public interface ReconciliationRatingService {

	List<ReconciliationData> getReconciliationRatingDetails(Long coreId, String periodType, String trgCurrency);
	List<ReconciliationData> getCustomReconciliationRatingDetails(Long coreId, List<String> periodIds, String trgCurrency);
	ReconciliationResponseData getReconciliationRatingDetailsV2(Long coreId, String periodType, String trgCurrency);
	ReconciliationResponseData getCustomReconciliationRatingDetailsV2(Long coreId, List<String> periodIds,
			String trgCurrency);
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\service\ReconciliationRatingServiceImpl.java

package com.spglobal.ratings.ratingsdata.service;

import java.util.ArrayList;
import java.util.Comparator;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

import org.apache.commons.lang3.ObjectUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.util.CollectionUtils;

import com.spglobal.ratings.ratingsdata.dao.ReconciliationRatingDao;
import com.spglobal.ratings.ratingsdata.model.ReconciliationData;
import com.spglobal.ratings.ratingsdata.model.ReconciliationPartiuclarPeriodData;
import com.spglobal.ratings.ratingsdata.model.ReconciliationPeriodData;
import com.spglobal.ratings.ratingsdata.model.ReconciliationResponseData;
import com.spglobal.ratings.ratingsdata.util.FinancialRatingColumn;
import com.spglobal.ratings.ratingsdata.util.RatingsDataConstant;

@Service
public class ReconciliationRatingServiceImpl implements ReconciliationRatingService {

	@Autowired
	ReconciliationRatingDao reconcialationRatingDao;

	@Autowired
	CurrencyExchangeRateService currencyExchangeRateService;

	@Override
	public List<ReconciliationData> getReconciliationRatingDetails(Long coreId, String periodType, String trgCurrency) {
		if (ObjectUtils.isNotEmpty(periodType) && RatingsDataConstant.QUARTERLY.equalsIgnoreCase(periodType)) {
			List<ReconciliationData> quartelyReconData = reconcialationRatingDao
					.getReconciliationQuartelyRatingDetails(coreId);
			List<ReconciliationData> convertedFinData = getCurrencyConvertedData(quartelyReconData, trgCurrency);
			this.addTargetCurrency(convertedFinData, trgCurrency);
			return convertedFinData;
		} else {
			List<ReconciliationData> yearlyReconData = reconcialationRatingDao
					.getReconciliationYearlyRatingDetails(coreId);
			List<ReconciliationData> convertedFinData = getCurrencyConvertedData(yearlyReconData, trgCurrency);
			this.addTargetCurrency(convertedFinData, trgCurrency);
			return convertedFinData;
		}
	}

	@Override
	public ReconciliationResponseData getReconciliationRatingDetailsV2(Long coreId, String periodType, String trgCurrency) {
		if (ObjectUtils.isNotEmpty(periodType) && RatingsDataConstant.QUARTERLY.equalsIgnoreCase(periodType)) {
			List<ReconciliationData> quartelyReconData = reconcialationRatingDao
					.getReconciliationQuartelyRatingDetails(coreId);
			List<ReconciliationData> convertedFinData = getCurrencyConvertedData(quartelyReconData, trgCurrency);
			ReconciliationResponseData resp = this.addTargetCurrencyV2(convertedFinData, trgCurrency);
			return resp;
		} else {
			List<ReconciliationData> yearlyReconData = reconcialationRatingDao
					.getReconciliationYearlyRatingDetails(coreId);
			List<ReconciliationData> convertedFinData = getCurrencyConvertedData(yearlyReconData, trgCurrency);
			ReconciliationResponseData resp = this.addTargetCurrencyV2(convertedFinData, trgCurrency);
			return resp;
		}
	}

	@Override
	public List<ReconciliationData> getCustomReconciliationRatingDetails(Long coreId, List<String> periodIds, String trgCurrency) {
		List<ReconciliationData> reconData = reconcialationRatingDao.getCustomReconciliationRatingDetails(coreId,
				periodIds);
		List<ReconciliationData> convertedFinData = getCurrencyConvertedData(reconData, trgCurrency);
		this.addTargetCurrency(convertedFinData, trgCurrency);
		return convertedFinData;
	}

	@Override
	public ReconciliationResponseData getCustomReconciliationRatingDetailsV2(Long coreId, List<String> periodIds, String trgCurrency) {
		List<ReconciliationData> reconData = reconcialationRatingDao.getCustomReconciliationRatingDetails(coreId,
				periodIds);
		List<ReconciliationData> convertedFinData = getCurrencyConvertedData(reconData, trgCurrency);
		ReconciliationResponseData resp = this.addTargetCurrencyV2(convertedFinData, trgCurrency);
		return resp;
	}

	private void addTargetCurrency(List<ReconciliationData> request, String trgCurrency) {
		if (!CollectionUtils.isEmpty(request)) {
			for (ReconciliationData v1 : request) {
				String trgtCurrency = RatingsDataConstant.REPORTED_CURRENCIES.equalsIgnoreCase(trgCurrency)
						? v1.getReportedCurrency()
						: trgCurrency;
				v1.setTrgCurrency(trgtCurrency);
			}
		}
	}

    private ReconciliationResponseData addTargetCurrencyV2(List<ReconciliationData> request, String trgCurrency) {
		ReconciliationResponseData data = new ReconciliationResponseData();
		if (!CollectionUtils.isEmpty(request)) {
			for (ReconciliationData v1 : request) {
				String trgtCurrency = RatingsDataConstant.REPORTED_CURRENCIES.equalsIgnoreCase(trgCurrency)
						? v1.getReportedCurrency()
						: trgCurrency;
				data.setCoreId(v1.getCoreId());
				data.setDataSource(v1.getDataSource());
				data.setMagnitude(v1.getMagnitude());
				data.setMagnitudeMultipler(v1.getMagnitudeMultiplier());
				data.setTrgCurrency(trgtCurrency);

				String finPeriodId = v1.getFinPeriodId();
				Map<String, ReconciliationPeriodData> finalValue = CollectionUtils.isEmpty(data.getPeriodData()) ? new HashMap<>() : data.getPeriodData();
				if(!finalValue.containsKey(finPeriodId)) {
					ReconciliationPeriodData periodData = new ReconciliationPeriodData();
					periodData.setFinPeriodId(v1.getFinPeriodId());
					periodData.setFiscalYear(v1.getFiscalYear());
					periodData.setPeriodStartDate(v1.getPeriodStartDate());
					periodData.setPeriodEndDate(v1.getPeriodEndDate());
					periodData.setPeriodTypeCD(v1.getPeriodTypeCD());
					periodData.setReportedCurrency(v1.getReportedCurrency());
					periodData.setPeriodState(v1.getPeriodState());
					periodData.setCsdLastUpdate(v1.getCsdLastUpdate());
					finalValue.put(finPeriodId, periodData);
				}

				ReconciliationPeriodData value = finalValue.get(finPeriodId);
				ArrayList<ReconciliationPartiuclarPeriodData> dataValue = CollectionUtils.isEmpty(value.getData()) ? new ArrayList<>() : value.getData();
				ReconciliationPartiuclarPeriodData reconPeriodData = new ReconciliationPartiuclarPeriodData();
				reconPeriodData.setDataElementCd(v1.getDataElementCd());
				reconPeriodData.setDataPointValue(v1.getDataPointValue());
				reconPeriodData.setFileName_DataPointName(v1.getFileName_DataPointName());
				reconPeriodData.setFinDataPointId(v1.getFinDataPointId());
				reconPeriodData.setFormOrder(v1.getFormOrder());
				reconPeriodData.setSectionName(v1.getSectionName());

				dataValue.add(reconPeriodData);
				value.setData(dataValue);
				finalValue.put(finPeriodId, value);
				finalValue = finalValue.entrySet().stream().sorted(Map.Entry.comparingByKey(Comparator.reverseOrder()))
					    .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue,
					        (oldValue, newValue) -> oldValue, LinkedHashMap::new));
				data.setPeriodData(finalValue);
			}

		}
		return data;
	}

	private List<ReconciliationData> getCurrencyConvertedData(List<ReconciliationData> reconData, String trgCurrency) {
		if (CollectionUtils.isEmpty(reconData)) {
			return reconData;
		}

		if (RatingsDataConstant.REPORTED_CURRENCIES.equalsIgnoreCase(trgCurrency)) {
			return currencyExchangeRateService.getReconDataMagnitudeConvertForRC(reconData);
		} else {
			return this.getCurrencyConversion(reconData, trgCurrency);
		}
	}

	private List<ReconciliationData> getCurrencyConversion(List<ReconciliationData> reconData,
			String trgCurrency) {
		Map<String, Map<String, Double>> convertedReconData = new HashMap<String, Map<String, Double>>();
		/*
		 * Get different Source and target currency code Recon periods to apply the
		 * Currency conversion and Magnitude multiplier
		 */
		Map<String, Map<String, Double>> reconMnemonicValues = reconData.stream().filter(
				s -> !s.getReportedCurrency().equalsIgnoreCase(trgCurrency) && s.getMagnitude().equalsIgnoreCase(FinancialRatingColumn.FIN_MAGNITUDE_VAL))
				.collect(Collectors.groupingBy(ReconciliationData::getFinPeriodId,
						Collectors.toMap(ReconciliationData::getDataElementCd, ReconciliationData::getDataPointValue)));

		Map<String, Map<String, Double>> currencyConvertedFinData = currencyExchangeRateService
				.getCurrencyMagnitudeConvertedFinData(reconMnemonicValues, trgCurrency);

		convertedReconData.putAll(currencyConvertedFinData);

		/*
		 * Get same Source and target currency code recon periods to apply the Magnitude
		 * multiplier only
		 */
		Map<String, Map<String, Double>> reconMnemonicValues1 = reconData.stream().filter(
				s -> s.getReportedCurrency().equalsIgnoreCase(trgCurrency) && s.getMagnitude().equalsIgnoreCase(FinancialRatingColumn.FIN_MAGNITUDE_VAL))
				.collect(Collectors.groupingBy(ReconciliationData::getFinPeriodId,
						Collectors.toMap(ReconciliationData::getDataElementCd, ReconciliationData::getDataPointValue)));

		Map<String, Map<String, Double>> magnitudeConvertedFinData = currencyExchangeRateService
				.getMagnitudeConvertedFinData(reconMnemonicValues1, trgCurrency);

		// Combine both of them
		convertedReconData.putAll(magnitudeConvertedFinData);

		// Overwrite the financial data point values
		if (convertedReconData.size() > 0) {
			for (ReconciliationData reconDataElement : reconData) {
				Map<String, Double> dataElementValue = convertedReconData.get(reconDataElement.getFinPeriodId());
				if (!CollectionUtils.isEmpty(dataElementValue)) {
					Double elementValue = dataElementValue.get(reconDataElement.getDataElementCd());
					if (!ObjectUtils.isEmpty(elementValue)) {
						reconDataElement.setDataPointValue(elementValue);
					}
				}
			}
		}
		return reconData;
	}

}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\service\ScoresAndModifiersPublicService.java

package com.spglobal.ratings.ratingsdata.service;

import java.util.ArrayList;
import java.util.List;

import com.spglobal.ratings.ratingsdata.util.RatingsDataConstant;
import org.apache.commons.lang3.ObjectUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.spglobal.ratings.ratingsdata.dao.ScoresAndModifiersPublicDao;
import com.spglobal.ratings.ratingsdata.entity.PeerSuppliersPortfolioContents;
import com.spglobal.ratings.ratingsdata.entity.ScoresAndModifiersPublic;
import com.spglobal.ratings.ratingsdata.entity.UspfPeerSuppliersPortfolioContents;
import com.spglobal.ratings.ratingsdata.model.EntitiesPayload;
import com.spglobal.ratings.ratingsdata.model.StateAndProvince;
import com.spglobal.ratings.ratingsdata.model.UspfFilterData;
import com.spglobal.ratings.ratingsdata.model.UspfFilterDropdownData;
import com.spglobal.ratings.ratingsdata.util.RatingsDataUtil;

import lombok.extern.slf4j.Slf4j;

@Service("scoresAndModifiersPublicService")
@Slf4j
public class ScoresAndModifiersPublicService {
    
    @Autowired
    private RatingsDataUtil ratingsUtil;
    
    @Autowired
    private ScoresAndModifiersPublicDao scoresAndModifiersDao;

    @Autowired
    private ScoresAndModifiersService scoresAndModifiersService;

    public List<ScoresAndModifiersPublic> getScoresAndModifiers(String entityId, String subsector) {
        log.info("@ScoresAndModifiersPublicService getScoresAndModifiers for entity: " +ratingsUtil.sanitizeString(entityId.toString()));

        List<ScoresAndModifiersPublic> scoresAndModifiers = scoresAndModifiersDao.getScoresAndModifiers(entityId, subsector.toUpperCase());
        if(scoresAndModifiers != null && scoresAndModifiers.size() >0 ) {
        	for(ScoresAndModifiersPublic scores : scoresAndModifiers) {
            	if(scores.getAnalyticCaseType().equals("SOV")) {
            		String scoreValueDesc = scores.getScoreValueDesc();
            		scores.setScoreValueDesc(scores.getScoreValue());
            		scores.setScoreValue(scoreValueDesc);
            	}
            }
        }
        return (scoresAndModifiers != null && scoresAndModifiers.size() >0) ? scoresAndModifiers : null;
    }
    public List<ScoresAndModifiersPublic> getPeerScoresAndModifiers(EntitiesPayload entities){
        List<ScoresAndModifiersPublic> scoresAndModifiers = new ArrayList<ScoresAndModifiersPublic>();
        if(entities!= null) {
            log.info("@ScoresAndModifiersPublicService getPeerScoresAndModifiers for entities: ");

            List<String> commaSepEntities = entities.getEntityIds();
            String subSector = entities.getSubSector();
            Integer pcFlag = entities.getPcFlag();
            String homeEntity = entities.getHomeEntity();

            if (commaSepEntities != null && commaSepEntities.size() > 0) {
                log.info("@ScoresAndModifiersPublicService commaSepEntities: ");
                List<ScoresAndModifiersPublic> pvtScoresAndModifiers = new ArrayList<ScoresAndModifiersPublic>();
                if(pcFlag.equals(1))
                {
                    log.info("@ScoresAndModifiersPublicService Private Entity");
                    commaSepEntities.remove(homeEntity);
                    log.info("Removing home entity"+ ratingsUtil.sanitizeString(commaSepEntities.toString()));
                }

                scoresAndModifiers = scoresAndModifiersDao.getPeerScoresAndModifiers(commaSepEntities, subSector);
                if (subSector != null && subSector.equals("SOV")) {
                    for (ScoresAndModifiersPublic sm : scoresAndModifiers) {
                        if (sm.getAnalyticCaseType() != null && sm.getAnalyticCaseType().equals("SOV")) {
                            String scoreValueDesc = sm.getScoreValueDesc();
                            sm.setScoreValueDesc(sm.getScoreValue());
                            sm.setScoreValue(scoreValueDesc);
                        }
                    }
                }
            } else{
                scoresAndModifiers = null;
            }
        }

        return scoresAndModifiers;
    }

    public List<PeerSuppliersPortfolioContents> getPeerSuppliersPortfolioContents(List<String> keyInstnIds, List<String> capiqIds, List<String> entityIds) {
    	List<PeerSuppliersPortfolioContents> peerSupplierPortfolioContents = new ArrayList<PeerSuppliersPortfolioContents>();
        if(ObjectUtils.isNotEmpty(entityIds)){
            log.info("@ScoresAndModifiersPublicService getPeerSuppliersPortfolioContents for PortfolioContents: " +ratingsUtil.sanitizeString(entityIds.toString()));
            return scoresAndModifiersDao.getPeerSuppliersPortfolioContents(RatingsDataConstant.COREID_STR, entityIds);
        }else
        if(ObjectUtils.isNotEmpty(capiqIds)){
            log.info("@ScoresAndModifiersPublicService getPeerSuppliersPortfolioContents for PortfolioContents: " +ratingsUtil.sanitizeString(capiqIds.toString()));
            return scoresAndModifiersDao.getPeerSuppliersPortfolioContents(RatingsDataConstant.CAPIQ_STR, capiqIds);
        }else
        if(ObjectUtils.isNotEmpty(keyInstnIds)){
            log.info("@ScoresAndModifiersPublicService getPeerSuppliersPortfolioContents for PortfolioContents: " +ratingsUtil.sanitizeString(keyInstnIds.toString()));
            return scoresAndModifiersDao.getPeerSuppliersPortfolioContents(RatingsDataConstant.SNL_STR, keyInstnIds);
        }else{
            return peerSupplierPortfolioContents;
        }
	}
    
	public List<UspfPeerSuppliersPortfolioContents> getUspfPeerSuppliersPortfolioContents(
			UspfFilterData uspfFilterData) {
		log.info("@ScoresAndModifiersPublicService getUspfPeerSuppliersPortfolioContents for PortfolioContents: ");
		List<UspfPeerSuppliersPortfolioContents> uspfPeerSupplierPortfolioContents = new ArrayList<UspfPeerSuppliersPortfolioContents>();
		uspfPeerSupplierPortfolioContents = scoresAndModifiersDao.getUspfPeerSuppliersPortfolioContents(uspfFilterData);
		return uspfPeerSupplierPortfolioContents;
	}
	
	public List<UspfPeerSuppliersPortfolioContents> getUspfPeersPortfolioData(
			List<Long> asIds) {
		log.info("@ScoresAndModifiersPublicService getUspfPeersPortfolioData for edit Portfolio Contents: ");
		List<UspfPeerSuppliersPortfolioContents> uspfPeerSupplierPortfolioContents = new ArrayList<UspfPeerSuppliersPortfolioContents>();
		uspfPeerSupplierPortfolioContents = scoresAndModifiersDao.getUspfPeersPortfolioData(asIds);
		return uspfPeerSupplierPortfolioContents;
	}
	
	public UspfFilterDropdownData getuspfPeersFiltersData() {
		log.info("@ScoresAndModifiersPublicService getuspfPeersFiltersData for uspfPeersFiltersData: ");
		UspfFilterDropdownData uspfFilterDropdownData = new UspfFilterDropdownData();
		uspfFilterDropdownData = scoresAndModifiersDao.getuspfPeersFiltersData();
		return uspfFilterDropdownData;
	}
	
	public StateAndProvince getStateAndProvinceData() {
		log.info("@ScoresAndModifiersPublicService getStateAndProvinceData for states and provices data: ");
		return scoresAndModifiersDao.getStateAndProvinceData();
	}
}




C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\service\ScoresAndModifiersService.java

package com.spglobal.ratings.ratingsdata.service;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.spglobal.ratings.ratingsdata.dao.ScoresAndModifiersDao;
import com.spglobal.ratings.ratingsdata.entity.ScoresAndModifiers;
import com.spglobal.ratings.ratingsdata.util.RatingsDataUtil;

import lombok.extern.slf4j.Slf4j;

@Service("scoresAndModifiersService")
@Slf4j
public class ScoresAndModifiersService {
	
	@Autowired
	private RatingsDataUtil ratingsUtil;
	
	@Autowired
	private ScoresAndModifiersDao scoresAndModifiersDao;
	
	@Autowired
	private UserEntitlementCheckImpl userEntitlementCheck;
	
	public List<ScoresAndModifiers> getScoresAndModifiers(String entityId, String subSector, Long capiqId, String authHeader) {
		log.info("@ScoresAndModifiersService getScoresAndModifiers --> fetch scores and modifiers for entity: " +ratingsUtil.sanitizeString(entityId.toString()) +
				"with subsector: " +ratingsUtil.sanitizeString(subSector));
		
		List<ScoresAndModifiers> scores = null;
		Integer privConfOssCheck = null;
		Integer entityEntitlementCheck = null;
		Map<String,List<Long>> userEntitlement = new HashMap<>(userEntitlementCheck.entitlementChecksForUser(authHeader));
		if(userEntitlement != null) {
			privConfOssCheck = userEntitlementCheck.isUserEntitledToPrivateRatings(userEntitlement, authHeader);
			entityEntitlementCheck = userEntitlementCheck.isUserEntitledToEntity(capiqId, userEntitlement);
			if(privConfOssCheck == 1 && entityEntitlementCheck == 1) {
				scores = scoresAndModifiersDao.getScoresAndModifiers(entityId, subSector.toUpperCase());
				for(ScoresAndModifiers sm: scores) {
					if(sm.getAnalyticCaseType() != null && sm.getAnalyticCaseType().equals("SOV")) {
	            		String scoreValueDesc = sm.getScoreValueDesc();
	            		sm.setScoreValueDesc(sm.getScoreValue());
	            		sm.setScoreValue(scoreValueDesc);
	            	}
					if(sm.getConfidentialInd() != null && sm.getConfidentialInd().equals("N") && sm.getConfidentialCategoryCode() == null) {
						sm.setConfidentialCategoryCode("Public");
					} else if(sm.getConfidentialInd() != null && sm.getConfidentialInd().equals("Y") && sm.getConfidentialCategoryCode() != null && sm.getConfidentialCategoryCode().equals("CIR")) {
						sm.setConfidentialCategoryCode("Confidential(CIR)");
					} else if(sm.getConfidentialInd() != null && sm.getConfidentialInd().equals("Y") && sm.getConfidentialCategoryCode() != null && sm.getConfidentialCategoryCode().equals("PVT")) {
						sm.setConfidentialCategoryCode("Private");
					}
				}
			}
		}
		return (scores != null && scores.size() > 0) ? scores : null;
	}

}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\service\SectorResearchService.java

package com.spglobal.ratings.ratingsdata.service;

import java.util.ArrayList;
import java.util.List;
import java.util.Arrays;

import com.spglobal.ratings.ratingsdata.util.RatingsDataConstant;
import org.apache.commons.lang3.ObjectUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.spglobal.ratings.ratingsdata.entity.RatingDistRatingCodesEntity;
import com.spglobal.ratings.ratingsdata.entity.RatingDistIndustryEntity;
import com.spglobal.ratings.ratingsdata.entity.RatingDistGeoEntity;
import com.spglobal.ratings.ratingsdata.entity.SectorsArticleEntity;
import com.spglobal.ratings.ratingsdata.entity.SectorsEntity;
import com.spglobal.ratings.ratingsdata.entity.SectorsGeographyEntity;
import com.spglobal.ratings.ratingsdata.entity.RatingDistICRTotalsEntity;


import com.spglobal.ratings.ratingsdata.repository.SectorsGeographyRepository;
import com.spglobal.ratings.ratingsdata.repository.SectorsRepository;
import com.spglobal.ratings.ratingsdata.repository.SectorsArticleRepository;
import com.spglobal.ratings.ratingsdata.repository.RatingDistRatingCodesRepository;
import com.spglobal.ratings.ratingsdata.repository.RatingDistIndustryRepository;
import com.spglobal.ratings.ratingsdata.repository.RatingDistGeoRepository;
import com.spglobal.ratings.ratingsdata.repository.RatingDistICRTotalsRepository;

import java.time.LocalDate;
import java.time.format.DateTimeFormatter;

import lombok.extern.slf4j.Slf4j;

@Slf4j
@Service
public class SectorResearchService {


	@Autowired
	SectorsRepository sectorsRepository;

	@Autowired
	SectorsGeographyRepository sectorsGeographyRepository;
	
	@Autowired
	SectorsArticleRepository sectorsArticleRepository;
	
	@Autowired
	RatingDistRatingCodesRepository ratingDistRatingCodesRepository;
	
	@Autowired
	RatingDistIndustryRepository ratingDistIndustryRepository;
	
	@Autowired
	RatingDistGeoRepository ratingDistGeoRepository;
	
	@Autowired
	RatingDistICRTotalsRepository ratingDistICRTotalsRepository;
	
	public List<SectorsEntity> getSectors() {
	return sectorsRepository.findAll();
	}

	public List<SectorsGeographyEntity> getSectorsGeography() {
		return sectorsGeographyRepository.findAll();
	}

	public List<SectorsArticleEntity> getSectorsArticleBySubject(Long subject) throws Exception {
		log.info("SectorsArticleRepository getSectorsArticleBySubject method:--> calling service for sectors");
		return sectorsArticleRepository.findBySubject(subject);
	}

	public List<SectorsArticleEntity> getSectorsArticle(Long subject, List<String> subSectorCode, List<String> industryCode, List<String> regionCode, String fromArticleDate, String toArticleDate) throws Exception {
		log.info("SectorsArticleRepository getSectorsArticle method:- calling service for sectors");

		// pre-process the subsector/industry code mapping
		if (subSectorCode!=null && !ObjectUtils.isEmpty(subSectorCode) && subSectorCode.contains("STRUC") ) {
			convertIndustryToSubsector ("STRUC", subSectorCode, industryCode, new String[] { "ABCP","ABS","CMBS","REC","RMBS","SE","CDO" });		    
		}
		
		if (subSectorCode!=null &&  !ObjectUtils.isEmpty(subSectorCode) && subSectorCode.contains("INFRA")) {
			convertIndustryToSubsector ("INFRA", subSectorCode, industryCode, new String[] { "IFOG","IFIPF","IFOTHER","IFP","IFPJD","IFSOC","IFTR","IFU" });				
		}

		if (subSectorCode!=null &&  !ObjectUtils.isEmpty(subSectorCode) && subSectorCode.contains("GOVS")) {
			convertIndustryToSubsector ("GOVS", subSectorCode, industryCode, new String[] { "GOVS","SOVR","SOV" });
		}		
		
		List<String> uspfCode = new ArrayList<String>();
		String uspfSubSector="NONE";

		if (subSectorCode!=null && subSectorCode.contains("PUBFIN")) {
			uspfSubSector =  convertPubFinance ("PUBFIN", subSectorCode, uspfCode, industryCode, new String[] { "2602","2120", "9002","7078","2705","8003","2605","9051","9052" });
		}
						
		String subSectorCodeStr;
		if (ObjectUtils.isEmpty(subSectorCode) || subSectorCode==null){
			subSectorCodeStr = null;
		}else{
			subSectorCodeStr = subSectorCode.toString();
		}
		//System.out.println("subSectorCodeStr : " +subSectorCodeStr);
		String industryCodeStr;
		if (ObjectUtils.isEmpty(industryCode) || industryCode==null){
			industryCodeStr = null;
		}else{
			industryCodeStr = industryCode.toString();
		}
		//System.out.println("***industryCodeStr : " +industryCodeStr);
		String regionCodeStr;
		if (ObjectUtils.isEmpty(regionCode) || regionCode==null){
			regionCodeStr = null;
		}else{
			regionCodeStr = regionCode.toString();
		}
		//System.out.println("regionCodeStr : " +regionCodeStr);		
		String uspfCodeStr;
		if (ObjectUtils.isEmpty(uspfCode) ){
			uspfCodeStr = null;
		}else{
			uspfCodeStr = uspfCode.toString();
		}
		toArticleDate = addDay(toArticleDate);
		return sectorsArticleRepository.findBySubject(subject, subSectorCode, subSectorCodeStr, industryCode, industryCodeStr, regionCode, regionCodeStr, uspfCode, uspfCodeStr,fromArticleDate, toArticleDate, uspfSubSector);
	}
	
	public List<SectorsArticleEntity> getAllArticle() throws Exception {
		log.info("SectorsArticleRepository getAllArticle method: calling service for sectors");
		return sectorsArticleRepository.findAll();
	}

	
	private void convertIndustryToSubsector (String subsector, List<String> subSectorCode,List<String> industryCode, String[] allsubsectors) {
		List<String> flatSubSectors = new ArrayList<String> (Arrays.asList(allsubsectors));
		boolean bExistOne = false;
		if (industryCode!=null && !ObjectUtils.isEmpty(industryCode)) {
			for (String s: flatSubSectors) {
			    if (industryCode.contains(s) ) {
	            	subSectorCode.add(s);
	            	industryCode.remove(s);
	            	if (!bExistOne) {
	            		bExistOne = true;
	            	}
			    }
			}
		}	
		if (!bExistOne) {
			subSectorCode.addAll(flatSubSectors);
		}
		subSectorCode.remove(subsector);
		
	}
	
	private String convertPubFinance (String subsector,List<String> subSectorCode, List<String> uspfCode, List<String> industryCode, String[] allsubsectors ) {
		
		List<String> uspfSubSectors = new ArrayList<String> (Arrays.asList(allsubsectors));
		if (industryCode!=null && !ObjectUtils.isEmpty(industryCode)) {
			for (String s: uspfSubSectors) {
			    if (industryCode.contains(s) ) {
			    	uspfCode.add(s);
	            	industryCode.remove(s);
			    }
			}
		}	
		
		String uspfSubSector=subsector;
		subSectorCode.remove(subsector);
		if (ObjectUtils.isEmpty(subSectorCode)) { 
			subSectorCode.add("NONE");				
		}
		
		return uspfSubSector;
	}
	
	private String addDay(String toDate) {
		String newDate=null;
		if (toDate!=null) {
	        	DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd-MMM-yyyy"); 
	        	LocalDate date = LocalDate.parse(toDate, formatter);
	        	newDate = formatter.format (date.plusDays(1));
		}
		return newDate;
	}
	
	public List<SectorsArticleEntity> getAllArticleFilter(List<String> subSectorCode, List<String> industryCode, List<String> regionCode, String fromArticleDate, String toArticleDate, Long maxArtciles) throws Exception {
		log.info("SectorsArticleRepository getAllArticleFilter method:- calling service for sectors");
		
		// pre-process the subsector/industry code mapping
		if (subSectorCode!=null && !ObjectUtils.isEmpty(subSectorCode) && subSectorCode.contains("STRUC") ) {
			convertIndustryToSubsector ("STRUC", subSectorCode, industryCode, new String[] { "ABCP","ABS","CMBS","REC","RMBS","SE","CDO" });		    
		}
		
		if (subSectorCode!=null &&  !ObjectUtils.isEmpty(subSectorCode) && subSectorCode.contains("INFRA")) {
			convertIndustryToSubsector ("INFRA", subSectorCode, industryCode, new String[] { "IFOG","IFIPF","IFOTHER","IFP","IFPJD","IFSOC","IFTR","IFU" });
		}

		if (subSectorCode!=null &&  !ObjectUtils.isEmpty(subSectorCode) && subSectorCode.contains("GOVS")) {
			convertIndustryToSubsector ("GOVS", subSectorCode, industryCode, new String[] { "GOVS","SOVR","SOV" });
		}
		
		
		List<String> uspfCode = new ArrayList<String>();
		String uspfSubSector="NONE";

		if (subSectorCode!=null && subSectorCode.contains("PUBFIN")) {			
			uspfSubSector =  convertPubFinance ("PUBFIN", subSectorCode, uspfCode, industryCode, new String[] { "2602","2120", "9002","7078","2705","8003","2605","9051","9052" });
		}
		
		String subSectorCodeStr;
		if (ObjectUtils.isEmpty(subSectorCode) || subSectorCode==null){
			subSectorCodeStr = null;
		}else{
			subSectorCodeStr = subSectorCode.toString();
		}
		//System.out.println("subSectorCodeStr : " +subSectorCodeStr);

		String industryCodeStr;
		if (ObjectUtils.isEmpty(industryCode) || industryCode==null){
			industryCodeStr = null;
		}else{
			industryCodeStr = industryCode.toString();
		}
		//System.out.println("**** industryCodeStr : " +industryCodeStr);
		String regionCodeStr;
		if (ObjectUtils.isEmpty(regionCode) || regionCode==null){
			regionCodeStr = null;
		}else{
			regionCodeStr = regionCode.toString();
		}
		//System.out.println("regionCodeStr : " +regionCodeStr);
		
		String uspfCodeStr;

		if (ObjectUtils.isEmpty(uspfCode) ){
			uspfCodeStr = null;

		}else{
			uspfCodeStr = uspfCode.toString();
		}
		
		toArticleDate = addDay(toArticleDate);
		List<SectorsArticleEntity> results=null;
		if (maxArtciles==null) {
			results = sectorsArticleRepository.findByAllArticleFilter(subSectorCode, subSectorCodeStr, industryCode, industryCodeStr, regionCode, regionCodeStr, uspfCode, uspfCodeStr, fromArticleDate, toArticleDate, uspfSubSector);
		}
		else {
			results = sectorsArticleRepository.findByAllArticleFilterLimited(subSectorCode, subSectorCodeStr, industryCode, industryCodeStr, regionCode, regionCodeStr, uspfCode, uspfCodeStr, fromArticleDate, toArticleDate, uspfSubSector, maxArtciles.longValue());
		}	
		
		return results;
	}
	
	public List<RatingDistRatingCodesEntity> getRatingDistRatingCodes() throws Exception {
		log.info("ratingDistRatingCodesRepository getRatingDistRatingCodes method: calling service for distributions");
		return ratingDistRatingCodesRepository.findAll();
	}
	
	public List<RatingDistIndustryEntity> getRatingDistIndustryList() throws Exception {
		log.info("ratingDistIndustryRepository getRatingDistIndustryList method: calling service for distributions");
		return ratingDistIndustryRepository.findAll();
	}
	
	public List<RatingDistGeoEntity> getRatingDistGeoList() throws Exception {
		log.info("ratingDistGeoRepository getRatingDistGeoList method: calling service for distributions");
		return ratingDistGeoRepository.findAll();
	}
	
	public List<RatingDistICRTotalsEntity> getICRTotalsByGeoAndSectors(String countriesCSVlist, String regionsCSVlist, List<String> sectorList,List<String> symbolList) throws Exception {
		log.info("ratingDistICRTotalsRepository getICRTotalsByGeo method: calling service for distributions");
		List<RatingDistICRTotalsEntity> totals=ratingDistICRTotalsRepository.findICRTotalsByGeoAndSectors(countriesCSVlist, regionsCSVlist, sectorList, sectorList==null?null:sectorList.toString());
		if (symbolList!=null && symbolList.size()>0) {
			List<String> filteroutSymbols = new ArrayList<String> (Arrays.asList("AAA","AA+","AA","AA-","A+","A","A-","BBB+","BBB","BBB-","BB+","BB","BB-","B+","B","B-","CCC+","CCC","CCC-","CC","C","SD","D"));
			filteroutSymbols.removeAll(symbolList);
			for (RatingDistICRTotalsEntity e : totals) {
				e.setNA(filteroutSymbols);
			}
		}
		
		return totals;
	}


	public List<SectorsArticleEntity> getDashboardSectorResearchArticles(String subSectorCode, Integer limit) throws Exception {
		log.info("@SectorResearchService -- getDashBoardSectorResearchArticles --> {}");
		if (ObjectUtils.isEmpty(limit)){
			limit = RatingsDataConstant.DEFAULT_SECTOR_RESCH_ARTICLE;
		}
		return sectorsArticleRepository.getDashboardSectorArticles(subSectorCode,limit);
	}
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\service\SovereignResearchService.java

package com.spglobal.ratings.ratingsdata.service;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.cache.annotation.Cacheable;
import org.springframework.stereotype.Service;
import org.springframework.util.ObjectUtils;

import com.spglobal.ratings.ratingsdata.entity.SovereignBICRAScores;
import com.spglobal.ratings.ratingsdata.entity.SovereignCountryEntity;
import com.spglobal.ratings.ratingsdata.entity.SovereignCountrySummary;
import com.spglobal.ratings.ratingsdata.entity.SovereignDashboard;
import com.spglobal.ratings.ratingsdata.entity.SovereignFSIICRA;
import com.spglobal.ratings.ratingsdata.entity.SovereignFSMajorFactors;
import com.spglobal.ratings.ratingsdata.entity.SovereignPeerBICRAScores;
import com.spglobal.ratings.ratingsdata.entity.SovereignResearchRatingDistribution;
import com.spglobal.ratings.ratingsdata.entity.SovereignRiskEntity;
import com.spglobal.ratings.ratingsdata.entity.SovereignTopFiveFinInst;
import com.spglobal.ratings.ratingsdata.repository.SovereignBICRAScoreRepository;
import com.spglobal.ratings.ratingsdata.repository.SovereignCountryRepository;
import com.spglobal.ratings.ratingsdata.repository.SovereignDashboadRepository;
import com.spglobal.ratings.ratingsdata.repository.SovereignFSIICRARepository;
import com.spglobal.ratings.ratingsdata.repository.SovereignFSMajorFactorsRepository;
import com.spglobal.ratings.ratingsdata.repository.SovereignPeerBICRARepository;
import com.spglobal.ratings.ratingsdata.repository.SovereignResearchRatingDistributionRepository;
import com.spglobal.ratings.ratingsdata.repository.SovereignRiskRepository;
import com.spglobal.ratings.ratingsdata.repository.SovereignSummaryRepository;
import com.spglobal.ratings.ratingsdata.repository.SovereignTopFiveFinInstnsepo;
import com.spglobal.ratings.ratingsdata.util.RatingsDataConstant;
import com.spglobal.ratings.ratingsdata.util.RedisConstants;

import lombok.extern.slf4j.Slf4j;

@Slf4j
@Service
public class SovereignResearchService {

	@Autowired
	SovereignSummaryRepository sovSummaryRepo;
	
	@Autowired
	SovereignCountryRepository sovCountryRepo;
	
	@Autowired
	SovereignRiskRepository sovRiskRepo;
	
	@Autowired
	SovereignTopFiveFinInstnsepo topfiveBICRARepo;
	
	@Autowired
	SovereignBICRAScoreRepository bicraScoreRepo;
	
	@Autowired
	SovereignPeerBICRARepository peerbicraScoreRepo;
	
	@Autowired
	SovereignFSMajorFactorsRepository majorFactorRepo;
	
	@Autowired
	SovereignFSIICRARepository iicraRepo;
	
	@Autowired
	SovereignDashboadRepository dashboardRepo;
	
	@Autowired
	SovereignResearchRatingDistributionRepository sovResearchRatingDistributionRepo;

	@Cacheable(value=RedisConstants.SOV_SUMMARY_CACHE, unless = "#result.isEmpty()")
	public List<SovereignCountrySummary> getSovereignCountrySummary(String countryCode) throws Exception {
		log.info("@SovereignResearchService -- getSovereignCountrySummary from DB");
		List<SovereignCountrySummary> sovSummary = sovSummaryRepo.findByCountryCode(countryCode);
		return sovSummary;
	}
	
	@Cacheable(value=RedisConstants.SOV_COUNTRY_CACHE,  unless = "#result.isEmpty()")
	public List<SovereignCountryEntity> getSovereignCountries() throws Exception {
		log.info("@SovereignResearchService -- getSovereignCountries from DB");
		return sovCountryRepo.getCountryList();
	}

	@Cacheable(value="SOV_RISK_IND",  unless = "#result.isEmpty()")
	public List<SovereignRiskEntity> getSovereignRiskIndicatorsData(String country) throws Exception {
		return sovRiskRepo.findByCountryCode(country);
	}

	public List<SovereignTopFiveFinInst> getTopFiveFinInsData(String country) throws Exception {
		return topfiveBICRARepo.findByCountryCode(country);
	}
	
	public List<SovereignBICRAScores> getBICRAScores(String country) throws Exception {
		return bicraScoreRepo.findByCountryCode(country);
	}
	
	public List<SovereignPeerBICRAScores> getPeerBICRAScores(String country, String domain) throws Exception {
		log.info("Peer BICRA Score Service -----");
		if(RatingsDataConstant.COUNTRY_CODE_CN.equalsIgnoreCase(domain)) {
			log.info("Peer BICRA Score Service for CN domain----");
			return peerbicraScoreRepo.getPeerBICRAForCNDomain(country);
		}else {
			return peerbicraScoreRepo.findByCountryCode(country);

		}
	}
	
	public List<SovereignFSMajorFactors> getMajorFactors(String country) throws Exception {
		return majorFactorRepo.findByCountryCode(country);
	}
	
	public List<SovereignFSIICRA> getIICRAIndicators(String country) throws Exception {
		return iicraRepo.findByCountryCode(country);
	}
	
	public List<SovereignDashboard> getSovDashboardData(String country, Optional<Long> entityId) throws Exception {
		if(! ObjectUtils.isEmpty(country)) {
			return dashboardRepo.getSovDashBoardData(country);
		}else if(!ObjectUtils.isEmpty(entityId)) {			
			return dashboardRepo.getDashboardDataBasedOnEntity(entityId.get());
		}else {
			return new ArrayList<SovereignDashboard>();
		}		
	}
	
	public List<SovereignResearchRatingDistribution> getSovResearchRatingDistrbutionData(Long entityId) throws Exception {
		log.info("@SovereignResearchService -- getSovResearchRatingDistrbutionData from DB");
		List<SovereignResearchRatingDistribution> sovResearchRatingDistribution = sovResearchRatingDistributionRepo.findByEntityId(entityId);
		return sovResearchRatingDistribution;
	}

	
	
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\service\UserEntitlementCheckImpl.java

package com.spglobal.ratings.ratingsdata.service;

import java.util.*;

import org.apache.commons.lang3.ObjectUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Service;

import com.spglobal.ratings.ratingsdata.model.UserProfileData;
import com.spglobal.ratings.ratingsdata.util.RatingsDataUtil;

import lombok.extern.slf4j.Slf4j;

@Service("userEntitlementcheck")
@Slf4j
public class UserEntitlementCheckImpl implements UserEntitlementCheckService{
      
	    @Autowired
	    private UserProfileService userProfileService;
        
	    @Autowired 
	    RatingsDataUtil ratingsUtil;
	    
	    @Value("${private.ratings.number}")
		private Long ossPrivateRatingsConfig;
	    
	    @Value("${pc.data.mfa.group}")
	    private String pcDataGroup;
	    
		private static Map<Long,Map<String,List<Long>>> entitlementsMap = new HashMap<>();

		public Map<String,List<Long>> entitlementChecksForUser(String authHeader) {
			Map<String,List<Long>> userEntitlement = new HashMap<>();
			
		    log.info("@UserEntitlement entitlementChecksForUser (authheader): calling User Profile Service");
            
			UserProfileData userdata = userProfileService.getUserProfile(authHeader);
			
			//any error case returns userdata null then returns null map
			if(userdata==null){
				 log.info("@UserEntitlement entitlementChecksForUser (authheader): error response from callback");
				 userEntitlement.put("ossList",null);
				 userEntitlement.put("entitledEntities",null);
				return userEntitlement;
			}
        
			 // get all the required user profile data
			 log.info("@UserEntitlement entitlementChecksForUser (authheader): got 200 response");
			 
			 Long userId = userdata.getUserId();
			 List<Long> ossList = userdata.getOnlineConfigurations();
			 List<Long> entitledEntities = new ArrayList<>();
			Long primaryEntity = userdata.getPrimaryOrgCapiqId();
			 if(ObjectUtils.isNotEmpty(primaryEntity)){
				 entitledEntities.add(primaryEntity);
			 }
			 List<Long> secondaryEntities = userdata.getSecondaryOrgCapiqIds();
			 if(ObjectUtils.isNotEmpty(secondaryEntities)){
				 entitledEntities.addAll(secondaryEntities);
			 }
			 userEntitlement.put("ossList",ossList);
			 userEntitlement.put("entitledEntities",entitledEntities);

			 //adding to entitlement map
			 log.info("@UserEntitlement entitlementChecksForUser (authheader): extracting data->putting entitlements in map");
			 entitlementsMap.put(userId,userEntitlement);
		  
	         return userEntitlement;
	   }
		public Map<String,List<Long>> entitlementChecksForUser(Integer userId, String authHeader){
			
			 log.info("@UserEntitlement entitlementChecksForUser: userId id is :"+ ratingsUtil.sanitizeString(userId.toString()));
			 
			//check if user entitlements is in the map already
			 if(entitlementsMap!=null && entitlementsMap.size()>0 && entitlementsMap.containsKey(userId)){
				    log.info("@UserEntitlement entitlementChecksForUser: entitlementsMap has entitlements  for checked user");
					 return entitlementsMap.get(userId);
				 
			}else {
				 log.info("@UserEntitlement entitlementChecksForUser: entitlementsMap has no entitlements  for checked user");
				 log.info("@UserEntitlement entitlementChecksForUser: calling entitlementChecksForUser to get from User Profile Service");
				  return entitlementChecksForUser(authHeader);
			}
			
		}
		public Integer isUserEntitledToPrivateRatings(Map<String,List<Long>> userEntitlements, String authHeader){
			log.info("@UserEntitlement isUserEntitledToPrivateRatings");
			Integer ossCheck = -1; //error case
			if (isOauthToken(authHeader)) {
				ossCheck = hasAccessToPcData(authHeader, userEntitlements) ? 1 : 0;
			} else {
				List<Long> userOSSConfigs = userEntitlements.get("ossList");
				if(userOSSConfigs !=null && userOSSConfigs.size()>0){
					if(userOSSConfigs.contains(ossPrivateRatingsConfig)){
						ossCheck = 1; //private ratings entitlement exists
					}else{
						ossCheck = 0; //private ratings entitlement does not exists
					}
				}
			}
			log.info("@UserEntitlement isUserEntitledToPrivateRatings output value is "+ ossCheck);
			return ossCheck;
		}
		
		private boolean hasAccessToPcData(String authHeader, Map<String, List<Long>> userEntitlements) {
			if (null != authHeader) {
				String[] parts = authHeader.split("\\.");
				if (parts.length > 1) {
					String encodedPayloads = parts[1];
					byte[] decodedBytes = Base64.getDecoder().decode(encodedPayloads);
					String payloadJson = new String(decodedBytes);
					return payloadJson.indexOf(pcDataGroup) > -1 && containsPrivateRatingsFlag(userEntitlements);
				}
			}
			return false;
		}

		private boolean containsPrivateRatingsFlag(Map<String, List<Long>> userEntitlements) {
			List<Long> userOSSConfigs = userEntitlements.get("ossList");
			if (userOSSConfigs != null && userOSSConfigs.size() > 0
					&& userOSSConfigs.contains(ossPrivateRatingsConfig)) {
				return true; // private ratings entitlement exists
			}
			return false; // private ratings entitlement does not exists
		}
		public Integer isUserEntitledToEntity(Long capiqId, Map<String,List<Long>> userEntitlements){
			log.info("@UserEntitlement isUserEntitledToEntity: Entity id is :");
			   Integer userIsEntitledToEntity = -1;  //error case
               List<Long> userEntitledEntities = userEntitlements.get("entitledEntities");
			   if(userEntitledEntities !=null && userEntitledEntities.size()>0){
				    if(ObjectUtils.isNotEmpty(capiqId) && userEntitledEntities.contains(capiqId)){
						log.info("@UserEntitlement isUserEntitledToEntity: Entity id is :"+ ratingsUtil.sanitizeString(capiqId.toString()));
						userIsEntitledToEntity = 1;  //private ratings entitlement exists
					}else{
						userIsEntitledToEntity = 0; //private ratings entitlement does not exists
					}
			   }
				log.info("@UserEntitlement isUserEntitledToEntity output value is "+ userIsEntitledToEntity);
          return userIsEntitledToEntity;
		}
		
		@Scheduled(fixedRateString="${user.entitlements.scheduler.fixedRate}") // scheduled to remove data from the map every 30 min
		public void clearEntitlementsMap() {
			log.info("@UserEntitlement clearEntitlementsMap triggered");
			log.info("@UserEntitlement clearEntitlementsMap before Map : "+ ratingsUtil.sanitizeString(entitlementsMap.values().toString()));
			entitlementsMap.clear();      
			log.info("@UserEntitlement clearEntitlementsMap after Map : "+ ratingsUtil.sanitizeString(entitlementsMap.values().toString()));
		}
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\service\UserEntitlementCheckService.java

package com.spglobal.ratings.ratingsdata.service;

import java.util.List;
import java.util.Map;

import org.springframework.util.StringUtils;


public interface UserEntitlementCheckService{

	/**
	This Method calls User Profile Service to check for user entitlements 
   */
	public Map<String,List<Long>> entitlementChecksForUser(String authHeader);
	
	/**
	This Method calls first checks if static entitlementMap has the entitlements already, if not calls entitlementChecksForUser(String authHeader)
   */
	public Map<String,List<Long>> entitlementChecksForUser(Integer userId, String authHeader);
	
	/**
	This Method calls User Profile Service to check for user entitlements 
   */
	public Integer isUserEntitledToPrivateRatings(Map<String,List<Long>> userEntitlements, String authHeader);
	
	public default boolean isOauthToken(String token) {
		return !StringUtils.startsWithIgnoreCase(token, "bearer <jwt0 xmlns");
	}
	
	/**
	This Method calls User Profile Service to check for user entitlements 
   */
	public Integer isUserEntitledToEntity(Long capiqId, Map<String,List<Long>> userEntitlements);
	
	/**
	This Method clears the static entitlementsMap
   */
	public void clearEntitlementsMap();
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\service\UserProfileService.java

package com.spglobal.ratings.ratingsdata.service;

import java.util.List;
import java.util.stream.Collectors;

import com.spglobal.ratings.ratingsdata.config.AppConfig;
import org.apache.commons.lang3.ObjectUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.util.StringUtils;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.util.UriComponentsBuilder;

import com.spglobal.kratos.resilience.annotation.KratosCircuitBreaker;
import com.spglobal.ratings.ratingsdata.model.R360UserProfileData;
import com.spglobal.ratings.ratingsdata.model.UserProfileData;
import com.spglobal.ratings.ratingsdata.model.UserProfileR360Data;
import com.spglobal.ratings.ratingsdata.util.RatingsDataConstant;
import com.spglobal.ratings.ratingsdata.util.RatingsDataUtil;

import lombok.extern.slf4j.Slf4j;

@Service
@Slf4j
public class UserProfileService {
	@Autowired
    private RestTemplate restTemplate;
	
	@Autowired
    private RatingsDataUtil ratingsDataUtil;

	@Autowired
	private AppConfig appConfig;

	@Value("${user.profile.service.url}")
	private String userProfileUrl;

	public UserProfileData getUserProfile(String authHeader) {
		boolean isOauth = this.isOauthToken(authHeader);
		UserProfileData data = new UserProfileData();
		if (isOauth) {
			R360UserProfileData r360UserData = this.getRatingsUserProfile(authHeader);

			if (ObjectUtils.isNotEmpty(r360UserData)) {
				/*Integer primaryOrgkeyIns = r360UserData.getRating360Info().get(0) != null
						? (r360UserData.getRating360Info().get(0).getPrimaryOrgInfo() != null
								? r360UserData.getRating360Info().get(0).getPrimaryOrgInfo().getAccountInstn() : null) : null;
				List<Integer> secondarOrgKeyInsIds = r360UserData.getRating360Info().get(0) != null
						? (r360UserData.getRating360Info().get(0).getSecondaryOrgInfo() != null
								? r360UserData.getRating360Info().get(0).getSecondaryOrgInfo().stream()
										.map(value -> value.accountInstn).collect(Collectors.toList()) : null): null;*/

				//Capiq Changes
				Long primaryOrgCapIq = r360UserData.getOrgInfo() != null
						? (r360UserData.getOrgInfo().getPrimaryOrgInfo() != null
						? r360UserData.getOrgInfo().getPrimaryOrgInfo().getCapiqId() : null) : null;

				List<Long> secondaryOrgCapiqIds = r360UserData.getOrgInfo() != null
						? (r360UserData.getOrgInfo().getSecondaryOrgInfo() != null
						? r360UserData.getOrgInfo().getSecondaryOrgInfo().stream()
						.map(value -> value.getCapiqId()).collect(Collectors.toList()) : null): null;

				data.setUserId(r360UserData.getOnlineUserId());
				data.setOnlineConfigurations(r360UserData.getOnlineUserConfigurations());
				//data.setPrimaryEntity(primaryOrgkeyIns);
				//data.setSecondaryEntities(secondarOrgKeyInsIds);
				//capiq logic changes
				data.setPrimaryOrgCapiqId(primaryOrgCapIq);
				data.setSecondaryOrgCapiqIds(secondaryOrgCapiqIds);
			}
		} else {
			UserProfileR360Data userdata = this.getMiUserProfile(authHeader);
			if (ObjectUtils.isNotEmpty(userdata)) {

				Integer primaryEntity = userdata.getRatings360Info() == null || ObjectUtils.isEmpty(userdata.getRatings360Info().getPrimaryAccountInstn())
						? 0 : userdata.getRatings360Info().getPrimaryAccountInstn();
				List<Integer> secondaryEntities = userdata.getRatings360Info() == null ? null
						: userdata.getRatings360Info().getSecondaryKeyInstns();

				data.setUserId(userdata.getKeyOnlineUser());
				data.setOnlineConfigurations(userdata.getOnlineConfigurations());
				data.setPrimaryEntity(primaryEntity);
				data.setSecondaryEntities(secondaryEntities);
			}
		}
		return data;
	}

	@KratosCircuitBreaker(name = "userdata", fallbackMethod = "userdataFallback")
    public UserProfileR360Data getMiUserProfile(String authHeader) {
		UserProfileR360Data userData = new UserProfileR360Data();
		HttpHeaders requestHeaders = new HttpHeaders();
		requestHeaders.set("Content-Type", MediaType.APPLICATION_JSON_VALUE);
		requestHeaders.set("Authorization",ratingsDataUtil.tokenHeaderManipulationCheck(authHeader));
		requestHeaders.set("X-Content-Type-Options","nosniff");
		
		HttpEntity<?> requestEntity = new HttpEntity<Object>(requestHeaders);

		UriComponentsBuilder builder = UriComponentsBuilder.fromHttpUrl(userProfileUrl).queryParam("$select", RatingsDataConstant.UserDataPoints);
		
		String uri = builder.build().encode().toString();
		ResponseEntity<UserProfileR360Data> response = restTemplate.exchange(uri, HttpMethod.GET, requestEntity,UserProfileR360Data.class);

		log.info("@UserProfileService getUserProfile got the response from the user profile service");
		if (response != null && response.getBody() != null) {
			userData = response.getBody();
		}
		return userData;
    }

	@KratosCircuitBreaker(name = "userdata", fallbackMethod = "userdataFallback")
    public R360UserProfileData getRatingsUserProfile(String authHeader) {
		try {
			R360UserProfileData userData = new R360UserProfileData();
			HttpHeaders requestHeaders = new HttpHeaders();
			requestHeaders.set("Content-Type", MediaType.APPLICATION_JSON_VALUE);
			requestHeaders.set("Authorization", ratingsDataUtil.tokenHeaderManipulationCheck(authHeader));
			requestHeaders.set("X-Content-Type-Options", "nosniff");
			requestHeaders.set("apiKey", appConfig.getApiKey());

			HttpEntity<?> requestEntity = new HttpEntity<Object>(requestHeaders);

			UriComponentsBuilder builder = UriComponentsBuilder.fromHttpUrl(appConfig.getRatingUserProfileUrl());

			String uri = builder.build().encode().toString();
			ResponseEntity<R360UserProfileData> response = restTemplate.exchange(uri, HttpMethod.GET, requestEntity, R360UserProfileData.class);

			log.info("@UserProfileService getUserProfile got the response from the user profile service");
			if (response != null && response.getBody() != null) {
				userData = response.getBody();
			}
			return userData;
		}catch (Exception ex){
			log.error("@Exception in getRatingsUserProfile {} ",ex.getMessage());
			return null;
		}
    }
	
	private boolean isOauthToken(String token) {
		return !StringUtils.startsWithIgnoreCase(token, "bearer <jwt0 xmlns");
	}
	
	//fallback method for the user profile service
	//!imp signature should match with the actual method
	public UserProfileR360Data userdataFallback(String authHeader, Exception e){
		log.info("@UserProfileService userdataFallback");
		log.info("-------Exception while calling User Profile Service", e.getMessage());
		log.info("-------Passing null user data object to caller");
		return null;
	}
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\service\UspfRatingsService.java

package com.spglobal.ratings.ratingsdata.service;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.stream.Collectors;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.util.ObjectUtils;

import com.spglobal.ratings.ratingsdata.dao.IssuesMaturitiesUSPFPubDao;
import com.spglobal.ratings.ratingsdata.entity.IssuesMaturitiesUSPFPub;
import com.spglobal.ratings.ratingsdata.entity.RatingUspfEconomicFinDetails;
import com.spglobal.ratings.ratingsdata.entity.UspfAnalyticalContacts;
import com.spglobal.ratings.ratingsdata.entity.UspfCurrentRatings;
import com.spglobal.ratings.ratingsdata.entity.UspfDashboardRatings;
import com.spglobal.ratings.ratingsdata.entity.UspfNonIssuerBasedRatingHisotry;
import com.spglobal.ratings.ratingsdata.entity.UspfNonIssuerBasedRatings;
import com.spglobal.ratings.ratingsdata.entity.UspfRatingsRoles;
import com.spglobal.ratings.ratingsdata.entity.UspfRelatedArticles;
import com.spglobal.ratings.ratingsdata.entity.UspfRelatedCriteria;
import com.spglobal.ratings.ratingsdata.model.USPFMinMaxDates;
import com.spglobal.ratings.ratingsdata.model.UspfNonIssuerBasedFilterData;
import com.spglobal.ratings.ratingsdata.repository.UspfAnalyticalContactsRepository;
import com.spglobal.ratings.ratingsdata.repository.UspfCurrentRatingsRepository;
import com.spglobal.ratings.ratingsdata.repository.UspfDashboardRatingsRepository;
import com.spglobal.ratings.ratingsdata.repository.UspfEconomicAndFinRepository;
import com.spglobal.ratings.ratingsdata.repository.UspfNIBRatingsHistoryRepository;
import com.spglobal.ratings.ratingsdata.repository.UspfNIBRatingsIssueNameRepository;
import com.spglobal.ratings.ratingsdata.repository.UspfNIBRatingsRepository;
import com.spglobal.ratings.ratingsdata.repository.UspfRatingsRoleRepository;
import com.spglobal.ratings.ratingsdata.repository.UspfRelatedArticlesRepository;
import com.spglobal.ratings.ratingsdata.repository.UspfRelatedCriteriaRepository;
import com.spglobal.ratings.ratingsdata.util.RatingsDataConstant;

import jakarta.validation.Valid;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@Service
public class UspfRatingsService {
	
	@Autowired
	UspfCurrentRatingsRepository currentRatingsRepo;
	
	@Autowired
	UspfDashboardRatingsRepository dashboardRatingsRepo;
	
	@Autowired
	UspfRatingsRoleRepository rolesRepo;
	
	@Autowired
	UspfRelatedArticlesRepository relatedArticleRepo;
	
	@Autowired
	UspfNIBRatingsHistoryRepository nibRatingsHistoryRepo;
	
	@Autowired
	UspfNIBRatingsRepository nibRatingsRepo;
	
	@Autowired
	UspfNIBRatingsIssueNameRepository nibRatingsIssueNameRepo;
	
	@Autowired
	UspfRelatedCriteriaRepository relatedCriteriaRepo;

	@Autowired
	UspfAnalyticalContactsRepository analyticalContactsRepo;
	
	@Autowired
	private UspfEconomicAndFinRepository uspfEconomicAndFinRepository;
	
	@Autowired
	IssuesMaturitiesUSPFPubDao issuesMaturitiesUSPFPubDao;
	

	public List<UspfCurrentRatings> getCurrentRatings(Long entityId, Optional<List<String>> roleCodes, Long securityId, String ratingTypeCode) throws Exception{
		log.info("UspfRatingsService --> getCurrentRatings method");
		if(ObjectUtils.isEmpty(roleCodes)) {
			return currentRatingsRepo.getCurrentRatings(entityId, securityId, ratingTypeCode);
		}else {
			List<String> roleCode = roleCodes.get();
			return currentRatingsRepo.getCurrentRatingsBasedonRoleCode(entityId,roleCode);
		}
	}

	public List<UspfDashboardRatings> getDashBoardRatings(Long entityId) throws Exception {
		log.info("UspfRatingsService --> getDashBoardRatings method");
		return dashboardRatingsRepo.findByEntityId(entityId);
	}
	
	public List<UspfRatingsRoles> getRoles() throws Exception {
		log.info("UspfRatingsService --> getRoles method");
		return rolesRepo.findByRoleCode();
	}
	
	public List<UspfRelatedArticles> getRelatedArticles(Long instrumentId, List<Integer> articleTypeId, String fromDate, String toDate) throws Exception {
		log.info("UspfRatingsService --> getRelatedArticles method");
		if(ObjectUtils.isEmpty(articleTypeId)) {
			return relatedArticleRepo.getRelatedArtciles(instrumentId,fromDate,toDate);
		}else {
			return relatedArticleRepo.getRelatedArtcilesWithArticleType(instrumentId,articleTypeId,fromDate,toDate);

		}
	}
	
	
	public List<UspfRelatedArticles> getDashboardArticles(Long instrumentId) throws Exception {
		log.info("UspfRatingsService --> getDashboardArticles method");
		return relatedArticleRepo.getDashboardArticles(instrumentId);
	}
	
	public List<UspfRelatedArticles> getDashboardPeerArticles(List<Long> securityIds) throws Exception {
		log.info("UspfRatingsService --> getDashboardPeerArticles method");
		return relatedArticleRepo.getDashboardPeerArticles(securityIds);
	}
	
	public List<UspfNonIssuerBasedRatingHisotry> getNonIssuerBasedRatingHistory(Long instrId, Long instrDetailId, String ratingTypeCd) throws Exception {
		log.info("UspfRatingsService --> getNonIssuerBasedRatingHistory method");
		return nibRatingsHistoryRepo.getRatingHistoryData(instrId,instrDetailId,ratingTypeCd);
	}

	public List<UspfNonIssuerBasedRatings> getNonIssuerBasedRatings(Long entityId) throws Exception {
		log.info("UspfRatingsService --> getNonIssuerBasedRatingsAll method");
		return nibRatingsRepo.getUspfNIBRatingsAll(entityId);
	}

	public List<?> getNIBRatingsFilterData(@Valid UspfNonIssuerBasedFilterData filterData) throws Exception{
		log.info("UspfRatingsService --> getNonIssuerBasedRatings Filter Service method");
		if(filterData != null) {
			Long entityId = filterData.getEntityId();
			List<String> roleCodes = filterData.getRole();
			List<String> category = filterData.getCategory();
			String keyword = filterData.getKeyword();
			Integer fromYear = filterData.getMaturityYearFrom();
			Integer toYear = filterData.getMaturityYearTo();
			if(filterData.isIssueNameOnly()) {
				return nibRatingsIssueNameRepo.getUspfNIBRatingsWithIssueNameOnly(entityId,roleCodes,
						category,keyword);

			}else {
				return nibRatingsRepo.getUspfNIBRatingsFilterData(entityId,roleCodes,category,keyword,
						fromYear,toYear);					

			}
			
		}else {
			return new ArrayList<>();
		}
		
	}
	
	public List<UspfAnalyticalContacts> getUspfAnalyticalContacts(Long securityId) throws Exception{
		return analyticalContactsRepo.findByAnalyticalSecId(securityId);
	}

	
	public List<UspfRelatedCriteria> getRelatedCriteriaArticles(Long ratingDetailId) throws Exception{
		log.info("UspfRatingsService --> getRelatedCriteriaArticles method");
		return relatedCriteriaRepo.findByRatingDetailId(ratingDetailId);
	}
	
	public List<UspfNonIssuerBasedRatings> getIssuerMaturityDetails(Long entityId, Long instrumentId) throws Exception{
		log.info("UspfRatingsService --> getIssuerMaturityDetails method");
		return nibRatingsRepo.getIssuerMaturityDetails(entityId, instrumentId);
	}
	

	public Map<String, Map<String, Map<String, List<RatingUspfEconomicFinDetails>>>> getUspfEconomicFinData(
			List<Long> asIds) throws Exception {

		log.info("@PeerManagmentServie getUspfPeerPortfolioContents --> fetching portfolio data ");
		if (asIds == null) {
			throw new IllegalArgumentException("articleTypeIds parameter should not be null");
		}

		List<RatingUspfEconomicFinDetails> ratingArticleTypes = null;
		Map<String, Map<String, Map<String, List<RatingUspfEconomicFinDetails>>>> multipleFieldsMapList = new HashMap<>();
		try {
			if (asIds != null && asIds.size() > 0) {
				ratingArticleTypes = uspfEconomicAndFinRepository.findAsFilter(asIds);
				ratingArticleTypes = ratingArticleTypes.stream().map(portfolioData -> {
					if (StringUtils.isEmpty(portfolioData.getSubHeading())) {
						portfolioData.setSubHeading(portfolioData.getHeading());
					}
					if (StringUtils.isEmpty(portfolioData.getFinValue())) {
						portfolioData.setFinValue(RatingsDataConstant.NA);
					}
					if(portfolioData.getDataElement().equals("SP_FIN_PS2NetPensOPEBLiab")){
						portfolioData.setProductCaption(portfolioData.getProductCaption().concat(" "));
					}
					return portfolioData;
				}).collect(Collectors.toList());

				Collections.sort(ratingArticleTypes, Comparator.comparing(RatingUspfEconomicFinDetails::getSortOrder));
				ratingArticleTypes.stream().forEach(portfolioObj -> multipleFieldsMapList
						.computeIfAbsent(portfolioObj.getHeading(), k -> new LinkedHashMap<>())
						.computeIfAbsent(portfolioObj.getSubHeading(), k -> new LinkedHashMap<>())
						.computeIfAbsent(portfolioObj.getProductCaption(), k -> new ArrayList<>()).add(portfolioObj));
				multipleFieldsMapList.entrySet().forEach(x -> {
					x.getValue().entrySet().iterator().forEachRemaining(z -> z.getValue().entrySet().forEach(y -> {
						RatingUspfEconomicFinDetails s = new RatingUspfEconomicFinDetails();
						s.setAvg3YFinValue(y.getValue().get(0).getAvg3YFinValue());
						s.setFiscalYear("avg");
						y.getValue().add(0, s);
					}));
				});
				System.out.println("Group by on multiple properties and Map key as List" + multipleFieldsMapList);
			}
		} catch (Exception exception) {
			throw exception;
		}

		return multipleFieldsMapList;
	}

	public List<IssuesMaturitiesUSPFPub> getUspfIssuesMaturities(Long asId, Long ratingDetailId, Long instrumentId,
			Boolean issueNameOnly) {
		return issuesMaturitiesUSPFPubDao.getIssuesAndMaturitiesDetails(asId, ratingDetailId, instrumentId, issueNameOnly);
	}

	public USPFMinMaxDates getIsseAndMaturitesMinMaxDates(Long asId) throws Exception {
		return issuesMaturitiesUSPFPubDao.getUSPFMinMaxDates(asId);
	}

}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\util\AspectUtil.java

package com.spglobal.ratings.ratingsdata.util;

import org.aspectj.lang.ProceedingJoinPoint;
import org.aspectj.lang.annotation.Around;
import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.reflect.MethodSignature;
import org.springframework.stereotype.Component;
import org.springframework.util.ObjectUtils;
import org.springframework.util.StopWatch;

import lombok.extern.slf4j.Slf4j;
 

@Aspect
@Component
@Slf4j
public class AspectUtil {
	
    //Calculate time spent in method execution that are in service and controller packages 
    @Around("execution(* com.spglobal.ratings.ratingsdata.service..*(..)) || execution(* com.spglobal.ratings.ratingsdata.controller..*(..)) || execution(* com.spglobal.ratings.ratingsdata.dao..*(..)) || execution(* com.spglobal.ratings.ratingsdata.repository..*(..))")
    public Object profileAllMethods(ProceedingJoinPoint proceedingJoinPoint) throws IllegalStateException,IllegalArgumentException,Exception,Throwable 
    {
        MethodSignature methodSignature = (MethodSignature) proceedingJoinPoint.getSignature();
        Object[] args = proceedingJoinPoint.getArgs();
        String className = methodSignature.getDeclaringType().getSimpleName();
        String methodName = methodSignature.getName();
        
        //get params 
        String[] paramsNames = methodSignature.getParameterNames();
        
        //log params
        logParams(args,paramsNames, className, methodName);
        
        final StopWatch stopWatch = new StopWatch();          
        stopWatch.start();
        Object result = proceedingJoinPoint.proceed();
        stopWatch.stop();
        
        log.info(" @AspectUtil profileAllMethods -> execution time of " + className + "." + methodName + " is :::: " + stopWatch.getTotalTimeMillis() + " ms");
        
        return result;
    }
    
    public void logParams(Object[] args, String[] paramsNames, String className, String methodName) {
        for (int j = 0; j < args.length; j++) {
                  //has objects that was passed in methods
        		if(!ObjectUtils.isEmpty(paramsNames) && paramsNames.length == args.length) {
                    log.info("@AspectUtil {}.{} params {}: {}", className, methodName, paramsNames[j], args[j]);        			
        		} else {
                    log.info("@AspectUtil {}.{} params: {}", className, methodName, args[j]);
        		}
        }
    }

}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\util\CharacterCheck.java

package com.spglobal.ratings.ratingsdata.util;

import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class CharacterCheck {

    public static Boolean checkNumeric(String str){
        String specialCharacterRegex= "[0-9]+";
        return str.matches(specialCharacterRegex);

    }

}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\util\FinancialRatingColumn.java

	package com.spglobal.ratings.ratingsdata.util;

public class FinancialRatingColumn {

	public static String RN = "ID";
	public static String FIN_ENTITY_ID = "FIN_ENTITY_ID";
	public static String FISCAL_YEAR = "FISCAL_YEAR";
	public static String CORE_ID = "CORE_ID";
	public static String PERIOD_STATE = "PERIOD_STATE";
	public static String REPORTED_CURRENCY = "REPORTED_CURRENCY";
	public static String TARGET_CURRENCY = "TARGET_CURRENCY";
	public static String PERIOD_END_DATE = "PERIOD_END_DATE";
	public static String LAST_UPDATED_DATE = "LAST_UPDATED_DATE";
	public static String TEMPLATE_NAME = "TEMPLATE_NAME";
	public static String DATA_ELEMENT_CD = "DATA_ELEMENT_CD";
	public static String DATA_POINT_VALUE = "DATA_POINT_VALUE";	
	
	public static String MOST_RECENT_3YRS_UNWEIGHED_AVG = "MOST RECENT 3 YRS. UNWEIGHTED AVG.";
	public static String MOST_RECENT_3QTRS_UNWEIGHED_AVG = "MOST RECENT 3 QTR. UNWEIGHTED AVG.";
	public static String LTM ="LTM";
	public static String DECIMAL_FORMATTER = "%.2f";
	
	public static String FIN_MAGNITUDE_VAL ="$M";
	public static Integer MAGNITUDE_CONSTANT = 6;
	public static String REPORTED_CURRENCY_MAGNITUDE ="Reported";

	public static String FIN_PERIOD_ID = "FIN_PERIOD_ID";
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\util\RatingArticlesResponseHandler.java

package com.spglobal.ratings.ratingsdata.util;

import java.util.HashMap;
import java.util.Map;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;

public class RatingArticlesResponseHandler {
	
	public static ResponseEntity<Object> generateResponse(String message, HttpStatus status, Object responseObj, Long count, boolean pcData) {
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("message", message);
		map.put("status", status.value());
		map.put("data", responseObj);
		map.put("count", count);
		map.put("isPcData", pcData);
		return new ResponseEntity<Object>(map, status);
	}

}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\util\RatingsDataConstant.java

package com.spglobal.ratings.ratingsdata.util;

import java.util.List;

public interface RatingsDataConstant {
	public static String UserDataPoints = "KeyOnlineUser,Ratings360Info,OnlineConfigurations";
	public static String BASE_PATH = "/ratingsData/api";

	public static String SUCCESS = "success";
	public static String FAILURE = "failure";
	public static String ANNUALLY = "annual";
	public static String QUARTERLY = "quarterly";
	
	public static String CUSTOM_DATE_TIME_FORMAT = "yyyy-MM-dd HH:mm:ss";
	public static String COUNTRY_CODE_CN = "CN";
	
	public static String REPORTED_CURRENCIES = "reported currency";
	public static String CURRENCY_SYMBOL = "$";
	
	public static String OPINCADAREP="OPINCADAREP";
	public static String CORP_PRE_ADJUSTED = "corporate.pre-adjusted";
	public static String OANCF_VLP = "OANCF.VLP";
	
	public static String YES = "Y";

	public static String DEFAULT_CONTACT="Default Contact";
	public static String DEFAULT_ROLE="Default Role";
	
	public static String RATING_ARTICLES_SSP_NAME = "Rating Articles SSP";
	public static String RATING_ARTICLES_SSP_DESC = "Rating Articles for Entity Id SSP";
	public static String RATING_ARTICLES_SSP_SUCC_MSG = "Sucessfully retrieved the Rating Articles for Entity(s) [";
	public static String RATING_ARTICLES_SSP_FAIL_MSG = "Failed to retrieve the Rating Articles for Entity [";
	public static String ORDER_DESC = "DESC";
	public static String NA = "NA";
	public static Integer DEFAULT_SECTOR_RESCH_ARTICLE=15;
	
	public static String INSTN_NAMES_ERROR_MSG = "Institution names should not be empty";
	public static String CAPIQ_STR = "capiq";
	public static String SNL_STR = "snl";
	public static List<String> SNL_TYPES_PARAM = List.of(SNL_STR,"snlId");
	
	public static String COREID_STR = "coreid";
	public static String SNLID_STR = "snlid";
	public static String SPID_STR = "sporgid";

}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\util\RatingsDataUtil.java

package com.spglobal.ratings.ratingsdata.util;

import org.jsoup.Jsoup;
import org.jsoup.safety.Safelist;
import org.springframework.stereotype.Component;
import org.springframework.beans.factory.annotation.Autowired;

import com.fasterxml.jackson.databind.ObjectMapper;

@Component
public class RatingsDataUtil {
	
	@Autowired
	ObjectMapper mapper;
	
	public String sanitizeString(String str) {
		return str!=null?Jsoup.clean(str, Safelist.basic()):null;
	}
	
	public String tokenHeaderManipulationCheck(String token) {
		String response = null;
		Safelist allowedTags = Safelist.relaxed();
		allowedTags.addTags("jwt0");
		allowedTags.addAttributes("jwt0", "xmlns");
		response = Jsoup.clean(token, allowedTags);
		response = response.replaceAll("\n", "");
		response = response.replace("tokens\"> ", "tokens\">");
        return response;

    } 

}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\util\RCAConstants.java

package com.spglobal.ratings.ratingsdata.util;

public class RCAConstants {

	public static final String SOURCE = "Source";
	public static final String LANGUAGE = "Language";
	public static final String PUBDATE_FORMAT = "PubDate_Format";
	public static final String APPLICATION = "Application";
	public static final String IS_CRITERIA_NON_PUBLIC = "IsCriteriaNonPublic";
	
	public static final String LINX = "LINX";
	public static final String ENGLISH = "English";
	public static final String PUBDATE_FORMAT_VALUE = "Mon fmDD, YYYY";
	public static final String RPM = "RPM";
	public static final String TRUE = "true";
	public static final String FALSE = "false";
	
	public static final String JOBIDS_IN_CLAUSE = "JobIDsInClause";
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\util\RedisConstants.java

package com.spglobal.ratings.ratingsdata.util;

public class RedisConstants {

	public static final String CURRENCY_LOOKUP_CACHE = "currencyLookupCache";
	public static final String CURRENCY_CODE_CACHE = "currencyCodeCache";
	public static final String CURRENCY_TRANSLATION_BY_CODE = "currencyTransByCode";
	public static final String MNEMONIC_MAGNITUDE_BY_CURRENCY_CODE = "mnemonicMagnitudeByCurrencyCode";
	public static final String MAJOR_CURRENCY_CONV_CACHE = "majorCurrencyCache";
	public static final String MINOR_CURRENCY_CONV_CACHE = "minorCurrencyCache";
	public static final String MNEMONIC_CACHE_CACHE = "mnemonicCache";
	public static final String SOV_COUNTRY_CACHE = "sovCountryCache";
	public static final String SOV_SUMMARY_CACHE = "sovSummaryCache";
	public static final String DEFINATIONS_BY_TYPE_CACHE= "definationsByTypeCache";
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\util\RedisUtility.java

package com.spglobal.ratings.ratingsdata.util;

import java.util.Set;
import java.util.concurrent.TimeUnit;

import javax.management.timer.Timer;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.InitializingBean;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.cache.annotation.CacheEvict;
import org.springframework.data.redis.core.RedisTemplate;
import org.springframework.data.redis.serializer.StringRedisSerializer;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Service;

@Service
public class RedisUtility implements InitializingBean {

	private static final Logger logger = LoggerFactory.getLogger(RedisUtility.class);

	@Autowired
	private RedisTemplate<Object, Object> redisTemplate;

	@Override
	public void afterPropertiesSet() {
		redisTemplate.setKeySerializer(new StringRedisSerializer());
	}

	public Boolean hasKey(final String key) {
		return redisTemplate.hasKey(key);
	}

//	public void setValue(final String key, String value) {
//		redisTemplate.opsForValue().set(key, value, cacheClearTime, TimeUnit.MINUTES);
//	}

	public String getValue(final String key) {
		return (String) redisTemplate.opsForValue().get(key);
	}
	
	public ResponseEntity<?> clearRiskGuageCache(String key) {
		Set<Object> redisKeys = redisTemplate.keys(key + "*");
		Long noOfKeysRemoved = redisTemplate.delete(redisKeys);
		logger.info("Ratings data Clear Cache Request Ended");
		return new ResponseEntity<String>(noOfKeysRemoved + " keys have been removed from cache", HttpStatus.OK);
	}
	
	@Scheduled(fixedRate = Timer.ONE_HOUR * 2)
	@CacheEvict(value = { RedisConstants.CURRENCY_LOOKUP_CACHE, RedisConstants.CURRENCY_CODE_CACHE,
			RedisConstants.CURRENCY_TRANSLATION_BY_CODE, RedisConstants.MNEMONIC_MAGNITUDE_BY_CURRENCY_CODE,
			RedisConstants.MAJOR_CURRENCY_CONV_CACHE, RedisConstants.MINOR_CURRENCY_CONV_CACHE,
			RedisConstants.MNEMONIC_CACHE_CACHE
			}, allEntries = true)
	public void clearEvents() {
		logger.info("Cleaning cache successful");
	}
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\util\ResponseHandler.java

package com.spglobal.ratings.ratingsdata.util;

import java.util.HashMap;
import java.util.Map;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;

public class ResponseHandler {
	public static ResponseEntity<Object> generateResponse(String message, HttpStatus status, Object responseObj) {
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("message", message);
		map.put("status", status.value());
		map.put("data", responseObj);
		return new ResponseEntity<Object>(map, status);
	}
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\util\RestApiUtil.java

package com.spglobal.ratings.ratingsdata.util;

import java.util.Arrays;
import java.util.List;
import java.util.Map;

import com.spglobal.ratings.ratingsdata.config.AppConfig;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.ParameterizedTypeReference;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Component;
import org.springframework.util.CollectionUtils;
import org.springframework.web.client.RestTemplate;

import com.spglobal.ratings.ratingsdata.service.RatingCriteriaArticlesService;

import lombok.extern.slf4j.Slf4j;

@Component
@Slf4j
public class RestApiUtil {

	@Autowired
	private RestTemplate restTemplate;

	@Autowired
	private AppConfig appConfig;

	public <T> ResponseEntity<T> fetchApiContent(HttpMethod httpMethod, Map<String, Object> headers, String url,
			Map<String, Object> params, ParameterizedTypeReference<T> parameterizedTypeReference) throws Exception {
		HttpHeaders httpHeaders = new HttpHeaders();
		httpHeaders.setAccept(
				Arrays.asList(MediaType.APPLICATION_JSON, MediaType.TEXT_PLAIN, MediaType.APPLICATION_FORM_URLENCODED));
		httpHeaders.set("apiKey", appConfig.getApiKey());
		if (headers != null) {
			headers.forEach((key, value) -> {
				httpHeaders.set(key, String.valueOf(value));
			});
		}
		HttpEntity<Object> httpEntity = new HttpEntity<Object>(params, httpHeaders);
		ResponseEntity<T> response = restTemplate.exchange(url, httpMethod, httpEntity, parameterizedTypeReference);
		return response;
	}
	
	public String getAuthorizationToken(HttpHeaders headers) throws Exception {
		List<String> authHeaders = headers.getValuesAsList(HttpHeaders.AUTHORIZATION);
		if (CollectionUtils.isEmpty(authHeaders)) {
			throw new Exception("Api access restricted, No auth token found.");
		}
		return authHeaders.get(0);
	}
	
	public static boolean isCnDomain(HttpHeaders headers) throws Exception {
		List<String> domain = headers.getValuesAsList(HttpHeaders.ORIGIN);
		if (CollectionUtils.isEmpty(domain)) {
			log.info("IsCndomain -> No domain found in the request defaulting to non cn domain");
			return false;
		}
		boolean isCnDomain=  domain.get(0).endsWith("cn") || domain.get(0).endsWith("cn/");
		log.info("IsCndomain-> {}", isCnDomain);
		return isCnDomain;
	}

}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\util\TimestampDeserializer.java

package com.spglobal.ratings.ratingsdata.util;

import java.io.IOException;
import java.sql.Timestamp;
import java.time.LocalDateTime;
import java.time.OffsetDateTime;
import java.time.ZoneOffset;
import java.time.format.DateTimeFormatter;

import com.fasterxml.jackson.core.JacksonException;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JsonDeserializer;

import lombok.extern.slf4j.Slf4j;

@Slf4j
public class TimestampDeserializer extends JsonDeserializer<Timestamp> {

	private static final DateTimeFormatter CUSTOM_DATE_TIME_FORMATTER = DateTimeFormatter
			.ofPattern(RatingsDataConstant.CUSTOM_DATE_TIME_FORMAT);

	@Override
	public Timestamp deserialize(JsonParser jsonParser, DeserializationContext ctxt)
			throws IOException, JacksonException {
		Timestamp target = null;
		try {
			target = Timestamp.valueOf(LocalDateTime.parse(jsonParser.getText(), CUSTOM_DATE_TIME_FORMATTER));
		} catch (Exception exception) {
			log.error("Exception: @TimestampDeserializer serialize: {} ", exception.getMessage());
			throw new RuntimeException(
					"Search date parameter should be in format [" + RatingsDataConstant.CUSTOM_DATE_TIME_FORMAT + "]");
		}
		return target;
	}
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\java\com\spglobal\ratings\ratingsdata\util\TimestampSerializer.java

package com.spglobal.ratings.ratingsdata.util;

import java.io.IOException;
import java.sql.Timestamp;

import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.databind.JsonSerializer;
import com.fasterxml.jackson.databind.SerializerProvider;

import lombok.extern.slf4j.Slf4j;

@Slf4j
public class TimestampSerializer extends JsonSerializer<Timestamp>{
	
	@Override
    public void serialize(Timestamp value, JsonGenerator gen, SerializerProvider provider)
            throws IOException {
        try {
            gen.writeString(value.toLocalDateTime().toString());
        } catch (Exception exception) {
            log.error("Exception: @TimestampSerializer serialize: {} ", exception.getMessage());
            gen.writeString("");
        }
    }
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\resources\antisamy-slashdot.xml

<?xml version="1.0" encoding="ISO-8859-1"?>
	
<!-- 
W3C rules retrieved from:
http://www.w3.org/TR/html401/struct/global.html
-->
	
<!--
Slashdot allowed tags taken from "Reply" page:
<b> <i> <p> <br> <a> <ol> <ul> <li> <dl> <dt> <dd> <em> <strong> <tt> <blockquote> <div> <ecode> <quote>
-->

<anti-samy-rules xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		xsi:noNamespaceSchemaLocation="antisamy.xsd">
	
	<directives>
		<directive name="omitXmlDeclaration" value="true"/>
		<directive name="omitDoctypeDeclaration" value="true"/>
		<directive name="embedStyleSheets" value="false"/>
	</directives>
	
	
	<common-regexps>
		
		<!-- 
		From W3C:
		This attribute assigns a class name or set of class names to an
		element. Any number of elements may be assigned the same class
		name or names. Multiple class names must be separated by white 
		space characters.
		-->
		
		<regexp name="htmlTitle" value="[a-zA-Z0-9\s-_',:\[\]!\./\\\(\)]*"/> <!-- force non-empty with a '+' at the end instead of '*' -->
		<regexp name="onsiteURL" value="([\w\\/\.\?=&amp;;\#-~]+|\#(\w)+)"/>
		<!--  <regexp name="offsiteURL" value="(\s)*((ht|f)tp(s?)://|mailto:)[A-Za-z0-9]+[~a-zA-Z0-9-_\.@#$%&amp;;:,\?=/\+!]*(\s)*"/> -->
	
	</common-regexps>
	
	<!-- 
	
	Tag.name = a, b, div, body, etc.
	Tag.action = filter: remove tags, but keep content, validate: keep content as long as it passes rules, remove: remove tag and contents
	Attribute.name = id, class, href, align, width, etc.
	Attribute.onInvalid = what to do when the attribute is invalid, e.g., remove the tag (removeTag), remove the attribute (removeAttribute), filter the tag (filterTag)
	Attribute.description = What rules in English you want to tell the users they can have for this attribute. Include helpful things so they'll be able to tune their HTML
	 
	 -->

	<!-- 
	Some attributes are common to all (or most) HTML tags. There aren't many that qualify for this. You have to make sure there's no
	collisions between any of these attribute names with attribute names of other tags that are for different purposes.
	-->

	<common-attributes>
		

		<attribute name="lang" description="The 'lang' attribute tells the browser what language the element's attribute values and content are written in">
		 	<regexp-list>
		 		<regexp value="[a-zA-Z]{2,20}"/>
		 	</regexp-list>
		 </attribute>
		 
		 <attribute name="title" description="The 'title' attribute provides text that shows up in a 'tooltip' when a user hovers their mouse over the element">
		 	<regexp-list>
		 		<regexp name="htmlTitle"/>
		 	</regexp-list>
		 </attribute>

		<attribute name="href" onInvalid="filterTag">
			<regexp-list>
				<regexp name="onsiteURL"/>
				<!-- <regexp name="offsiteURL"/> -->
			</regexp-list>
		</attribute>
	
		<attribute name="align" description="The 'align' attribute of an HTML element is a direction word, like 'left', 'right' or 'center'">
			<literal-list>
				<literal value="center"/>
				<literal value="left"/>
				<literal value="right"/>
				<literal value="justify"/>
				<literal value="char"/>
			</literal-list>
		</attribute>

	</common-attributes>


	<!--
	This requires normal updates as browsers continue to diverge from the W3C and each other. As long as the browser wars continue
	this is going to continue. I'm not sure war is the right word for what's going on. Doesn't somebody have to win a war after 
	a while?
	 -->
	
	<global-tag-attributes>
		<attribute name="title"/>
		<attribute name="lang"/>
	</global-tag-attributes>


	<tag-rules>

		<!-- Tags related to JavaScript -->

		<tag name="script" action="remove"/>
		<tag name="noscript" action="remove"/>
		
		<!-- Frame & related tags -->
		
		<tag name="iframe" action="remove"/>
		<tag name="frameset" action="remove"/>
		<tag name="frame" action="remove"/>
		<tag name="noframes" action="remove"/>
		

		<!-- All reasonable formatting tags -->
		
		<tag name="p" action="validate">
			<attribute name="align"/>
		</tag>

		<tag name="div" action="validate"/>		
		<tag name="i" action="validate"/>
		<tag name="b" action="validate"/>
		<tag name="em" action="validate"/>
		<tag name="blockquote" action="validate"/>
		<tag name="tt" action="validate"/>
		
		<tag name="br" action="truncate"/>

		<!-- Custom Slashdot tags, though we're trimming the idea of having a possible mismatching end tag with the endtag="" attribute -->
		
		<tag name="quote" action="validate"/>
		<tag name="ecode" action="validate"/> 
		
						
		<!-- Anchor and anchor related tags -->
		
		<tag name="a" action="validate">

			<attribute name="href" onInvalid="filterTag"/>
			<attribute name="nohref">
				<literal-list>
					<literal value="nohref"/>
					<literal value=""/>
				</literal-list>
			</attribute>
			<attribute name="rel">
				<literal-list>
					<literal value="nofollow"/>
				</literal-list>
			</attribute>
		</tag>

		<!-- List tags -->

		<tag name="ul" action="validate"/>
		<tag name="ol" action="validate"/>
		<tag name="li" action="validate"/>
		
	</tag-rules>



	<!--  No CSS on Slashdot posts -->

	<css-rules>
	</css-rules>

</anti-samy-rules>


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\resources\application.properties

#
# Copyright (c) 2022 by Standard & Poor's Financial Services LLC. All rights reserved.
#
application.name=@project.artifactId@
application.version=@project.version@
application.description=Services to provide Ratings Data to R360
# CORS Configuration
kratos.web.cors.allowedOrigins=https://snldev.int,http://localhost:9090,http://localhost:8080,http://localhost:4200,https://midev.spglobal.com,https://spgmidev.com,https://snlnet.com,https://platform.mistage.spglobal.com,https://spgmistage.com,www-stack1.spgmistage.com,www-stack2.spgmistage.com,www-stack2.spgmistage.com,https://snl.com,https://platform.mi.spglobal.com,https://marketintelligence.spglobal.com,https://platform.marketintelligence.spglobal.com,https://platform.ratings360dev.spglobal.com,https://platform.ratings360stg.spglobal.com,https://platform.ratings360.spglobal.com,https://platform.spgidev.spglobal.com,https://apistg.spglobal.cn,https://platform.ratings360stg.spglobal.cn,https://api.spglobal.cn,https://platform.ratings360.spglobal.cn,https://r360-ratings-mfe.dev.spratingsvpc.com,https://r360-ratings-mfe.qa.spratingsvpc.com,https://r360-ratings-mfe.alpha.cdnratings.spglobal.com,https://dev.ratings360demo.spglobal.com,https://qa.ratings360demo.spglobal.com,https://uat.ratings360demo.spglobal.com,https://ratings360dev.ratings.spglobal.com,https://ratings360qa.ratings.spglobal.com,https://ratings360alpha.ratings.spglobal.com,https://ratings360.ratings.spglobal.com,https://platform-as.ratings360stg.spglobal.com,https://platform-av.ratings360stg.spglobal.com,https://ratings360qa.ratings.spglobal.com,https://r360-sfratings-mfe.mfe.dev.spratingsvpc.com,https://r360-sfratings-mfe.mfe.alpha.spratingsvpc.com,https://platform-1-as.ratings360.spglobal.com,https://platform-1-av.ratings360.spglobal.com,https://platform-2-as.ratings360.spglobal.com,https://platform-2-av.ratings360.spglobal.com,https://ratings360alpha.ratings.spglobal.cn,https://ratings360.ratings.spglobal.cn,https://ratings360dev.ratings.spglobal.cn,https://ratings360qa.ratings.spglobal.cn,ekotron://ratings-studio

# RestTemplate Configuration
kratos.web.http.client.enabled=true
kratos.web.http.client.connectTimeoutMillis=6000
kratos.web.http.client.readTimeoutMillis=6000
server.error.include-message=always

# JDBC DataSource Configuration
kratos.datasource.jdbc.url=${JDBC_URL}
kratos.datasource.jdbc.driverClassName=oracle.jdbc.driver.OracleDriver
kratos.datasource.jdbc.username=${JDBC_USER}
kratos.datasource.jdbc.password=${database.pwd}
kratos.datasource.jdbc.poolName=RatingsDataHikariCP
kratos.datasource.jdbc.connectionTimeout=30000
kratos.datasource.jdbc.validationTimeout=5000
kratos.datasource.jdbc.idleTimeout=300000
kratos.datasource.jdbc.maxLifetime=2000000
kratos.datasource.jdbc.maxPoolSize=20
kratos.datasource.jdbc.minIdle=5
kratos.datasource.jdbc.leakDetectionThreshold=0
kratos.datasource.jdbc.initializationFailTimeout=1
kratos.datasource.jdbc.isAutoCommit=false

# for scheduler
entitlements.scheduler.fixedRate=${user.entitlements.scheduler.fixedRate}

financials.major.currencies =EUR,GBP,USD

#
## Redis Configuration
kratos.datasource.redis.url=${REDIS_CLUSTER}
kratos.datasource.redis.password=${elasticache.redis.auth.token}

contact.default.email=ratings360@spglobal.com

#spring.jpa.show-sql=true
#spring.jpa.properties.hibernate.format_sql=true

# private & confidential data access group
pc.data.mfa.group=R360_RTG_MFA_USERS

cn.entities.to.hide={107139,556473,110284}

r360.key.decryption=AES/CBC/PKCS5Padding
r360.key.decryption_rs=RSA/ECB/OAEPWithSHA-1AndMGF1Padding

#${CN_ENTITIES_TO_HIDE}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\main\resources\logback.xml

<!--
  ~ Copyright (c) 2022 by Standard & Poor's Financial Services LLC. All rights reserved.
  -->

<configuration>
    <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <pattern>
                    %d{yyyy-MM-dd HH:mm:ss.SSS} %-5level %logger{35}#%line - %msg %replace([service.name=${OTEL_SERVICE_NAME:- },deployment.environment=${SERVICE_ENV:- },trace_id=%X{trace_id},span_id=%X{span_id},trace_flags=%X{trace_flags}]){'\[service.name= ,deployment.environment= ,trace_id=,span_id=,trace_flags=\]',''} %n
            </pattern>
        </encoder>
    </appender>
    <root level="${KRATOS_ROOT_LOG_LEVEL:-INFO}">
        <appender-ref ref="CONSOLE"/>
    </root>
</configuration>


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\R360_AllArticles_Jan19_2024_release\R360_AllArticles_Jan19_2024_release_calling.sql

set scan off time on timing on
set sqlblanklines on
set define off
set echo on
spool R360_AllArticles_Jan19_2024_release_calling.log

DROP VIEW R360_APPDATA.VW_RATING_ARTICLES_PEERS;

/* Formatted on 1/9/2024 11:54:22 PM (QP5 v5.362) */
CREATE OR REPLACE FORCE VIEW R360_APPDATA.VW_RATING_ARTICLES_PEERS
(
    ENTITY_ID,
    ENTITY_NAME,
    ARTICLE_ID,
    TITLE,
    ARTICLE_TYPE,
    ARTICLE_DATE,
    AUTHOR,
    ARTICLE_TYPE_ID
)
BEQUEATH DEFINER
AS
    SELECT ra.entity_id,
           en.entity_name,
           ra.article_id,
           ra.title,
           ra.article_type,
           ra.article_date,
           ra.author,
           ra.article_type_id
      FROM r360_appdata.vw_rating_articles  ra
           INNER JOIN fgr.entity_names en ON ra.entity_id = en.entity_id
     WHERE en.curr_ind = 'Y';


GRANT SELECT ON R360_APPDATA.VW_RATING_ARTICLES_PEERS TO R360_APPDATA_READER;

DROP VIEW R360_APPDATA.VW_RATING_ARTICLES_CN_PEERS;

/* Formatted on 1/9/2024 11:58:24 PM (QP5 v5.362) */
CREATE OR REPLACE FORCE VIEW R360_APPDATA.VW_RATING_ARTICLES_CN_PEERS
(
    ENTITY_ID,
    ENTITY_NAME,
    ARTICLE_ID,
    TITLE,
    ARTICLE_TYPE,
    ARTICLE_DATE,
    AUTHOR,
    ARTICLE_TYPE_ID
)
BEQUEATH DEFINER
AS
    SELECT ra.entity_id,
           en.entity_name,
           ra.title,
           ra.article_id,
           ra.article_type,
           ra.article_date,
           ra.author,
           ra.article_type_id
      FROM r360_appdata.vw_rating_articles_cn  ra
           INNER JOIN fgr.entity_names en ON ra.entity_id = en.entity_id
     WHERE en.curr_ind = 'Y';


GRANT SELECT ON R360_APPDATA.VW_RATING_ARTICLES_CN_PEERS TO R360_APPDATA_READER;

spool off;


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\R360_AllArticles_Jan19_2024_release\R360_AllArticles_Jan19_2024_release_roll.sql

set scan off time on timing on
set sqlblanklines on
set define off
set echo on
spool R360_AllArticles_Jan19_2024_release_rollback.log

DROP VIEW R360_APPDATA.VW_RATING_ARTICLES_PEERS;

DROP VIEW R360_APPDATA.VW_RATING_ARTICLES_CN_PEERS;

spool off;


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\R360_CyberRiskAssessment\R360_CyberRiskAssessment_Release_Feb9th\DML\configuration_details_add_cra_configs_insert_scripts.sql

SET DEFINE OFF;
INSERT INTO  R360_APPDATA.CONFIGURATION_DETAILS(CONFIG_KEY, CONFIG_VALUE) VALUES ('CRA_Hydrob_Switch', 0);
INSERT INTO R360_APPDATA.CONFIGURATION_DETAILS(CONFIG_KEY, CONFIG_VALUES) VALUES ('NEXT_GEN_DATE', '2024-01-01T00:00:00');
COMMIT;


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\R360_CyberRiskAssessment\R360_CyberRiskAssessment_Release_Feb9th\DML\configuration_details_add_cra_configs_rollback_scripts.sql

SET DEFINE OFF;
Delete from R360_APPDATA.CONFIGURATION_DETAILS where config_key='CRA_Hydrob_Switch';
Delete from R360_APPDATA.CONFIGURATION_DETAILS where config_key='NEXT_GEN_DATE';
commit;


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\R360_CyberRiskAssessment\R360_CyberRiskAssessment_Release_Feb9th\R360_CyberRiskAssessment_Release_Feb9th_calling_scripts.sql

spool R360_CyberRiskAssessment_Release_Feb9th_calling_scripts.log 

@Views/VIEW_R360_APPDATA.VW_RATING_ANALYST_PEERS_CREATE.sql
@dml/configuration_details_add_cra_configs_insert_scripts.sql;


spool off


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\R360_CyberRiskAssessment\R360_CyberRiskAssessment_Release_Feb9th\R360_CyberRiskAssessment_Release_Feb9th_rollback_scripts.sql

spool R360_CyberRiskAssessment_Release_Feb9th_rollback_scripts.log 

@Views/VIEW_R360_APPDATA.VW_RATING_ANALYST_PEERS_ROLLBACK.sql
@dml/configuration_details_add_cra_configs_rollback_scripts.sql;


spool off


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\R360_CyberRiskAssessment\R360_CyberRiskAssessment_Release_Feb9th\Views\VIEW_R360_APPDATA.VW_RATING_ANALYST_PEERS_CREATE.sql

SET DEFINE OFF;

CREATE OR REPLACE FORCE VIEW R360_APPDATA.VW_RATING_ANALYST_PEERS
(
   CORE_ID,
   AP_OID_VENDOR,
   AP_FORM_ORDER,
   KEY_INSTN_ID,
   AP_KEY_INSTN_ID
)
AS
   SELECT tpa.CORE_ORG_ID AS CORE_ID,
          tpa.PEER_CORE_ORG_ID AS AP_OID_VENDOR,
          tpa.PEER_SORT_ORDER AS AP_FORM_ORDER,
          vwo.FINS_IDENTIFIER AS KEY_INSTN_ID,
          vw2.FINS_IDENTIFIER AS AP_KEY_INSTN_ID
     FROM PEERS.ANALYST_PEERS tpa
          INNER JOIN R360_APPDATA.VW_ORG_KEY_INST_ID_MAPPING vwo
             ON TO_CHAR (tpa.CORE_ORG_ID) = vwo.CORE_FINS_IDENTIFIER
          INNER JOIN R360_APPDATA.VW_ORG_KEY_INST_ID_MAPPING vw2
             ON TO_CHAR (tpa.PEER_CORE_ORG_ID) = vw2.CORE_FINS_IDENTIFIER;


GRANT SELECT ON R360_APPDATA.VW_RATING_ANALYST_PEERS TO R360_APPDATA_READER;

GRANT SELECT ON R360_APPDATA.VW_RATING_ANALYST_PEERS TO R360_APP_USER WITH GRANT OPTION;


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\R360_CyberRiskAssessment\R360_CyberRiskAssessment_Release_Feb9th\Views\VIEW_R360_APPDATA.VW_RATING_ANALYST_PEERS_ROLLBACK.sql

SET DEFINE OFF;
DROP VIEW R360_APPDATA.VW_RATING_ANALYST_PEERS;


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\R360_Index\R360_Index_Calling.sql

spool R360_Index_Calling.log 

@R360_Index_Scripts/create/vw_sov_research_summary.sql;

spool off


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\R360_Index\R360_Index_Rollback.sql

spool R360_Index_Rollback.log 

@R360_Index_Scripts/rollback/indexes_rollback.sql;

spool off


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\R360_Index\R360_Index_Scripts\create\indexes.sql

-- fgr.analytic_securities  

CREATE UNIQUE INDEX analytic_securities_ak ON fgr.analytic_securities  
	(source_object_id ASC, source_object_id_typ ASC) TABLESPACE RDSH_IS;

CREATE INDEX analytic_securities_idx ON fgr.analytic_securities  
	(instrument_id ASC) TABLESPACE RDSH_IS;

CREATE INDEX analytic_securities_sector_idx ON fgr.analytic_securities  
	(portfolio_sector, portfolio_sub_sector) TABLESPACE RDSH_IS;

-- fgr.analytic_sec_links   

ALTER TABLE fgr.analytic_sec_links  
	MODIFY (linked_object_id NOT NULL, linked_object_type NOT NULL, analytic_security_id  NOT NULL);

CREATE INDEX analytic_sec_links_asid_idx ON fgr.analytic_sec_links   
	(analytic_security_id ASC) TABLESPACE RDSH_IS;

CREATE INDEX analytic_sec_links_idx ON fgr.analytic_sec_links   
	(linked_object_id, linked_object_type) TABLESPACE RDSH_IS;

-- dsmpstg.r360_country_list	

CREATE INDEX is02_code_country_list_idx ON dsmpstg.r360_country_list
	(iso2_code) TABLESPACE RDSH_IS;
	
CREATE INDEX is03_code_country_list_idx ON dsmpstg.r360_country_list
	(iso3_code) TABLESPACE RDSH_IS;
	
CREATE INDEX bicra_spid_country_list_idx ON dsmpstg.r360_country_list
	(bicra_spid) TABLESPACE RDSH_IS;


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\R360_Index\R360_Index_Scripts\rollback\indexes_rollback.sql

-- fgr.analytic_securities  

DROP INDEX analytic_securities_ak;

DROP INDEX analytic_securities_idx;

DROP INDEX analytic_securities_sector_idx;

-- fgr.analytic_sec_links   

ALTER TABLE fgr.analytic_sec_links  
	MODIFY (linked_object_id NULL, linked_object_type NULL, analytic_security_id NULL);

DROP INDEX analytic_sec_links_asid_idx;

DROP INDEX analytic_sec_links_idx;

-- dsmpstg.r360_country_list	

DROP INDEX is02_code_country_list_idx;
	
DROP INDEX is03_code_country_list_idx;

DROP INDEX bicra_spid_country_list_idx;


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\R360_InvestorSentiment_Sep15_Release\R360IVS_Release_Sep15th_2023_Calling.sql

spool R360IVS_Release_Sep15_2023_calling.log 

@R360IVS_Release_Sep15_2023/ddl/RATING_MI_INDUSTRY_MAP_DDL.sql;
@R360IVS_Release_Sep15_2023/dml/RATING_MI_INDUSTRY_MAP_DML.sql;
@R360IVS_Release_Sep15_2023/views/VW_ENTITY_INV_SEN_INDUSTRY.sql;

spool off


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\R360_InvestorSentiment_Sep15_Release\R360IVS_Release_Sep15th_2023_Rollback.sql

spool R360IVS_Release_Sep15_2023_Rollback.log 

@R360IVS_Release_Sep15_2023/rollback/VW_ENTITY_INV_SEN_INDUSTRY_ROLLBACK.sql;
@R360IVS_Release_Sep15_2023/rollback/RATING_MI_INDUSTRY_MAP_DROP.sql;

spool off


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\R360_InvestorSentiment_Sep15_Release\R360IVS_Release_Sep15_2023\ddl\RATING_MI_INDUSTRY_MAP_DDL.sql

CREATE TABLE R360_APPDATA.RATING_MI_INDUSTRY_MAP
(
    RATING_INDUSTRY_TREE_ID INTEGER  NOT NULL ,
     MI_INDUSTRY_NAME     VARCHAR2(150)  NOT NULL ,
    PARENT_RATING_INDUSTRY_TREE_ID INTEGER  NULL ,
    TREE_ID              INTEGER  NULL ,
    INDUSTRY_CATERGORY   VARCHAR2(20)  NOT NULL ,
    RATING_INDUSTRY_CODE VARCHAR2(100)  NOT NULL ,
    ACTV_FLAG            VARCHAR2(1)  DEFAULT 'Y'  NOT NULL ,
    CREATE_DTTM          DATE  DEFAULT SYSDATE  NOT NULL ,
    CREATE_USER          VARCHAR2(20)  NOT NULL ,
    UPDATE_DTTM          DATE  NULL ,
    UPDATE_USER          VARCHAR2(20)  NULL 
)TABLESPACE R360_APPDATA_TS;

COMMENT ON TABLE R360_APPDATA.RATING_MI_INDUSTRY_MAP IS 'RATING to MI industry map for reference. Till its migrated to RATING fully. For backward compatability.';

COMMENT ON COLUMN R360_APPDATA.RATING_MI_INDUSTRY_MAP.CREATE_DTTM IS 'The date and time that this record was created. This column usually appears if there is no start and end dates defined for the record.';

COMMENT ON COLUMN R360_APPDATA.RATING_MI_INDUSTRY_MAP.CREATE_USER IS 'The ID (usually LDAP Text or login used by the process) of the user that created this record.';

COMMENT ON COLUMN R360_APPDATA.RATING_MI_INDUSTRY_MAP.UPDATE_DTTM IS 'The date and time that this record was last updated.  This column usually appears if there is no start and end dates defined for the record.';

COMMENT ON COLUMN R360_APPDATA.RATING_MI_INDUSTRY_MAP.UPDATE_USER IS 'The ID (usually LDAP Text or login used by the process) of the user that last updated this record.';

COMMENT ON COLUMN R360_APPDATA.RATING_MI_INDUSTRY_MAP.MI_INDUSTRY_NAME IS 'Industry name or the name of the tree';

COMMENT ON COLUMN R360_APPDATA.RATING_MI_INDUSTRY_MAP.ACTV_FLAG IS 'Y/N that specifies whether the record is active';

CREATE UNIQUE INDEX INDUSTRY_MAP_PK ON R360_APPDATA.RATING_MI_INDUSTRY_MAP
(RATING_INDUSTRY_TREE_ID   ASC)TABLESPACE R360_APPDATA_IS;

ALTER TABLE R360_APPDATA.RATING_MI_INDUSTRY_MAP
    ADD CONSTRAINT  INDUSTRY_MAP_PK PRIMARY KEY (RATING_INDUSTRY_TREE_ID);

CREATE UNIQUE INDEX INDUSTRY_MAP_AK ON R360_APPDATA.RATING_MI_INDUSTRY_MAP
(RATING_INDUSTRY_CODE   ASC,INDUSTRY_CATERGORY   ASC,MI_INDUSTRY_NAME   ASC)TABLESPACE R360_APPDATA_IS;

ALTER TABLE R360_APPDATA.RATING_MI_INDUSTRY_MAP
ADD 
CONSTRAINT  INDUSTRY_MAP_AK UNIQUE (RATING_INDUSTRY_CODE,INDUSTRY_CATERGORY,MI_INDUSTRY_NAME);



GRANT SELECT ON     R360_APPDATA.RATING_MI_INDUSTRY_MAP     TO R360_APPDATA_READER; 


GRANT SELECT,
      INSERT,
      UPDATE,
      DELETE
   ON    R360_APPDATA.RATING_MI_INDUSTRY_MAP    TO R360_APPDATA_WRITER;


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\R360_InvestorSentiment_Sep15_Release\R360IVS_Release_Sep15_2023\dml\RATING_MI_INDUSTRY_MAP_DML.sql

SET DEFINE OFF;

INSERT INTO r360_appdata.rating_mi_industry_map (rating_industry_tree_id, mi_industry_name, rating_industry_code, parent_rating_industry_tree_id, tree_id, industry_catergory, create_user) VALUES (242, 'Global Issuer', 'GLOBISS', 240, 240, 0, USER);
INSERT INTO r360_appdata.rating_mi_industry_map (rating_industry_tree_id, mi_industry_name, rating_industry_code, parent_rating_industry_tree_id, tree_id, industry_catergory, create_user) VALUES (243, 'Corporates', 'CORP', 242, 240, 1, USER);
INSERT INTO r360_appdata.rating_mi_industry_map (rating_industry_tree_id, mi_industry_name, rating_industry_code, parent_rating_industry_tree_id, tree_id, industry_catergory, create_user) VALUES (244, 'Financial Institutions', 'FI', 242, 240, 1, USER);
INSERT INTO r360_appdata.rating_mi_industry_map (rating_industry_tree_id, mi_industry_name, rating_industry_code, parent_rating_industry_tree_id, tree_id, industry_catergory, create_user) VALUES (245, 'Governments', 'GOVS', 242, 240, 1, USER);
INSERT INTO r360_appdata.rating_mi_industry_map (rating_industry_tree_id, mi_industry_name, rating_industry_code, parent_rating_industry_tree_id, tree_id, industry_catergory, create_user) VALUES (246, 'Insurance', 'INS', 242, 240, 1, USER);
INSERT INTO r360_appdata.rating_mi_industry_map (rating_industry_tree_id, mi_industry_name, rating_industry_code, parent_rating_industry_tree_id, tree_id, industry_catergory, create_user) VALUES (247, 'Project Finance', 'PROJFIN', 242, 240, 1, USER);
INSERT INTO r360_appdata.rating_mi_industry_map (rating_industry_tree_id, mi_industry_name, rating_industry_code, parent_rating_industry_tree_id, tree_id, industry_catergory, create_user) VALUES (248, 'Sovereigns', 'SOV', 242, 240, 1, USER);
INSERT INTO r360_appdata.rating_mi_industry_map (rating_industry_tree_id, mi_industry_name, rating_industry_code, parent_rating_industry_tree_id, tree_id, industry_catergory, create_user) VALUES (249, 'Utilities', 'UTIL', 242, 240, 1, USER);
INSERT INTO r360_appdata.rating_mi_industry_map (rating_industry_tree_id, mi_industry_name, rating_industry_code, parent_rating_industry_tree_id, tree_id, industry_catergory, create_user) VALUES (250, 'Sovereign Related', 'SOVR', 242, 240, 1, USER);
INSERT INTO r360_appdata.rating_mi_industry_map (rating_industry_tree_id, mi_industry_name, rating_industry_code, parent_rating_industry_tree_id, tree_id, industry_catergory, create_user) VALUES (251, 'Aerospace & Defense', '1', 243, 240, 2, USER);
INSERT INTO r360_appdata.rating_mi_industry_map (rating_industry_tree_id, mi_industry_name, rating_industry_code, parent_rating_industry_tree_id, tree_id, industry_catergory, create_user) VALUES (252, 'Automobiles & Components', '2', 243, 240, 2, USER);
INSERT INTO r360_appdata.rating_mi_industry_map (rating_industry_tree_id, mi_industry_name, rating_industry_code, parent_rating_industry_tree_id, tree_id, industry_catergory, create_user) VALUES (253, 'Building Materials', '3', 243, 240, 2, USER);
INSERT INTO r360_appdata.rating_mi_industry_map (rating_industry_tree_id, mi_industry_name, rating_industry_code, parent_rating_industry_tree_id, tree_id, industry_catergory, create_user) VALUES (254, 'Business and Consumer Services', 'BUSCONS', 243, 240, 2, USER);
INSERT INTO r360_appdata.rating_mi_industry_map (rating_industry_tree_id, mi_industry_name, rating_industry_code, parent_rating_industry_tree_id, tree_id, industry_catergory, create_user) VALUES (255, 'Capital Goods', '4', 243, 240, 2, USER);
INSERT INTO r360_appdata.rating_mi_industry_map (rating_industry_tree_id, mi_industry_name, rating_industry_code, parent_rating_industry_tree_id, tree_id, industry_catergory, create_user) VALUES (256, 'Chemicals', '5', 243, 240, 2, USER);
INSERT INTO r360_appdata.rating_mi_industry_map (rating_industry_tree_id, mi_industry_name, rating_industry_code, parent_rating_industry_tree_id, tree_id, industry_catergory, create_user) VALUES (257, 'Commercial & Professional Services', '7', 243, 240, 2, USER);
INSERT INTO r360_appdata.rating_mi_industry_map (rating_industry_tree_id, mi_industry_name, rating_industry_code, parent_rating_industry_tree_id, tree_id, industry_catergory, create_user) VALUES (258, 'Consumer Products', '6', 243, 240, 2, USER);
INSERT INTO r360_appdata.rating_mi_industry_map (rating_industry_tree_id, mi_industry_name, rating_industry_code, parent_rating_industry_tree_id, tree_id, industry_catergory, create_user) VALUES (259, 'Containers & Packaging', '13', 243, 240, 2, USER);
INSERT INTO r360_appdata.rating_mi_industry_map (rating_industry_tree_id, mi_industry_name, rating_industry_code, parent_rating_industry_tree_id, tree_id, industry_catergory, create_user) VALUES (260, 'Diversified Real Estate Activities', '60102010', 243, 240, 2, USER);
INSERT INTO r360_appdata.rating_mi_industry_map (rating_industry_tree_id, mi_industry_name, rating_industry_code, parent_rating_industry_tree_id, tree_id, industry_catergory, create_user) VALUES (261, 'Diversified REITs', '60101010', 243, 240, 2, USER);
INSERT INTO r360_appdata.rating_mi_industry_map (rating_industry_tree_id, mi_industry_name, rating_industry_code, parent_rating_industry_tree_id, tree_id, industry_catergory, create_user) VALUES (262, 'Energy', '20', 243, 240, 2, USER);
INSERT INTO r360_appdata.rating_mi_industry_map (rating_industry_tree_id, mi_industry_name, rating_industry_code, parent_rating_industry_tree_id, tree_id, industry_catergory, create_user) VALUES (263, 'Health Care', '8', 243, 240, 2, USER);
INSERT INTO r360_appdata.rating_mi_industry_map (rating_industry_tree_id, mi_industry_name, rating_industry_code, parent_rating_industry_tree_id, tree_id, industry_catergory, create_user) VALUES (264, 'Homebuilding', '10', 243, 240, 2, USER);
INSERT INTO r360_appdata.rating_mi_industry_map (rating_industry_tree_id, mi_industry_name, rating_industry_code, parent_rating_industry_tree_id, tree_id, industry_catergory, create_user) VALUES (265, 'Hotel & Resort REITs', '60101030', 243, 240, 2, USER);
INSERT INTO r360_appdata.rating_mi_industry_map (rating_industry_tree_id, mi_industry_name, rating_industry_code, parent_rating_industry_tree_id, tree_id, industry_catergory, create_user) VALUES (266, 'Hotels & Gaming', '26', 243, 240, 2, USER);
INSERT INTO r360_appdata.rating_mi_industry_map (rating_industry_tree_id, mi_industry_name, rating_industry_code, parent_rating_industry_tree_id, tree_id, industry_catergory, create_user) VALUES (267, 'Industrial REITs', '60101020', 243, 240, 2, USER);
INSERT INTO r360_appdata.rating_mi_industry_map (rating_industry_tree_id, mi_industry_name, rating_industry_code, parent_rating_industry_tree_id, tree_id, industry_catergory, create_user) VALUES (268, 'Information Technology', '9', 243, 240, 2, USER);
INSERT INTO r360_appdata.rating_mi_industry_map (rating_industry_tree_id, mi_industry_name, rating_industry_code, parent_rating_industry_tree_id, tree_id, industry_catergory, create_user) VALUES (269, 'Media & Entertainment', '11', 243, 240, 2, USER);
INSERT INTO r360_appdata.rating_mi_industry_map (rating_industry_tree_id, mi_industry_name, rating_industry_code, parent_rating_industry_tree_id, tree_id, industry_catergory, create_user) VALUES (270, 'Metals & Mining', '12', 243, 240, 2, USER);
INSERT INTO r360_appdata.rating_mi_industry_map (rating_industry_tree_id, mi_industry_name, rating_industry_code, parent_rating_industry_tree_id, tree_id, industry_catergory, create_user) VALUES (271, 'Mortgage REITs', '40204010', 243, 240, 2, USER);
INSERT INTO r360_appdata.rating_mi_industry_map (rating_industry_tree_id, mi_industry_name, rating_industry_code, parent_rating_industry_tree_id, tree_id, industry_catergory, create_user) VALUES (272, 'Office REITs', '60101040', 243, 240, 2, USER);
INSERT INTO r360_appdata.rating_mi_industry_map (rating_industry_tree_id, mi_industry_name, rating_industry_code, parent_rating_industry_tree_id, tree_id, industry_catergory, create_user) VALUES (273, 'Paper & Forest Products', '21', 243, 240, 2, USER);
INSERT INTO r360_appdata.rating_mi_industry_map (rating_industry_tree_id, mi_industry_name, rating_industry_code, parent_rating_industry_tree_id, tree_id, industry_catergory, create_user) VALUES (274, 'Property & Real Estate', 'PROPRE', 243, 240, 2, USER);
INSERT INTO r360_appdata.rating_mi_industry_map (rating_industry_tree_id, mi_industry_name, rating_industry_code, parent_rating_industry_tree_id, tree_id, industry_catergory, create_user) VALUES (275, 'Real Estate Development', '60102030', 243, 240, 2, USER);
INSERT INTO r360_appdata.rating_mi_industry_map (rating_industry_tree_id, mi_industry_name, rating_industry_code, parent_rating_industry_tree_id, tree_id, industry_catergory, create_user) VALUES (276, 'Real Estate Operating Companies', '60102020', 243, 240, 2, USER);
INSERT INTO r360_appdata.rating_mi_industry_map (rating_industry_tree_id, mi_industry_name, rating_industry_code, parent_rating_industry_tree_id, tree_id, industry_catergory, create_user) VALUES (277, 'Real Estate Services', '60102040', 243, 240, 2, USER);
INSERT INTO r360_appdata.rating_mi_industry_map (rating_industry_tree_id, mi_industry_name, rating_industry_code, parent_rating_industry_tree_id, tree_id, industry_catergory, create_user) VALUES (278, 'Residential REITs', '60101060', 243, 240, 2, USER);
INSERT INTO r360_appdata.rating_mi_industry_map (rating_industry_tree_id, mi_industry_name, rating_industry_code, parent_rating_industry_tree_id, tree_id, industry_catergory, create_user) VALUES (279, 'Retail REITs', '60101070', 243, 240, 2, USER);
INSERT INTO r360_appdata.rating_mi_industry_map (rating_industry_tree_id, mi_industry_name, rating_industry_code, parent_rating_industry_tree_id, tree_id, industry_catergory, create_user) VALUES (280, 'Retailing', '14', 243, 240, 2, USER);
INSERT INTO r360_appdata.rating_mi_industry_map (rating_industry_tree_id, mi_industry_name, rating_industry_code, parent_rating_industry_tree_id, tree_id, industry_catergory, create_user) VALUES (281, 'Specialized REITs', '60101080', 243, 240, 2, USER);
INSERT INTO r360_appdata.rating_mi_industry_map (rating_industry_tree_id, mi_industry_name, rating_industry_code, parent_rating_industry_tree_id, tree_id, industry_catergory, create_user) VALUES (282, 'Telecom Services', '15', 243, 240, 2, USER);
INSERT INTO r360_appdata.rating_mi_industry_map (rating_industry_tree_id, mi_industry_name, rating_industry_code, parent_rating_industry_tree_id, tree_id, industry_catergory, create_user) VALUES (283, 'Transportation', '16', 243, 240, 2, USER);
INSERT INTO r360_appdata.rating_mi_industry_map (rating_industry_tree_id, mi_industry_name, rating_industry_code, parent_rating_industry_tree_id, tree_id, industry_catergory, create_user) VALUES (284, 'Asset Manager', 'ASSTMNGR', 244, 240, 2, USER);
INSERT INTO r360_appdata.rating_mi_industry_map (rating_industry_tree_id, mi_industry_name, rating_industry_code, parent_rating_industry_tree_id, tree_id, industry_catergory, create_user) VALUES (285, 'Bank', 'BANK', 244, 240, 2, USER);
INSERT INTO r360_appdata.rating_mi_industry_map (rating_industry_tree_id, mi_industry_name, rating_industry_code, parent_rating_industry_tree_id, tree_id, industry_catergory, create_user) VALUES (286, 'Bank Holding Company', 'BANKHLDCO', 244, 240, 2, USER);
INSERT INTO r360_appdata.rating_mi_industry_map (rating_industry_tree_id, mi_industry_name, rating_industry_code, parent_rating_industry_tree_id, tree_id, industry_catergory, create_user) VALUES (287, 'Bank Subsidiary', 'BANKSUB', 244, 240, 2, USER);
INSERT INTO r360_appdata.rating_mi_industry_map (rating_industry_tree_id, mi_industry_name, rating_industry_code, parent_rating_industry_tree_id, tree_id, industry_catergory, create_user) VALUES (288, 'Building Society', 'BLDGSCTY', 244, 240, 2, USER);
INSERT INTO r360_appdata.rating_mi_industry_map (rating_industry_tree_id, mi_industry_name, rating_industry_code, parent_rating_industry_tree_id, tree_id, industry_catergory, create_user) VALUES (289, 'Brokerage Company', 'BROKERCO', 244, 240, 2, USER);
INSERT INTO r360_appdata.rating_mi_industry_map (rating_industry_tree_id, mi_industry_name, rating_industry_code, parent_rating_industry_tree_id, tree_id, industry_catergory, create_user) VALUES (290, 'Business Trust', 'BUSTRUST', 244, 240, 2, USER);
INSERT INTO r360_appdata.rating_mi_industry_map (rating_industry_tree_id, mi_industry_name, rating_industry_code, parent_rating_industry_tree_id, tree_id, industry_catergory, create_user) VALUES (291, 'Credit Union', 'CRUNION', 244, 240, 2, USER);
INSERT INTO r360_appdata.rating_mi_industry_map (rating_industry_tree_id, mi_industry_name, rating_industry_code, parent_rating_industry_tree_id, tree_id, industry_catergory, create_user) VALUES (292, 'Exchanges & Clearing Corporations', 'EXCHCLRGCP', 244, 240, 2, USER);
INSERT INTO r360_appdata.rating_mi_industry_map (rating_industry_tree_id, mi_industry_name, rating_industry_code, parent_rating_industry_tree_id, tree_id, industry_catergory, create_user) VALUES (293, 'Finance Company', 'FINANCECO', 244, 240, 2, USER);
INSERT INTO r360_appdata.rating_mi_industry_map (rating_industry_tree_id, mi_industry_name, rating_industry_code, parent_rating_industry_tree_id, tree_id, industry_catergory, create_user) VALUES (294, 'Financial Service Company', 'FINANCESCO_FI', 244, 240, 2, USER);
INSERT INTO r360_appdata.rating_mi_industry_map (rating_industry_tree_id, mi_industry_name, rating_industry_code, parent_rating_industry_tree_id, tree_id, industry_catergory, create_user) VALUES (295, 'Financial Institution', 'FINANCINST', 244, 240, 2, USER);
INSERT INTO r360_appdata.rating_mi_industry_map (rating_industry_tree_id, mi_industry_name, rating_industry_code, parent_rating_industry_tree_id, tree_id, industry_catergory, create_user) VALUES (296, 'Funds', 'FUNDS', 244, 240, 2, USER);
INSERT INTO r360_appdata.rating_mi_industry_map (rating_industry_tree_id, mi_industry_name, rating_industry_code, parent_rating_industry_tree_id, tree_id, industry_catergory, create_user) VALUES (297, 'Government Agencies', 'GOVTAGYS', 244, 240, 2, USER);
INSERT INTO r360_appdata.rating_mi_industry_map (rating_industry_tree_id, mi_industry_name, rating_industry_code, parent_rating_industry_tree_id, tree_id, industry_catergory, create_user) VALUES (298, 'Grantor Trust', 'GRANTRUST', 244, 240, 2, USER);
INSERT INTO r360_appdata.rating_mi_industry_map (rating_industry_tree_id, mi_industry_name, rating_industry_code, parent_rating_industry_tree_id, tree_id, industry_catergory, create_user) VALUES (299, 'Mortgage Institution', 'MORINST', 244, 240, 2, USER);
INSERT INTO r360_appdata.rating_mi_industry_map (rating_industry_tree_id, mi_industry_name, rating_industry_code, parent_rating_industry_tree_id, tree_id, industry_catergory, create_user) VALUES (300, 'Real Estate Investment Trust', 'REALESTINV', 244, 240, 2, USER);
INSERT INTO r360_appdata.rating_mi_industry_map (rating_industry_tree_id, mi_industry_name, rating_industry_code, parent_rating_industry_tree_id, tree_id, industry_catergory, create_user) VALUES (301, 'Savings & Loan Company', 'SAVLOANCO', 244, 240, 2, USER);
INSERT INTO r360_appdata.rating_mi_industry_map (rating_industry_tree_id, mi_industry_name, rating_industry_code, parent_rating_industry_tree_id, tree_id, industry_catergory, create_user) VALUES (302, 'Health Care REITs', '60101050', 244, 240, 2, USER);
INSERT INTO r360_appdata.rating_mi_industry_map (rating_industry_tree_id, mi_industry_name, rating_industry_code, parent_rating_industry_tree_id, tree_id, industry_catergory, create_user) VALUES (303, 'Holding Company', 'HOLDCO', 244, 240, 2, USER);
INSERT INTO r360_appdata.rating_mi_industry_map (rating_industry_tree_id, mi_industry_name, rating_industry_code, parent_rating_industry_tree_id, tree_id, industry_catergory, create_user) VALUES (304, 'Branch', 'BRANCH', 244, 240, 2, USER);
INSERT INTO r360_appdata.rating_mi_industry_map (rating_industry_tree_id, mi_industry_name, rating_industry_code, parent_rating_industry_tree_id, tree_id, industry_catergory, create_user) VALUES (305, 'Private Equity Fund', 'PRVEQTFNDS', 244, 240, 2, USER);
INSERT INTO r360_appdata.rating_mi_industry_map (rating_industry_tree_id, mi_industry_name, rating_industry_code, parent_rating_industry_tree_id, tree_id, industry_catergory, create_user) VALUES (306, 'Hedge Fund', 'HEDGEF', 244, 240, 2, USER);
INSERT INTO r360_appdata.rating_mi_industry_map (rating_industry_tree_id, mi_industry_name, rating_industry_code, parent_rating_industry_tree_id, tree_id, industry_catergory, create_user) VALUES (307, 'Structured Investment Vehicle', 'STRUCINVEH', 244, 240, 2, USER);
INSERT INTO r360_appdata.rating_mi_industry_map (rating_industry_tree_id, mi_industry_name, rating_industry_code, parent_rating_industry_tree_id, tree_id, industry_catergory, create_user) VALUES (308, 'Financial Guaranty', 'FINANCEGCO', 246, 240, 2, USER);
INSERT INTO r360_appdata.rating_mi_industry_map (rating_industry_tree_id, mi_industry_name, rating_industry_code, parent_rating_industry_tree_id, tree_id, industry_catergory, create_user) VALUES (309, 'Financial Service Company', 'FINANCESCO_INS', 246, 240, 2, USER);
INSERT INTO r360_appdata.rating_mi_industry_map (rating_industry_tree_id, mi_industry_name, rating_industry_code, parent_rating_industry_tree_id, tree_id, industry_catergory, create_user) VALUES (310, 'Holding & Other Investment Offices', 'HLDGINVEST', 246, 240, 2, USER);
INSERT INTO r360_appdata.rating_mi_industry_map (rating_industry_tree_id, mi_industry_name, rating_industry_code, parent_rating_industry_tree_id, tree_id, industry_catergory, create_user) VALUES (311, 'Health Plans', 'HLTHSVCS', 246, 240, 2, USER);
INSERT INTO r360_appdata.rating_mi_industry_map (rating_industry_tree_id, mi_industry_name, rating_industry_code, parent_rating_industry_tree_id, tree_id, industry_catergory, create_user) VALUES (312, 'Insurance Services', 'INSUREBROK', 246, 240, 2, USER);
INSERT INTO r360_appdata.rating_mi_industry_map (rating_industry_tree_id, mi_industry_name, rating_industry_code, parent_rating_industry_tree_id, tree_id, industry_catergory, create_user) VALUES (313, 'Holding Company', 'INSUREHLCO', 246, 240, 2, USER);
INSERT INTO r360_appdata.rating_mi_industry_map (rating_industry_tree_id, mi_industry_name, rating_industry_code, parent_rating_industry_tree_id, tree_id, industry_catergory, create_user) VALUES (314, 'Life Insurance', 'LIFEINSCO', 246, 240, 2, USER);
INSERT INTO r360_appdata.rating_mi_industry_map (rating_industry_tree_id, mi_industry_name, rating_industry_code, parent_rating_industry_tree_id, tree_id, industry_catergory, create_user) VALUES (315, 'Lloyds Syndicate', 'LLOYDS', 246, 240, 2, USER);
INSERT INTO r360_appdata.rating_mi_industry_map (rating_industry_tree_id, mi_industry_name, rating_industry_code, parent_rating_industry_tree_id, tree_id, industry_catergory, create_user) VALUES (316, 'Mortgage Insurance', 'MORINSCO', 246, 240, 2, USER);
INSERT INTO r360_appdata.rating_mi_industry_map (rating_industry_tree_id, mi_industry_name, rating_industry_code, parent_rating_industry_tree_id, tree_id, industry_catergory, create_user) VALUES (317, 'Multiline Insurance', 'MULTILNINS', 246, 240, 2, USER);
INSERT INTO r360_appdata.rating_mi_industry_map (rating_industry_tree_id, mi_industry_name, rating_industry_code, parent_rating_industry_tree_id, tree_id, industry_catergory, create_user) VALUES (318, 'Property/Casualty Insurance', 'PROPCASUC', 246, 240, 2, USER);
INSERT INTO r360_appdata.rating_mi_industry_map (rating_industry_tree_id, mi_industry_name, rating_industry_code, parent_rating_industry_tree_id, tree_id, industry_catergory, create_user) VALUES (319, 'Reinsurance', 'REINSURER', 246, 240, 2, USER);
INSERT INTO r360_appdata.rating_mi_industry_map (rating_industry_tree_id, mi_industry_name, rating_industry_code, parent_rating_industry_tree_id, tree_id, industry_catergory, create_user) VALUES (320, 'Special Purpose Company', 'SPLPURPCO', 246, 240, 2, USER);
INSERT INTO r360_appdata.rating_mi_industry_map (rating_industry_tree_id, mi_industry_name, rating_industry_code, parent_rating_industry_tree_id, tree_id, industry_catergory, create_user) VALUES (321, 'Title Insurance', 'TITINSCO', 246, 240, 2, USER);
INSERT INTO r360_appdata.rating_mi_industry_map (rating_industry_tree_id, mi_industry_name, rating_industry_code, parent_rating_industry_tree_id, tree_id, industry_catergory, create_user) VALUES (322, 'Insurance TPA', 'INSURETPA', 246, 240, 2, USER);
INSERT INTO r360_appdata.rating_mi_industry_map (rating_industry_tree_id, mi_industry_name, rating_industry_code, parent_rating_industry_tree_id, tree_id, industry_catergory, create_user) VALUES (323, 'Healthcare Services', 'HEALTSERV', 246, 240, 2, USER);
INSERT INTO r360_appdata.rating_mi_industry_map (rating_industry_tree_id, mi_industry_name, rating_industry_code, parent_rating_industry_tree_id, tree_id, industry_catergory, create_user) VALUES (324, 'Bond Insurance', 'BONDINS', 246, 240, 2, USER);
INSERT INTO r360_appdata.rating_mi_industry_map (rating_industry_tree_id, mi_industry_name, rating_industry_code, parent_rating_industry_tree_id, tree_id, industry_catergory, create_user) VALUES (325, 'Health Insurance', 'HLTHINS', 246, 240, 2, USER);
INSERT INTO r360_appdata.rating_mi_industry_map (rating_industry_tree_id, mi_industry_name, rating_industry_code, parent_rating_industry_tree_id, tree_id, industry_catergory, create_user) VALUES (326, 'Credit & Surety Insurance', 'CRDSURINS', 246, 240, 2, USER);
INSERT INTO r360_appdata.rating_mi_industry_map (rating_industry_tree_id, mi_industry_name, rating_industry_code, parent_rating_industry_tree_id, tree_id, industry_catergory, create_user) VALUES (327, 'Project-Natural Resources/Mining', 'PRONATRESM', 247, 240, 2, USER);
INSERT INTO r360_appdata.rating_mi_industry_map (rating_industry_tree_id, mi_industry_name, rating_industry_code, parent_rating_industry_tree_id, tree_id, industry_catergory, create_user) VALUES (328, 'Project-Oil & Gas', 'PROOILGAS', 247, 240, 2, USER);
INSERT INTO r360_appdata.rating_mi_industry_map (rating_industry_tree_id, mi_industry_name, rating_industry_code, parent_rating_industry_tree_id, tree_id, industry_catergory, create_user) VALUES (329, 'Project-Power', 'PROPOWER', 247, 240, 2, USER);
INSERT INTO r360_appdata.rating_mi_industry_map (rating_industry_tree_id, mi_industry_name, rating_industry_code, parent_rating_industry_tree_id, tree_id, industry_catergory, create_user) VALUES (330, 'Project-Public Finance initiative/Real Estate', 'PROPUBFIRE', 247, 240, 2, USER);
INSERT INTO r360_appdata.rating_mi_industry_map (rating_industry_tree_id, mi_industry_name, rating_industry_code, parent_rating_industry_tree_id, tree_id, industry_catergory, create_user) VALUES (331, 'Project-telecom', 'PROTELECOM', 247, 240, 2, USER);
INSERT INTO r360_appdata.rating_mi_industry_map (rating_industry_tree_id, mi_industry_name, rating_industry_code, parent_rating_industry_tree_id, tree_id, industry_catergory, create_user) VALUES (332, 'Project-Transport', 'PROTRNSPRT', 247, 240, 2, USER);
INSERT INTO r360_appdata.rating_mi_industry_map (rating_industry_tree_id, mi_industry_name, rating_industry_code, parent_rating_industry_tree_id, tree_id, industry_catergory, create_user) VALUES (333, 'Gas', '17', 249, 240, 2, USER);
INSERT INTO r360_appdata.rating_mi_industry_map (rating_industry_tree_id, mi_industry_name, rating_industry_code, parent_rating_industry_tree_id, tree_id, industry_catergory, create_user) VALUES (334, 'Water', '18', 249, 240, 2, USER);
INSERT INTO r360_appdata.rating_mi_industry_map (rating_industry_tree_id, mi_industry_name, rating_industry_code, parent_rating_industry_tree_id, tree_id, industry_catergory, create_user) VALUES (335, 'Electric', '19', 249, 240, 2, USER);
INSERT INTO r360_appdata.rating_mi_industry_map (rating_industry_tree_id, mi_industry_name, rating_industry_code, parent_rating_industry_tree_id, tree_id, industry_catergory, create_user) VALUES (336, 'Multi', '27', 249, 240, 2, USER);
INSERT INTO r360_appdata.rating_mi_industry_map (rating_industry_tree_id, mi_industry_name, rating_industry_code, parent_rating_industry_tree_id, tree_id, industry_catergory, create_user) VALUES (337, 'Public Finance', 'PUBFIN', 240, 240, 0, USER);
INSERT INTO r360_appdata.rating_mi_industry_map (rating_industry_tree_id, mi_industry_name, rating_industry_code, parent_rating_industry_tree_id, tree_id, industry_catergory, create_user) VALUES (338, 'Public Finance', 'PUBFIN_SS', 337, 240, 1, USER);
INSERT INTO r360_appdata.rating_mi_industry_map (rating_industry_tree_id, mi_industry_name, rating_industry_code, parent_rating_industry_tree_id, tree_id, industry_catergory, create_user) VALUES (339, 'Structured Finance', 'STRUC', 240, 240, 0, USER);
INSERT INTO r360_appdata.rating_mi_industry_map (rating_industry_tree_id, mi_industry_name, rating_industry_code, parent_rating_industry_tree_id, tree_id, industry_catergory, create_user) VALUES (340, 'Asset-Backed Commercial Paper', 'ABCP', 339, 240, 1, USER);
INSERT INTO r360_appdata.rating_mi_industry_map (rating_industry_tree_id, mi_industry_name, rating_industry_code, parent_rating_industry_tree_id, tree_id, industry_catergory, create_user) VALUES (341, 'Asset-Backed Securities', 'ABS', 339, 240, 1, USER);
INSERT INTO r360_appdata.rating_mi_industry_map (rating_industry_tree_id, mi_industry_name, rating_industry_code, parent_rating_industry_tree_id, tree_id, industry_catergory, create_user) VALUES (342, 'Commercial Mortgage Backed Securities', 'CMBS', 339, 240, 1, USER);
INSERT INTO r360_appdata.rating_mi_industry_map (rating_industry_tree_id, mi_industry_name, rating_industry_code, parent_rating_industry_tree_id, tree_id, industry_catergory, create_user) VALUES (343, 'Residential Mortgage Backed Securities', 'RMBS', 339, 240, 1, USER);
INSERT INTO r360_appdata.rating_mi_industry_map (rating_industry_tree_id, mi_industry_name, rating_industry_code, parent_rating_industry_tree_id, tree_id, industry_catergory, create_user) VALUES (344, 'Real Estate Companies', 'REC', 339, 240, 1, USER);
INSERT INTO r360_appdata.rating_mi_industry_map (rating_industry_tree_id, mi_industry_name, rating_industry_code, parent_rating_industry_tree_id, tree_id, industry_catergory, create_user) VALUES (345, 'Structured Credit', 'CDO', 339, 240, 1, USER);
INSERT INTO r360_appdata.rating_mi_industry_map (rating_industry_tree_id, mi_industry_name, rating_industry_code, parent_rating_industry_tree_id, tree_id, industry_catergory, create_user) VALUES (346, 'Servicer Evaluations', 'SE', 339, 240, 1, USER);
INSERT INTO r360_appdata.rating_mi_industry_map (rating_industry_tree_id, mi_industry_name, rating_industry_code, parent_rating_industry_tree_id, tree_id, industry_catergory, create_user) VALUES (347, 'Infrastructure', 'INFRA', 240, 240, 0, USER);
INSERT INTO r360_appdata.rating_mi_industry_map (rating_industry_tree_id, mi_industry_name, rating_industry_code, parent_rating_industry_tree_id, tree_id, industry_catergory, create_user) VALUES (348, 'Energy and Oil & Gas', 'IFOG', 347, 240, 1, USER);
INSERT INTO r360_appdata.rating_mi_industry_map (rating_industry_tree_id, mi_industry_name, rating_industry_code, parent_rating_industry_tree_id, tree_id, industry_catergory, create_user) VALUES (349, 'Power Generation and Transmission', 'IFP', 347, 240, 1, USER);
INSERT INTO r360_appdata.rating_mi_industry_map (rating_industry_tree_id, mi_industry_name, rating_industry_code, parent_rating_industry_tree_id, tree_id, industry_catergory, create_user) VALUES (350, 'Social', 'IFSOC', 347, 240, 1, USER);
INSERT INTO r360_appdata.rating_mi_industry_map (rating_industry_tree_id, mi_industry_name, rating_industry_code, parent_rating_industry_tree_id, tree_id, industry_catergory, create_user) VALUES (351, 'Transportation', 'IFTR', 347, 240, 1, USER);
INSERT INTO r360_appdata.rating_mi_industry_map (rating_industry_tree_id, mi_industry_name, rating_industry_code, parent_rating_industry_tree_id, tree_id, industry_catergory, create_user) VALUES (352, 'Utilities', 'IFU', 347, 240, 1, USER);
INSERT INTO r360_appdata.rating_mi_industry_map (rating_industry_tree_id, mi_industry_name, rating_industry_code, parent_rating_industry_tree_id, tree_id, industry_catergory, create_user) VALUES (353, 'Project Developers', 'IFPJD', 347, 240, 1, USER);
INSERT INTO r360_appdata.rating_mi_industry_map (rating_industry_tree_id, mi_industry_name, rating_industry_code, parent_rating_industry_tree_id, tree_id, industry_catergory, create_user) VALUES (354, 'International Public Finance', 'IFIPF', 347, 240, 1, USER);
INSERT INTO r360_appdata.rating_mi_industry_map (rating_industry_tree_id, mi_industry_name, rating_industry_code, parent_rating_industry_tree_id, tree_id, industry_catergory, create_user) VALUES (355, 'Other Infrastructure Entities', 'IFOTHER', 347, 240, 1, USER);
INSERT INTO r360_appdata.rating_mi_industry_map (rating_industry_tree_id, mi_industry_name, rating_industry_code, parent_rating_industry_tree_id, tree_id, industry_catergory, create_user) VALUES (356, 'Liquefied Natural Gas', 'IFLNG', 348, 240, 2, USER);
INSERT INTO r360_appdata.rating_mi_industry_map (rating_industry_tree_id, mi_industry_name, rating_industry_code, parent_rating_industry_tree_id, tree_id, industry_catergory, create_user) VALUES (357, 'Midstream Energy Companies', 'IFMIDSTRM', 348, 240, 2, USER);
INSERT INTO r360_appdata.rating_mi_industry_map (rating_industry_tree_id, mi_industry_name, rating_industry_code, parent_rating_industry_tree_id, tree_id, industry_catergory, create_user) VALUES (358, 'Oil & Gas Projects', 'IFPIPELN', 348, 240, 2, USER);
INSERT INTO r360_appdata.rating_mi_industry_map (rating_industry_tree_id, mi_industry_name, rating_industry_code, parent_rating_industry_tree_id, tree_id, industry_catergory, create_user) VALUES (359, 'Refining Companies', 'IFOILREFMKTG', 348, 240, 2, USER);
INSERT INTO r360_appdata.rating_mi_industry_map (rating_industry_tree_id, mi_industry_name, rating_industry_code, parent_rating_industry_tree_id, tree_id, industry_catergory, create_user) VALUES (360, 'Energy and Oil & Gas - Other Companies', 'IFOGOTHER', 348, 240, 2, USER);
INSERT INTO r360_appdata.rating_mi_industry_map (rating_industry_tree_id, mi_industry_name, rating_industry_code, parent_rating_industry_tree_id, tree_id, industry_catergory, create_user) VALUES (361, 'Power Companies', 'IFPOWR', 349, 240, 2, USER);
INSERT INTO r360_appdata.rating_mi_industry_map (rating_industry_tree_id, mi_industry_name, rating_industry_code, parent_rating_industry_tree_id, tree_id, industry_catergory, create_user) VALUES (362, 'Projects - Conventional Power', 'IFCONVTL', 349, 240, 2, USER);
INSERT INTO r360_appdata.rating_mi_industry_map (rating_industry_tree_id, mi_industry_name, rating_industry_code, parent_rating_industry_tree_id, tree_id, industry_catergory, create_user) VALUES (363, 'Projects - Renewables', 'IFRNWBL', 349, 240, 2, USER);
INSERT INTO r360_appdata.rating_mi_industry_map (rating_industry_tree_id, mi_industry_name, rating_industry_code, parent_rating_industry_tree_id, tree_id, industry_catergory, create_user) VALUES (364, 'Projects - Power & Other', 'IFPOTHER', 349, 240, 2, USER);
INSERT INTO r360_appdata.rating_mi_industry_map (rating_industry_tree_id, mi_industry_name, rating_industry_code, parent_rating_industry_tree_id, tree_id, industry_catergory, create_user) VALUES (365, 'Entertainment', 'IFENTMNT', 350, 240, 2, USER);
INSERT INTO r360_appdata.rating_mi_industry_map (rating_industry_tree_id, mi_industry_name, rating_industry_code, parent_rating_industry_tree_id, tree_id, industry_catergory, create_user) VALUES (366, 'Hospitals', 'IFHOSPTL', 350, 240, 2, USER);
INSERT INTO r360_appdata.rating_mi_industry_map (rating_industry_tree_id, mi_industry_name, rating_industry_code, parent_rating_industry_tree_id, tree_id, industry_catergory, create_user) VALUES (367, 'Housing', 'IFHOSNG', 350, 240, 2, USER);
INSERT INTO r360_appdata.rating_mi_industry_map (rating_industry_tree_id, mi_industry_name, rating_industry_code, parent_rating_industry_tree_id, tree_id, industry_catergory, create_user) VALUES (368, 'Schools', 'IFSCHL', 350, 240, 2, USER);
INSERT INTO r360_appdata.rating_mi_industry_map (rating_industry_tree_id, mi_industry_name, rating_industry_code, parent_rating_industry_tree_id, tree_id, industry_catergory, create_user) VALUES (369, 'Social - Other', 'IFSOCOTHER', 350, 240, 2, USER);
INSERT INTO r360_appdata.rating_mi_industry_map (rating_industry_tree_id, mi_industry_name, rating_industry_code, parent_rating_industry_tree_id, tree_id, industry_catergory, create_user) VALUES (370, 'Airports', 'IFAIRPORT', 351, 240, 2, USER);
INSERT INTO r360_appdata.rating_mi_industry_map (rating_industry_tree_id, mi_industry_name, rating_industry_code, parent_rating_industry_tree_id, tree_id, industry_catergory, create_user) VALUES (371, 'Ports', 'IFPORT', 351, 240, 2, USER);
INSERT INTO r360_appdata.rating_mi_industry_map (rating_industry_tree_id, mi_industry_name, rating_industry_code, parent_rating_industry_tree_id, tree_id, industry_catergory, create_user) VALUES (372, 'Railroads', 'IFRAILROADS', 351, 240, 2, USER);
INSERT INTO r360_appdata.rating_mi_industry_map (rating_industry_tree_id, mi_industry_name, rating_industry_code, parent_rating_industry_tree_id, tree_id, industry_catergory, create_user) VALUES (373, 'Roads, Bridges, & Tunnels', 'IFROADS', 351, 240, 2, USER);
INSERT INTO r360_appdata.rating_mi_industry_map (rating_industry_tree_id, mi_industry_name, rating_industry_code, parent_rating_industry_tree_id, tree_id, industry_catergory, create_user) VALUES (374, 'Transportation - Diversified & Other', 'IFTDOTHER', 351, 240, 2, USER);
INSERT INTO r360_appdata.rating_mi_industry_map (rating_industry_tree_id, mi_industry_name, rating_industry_code, parent_rating_industry_tree_id, tree_id, industry_catergory, create_user) VALUES (375, 'Electric', 'RD19', 352, 240, 2, USER);
INSERT INTO r360_appdata.rating_mi_industry_map (rating_industry_tree_id, mi_industry_name, rating_industry_code, parent_rating_industry_tree_id, tree_id, industry_catergory, create_user) VALUES (376, 'Gas', 'RD17', 352, 240, 2, USER);
INSERT INTO r360_appdata.rating_mi_industry_map (rating_industry_tree_id, mi_industry_name, rating_industry_code, parent_rating_industry_tree_id, tree_id, industry_catergory, create_user) VALUES (377, 'Multi', 'RD27', 352, 240, 2, USER);
INSERT INTO r360_appdata.rating_mi_industry_map (rating_industry_tree_id, mi_industry_name, rating_industry_code, parent_rating_industry_tree_id, tree_id, industry_catergory, create_user) VALUES (378, 'Water', 'RD18', 352, 240, 2, USER);

COMMIT;


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\R360_InvestorSentiment_Sep15_Release\R360IVS_Release_Sep15_2023\rollback\RATING_MI_INDUSTRY_MAP_DROP.sql

drop table R360_APPDATA.RATING_MI_INDUSTRY_MAP;


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\R360_InvestorSentiment_Sep15_Release\R360IVS_Release_Sep15_2023\rollback\VW_ENTITY_INV_SEN_INDUSTRY_ROLLBACK.sql

DROP VIEW r360_appdata.vw_entity_inv_sen_industry;


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\R360_InvestorSentiment_Sep15_Release\R360IVS_Release_Sep15_2023\views\VW_ENTITY_INV_SEN_INDUSTRY.sql

SET DEFINE OFF;

CREATE OR REPLACE VIEW r360_appdata.vw_entity_inv_sen_industry AS
WITH entity_type AS (
     SELECT entity_id,
	        entity_type_code,
            type_code_value			
     FROM   fgr.entity_types 
     WHERE  status_ind = 'A' 
	    AND primary_secondary_ind = 'P'),
entity_industry AS (
     SELECT et.entity_id,
            et.type_code_value AS industry_code,
            i.description      AS industry,
            i.sub_sector_code  AS industry_sub_sector_code            
     FROM   entity_type et,
            spapp.v_industries i
     WHERE  et.type_code_value = i.code
	    AND et.entity_type_code = 'INDUSTRY'  
		AND i.status_ind = 'A'),
entity_industry_with_rank AS (	    
     SELECT e.entity_id, 
            e.primary_sub_sector_code,
			et.type_code_value AS org_type_code,
            ei.industry_code,
            ei.industry,
            ROW_NUMBER () OVER (PARTITION BY e.entity_id ORDER BY ei.industry_code ASC) AS row_num 
     FROM   fgr.entities e
     LEFT JOIN entity_industry ei
        ON  e.entity_id = ei.entity_id 
	    AND e.primary_sub_sector_code = ei.industry_sub_sector_code
	 LEFT JOIN entity_type et
	    ON  e.entity_id = et.entity_id 
	    AND et.entity_type_code = 'ORGTYPE' 
		AND e.primary_sub_sector_code = 'PUBFIN'),
entity_mi_industry AS (
     SELECT eir.entity_id,
            eir.primary_sub_sector_code, 
			eir.org_type_code,
			eir.industry_code,
			eir.industry,			
            im.rating_industry_tree_id
     FROM   entity_industry_with_rank eir
     LEFT JOIN r360_appdata.rating_mi_industry_map im 
         ON eir.industry_code = im.rating_industry_code 
     WHERE  eir.row_num = 1),	 
   --remapping done as investor sentiment data is not available for all industries.
   --also investor sentiment data is not available at industry level for some sectors
entity_mi_industry_remapped AS (
     SELECT entity_id, 
            CASE WHEN primary_sub_sector_code = 'FI'     THEN 285
                 WHEN primary_sub_sector_code = 'INS'    THEN 246
                 WHEN primary_sub_sector_code = 'UTIL'   THEN 352      
                 WHEN primary_sub_sector_code IN ('SOV', 'SOVR') THEN 248  
                 WHEN primary_sub_sector_code = 'GOVS'   THEN 354
                 WHEN rating_industry_tree_id = 259      THEN 255
                 WHEN rating_industry_tree_id IN (261, 271, 274)  
				   OR industry like '%REIT%' OR industry like '%Real Estate%' THEN 300				 
                 WHEN rating_industry_tree_id IN (262, 333) THEN 348
                 WHEN rating_industry_tree_id IN (264, 273) THEN 253				 
                 WHEN primary_sub_sector_code = 'PUBFIN' 
				  AND org_type_code IN ('COPARAKBR', 'CYTWTPBRVI', 'STATTERR') THEN 245
                 WHEN primary_sub_sector_code = 'PUBFIN' 
				  AND org_type_code IN ('COMBINED', 'DRAINAGE', 'ELECUTILY', 'GASUTIL2', 'OTHERUTIL', 'WATERUTIL',
                                        'WTRWSTWTR') THEN 249																			   
                 WHEN primary_sub_sector_code = 'PUBFIN' 
				  AND org_type_code IN ('PARKAUTH', 'PRTAIRAUTH', 'TOLLROAD', 'TRANSYSDST') THEN 351
                 WHEN primary_sub_sector_code = 'PUBFIN' 
				  AND org_type_code IN ('HOSPITAL2', 'HOSPITAL3', 'MNTLHEALTH', 'RETLTCCTR') THEN 366
                 WHEN primary_sub_sector_code = 'PUBFIN' 
				  AND org_type_code IN ('LCHSGFINAG', 'NPHOUSING', 'PHA', 'STHSGFINAG') THEN 367
				 WHEN primary_sub_sector_code = 'PUBFIN' 
				  AND org_type_code = 'CHARTERSCH' THEN 368
                 WHEN primary_sub_sector_code = 'PUBFIN' 
				  AND org_type_code IN ('501PUBCU', 'COMNTYCOLL','PRCOLLUNIV', 'PUB4CU', 'PUBCOLUNIV') THEN 1233
				 WHEN primary_sub_sector_code = 'PUBFIN' THEN 245 			 
                 ELSE rating_industry_tree_id 
            END AS rating_industry_tree_id 
     FROM   entity_mi_industry)   
SELECT eim.entity_id, 
	   NVL(iss.is_sector_id, 4)                    AS sector_id,	   
	   NVL(iss.is_sector, 'Aerospace and Defense') AS sector_name,
       NVL(iss.rating_industry_id, 251)            AS industry_id	   
FROM   entity_mi_industry_remapped eim
LEFT JOIN sec_stg.inv_sentiment_sector_stg iss     
   ON  eim.rating_industry_tree_id = iss.rating_industry_id 
   AND iss.active_flg = 'Y';  

GRANT SELECT ON r360_appdata.vw_entity_inv_sen_industry TO r360_appdata_reader;


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\R360_NonPublicOpinions_Articles\R360_NonPublicOpinions_Articles_Views_Calling_Scripts.sql

spool R360_NonPublicOpinions_Articles_Views_Calling_Scripts.log

@Views/VIEW_R360_APPDATA.VW_RATING_ARTICLES_PVT_CREATE.sql
@Views/VIEW_R360_APPDATA.VW_RATING_ARTICLES_PVT_CN_CREATE.sql
@Views/VIEW_R360_APPDATA.VW_RATING_ARTICLES_PUBLIC_PVT_CREATE.sql
@Views/VIEW_R360_APPDATA.VW_RATING_ARTICLES_PUBLIC_PVT_CN_CREATE.sql
@Views/VIEW_R360_APPDATA.VW_RATING_ARTICLES_PVT_PEERS_CREATE.sql
@Views/VIEW_R360_APPDATA.VW_RATING_ARTICLES_PVT_CN_PEERS_CREATE.sql
@Views/VIEW_R360_APPDATA.VW_RATING_ARTICLES_PUBLIC_PVT_PEERS_CREATE.sql
@Views/VIEW_R360_APPDATA.VW_RATING_ARTICLES_PUBLIC_PVT_CN_PEERS_CREATE.sql


spool off


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\R360_NonPublicOpinions_Articles\R360_NonPublicOpinions_Articles_Views_Rollback_Scripts.sql

spool R360_NonPublicOpinions_Articles_Views_Rollback_Scripts.log

@Views/VIEW_R360_APPDATA.VW_RATING_ARTICLES_PVT_ROLLBACK.sql
@Views/VIEW_R360_APPDATA.VW_RATING_ARTICLES_PVT_CN_ROLLBACK.sql
@Views/VIEW_R360_APPDATA.VW_RATING_ARTICLES_PUBLIC_PVT_ROLLBACK.sql
@Views/VIEW_R360_APPDATA.VW_RATING_ARTICLES_PUBLIC_PVT_CN_ROLLBACK.sql
@Views/VIEW_R360_APPDATA.VW_RATING_ARTICLES_PVT_PEERS_ROLLBACK.sql
@Views/VIEW_R360_APPDATA.VW_RATING_ARTICLES_PVT_CN_PEERS_ROLLBACK.sql
@Views/VIEW_R360_APPDATA.VW_RATING_ARTICLES_PUBLIC_PVT_PEERS_ROLLBACK.sql
@Views/VIEW_R360_APPDATA.VW_RATING_ARTICLES_PUBLIC_PVT_CN_PEERS_ROLLBACK.sql


spool off


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\R360_NonPublicOpinions_Articles\Views\VIEW_R360_APPDATA.VW_RATING_ARTICLES_PUBLIC_PVT_CN_CREATE.sql

SET DEFINE OFF;

CREATE OR REPLACE FORCE VIEW R360_APPDATA.VW_RATING_ARTICLES_PUBLIC_PVT_CN
(
    ENTITY_ID,
    ARTICLE_ID,
    TITLE,
    ARTICLE_TYPE,
    ARTICLE_DATE,
    AUTHOR,
    ARTICLE_TYPE_ID,
    CONFIDENTIALITY_IND,
    CONFIDENTIAL_CATEGORY_CODE
)
BEQUEATH DEFINER
AS
    (SELECT ENTITY_ID,
            TO_CHAR (ARTICLE_ID),
            TITLE,
            ARTICLE_TYPE,
            ARTICLE_DATE,
            AUTHOR,
            ARTICLE_TYPE_ID,
            'N'          AS CONFIDENTIALITY_IND,
            'Public'     AS CONFIDENTIAL_CATEGORY_CODE
       FROM R360_APPDATA.VW_RATING_ARTICLES_CN
     UNION ALL
     SELECT TO_NUMBER (ENTITY_ID),
            ARTICLE_ID,
            TITLE,
            'Research Update'        AS ARTICLE_TYPE,
            ARTICLE_DATE,
            'S&P Global Ratings'     AS AUTHOR,
            14                       AS ARTICLE_TYPE_ID,
            CONFIDENTIALITY_IND,
            CONFIDENTIAL_CATEGORY_CODE
       FROM R360_APPDATA.VW_RATING_ARTICLES_PVT_CN);


GRANT SELECT ON R360_APPDATA.VW_RATING_ARTICLES_PUBLIC_PVT_CN TO R360_APPDATA_READER;


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\R360_NonPublicOpinions_Articles\Views\VIEW_R360_APPDATA.VW_RATING_ARTICLES_PUBLIC_PVT_CN_PEERS_CREATE.sql

SET DEFINE OFF;

CREATE OR REPLACE FORCE VIEW R360_APPDATA.VW_RATING_ARTICLES_PUBLIC_PVT_CN_PEERS
(
    ENTITY_ID,
    ENTITY_NAME,
    ARTICLE_ID,
    TITLE,
    ARTICLE_TYPE,
    ARTICLE_DATE,
    AUTHOR,
    ARTICLE_TYPE_ID,
    CONFIDENTIALITY_IND,
    CONFIDENTIAL_CATEGORY_CODE
)
BEQUEATH DEFINER
AS
    (SELECT ENTITY_ID,
            ENTITY_NAME,
            TO_CHAR (ARTICLE_ID),
            TITLE,
            ARTICLE_TYPE,
            ARTICLE_DATE,
            AUTHOR,
            ARTICLE_TYPE_ID,
            'N'          AS CONFIDENTIALITY_IND,
            'Public'     AS CONFIDENTIAL_CATEGORY_CODE
       FROM R360_APPDATA.VW_RATING_ARTICLES_CN_PEERS
     UNION ALL
     SELECT TO_NUMBER (ENTITY_ID),
            ENTITY_NAME,
            ARTICLE_ID,
            TITLE,
            'Research Update'        AS ARTICLE_TYPE,
            ARTICLE_DATE,
            'S&P Global Ratings'     AS AUTHOR,
            14                       AS ARTICLE_TYPE_ID,
            CONFIDENTIALITY_IND,
            CONFIDENTIAL_CATEGORY_CODE
       FROM R360_APPDATA.VW_RATING_ARTICLES_PVT_CN_PEERS);


GRANT SELECT ON R360_APPDATA.VW_RATING_ARTICLES_PUBLIC_PVT_CN_PEERS TO R360_APPDATA_READER;


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\R360_NonPublicOpinions_Articles\Views\VIEW_R360_APPDATA.VW_RATING_ARTICLES_PUBLIC_PVT_CN_PEERS_ROLLBACK.sql

SET DEFINE OFF;
DROP VIEW R360_APPDATA.VW_RATING_ARTICLES_PUBLIC_PVT_CN_PEERS;


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\R360_NonPublicOpinions_Articles\Views\VIEW_R360_APPDATA.VW_RATING_ARTICLES_PUBLIC_PVT_CN_ROLLBACK.sql

SET DEFINE OFF;
DROP VIEW R360_APPDATA.VW_RATING_ARTICLES_PUBLIC_PVT_CN;


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\R360_NonPublicOpinions_Articles\Views\VIEW_R360_APPDATA.VW_RATING_ARTICLES_PUBLIC_PVT_CREATE.sql

SET DEFINE OFF;

CREATE OR REPLACE FORCE VIEW R360_APPDATA.VW_RATING_ARTICLES_PUBLIC_PVT
(
    ENTITY_ID,
    ARTICLE_ID,
    TITLE,
    ARTICLE_TYPE,
    ARTICLE_DATE,
    AUTHOR,
    ARTICLE_TYPE_ID,
    CONFIDENTIALITY_IND,
    CONFIDENTIAL_CATEGORY_CODE
)
BEQUEATH DEFINER
AS
    (SELECT ENTITY_ID,
            TO_CHAR (ARTICLE_ID),
            TITLE,
            ARTICLE_TYPE,
            ARTICLE_DATE,
            AUTHOR,
            ARTICLE_TYPE_ID,
            'N'          AS CONFIDENTIALITY_IND,
            'Public'     AS CONFIDENTIAL_CATEGORY_CODE
       FROM R360_APPDATA.VW_RATING_ARTICLES
     UNION ALL
     SELECT TO_NUMBER (ENTITY_ID),
            ARTICLE_ID,
            TITLE,
            'Research Update'        AS ARTICLE_TYPE,
            ARTICLE_DATE,
            'S&P Global Ratings'     AS AUTHOR,
            14                       AS ARTICLE_TYPE_ID,
            CONFIDENTIALITY_IND,
            CONFIDENTIAL_CATEGORY_CODE
       FROM R360_APPDATA.VW_RATING_ARTICLES_PVT);


GRANT SELECT ON R360_APPDATA.VW_RATING_ARTICLES_PUBLIC_PVT TO R360_APPDATA_READER;


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\R360_NonPublicOpinions_Articles\Views\VIEW_R360_APPDATA.VW_RATING_ARTICLES_PUBLIC_PVT_PEERS_CREATE.sql

SET DEFINE OFF;

CREATE OR REPLACE FORCE VIEW R360_APPDATA.VW_RATING_ARTICLES_PUBLIC_PVT_PEERS
(
    ENTITY_ID,
    ENTITY_NAME,
    ARTICLE_ID,
    TITLE,
    ARTICLE_TYPE,
    ARTICLE_DATE,
    AUTHOR,
    ARTICLE_TYPE_ID,
    CONFIDENTIALITY_IND,
    CONFIDENTIAL_CATEGORY_CODE
)
BEQUEATH DEFINER
AS
    (SELECT ENTITY_ID,
            ENTITY_NAME,
            TO_CHAR (ARTICLE_ID),
            TITLE,
            ARTICLE_TYPE,
            ARTICLE_DATE,
            AUTHOR,
            ARTICLE_TYPE_ID,
            'N'          AS CONFIDENTIALITY_IND,
            'Public'     AS CONFIDENTIAL_CATEGORY_CODE
       FROM R360_APPDATA.VW_RATING_ARTICLES_PEERS
     UNION ALL
     SELECT TO_NUMBER (ENTITY_ID),
            ENTITY_NAME,
            ARTICLE_ID,
            TITLE,
            'Research Update'        AS ARTICLE_TYPE,
            ARTICLE_DATE,
            'S&P Global Ratings'     AS AUTHOR,
            14                       AS ARTICLE_TYPE_ID,
            CONFIDENTIALITY_IND,
            CONFIDENTIAL_CATEGORY_CODE
       FROM R360_APPDATA.VW_RATING_ARTICLES_PVT_PEERS);


GRANT SELECT ON R360_APPDATA.VW_RATING_ARTICLES_PUBLIC_PVT_PEERS TO R360_APPDATA_READER;


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\R360_NonPublicOpinions_Articles\Views\VIEW_R360_APPDATA.VW_RATING_ARTICLES_PUBLIC_PVT_PEERS_ROLLBACK.sql

SET DEFINE OFF;
DROP VIEW R360_APPDATA.VW_RATING_ARTICLES_PUBLIC_PVT_PEERS;


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\R360_NonPublicOpinions_Articles\Views\VIEW_R360_APPDATA.VW_RATING_ARTICLES_PUBLIC_PVT_ROLLBACK.sql

SET DEFINE OFF;
DROP VIEW R360_APPDATA.VW_RATING_ARTICLES_PUBLIC_PVT;


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\R360_NonPublicOpinions_Articles\Views\VIEW_R360_APPDATA.VW_RATING_ARTICLES_PVT_CN_CREATE.sql

SET DEFINE OFF;

CREATE OR REPLACE FORCE VIEW R360_APPDATA.VW_RATING_ARTICLES_PVT_CN
(
    ENTITY_ID,
    ARTICLE_ID,
    TITLE,
    ARTICLE_DATE,
    CONFIDENTIALITY_IND,
    CONFIDENTIAL_CATEGORY_CODE
)
BEQUEATH DEFINER
AS
      SELECT ra.entity_id,
             ra.article_id,
             ra.title,
             ra.article_date,
             ra.confidentiality_ind,
             ra.confidential_category_code
        FROM r360_appdata.vw_rating_articles_pvt ra
       WHERE NOT EXISTS
                 (SELECT 1
                    FROM fgr.entities                       ar,
                         r360_appdata.vw_rating_articles_pvt ra
                   WHERE     ar.entity_id = TO_NUMBER (ra.entity_id)
                         AND ar.entity_id IN (107139, 110284, 556473))
    ORDER BY ra.article_date DESC;


GRANT SELECT ON R360_APPDATA.VW_RATING_ARTICLES_PVT_CN TO R360_APPDATA_READER;


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\R360_NonPublicOpinions_Articles\Views\VIEW_R360_APPDATA.VW_RATING_ARTICLES_PVT_CN_PEERS_CREATE.sql

SET DEFINE OFF;

CREATE OR REPLACE FORCE VIEW R360_APPDATA.VW_RATING_ARTICLES_PVT_CN_PEERS
(
    ENTITY_ID,
    ENTITY_NAME,
    ARTICLE_ID,
    TITLE,
    ARTICLE_DATE,
    CONFIDENTIALITY_IND,
    CONFIDENTIAL_CATEGORY_CODE
)
BEQUEATH DEFINER
AS
    SELECT ra.entity_id,
           en.entity_name,
           ra.article_id,
           ra.title,
           ra.article_date,
           ra.confidentiality_ind,
           ra.confidential_category_code
      FROM r360_appdata.VW_RATING_ARTICLES_PUBLIC_PVT_CN  ra
           INNER JOIN fgr.entity_names en ON ra.entity_id = en.entity_id
     WHERE en.curr_ind = 'Y';


GRANT SELECT ON R360_APPDATA.VW_RATING_ARTICLES_PVT_CN_PEERS TO R360_APPDATA_READER;


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\R360_NonPublicOpinions_Articles\Views\VIEW_R360_APPDATA.VW_RATING_ARTICLES_PVT_CN_PEERS_ROLLBACK.sql

SET DEFINE OFF;
DROP VIEW R360_APPDATA.VW_RATING_ARTICLES_PVT_CN_PEERS;


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\R360_NonPublicOpinions_Articles\Views\VIEW_R360_APPDATA.VW_RATING_ARTICLES_PVT_CN_ROLLBACK.sql

SET DEFINE OFF;
DROP VIEW R360_APPDATA.VW_RATING_ARTICLES_PVT_CN;


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\R360_NonPublicOpinions_Articles\Views\VIEW_R360_APPDATA.VW_RATING_ARTICLES_PVT_CREATE.sql

SET DEFINE OFF;

CREATE OR REPLACE FORCE VIEW R360_APPDATA.VW_RATING_ARTICLES_PVT
(
    ENTITY_ID,
    ARTICLE_ID,
    TITLE,
    ARTICLE_DATE,
    CONFIDENTIALITY_IND,
    CONFIDENTIAL_CATEGORY_CODE
)
BEQUEATH DEFINER
AS
    WITH
        temp
        AS
            (  SELECT org_id,
                      doc_type,
                      job_id,
                      MAX (record_date)     AS record_date
                 FROM R360.R360_ARTICLESYNC_METADATA
             GROUP BY org_id, doc_type, job_id)
      SELECT am.org_id         AS entity_id,
             am.r_object_id    AS article_id,
             am.org_name       AS title,
             am.eff_date       AS ARTICLE_DATE,
             'Y'               AS CONFIDENTIALITY_IND,
             CASE
                 WHEN (am.doc_type = 'sp_creditratingrationaleconfidential')
                 THEN
                     'Confidential(CIR)'
                 ELSE
                     'Private'
             END               AS CONFIDENTIAL_CATEGORY_CODE
        FROM r360.r360_articlesync_metadata am
             INNER JOIN temp
                 ON     am.org_id = temp.org_id
                    AND am.doc_type = temp.doc_type
                    AND am.job_id = temp.job_id
                    AND am.record_date = temp.record_date
    ORDER BY am.eff_date DESC;


GRANT SELECT ON R360_APPDATA.VW_RATING_ARTICLES_PVT TO R360_APPDATA_READER;


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\R360_NonPublicOpinions_Articles\Views\VIEW_R360_APPDATA.VW_RATING_ARTICLES_PVT_PEERS_CREATE.sql

SET DEFINE OFF;

CREATE OR REPLACE FORCE VIEW R360_APPDATA.VW_RATING_ARTICLES_PVT_PEERS
(
    ENTITY_ID,
    ENTITY_NAME,
    ARTICLE_ID,
    TITLE,
    ARTICLE_DATE,
    CONFIDENTIALITY_IND,
    CONFIDENTIAL_CATEGORY_CODE
)
BEQUEATH DEFINER
AS
    SELECT ra.entity_id,
           en.entity_name,
           ra.article_id,
           ra.title,
           ra.article_date,
           ra.CONFIDENTIALITY_IND,
           ra.CONFIDENTIAL_CATEGORY_CODE
      FROM r360_appdata.VW_RATING_ARTICLES_PVT  ra
           INNER JOIN fgr.entity_names en ON ra.entity_id = en.entity_id
     WHERE en.curr_ind = 'Y';


GRANT SELECT ON R360_APPDATA.VW_RATING_ARTICLES_PVT_PEERS TO R360_APPDATA_READER;


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\R360_NonPublicOpinions_Articles\Views\VIEW_R360_APPDATA.VW_RATING_ARTICLES_PVT_PEERS_ROLLBACK.sql

SET DEFINE OFF;
DROP VIEW R360_APPDATA.VW_RATING_ARTICLES_PVT_PEERS;


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\R360_NonPublicOpinions_Articles\Views\VIEW_R360_APPDATA.VW_RATING_ARTICLES_PVT_ROLLBACK.sql

SET DEFINE OFF;
DROP VIEW R360_APPDATA.VW_RATING_ARTICLES_PVT;


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\R360_NonPublicOpinions_Scores_PRB0065036\Private_Scores_Calling.sql

spool Private_Scores_CallingScript.log

@R360_NonPublicOpinions_Scores_PRB0065036/Views/RR360_APPDATA.VW_SCORES_MODIFIERS_FACTORS_PVT.sql;

spool off;


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\R360_NonPublicOpinions_Scores_PRB0065036\Private_Scores_Rollback.sql

spool Private_Scores_Rollback.log

@R360_NonPublicOpinions_Scores_PRB0065036/Views/R360_APPDATA.VW_SCORES_MODIFIERS_FACTORS_PVT_Rollback.sql;

spool off;


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\R360_NonPublicOpinions_Scores_PRB0065036\Views\R360_APPDATA.VW_SCORES_MODIFIERS_FACTORS_PVT.sql

DROP VIEW R360_APPDATA.VW_SCORES_MODIFIERS_FACTORS_PVT;

/* Formatted on 2/16/2024 2:22:14 PM (QP5 v5.362) */
CREATE OR REPLACE FORCE VIEW R360_APPDATA.VW_SCORES_MODIFIERS_FACTORS_PVT
(
    P_ENTITY_ID,
    ANALYTIC_CASE_TYPE,
    SCORE_NAME,
    SCORE_VALUE,
    SCORE_VALUE_DESC,
    SCORE_GROUP,
    HIGHLIGHT_FLAG,
    SORT_ORDER,
    CONFIDENTIAL_IND,
    CONFIDENTIAL_CATEGORY_CODE
)
BEQUEATH DEFINER
AS
    SELECT A.ANALYTIC_ENTITY_ID_TEXT      AS P_ENTITY_ID,
           A.ANALYTIC_CASE_TYPE,
           A.DATAELEMENT_DISPLAY_NAME     AS SCORE_NAME,
           A.VALUE_TEXT                   AS SCORE_VALUE,
           A.VALUE_DESCR                  AS SCORE_VALUE_DESC,
           A.DATAELEMENT_GROUP            AS SCORE_GROUP,
           A.HIGHLIGHT_FLAG,
           A.SORT_ORDER,
           A.CONF                         AS CONFIDENTIAL_IND,
           A.CONFIDENTIAL_CATEGORY_CODE
      FROM (SELECT DP.ANALYTIC_ENTITY_ID_TEXT,
                   DP.ANALYTIC_CASE_TYPE,
                   UI.DATAELEMENT_DISPLAY_NAME,
                   DP.VALUE_TEXT,
                   DP.VALUE_DESCR,
                   UI.DATAELEMENT_GROUP,
                   UI.HIGHLIGHT_FLAG,
                   UI.SORT_ORDER,
                   ROW_NUMBER ()
                       OVER (
                           PARTITION BY DP.ANALYTIC_ENTITY_ID_TEXT,
                                        DP.ANALYTIC_CASE_TYPE,
                                        DP.DATA_ELEMENT_CODE
                           ORDER BY
                               ARD.REVIEW_EFFECTIVE_DATE DESC,
                               DP.CREATE_DTIME DESC)    RN,
                   DP.CONF,
                   DP.CONFIDENTIAL_CATEGORY_CODE
              FROM SPSCORES.DATA_POINT_SCHEMA_DISTR  DP
                   JOIN SPSCORES.ANALYTIC_REVIEW_DISTR ARD
                       ON ARD.ANALYTIC_REVIEW_ID = DP.ANALYTIC_REVIEW_ID
                   JOIN R360_APPDATA.DATAELEMENT_UI_CONFIG UI
                       ON     DP.ANALYTIC_CASE_TYPE = UI.ANALYTIC_CASE_TYPE
                          AND DP.DATA_ELEMENT_CODE = UI.DATAELEMENT_CODE) A
     WHERE RN = 1;


GRANT SELECT ON R360_APPDATA.VW_SCORES_MODIFIERS_FACTORS_PVT TO R360_APPDATA_READER;


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\R360_NonPublicOpinions_Scores_PRB0065036\Views\R360_APPDATA.VW_SCORES_MODIFIERS_FACTORS_PVT_Rollback.sql

DROP VIEW R360_APPDATA.VW_SCORES_MODIFIERS_FACTORS_PVT;

/* Formatted on 2/16/2024 2:18:44 PM (QP5 v5.362) */
CREATE OR REPLACE FORCE VIEW R360_APPDATA.VW_SCORES_MODIFIERS_FACTORS_PVT
(
    P_ENTITY_ID,
    ANALYTIC_CASE_TYPE,
    SCORE_NAME,
    SCORE_VALUE,
    SCORE_VALUE_DESC,
    SCORE_GROUP,
    HIGHLIGHT_FLAG,
    SORT_ORDER,
    CONFIDENTIAL_IND,
    CONFIDENTIAL_CATEGORY_CODE
)
BEQUEATH DEFINER
AS
    SELECT A.ANALYTIC_ENTITY_ID_TEXT      AS P_ENTITY_ID,
           A.ANALYTIC_CASE_TYPE,
           A.DATAELEMENT_DISPLAY_NAME     AS SCORE_NAME,
           A.VALUE_TEXT                   AS SCORE_VALUE,
           A.VALUE_DESCR                  AS SCORE_VALUE_DESC,
           A.DATAELEMENT_GROUP            AS SCORE_GROUP,
           A.HIGHLIGHT_FLAG,
           A.SORT_ORDER,
           A.CONF                         AS CONFIDENTIAL_IND,
           A.CONFIDENTIAL_CATEGORY_CODE
      FROM (SELECT DP.ANALYTIC_ENTITY_ID_TEXT,
                   DP.ANALYTIC_CASE_TYPE,
                   UI.DATAELEMENT_DISPLAY_NAME,
                   DP.VALUE_TEXT,
                   DP.VALUE_DESCR,
                   UI.DATAELEMENT_GROUP,
                   UI.HIGHLIGHT_FLAG,
                   UI.SORT_ORDER,
                   ROW_NUMBER ()
                       OVER (
                           PARTITION BY DP.ANALYTIC_ENTITY_ID_TEXT,
                                        DP.ANALYTIC_CASE_TYPE,
                                        DP.DATA_ELEMENT_CODE
                           ORDER BY DP.VALUE_EFFECTIVE_DATE DESC)    RN,
                   DP.CONF,
                   DP.CONFIDENTIAL_CATEGORY_CODE
              FROM SPSCORES.DATA_POINT_SCHEMA_DISTR  DP
                   JOIN SPSCORES.ANALYTIC_REVIEW_DISTR ARD
                       ON ARD.ANALYTIC_REVIEW_ID = DP.ANALYTIC_REVIEW_ID
                   JOIN R360_APPDATA.DATAELEMENT_UI_CONFIG UI
                       ON     DP.ANALYTIC_CASE_TYPE = UI.ANALYTIC_CASE_TYPE
                          AND DP.DATA_ELEMENT_CODE = UI.DATAELEMENT_CODE) A
     WHERE RN = 1;


GRANT SELECT ON R360_APPDATA.VW_SCORES_MODIFIERS_FACTORS_PVT TO R360_APPDATA_READER;


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\R360_NonPublicOpinions_Sep15_Release\R360CFS_Release_Sep15th_2023\dml\DML_Recon_Sort.sql

SET DEFINE OFF;

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 1, dataelement_group = 'DEBT'
 WHERE     DATAELEMENT_CODE = 'REC_DEBTREP'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 2, dataelement_group = 'DEBT'
 WHERE     DATAELEMENT_CODE = 'REC_DEBTTRECSLD'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 3, dataelement_group = 'DEBT'
 WHERE     DATAELEMENT_CODE = 'REC_DEBTOPLEASE'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 4, dataelement_group = 'DEBT'
 WHERE     DATAELEMENT_CODE = 'REC_DEBTHYBDBT'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 5, dataelement_group = 'DEBT'
 WHERE     DATAELEMENT_CODE = 'REC_DEBTHYBEQU'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 6, dataelement_group = 'DEBT'
 WHERE     DATAELEMENT_CODE = 'REC_DEBTHYBDBTI'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 7, dataelement_group = 'DEBT'
 WHERE     DATAELEMENT_CODE = 'REC_DEBTHYBEQUI'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 8, dataelement_group = 'DEBT'
 WHERE     DATAELEMENT_CODE = 'REC_DEBTPBODC'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 9, dataelement_group = 'DEBT'
 WHERE     DATAELEMENT_CODE = 'REC_DEBTSURCASH'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 10, dataelement_group = 'DEBT'
 WHERE     DATAELEMENT_CODE = 'REC_DEBTCAPFIN'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 11, dataelement_group = 'DEBT'
 WHERE     DATAELEMENT_CODE = 'REC_DEBTCD'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 12, dataelement_group = 'DEBT'
 WHERE     DATAELEMENT_CODE = 'REC_DEBTSECCOST'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 13, dataelement_group = 'DEBT'
 WHERE     DATAELEMENT_CODE = 'REC_DEBTPPA'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 14, dataelement_group = 'DEBT'
 WHERE     DATAELEMENT_CODE = 'REC_DEBTARO'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 15, dataelement_group = 'DEBT'
 WHERE     DATAELEMENT_CODE = 'REC_DEBTTDOFFB'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 16, dataelement_group = 'DEBT'
 WHERE     DATAELEMENT_CODE = 'REC_DEBTDG'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 17, dataelement_group = 'DEBT'
 WHERE     DATAELEMENT_CODE = 'REC_DEBTDWCOMP'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 18, dataelement_group = 'DEBT'
 WHERE     DATAELEMENT_CODE = 'REC_DEBTDVPP'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 19, dataelement_group = 'DEBT'
 WHERE     DATAELEMENT_CODE = 'REC_DEBTDDER'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 20, dataelement_group = 'DEBT'
 WHERE     DATAELEMENT_CODE = 'REC_DEBTDFXH'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 21, dataelement_group = 'DEBT'
 WHERE     DATAELEMENT_CODE = 'REC_DEBTDCC'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 22, dataelement_group = 'DEBT'
 WHERE     DATAELEMENT_CODE = 'REC_DEBTDFV'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 23, dataelement_group = 'DEBT'
 WHERE     DATAELEMENT_CODE = 'REC_DEBTDFL'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 24, dataelement_group = 'DEBT'
 WHERE     DATAELEMENT_CODE = 'REC_DEBTDMIPUT'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 25, dataelement_group = 'DEBT'
 WHERE     DATAELEMENT_CODE = 'REC_DEBTDTP'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 26, dataelement_group = 'DEBT'
 WHERE     DATAELEMENT_CODE = 'REC_DEBTDST'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 27, dataelement_group = 'DEBT'
 WHERE     DATAELEMENT_CODE = 'REC_DEBTDSL'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 28, dataelement_group = 'DEBT'
 WHERE     DATAELEMENT_CODE = 'REC_DEBTDTX'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 29, dataelement_group = 'DEBT'
 WHERE     DATAELEMENT_CODE = 'REC_DEBTDSFRC'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 30, dataelement_group = 'DEBT'
 WHERE     DATAELEMENT_CODE = 'REC_DEBTDAC'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 31, dataelement_group = 'DEBT'
 WHERE     DATAELEMENT_CODE = 'REC_DEBTDGR'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 32, dataelement_group = 'DEBT'
 WHERE     DATAELEMENT_CODE = 'REC_DEBTTDOA'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 33, dataelement_group = 'DEBT'
 WHERE     DATAELEMENT_CODE = 'REC_DEBTADJTOT'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 34, dataelement_group = 'DEBT'
 WHERE DATAELEMENT_CODE = 'REC_TDA' AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 35, dataelement_group = 'DEBT'
 WHERE     DATAELEMENT_CODE = 'REC_DEBTILL'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 36, dataelement_group = 'DEBT'
 WHERE     DATAELEMENT_CODE = 'REC_DEBTMULTPP'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 37, dataelement_group = 'DEBT'
 WHERE     DATAELEMENT_CODE = 'REC_DEBTLLOFT'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 38, dataelement_group = 'EQUITY'
 WHERE     DATAELEMENT_CODE = 'REC_SEQREP'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 39, dataelement_group = 'EQUITY'
 WHERE     DATAELEMENT_CODE = 'REC_SEQHYBDBT'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 40, dataelement_group = 'EQUITY'
 WHERE     DATAELEMENT_CODE = 'REC_SEQHYBEQU'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 41, dataelement_group = 'EQUITY'
 WHERE     DATAELEMENT_CODE = 'REC_SEQHYBDBTI'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 42, dataelement_group = 'EQUITY'
 WHERE     DATAELEMENT_CODE = 'REC_SEQHYBEQUI'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 43, dataelement_group = 'EQUITY'
 WHERE     DATAELEMENT_CODE = 'REC_SEQCAPFIN'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 44, dataelement_group = 'EQUITY'
 WHERE DATAELEMENT_CODE = 'REC_SEQCD' AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 45, dataelement_group = 'EQUITY'
 WHERE     DATAELEMENT_CODE = 'REC_SEQMIB'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 46, dataelement_group = 'EQUITY'
 WHERE     DATAELEMENT_CODE = 'REC_SEQSEQG'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 47, dataelement_group = 'EQUITY'
 WHERE     DATAELEMENT_CODE = 'REC_SEQSEQFV'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 48, dataelement_group = 'EQUITY'
 WHERE     DATAELEMENT_CODE = 'REC_SEQCEQA'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 49, dataelement_group = 'EQUITY'
 WHERE     DATAELEMENT_CODE = 'REC_SEQADJTOT'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 50, dataelement_group = 'EQUITY'
 WHERE     DATAELEMENT_CODE = 'REC_EQUITYA'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 51, dataelement_group = 'REVENUES'
 WHERE     DATAELEMENT_CODE = 'REC_REVREP'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 52, dataelement_group = 'REVENUES'
 WHERE     DATAELEMENT_CODE = 'REC_REVCAPFIN'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 53, dataelement_group = 'REVENUES'
 WHERE DATAELEMENT_CODE = 'REC_REVCD' AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 54, dataelement_group = 'REVENUES'
 WHERE     DATAELEMENT_CODE = 'REC_REVSECCOST'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 55, dataelement_group = 'REVENUES'
 WHERE     DATAELEMENT_CODE = 'REC_REVREVIFIN'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 56, dataelement_group = 'REVENUES'
 WHERE     DATAELEMENT_CODE = 'REC_REVREVDIS'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 57, dataelement_group = 'REVENUES'
 WHERE     DATAELEMENT_CODE = 'REC_REVREVDER'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 58, dataelement_group = 'REVENUES'
 WHERE     DATAELEMENT_CODE = 'REC_REVOPRO1'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 59, dataelement_group = 'REVENUES'
 WHERE     DATAELEMENT_CODE = 'REC_REVADJTOT'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 60, dataelement_group = 'REVENUES'
 WHERE DATAELEMENT_CODE = 'REC_REVTA' AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 61, dataelement_group = 'EBITDA'
 WHERE     DATAELEMENT_CODE = 'REC_EBITDAREP'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 62, dataelement_group = 'EBITDA'
 WHERE     DATAELEMENT_CODE = 'REC_EBITDAOPLEASE'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 63, dataelement_group = 'EBITDA'
 WHERE     DATAELEMENT_CODE = 'REC_EBITDAPBODC'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 64, dataelement_group = 'EBITDA'
 WHERE     DATAELEMENT_CODE = 'REC_EBITDACAPINT'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 65, dataelement_group = 'EBITDA'
 WHERE     DATAELEMENT_CODE = 'REC_EBITDACAPDEVC'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 66, dataelement_group = 'EBITDA'
 WHERE     DATAELEMENT_CODE = 'REC_EBITDAINFRENC'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 67, dataelement_group = 'EBITDA'
 WHERE     DATAELEMENT_CODE = 'REC_EBITDASTKCO'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 68, dataelement_group = 'EBITDA'
 WHERE     DATAELEMENT_CODE = 'REC_EBITDADVESUB'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 69, dataelement_group = 'EBITDA'
 WHERE     DATAELEMENT_CODE = 'REC_EBITDACAPFIN'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 70, dataelement_group = 'EBITDA'
 WHERE     DATAELEMENT_CODE = 'REC_EBITDACD'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 71, dataelement_group = 'EBITDA'
 WHERE     DATAELEMENT_CODE = 'REC_EBITDASECCOST'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 72, dataelement_group = 'EBITDA'
 WHERE     DATAELEMENT_CODE = 'REC_EBITDAPPA'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 73, dataelement_group = 'EBITDA'
 WHERE     DATAELEMENT_CODE = 'REC_EBITDAARO'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 74, dataelement_group = 'EBITDA'
 WHERE     DATAELEMENT_CODE = 'REC_EBITDAEXPCOST'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 75, dataelement_group = 'EBITDA'
 WHERE     DATAELEMENT_CODE = 'REC_EBITDAREVIFIN'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 76, dataelement_group = 'EBITDA'
 WHERE     DATAELEMENT_CODE = 'REC_EBITDAREVDIS'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 77, dataelement_group = 'EBITDA'
 WHERE     DATAELEMENT_CODE = 'REC_EBITDAREVDER'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 78, dataelement_group = 'EBITDA'
 WHERE     DATAELEMENT_CODE = 'REC_EBITDAOPRO1'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 79, dataelement_group = 'EBITDA'
 WHERE     DATAELEMENT_CODE = 'REC_EBITDACOGSRST'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 80, dataelement_group = 'EBITDA'
 WHERE     DATAELEMENT_CODE = 'REC_EBITDACOGSVAL'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 81, dataelement_group = 'EBITDA'
 WHERE     DATAELEMENT_CODE = 'REC_EBITDACOGSOTH'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 82, dataelement_group = 'EBITDA'
 WHERE     DATAELEMENT_CODE = 'REC_EBITDACOGSLIF'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 83, dataelement_group = 'EBITDA'
 WHERE     DATAELEMENT_CODE = 'REC_EBITDAXSGARST'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 84, dataelement_group = 'EBITDA'
 WHERE     DATAELEMENT_CODE = 'REC_EBITDAXSGAVAL'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 85, dataelement_group = 'EBITDA'
 WHERE     DATAELEMENT_CODE = 'REC_EBITDAXSGAOTH'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 86, dataelement_group = 'EBITDA'
 WHERE     DATAELEMENT_CODE = 'REC_EBITDAXRDRST'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 87, dataelement_group = 'EBITDA'
 WHERE     DATAELEMENT_CODE = 'REC_EBITDAXRDVAL'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 88, dataelement_group = 'EBITDA'
 WHERE     DATAELEMENT_CODE = 'REC_EBITDAXRDOTH'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 89, dataelement_group = 'EBITDA'
 WHERE     DATAELEMENT_CODE = 'REC_EBITDARMSMRST'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 90, dataelement_group = 'EBITDA'
 WHERE     DATAELEMENT_CODE = 'REC_EBITDARMSMVAL'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 91, dataelement_group = 'EBITDA'
 WHERE     DATAELEMENT_CODE = 'REC_EBITDARMSMOTH'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 92, dataelement_group = 'EBITDA'
 WHERE     DATAELEMENT_CODE = 'REC_EBITDAXSTFRST'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 93, dataelement_group = 'EBITDA'
 WHERE     DATAELEMENT_CODE = 'REC_EBITDAXSTFVAL'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 94, dataelement_group = 'EBITDA'
 WHERE     DATAELEMENT_CODE = 'REC_EBITDAXSTFOTH'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 95, dataelement_group = 'EBITDA'
 WHERE     DATAELEMENT_CODE = 'REC_EBITDAXOPRDIS'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 96, dataelement_group = 'EBITDA'
 WHERE     DATAELEMENT_CODE = 'REC_EBITDAXOPRFVC'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 97, dataelement_group = 'EBITDA'
 WHERE     DATAELEMENT_CODE = 'REC_EBITDAXOPRFX'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 98, dataelement_group = 'EBITDA'
 WHERE     DATAELEMENT_CODE = 'REC_EBITDAXOPRRST'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 99, dataelement_group = 'EBITDA'
 WHERE     DATAELEMENT_CODE = 'REC_EBITDAXOPRDER'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 100, dataelement_group = 'EBITDA'
 WHERE     DATAELEMENT_CODE = 'REC_EBITDAXOPRST'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 101, dataelement_group = 'EBITDA'
 WHERE     DATAELEMENT_CODE = 'REC_EBITDAXOPRLIT'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 102, dataelement_group = 'EBITDA'
 WHERE     DATAELEMENT_CODE = 'REC_EBITDAXOPRVAL'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 103, dataelement_group = 'EBITDA'
 WHERE     DATAELEMENT_CODE = 'REC_EBITDAXBUSDIV'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 104, dataelement_group = 'EBITDA'
 WHERE     DATAELEMENT_CODE = 'REC_EBITDAXINVWO'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 105, dataelement_group = 'EBITDA'
 WHERE     DATAELEMENT_CODE = 'REC_EBITDAXIO'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 106, dataelement_group = 'EBITDA'
 WHERE     DATAELEMENT_CODE = 'REC_EBITDAXOPROA'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 107, dataelement_group = 'EBITDA'
 WHERE     DATAELEMENT_CODE = 'REC_EBITDAADJTOT'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 108, dataelement_group = 'EBITDA'
 WHERE     DATAELEMENT_CODE = 'REC_EBITDAA'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 109, dataelement_group = 'EBITDA'
 WHERE     DATAELEMENT_CODE = 'REC_EBITDAXESUB'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 110, dataelement_group = 'EBITDA'
 WHERE     DATAELEMENT_CODE = 'REC_EBITDAILL'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 111, dataelement_group = 'EBIT'
 WHERE     DATAELEMENT_CODE = 'REC_OPINCREP'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 112, dataelement_group = 'EBIT'
 WHERE     DATAELEMENT_CODE = 'REC_OPINCTRECSLD'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 113, dataelement_group = 'EBIT'
 WHERE     DATAELEMENT_CODE = 'REC_OPINCOPLEASE'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 114, dataelement_group = 'EBIT'
 WHERE     DATAELEMENT_CODE = 'REC_OPINCPBODC'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 115, dataelement_group = 'EBIT'
 WHERE     DATAELEMENT_CODE = 'REC_OPINCCAPINT'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 116, dataelement_group = 'EBIT'
 WHERE     DATAELEMENT_CODE = 'REC_OPINCCAPDEVC'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 117, dataelement_group = 'EBIT'
 WHERE     DATAELEMENT_CODE = 'REC_OPINCINFRENC'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 118, dataelement_group = 'EBIT'
 WHERE     DATAELEMENT_CODE = 'REC_OPINCCAPFIN'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 119, dataelement_group = 'EBIT'
 WHERE     DATAELEMENT_CODE = 'REC_OPINCCD'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 120, dataelement_group = 'EBIT'
 WHERE     DATAELEMENT_CODE = 'REC_OPINCSECCOST'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 121, dataelement_group = 'EBIT'
 WHERE     DATAELEMENT_CODE = 'REC_OPINCPPA'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 122, dataelement_group = 'EBIT'
 WHERE     DATAELEMENT_CODE = 'REC_OPINCARO'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 123, dataelement_group = 'EBIT'
 WHERE     DATAELEMENT_CODE = 'REC_OPINCNOPI'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 124, dataelement_group = 'EBIT'
 WHERE     DATAELEMENT_CODE = 'REC_OPINCREVIFIN'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 125, dataelement_group = 'EBIT'
 WHERE     DATAELEMENT_CODE = 'REC_OPINCREVDIS'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 126, dataelement_group = 'EBIT'
 WHERE     DATAELEMENT_CODE = 'REC_OPINCREVDER'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 127, dataelement_group = 'EBIT'
 WHERE     DATAELEMENT_CODE = 'REC_OPINCOPRO1'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 128, dataelement_group = 'EBIT'
 WHERE     DATAELEMENT_CODE = 'REC_OPINCCOGSRST'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 129, dataelement_group = 'EBIT'
 WHERE     DATAELEMENT_CODE = 'REC_OPINCCOGSVAL'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 130, dataelement_group = 'EBIT'
 WHERE     DATAELEMENT_CODE = 'REC_OPINCCOGSOTH'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 131, dataelement_group = 'EBIT'
 WHERE     DATAELEMENT_CODE = 'REC_OPINCCOGSLIFO'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 132, dataelement_group = 'EBIT'
 WHERE     DATAELEMENT_CODE = 'REC_OPINCXSGARST'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 133, dataelement_group = 'EBIT'
 WHERE     DATAELEMENT_CODE = 'REC_OPINCXSGAVAL'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 134, dataelement_group = 'EBIT'
 WHERE     DATAELEMENT_CODE = 'REC_OPINCXSGAOTH'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 135, dataelement_group = 'EBIT'
 WHERE     DATAELEMENT_CODE = 'REC_OPINCXRDRST'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 136, dataelement_group = 'EBIT'
 WHERE     DATAELEMENT_CODE = 'REC_OPINCXRDVAL'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 137, dataelement_group = 'EBIT'
 WHERE     DATAELEMENT_CODE = 'REC_OPINCXRDOTH'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 138, dataelement_group = 'EBIT'
 WHERE     DATAELEMENT_CODE = 'REC_OPINCRMSMRST'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 139, dataelement_group = 'EBIT'
 WHERE     DATAELEMENT_CODE = 'REC_OPINCRMSMVAL'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 140, dataelement_group = 'EBIT'
 WHERE     DATAELEMENT_CODE = 'REC_OPINCRMSMOTH'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 141, dataelement_group = 'EBIT'
 WHERE     DATAELEMENT_CODE = 'REC_OPINCXSTFRST'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 142, dataelement_group = 'EBIT'
 WHERE     DATAELEMENT_CODE = 'REC_OPINCXSTFVAL'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 143, dataelement_group = 'EBIT'
 WHERE     DATAELEMENT_CODE = 'REC_OPINCXSTFOTH'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 144, dataelement_group = 'EBIT'
 WHERE     DATAELEMENT_CODE = 'REC_OPINCXOPRSUB'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 145, dataelement_group = 'EBIT'
 WHERE     DATAELEMENT_CODE = 'REC_OPINCXOPRDIS'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 146, dataelement_group = 'EBIT'
 WHERE     DATAELEMENT_CODE = 'REC_OPINCXOPRFVC'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 147, dataelement_group = 'EBIT'
 WHERE     DATAELEMENT_CODE = 'REC_OPINCXOPRFX'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 148, dataelement_group = 'EBIT'
 WHERE     DATAELEMENT_CODE = 'REC_OPINCXOPRRST'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 149, dataelement_group = 'EBIT'
 WHERE     DATAELEMENT_CODE = 'REC_OPINCXOPRDER'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 150, dataelement_group = 'EBIT'
 WHERE     DATAELEMENT_CODE = 'REC_OPINCXOPRST'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 151, dataelement_group = 'EBIT'
 WHERE     DATAELEMENT_CODE = 'REC_OPINCXOPRLIT'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 152, dataelement_group = 'EBIT'
 WHERE     DATAELEMENT_CODE = 'REC_OPINCXOPRVAL'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 153, dataelement_group = 'EBIT'
 WHERE     DATAELEMENT_CODE = 'REC_OPINCXBUSDIV'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 154, dataelement_group = 'EBIT'
 WHERE     DATAELEMENT_CODE = 'REC_OPINCXINVWO'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 155, dataelement_group = 'EBIT'
 WHERE     DATAELEMENT_CODE = 'REC_OPINCXIO'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 156, dataelement_group = 'EBIT'
 WHERE     DATAELEMENT_CODE = 'REC_OPINCXOPROA'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 157, dataelement_group = 'EBIT'
 WHERE     DATAELEMENT_CODE = 'REC_OPINCDPVAL'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 158, dataelement_group = 'EBIT'
 WHERE     DATAELEMENT_CODE = 'REC_OPINCDPIMPR'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 159, dataelement_group = 'EBIT'
 WHERE     DATAELEMENT_CODE = 'REC_OPINCDPGAREV'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 160, dataelement_group = 'EBIT'
 WHERE     DATAELEMENT_CODE = 'REC_OPINCDPXO'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 161, dataelement_group = 'EBIT'
 WHERE     DATAELEMENT_CODE = 'REC_OPINCNOPIIDIT'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 162, dataelement_group = 'EBIT'
 WHERE     DATAELEMENT_CODE = 'REC_OPINCNOPIOA'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 163, dataelement_group = 'EBIT'
 WHERE     DATAELEMENT_CODE = 'REC_OPINCADJTOT'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 164, dataelement_group = 'EBIT'
 WHERE DATAELEMENT_CODE = 'REC_EBITA' AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 165, dataelement_group = 'EBIT'
 WHERE     DATAELEMENT_CODE = 'REC_OPINCILL'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 166, dataelement_group = 'INTEREST EXPENSE'
 WHERE     DATAELEMENT_CODE = 'REC_INTEXPREP'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 167, dataelement_group = 'INTEREST EXPENSE'
 WHERE     DATAELEMENT_CODE = 'REC_INTEXPOPLEASE'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 168, dataelement_group = 'INTEREST EXPENSE'
 WHERE     DATAELEMENT_CODE = 'REC_INTEXPHYBDBT'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 169, dataelement_group = 'INTEREST EXPENSE'
 WHERE     DATAELEMENT_CODE = 'REC_INTEXPHYBEQU'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 170, dataelement_group = 'INTEREST EXPENSE'
 WHERE     DATAELEMENT_CODE = 'REC_INTEXPHYBDBTI'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 171, dataelement_group = 'INTEREST EXPENSE'
 WHERE     DATAELEMENT_CODE = 'REC_INTEXPHYBEQUI'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 172, dataelement_group = 'INTEREST EXPENSE'
 WHERE     DATAELEMENT_CODE = 'REC_INTEXPPBODC'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 173, dataelement_group = 'INTEREST EXPENSE'
 WHERE     DATAELEMENT_CODE = 'REC_INTEXPCAPINT'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 174, dataelement_group = 'INTEREST EXPENSE'
 WHERE     DATAELEMENT_CODE = 'REC_INTEXPCAPFIN'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 175, dataelement_group = 'INTEREST EXPENSE'
 WHERE     DATAELEMENT_CODE = 'REC_INTEXPCD'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 176, dataelement_group = 'INTEREST EXPENSE'
 WHERE     DATAELEMENT_CODE = 'REC_INTEXPSECCOST'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 177, dataelement_group = 'INTEREST EXPENSE'
 WHERE     DATAELEMENT_CODE = 'REC_INTEXPPPA'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 178, dataelement_group = 'INTEREST EXPENSE'
 WHERE     DATAELEMENT_CODE = 'REC_INTEXPARO'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 179, dataelement_group = 'INTEREST EXPENSE'
 WHERE     DATAELEMENT_CODE = 'REC_INTEXPXINTDER'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 180, dataelement_group = 'INTEREST EXPENSE'
 WHERE     DATAELEMENT_CODE = 'REC_INTEXPXINTSLN'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 181, dataelement_group = 'INTEREST EXPENSE'
 WHERE     DATAELEMENT_CODE = 'REC_INTEXPXINTAC'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 182, dataelement_group = 'INTEREST EXPENSE'
 WHERE     DATAELEMENT_CODE = 'REC_INTEXPXINTST'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 183, dataelement_group = 'INTEREST EXPENSE'
 WHERE     DATAELEMENT_CODE = 'REC_INTEXPINTOA'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 184, dataelement_group = 'INTEREST EXPENSE'
 WHERE     DATAELEMENT_CODE = 'REC_INTEXPADJTOT'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 185, dataelement_group = 'INTEREST EXPENSE'
 WHERE DATAELEMENT_CODE = 'REC_XINTA' AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 186, dataelement_group = 'INTEREST EXPENSE'
 WHERE     DATAELEMENT_CODE = 'REC_INTEXPILL'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 187, dataelement_group = 'Funds From Operations (FFO)'
 WHERE     DATAELEMENT_CODE = 'REC_FFOINTPN'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 188, dataelement_group = 'Funds From Operations (FFO)'
 WHERE     DATAELEMENT_CODE = 'REC_FFOCIPOTH'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 189, dataelement_group = 'Funds From Operations (FFO)'
 WHERE     DATAELEMENT_CODE = 'REC_FFOTXPD'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 190, dataelement_group = 'Funds From Operations (FFO)'
 WHERE     DATAELEMENT_CODE = 'REC_FFOCTPOTH'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 191, dataelement_group = 'Funds From Operations (FFO)'
 WHERE     DATAELEMENT_CODE = 'REC_FFOREP'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 192, dataelement_group = 'Funds From Operations (FFO)'
 WHERE     DATAELEMENT_CODE = 'REC_FFOOPLEASE'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 193, dataelement_group = 'Funds From Operations (FFO)'
 WHERE     DATAELEMENT_CODE = 'REC_FFOHYBDBT'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 194, dataelement_group = 'Funds From Operations (FFO)'
 WHERE     DATAELEMENT_CODE = 'REC_FFOHYBEQU'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 195, dataelement_group = 'Funds From Operations (FFO)'
 WHERE     DATAELEMENT_CODE = 'REC_FFOHYBDBTI'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 196, dataelement_group = 'Funds From Operations (FFO)'
 WHERE     DATAELEMENT_CODE = 'REC_FFOHYBEQUI'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 197, dataelement_group = 'Funds From Operations (FFO)'
 WHERE     DATAELEMENT_CODE = 'REC_FFOCAPINT'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 198, dataelement_group = 'Funds From Operations (FFO)'
 WHERE     DATAELEMENT_CODE = 'REC_FFOCAPFIN'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 199, dataelement_group = 'Funds From Operations (FFO)'
 WHERE DATAELEMENT_CODE = 'REC_FFOCD' AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 200, dataelement_group = 'Funds From Operations (FFO)'
 WHERE     DATAELEMENT_CODE = 'REC_FFOSECCOST'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 201, dataelement_group = 'Funds From Operations (FFO)'
 WHERE     DATAELEMENT_CODE = 'REC_FFOPPA'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 202, dataelement_group = 'Funds From Operations (FFO)'
 WHERE     DATAELEMENT_CODE = 'REC_FFOEXPCOST'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 203, dataelement_group = 'Funds From Operations (FFO)'
 WHERE     DATAELEMENT_CODE = 'REC_FFOFFOOTH'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 204, dataelement_group = 'Funds From Operations (FFO)'
 WHERE     DATAELEMENT_CODE = 'REC_FFOADJTOT'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 205, dataelement_group = 'Funds From Operations (FFO)'
 WHERE DATAELEMENT_CODE = 'REC_FFOA' AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 206, dataelement_group = 'Funds From Operations (FFO)'
 WHERE     DATAELEMENT_CODE = 'REC_FFOILL'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 207, dataelement_group = 'CASH FLOW FROM OPERATIONS'
 WHERE     DATAELEMENT_CODE = 'REC_CFOREP'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 208, dataelement_group = 'CASH FLOW FROM OPERATIONS'
 WHERE     DATAELEMENT_CODE = 'REC_CFOTRECSLD'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 209, dataelement_group = 'CASH FLOW FROM OPERATIONS'
 WHERE     DATAELEMENT_CODE = 'REC_CFOOPLEASE'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 210, dataelement_group = 'CASH FLOW FROM OPERATIONS'
 WHERE     DATAELEMENT_CODE = 'REC_CFOHYBDBT'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 211, dataelement_group = 'CASH FLOW FROM OPERATIONS'
 WHERE     DATAELEMENT_CODE = 'REC_CFOHYBEQU'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 212, dataelement_group = 'CASH FLOW FROM OPERATIONS'
 WHERE     DATAELEMENT_CODE = 'REC_CFOHYBDBTI'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 213, dataelement_group = 'CASH FLOW FROM OPERATIONS'
 WHERE     DATAELEMENT_CODE = 'REC_CFOHYBEQUI'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 214, dataelement_group = 'CASH FLOW FROM OPERATIONS'
 WHERE     DATAELEMENT_CODE = 'REC_CFOCAPINT'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 215, dataelement_group = 'CASH FLOW FROM OPERATIONS'
 WHERE     DATAELEMENT_CODE = 'REC_CFOCAPDEVC'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 216, dataelement_group = 'CASH FLOW FROM OPERATIONS'
 WHERE     DATAELEMENT_CODE = 'REC_CFOINFRENC'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 217, dataelement_group = 'CASH FLOW FROM OPERATIONS'
 WHERE     DATAELEMENT_CODE = 'REC_CFOCAPFIN'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 218, dataelement_group = 'CASH FLOW FROM OPERATIONS'
 WHERE DATAELEMENT_CODE = 'REC_CFOCD' AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 219, dataelement_group = 'CASH FLOW FROM OPERATIONS'
 WHERE     DATAELEMENT_CODE = 'REC_CFOSECCOST'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 220, dataelement_group = 'CASH FLOW FROM OPERATIONS'
 WHERE     DATAELEMENT_CODE = 'REC_CFOPPA'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 221, dataelement_group = 'CASH FLOW FROM OPERATIONS'
 WHERE     DATAELEMENT_CODE = 'REC_CFOINTDVCF'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 222, dataelement_group = 'CASH FLOW FROM OPERATIONS'
 WHERE     DATAELEMENT_CODE = 'REC_CFOFXMOV'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 223, dataelement_group = 'CASH FLOW FROM OPERATIONS'
 WHERE     DATAELEMENT_CODE = 'REC_CFODECOMFD'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 224, dataelement_group = 'CASH FLOW FROM OPERATIONS'
 WHERE     DATAELEMENT_CODE = 'REC_CFOWCLF'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 225, dataelement_group = 'CASH FLOW FROM OPERATIONS'
 WHERE     DATAELEMENT_CODE = 'REC_CFOWCTX'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 226, dataelement_group = 'CASH FLOW FROM OPERATIONS'
 WHERE     DATAELEMENT_CODE = 'REC_CFOWCDER'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 227, dataelement_group = 'CASH FLOW FROM OPERATIONS'
 WHERE     DATAELEMENT_CODE = 'REC_CFOWCAH'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 228, dataelement_group = 'CASH FLOW FROM OPERATIONS'
 WHERE     DATAELEMENT_CODE = 'REC_CFOFFOLF'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 229, dataelement_group = 'CASH FLOW FROM OPERATIONS'
 WHERE     DATAELEMENT_CODE = 'REC_CFOFFOTX'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 230, dataelement_group = 'CASH FLOW FROM OPERATIONS'
 WHERE     DATAELEMENT_CODE = 'REC_CFOFFORST'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 231, dataelement_group = 'CASH FLOW FROM OPERATIONS'
 WHERE     DATAELEMENT_CODE = 'REC_CFOFFODIS'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 232, dataelement_group = 'CASH FLOW FROM OPERATIONS'
 WHERE     DATAELEMENT_CODE = 'REC_CFOFFODO'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 233, dataelement_group = 'CASH FLOW FROM OPERATIONS'
 WHERE     DATAELEMENT_CODE = 'REC_CFOFFOREGALL'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 234, dataelement_group = 'CASH FLOW FROM OPERATIONS'
 WHERE     DATAELEMENT_CODE = 'REC_CFOFFODER'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 235, dataelement_group = 'CASH FLOW FROM OPERATIONS'
 WHERE     DATAELEMENT_CODE = 'REC_CFOFFOOTHA'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 236, dataelement_group = 'CASH FLOW FROM OPERATIONS'
 WHERE     DATAELEMENT_CODE = 'REC_CFOADJTOT'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 237, dataelement_group = 'CASH FLOW FROM OPERATIONS'
 WHERE DATAELEMENT_CODE = 'REC_CFOA' AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 238, dataelement_group = 'CASH FLOW FROM OPERATIONS'
 WHERE     DATAELEMENT_CODE = 'REC_CFOILL'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 239, dataelement_group = 'DIVIDENDS'
 WHERE     DATAELEMENT_CODE = 'REC_DIVREP'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 240, dataelement_group = 'DIVIDENDS'
 WHERE     DATAELEMENT_CODE = 'REC_DIVHYBDBT'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 241, dataelement_group = 'DIVIDENDS'
 WHERE     DATAELEMENT_CODE = 'REC_DIVHYBEQU'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 242, dataelement_group = 'DIVIDENDS'
 WHERE     DATAELEMENT_CODE = 'REC_DIVHYBDBTI'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 243, dataelement_group = 'DIVIDENDS'
 WHERE     DATAELEMENT_CODE = 'REC_DIVHYBEQUI'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 244, dataelement_group = 'DIVIDENDS'
 WHERE DATAELEMENT_CODE = 'REC_DIVCD' AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 245, dataelement_group = 'DIVIDENDS'
 WHERE     DATAELEMENT_CODE = 'REC_DIVDVAAH'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 246, dataelement_group = 'DIVIDENDS'
 WHERE     DATAELEMENT_CODE = 'REC_DIVADJTOT'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 247, dataelement_group = 'DIVIDENDS'
 WHERE DATAELEMENT_CODE = 'REC_DVA' AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 248, dataelement_group = 'CAPITAL EXPENDITURES'
 WHERE     DATAELEMENT_CODE = 'REC_CAPEXREP'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 249, dataelement_group = 'CAPITAL EXPENDITURES'
 WHERE     DATAELEMENT_CODE = 'REC_CAPEXCAPINT'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 250, dataelement_group = 'CAPITAL EXPENDITURES'
 WHERE     DATAELEMENT_CODE = 'REC_CAPEXCAPDEVC'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 251, dataelement_group = 'CAPITAL EXPENDITURES'
 WHERE     DATAELEMENT_CODE = 'REC_CAPEXINFRENC'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 252, dataelement_group = 'CAPITAL EXPENDITURES'
 WHERE     DATAELEMENT_CODE = 'REC_CAPEXCAPFIN'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 253, dataelement_group = 'CAPITAL EXPENDITURES'
 WHERE     DATAELEMENT_CODE = 'REC_CAPEXCD'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 254, dataelement_group = 'CAPITAL EXPENDITURES'
 WHERE     DATAELEMENT_CODE = 'REC_CAPEXPPA'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 255, dataelement_group = 'CAPITAL EXPENDITURES'
 WHERE     DATAELEMENT_CODE = 'REC_CAPEXCAPXCC'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 256, dataelement_group = 'CAPITAL EXPENDITURES'
 WHERE     DATAELEMENT_CODE = 'REC_CAPEXCAPXRSE'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 257, dataelement_group = 'CAPITAL EXPENDITURES'
 WHERE     DATAELEMENT_CODE = 'REC_CAPEXCAPXAH'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 258, dataelement_group = 'CAPITAL EXPENDITURES'
 WHERE     DATAELEMENT_CODE = 'REC_CAPEXADJTOT'
       AND DATAELEMENT_TYPE = 'Reconciliation';

UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET SORT_ORDER = 259, dataelement_group = 'CAPITAL EXPENDITURES'
 WHERE DATAELEMENT_CODE = 'REC_CAPXA' AND DATAELEMENT_TYPE = 'Reconciliation';
 
UPDATE R360_APPDATA.DATAELEMENT_UI_CONFIG
   SET HIDDEN_MNEM_FLAG = 'Y'
 WHERE     DATAELEMENT_DISPLAY_NAME IN ('Debt/ EBITDA, Pre-Adjusted',
                                        'Operating Cash Flow/ Debt, Pre-Adjusted',
                                        'Free Operating Cash Flow/ Debt, Pre-Adjusted',
                                        'Discretionary Cash Flow/ Debt, Pre-Adjusted',
                                        'EBITDA Interest Coverage, Pre-Adjusted',
                                        'EBITDA Margin, Pre-Adjusted',
                                        'Return on Capital, Pre-Adjusted',
                                        'EBIT Interest Coverage, Pre-Adjusted')
       AND DATAELEMENT_TYPE = 'Corporate.pre-adjusted';
	   
UPDATE R360_APPDATA.ELEMENT_MASTER
   SET OBJECT_ALIAS = 'ROCEQX4'
 WHERE ITEM_NAME IN ('ROCEQ');

UPDATE R360_APPDATA.ELEMENT_MASTER
   SET OBJECT_ALIAS = 'OANCFQTR'
 WHERE ITEM_NAME IN ('OANCF.VLP');

UPDATE R360_APPDATA.ELEMENT_MASTER
   SET OBJECT_ALIAS = 'CAPXQTR'
 WHERE ITEM_NAME IN ('CAPX');

UPDATE R360_APPDATA.ELEMENT_MASTER
   SET OBJECT_ALIAS = 'DVREPQTR'
 WHERE ITEM_NAME IN ('DIVREP');	   
 
UPDATE R360_APPDATA.ELEMENT_MASTER
   SET OBJECT_ALIAS = 'ROCEDVPX4'
 WHERE ITEM_NAME IN ('ROCEDVP') AND COLUMN_NAME = 'Corporate.pre-adjusted';
    
   UPDATE R360_APPDATA.ELEMENT_MASTER
   SET OBJECT_ALIAS = 'OCFTDX4',ITEM_ALIAS='OCFTDRTM'
 WHERE    column_name = 'Corporate.adjusted'
 and item_name = 'OCFTD'
 and product_caption = 'Operating Cash Flow/ Debt, Adjusted';

   UPDATE R360_APPDATA.ELEMENT_MASTER
   SET OBJECT_ALIAS = 'FOCFTDX4',ITEM_ALIAS='FOCFTDRTM'
 WHERE    column_name = 'Corporate.adjusted'
 and item_name = 'FOCFTD'
 and product_caption = 'Free Operating Cash Flow/ Debt, Adjusted';
       

  UPDATE R360_APPDATA.ELEMENT_MASTER
   SET ITEM_ALIAS = 'DCFTDX4'
 WHERE    column_name = 'Corporate.adjusted'
 and item_name = 'DCFTD'
 and product_caption = 'Discretionary Cash Flow/Debt, Adjusted';
 
COMMIT;


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\R360_NonPublicOpinions_Sep15_Release\R360CFS_Release_Sep15th_2023\views\VW_ENTITY_RATINGS_HISTORY_LAST_10YRS.vw

SET DEFINE OFF;
/* Formatted on 9/11/2023 4:45:37 PM (QP5 v5.267.14150.38573) */
CREATE OR REPLACE VIEW R360_APPDATA.VW_ENTITY_RATINGS_HISTORY_LAST_10YRS
AS
   WITH FINAL_RES
        AS (SELECT PUB.ENTITY_ID,
                   PUB.CURRENT_RATING_SYMBOL,
                   PUB.DEBT_TYPE_CODE,
                   PUB.DEBT_TYPE_DESC,
                   PUB.RATING_TYPE_CODE,
                   PUB.RATING_TYPE_DESC,
                   PUB.RATING_DETAIL_ID,
                   PUB.RATING_DATE,
                   'N' AS CONFIDENTIALITY_IND,
                   'PUB' AS CONFIDENTIAL_CATEGORY_CODE,
                   'Public' AS CONFIDENTIAL_CATEGORY_DESC
              FROM R360_APPDATA.VW_ENTITY_RATINGS_HISTORY_LAST_10YRS_PUBLIC PUB
            -- WHERE NOT EXISTS
            --       (SELECT 1
            --         FROM R360_APPDATA.VW_ENTITY_RATINGS_HISTORY_LAST_10YRS_PVT
            --        WHERE ENTITY_ID = PUB.ENTITY_ID)
            UNION ALL
            SELECT ENTITY_ID,
                   CURRENT_RATING_SYMBOL,
                   DEBT_TYPE_CODE,
                   DEBT_TYPE_DESC,
                   RATING_TYPE_CODE,
                   RATING_TYPE_DESC,
                   RATING_DETAIL_ID,
                   RATING_DATE,
                   CONFIDENTIALITY_IND,
                   CONFIDENTIAL_CATEGORY_CODE,
                   (CASE
                       WHEN CONFIDENTIAL_CATEGORY_CODE = 'CIR'
                       THEN
                          'Confidential(CIR)'
                       WHEN CONFIDENTIAL_CATEGORY_CODE = 'PVT'
                       THEN
                          'Private'
                       ELSE
                          ''
                    END)
                      AS CONFIDENTIAL_CATEGORY_DESC
              FROM R360_APPDATA.VW_ENTITY_RATINGS_HISTORY_LAST_10YRS_PVT)
   SELECT EN.ENTITY_ID,
          EN.ENTITY_NAME,
          PVT.DEBT_TYPE_CODE,
          PVT.DEBT_TYPE_DESC,
          (CASE
              WHEN PVT.RATING_TYPE_CODE = 'FCLONG' THEN 'FC'
              WHEN PVT.RATING_TYPE_CODE = 'STDLONG' THEN 'LC'
              ELSE PVT.RATING_TYPE_CODE
           END)
             AS RATING_TYPE_CODE,
          PVT.RATING_TYPE_DESC,
          PVT.CURRENT_RATING_SYMBOL,
          PVT.RATING_DATE,
          PVT.CONFIDENTIALITY_IND,
          PVT.CONFIDENTIAL_CATEGORY_CODE,
          PVT.CONFIDENTIAL_CATEGORY_DESC,
          PVT.RATING_DETAIL_ID,
          NULL AS RATING_TYPE_SORTORDER
     FROM fgr.entity_names EN
          INNER JOIN FINAL_RES PVT ON (PVT.ENTITY_ID = EN.ENTITY_ID)
    WHERE EN.CURR_IND = 'Y'
/


GRANT SELECT ON R360_APPDATA.VW_ENTITY_RATINGS_HISTORY_LAST_10YRS TO R360_APPDATA_READER
/


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\R360_NonPublicOpinions_Sep15_Release\R360CFS_Release_Sep15th_2023\views\VW_ENTITY_RATINGS_HISTORY_LAST_10YRS_PUBLIC.vw

SET DEFINE OFF;
/* Formatted on 9/11/2023 3:17:36 PM (QP5 v5.267.14150.38573) */
CREATE OR REPLACE VIEW R360_APPDATA.VW_ENTITY_RATINGS_HISTORY_LAST_10YRS_PUBLIC
AS
   SELECT DISTINCT
          EN.ENTITY_ID,
          EN.ENTITY_NAME,
          PUB.DEBT_TYPE_CODE,
          NULL AS DEBT_TYPE_DESC,
          (CASE
              WHEN PUB.RATING_TYPE_CODE = 'FCLONG' THEN 'FC'
              WHEN PUB.RATING_TYPE_CODE = 'STDLONG' THEN 'LC'
              ELSE PUB.RATING_TYPE_CODE
           END)
             AS RATING_TYPE_CODE,
          PUB.RATING_TYPE_DESCRIPTION AS RATING_TYPE_DESC,
          PUB.RATING AS CURRENT_RATING_SYMBOL,
          PUB.RATING_DATE,
          'N' AS CONFIDENTIALITY_IND,
          'PUB' AS CONFIDENTIAL_CATEGORY_CODE,
          'Public' AS CONFIDENTIAL_CATEGORY_DESC,
          PUB.RATING_DETAIL_ID,
          NULL AS RATING_TYPE_SORTORDER
     FROM R360_APPDATA.VW_ENTITY_RATINGS_HISTORY_PUBLIC PUB
          INNER JOIN fgr.entity_names EN ON (PUB.ENTITY_ID = EN.ENTITY_ID)
    WHERE     PUB.RATING_TYPE_CODE IN ('FCLONG', 'STDLONG')
          AND PUB.DEBT_TYPE_CODE = 'ICR'
          --  AND TRUNC (PUB.RATING_DATE) BETWEEN ADD_MONTHS (TRUNC (SYSDATE),-120)  AND SYSDATE
          AND (    TO_CHAR (PUB.RATING_DATE, 'YYYY') >=
                      TO_CHAR (SYSDATE, 'YYYY') - 10
               AND TO_CHAR (PUB.RATING_DATE, 'YYYY') <=
                      TO_CHAR (SYSDATE, 'YYYY'))
          AND EN.CURR_IND = 'Y'
/


GRANT SELECT ON R360_APPDATA.VW_ENTITY_RATINGS_HISTORY_LAST_10YRS_PUBLIC TO R360_APPDATA_READER
/


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\R360_NonPublicOpinions_Sep15_Release\R360CFS_Release_Sep15th_2023\views\VW_ENTITY_RATINGS_HISTORY_LAST_10YRS_PVT.vw

SET DEFINE OFF;
/* Formatted on 9/11/2023 3:13:59 PM (QP5 v5.267.14150.38573) */
CREATE OR REPLACE VIEW R360_APPDATA.VW_ENTITY_RATINGS_HISTORY_LAST_10YRS_PVT
AS
   SELECT DISTINCT
          EN.ENTITY_ID,
          EN.ENTITY_NAME,
          PVT.RATING AS CURRENT_RATING_SYMBOL,
          PVT.DEBT_TYPE_CODE,
          NULL AS DEBT_TYPE_DESC,
          (CASE
              WHEN PVT.RATING_TYPE_CODE = 'FCLONG' THEN 'FC'
              WHEN PVT.RATING_TYPE_CODE = 'STDLONG' THEN 'LC'
              ELSE PVT.RATING_TYPE_CODE
           END)
             AS RATING_TYPE_CODE,
          PVT.RATING_TYPE_DESCRIPTION AS RATING_TYPE_DESC,
          PVT.RATING_DETAIL_ID,
          PVT.RATING_DATE,
          PVT.CONFIDENTIALITY_IND,
          PVT.CONFIDENTIAL_CATEGORY_CODE
     FROM R360_APPDATA.VW_ENTITY_RATINGS_HISTORY_PVT_ORG_ID PVT
          INNER JOIN fgr.entity_names EN ON (PVT.ENTITY_ID = EN.ENTITY_ID)
    WHERE     PVT.RATING_TYPE_CODE IN ('FCLONG', 'STDLONG')
          AND PVT.DEBT_TYPE_CODE = 'ICR'
        --  AND TRUNC (PVT.RATING_DATE) BETWEEN ADD_MONTHS (TRUNC (SYSDATE), -120)  AND SYSDATE
        AND (TO_CHAR (PVT.RATING_DATE, 'YYYY') >= TO_CHAR(SYSDATE,'YYYY')-10 and TO_CHAR (PVT.RATING_DATE, 'YYYY') <= TO_CHAR(SYSDATE,'YYYY'))
        AND EN.CURR_IND = 'Y'      
        
 /
 
GRANT SELECT ON R360_APPDATA.VW_ENTITY_RATINGS_HISTORY_LAST_10YRS_PVT TO R360_APPDATA_READER
/  


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\R360_NonPublicOpinions_Sep15_Release\R360CFS_Release_Sep15th_2023\views\VW_R360_FINANCIALS_DATA.vw

CREATE OR REPLACE VIEW R360_APPDATA.VW_R360_FINANCIALS_DATA AS
SELECT dp.FIN_DATA_POINT_ID,
       per.FIN_PERIOD_ID,
       de.FIN_DATA_ELEMENT_ID,
       org.FIN_ENTITY_ID,
       CASE
          WHEN REGEXP_LIKE (dp.data_point_value, '[[:digit:]]')
          THEN
             CASE
                WHEN     em.column_name IN ('Financial.all', 'Insurance.all')
                     AND em.MAGNITUDE IN ('%', 'x')
                THEN
                   ROUND (TO_NUMBER (dp.DATA_POINT_VALUE) * 100, 2)
                ELSE
                   ROUND (TO_NUMBER (dp.DATA_POINT_VALUE), 2)
             END
          ELSE
             NULL
       END
          AS DATA_POINT_VALUE,
       dp.DATA_SOURCE,
       dp.CONF_FLAG,
       em.ITEM_NAME AS DATA_ELEMENT_CD,
       de.DATA_ELEMENT_NAME,
       de.DATA_ELEMENT_DESC,
       de.CALCULATION_FORMULA,
       de.CALCULATED_MNEM_IND,
       per.FISCAL_YEAR,
       per.PERIOD_TYPE_CD,
       per.PERIOD_TYPE_NAME,
       per.PERIOD_END_DATE,
       per.PERIOD_STATE,
       per.REPORTED_CURRENCY,
       per.SCENARIO_NAME,
       per.DATA_SOURCE_SYSTEM,
       per.LAST_UPDATED_DATE,
       org.CORE_ID,
       org.SP_ID,
       em.COLUMN_NAME AS TEMPLATE_NAME,
       CASE
          WHEN per.PERIOD_TYPE_CD = 'LTM'
          THEN
             'LTM'
          ELSE
                CAST (per.FISCAL_YEAR AS VARCHAR2 (4000))
             || CASE
                   WHEN per.PERIOD_TYPE_NAME = 'Annual'
                   THEN
                      ' FY'
                   WHEN per.PERIOD_TYPE_NAME = 'Quarterly'
                   THEN
                      ' ' || per.PERIOD_TYPE_CD
                   ELSE
                      per.PERIOD_TYPE_CD
                END
       END
          AS FiscalYear,
       em.MAGNITUDE,
       em.PRODUCT_DECIMAL,
       per.FIN_PERIOD_ID AS ID,
       em.ITEM_ALIAS LTM_MNEMONIC,
       NVL (em.OBJECT_ALIAS, em.ITEM_NAME) QTR_MNEMONIC
  FROM SPGIPRODUCT.FIN_DATA_POINT dp
       JOIN SPGIPRODUCT.FIN_DATA_ELEMENT de
          ON (DP.FIN_DATA_ELEMENT_ID = de.FIN_DATA_ELEMENT_ID)
       JOIN SPGIPRODUCT.FIN_PERIOD per
          ON (PER.FIN_PERIOD_ID = dp.FIN_PERIOD_ID)
       JOIN SPGIPRODUCT.FIN_ENTITY org
          ON (ORG.FIN_ENTITY_ID = per.FIN_ENTITY_ID)
       JOIN R360_APPDATA.ELEMENT_MASTER em
          ON (   de.DATA_ELEMENT_CD =
                    CASE
                       WHEN per.PERIOD_TYPE_CD = 'A' THEN em.ITEM_NAME
                       WHEN per.period_type_cd = 'LTM' THEN em.ITEM_ALIAS
                       ELSE NVL (em.OBJECT_ALIAS, em.ITEM_NAME)
                    END
--              OR (    per.period_type_cd = 'LTM'
--                  AND de.DATA_ELEMENT_CD = em.ITEM_ALIAS)
                  )
 WHERE     de.r360_flag = 'Y'
       AND de.EXTERNAL_DISTR_FLAG = 'Y'
       AND per.CONF_FLAG = 'N'
       AND per.EXTERNAL_DISTR_FLAG = 'Y'
       AND dp.CONF_FLAG = 'N'
       AND em.COLUMN_NAME IN ('Corporate.adjusted',
                              'Corporate.pre-adjusted',
                              'Financial.all',
                              'Insurance.all');

GRANT SELECT ON R360_APPDATA.VW_R360_FINANCIALS_DATA TO R360_APPDATA_READER;


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\R360_NonPublicOpinions_Sep15_Release\R360CFS_Release_Sep15th_2023\views\VW_R360_FIN_PERIODS_RANK.vw

CREATE OR REPLACE VIEW R360_APPDATA.VW_R360_FIN_PERIODS_RANK AS
SELECT ROW_NUMBER ()
          OVER (PARTITION BY p.FIN_ENTITY_ID, p.PERIOD_TYPE_NAME
                ORDER BY p.FISCAL_YEAR DESC, p.PERIOD_TYPE_CD DESC)
             RN,
          p.FIN_PERIOD_ID,
          p.FIN_ENTITY_ID,
          p.FISCAL_YEAR,
          p.PERIOD_TYPE_CD,
          p.PERIOD_TYPE_NAME,
          org.CORE_ID,
          CASE
             WHEN p.PERIOD_TYPE_CD = 'LTM'
             THEN
                'LTM'
             ELSE
                   CAST (p.FISCAL_YEAR AS VARCHAR2 (4000))
                || CASE
                      WHEN p.PERIOD_TYPE_NAME = 'Annual'
                      THEN
                         ' FY'
                      WHEN p.PERIOD_TYPE_NAME = 'Quarterly'
                      THEN
                         ' ' || p.PERIOD_TYPE_CD
                      ELSE
                         p.PERIOD_TYPE_CD
                   END
          END
             AS FiscalYear,
          p.REPORTED_CURRENCY,
          p.PERIOD_END_DATE
     FROM SPGIPRODUCT.FIN_ENTITY org
          INNER JOIN SPGIPRODUCT.FIN_PERIOD p
             ON (ORG.FIN_ENTITY_ID = p.FIN_ENTITY_ID)
    WHERE     p.active_flag = 'Y'
          AND p.CONF_FLAG = 'N'
          AND p.EXTERNAL_DISTR_FLAG = 'Y';

GRANT SELECT ON R360_APPDATA.VW_R360_FIN_PERIODS_RANK TO R360_APPDATA_READER;		  


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\R360_NonPublicOpinions_Sep15_Release\R360CFS_Release_Sep15th_2023_Calling.sql

spool R360CFS_Release_Sep15th_2023.log 

@R360CFS_Release_Sep15th_2023/views/VW_ENTITY_RATINGS_HISTORY_LAST_10YRS.vw;
@R360CFS_Release_Sep15th_2023/views/VW_ENTITY_RATINGS_HISTORY_LAST_10YRS_PUBLIC.vw;
@R360CFS_Release_Sep15th_2023/views/VW_ENTITY_RATINGS_HISTORY_LAST_10YRS_PVT.vw;
@R360CFS_Release_Sep15th_2023/views/VW_R360_FIN_PERIODS_RANK.vw;
@R360CFS_Release_Sep15th_2023/views/VW_R360_FINANCIALS_DATA.vw;
@R360CFS_Release_Sep15th_2023/dml/DML_Recon_Sort.sql;

spool off


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\R360_NonPublicOpinions_Sep15_Release\R360CFS_Release_Sep15th_2023_Rollback.sql

spool R360CFS_Release_Sep8th_2023_Rollback_Calling.log 

SET DEFINE OFF;

CREATE OR REPLACE VIEW R360_APPDATA.VW_ENTITY_RATINGS_HISTORY_LAST_10YRS_PUBLIC
AS
   SELECT DISTINCT
           EN.ENTITY_ID,
           EN.ENTITY_LEGAL_NAME           AS ENTITY_NAME,
           PUB.DEBT_TYPE_CODE,
           NULL                           AS DEBT_TYPE_DESC,
           (CASE
                WHEN PUB.RATING_TYPE_CODE = 'FCLONG' THEN 'FC'
                WHEN PUB.RATING_TYPE_CODE = 'STDLONG' THEN 'LC'
                ELSE PUB.RATING_TYPE_CODE
            END)                          AS RATING_TYPE_CODE,
           PUB.RATING_TYPE_DESCRIPTION    AS RATING_TYPE_DESC,
           PUB.RATING                     AS CURRENT_RATING_SYMBOL,
           PUB.RATING_DATE,
           'N'                            AS CONFIDENTIALITY_IND,
           'PUB'                          AS CONFIDENTIAL_CATEGORY_CODE,
           'Public'                       AS CONFIDENTIAL_CATEGORY_DESC,
           PUB.RATING_DETAIL_ID,
           NULL                           AS RATING_TYPE_SORTORDER
      FROM R360_APPDATA.VW_ENTITY_RATINGS_HISTORY_PUBLIC  PUB
           INNER JOIN fgr.entity_names EN ON (PUB.ENTITY_ID = EN.ENTITY_ID)
     WHERE     PUB.RATING_TYPE_CODE IN ('FCLONG', 'STDLONG')
           AND PUB.DEBT_TYPE_CODE = 'ICR'
           AND TRUNC (PUB.RATING_DATE) BETWEEN ADD_MONTHS (TRUNC (SYSDATE),
                                                           -120)
                                           AND SYSDATE
           AND EN.CURR_IND = 'Y'
/


GRANT SELECT ON R360_APPDATA.VW_ENTITY_RATINGS_HISTORY_LAST_10YRS_PUBLIC TO R360_APPDATA_READER
/

CREATE OR REPLACE VIEW R360_APPDATA.VW_ENTITY_RATINGS_HISTORY_LAST_10YRS_PVT
AS
   SELECT DISTINCT
           EN.ENTITY_ID,
           EN.ENTITY_LEGAL_NAME           AS ENTITY_NAME,
           PVT.RATING                     AS CURRENT_RATING_SYMBOL,
           PVT.DEBT_TYPE_CODE,
           NULL                           AS DEBT_TYPE_DESC,
           (CASE
                WHEN PVT.RATING_TYPE_CODE = 'FCLONG' THEN 'FC'
                WHEN PVT.RATING_TYPE_CODE = 'STDLONG' THEN 'LC'
                ELSE PVT.RATING_TYPE_CODE
            END)                          AS RATING_TYPE_CODE,
           PVT.RATING_TYPE_DESCRIPTION    AS RATING_TYPE_DESC,
           PVT.RATING_DETAIL_ID,
           PVT.RATING_DATE,
           PVT.CONFIDENTIALITY_IND,
           PVT.CONFIDENTIAL_CATEGORY_CODE
      FROM R360_APPDATA.VW_ENTITY_RATINGS_HISTORY_PVT_ORG_ID  PVT
           INNER JOIN fgr.entity_names EN ON (PVT.ENTITY_ID = EN.ENTITY_ID)
     WHERE     PVT.RATING_TYPE_CODE IN ('FCLONG', 'STDLONG')
           AND PVT.DEBT_TYPE_CODE = 'ICR'
           AND TRUNC (PVT.RATING_DATE) BETWEEN ADD_MONTHS (TRUNC (SYSDATE),
                                                           -120)
                                           AND SYSDATE
           AND EN.CURR_IND = 'Y'    
        
 /
 
GRANT SELECT ON R360_APPDATA.VW_ENTITY_RATINGS_HISTORY_LAST_10YRS_PVT TO R360_APPDATA_READER
/

CREATE OR REPLACE VIEW R360_APPDATA.VW_ENTITY_RATINGS_HISTORY_LAST_10YRS
AS
   WITH FINAL_RES
        AS (SELECT PUB.ENTITY_ID,
                   PUB.CURRENT_RATING_SYMBOL,
                   PUB.DEBT_TYPE_CODE,
                   PUB.DEBT_TYPE_DESC,
                   PUB.RATING_TYPE_CODE,
                   PUB.RATING_TYPE_DESC,
                   PUB.RATING_DETAIL_ID,
                   PUB.RATING_DATE,
                   'N' AS CONFIDENTIALITY_IND,
                   'PUB' AS CONFIDENTIAL_CATEGORY_CODE,
                   'Public' AS CONFIDENTIAL_CATEGORY_DESC
              FROM R360_APPDATA.VW_ENTITY_RATINGS_HISTORY_LAST_10YRS_PUBLIC PUB
            -- WHERE NOT EXISTS
            --       (SELECT 1
            --         FROM R360_APPDATA.VW_ENTITY_RATINGS_HISTORY_LAST_10YRS_PVT
            --        WHERE ENTITY_ID = PUB.ENTITY_ID)
            UNION ALL
            SELECT ENTITY_ID,
                   CURRENT_RATING_SYMBOL,
                   DEBT_TYPE_CODE,
                   DEBT_TYPE_DESC,
                   RATING_TYPE_CODE,
                   RATING_TYPE_DESC,
                   RATING_DETAIL_ID,
                   RATING_DATE,
                   CONFIDENTIALITY_IND,
                   CONFIDENTIAL_CATEGORY_CODE,
                   (CASE
                       WHEN CONFIDENTIAL_CATEGORY_CODE = 'CIR'
                       THEN
                          'Confidential(CIR)'
                       WHEN CONFIDENTIAL_CATEGORY_CODE = 'PVT'
                       THEN
                          'Private'
                       ELSE
                          ''
                    END)
                      AS CONFIDENTIAL_CATEGORY_DESC
              FROM R360_APPDATA.VW_ENTITY_RATINGS_HISTORY_LAST_10YRS_PVT)
   SELECT EN.ENTITY_ID,
          EN.ENTITY_LEGAL_NAME AS ENTITY_NAME,
          PVT.DEBT_TYPE_CODE,
          PVT.DEBT_TYPE_DESC,
          (CASE
              WHEN PVT.RATING_TYPE_CODE = 'FCLONG' THEN 'FC'
              WHEN PVT.RATING_TYPE_CODE = 'STDLONG' THEN 'LC'
              ELSE PVT.RATING_TYPE_CODE
           END)
             AS RATING_TYPE_CODE,
          PVT.RATING_TYPE_DESC,
          PVT.CURRENT_RATING_SYMBOL,
          PVT.RATING_DATE,
          PVT.CONFIDENTIALITY_IND,
          PVT.CONFIDENTIAL_CATEGORY_CODE,
          PVT.CONFIDENTIAL_CATEGORY_DESC,
          PVT.RATING_DETAIL_ID,
          NULL AS RATING_TYPE_SORTORDER
     FROM fgr.entity_names EN
          INNER JOIN FINAL_RES PVT ON (PVT.ENTITY_ID = EN.ENTITY_ID)
    WHERE EN.CURR_IND = 'Y'
/


GRANT SELECT
   ON R360_APPDATA.VW_ENTITY_RATINGS_HISTORY_LAST_10YRS
   TO R360_APPDATA_READER
/  
CREATE OR REPLACE VIEW R360_APPDATA.VW_R360_FIN_PERIODS_RANK AS
SELECT ROW_NUMBER ()
               OVER (PARTITION BY p.FIN_ENTITY_ID, p.PERIOD_TYPE_NAME
                     ORDER BY p.FISCAL_YEAR DESC, p.PERIOD_TYPE_CD DESC)
               RN,
           p.FIN_PERIOD_ID,
           p.FIN_ENTITY_ID,
           p.FISCAL_YEAR,
           p.PERIOD_TYPE_CD,
           p.PERIOD_TYPE_NAME,
           org.CORE_ID,
           CASE
               WHEN p.PERIOD_TYPE_CD = 'LTM'
               THEN
                   'LTM'
               ELSE
                      CAST (p.FISCAL_YEAR AS VARCHAR2 (4000))
                   || CASE
                          WHEN p.PERIOD_TYPE_NAME = 'Annual'
                          THEN
                              ' FY'
                          WHEN p.PERIOD_TYPE_NAME = 'Quarterly'
                          THEN
                              ' ' || p.PERIOD_TYPE_CD
                          ELSE
                              p.PERIOD_TYPE_CD
                      END
           END
               AS FiscalYear,
           p.REPORTED_CURRENCY,
           p.PERIOD_END_DATE
      FROM SPGIPRODUCT.FIN_ENTITY  org
           INNER JOIN SPGIPRODUCT.FIN_PERIOD p
               ON (ORG.FIN_ENTITY_ID = p.FIN_ENTITY_ID)
     WHERE p.active_flag = 'Y';
	 
GRANT SELECT
   ON R360_APPDATA.VW_R360_FIN_PERIODS_RANK
   TO R360_APPDATA_READER;	 
	 
CREATE OR REPLACE VIEW R360_APPDATA.VW_R360_FINANCIALS_DATA AS
SELECT dp.FIN_DATA_POINT_ID,
          per.FIN_PERIOD_ID,
          de.FIN_DATA_ELEMENT_ID,
          org.FIN_ENTITY_ID,
          CASE
             WHEN REGEXP_LIKE (dp.data_point_value, '[[:digit:]]')
             THEN
                CASE
                   WHEN     em.column_name IN ('Financial.all',
                                               'Insurance.all')
                        AND em.MAGNITUDE IN ('%', 'x')
                   THEN
                      ROUND (TO_NUMBER (dp.DATA_POINT_VALUE) * 100, 2)
                   ELSE
                      ROUND (TO_NUMBER (dp.DATA_POINT_VALUE), 2)
                END
             ELSE
                NULL
          END
             AS DATA_POINT_VALUE,
          dp.DATA_SOURCE,
          dp.CONF_FLAG,
          em.ITEM_NAME AS DATA_ELEMENT_CD,
          de.DATA_ELEMENT_NAME,
          de.DATA_ELEMENT_DESC,
          de.CALCULATION_FORMULA,
          de.CALCULATED_MNEM_IND,
          per.FISCAL_YEAR,
          per.PERIOD_TYPE_CD,
          per.PERIOD_TYPE_NAME,
          per.PERIOD_END_DATE,
          per.PERIOD_STATE,
          per.REPORTED_CURRENCY,
          per.SCENARIO_NAME,
          per.DATA_SOURCE_SYSTEM,
          per.LAST_UPDATED_DATE,
          org.CORE_ID,
          org.SP_ID,
          em.COLUMN_NAME AS TEMPLATE_NAME,
          CASE
             WHEN per.PERIOD_TYPE_CD = 'LTM'
             THEN
                'LTM'
             ELSE
                   CAST (per.FISCAL_YEAR AS VARCHAR2 (4000))
                || CASE
                      WHEN per.PERIOD_TYPE_NAME = 'Annual'
                      THEN
                         ' FY'
                      WHEN per.PERIOD_TYPE_NAME = 'Quarterly'
                      THEN
                         ' ' || per.PERIOD_TYPE_CD
                      ELSE
                         per.PERIOD_TYPE_CD
                   END
          END
             AS FiscalYear,
          em.MAGNITUDE,
          em.PRODUCT_DECIMAL,
          per.FIN_PERIOD_ID AS ID,
          em.ITEM_ALIAS
     FROM SPGIPRODUCT.FIN_DATA_POINT dp
          JOIN SPGIPRODUCT.FIN_DATA_ELEMENT de
             ON (DP.FIN_DATA_ELEMENT_ID = de.FIN_DATA_ELEMENT_ID)
          JOIN SPGIPRODUCT.FIN_PERIOD per
             ON (PER.FIN_PERIOD_ID = dp.FIN_PERIOD_ID)
          JOIN SPGIPRODUCT.FIN_ENTITY org
             ON (ORG.FIN_ENTITY_ID = per.FIN_ENTITY_ID)
          JOIN R360_APPDATA.ELEMENT_MASTER em
             ON (   de.DATA_ELEMENT_CD = em.ITEM_NAME
                 OR (    per.period_type_cd = 'LTM'
                     AND de.DATA_ELEMENT_CD = em.ITEM_ALIAS))
    WHERE     1 = 1
          AND de.r360_flag = 'Y'              --      AND org.CORE_ID = 112354
          -- and de.EXTERNAL_DISTR_FLAG='Y'
          --  and per.CONF_FLAG='N'
          --  and per.EXTERNAL_DISTR_FLAG='Y'
          AND dp.CONF_FLAG = 'N'
          AND em.COLUMN_NAME IN ('Corporate.adjusted',
                                 'Corporate.pre-adjusted',
                                 'Financial.all',
                                 'Insurance.all');	 

GRANT SELECT
   ON R360_APPDATA.VW_R360_FINANCIALS_DATA
   TO R360_APPDATA_READER;
spool off


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\R360_NonPublicOpions\R360CFS_Release_Oct5th_2023\dml\element_master_updatesql.sql

SET DEFINE OFF;

UPDATE R360_APPDATA.ELEMENT_MASTER
   SET ITEM_ALIAS = 'OPINCADAREP'
WHERE item_name IN ('OPINCADAREP');

UPDATE R360_APPDATA.ELEMENT_MASTER
   SET ITEM_ALIAS = 'OANCFQTR'
WHERE item_alias IN ('OANCFRTM');


COMMIT;


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\R360_NonPublicOpions\R360CFS_Release_Oct5th_2023\R360CFS_Release_Oct5th_2023_Calling.sql

spool R360CFS_Release_Oct5th_2023_Tables_Calling.log 

@Views/VW_ENTITY_CURRENT_RATING.SQL
@dml/element_master_updatesql.sql;


spool off



C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\R360_NonPublicOpions\R360CFS_Release_Oct5th_2023\R360CFS_Release_Oct5th_2023_Rollback.sql

spool R360CFS_Release_Oct5th_2023_Rollback_Calling.log 

@Views/VW_ENTITY_CURRENT_RATING_ROLLBACK.SQL;

spool off



C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\R360_NonPublicOpions\R360CFS_Release_Oct5th_2023\Views\VW_ENTITY_CURRENT_RATING.SQL

SET DEFINE OFF;

CREATE OR REPLACE VIEW R360_APPDATA.VW_ENTITY_CURRENT_RATING
AS
   WITH Final_res
        AS (SELECT PUB.ENTITY_ID,
                   PUB.CURRENT_RATING_SYMBOL,
                   PUB.DEBT_TYPE_DESC,
                   PUB.RATING_TYPE_DESC,
                   PUB.ACTION,
                   PUB.LATEST_NON_AFFIRM_CW_OL,
                   PUB.RATINGS_ORDER,
                   'N' AS CONFIDENTIALITY_IND,
                   'PUB' AS CONFIDENTIAL_CATEGORY_CODE,
                   'Public' AS CONFIDENTIAL_CATEGORY_DESC
              FROM R360_APPDATA.VW_ENTITY_CURRENT_RATING_PUBLIC PUB
             WHERE NOT EXISTS
                      (SELECT 1
                         FROM R360_APPDATA.VW_ENTITY_CURRENT_RATING_PVT
                        WHERE     ENTITY_ID = PUB.ENTITY_ID
                              AND RATING_TYPE_CODE = PUB.RATING_TYPE_CODE
                              AND DEBT_TYPE_DESC = PUB.DEBT_TYPE_DESC)
            UNION ALL
            SELECT ENTITY_ID,
                   CURRENT_RATING_SYMBOL,
                   DEBT_TYPE_DESC,
                   RATING_TYPE_DESC,
                   ACTION,
                   LATEST_NON_AFFIRM_CW_OL,
                   RATINGS_ORDER,
                   CONFIDENTIALITY_IND,
                   CONFIDENTIAL_CATEGORY_CODE,
                   (CASE
                       WHEN CONFIDENTIAL_CATEGORY_CODE = 'CIR'
                       THEN
                          'Confidential(CIR)'
                       WHEN CONFIDENTIAL_CATEGORY_CODE = 'PVT'
                       THEN
                          'Private'
                       ELSE
                          ''
                    END)
                      AS CONFIDENTIAL_CATEGORY_DESC
              FROM R360_APPDATA.VW_ENTITY_CURRENT_RATING_PVT),
        CURR_RAT_FINLA
        AS (SELECT ENTITY_ID,
                   CURRENT_RATING_SYMBOL,
                   DEBT_TYPE_DESC,
                   RATING_TYPE_DESC,
                   ACTION,
                   LATEST_NON_AFFIRM_CW_OL,
                   RATINGS_ORDER,
                   CONFIDENTIALITY_IND,
                   CONFIDENTIAL_CATEGORY_CODE,
                   CONFIDENTIAL_CATEGORY_DESC,
                   ROW_NUMBER ()
                   OVER (PARTITION BY ENTITY_ID ORDER BY RATINGS_ORDER ASC)
                      RWNUM
              FROM Final_res cr)
   SELECT ENTITY_ID,
          CURRENT_RATING_SYMBOL,
          DEBT_TYPE_DESC,
          RATING_TYPE_DESC,
          ACTION,
          LATEST_NON_AFFIRM_CW_OL,
          RATINGS_ORDER,
          CONFIDENTIALITY_IND,
          CONFIDENTIAL_CATEGORY_CODE,
          CONFIDENTIAL_CATEGORY_DESC
     FROM CURR_RAT_FINLA
    WHERE RWNUM = 1;
	
GRANT SELECT ON R360_APPDATA.VW_ENTITY_CURRENT_RATING TO R360_APPDATA_READER;	


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\R360_NonPublicOpions\R360CFS_Release_Oct5th_2023\Views\VW_ENTITY_CURRENT_RATING_ROLLBACK.SQL

SET DEFINE OFF;
/* Formatted on 9/28/2023 4:59:00 PM (QP5 v5.267.14150.38573) */
CREATE OR REPLACE VIEW R360_APPDATA.VW_ENTITY_CURRENT_RATING
AS
   WITH Final_res
        AS (SELECT PUB.ENTITY_ID,
                   PUB.CURRENT_RATING_SYMBOL,
                   PUB.DEBT_TYPE_DESC,
                   PUB.RATING_TYPE_DESC,
                   PUB.ACTION,
                   PUB.LATEST_NON_AFFIRM_CW_OL,
                   PUB.RATINGS_ORDER,
                   'N' AS CONFIDENTIALITY_IND,
                   'PUB' AS CONFIDENTIAL_CATEGORY_CODE,
                   'Public' AS CONFIDENTIAL_CATEGORY_DESC
              FROM R360_APPDATA.VW_ENTITY_CURRENT_RATING_PUBLIC PUB
             WHERE NOT EXISTS
                      (SELECT 1
                         FROM R360_APPDATA.VW_ENTITY_CURRENT_RATING_PVT
                        WHERE     ENTITY_ID = PUB.ENTITY_ID
                              AND RATING_TYPE_CODE = PUB.RATING_TYPE_CODE )
            UNION ALL
            SELECT ENTITY_ID,
                   CURRENT_RATING_SYMBOL,
                   DEBT_TYPE_DESC,
                   RATING_TYPE_DESC,
                   ACTION,
                   LATEST_NON_AFFIRM_CW_OL,
                   RATINGS_ORDER,
                   CONFIDENTIALITY_IND,
                   CONFIDENTIAL_CATEGORY_CODE,
                   (CASE
                       WHEN CONFIDENTIAL_CATEGORY_CODE = 'CIR'
                       THEN
                          'Confidential(CIR)'
                       WHEN CONFIDENTIAL_CATEGORY_CODE = 'PVT'
                       THEN
                          'Private'
                       ELSE
                          ''
                    END)
                      AS CONFIDENTIAL_CATEGORY_DESC
              FROM R360_APPDATA.VW_ENTITY_CURRENT_RATING_PVT),
        CURR_RAT_FINLA
        AS (SELECT ENTITY_ID,
                   CURRENT_RATING_SYMBOL,
                   DEBT_TYPE_DESC,
                   RATING_TYPE_DESC,
                   ACTION,
                   LATEST_NON_AFFIRM_CW_OL,
                   RATINGS_ORDER,
                   CONFIDENTIALITY_IND,
                   CONFIDENTIAL_CATEGORY_CODE,
                   CONFIDENTIAL_CATEGORY_DESC,
                   ROW_NUMBER ()
                   OVER (PARTITION BY ENTITY_ID ORDER BY RATINGS_ORDER ASC)
                      RWNUM
              FROM Final_res cr)
   SELECT ENTITY_ID,
          CURRENT_RATING_SYMBOL,
          DEBT_TYPE_DESC,
          RATING_TYPE_DESC,
          ACTION,
          LATEST_NON_AFFIRM_CW_OL,
          RATINGS_ORDER,
          CONFIDENTIALITY_IND,
          CONFIDENTIAL_CATEGORY_CODE,
          CONFIDENTIAL_CATEGORY_DESC
     FROM CURR_RAT_FINLA
    WHERE RWNUM = 1
    
/

GRANT SELECT ON R360_APPDATA.VW_ENTITY_CURRENT_RATING TO R360_APPDATA_READER
/


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\R360_NonPublicOpions\R360CFS_Release_Sep8th_2023\dml\configuration_details.sql

SET DEFINE OFF;
Insert into "R360_APPDATA"."CONFIGURATION_DETAILS"
   (CONFIG_KEY, CONFIG_VALUE)
 Values
   ('NON_PUBLIC_OPN_SWITCH', 1);
Insert into "R360_APPDATA"."CONFIGURATION_DETAILS"
   (CONFIG_KEY, CONFIG_VALUE)
 Values
   ('CONFIG_USER', 2);
COMMIT;


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\R360_NonPublicOpions\R360CFS_Release_Sep8th_2023\dml\crarticle_types.sql

SET DEFINE OFF;
Insert into  R360_APPDATA.CRARTICLE_TYPES
   (CRARTICLE_TYPE_ID, CRARTICLE_TYPE, CRARTICLE_TYPE_DESC, RANK_ORDER_NUM, ACTV_FLAG, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   (1, 'Bulletin', 'Bulletin', 1, 'Y', 
    SYSDATE, USER, SYSDATE, USER);
Insert into  R360_APPDATA.CRARTICLE_TYPES
   (CRARTICLE_TYPE_ID, CRARTICLE_TYPE, CRARTICLE_TYPE_DESC, RANK_ORDER_NUM, ACTV_FLAG, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   (2, 'Classic Newsletter', 'Classic Newsletter', 9, 'Y', 
    SYSDATE, USER, SYSDATE, USER);
Insert into  R360_APPDATA.CRARTICLE_TYPES
   (CRARTICLE_TYPE_ID, CRARTICLE_TYPE, CRARTICLE_TYPE_DESC, RANK_ORDER_NUM, ACTV_FLAG, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   (3, 'Commentary', 'Commentary', 2, 'Y', 
    SYSDATE, USER, SYSDATE, USER);
Insert into  R360_APPDATA.CRARTICLE_TYPES
   (CRARTICLE_TYPE_ID, CRARTICLE_TYPE, CRARTICLE_TYPE_DESC, RANK_ORDER_NUM, ACTV_FLAG, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   (4, 'Country Profile', 'Country Profile', 10, 'Y', 
    SYSDATE, USER, SYSDATE, USER);
Insert into  R360_APPDATA.CRARTICLE_TYPES
   (CRARTICLE_TYPE_ID, CRARTICLE_TYPE, CRARTICLE_TYPE_DESC, RANK_ORDER_NUM, ACTV_FLAG, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   (5, 'Credit Notice', 'Credit Notice', 11, 'Y', 
    SYSDATE, USER, SYSDATE, USER);
Insert into  R360_APPDATA.CRARTICLE_TYPES
   (CRARTICLE_TYPE_ID, CRARTICLE_TYPE, CRARTICLE_TYPE_DESC, RANK_ORDER_NUM, ACTV_FLAG, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   (6, 'Criteria', 'Criteria', 12, 'Y', 
    SYSDATE, USER, SYSDATE, USER);
Insert into  R360_APPDATA.CRARTICLE_TYPES
   (CRARTICLE_TYPE_ID, CRARTICLE_TYPE, CRARTICLE_TYPE_DESC, RANK_ORDER_NUM, ACTV_FLAG, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   (7, 'Full Analysis', 'Full Analysis', 4, 'Y', 
    SYSDATE, USER, SYSDATE, USER);
Insert into  R360_APPDATA.CRARTICLE_TYPES
   (CRARTICLE_TYPE_ID, CRARTICLE_TYPE, CRARTICLE_TYPE_DESC, RANK_ORDER_NUM, ACTV_FLAG, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   (8, 'Narrative', 'Narrative', 13, 'Y', 
    SYSDATE, USER, SYSDATE, USER);
Insert into  R360_APPDATA.CRARTICLE_TYPES
   (CRARTICLE_TYPE_ID, CRARTICLE_TYPE, CRARTICLE_TYPE_DESC, RANK_ORDER_NUM, ACTV_FLAG, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   (9, 'Narrative UK Regulatory', 'Narrative UK Regulatory', 14, 'Y', 
    SYSDATE, USER, SYSDATE, USER);
Insert into  R360_APPDATA.CRARTICLE_TYPES
   (CRARTICLE_TYPE_ID, CRARTICLE_TYPE, CRARTICLE_TYPE_DESC, RANK_ORDER_NUM, ACTV_FLAG, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   (10, 'News', 'News', 3, 'Y', 
    SYSDATE, USER, SYSDATE, USER);
Insert into  R360_APPDATA.CRARTICLE_TYPES
   (CRARTICLE_TYPE_ID, CRARTICLE_TYPE, CRARTICLE_TYPE_DESC, RANK_ORDER_NUM, ACTV_FLAG, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   (11, 'Presale Report', 'Presale Report', 5, 'Y', 
    SYSDATE, USER, SYSDATE, USER);
Insert into  R360_APPDATA.CRARTICLE_TYPES
   (CRARTICLE_TYPE_ID, CRARTICLE_TYPE, CRARTICLE_TYPE_DESC, RANK_ORDER_NUM, ACTV_FLAG, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   (12, 'Public Information Text', 'Public Information Text', 15, 'Y', 
    SYSDATE, USER, SYSDATE, USER);
Insert into  R360_APPDATA.CRARTICLE_TYPES
   (CRARTICLE_TYPE_ID, CRARTICLE_TYPE, CRARTICLE_TYPE_DESC, RANK_ORDER_NUM, ACTV_FLAG, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   (13, 'Rating Action News', 'Rating Action News', 6, 'Y', 
    SYSDATE, USER, SYSDATE, USER);
Insert into  R360_APPDATA.CRARTICLE_TYPES
   (CRARTICLE_TYPE_ID, CRARTICLE_TYPE, CRARTICLE_TYPE_DESC, RANK_ORDER_NUM, ACTV_FLAG, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   (14, 'Research Update', 'Research Update', 7, 'Y', 
    SYSDATE, USER, SYSDATE, USER);
Insert into  R360_APPDATA.CRARTICLE_TYPES
   (CRARTICLE_TYPE_ID, CRARTICLE_TYPE, CRARTICLE_TYPE_DESC, RANK_ORDER_NUM, ACTV_FLAG, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   (15, 'Summary Analysis', 'Summary Analysis', 8, 'Y', 
    SYSDATE, USER, SYSDATE, USER);
Insert into  R360_APPDATA.CRARTICLE_TYPES
   (CRARTICLE_TYPE_ID, CRARTICLE_TYPE, CRARTICLE_TYPE_DESC, RANK_ORDER_NUM, ACTV_FLAG, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   (16, 'Supplementary Analysis', 'Supplementary Analysis', 16, 'Y', 
    SYSDATE, USER, SYSDATE, USER);
Insert into  R360_APPDATA.CRARTICLE_TYPES
   (CRARTICLE_TYPE_ID, CRARTICLE_TYPE, CRARTICLE_TYPE_DESC, RANK_ORDER_NUM, ACTV_FLAG, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   (17, 'Third Party News', 'Third Party News', 17, 'Y', 
    SYSDATE, USER, SYSDATE, USER);
COMMIT;


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\R360_NonPublicOpions\R360CFS_Release_Sep8th_2023\dml\crarticle_type_map.sql

SET DEFINE OFF;
Insert into  R360_APPDATA.CRARTICLE_TYPE_MAP
   (CRARTICLE_TYPE_MAP_ID, SOURCE_ARTICLE_TYPE, SOURCE_ARTICLE_SUB_TYPE, CRARTICLE_TYPE_ID, ACTV_FLAG, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   (1, 'NEWS', 'BULLETIN', 1, 'Y', 
    SYSDATE, USER, SYSDATE, USER);
Insert into  R360_APPDATA.CRARTICLE_TYPE_MAP
   (CRARTICLE_TYPE_MAP_ID, SOURCE_ARTICLE_TYPE, SOURCE_ARTICLE_SUB_TYPE, CRARTICLE_TYPE_ID, ACTV_FLAG, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   (2, 'CLASSIC', 'CLASSIC NEWSLETTER', 2, 'Y', 
    SYSDATE, USER, SYSDATE, USER);
Insert into  R360_APPDATA.CRARTICLE_TYPE_MAP
   (CRARTICLE_TYPE_MAP_ID, SOURCE_ARTICLE_TYPE, CRARTICLE_TYPE_ID, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   (3, 'COMMENTS', 3, 'Y', SYSDATE, 
    USER, SYSDATE, USER);
Insert into  R360_APPDATA.CRARTICLE_TYPE_MAP
   (CRARTICLE_TYPE_MAP_ID, SOURCE_ARTICLE_TYPE, SOURCE_ARTICLE_SUB_TYPE, CRARTICLE_TYPE_ID, ACTV_FLAG, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   (4, 'COMMENTS', 'SRHL', 3, 'Y', 
    SYSDATE, USER, SYSDATE, USER);
Insert into  R360_APPDATA.CRARTICLE_TYPE_MAP
   (CRARTICLE_TYPE_MAP_ID, SOURCE_ARTICLE_TYPE, SOURCE_ARTICLE_SUB_TYPE, CRARTICLE_TYPE_ID, ACTV_FLAG, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   (5, 'CLASSIC', 'COUNTRY PROFILE', 4, 'Y', 
    SYSDATE, USER, SYSDATE, USER);
Insert into  R360_APPDATA.CRARTICLE_TYPE_MAP
   (CRARTICLE_TYPE_MAP_ID, SOURCE_ARTICLE_TYPE, SOURCE_ARTICLE_SUB_TYPE, CRARTICLE_TYPE_ID, ACTV_FLAG, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   (7, 'COMMENTS', 'CRITERIA', 6, 'Y', 
    SYSDATE, USER, SYSDATE, USER);
Insert into  R360_APPDATA.CRARTICLE_TYPE_MAP
   (CRARTICLE_TYPE_MAP_ID, SOURCE_ARTICLE_TYPE, SOURCE_ARTICLE_SUB_TYPE, CRARTICLE_TYPE_ID, ACTV_FLAG, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   (10, 'FULL', 'RATSTATS', 7, 'Y', 
    SYSDATE, USER, SYSDATE, USER);
Insert into  R360_APPDATA.CRARTICLE_TYPE_MAP
   (CRARTICLE_TYPE_MAP_ID, SOURCE_ARTICLE_TYPE, SOURCE_ARTICLE_SUB_TYPE, CRARTICLE_TYPE_ID, ACTV_FLAG, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   (11, 'FULL', 'SURVEILLANCE', 7, 'Y', 
    SYSDATE, USER, SYSDATE, USER);
Insert into  R360_APPDATA.CRARTICLE_TYPE_MAP
   (CRARTICLE_TYPE_MAP_ID, SOURCE_ARTICLE_TYPE, SOURCE_ARTICLE_SUB_TYPE, CRARTICLE_TYPE_ID, ACTV_FLAG, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   (12, 'FULL', 'NEW ISSUE', 7, 'Y', 
    SYSDATE, USER, SYSDATE, USER);
Insert into  R360_APPDATA.CRARTICLE_TYPE_MAP
   (CRARTICLE_TYPE_MAP_ID, SOURCE_ARTICLE_TYPE, SOURCE_ARTICLE_SUB_TYPE, CRARTICLE_TYPE_ID, ACTV_FLAG, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   (13, 'FULL', 'SERVICER EVALUATION', 7, 'Y', 
    SYSDATE, USER, SYSDATE, USER);
Insert into  R360_APPDATA.CRARTICLE_TYPE_MAP
   (CRARTICLE_TYPE_MAP_ID, SOURCE_ARTICLE_TYPE, CRARTICLE_TYPE_ID, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   (14, 'FULL', 7, 'Y', SYSDATE, 
    USER, SYSDATE, USER);
Insert into  R360_APPDATA.CRARTICLE_TYPE_MAP
   (CRARTICLE_TYPE_MAP_ID, SOURCE_ARTICLE_TYPE, SOURCE_ARTICLE_SUB_TYPE, CRARTICLE_TYPE_ID, ACTV_FLAG, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   (15, 'CLASSIC', 'NARRATIVE', 8, 'Y', 
    SYSDATE, USER, SYSDATE, USER);
Insert into  R360_APPDATA.CRARTICLE_TYPE_MAP
   (CRARTICLE_TYPE_MAP_ID, SOURCE_ARTICLE_TYPE, SOURCE_ARTICLE_SUB_TYPE, CRARTICLE_TYPE_ID, ACTV_FLAG, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   (16, 'CLASSIC', 'NARRATIVE UK REGULATORY', 9, 'Y', 
    SYSDATE, USER, SYSDATE, USER);
Insert into  R360_APPDATA.CRARTICLE_TYPE_MAP
   (CRARTICLE_TYPE_MAP_ID, SOURCE_ARTICLE_TYPE, SOURCE_ARTICLE_SUB_TYPE, CRARTICLE_TYPE_ID, ACTV_FLAG, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   (17, 'NEWS', 'COMMENTS', 10, 'Y', 
    SYSDATE, USER, SYSDATE, USER);
Insert into  R360_APPDATA.CRARTICLE_TYPE_MAP
   (CRARTICLE_TYPE_MAP_ID, SOURCE_ARTICLE_TYPE, SOURCE_ARTICLE_SUB_TYPE, CRARTICLE_TYPE_ID, ACTV_FLAG, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   (18, 'FULL', 'PRESALE', 11, 'Y', 
    SYSDATE, USER, SYSDATE, USER);
Insert into  R360_APPDATA.CRARTICLE_TYPE_MAP
   (CRARTICLE_TYPE_MAP_ID, SOURCE_ARTICLE_TYPE, SOURCE_ARTICLE_SUB_TYPE, CRARTICLE_TYPE_ID, ACTV_FLAG, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   (19, 'CLASSIC', 'PI TEXT', 12, 'Y', 
    SYSDATE, USER, SYSDATE, USER);
Insert into  R360_APPDATA.CRARTICLE_TYPE_MAP
   (CRARTICLE_TYPE_MAP_ID, SOURCE_ARTICLE_TYPE, SOURCE_ARTICLE_SUB_TYPE, CRARTICLE_TYPE_ID, ACTV_FLAG, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   (20, 'NEWS', 'RATING_ACTION', 13, 'Y', 
    SYSDATE, USER, SYSDATE, USER);
Insert into  R360_APPDATA.CRARTICLE_TYPE_MAP
   (CRARTICLE_TYPE_MAP_ID, SOURCE_ARTICLE_TYPE, SOURCE_ARTICLE_SUB_TYPE, CRARTICLE_TYPE_ID, ACTV_FLAG, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   (21, 'RESUPD', 'RATING_ACTION', 14, 'Y', 
    SYSDATE, USER, SYSDATE, USER);
Insert into  R360_APPDATA.CRARTICLE_TYPE_MAP
   (CRARTICLE_TYPE_MAP_ID, SOURCE_ARTICLE_TYPE, CRARTICLE_TYPE_ID, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   (22, 'SUMMARY', 15, 'Y', SYSDATE, 
    USER, SYSDATE, USER);
Insert into  R360_APPDATA.CRARTICLE_TYPE_MAP
   (CRARTICLE_TYPE_MAP_ID, SOURCE_ARTICLE_TYPE, SOURCE_ARTICLE_SUB_TYPE, CRARTICLE_TYPE_ID, ACTV_FLAG, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   (6, 'NEWS', 'CREDIT_NOTICE', 5, 'Y', 
    TO_DATE('09/23/2022 09:07:41', 'MM/DD/YYYY HH24:MI:SS'), USER, SYSDATE, USER);
Insert into  R360_APPDATA.CRARTICLE_TYPE_MAP
   (CRARTICLE_TYPE_MAP_ID, SOURCE_ARTICLE_TYPE, SOURCE_ARTICLE_SUB_TYPE, CRARTICLE_TYPE_ID, ACTV_FLAG, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   (8, 'COMMENTS', 'CRITERIA_GUIDANCE', 6, 'Y', 
    SYSDATE, USER, SYSDATE, USER);
Insert into  R360_APPDATA.CRARTICLE_TYPE_MAP
   (CRARTICLE_TYPE_MAP_ID, SOURCE_ARTICLE_TYPE, SOURCE_ARTICLE_SUB_TYPE, CRARTICLE_TYPE_ID, ACTV_FLAG, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   (9, 'FULL', 'TRANSACTION UPDATE', 7, 'Y', 
    SYSDATE, USER, SYSDATE, USER);
Insert into  R360_APPDATA.CRARTICLE_TYPE_MAP
   (CRARTICLE_TYPE_MAP_ID, SOURCE_ARTICLE_TYPE, SOURCE_ARTICLE_SUB_TYPE, CRARTICLE_TYPE_ID, ACTV_FLAG, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   (23, 'FULL', 'SUPPLEMENTARY ANALYSIS', 16, 'Y', 
    SYSDATE, USER, SYSDATE, USER);
Insert into  R360_APPDATA.CRARTICLE_TYPE_MAP
   (CRARTICLE_TYPE_MAP_ID, SOURCE_ARTICLE_TYPE, SOURCE_ARTICLE_SUB_TYPE, CRARTICLE_TYPE_ID, ACTV_FLAG, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   (24, 'CLASSIC', 'THIRD PARTY NEWS', 17, 'Y', 
    SYSDATE, USER, SYSDATE, USER);
COMMIT;


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\R360_NonPublicOpions\R360CFS_Release_Sep8th_2023\dml\criteria_types.sql

SET DEFINE OFF;
Insert into R360_APPDATA.CRITERIA_TYPES
   (CRITERIA_TYPE_ID, CRITERIA_TYPE, CRITERIA_TYPE_DESC, RANK_ORDER_NUM, ACTV_FLAG, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   (1, 'Request For Comment', 'Request For Comment', 1, 'Y', 
    TO_DATE('07/18/2023 09:18:07', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', TO_DATE('07/18/2023 09:18:07', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.CRITERIA_TYPES
   (CRITERIA_TYPE_ID, CRITERIA_TYPE, CRITERIA_TYPE_DESC, RANK_ORDER_NUM, ACTV_FLAG, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   (2, 'Corporate', 'Corporate', 2, 'Y', 
    TO_DATE('07/18/2023 09:18:07', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', TO_DATE('07/18/2023 09:18:07', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.CRITERIA_TYPES
   (CRITERIA_TYPE_ID, CRITERIA_TYPE, CRITERIA_TYPE_DESC, RANK_ORDER_NUM, ACTV_FLAG, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   (3, 'Financial Institutions', 'Financial Institutions', 3, 'Y', 
    TO_DATE('07/18/2023 09:18:07', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', TO_DATE('07/18/2023 09:18:07', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.CRITERIA_TYPES
   (CRITERIA_TYPE_ID, CRITERIA_TYPE, CRITERIA_TYPE_DESC, RANK_ORDER_NUM, ACTV_FLAG, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   (4, 'Governments', 'Governments', 4, 'Y', 
    TO_DATE('07/18/2023 09:18:07', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', TO_DATE('07/18/2023 09:18:07', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.CRITERIA_TYPES
   (CRITERIA_TYPE_ID, CRITERIA_TYPE, CRITERIA_TYPE_DESC, RANK_ORDER_NUM, ACTV_FLAG, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   (5, 'Infrastructure', 'Infrastructure', 5, 'Y', 
    TO_DATE('07/18/2023 09:18:08', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', TO_DATE('07/18/2023 09:18:08', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.CRITERIA_TYPES
   (CRITERIA_TYPE_ID, CRITERIA_TYPE, CRITERIA_TYPE_DESC, RANK_ORDER_NUM, ACTV_FLAG, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   (6, 'Insurance', 'Insurance', 6, 'Y', 
    TO_DATE('07/18/2023 09:18:08', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', TO_DATE('07/18/2023 09:18:08', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.CRITERIA_TYPES
   (CRITERIA_TYPE_ID, CRITERIA_TYPE, CRITERIA_TYPE_DESC, RANK_ORDER_NUM, ACTV_FLAG, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   (7, 'Structured Finance', 'Structured Finance', 7, 'Y', 
    TO_DATE('07/18/2023 09:18:08', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', TO_DATE('07/18/2023 09:18:08', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.CRITERIA_TYPES
   (CRITERIA_TYPE_ID, CRITERIA_TYPE, CRITERIA_TYPE_DESC, RANK_ORDER_NUM, ACTV_FLAG, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   (8, 'U.S. Public Finance', 'U.S. Public Finance', 8, 'Y', 
    TO_DATE('07/18/2023 09:18:08', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', TO_DATE('07/18/2023 09:18:08', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.CRITERIA_TYPES
   (CRITERIA_TYPE_ID, CRITERIA_TYPE, CRITERIA_TYPE_DESC, RANK_ORDER_NUM, ACTV_FLAG, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   (9, 'General', 'General', 9, 'Y', 
    TO_DATE('07/18/2023 09:18:09', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', TO_DATE('07/18/2023 09:18:09', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.CRITERIA_TYPES
   (CRITERIA_TYPE_ID, CRITERIA_TYPE, CRITERIA_TYPE_DESC, RANK_ORDER_NUM, ACTV_FLAG, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   (10, 'Legal', 'Legal', 10, 'Y', 
    TO_DATE('07/18/2023 09:18:09', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', TO_DATE('07/18/2023 09:18:09', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
COMMIT;


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\R360_NonPublicOpions\R360CFS_Release_Sep8th_2023\dml\criteria_type_map.sql

SET DEFINE OFF;
Insert into R360_APPDATA.CRITERIA_TYPE_MAP
   (CRITERIA_TYPE_MAP_ID, CRITERIA_TYPE_ID, MENU_CODE, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   (1, 1, 'REQALL', 'Y', TO_DATE('07/18/2023 09:18:10', 'MM/DD/YYYY HH24:MI:SS'), 
    'R360_APPDATA', TO_DATE('07/18/2023 09:18:10', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.CRITERIA_TYPE_MAP
   (CRITERIA_TYPE_MAP_ID, CRITERIA_TYPE_ID, MENU_CODE, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   (2, 2, 'CRITCORPGEN', 'Y', TO_DATE('07/18/2023 09:18:10', 'MM/DD/YYYY HH24:MI:SS'), 
    'R360_APPDATA', TO_DATE('07/18/2023 09:18:10', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.CRITERIA_TYPE_MAP
   (CRITERIA_TYPE_MAP_ID, CRITERIA_TYPE_ID, MENU_CODE, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   (3, 2, 'CRITCORPFND', 'Y', TO_DATE('07/18/2023 09:18:10', 'MM/DD/YYYY HH24:MI:SS'), 
    'R360_APPDATA', TO_DATE('07/18/2023 09:18:10', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.CRITERIA_TYPE_MAP
   (CRITERIA_TYPE_MAP_ID, CRITERIA_TYPE_ID, MENU_CODE, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   (4, 2, 'CRITCORPIND', 'Y', TO_DATE('07/18/2023 09:18:10', 'MM/DD/YYYY HH24:MI:SS'), 
    'R360_APPDATA', TO_DATE('07/18/2023 09:18:10', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.CRITERIA_TYPE_MAP
   (CRITERIA_TYPE_MAP_ID, CRITERIA_TYPE_ID, MENU_CODE, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   (5, 2, 'CRITCORPPRF', 'Y', TO_DATE('07/18/2023 09:18:10', 'MM/DD/YYYY HH24:MI:SS'), 
    'R360_APPDATA', TO_DATE('07/18/2023 09:18:10', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.CRITERIA_TYPE_MAP
   (CRITERIA_TYPE_MAP_ID, CRITERIA_TYPE_ID, MENU_CODE, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   (6, 2, 'CRITCORPREC', 'Y', TO_DATE('07/18/2023 09:18:11', 'MM/DD/YYYY HH24:MI:SS'), 
    'R360_APPDATA', TO_DATE('07/18/2023 09:18:11', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.CRITERIA_TYPE_MAP
   (CRITERIA_TYPE_MAP_ID, CRITERIA_TYPE_ID, MENU_CODE, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   (7, 2, 'CRITCORPUTIL', 'Y', TO_DATE('07/18/2023 09:18:11', 'MM/DD/YYYY HH24:MI:SS'), 
    'R360_APPDATA', TO_DATE('07/18/2023 09:18:11', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.CRITERIA_TYPE_MAP
   (CRITERIA_TYPE_MAP_ID, CRITERIA_TYPE_ID, MENU_CODE, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   (8, 2, 'CRITCORPRFC', 'Y', TO_DATE('07/18/2023 09:18:11', 'MM/DD/YYYY HH24:MI:SS'), 
    'R360_APPDATA', TO_DATE('07/18/2023 09:18:11', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.CRITERIA_TYPE_MAP
   (CRITERIA_TYPE_MAP_ID, CRITERIA_TYPE_ID, MENU_CODE, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   (9, 2, 'CRITCORPTOC', 'Y', TO_DATE('07/18/2023 09:18:12', 'MM/DD/YYYY HH24:MI:SS'), 
    'R360_APPDATA', TO_DATE('07/18/2023 09:18:12', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.CRITERIA_TYPE_MAP
   (CRITERIA_TYPE_MAP_ID, CRITERIA_TYPE_ID, MENU_CODE, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   (10, 3, 'CRITFIGEN', 'Y', TO_DATE('07/18/2023 09:18:12', 'MM/DD/YYYY HH24:MI:SS'), 
    'R360_APPDATA', TO_DATE('07/18/2023 09:18:12', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.CRITERIA_TYPE_MAP
   (CRITERIA_TYPE_MAP_ID, CRITERIA_TYPE_ID, MENU_CODE, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   (11, 3, 'CRITFIBNK', 'Y', TO_DATE('07/18/2023 09:18:12', 'MM/DD/YYYY HH24:MI:SS'), 
    'R360_APPDATA', TO_DATE('07/18/2023 09:18:12', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.CRITERIA_TYPE_MAP
   (CRITERIA_TYPE_MAP_ID, CRITERIA_TYPE_ID, MENU_CODE, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   (12, 3, 'CRITFIBD', 'Y', TO_DATE('07/18/2023 09:18:12', 'MM/DD/YYYY HH24:MI:SS'), 
    'R360_APPDATA', TO_DATE('07/18/2023 09:18:12', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.CRITERIA_TYPE_MAP
   (CRITERIA_TYPE_MAP_ID, CRITERIA_TYPE_ID, MENU_CODE, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   (13, 3, 'CRITFIFC', 'Y', TO_DATE('07/18/2023 09:18:12', 'MM/DD/YYYY HH24:MI:SS'), 
    'R360_APPDATA', TO_DATE('07/18/2023 09:18:12', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.CRITERIA_TYPE_MAP
   (CRITERIA_TYPE_MAP_ID, CRITERIA_TYPE_ID, MENU_CODE, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   (14, 3, 'CRITFIFIF', 'Y', TO_DATE('07/18/2023 09:18:13', 'MM/DD/YYYY HH24:MI:SS'), 
    'R360_APPDATA', TO_DATE('07/18/2023 09:18:13', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.CRITERIA_TYPE_MAP
   (CRITERIA_TYPE_MAP_ID, CRITERIA_TYPE_ID, MENU_CODE, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   (15, 3, 'CRITFIOTH', 'Y', TO_DATE('07/18/2023 09:18:13', 'MM/DD/YYYY HH24:MI:SS'), 
    'R360_APPDATA', TO_DATE('07/18/2023 09:18:13', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.CRITERIA_TYPE_MAP
   (CRITERIA_TYPE_MAP_ID, CRITERIA_TYPE_ID, MENU_CODE, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   (16, 3, 'CRITFIRFC', 'Y', TO_DATE('07/18/2023 09:18:13', 'MM/DD/YYYY HH24:MI:SS'), 
    'R360_APPDATA', TO_DATE('07/18/2023 09:18:13', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.CRITERIA_TYPE_MAP
   (CRITERIA_TYPE_MAP_ID, CRITERIA_TYPE_ID, MENU_CODE, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   (17, 3, 'CRITFIFND', 'Y', TO_DATE('07/18/2023 09:18:13', 'MM/DD/YYYY HH24:MI:SS'), 
    'R360_APPDATA', TO_DATE('07/18/2023 09:18:13', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.CRITERIA_TYPE_MAP
   (CRITERIA_TYPE_MAP_ID, CRITERIA_TYPE_ID, MENU_CODE, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   (18, 3, 'CRITFITOC', 'Y', TO_DATE('07/18/2023 09:18:14', 'MM/DD/YYYY HH24:MI:SS'), 
    'R360_APPDATA', TO_DATE('07/18/2023 09:18:14', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.CRITERIA_TYPE_MAP
   (CRITERIA_TYPE_MAP_ID, CRITERIA_TYPE_ID, MENU_CODE, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   (19, 4, 'CRITGOVGEN', 'Y', TO_DATE('07/18/2023 09:18:14', 'MM/DD/YYYY HH24:MI:SS'), 
    'R360_APPDATA', TO_DATE('07/18/2023 09:18:14', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.CRITERIA_TYPE_MAP
   (CRITERIA_TYPE_MAP_ID, CRITERIA_TYPE_ID, MENU_CODE, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   (20, 4, 'CRITGOVIPF', 'Y', TO_DATE('07/18/2023 09:18:14', 'MM/DD/YYYY HH24:MI:SS'), 
    'R360_APPDATA', TO_DATE('07/18/2023 09:18:14', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.CRITERIA_TYPE_MAP
   (CRITERIA_TYPE_MAP_ID, CRITERIA_TYPE_ID, MENU_CODE, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   (21, 4, 'CRITGOVSOV', 'Y', TO_DATE('07/18/2023 09:18:14', 'MM/DD/YYYY HH24:MI:SS'), 
    'R360_APPDATA', TO_DATE('07/18/2023 09:18:14', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.CRITERIA_TYPE_MAP
   (CRITERIA_TYPE_MAP_ID, CRITERIA_TYPE_ID, MENU_CODE, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   (22, 4, 'CRITGOVUSPF', 'Y', TO_DATE('07/18/2023 09:18:14', 'MM/DD/YYYY HH24:MI:SS'), 
    'R360_APPDATA', TO_DATE('07/18/2023 09:18:14', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.CRITERIA_TYPE_MAP
   (CRITERIA_TYPE_MAP_ID, CRITERIA_TYPE_ID, MENU_CODE, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   (23, 4, 'CRITGOVRFC', 'Y', TO_DATE('07/18/2023 09:18:15', 'MM/DD/YYYY HH24:MI:SS'), 
    'R360_APPDATA', TO_DATE('07/18/2023 09:18:15', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.CRITERIA_TYPE_MAP
   (CRITERIA_TYPE_MAP_ID, CRITERIA_TYPE_ID, MENU_CODE, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   (24, 4, 'CRITGOVFND', 'Y', TO_DATE('07/18/2023 09:18:15', 'MM/DD/YYYY HH24:MI:SS'), 
    'R360_APPDATA', TO_DATE('07/18/2023 09:18:15', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.CRITERIA_TYPE_MAP
   (CRITERIA_TYPE_MAP_ID, CRITERIA_TYPE_ID, MENU_CODE, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   (25, 4, 'CRITGOVTOC', 'Y', TO_DATE('07/18/2023 09:18:15', 'MM/DD/YYYY HH24:MI:SS'), 
    'R360_APPDATA', TO_DATE('07/18/2023 09:18:15', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.CRITERIA_TYPE_MAP
   (CRITERIA_TYPE_MAP_ID, CRITERIA_TYPE_ID, MENU_CODE, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   (26, 5, 'CRITINFTOC', 'Y', TO_DATE('07/18/2023 09:18:15', 'MM/DD/YYYY HH24:MI:SS'), 
    'R360_APPDATA', TO_DATE('07/18/2023 09:18:15', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.CRITERIA_TYPE_MAP
   (CRITERIA_TYPE_MAP_ID, CRITERIA_TYPE_ID, MENU_CODE, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   (27, 5, 'CRITINFFND', 'Y', TO_DATE('07/18/2023 09:18:16', 'MM/DD/YYYY HH24:MI:SS'), 
    'R360_APPDATA', TO_DATE('07/18/2023 09:18:16', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.CRITERIA_TYPE_MAP
   (CRITERIA_TYPE_MAP_ID, CRITERIA_TYPE_ID, MENU_CODE, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   (28, 5, 'CRITINFGEN', 'Y', TO_DATE('07/18/2023 09:18:16', 'MM/DD/YYYY HH24:MI:SS'), 
    'R360_APPDATA', TO_DATE('07/18/2023 09:18:16', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.CRITERIA_TYPE_MAP
   (CRITERIA_TYPE_MAP_ID, CRITERIA_TYPE_ID, MENU_CODE, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   (29, 5, 'CRITINFCORP', 'Y', TO_DATE('07/18/2023 09:18:16', 'MM/DD/YYYY HH24:MI:SS'), 
    'R360_APPDATA', TO_DATE('07/18/2023 09:18:16', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.CRITERIA_TYPE_MAP
   (CRITERIA_TYPE_MAP_ID, CRITERIA_TYPE_ID, MENU_CODE, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   (30, 5, 'CRITINFUSIPF', 'Y', TO_DATE('07/18/2023 09:18:16', 'MM/DD/YYYY HH24:MI:SS'), 
    'R360_APPDATA', TO_DATE('07/18/2023 09:18:16', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.CRITERIA_TYPE_MAP
   (CRITERIA_TYPE_MAP_ID, CRITERIA_TYPE_ID, MENU_CODE, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   (31, 5, 'CRITINFPRDEV', 'Y', TO_DATE('07/18/2023 09:18:16', 'MM/DD/YYYY HH24:MI:SS'), 
    'R360_APPDATA', TO_DATE('07/18/2023 09:18:16', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.CRITERIA_TYPE_MAP
   (CRITERIA_TYPE_MAP_ID, CRITERIA_TYPE_ID, MENU_CODE, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   (32, 5, 'CRITINFPFCS', 'Y', TO_DATE('07/18/2023 09:18:17', 'MM/DD/YYYY HH24:MI:SS'), 
    'R360_APPDATA', TO_DATE('07/18/2023 09:18:17', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.CRITERIA_TYPE_MAP
   (CRITERIA_TYPE_MAP_ID, CRITERIA_TYPE_ID, MENU_CODE, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   (33, 5, 'CRITINFREC', 'Y', TO_DATE('07/18/2023 09:18:17', 'MM/DD/YYYY HH24:MI:SS'), 
    'R360_APPDATA', TO_DATE('07/18/2023 09:18:17', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.CRITERIA_TYPE_MAP
   (CRITERIA_TYPE_MAP_ID, CRITERIA_TYPE_ID, MENU_CODE, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   (34, 5, 'CRITINFUTIL', 'Y', TO_DATE('07/18/2023 09:18:17', 'MM/DD/YYYY HH24:MI:SS'), 
    'R360_APPDATA', TO_DATE('07/18/2023 09:18:17', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.CRITERIA_TYPE_MAP
   (CRITERIA_TYPE_MAP_ID, CRITERIA_TYPE_ID, MENU_CODE, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   (35, 5, 'CRITINFRFC', 'Y', TO_DATE('07/18/2023 09:18:17', 'MM/DD/YYYY HH24:MI:SS'), 
    'R360_APPDATA', TO_DATE('07/18/2023 09:18:17', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.CRITERIA_TYPE_MAP
   (CRITERIA_TYPE_MAP_ID, CRITERIA_TYPE_ID, MENU_CODE, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   (36, 6, 'CRITINSGEN', 'Y', TO_DATE('07/18/2023 09:18:18', 'MM/DD/YYYY HH24:MI:SS'), 
    'R360_APPDATA', TO_DATE('07/18/2023 09:18:18', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.CRITERIA_TYPE_MAP
   (CRITERIA_TYPE_MAP_ID, CRITERIA_TYPE_ID, MENU_CODE, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   (37, 6, 'CRITINSBND', 'Y', TO_DATE('07/18/2023 09:18:18', 'MM/DD/YYYY HH24:MI:SS'), 
    'R360_APPDATA', TO_DATE('07/18/2023 09:18:18', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.CRITERIA_TYPE_MAP
   (CRITERIA_TYPE_MAP_ID, CRITERIA_TYPE_ID, MENU_CODE, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   (38, 6, 'CRITINSSP', 'Y', TO_DATE('07/18/2023 09:18:18', 'MM/DD/YYYY HH24:MI:SS'), 
    'R360_APPDATA', TO_DATE('07/18/2023 09:18:18', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.CRITERIA_TYPE_MAP
   (CRITERIA_TYPE_MAP_ID, CRITERIA_TYPE_ID, MENU_CODE, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   (39, 6, 'CRITINSHLT', 'Y', TO_DATE('07/18/2023 09:18:18', 'MM/DD/YYYY HH24:MI:SS'), 
    'R360_APPDATA', TO_DATE('07/18/2023 09:18:18', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.CRITERIA_TYPE_MAP
   (CRITERIA_TYPE_MAP_ID, CRITERIA_TYPE_ID, MENU_CODE, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   (40, 6, 'CRITINSLF', 'Y', TO_DATE('07/18/2023 09:18:19', 'MM/DD/YYYY HH24:MI:SS'), 
    'R360_APPDATA', TO_DATE('07/18/2023 09:18:19', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.CRITERIA_TYPE_MAP
   (CRITERIA_TYPE_MAP_ID, CRITERIA_TYPE_ID, MENU_CODE, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   (41, 6, 'CRITINSFUND', 'Y', TO_DATE('07/18/2023 09:18:19', 'MM/DD/YYYY HH24:MI:SS'), 
    'R360_APPDATA', TO_DATE('07/18/2023 09:18:19', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.CRITERIA_TYPE_MAP
   (CRITERIA_TYPE_MAP_ID, CRITERIA_TYPE_ID, MENU_CODE, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   (42, 6, 'CRITINSRFC', 'Y', TO_DATE('07/18/2023 09:18:19', 'MM/DD/YYYY HH24:MI:SS'), 
    'R360_APPDATA', TO_DATE('07/18/2023 09:18:19', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.CRITERIA_TYPE_MAP
   (CRITERIA_TYPE_MAP_ID, CRITERIA_TYPE_ID, MENU_CODE, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   (43, 6, 'CRITINSTOC', 'Y', TO_DATE('07/18/2023 09:18:20', 'MM/DD/YYYY HH24:MI:SS'), 
    'R360_APPDATA', TO_DATE('07/18/2023 09:18:20', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.CRITERIA_TYPE_MAP
   (CRITERIA_TYPE_MAP_ID, CRITERIA_TYPE_ID, MENU_CODE, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   (44, 6, 'CRITINPC', 'Y', TO_DATE('07/18/2023 09:18:20', 'MM/DD/YYYY HH24:MI:SS'), 
    'R360_APPDATA', TO_DATE('07/18/2023 09:18:20', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.CRITERIA_TYPE_MAP
   (CRITERIA_TYPE_MAP_ID, CRITERIA_TYPE_ID, MENU_CODE, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   (45, 7, 'CRITSFABCP', 'Y', TO_DATE('07/18/2023 09:18:21', 'MM/DD/YYYY HH24:MI:SS'), 
    'R360_APPDATA', TO_DATE('07/18/2023 09:18:21', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.CRITERIA_TYPE_MAP
   (CRITERIA_TYPE_MAP_ID, CRITERIA_TYPE_ID, MENU_CODE, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   (46, 7, 'CRITSFABS', 'Y', TO_DATE('07/18/2023 09:18:21', 'MM/DD/YYYY HH24:MI:SS'), 
    'R360_APPDATA', TO_DATE('07/18/2023 09:18:21', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.CRITERIA_TYPE_MAP
   (CRITERIA_TYPE_MAP_ID, CRITERIA_TYPE_ID, MENU_CODE, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   (47, 7, 'CRITSFCDO', 'Y', TO_DATE('07/18/2023 09:18:21', 'MM/DD/YYYY HH24:MI:SS'), 
    'R360_APPDATA', TO_DATE('07/18/2023 09:18:21', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.CRITERIA_TYPE_MAP
   (CRITERIA_TYPE_MAP_ID, CRITERIA_TYPE_ID, MENU_CODE, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   (48, 7, 'CRITSFCMBS', 'Y', TO_DATE('07/18/2023 09:18:22', 'MM/DD/YYYY HH24:MI:SS'), 
    'R360_APPDATA', TO_DATE('07/18/2023 09:18:22', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.CRITERIA_TYPE_MAP
   (CRITERIA_TYPE_MAP_ID, CRITERIA_TYPE_ID, MENU_CODE, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   (49, 7, 'CRITSFCB', 'Y', TO_DATE('07/18/2023 09:18:22', 'MM/DD/YYYY HH24:MI:SS'), 
    'R360_APPDATA', TO_DATE('07/18/2023 09:18:22', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.CRITERIA_TYPE_MAP
   (CRITERIA_TYPE_MAP_ID, CRITERIA_TYPE_ID, MENU_CODE, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   (50, 7, 'CRITSFFUND', 'Y', TO_DATE('07/18/2023 09:18:22', 'MM/DD/YYYY HH24:MI:SS'), 
    'R360_APPDATA', TO_DATE('07/18/2023 09:18:22', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.CRITERIA_TYPE_MAP
   (CRITERIA_TYPE_MAP_ID, CRITERIA_TYPE_ID, MENU_CODE, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   (51, 7, 'CRITSFGEN', 'Y', TO_DATE('07/18/2023 09:18:22', 'MM/DD/YYYY HH24:MI:SS'), 
    'R360_APPDATA', TO_DATE('07/18/2023 09:18:22', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.CRITERIA_TYPE_MAP
   (CRITERIA_TYPE_MAP_ID, CRITERIA_TYPE_ID, MENU_CODE, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   (52, 7, 'CRITSFOC', 'Y', TO_DATE('07/18/2023 09:18:22', 'MM/DD/YYYY HH24:MI:SS'), 
    'R360_APPDATA', TO_DATE('07/18/2023 09:18:22', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.CRITERIA_TYPE_MAP
   (CRITERIA_TYPE_MAP_ID, CRITERIA_TYPE_ID, MENU_CODE, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   (53, 7, 'CRITSFRFC', 'Y', TO_DATE('07/18/2023 09:18:23', 'MM/DD/YYYY HH24:MI:SS'), 
    'R360_APPDATA', TO_DATE('07/18/2023 09:18:23', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.CRITERIA_TYPE_MAP
   (CRITERIA_TYPE_MAP_ID, CRITERIA_TYPE_ID, MENU_CODE, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   (54, 7, 'CRITSFRBMS', 'Y', TO_DATE('07/18/2023 09:18:23', 'MM/DD/YYYY HH24:MI:SS'), 
    'R360_APPDATA', TO_DATE('07/18/2023 09:18:23', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.CRITERIA_TYPE_MAP
   (CRITERIA_TYPE_MAP_ID, CRITERIA_TYPE_ID, MENU_CODE, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   (55, 7, 'CRITSFSE', 'Y', TO_DATE('07/18/2023 09:18:23', 'MM/DD/YYYY HH24:MI:SS'), 
    'R360_APPDATA', TO_DATE('07/18/2023 09:18:23', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.CRITERIA_TYPE_MAP
   (CRITERIA_TYPE_MAP_ID, CRITERIA_TYPE_ID, MENU_CODE, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   (56, 7, 'CRITSFTOC', 'Y', TO_DATE('07/18/2023 09:18:23', 'MM/DD/YYYY HH24:MI:SS'), 
    'R360_APPDATA', TO_DATE('07/18/2023 09:18:23', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.CRITERIA_TYPE_MAP
   (CRITERIA_TYPE_MAP_ID, CRITERIA_TYPE_ID, MENU_CODE, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   (57, 7, 'CRITSFLG', 'Y', TO_DATE('07/18/2023 09:18:24', 'MM/DD/YYYY HH24:MI:SS'), 
    'R360_APPDATA', TO_DATE('07/18/2023 09:18:24', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.CRITERIA_TYPE_MAP
   (CRITERIA_TYPE_MAP_ID, CRITERIA_TYPE_ID, MENU_CODE, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   (58, 8, 'CRITGOVUSPF', 'Y', TO_DATE('07/18/2023 09:18:24', 'MM/DD/YYYY HH24:MI:SS'), 
    'R360_APPDATA', TO_DATE('07/18/2023 09:18:24', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.CRITERIA_TYPE_MAP
   (CRITERIA_TYPE_MAP_ID, CRITERIA_TYPE_ID, MENU_CODE, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   (59, 9, 'CRITALLSECT', 'Y', TO_DATE('07/18/2023 09:18:24', 'MM/DD/YYYY HH24:MI:SS'), 
    'R360_APPDATA', TO_DATE('07/18/2023 09:18:24', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.CRITERIA_TYPE_MAP
   (CRITERIA_TYPE_MAP_ID, CRITERIA_TYPE_ID, MENU_CODE, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   (60, 9, 'CRITCORPGEN', 'Y', TO_DATE('07/18/2023 09:18:24', 'MM/DD/YYYY HH24:MI:SS'), 
    'R360_APPDATA', TO_DATE('07/18/2023 09:18:24', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.CRITERIA_TYPE_MAP
   (CRITERIA_TYPE_MAP_ID, CRITERIA_TYPE_ID, MENU_CODE, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   (61, 9, 'CRITLEGAL', 'Y', TO_DATE('07/18/2023 09:18:25', 'MM/DD/YYYY HH24:MI:SS'), 
    'R360_APPDATA', TO_DATE('07/18/2023 09:18:25', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.CRITERIA_TYPE_MAP
   (CRITERIA_TYPE_MAP_ID, CRITERIA_TYPE_ID, MENU_CODE, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   (62, 9, 'CRITFIGEN', 'Y', TO_DATE('07/18/2023 09:18:25', 'MM/DD/YYYY HH24:MI:SS'), 
    'R360_APPDATA', TO_DATE('07/18/2023 09:18:25', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.CRITERIA_TYPE_MAP
   (CRITERIA_TYPE_MAP_ID, CRITERIA_TYPE_ID, MENU_CODE, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   (63, 9, 'CRITGOVGEN', 'Y', TO_DATE('07/18/2023 09:18:25', 'MM/DD/YYYY HH24:MI:SS'), 
    'R360_APPDATA', TO_DATE('07/18/2023 09:18:25', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.CRITERIA_TYPE_MAP
   (CRITERIA_TYPE_MAP_ID, CRITERIA_TYPE_ID, MENU_CODE, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   (64, 9, 'CRITINSGEN', 'Y', TO_DATE('07/18/2023 09:18:25', 'MM/DD/YYYY HH24:MI:SS'), 
    'R360_APPDATA', TO_DATE('07/18/2023 09:18:25', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.CRITERIA_TYPE_MAP
   (CRITERIA_TYPE_MAP_ID, CRITERIA_TYPE_ID, MENU_CODE, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   (65, 9, 'CRITSFGEN', 'Y', TO_DATE('07/18/2023 09:18:26', 'MM/DD/YYYY HH24:MI:SS'), 
    'R360_APPDATA', TO_DATE('07/18/2023 09:18:26', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.CRITERIA_TYPE_MAP
   (CRITERIA_TYPE_MAP_ID, CRITERIA_TYPE_ID, MENU_CODE, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   (66, 9, 'CRITGENRFC', 'Y', TO_DATE('07/18/2023 09:18:26', 'MM/DD/YYYY HH24:MI:SS'), 
    'R360_APPDATA', TO_DATE('07/18/2023 09:18:26', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.CRITERIA_TYPE_MAP
   (CRITERIA_TYPE_MAP_ID, CRITERIA_TYPE_ID, MENU_CODE, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   (67, 9, 'CRITGENTOC', 'Y', TO_DATE('07/18/2023 09:18:26', 'MM/DD/YYYY HH24:MI:SS'), 
    'R360_APPDATA', TO_DATE('07/18/2023 09:18:26', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.CRITERIA_TYPE_MAP
   (CRITERIA_TYPE_MAP_ID, CRITERIA_TYPE_ID, MENU_CODE, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   (68, 9, 'CRITTABOFCONT', 'Y', TO_DATE('07/18/2023 09:18:26', 'MM/DD/YYYY HH24:MI:SS'), 
    'R360_APPDATA', TO_DATE('07/18/2023 09:18:26', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.CRITERIA_TYPE_MAP
   (CRITERIA_TYPE_MAP_ID, CRITERIA_TYPE_ID, MENU_CODE, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   (69, 10, 'CRITLEGAL', 'Y', TO_DATE('07/18/2023 09:18:27', 'MM/DD/YYYY HH24:MI:SS'), 
    'R360_APPDATA', TO_DATE('07/18/2023 09:18:27', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.CRITERIA_TYPE_MAP
   (CRITERIA_TYPE_MAP_ID, CRITERIA_TYPE_ID, MENU_CODE, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   (70, 10, 'CRITLEGALTOC', 'Y', TO_DATE('07/18/2023 09:18:27', 'MM/DD/YYYY HH24:MI:SS'), 
    'R360_APPDATA', TO_DATE('07/18/2023 09:18:27', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
COMMIT;


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\R360_NonPublicOpions\R360CFS_Release_Sep8th_2023\dml\dataelement_ui_config.sql

SET DEFINE OFF;
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (282, 'CORP', 'REC_INTEXPINTOA', 'Reconciliation', 'Interest expense', 
    230, 'Interest Expense - Other', 181, TO_DATE('02/01/2023 16:46:50', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:50', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (283, 'CORP', 'REC_INTEXPADJTOT', 'Reconciliation', 'Interest expense', 
    138, 'Total Adjustments', 182, TO_DATE('02/01/2023 16:46:50', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:50', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'Y');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (284, 'CORP', 'REC_XINTA', 'Reconciliation', 'Interest expense', 
    112, 'Interest Expense, Adjusted', 183, TO_DATE('02/01/2023 16:46:50', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:50', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'Y');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (285, 'CORP', 'REC_INTEXPILL', 'Reconciliation', 'Interest expense', 
    314, 'Incremental Lease Interest Expense', 254, TO_DATE('02/01/2023 16:46:50', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:50', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (286, 'CORP', 'REC_FFOREP', 'Reconciliation', 'Funds From Operations (FFO)', 
    345, 'EBITDA, Adjusted', 184, TO_DATE('02/01/2023 16:46:50', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:50', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'Y');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (287, 'CORP', 'REC_FFOOPLEASE', 'Reconciliation', 'Funds From Operations (FFO)', 
    343, 'Operating Leases', 185, TO_DATE('02/01/2023 16:46:50', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:50', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'Y');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (288, 'CORP', 'REC_FFOHYBDBT', 'Reconciliation', 'Funds From Operations (FFO)', 
    304, 'Debt-Like Hybrids', 186, TO_DATE('02/01/2023 16:46:50', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:50', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (289, 'CORP', 'REC_FFOHYBEQU', 'Reconciliation', 'Funds From Operations (FFO)', 
    341, 'Equity-Like Hybrids', 187, TO_DATE('02/01/2023 16:46:50', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:50', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (290, 'CORP', 'REC_FFOHYBDBTI', 'Reconciliation', 'Funds From Operations (FFO)', 
    169, 'Intermediate Hybrids Reported As Debt', 188, TO_DATE('02/01/2023 16:46:50', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:50', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (291, 'CORP', 'REC_FFOHYBEQUI', 'Reconciliation', 'Funds From Operations (FFO)', 
    130, 'Intermediate Hybrids Reported As Equity', 189, TO_DATE('02/01/2023 16:46:50', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:50', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (292, 'CORP', 'REC_FFOCAPINT', 'Reconciliation', 'Funds From Operations (FFO)', 
    127, 'Capitalized Interest', 190, TO_DATE('02/01/2023 16:46:50', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:50', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'Y');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (293, 'CORP', 'REC_FFOCAPFIN', 'Reconciliation', 'Funds From Operations (FFO)', 
    168, 'Captive Finance Operations', 191, TO_DATE('02/01/2023 16:46:50', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:50', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (294, 'CORP', 'REC_FFOCD', 'Reconciliation', 'Funds From Operations (FFO)', 
    128, 'Deconsolidation/ Consolidation', 192, TO_DATE('02/01/2023 16:46:50', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:50', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (295, 'CORP', 'REC_FFOSECCOST', 'Reconciliation', 'Funds From Operations (FFO)', 
    171, 'Securitized Stranded Costs', 193, TO_DATE('02/01/2023 16:46:50', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:50', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (296, 'CORP', 'REC_FFOPPA', 'Reconciliation', 'Funds From Operations (FFO)', 
    398, 'Power Purchase Agreements', 194, TO_DATE('02/01/2023 16:46:50', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:50', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (297, 'CORP', 'REC_FFOEXPCOST', 'Reconciliation', 'Funds From Operations (FFO)', 
    303, 'Exploration Costs', 195, TO_DATE('02/01/2023 16:46:50', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:50', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (298, 'CORP', 'REC_FFOFFOOTH', 'Reconciliation', 'Funds From Operations (FFO)', 
    340, 'FFO - Other', 196, TO_DATE('02/01/2023 16:46:50', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:50', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (299, 'CORP', 'REC_FFOADJTOT', 'Reconciliation', 'Funds From Operations (FFO)', 
    260, 'Total Adjustments', 197, TO_DATE('02/01/2023 16:46:50', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:50', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'Y');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (300, 'CORP', 'REC_FFOA', 'Reconciliation', 'Funds From Operations (FFO)', 
    339, 'Funds From Operations, Adjusted', 198, TO_DATE('02/01/2023 16:46:50', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:50', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'Y');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (301, 'CORP', 'REC_FFOINTPN', 'Reconciliation', 'Funds From Operations (FFO)', 
    308, 'Cash Interest Paid', 1, TO_DATE('02/01/2023 16:46:51', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:51', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'Y');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (302, 'CORP', 'REC_FFOCIPOTH', 'Reconciliation', 'Funds From Operations (FFO)', 
    94, 'Cash Interest Paid Other', 2, TO_DATE('02/01/2023 16:46:51', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:51', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (303, 'CORP', 'REC_FFOTXPD', 'Reconciliation', 'Funds From Operations (FFO)', 
    346, 'Cash Taxes Paid', 3, TO_DATE('02/01/2023 16:46:51', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:51', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'Y');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (304, 'CORP', 'REC_FFOCTPOTH', 'Reconciliation', 'Funds From Operations (FFO)', 
    302, 'Cash Taxes Paid Other', 4, TO_DATE('02/01/2023 16:46:51', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:51', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (305, 'CORP', 'REC_FFOILL', 'Reconciliation', 'Funds From Operations (FFO)', 
    305, 'Incremental Lease Liabilities', 257, TO_DATE('02/01/2023 16:46:51', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:51', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (306, 'CORP', 'REC_CFOREP', 'Reconciliation', 'Cash flow from operations', 
    373, 'Cash Flow from Operations, Pre-Adjusted', 199, TO_DATE('02/01/2023 16:46:51', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:51', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'Y');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (307, 'CORP', 'REC_CFOTRECSLD', 'Reconciliation', 'Cash flow from operations', 
    375, 'Trade Receivables Securitizations', 200, TO_DATE('02/01/2023 16:46:51', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:51', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (308, 'CORP', 'REC_CFOOPLEASE', 'Reconciliation', 'Cash flow from operations', 
    248, 'Operating Leases', 201, TO_DATE('02/01/2023 16:46:51', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:51', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'Y');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (309, 'CORP', 'REC_CFOHYBDBT', 'Reconciliation', 'Cash flow from operations', 
    246, 'Debt-Like Hybrids', 202, TO_DATE('02/01/2023 16:46:51', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:51', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (310, 'CORP', 'REC_CFOHYBEQU', 'Reconciliation', 'Cash flow from operations', 
    247, 'Equity-Like Hybrids', 203, TO_DATE('02/01/2023 16:46:51', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:51', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (311, 'CORP', 'REC_CFOHYBDBTI', 'Reconciliation', 'Cash flow from operations', 
    115, 'Intermediate Hybrids Reported As Debt', 204, TO_DATE('02/01/2023 16:46:51', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:51', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (312, 'CORP', 'REC_CFOHYBEQUI', 'Reconciliation', 'Cash flow from operations', 
    285, 'Intermediate Hybrids Reported As Equity', 205, TO_DATE('02/01/2023 16:46:51', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:51', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (313, 'CORP', 'REC_CFOCAPINT', 'Reconciliation', 'Cash flow from operations', 
    79, 'Capitalized Interest', 206, TO_DATE('02/01/2023 16:46:51', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:51', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'Y');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (314, 'CORP', 'REC_CFOCAPDEVC', 'Reconciliation', 'Cash flow from operations', 
    370, 'Capitalized Development Costs', 207, TO_DATE('02/01/2023 16:46:51', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:51', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (315, 'CORP', 'REC_CFOINFRENC', 'Reconciliation', 'Cash flow from operations', 
    116, 'Infrastructure Renewal Costs', 208, TO_DATE('02/01/2023 16:46:51', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:51', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (316, 'CORP', 'REC_CFOCAPFIN', 'Reconciliation', 'Cash flow from operations', 
    196, 'Captive Finance Operations', 209, TO_DATE('02/01/2023 16:46:51', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:51', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (317, 'CORP', 'REC_CFOCD', 'Reconciliation', 'Cash flow from operations', 
    80, 'Deconsolidation/ Consolidation', 210, TO_DATE('02/01/2023 16:46:51', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:51', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (318, 'CORP', 'REC_CFOSECCOST', 'Reconciliation', 'Cash flow from operations', 
    374, 'Securitized Stranded Costs', 211, TO_DATE('02/01/2023 16:46:51', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:51', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (319, 'CORP', 'REC_CFOPPA', 'Reconciliation', 'Cash flow from operations', 
    287, 'Power Purchase Agreements', 212, TO_DATE('02/01/2023 16:46:51', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:51', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (320, 'CORP', 'REC_CFOINTDVCF', 'Reconciliation', 'Cash flow from operations', 
    286, 'Reclassification of Interest & Dividend Cash Flows', 213, TO_DATE('02/01/2023 16:46:51', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:51', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (321, 'CORP', 'REC_CFOFXMOV', 'Reconciliation', 'Cash flow from operations', 
    84, 'Foreign Exchange Movements (Reported below CFO)', 214, TO_DATE('02/01/2023 16:46:51', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:51', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (322, 'CORP', 'REC_CFODECOMFD', 'Reconciliation', 'Cash flow from operations', 
    152, 'Us Decommissioning Fund Contributions', 215, TO_DATE('02/01/2023 16:46:51', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:51', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (323, 'CORP', 'REC_CFOWCLF', 'Reconciliation', 'Cash flow from operations', 
    199, 'Working Capital - LIFO/ FIFO', 216, TO_DATE('02/01/2023 16:46:51', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:51', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (324, 'CORP', 'REC_CFOWCTX', 'Reconciliation', 'Cash flow from operations', 
    376, 'Working Capital - Taxes', 217, TO_DATE('02/01/2023 16:46:51', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:51', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (325, 'CORP', 'REC_CFOWCDER', 'Reconciliation', 'Cash flow from operations', 
    326, 'Working Capital - Derivatives', 218, TO_DATE('02/01/2023 16:46:51', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:51', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (326, 'CORP', 'REC_CFOWCAH', 'Reconciliation', 'Cash flow from operations', 
    117, 'Working Capital - Other', 219, TO_DATE('02/01/2023 16:46:51', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:51', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (327, 'CORP', 'REC_CFOFFOLF', 'Reconciliation', 'Cash flow from operations', 
    81, 'OCF - LIFO/ FIFO', 220, TO_DATE('02/01/2023 16:46:51', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:51', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (328, 'CORP', 'REC_CFOFFOTX', 'Reconciliation', 'Cash flow from operations', 
    198, 'OCF - Taxes', 221, TO_DATE('02/01/2023 16:46:51', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:51', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (329, 'CORP', 'REC_CFOFFORST', 'Reconciliation', 'Cash flow from operations', 
    371, 'OCF - Restructuring Costs', 222, TO_DATE('02/01/2023 16:46:52', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:52', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (330, 'CORP', 'REC_CFOFFODIS', 'Reconciliation', 'Cash flow from operations', 
    153, 'OCF - Asset Disposals', 223, TO_DATE('02/01/2023 16:46:52', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:52', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (100, 'CORP', 'REC_DEBTREP', 'Reconciliation', 'Debt', 
    160, 'Debt, Pre-Adjusted', 5, TO_DATE('02/01/2023 16:46:43', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:43', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'Y');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (101, 'CORP', 'REC_DEBTTRECSLD', 'Reconciliation', 'Debt', 
    161, 'Trade Receivables Securitization ', 6, TO_DATE('02/01/2023 16:46:43', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:43', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (102, 'CORP', 'REC_DEBTOPLEASE', 'Reconciliation', 'Debt', 
    290, 'Operating Leases', 7, TO_DATE('02/01/2023 16:46:43', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:43', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'Y');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (103, 'CORP', 'REC_DEBTHYBDBT', 'Reconciliation', 'Debt', 
    86, 'Debt-Like Hybrids', 8, TO_DATE('02/01/2023 16:46:43', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:43', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (104, 'CORP', 'REC_DEBTHYBEQU', 'Reconciliation', 'Debt', 
    156, 'Equity-Like Hybrids', 9, TO_DATE('02/01/2023 16:46:43', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:43', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (105, 'CORP', 'REC_DEBTHYBDBTI', 'Reconciliation', 'Debt', 
    87, 'Intermediate Hybrids Reported As Debt', 10, TO_DATE('02/01/2023 16:46:43', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:43', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (106, 'CORP', 'REC_DEBTHYBEQUI', 'Reconciliation', 'Debt', 
    253, 'Intermediate Hybrids Reported As Equity', 11, TO_DATE('02/01/2023 16:46:43', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:43', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (107, 'CORP', 'REC_DEBTPBODC', 'Reconciliation', 'Debt', 
    328, 'Postretirement Benefit Oblg/ Deferred Compensation', 12, TO_DATE('02/01/2023 16:46:43', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:43', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'Y');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (166, 'CORP', 'REC_EBITDASTKCO', 'Reconciliation', 'EBITDA', 
    212, 'Share-Based Compensation Expense', 68, TO_DATE('02/01/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'Y');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (167, 'CORP', 'REC_EBITDADVESUB', 'Reconciliation', 'EBITDA', 
    336, 'Dividends Received From Equity Investments', 69, TO_DATE('02/01/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (168, 'CORP', 'REC_EBITDACAPFIN', 'Reconciliation', 'EBITDA', 
    89, 'Captive Finance Operations', 70, TO_DATE('02/01/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (169, 'CORP', 'REC_EBITDACD', 'Reconciliation', 'EBITDA', 
    335, 'Deconsolidation/ Consolidation', 71, TO_DATE('02/01/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (170, 'CORP', 'REC_EBITDASECCOST', 'Reconciliation', 'EBITDA', 
    165, 'Securitized Stranded Costs', 72, TO_DATE('02/01/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (171, 'CORP', 'REC_EBITDAPPA', 'Reconciliation', 'EBITDA', 
    90, 'Power Purchase Agreements', 73, TO_DATE('02/01/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (172, 'CORP', 'REC_EBITDAARO', 'Reconciliation', 'EBITDA', 
    162, 'Asset Retirement Obligations', 74, TO_DATE('02/01/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (173, 'CORP', 'REC_EBITDAEXPCOST', 'Reconciliation', 'EBITDA', 
    391, 'Exploration Costs', 75, TO_DATE('02/01/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (174, 'CORP', 'REC_EBITDAREVIFIN', 'Reconciliation', 'EBITDA', 
    211, 'Revenues - Finance/Interest Income', 76, TO_DATE('02/01/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (175, 'CORP', 'REC_EBITDAREVDIS', 'Reconciliation', 'EBITDA', 
    295, 'Revenues - Profit On Disposals', 77, TO_DATE('02/01/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (176, 'CORP', 'REC_EBITDAREVDER', 'Reconciliation', 'EBITDA', 
    210, 'Revenues - Derivatives', 78, TO_DATE('02/01/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (177, 'CORP', 'REC_EBITDAOPRO1', 'Reconciliation', 'EBITDA', 
    294, 'Revenues - Other', 79, TO_DATE('02/01/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (178, 'CORP', 'REC_EBITDACOGSRST', 'Reconciliation', 'EBITDA', 
    389, 'COGS - Restructuring Costs', 80, TO_DATE('02/01/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (179, 'CORP', 'REC_EBITDACOGSVAL', 'Reconciliation', 'EBITDA', 
    390, 'COGS - Valuation gains/(Losses)', 81, TO_DATE('02/01/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (180, 'CORP', 'REC_EBITDACOGSOTH', 'Reconciliation', 'EBITDA', 
    208, 'COGS - Other Non-Operating Nonrecurring Items', 82, TO_DATE('02/01/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (181, 'CORP', 'REC_EBITDACOGSLIF', 'Reconciliation', 'EBITDA', 
    123, 'COGS - LIFO Liquidation Gains', 83, TO_DATE('02/01/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (182, 'CORP', 'REC_EBITDAXSGARST', 'Reconciliation', 'EBITDA', 
    93, 'SG&A - Restructuring Costs', 84, TO_DATE('02/01/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (183, 'CORP', 'REC_EBITDAXSGAVAL', 'Reconciliation', 'EBITDA', 
    396, 'SG&A - Valuation Gains/(Losses)', 85, TO_DATE('02/01/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (184, 'CORP', 'REC_EBITDAXSGAOTH', 'Reconciliation', 'EBITDA', 
    125, 'SG&A - Other Non-Operating Nonrecurring Items', 86, TO_DATE('02/01/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (185, 'CORP', 'REC_EBITDAXRDRST', 'Reconciliation', 'EBITDA', 
    92, 'R&D - Restructuring Costs', 87, TO_DATE('02/01/2023 16:46:47', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:47', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (186, 'CORP', 'REC_EBITDAXRDVAL', 'Reconciliation', 'EBITDA', 
    259, 'R&D - Valuation Gains/(Losses)', 88, TO_DATE('02/01/2023 16:46:47', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:47', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (187, 'CORP', 'REC_EBITDAXRDOTH', 'Reconciliation', 'EBITDA', 
    218, 'R&D - Other Non-Operating Nonrecurring Items', 89, TO_DATE('02/01/2023 16:46:47', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:47', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (188, 'CORP', 'REC_EBITDARMSMRST', 'Reconciliation', 'EBITDA', 
    392, 'RMS&M - Restructuring Costs', 90, TO_DATE('02/01/2023 16:46:47', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:47', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (189, 'CORP', 'REC_EBITDARMSMVAL', 'Reconciliation', 'EBITDA', 
    164, 'RMS&M - Valuation Gains/(Losses)', 91, TO_DATE('02/01/2023 16:46:47', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:47', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (190, 'CORP', 'REC_EBITDARMSMOTH', 'Reconciliation', 'EBITDA', 
    337, 'RMS&M - Other Non-Operating Nonrecurring Items', 92, TO_DATE('02/01/2023 16:46:47', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:47', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (191, 'CORP', 'REC_EBITDAXSTFRST', 'Reconciliation', 'EBITDA', 
    219, 'Staff - Restructuring Costs', 93, TO_DATE('02/01/2023 16:46:47', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:47', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (192, 'CORP', 'REC_EBITDAXSTFVAL', 'Reconciliation', 'EBITDA', 
    338, 'Staff - Valuation Gains/(Losses)', 94, TO_DATE('02/01/2023 16:46:47', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:47', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (193, 'CORP', 'REC_EBITDAXSTFOTH', 'Reconciliation', 'EBITDA', 
    298, 'Staff - Other Non-Operating Nonrecurring Items', 95, TO_DATE('02/01/2023 16:46:47', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:47', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (194, 'CORP', 'REC_EBITDAXESUB', 'Reconciliation', 'EBITDA', 
    394, 'Income of Unconsolidated Company', 251, TO_DATE('02/01/2023 16:46:47', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:47', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (195, 'CORP', 'REC_EBITDAXOPRDIS', 'Reconciliation', 'EBITDA', 
    215, 'EBITDA - Gain/(Loss) on Disposals of PP&E', 96, TO_DATE('02/01/2023 16:46:47', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:47', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'Y');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (196, 'CORP', 'REC_EBITDAXOPRFVC', 'Reconciliation', 'EBITDA', 
    257, 'EBITDA - Fair Value Changes of Contingent Consid', 97, TO_DATE('02/01/2023 16:46:47', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:47', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (197, 'CORP', 'REC_EBITDAXOPRFX', 'Reconciliation', 'EBITDA', 
    166, 'EBITDA - Foreign Exchange Gain/(Loss)', 98, TO_DATE('02/01/2023 16:46:47', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:47', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (198, 'CORP', 'REC_EBITDAXOPRRST', 'Reconciliation', 'EBITDA', 
    297, 'EBITDA - Restructuring Costs', 99, TO_DATE('02/01/2023 16:46:47', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:47', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (199, 'CORP', 'REC_EBITDAXOPRDER', 'Reconciliation', 'EBITDA', 
    214, 'EBITDA - Derivatives', 100, TO_DATE('02/01/2023 16:46:47', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:47', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (200, 'CORP', 'REC_EBITDAXOPRST', 'Reconciliation', 'EBITDA', 
    395, 'EBITDA - Streaming Transactions', 101, TO_DATE('02/01/2023 16:46:47', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:47', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (201, 'CORP', 'REC_EBITDAXOPRLIT', 'Reconciliation', 'EBITDA', 
    216, 'EBITDA - Settlement (Litigation/Insurance) Costs', 102, TO_DATE('02/01/2023 16:46:47', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:47', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (202, 'CORP', 'REC_EBITDAXOPRVAL', 'Reconciliation', 'EBITDA', 
    217, 'EBITDA - Valuation Gains/(Losses)', 103, TO_DATE('02/01/2023 16:46:47', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:47', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (203, 'CORP', 'REC_EBITDAXBUSDIV', 'Reconciliation', 'EBITDA', 
    393, 'EBITDA - Business Divestments', 104, TO_DATE('02/01/2023 16:46:47', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:47', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (204, 'CORP', 'REC_EBITDAXINVWO', 'Reconciliation', 'EBITDA', 
    256, 'EBITDA - Inventory', 105, TO_DATE('02/01/2023 16:46:47', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:47', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (205, 'CORP', 'REC_EBITDAXIO', 'Reconciliation', 'EBITDA', 
    213, 'EBITDA - Other Income/(Expense)', 106, TO_DATE('02/01/2023 16:46:47', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:47', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (206, 'CORP', 'REC_EBITDAXOPROA', 'Reconciliation', 'EBITDA', 
    91, 'EBITDA - Other', 107, TO_DATE('02/01/2023 16:46:47', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:47', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (207, 'CORP', 'REC_EBITDAADJTOT', 'Reconciliation', 'EBITDA', 
    387, 'Total Adjustments', 108, TO_DATE('02/01/2023 16:46:47', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:47', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'Y');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (208, 'CORP', 'REC_EBITDAA', 'Reconciliation', 'EBITDA', 
    334, 'EBITDA, Adjusted', 109, TO_DATE('02/01/2023 16:46:47', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:47', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'Y');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (209, 'CORP', 'REC_EBITDAILL', 'Reconciliation', 'EBITDA', 
    163, 'Incremental Lease Expense', 253, TO_DATE('02/01/2023 16:46:47', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:47', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (210, 'CORP', 'REC_OPINCREP', 'Reconciliation', 'EBIT', 
    102, 'Operating Income, Pre-Adjusted', 110, TO_DATE('02/01/2023 16:46:47', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:47', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'Y');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (211, 'CORP', 'REC_OPINCTRECSLD', 'Reconciliation', 'EBIT', 
    182, 'Trade Receivables Securitizations', 111, TO_DATE('02/01/2023 16:46:47', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:47', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (212, 'CORP', 'REC_OPINCOPLEASE', 'Reconciliation', 'EBIT', 
    406, 'Operating Leases', 112, TO_DATE('02/01/2023 16:46:47', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:47', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'Y');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (213, 'CORP', 'REC_OPINCPBODC', 'Reconciliation', 'EBIT', 
    232, 'Postretirement Benefit Oblg/ Deferred Compensation', 113, TO_DATE('02/01/2023 16:46:47', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:47', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'Y');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (214, 'CORP', 'REC_OPINCCAPINT', 'Reconciliation', 'EBIT', 
    358, 'Capitalized Interest', 114, TO_DATE('02/01/2023 16:46:47', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:47', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (215, 'CORP', 'REC_OPINCCAPDEVC', 'Reconciliation', 'EBIT', 
    231, 'Capitalized Development Costs', 115, TO_DATE('02/01/2023 16:46:48', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:48', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (216, 'CORP', 'REC_OPINCINFRENC', 'Reconciliation', 'EBIT', 
    269, 'Infrastructure Renewal Costs', 116, TO_DATE('02/01/2023 16:46:48', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:48', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (217, 'CORP', 'REC_OPINCCAPFIN', 'Reconciliation', 'EBIT', 
    266, 'Captive Finance Operations', 117, TO_DATE('02/01/2023 16:46:48', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:48', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (218, 'CORP', 'REC_OPINCCD', 'Reconciliation', 'EBIT', 
    101, 'Deconsolidation/ Consolidation', 118, TO_DATE('02/01/2023 16:46:48', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:48', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (219, 'CORP', 'REC_OPINCSECCOST', 'Reconciliation', 'EBIT', 
    237, 'Securitized Stranded Costs', 119, TO_DATE('02/01/2023 16:46:48', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:48', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (220, 'CORP', 'REC_OPINCPPA', 'Reconciliation', 'EBIT', 
    233, 'Power Purchase Agreements', 120, TO_DATE('02/01/2023 16:46:48', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:48', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (221, 'CORP', 'REC_OPINCARO', 'Reconciliation', 'EBIT', 
    357, 'Asset Retirement Obligations', 121, TO_DATE('02/01/2023 16:46:48', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:48', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (222, 'CORP', 'REC_OPINCNOPI', 'Reconciliation', 'EBIT', 
    179, 'Non-Operating Income (Expense)', 122, TO_DATE('02/01/2023 16:46:48', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:48', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'Y');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (223, 'CORP', 'REC_OPINCREVIFIN', 'Reconciliation', 'EBIT', 
    318, 'Revenues - Finance/Interest Income', 123, TO_DATE('02/01/2023 16:46:48', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:48', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (224, 'CORP', 'REC_OPINCREVDIS', 'Reconciliation', 'EBIT', 
    235, 'Revenues - Profit On Disposals', 124, TO_DATE('02/01/2023 16:46:48', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:48', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (225, 'CORP', 'REC_OPINCREVDER', 'Reconciliation', 'EBIT', 
    234, 'Revenues - Derivatives', 125, TO_DATE('02/01/2023 16:46:48', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:48', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (226, 'CORP', 'REC_OPINCOPRO1', 'Reconciliation', 'EBIT', 
    407, 'Revenues - Other', 126, TO_DATE('02/01/2023 16:46:48', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:48', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (227, 'CORP', 'REC_OPINCCOGSRST', 'Reconciliation', 'EBIT', 
    404, 'COGS - Restructuring Costs', 127, TO_DATE('02/01/2023 16:46:48', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:48', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (228, 'CORP', 'REC_OPINCCOGSVAL', 'Reconciliation', 'EBIT', 
    268, 'COGS - Valuation Gains/(Losses)', 128, TO_DATE('02/01/2023 16:46:48', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:48', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (229, 'CORP', 'REC_OPINCCOGSOTH', 'Reconciliation', 'EBIT', 
    267, 'COGS - Other Non-Operating Nonrecurring Items', 129, TO_DATE('02/01/2023 16:46:48', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:48', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (230, 'CORP', 'REC_OPINCCOGSLIFO', 'Reconciliation', 'EBIT', 
    317, 'COGS - LIFO Liquidation Gains', 130, TO_DATE('02/01/2023 16:46:48', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:48', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (231, 'CORP', 'REC_OPINCXSGARST', 'Reconciliation', 'EBIT', 
    411, 'SG&A - Restructuring Costs', 131, TO_DATE('02/01/2023 16:46:48', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:48', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (232, 'CORP', 'REC_OPINCXSGAVAL', 'Reconciliation', 'EBIT', 
    186, 'SG&A - Valuation Gains/(Losses)', 132, TO_DATE('02/01/2023 16:46:48', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:48', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (233, 'CORP', 'REC_OPINCXSGAOTH', 'Reconciliation', 'EBIT', 
    273, 'SG&A - Other Non-Operating Nonrecurring Items', 133, TO_DATE('02/01/2023 16:46:48', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:48', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (234, 'CORP', 'REC_OPINCXRDRST', 'Reconciliation', 'EBIT', 
    240, 'R&D - Restructuring Costs', 134, TO_DATE('02/01/2023 16:46:48', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:48', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (235, 'CORP', 'REC_OPINCXRDVAL', 'Reconciliation', 'EBIT', 
    185, 'R&D - Valuation Gains/(Losses)', 135, TO_DATE('02/01/2023 16:46:48', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:48', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (236, 'CORP', 'REC_OPINCXRDOTH', 'Reconciliation', 'EBIT', 
    141, 'R&D - Other Non-Operating Nonrecurring Items', 136, TO_DATE('02/01/2023 16:46:48', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:48', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (237, 'CORP', 'REC_OPINCRMSMRST', 'Reconciliation', 'EBIT', 
    408, 'RMS&M - Restructuring Costs', 137, TO_DATE('02/01/2023 16:46:48', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:48', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (238, 'CORP', 'REC_OPINCRMSMVAL', 'Reconciliation', 'EBIT', 
    236, 'RMS&M - Valuation Gains/(Losses)', 138, TO_DATE('02/01/2023 16:46:48', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:48', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (239, 'CORP', 'REC_OPINCRMSMOTH', 'Reconciliation', 'EBIT', 
    271, 'RMS&M- Other non-operating nonrecurring items', 139, TO_DATE('02/01/2023 16:46:48', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:48', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (240, 'CORP', 'REC_OPINCXSTFRST', 'Reconciliation', 'EBIT', 
    241, 'Staff - Restructuring Costs', 140, TO_DATE('02/01/2023 16:46:48', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:48', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (241, 'CORP', 'REC_OPINCXSTFVAL', 'Reconciliation', 'EBIT', 
    365, 'Staff - Valuation Gains/(Losses)', 141, TO_DATE('02/01/2023 16:46:48', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:48', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (242, 'CORP', 'REC_OPINCXSTFOTH', 'Reconciliation', 'EBIT', 
    142, 'Staff - Other Non-Operating Nonrecurring Items', 142, TO_DATE('02/01/2023 16:46:48', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:48', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (243, 'CORP', 'REC_OPINCXOPRSUB', 'Reconciliation', 'EBIT', 
    410, 'EBITDA - Income (Expense) of Unconsolidated Cos', 143, TO_DATE('02/01/2023 16:46:49', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:49', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (244, 'CORP', 'REC_OPINCXOPRDIS', 'Reconciliation', 'EBIT', 
    103, 'EBITDA - Gain/(Loss) on Disposals of PP&E', 144, TO_DATE('02/01/2023 16:46:49', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:49', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'Y');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (245, 'CORP', 'REC_OPINCXOPRFVC', 'Reconciliation', 'EBIT', 
    363, 'EBITDA - Fair Value Changes of Contingent Consid', 145, TO_DATE('02/01/2023 16:46:49', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:49', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (246, 'CORP', 'REC_OPINCXOPRFX', 'Reconciliation', 'EBIT', 
    238, 'EBITDA - Foreign Exchange Gain/(Loss)', 146, TO_DATE('02/01/2023 16:46:49', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:49', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (247, 'CORP', 'REC_OPINCXOPRRST', 'Reconciliation', 'EBIT', 
    364, 'EBITDA - Restructuring Costs', 147, TO_DATE('02/01/2023 16:46:49', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:49', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (248, 'CORP', 'REC_OPINCXOPRDER', 'Reconciliation', 'EBIT', 
    362, 'EBITDA - Derivatives', 148, TO_DATE('02/01/2023 16:46:49', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:49', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (249, 'CORP', 'REC_OPINCXOPRST', 'Reconciliation', 'EBIT', 
    184, 'EBITDA - Streaming Transactions', 149, TO_DATE('02/01/2023 16:46:49', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:49', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (250, 'CORP', 'REC_OPINCXOPRLIT', 'Reconciliation', 'EBIT', 
    409, 'EBITDA - Settlement (Litigation/Insurance) Costs', 150, TO_DATE('02/01/2023 16:46:49', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:49', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (251, 'CORP', 'REC_OPINCXOPRVAL', 'Reconciliation', 'EBIT', 
    239, 'EBITDA - Valuation Gains/(Losses)', 151, TO_DATE('02/01/2023 16:46:49', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:49', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (252, 'CORP', 'REC_OPINCXBUSDIV', 'Reconciliation', 'EBIT', 
    183, 'EBITDA - Business Divestments', 152, TO_DATE('02/01/2023 16:46:49', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:49', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (253, 'CORP', 'REC_OPINCXINVWO', 'Reconciliation', 'EBIT', 
    319, 'EBITDA - Inventory', 153, TO_DATE('02/01/2023 16:46:49', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:49', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (254, 'CORP', 'REC_OPINCXIO', 'Reconciliation', 'EBIT', 
    272, 'EBITDA - Other Income/(Expense)', 154, TO_DATE('02/01/2023 16:46:49', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:49', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (255, 'CORP', 'REC_OPINCXOPROA', 'Reconciliation', 'EBIT', 
    104, 'EBITDA - Other', 155, TO_DATE('02/01/2023 16:46:49', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:49', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (256, 'CORP', 'REC_OPINCDPVAL', 'Reconciliation', 'EBIT', 
    405, 'D&A - Asset Valuation Gains/(Losses)', 156, TO_DATE('02/01/2023 16:46:49', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:49', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (257, 'CORP', 'REC_OPINCDPIMPR', 'Reconciliation', 'EBIT', 
    359, 'D&A - Impairment Charges/(Reversals)', 157, TO_DATE('02/01/2023 16:46:49', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:49', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (258, 'CORP', 'REC_OPINCDPGAREV', 'Reconciliation', 'EBIT', 
    178, 'D&A - Reverse Goodwill Amortization', 158, TO_DATE('02/01/2023 16:46:49', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:49', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (259, 'CORP', 'REC_OPINCDPXO', 'Reconciliation', 'EBIT', 
    360, 'D&A - Other', 159, TO_DATE('02/01/2023 16:46:49', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:49', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (260, 'CORP', 'REC_OPINCNOPIIDIT', 'Reconciliation', 'EBIT', 
    181, 'EBIT - Finance/ Interest Income', 160, TO_DATE('02/01/2023 16:46:49', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:49', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (261, 'CORP', 'REC_OPINCNOPIOA', 'Reconciliation', 'EBIT', 
    270, 'EBIT - Other', 161, TO_DATE('02/01/2023 16:46:49', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:49', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (262, 'CORP', 'REC_OPINCADJTOT', 'Reconciliation', 'EBIT', 
    403, 'Total Adjustments', 162, TO_DATE('02/01/2023 16:46:49', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:49', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'Y');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (263, 'CORP', 'REC_EBITA', 'Reconciliation', 'EBIT', 
    386, 'EBIT, Adjusted', 163, TO_DATE('02/01/2023 16:46:49', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:49', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'Y');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (264, 'CORP', 'REC_OPINCILL', 'Reconciliation', 'EBIT', 
    361, 'FFO From Incremental Leases', 256, TO_DATE('02/01/2023 16:46:49', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:49', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (265, 'CORP', 'REC_INTEXPREP', 'Reconciliation', 'Interest expense', 
    401, 'Interest Expense, Pre-Adjusted', 164, TO_DATE('02/01/2023 16:46:49', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:49', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'Y');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (266, 'CORP', 'REC_INTEXPOPLEASE', 'Reconciliation', 'Interest expense', 
    315, 'Operating Leases', 165, TO_DATE('02/01/2023 16:46:49', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:49', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'Y');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (267, 'CORP', 'REC_INTEXPHYBDBT', 'Reconciliation', 'Interest expense', 
    228, 'Debt-Like Hybrids', 166, TO_DATE('02/01/2023 16:46:49', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:49', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (268, 'CORP', 'REC_INTEXPHYBEQU', 'Reconciliation', 'Interest expense', 
    400, 'Equity-Like Hybrids', 167, TO_DATE('02/01/2023 16:46:49', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:49', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (269, 'CORP', 'REC_INTEXPHYBDBTI', 'Reconciliation', 'Interest expense', 
    353, 'Intermediate Hybrids Reported As Debt', 168, TO_DATE('02/01/2023 16:46:49', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:49', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (270, 'CORP', 'REC_INTEXPHYBEQUI', 'Reconciliation', 'Interest expense', 
    229, 'Intermediate Hybrids Reported As Equity', 169, TO_DATE('02/01/2023 16:46:49', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:49', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (271, 'CORP', 'REC_INTEXPPBODC', 'Reconciliation', 'Interest expense', 
    354, 'Postretirement Benefit Oblg/ Deferred Compensation', 170, TO_DATE('02/01/2023 16:46:49', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:49', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'Y');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (272, 'CORP', 'REC_INTEXPCAPINT', 'Reconciliation', 'Interest expense', 
    264, 'Capitalized Interest', 171, TO_DATE('02/01/2023 16:46:50', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:50', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'Y');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (273, 'CORP', 'REC_INTEXPCAPFIN', 'Reconciliation', 'Interest expense', 
    227, 'Captive Finance Operations', 172, TO_DATE('02/01/2023 16:46:50', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:50', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (274, 'CORP', 'REC_INTEXPCD', 'Reconciliation', 'Interest expense', 
    352, 'Deconsolidation/ Consolidation', 173, TO_DATE('02/01/2023 16:46:50', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:50', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (275, 'CORP', 'REC_INTEXPSECCOST', 'Reconciliation', 'Interest expense', 
    265, 'Securitized Stranded Costs', 174, TO_DATE('02/01/2023 16:46:50', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:50', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (276, 'CORP', 'REC_INTEXPPPA', 'Reconciliation', 'Interest expense', 
    139, 'Power Purchase Agreements', 175, TO_DATE('02/01/2023 16:46:50', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:50', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (277, 'CORP', 'REC_INTEXPARO', 'Reconciliation', 'Interest expense', 
    177, 'Asset Retirement Obligations', 176, TO_DATE('02/01/2023 16:46:50', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:50', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (278, 'CORP', 'REC_INTEXPXINTDER', 'Reconciliation', 'Interest expense', 
    402, 'Interest Expense - Derivatives', 177, TO_DATE('02/01/2023 16:46:50', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:50', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (279, 'CORP', 'REC_INTEXPXINTSLN', 'Reconciliation', 'Interest expense', 
    355, 'Interest Expense - Shareholder Loan', 178, TO_DATE('02/01/2023 16:46:50', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:50', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (280, 'CORP', 'REC_INTEXPXINTAC', 'Reconciliation', 'Interest expense', 
    140, 'Interest Expense - Amortized Cost', 179, TO_DATE('02/01/2023 16:46:50', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:50', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (281, 'CORP', 'REC_INTEXPXINTST', 'Reconciliation', 'Interest expense', 
    356, 'Interest - Streaming Transactions', 180, TO_DATE('02/01/2023 16:46:50', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:50', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (108, 'CORP', 'REC_DEBTSURCASH', 'Reconciliation', 'Debt', 
    329, 'Accessible Cash & Liquid Investments', 13, TO_DATE('02/01/2023 16:46:43', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:43', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'Y');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (109, 'CORP', 'REC_DEBTCAPFIN', 'Reconciliation', 'Debt', 
    377, 'Captive Finance Operations', 14, TO_DATE('02/01/2023 16:46:43', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:43', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (110, 'CORP', 'REC_DEBTCD', 'Reconciliation', 'Debt', 
    119, 'Deconsolidation/ Consolidation', 15, TO_DATE('02/01/2023 16:46:43', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:43', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (111, 'CORP', 'REC_DEBTSECCOST', 'Reconciliation', 'Debt', 
    383, 'Securitized Stranded Costs', 16, TO_DATE('02/01/2023 16:46:43', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:43', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (112, 'CORP', 'REC_DEBTPPA', 'Reconciliation', 'Debt', 
    205, 'Power Purchase Agreements', 17, TO_DATE('02/01/2023 16:46:43', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:43', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (113, 'CORP', 'REC_DEBTARO', 'Reconciliation', 'Debt', 
    118, 'Asset Retirement Obligations', 18, TO_DATE('02/01/2023 16:46:44', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:44', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (114, 'CORP', 'REC_DEBTTDOFFB', 'Reconciliation', 'Debt', 
    291, 'Debt - Guarantees', 19, TO_DATE('02/01/2023 16:46:44', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:44', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (115, 'CORP', 'REC_DEBTDG', 'Reconciliation', 'Debt', 
    251, 'Debt - Litigation', 20, TO_DATE('02/01/2023 16:46:44', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:44', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (116, 'CORP', 'REC_DEBTDWCOMP', 'Reconciliation', 'Debt', 
    382, 'Debt - Workers Compensation/Self Insurance', 21, TO_DATE('02/01/2023 16:46:44', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:44', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (117, 'CORP', 'REC_DEBTDVPP', 'Reconciliation', 'Debt', 
    252, 'Debt - Volumetric Production Payments', 22, TO_DATE('02/01/2023 16:46:44', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:44', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (118, 'CORP', 'REC_DEBTDDER', 'Reconciliation', 'Debt', 
    202, 'Debt - Derivatives', 23, TO_DATE('02/01/2023 16:46:44', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:44', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (119, 'CORP', 'REC_DEBTDFXH', 'Reconciliation', 'Debt', 
    155, 'Debt - Foreign Currency Hedges', 24, TO_DATE('02/01/2023 16:46:44', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:44', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (120, 'CORP', 'REC_DEBTDCC', 'Reconciliation', 'Debt', 
    201, 'Debt - Contingent Considerations', 25, TO_DATE('02/01/2023 16:46:44', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:44', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (121, 'CORP', 'REC_DEBTDFV', 'Reconciliation', 'Debt', 
    288, 'Debt - Fair Value Adjustments', 26, TO_DATE('02/01/2023 16:46:44', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:44', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (122, 'CORP', 'REC_DEBTDFL', 'Reconciliation', 'Debt', 
    250, 'Debt - Finance Leases', 27, TO_DATE('02/01/2023 16:46:44', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:44', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (123, 'CORP', 'REC_DEBTDMIPUT', 'Reconciliation', 'Debt', 
    289, 'Debt - Put Options On Minority Stakes', 28, TO_DATE('02/01/2023 16:46:44', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:44', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (124, 'CORP', 'REC_DEBTDTP', 'Reconciliation', 'Debt', 
    204, 'Debt - Debt Serviced By Third Parties', 29, TO_DATE('02/01/2023 16:46:44', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:44', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (125, 'CORP', 'REC_DEBTDST', 'Reconciliation', 'Debt', 
    203, 'Debt - Streaming Transactions', 30, TO_DATE('02/01/2023 16:46:44', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:44', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (126, 'CORP', 'REC_DEBTDSL', 'Reconciliation', 'Debt', 
    120, 'Debt - Shareholder Loans', 31, TO_DATE('02/01/2023 16:46:44', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:44', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (127, 'CORP', 'REC_DEBTDTX', 'Reconciliation', 'Debt', 
    380, 'Debt - Tax Liabilities', 32, TO_DATE('02/01/2023 16:46:44', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:44', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (128, 'CORP', 'REC_DEBTDSFRC', 'Reconciliation', 'Debt', 
    85, 'Debt - Seller Financing Repayable In Cash', 33, TO_DATE('02/01/2023 16:46:44', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:44', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (129, 'CORP', 'REC_DEBTDAC', 'Reconciliation', 'Debt', 
    249, 'Debt - Amortized Cost', 34, TO_DATE('02/01/2023 16:46:44', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:44', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (130, 'CORP', 'REC_DEBTDGR', 'Reconciliation', 'Debt', 
    379, 'Debt - Government Cost Recovery (Defense Sector)', 35, TO_DATE('02/01/2023 16:46:44', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:44', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (131, 'CORP', 'REC_DEBTTDOA', 'Reconciliation', 'Debt', 
    330, 'Debt - Other', 36, TO_DATE('02/01/2023 16:46:44', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:44', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (132, 'CORP', 'REC_DEBTADJTOT', 'Reconciliation', 'Debt', 
    200, 'Total Adjustments', 37, TO_DATE('02/01/2023 16:46:44', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:44', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'Y');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (133, 'CORP', 'REC_TDA', 'Reconciliation', 'Debt', 
    144, 'Debt, Adjusted', 38, TO_DATE('02/01/2023 16:46:44', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:44', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'Y');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (134, 'CORP', 'REC_DEBTLLOFT', 'Reconciliation', 'Debt', 
    159, 'Reported Lease Liabilities', 259, TO_DATE('02/01/2023 16:46:44', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:44', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (135, 'CORP', 'REC_DEBTMULTPP', 'Reconciliation', 'Debt', 
    121, 'Multi Employer Pension Plan Debt', 258, TO_DATE('02/01/2023 16:46:44', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:44', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (136, 'CORP', 'REC_DEBTILL', 'Reconciliation', 'Debt', 
    157, 'Incremental Lease Operating Inc', 255, TO_DATE('02/01/2023 16:46:44', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:44', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (137, 'CORP', 'REC_SEQREP', 'Reconciliation', 'Equity', 
    320, 'Shareholders'' Equity, Pre-Adjusted', 39, TO_DATE('02/01/2023 16:46:44', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:44', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'Y');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (138, 'CORP', 'REC_SEQHYBDBT', 'Reconciliation', 'Equity', 
    191, 'Debt-Like Hybrids', 40, TO_DATE('02/01/2023 16:46:44', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:44', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (139, 'CORP', 'REC_SEQHYBEQU', 'Reconciliation', 'Equity', 
    192, 'Equity-Like Hybrids', 41, TO_DATE('02/01/2023 16:46:44', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:44', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (140, 'CORP', 'REC_SEQHYBDBTI', 'Reconciliation', 'Equity', 
    110, 'Intermediate Hybrids Reported As Debt', 42, TO_DATE('02/01/2023 16:46:44', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:44', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (141, 'CORP', 'REC_SEQHYBEQUI', 'Reconciliation', 'Equity', 
    276, 'Intermediate Hybrids Reported As Equity', 43, TO_DATE('02/01/2023 16:46:45', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:45', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (142, 'CORP', 'REC_SEQCAPFIN', 'Reconciliation', 'Equity', 
    143, 'Captive Finance Operations', 44, TO_DATE('02/01/2023 16:46:45', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:45', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (143, 'CORP', 'REC_SEQCD', 'Reconciliation', 'Equity', 
    109, 'Deconsolidation/ Consolidation', 45, TO_DATE('02/01/2023 16:46:45', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:45', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (144, 'CORP', 'REC_SEQMIB', 'Reconciliation', 'Equity', 
    111, 'Non-Controlling Interest/Minority Interest', 46, TO_DATE('02/01/2023 16:46:45', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:45', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (145, 'CORP', 'REC_SEQSEQG', 'Reconciliation', 'Equity', 
    193, 'Equity - Government Grants', 47, TO_DATE('02/01/2023 16:46:45', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:45', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (146, 'CORP', 'REC_SEQSEQFV', 'Reconciliation', 'Equity', 
    412, 'Equity - Fair Value Adjustments', 48, TO_DATE('02/01/2023 16:46:45', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:45', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (147, 'CORP', 'REC_SEQCEQA', 'Reconciliation', 'Equity', 
    190, 'Equity - Other', 49, TO_DATE('02/01/2023 16:46:45', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:45', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (148, 'CORP', 'REC_SEQADJTOT', 'Reconciliation', 'Equity', 
    189, 'Total Adjustments', 50, TO_DATE('02/01/2023 16:46:45', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:45', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'Y');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (149, 'CORP', 'REC_EQUITYA', 'Reconciliation', 'Equity', 
    167, 'Equity, Adjusted', 51, TO_DATE('02/01/2023 16:46:45', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:45', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'Y');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (150, 'CORP', 'REC_REVREP', 'Reconciliation', 'Revenues', 
    242, 'Revenues, Pre-Adjusted', 52, TO_DATE('02/01/2023 16:46:45', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:45', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'Y');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (151, 'CORP', 'REC_REVCAPFIN', 'Reconciliation', 'Revenues', 
    105, 'Captive Finance Operations', 53, TO_DATE('02/01/2023 16:46:45', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:45', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (152, 'CORP', 'REC_REVCD', 'Reconciliation', 'Revenues', 
    366, 'Deconsolidation/ Consolidation', 54, TO_DATE('02/01/2023 16:46:45', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:45', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (153, 'CORP', 'REC_REVSECCOST', 'Reconciliation', 'Revenues', 
    107, 'Securitized Stranded Costs', 55, TO_DATE('02/01/2023 16:46:45', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:45', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (154, 'CORP', 'REC_REVREVIFIN', 'Reconciliation', 'Revenues', 
    106, 'Revenues - Finance/ Interest Income', 56, TO_DATE('02/01/2023 16:46:45', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:45', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (155, 'CORP', 'REC_REVREVDIS', 'Reconciliation', 'Revenues', 
    188, 'Revenues - Profit on Disposals', 57, TO_DATE('02/01/2023 16:46:45', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:45', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (156, 'CORP', 'REC_REVREVDER', 'Reconciliation', 'Revenues', 
    275, 'Revenues - Derivatives', 58, TO_DATE('02/01/2023 16:46:45', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:45', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (157, 'CORP', 'REC_REVOPRO1', 'Reconciliation', 'Revenues', 
    274, 'Revenues - Other', 59, TO_DATE('02/01/2023 16:46:45', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:45', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (158, 'CORP', 'REC_REVADJTOT', 'Reconciliation', 'Revenues', 
    187, 'Total Adjustments', 60, TO_DATE('02/01/2023 16:46:45', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:45', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'Y');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (159, 'CORP', 'REC_REVTA', 'Reconciliation', 'Revenues', 
    108, 'Revenues, Adjusted', 61, TO_DATE('02/01/2023 16:46:45', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:45', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'Y');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (160, 'CORP', 'REC_EBITDAREP', 'Reconciliation', 'EBITDA', 
    209, 'EBITDA, Pre-Adjusted', 62, TO_DATE('02/01/2023 16:46:45', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:45', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'Y');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (161, 'CORP', 'REC_EBITDAOPLEASE', 'Reconciliation', 'EBITDA', 
    293, 'Operating Leases', 63, TO_DATE('02/01/2023 16:46:45', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:45', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'Y');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (162, 'CORP', 'REC_EBITDAPBODC', 'Reconciliation', 'EBITDA', 
    124, 'Postretirement Benefit Oblg/ Deferred Compensation', 64, TO_DATE('02/01/2023 16:46:45', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:45', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'Y');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (163, 'CORP', 'REC_EBITDACAPINT', 'Reconciliation', 'EBITDA', 
    388, 'Capitalized Interest', 65, TO_DATE('02/01/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (164, 'CORP', 'REC_EBITDACAPDEVC', 'Reconciliation', 'EBITDA', 
    254, 'Capitalized Development Costs', 66, TO_DATE('02/01/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (165, 'CORP', 'REC_EBITDAINFRENC', 'Reconciliation', 'EBITDA', 
    255, 'Infrastructure Renewal Costs', 67, TO_DATE('02/01/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (331, 'CORP', 'REC_CFOFFODO', 'Reconciliation', 'Cash flow from operations', 
    197, 'OCF - Discontinued Operations', 224, TO_DATE('02/01/2023 16:46:52', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:52', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (332, 'CORP', 'REC_CFOFFOREGALL', 'Reconciliation', 'Cash flow from operations', 
    83, 'OCF - Regulatory Allowance', 225, TO_DATE('02/01/2023 16:46:52', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:52', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (333, 'CORP', 'REC_CFOFFODER', 'Reconciliation', 'Cash flow from operations', 
    284, 'OCF - Derivatives', 226, TO_DATE('02/01/2023 16:46:52', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:52', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (334, 'CORP', 'REC_CFOFFOOTHA', 'Reconciliation', 'Cash flow from operations', 
    82, 'OCF - Other', 227, TO_DATE('02/01/2023 16:46:52', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:52', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (335, 'CORP', 'REC_CFOADJTOT', 'Reconciliation', 'Cash flow from operations', 
    369, 'Total Adjustments', 228, TO_DATE('02/01/2023 16:46:52', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:52', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'Y');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (336, 'CORP', 'REC_CFOA', 'Reconciliation', 'Cash flow from operations', 
    150, 'Cash Flow From Operations, Adjusted', 229, TO_DATE('02/01/2023 16:46:52', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:52', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'Y');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (337, 'CORP', 'REC_CFOILL', 'Reconciliation', 'Cash flow from operations', 
    154, 'CFO from Incremental Leases', 252, TO_DATE('02/01/2023 16:46:52', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:52', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (338, 'CORP', 'REC_DIVREP', 'Reconciliation', 'Dividends', 
    333, 'Dividends, Pre-Adjusted', 230, TO_DATE('02/01/2023 16:46:52', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:52', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'Y');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (339, 'CORP', 'REC_DIVHYBDBT', 'Reconciliation', 'Dividends', 
    292, 'Debt-Like Hybrids', 231, TO_DATE('02/01/2023 16:46:52', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:52', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (340, 'CORP', 'REC_DIVHYBEQU', 'Reconciliation', 'Dividends', 
    206, 'Equity-Like Hybrids', 232, TO_DATE('02/01/2023 16:46:52', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:52', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (341, 'CORP', 'REC_DIVHYBDBTI', 'Reconciliation', 'Dividends', 
    332, 'Intermediate Hybrids Reported As Debt', 233, TO_DATE('02/01/2023 16:46:52', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:52', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (342, 'CORP', 'REC_DIVHYBEQUI', 'Reconciliation', 'Dividends', 
    207, 'Intermediate Hybrids Reported As Equity', 234, TO_DATE('02/01/2023 16:46:52', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:52', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (343, 'CORP', 'REC_DIVCD', 'Reconciliation', 'Dividends', 
    331, 'Deconsolidation/ Consolidation', 235, TO_DATE('02/01/2023 16:46:52', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:52', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (344, 'CORP', 'REC_DIVDVAAH', 'Reconciliation', 'Dividends', 
    88, 'Dividends - Other', 236, TO_DATE('02/01/2023 16:46:52', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:52', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (345, 'CORP', 'REC_DIVADJTOT', 'Reconciliation', 'Dividends', 
    384, 'Total Adjustments', 237, TO_DATE('02/01/2023 16:46:52', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:52', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'Y');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (346, 'CORP', 'REC_DVA', 'Reconciliation', 'Dividends', 
    385, 'Dividends, Adjusted', 238, TO_DATE('02/01/2023 16:46:52', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:52', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'Y');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (347, 'CORP', 'REC_CAPEXREP', 'Reconciliation', 'Capital Expenditures', 
    283, 'Capital Expenditures, Pre-Adjusted', 239, TO_DATE('02/01/2023 16:46:52', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:52', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'Y');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (348, 'CORP', 'REC_CAPEXCAPINT', 'Reconciliation', 'Capital Expenditures', 
    323, 'Capitalized Interest', 240, TO_DATE('02/01/2023 16:46:52', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:52', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'Y');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (349, 'CORP', 'REC_CAPEXCAPDEVC', 'Reconciliation', 'Capital Expenditures', 
    281, 'Capitalized Development Costs', 241, TO_DATE('02/01/2023 16:46:52', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:52', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (350, 'CORP', 'REC_CAPEXINFRENC', 'Reconciliation', 'Capital Expenditures', 
    245, 'Infrastructure Renewal Costs', 242, TO_DATE('02/01/2023 16:46:52', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:52', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (351, 'CORP', 'REC_CAPEXCAPFIN', 'Reconciliation', 'Capital Expenditures', 
    368, 'Captive Finance Operations', 243, TO_DATE('02/01/2023 16:46:52', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:52', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (352, 'CORP', 'REC_CAPEXCD', 'Reconciliation', 'Capital Expenditures', 
    325, 'Deconsolidation/ Consolidation', 244, TO_DATE('02/01/2023 16:46:52', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:52', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (353, 'CORP', 'REC_CAPEXPPA', 'Reconciliation', 'Capital Expenditures', 
    114, 'Power Purchase Agreements', 245, TO_DATE('02/01/2023 16:46:52', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:52', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (354, 'CORP', 'REC_CAPEXCAPXCC', 'Reconciliation', 'Capital Expenditures', 
    77, 'Capital Expenditures - Customer Contributions', 246, TO_DATE('02/01/2023 16:46:52', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:52', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (355, 'CORP', 'REC_CAPEXCAPXRSE', 'Reconciliation', 'Capital Expenditures', 
    282, 'Capital Expenditures - Routine Sales of Equipment', 247, TO_DATE('02/01/2023 16:46:52', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:52', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (356, 'CORP', 'REC_CAPEXCAPXAH', 'Reconciliation', 'Capital Expenditures', 
    324, 'Capital Expenditures - Other', 248, TO_DATE('02/01/2023 16:46:52', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:52', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (357, 'CORP', 'REC_CAPEXADJTOT', 'Reconciliation', 'Capital Expenditures', 
    149, 'Total Adjustments', 249, TO_DATE('02/01/2023 16:46:53', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:53', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'Y');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, HIDDEN_MNEM_FLAG)
 Values
   (358, 'CORP', 'REC_CAPXA', 'Reconciliation', 'Capital Expenditures', 
    78, 'Capital Expenditures, Adjusted', 250, TO_DATE('02/01/2023 16:46:53', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 
    TO_DATE('02/01/2023 16:46:53', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', 'Y');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, ROW_SEPERATOR_FLAG, COL_DETAIL_MODE, HIDDEN_MNEM_FLAG)
 Values
   (448, 'CORP', 'ROCREP', 'Corporate.pre-adjusted', 'Profitability Metrics', 
    323, 'Return on Capital, Pre-Adjusted', 22, TO_DATE('07/17/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('07/17/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 'N', 2, 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, ROW_SEPERATOR_FLAG, COL_DETAIL_MODE, HIDDEN_MNEM_FLAG)
 Values
   (449, 'CORP', 'EBITSALEREP', 'Corporate.pre-adjusted', 'Profitability Metrics', 
    27, 'EBIT Margin, Pre-Adjusted', 23, TO_DATE('07/17/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('07/17/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 'Y', 2, 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, ROW_SEPERATOR_FLAG, COL_DETAIL_MODE, HIDDEN_MNEM_FLAG)
 Values
   (450, 'CORP', 'REDFCCOVREP', 'Corporate.pre-adjusted', 'Real-Estate Ratios', 
    309, 'Debt Fixed Charge Coverage, Pre-Adjusted', 24, TO_DATE('07/17/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('07/17/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 'N', 2, 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, ROW_SEPERATOR_FLAG, COL_DETAIL_MODE, HIDDEN_MNEM_FLAG)
 Values
   (451, 'CORP', 'TDTUCREP', 'Corporate.pre-adjusted', 'Real-Estate Ratios', 
    334, 'Debt/Debt+Equity (undepreciated basis), Pre-Adjusted', 25, TO_DATE('07/17/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('07/17/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 'N', 2, 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, ROW_SEPERATOR_FLAG, COL_DETAIL_MODE, HIDDEN_MNEM_FLAG)
 Values
   (452, 'CORP', 'RETDCAPREP', 'Corporate.pre-adjusted', 'Real-Estate Ratios', 
    313, 'Debt/Debt+Equity (fair value basis), Pre-Adjusted', 26, TO_DATE('07/17/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('07/17/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 'Y', 2, 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, ROW_SEPERATOR_FLAG, COL_DETAIL_MODE, HIDDEN_MNEM_FLAG)
 Values
   (453, 'CORP', 'TDTCREP', 'Corporate.pre-adjusted', 'Other Sector Specific Ratios', 
    332, 'Debt/ Debt and Equity, Pre-Adjusted', 27, TO_DATE('07/17/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('07/17/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 'N', 2, 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, ROW_SEPERATOR_FLAG, COL_DETAIL_MODE, HIDDEN_MNEM_FLAG)
 Values
   (454, 'CORP', 'TDRAVREP', 'Corporate.pre-adjusted', 'Other Sector Specific Ratios', 
    329, 'Debt/ Regulatory Asset Value, Pre-Adjusted', 28, TO_DATE('07/17/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('07/17/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 'N', 1, 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, ROW_SEPERATOR_FLAG, COL_DETAIL_MODE, HIDDEN_MNEM_FLAG)
 Values
   (455, 'CORP', 'ROCEDVP', 'Corporate.pre-adjusted', 'Other Sector Specific Ratios', 
    319, 'Return on Common Equity, Pre-Adjusted', 29, TO_DATE('07/17/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('07/17/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 'N', 2, 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, ROW_SEPERATOR_FLAG, COL_DETAIL_MODE, HIDDEN_MNEM_FLAG)
 Values
   (456, 'CORP', 'RELTVREP', 'Corporate.pre-adjusted', 'Other Sector Specific Ratios', 
    311, 'LTV, Pre-Adjusted', 30, TO_DATE('07/17/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('07/17/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 'N', 1, 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, ROW_SEPERATOR_FLAG, COL_DETAIL_MODE, HIDDEN_MNEM_FLAG)
 Values
   (457, 'CORP', 'EBITCOVREP', 'Corporate.pre-adjusted', 'Other Sector Specific Ratios', 
    20, 'EBIT Interest Coverage, Pre-Adjusted', 31, TO_DATE('07/17/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('07/17/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 'Y', 2, 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, ROW_SEPERATOR_FLAG, COL_DETAIL_MODE, HIDDEN_MNEM_FLAG)
 Values
   (376, 'BANK', 'Loans_Gross_F', 'Financial.all', 'Key Figures', 
    11152, 'Customer Loans (Gross)', 2, TO_DATE('07/17/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('07/17/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 'N', 2, 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, ROW_SEPERATOR_FLAG, COL_DETAIL_MODE, HIDDEN_MNEM_FLAG)
 Values
   (377, 'BANK', 'Comm_Eq_Adj_F', 'Financial.all', 'Key Figures', 
    11201, 'Adjusted Common Equity', 3, TO_DATE('07/17/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('07/17/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 'N', 2, 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, ROW_SEPERATOR_FLAG, COL_DETAIL_MODE, HIDDEN_MNEM_FLAG)
 Values
   (378, 'BANK', 'Rev_F', 'Financial.all', 'Key Figures', 
    11194, 'Operating Revenues', 4, TO_DATE('07/17/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('07/17/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 'N', 2, 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, ROW_SEPERATOR_FLAG, COL_DETAIL_MODE, HIDDEN_MNEM_FLAG)
 Values
   (379, 'BANK', 'Non_Int_Exp_F', 'Financial.all', 'Key Figures', 
    11195, 'Noninterest Expense', 5, TO_DATE('07/17/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('07/17/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 'N', 2, 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, ROW_SEPERATOR_FLAG, COL_DETAIL_MODE, HIDDEN_MNEM_FLAG)
 Values
   (380, 'BANK', 'Net_Inc_Af_Extr_F', 'Financial.all', 'Key Figures', 
    11200, 'Net Income', 6, TO_DATE('07/17/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('07/17/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 'Y', 2, 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, ROW_SEPERATOR_FLAG, COL_DETAIL_MODE, HIDDEN_MNEM_FLAG)
 Values
   (381, 'BANK', 'Cap_Tier1_Rto_F', 'Financial.all', 'Capitalization & Profitability', 
    11199, 'Tier 1 Capital Ratio', 7, TO_DATE('07/17/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('07/17/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 'N', 2, 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, ROW_SEPERATOR_FLAG, COL_DETAIL_MODE, HIDDEN_MNEM_FLAG)
 Values
   (382, 'BANK', 'RAC_BfDivrs_F', 'Financial.all', 'Capitalization & Profitability', 
    11185, 'S&P RAC Ratio Before Diversification', 8, TO_DATE('07/17/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('07/17/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 'N', 2, 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, ROW_SEPERATOR_FLAG, COL_DETAIL_MODE, HIDDEN_MNEM_FLAG)
 Values
   (383, 'BANK', 'ACE_TAC_F', 'Financial.all', 'Capitalization & Profitability', 
    11162, 'Adjusted Common Equity/ Total Adjusted Capital', 9, TO_DATE('07/17/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('07/17/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 'N', 2, 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, ROW_SEPERATOR_FLAG, COL_DETAIL_MODE, HIDDEN_MNEM_FLAG)
 Values
   (384, 'BANK', 'Return_Equity_Rto_F', 'Financial.all', 'Capitalization & Profitability', 
    11154, 'Return On Average Common Equity', 10, TO_DATE('07/17/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('07/17/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 'N', 2, 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, ROW_SEPERATOR_FLAG, COL_DETAIL_MODE, HIDDEN_MNEM_FLAG)
 Values
   (385, 'BANK', 'Int_IncNet_Rev_F', 'Financial.all', 'Capitalization & Profitability', 
    11189, 'Net Interest Income/ Operating Revenue', 11, TO_DATE('07/17/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('07/17/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 'N', 2, 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, ROW_SEPERATOR_FLAG, COL_DETAIL_MODE, HIDDEN_MNEM_FLAG)
 Values
   (386, 'BANK', 'Fee_Inc_Rev_F', 'Financial.all', 'Capitalization & Profitability', 
    11188, 'Fee Income/ Operating Revenue', 12, TO_DATE('07/17/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('07/17/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 'Y', 2, 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, ROW_SEPERATOR_FLAG, COL_DETAIL_MODE, HIDDEN_MNEM_FLAG)
 Values
   (387, 'BANK', 'LnLos_Res_NonPer_Ass_F', 'Financial.all', 'Asset Quality', 
    11192, 'Loan Loss Reserves/ Gross Nonperforming Assets', 13, TO_DATE('07/17/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('07/17/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 'N', 2, 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, ROW_SEPERATOR_FLAG, COL_DETAIL_MODE, HIDDEN_MNEM_FLAG)
 Values
   (388, 'BANK', 'NwLnLos_Prov_CustLnAvg_F', 'Financial.all', 'Asset Quality', 
    11191, 'New Loan Loss Provisions/ Average Customer Loans', 14, TO_DATE('07/17/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('07/17/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 'N', 2, 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, ROW_SEPERATOR_FLAG, COL_DETAIL_MODE, HIDDEN_MNEM_FLAG)
 Values
   (389, 'BANK', 'Chrgoff_Net_CustLnAvg_F', 'Financial.all', 'Asset Quality', 
    11190, 'Net Charge-Offs/ Average Customer Loans', 15, TO_DATE('07/17/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('07/17/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 'N', 2, 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, ROW_SEPERATOR_FLAG, COL_DETAIL_MODE, HIDDEN_MNEM_FLAG)
 Values
   (390, 'BANK', 'NPA_CustLn_GR_F', 'Financial.all', 'Asset Quality', 
    11193, 'Gross NPAs/ Cust Loans + OREO', 16, TO_DATE('07/17/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('07/17/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 'Y', 2, 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, ROW_SEPERATOR_FLAG, COL_DETAIL_MODE, HIDDEN_MNEM_FLAG)
 Values
   (391, 'BANK', 'Loan_To_Dep_F', 'Financial.all', 'Funding & Liquidity', 
    11181, 'Customer Loans (Net)/ Customer Deposits', 17, TO_DATE('07/17/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('07/17/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 'N', 2, 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, ROW_SEPERATOR_FLAG, COL_DETAIL_MODE, HIDDEN_MNEM_FLAG)
 Values
   (392, 'BANK', 'BrdLiqAss_ST_WhSalFund_F', 'Financial.all', 'Funding & Liquidity', 
    11159, 'Liquidity Coverage Metric', 18, TO_DATE('07/17/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('07/17/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 'N', 2, 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, ROW_SEPERATOR_FLAG, COL_DETAIL_MODE, HIDDEN_MNEM_FLAG)
 Values
   (393, 'BANK', 'Stbl_Fund_Rtio_F', 'Financial.all', 'Funding & Liquidity', 
    11153, 'Stable Funding Ratio', 19, TO_DATE('07/17/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('07/17/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 'N', 2, 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, ROW_SEPERATOR_FLAG, COL_DETAIL_MODE, HIDDEN_MNEM_FLAG)
 Values
   (394, 'BANK', 'Gross_Stbl_Fund_Rtio_F', 'Financial.all', 'Funding & Liquidity', 
    11521, 'Gross Stable Funding Ratio', 20, TO_DATE('07/17/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('07/17/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 'Y', 1, 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, FIN_DATA_ELEMENT_ID, 
    DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, UPDATE_DTTM, 
    UPDATE_USER, ROW_SEPERATOR_FLAG, COL_DETAIL_MODE, HIDDEN_MNEM_FLAG)
 Values
   (395, 'CORP', 'REVTA', 'Corporate.adjusted', 316, 
    'Revenue, Adjusted', 1, TO_DATE('07/17/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', TO_DATE('07/17/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 
    'R360_APPDATA', 'N', 2, 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, FIN_DATA_ELEMENT_ID, 
    DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, UPDATE_DTTM, 
    UPDATE_USER, ROW_SEPERATOR_FLAG, COL_DETAIL_MODE, HIDDEN_MNEM_FLAG)
 Values
   (396, 'CORP', 'EBITDAA', 'Corporate.adjusted', 21, 
    'EBITDA, Adjusted', 2, TO_DATE('07/17/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', TO_DATE('07/17/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 
    'R360_APPDATA', 'N', 2, 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, FIN_DATA_ELEMENT_ID, 
    DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, UPDATE_DTTM, 
    UPDATE_USER, ROW_SEPERATOR_FLAG, COL_DETAIL_MODE, HIDDEN_MNEM_FLAG)
 Values
   (397, 'CORP', 'OPINCDA', 'Corporate.adjusted', 54, 
    'Operating Income (After D&A), Adjusted', 3, TO_DATE('07/17/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', TO_DATE('07/17/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 
    'R360_APPDATA', 'N', 2, 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, FIN_DATA_ELEMENT_ID, 
    DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, UPDATE_DTTM, 
    UPDATE_USER, ROW_SEPERATOR_FLAG, COL_DETAIL_MODE, HIDDEN_MNEM_FLAG)
 Values
   (398, 'CORP', 'EBITA', 'Corporate.adjusted', 18, 
    'EBIT, Adjusted', 4, TO_DATE('07/17/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', TO_DATE('07/17/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 
    'R360_APPDATA', 'Y', 2, 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, FIN_DATA_ELEMENT_ID, 
    DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, UPDATE_DTTM, 
    UPDATE_USER, ROW_SEPERATOR_FLAG, COL_DETAIL_MODE, HIDDEN_MNEM_FLAG)
 Values
   (399, 'CORP', 'FFOA', 'Corporate.adjusted', 30, 
    'FFO, Adjusted', 5, TO_DATE('07/17/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', TO_DATE('07/17/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 
    'R360_APPDATA', 'N', 2, 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, FIN_DATA_ELEMENT_ID, 
    DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, UPDATE_DTTM, 
    UPDATE_USER, ROW_SEPERATOR_FLAG, COL_DETAIL_MODE, HIDDEN_MNEM_FLAG)
 Values
   (400, 'CORP', 'OCFA', 'Corporate.adjusted', 48, 
    'Operating Cash Flow, Adjusted', 6, TO_DATE('07/17/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', TO_DATE('07/17/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 
    'R360_APPDATA', 'N', 2, 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, FIN_DATA_ELEMENT_ID, 
    DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, UPDATE_DTTM, 
    UPDATE_USER, ROW_SEPERATOR_FLAG, COL_DETAIL_MODE, HIDDEN_MNEM_FLAG)
 Values
   (401, 'CORP', 'CAPXA', 'Corporate.adjusted', 2, 
    'Capital Expenditures, Adjusted', 7, TO_DATE('07/17/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', TO_DATE('07/17/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 
    'R360_APPDATA', 'N', 2, 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, FIN_DATA_ELEMENT_ID, 
    DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, UPDATE_DTTM, 
    UPDATE_USER, ROW_SEPERATOR_FLAG, COL_DETAIL_MODE, HIDDEN_MNEM_FLAG)
 Values
   (402, 'CORP', 'FOCFA', 'Corporate.adjusted', 36, 
    'Free Operating Cash Flow, Adjusted', 8, TO_DATE('07/17/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', TO_DATE('07/17/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 
    'R360_APPDATA', 'N', 2, 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, FIN_DATA_ELEMENT_ID, 
    DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, UPDATE_DTTM, 
    UPDATE_USER, ROW_SEPERATOR_FLAG, COL_DETAIL_MODE, HIDDEN_MNEM_FLAG)
 Values
   (404, 'CORP', 'SHRREPUR', 'Corporate.adjusted', 324, 
    'Share Repurchases', 10, TO_DATE('07/17/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', TO_DATE('07/17/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 
    'R360_APPDATA', 'N', 2, 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_DISPLAY_NAME, 
    SORT_ORDER, CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER, 
    ROW_SEPERATOR_FLAG, COL_DETAIL_MODE, HIDDEN_MNEM_FLAG)
 Values
   (405, 'CORP', 'DCFA', 'Corporate.adjusted', 'Discretionary Cash Flow, Adjusted', 
    11, TO_DATE('07/17/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', TO_DATE('07/17/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    'Y', 2, 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, FIN_DATA_ELEMENT_ID, 
    DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, UPDATE_DTTM, 
    UPDATE_USER, ROW_SEPERATOR_FLAG, COL_DETAIL_MODE, HIDDEN_MNEM_FLAG)
 Values
   (406, 'CORP', 'CHA', 'Corporate.adjusted', 7, 
    'Cash & Short-Term Investments, Adjusted', 12, TO_DATE('07/17/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', TO_DATE('07/17/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 
    'R360_APPDATA', 'N', 2, 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, FIN_DATA_ELEMENT_ID, 
    DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, UPDATE_DTTM, 
    UPDATE_USER, ROW_SEPERATOR_FLAG, COL_DETAIL_MODE, HIDDEN_MNEM_FLAG)
 Values
   (407, 'CORP', 'TDA', 'Corporate.adjusted', 326, 
    'Debt, Adjusted', 13, TO_DATE('07/17/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', TO_DATE('07/17/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 
    'R360_APPDATA', 'N', 2, 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, FIN_DATA_ELEMENT_ID, 
    DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, UPDATE_DTTM, 
    UPDATE_USER, ROW_SEPERATOR_FLAG, COL_DETAIL_MODE, HIDDEN_MNEM_FLAG)
 Values
   (408, 'CORP', 'EQUITYA', 'Corporate.adjusted', 28, 
    'Equity, Adjusted', 14, TO_DATE('07/17/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', TO_DATE('07/17/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 
    'R360_APPDATA', 'N', 2, 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, ROW_SEPERATOR_FLAG, COL_DETAIL_MODE, HIDDEN_MNEM_FLAG)
 Values
   (418, 'CORP', 'ROC', 'Corporate.adjusted', 'Profitability Metrics', 
    318, 'Return on Capital, Adjusted', 24, TO_DATE('07/17/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('07/17/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 'N', 2, 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, ROW_SEPERATOR_FLAG, COL_DETAIL_MODE, HIDDEN_MNEM_FLAG)
 Values
   (419, 'CORP', 'EBITSALEA', 'Corporate.adjusted', 'Profitability Metrics', 
    26, 'EBIT Margin, Adjusted', 25, TO_DATE('07/17/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('07/17/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 'Y', 2, 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, ROW_SEPERATOR_FLAG, COL_DETAIL_MODE, HIDDEN_MNEM_FLAG)
 Values
   (420, 'CORP', 'REDFCCOV', 'Corporate.adjusted', 'Real-Estate Ratios', 
    308, 'Debt Fixed Charge Coverage, Adjusted', 26, TO_DATE('07/17/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('07/17/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 'N', 2, 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, ROW_SEPERATOR_FLAG, COL_DETAIL_MODE, HIDDEN_MNEM_FLAG)
 Values
   (421, 'CORP', 'TDTUC', 'Corporate.adjusted', 'Real-Estate Ratios', 
    333, 'Debt/Debt+Equity (undepreciated basis), Adjusted', 27, TO_DATE('07/17/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('07/17/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 'N', 2, 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, ROW_SEPERATOR_FLAG, COL_DETAIL_MODE, HIDDEN_MNEM_FLAG)
 Values
   (422, 'CORP', 'RETDCAP', 'Corporate.adjusted', 'Real-Estate Ratios', 
    312, 'Debt/Debt+Equity (fair value basis), Adjusted', 28, TO_DATE('07/17/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('07/17/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 'Y', 1, 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, ROW_SEPERATOR_FLAG, COL_DETAIL_MODE, HIDDEN_MNEM_FLAG)
 Values
   (423, 'CORP', 'TDTC', 'Corporate.adjusted', 'Other Sector Specific Ratios', 
    331, 'Debt/ Debt and Equity, Adjusted', 29, TO_DATE('07/17/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('07/17/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 'N', 2, 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, ROW_SEPERATOR_FLAG, COL_DETAIL_MODE, HIDDEN_MNEM_FLAG)
 Values
   (424, 'CORP', 'ROCEQ', 'Corporate.adjusted', 'Other Sector Specific Ratios', 
    321, 'Return on Common Equity Adj for AFUDC, Adjusted', 30, TO_DATE('07/17/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('07/17/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 'N', 2, 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, FIN_DATA_ELEMENT_ID, 
    DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, UPDATE_DTTM, 
    UPDATE_USER, ROW_SEPERATOR_FLAG, COL_DETAIL_MODE, HIDDEN_MNEM_FLAG)
 Values
   (435, 'CORP', 'DIVREP', 'Corporate.pre-adjusted', 16, 
    'Dividends, Pre-Adjusted', 9, TO_DATE('07/17/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', TO_DATE('07/17/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 
    'R360_APPDATA', 'N', 2, 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, FIN_DATA_ELEMENT_ID, 
    DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, UPDATE_DTTM, 
    UPDATE_USER, ROW_SEPERATOR_FLAG, COL_DETAIL_MODE, HIDDEN_MNEM_FLAG)
 Values
   (365, 'INS', 'Gross_Prem_AR_I', 'Insurance.all', 11511, 
    'Gross Premiums', 1, TO_DATE('07/17/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', TO_DATE('07/17/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 
    'R360_APPDATA', 'N', 2, 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, FIN_DATA_ELEMENT_ID, 
    DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, UPDATE_DTTM, 
    UPDATE_USER, ROW_SEPERATOR_FLAG, COL_DETAIL_MODE, HIDDEN_MNEM_FLAG)
 Values
   (366, 'INS', 'Net_Prem_AR_I', 'Insurance.all', 11512, 
    'Net Premiums', 2, TO_DATE('07/17/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', TO_DATE('07/17/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 
    'R360_APPDATA', 'N', 2, 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, FIN_DATA_ELEMENT_ID, 
    DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, UPDATE_DTTM, 
    UPDATE_USER, ROW_SEPERATOR_FLAG, COL_DETAIL_MODE, HIDDEN_MNEM_FLAG)
 Values
   (367, 'INS', 'Net_Inc_AttrAllShareHold_PefMin_I', 'Insurance.all', 11516, 
    'Net Income', 3, TO_DATE('07/17/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', TO_DATE('07/17/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 
    'R360_APPDATA', 'N', 2, 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, FIN_DATA_ELEMENT_ID, 
    DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, UPDATE_DTTM, 
    UPDATE_USER, ROW_SEPERATOR_FLAG, COL_DETAIL_MODE, HIDDEN_MNEM_FLAG)
 Values
   (368, 'INS', 'EBITDA_FixedChCov_I', 'Insurance.all', 11518, 
    'EBITDA Fixed-Charge Coverage', 4, TO_DATE('07/17/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', TO_DATE('07/17/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 
    'R360_APPDATA', 'N', 1, 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, FIN_DATA_ELEMENT_ID, 
    DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, UPDATE_DTTM, 
    UPDATE_USER, ROW_SEPERATOR_FLAG, COL_DETAIL_MODE, HIDDEN_MNEM_FLAG)
 Values
   (369, 'INS', 'FinLev_Incl_PensionDefAdj_I', 'Insurance.all', 11522, 
    'Financial Leverage', 5, TO_DATE('07/17/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', TO_DATE('07/17/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 
    'R360_APPDATA', 'N', 2, 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, FIN_DATA_ELEMENT_ID, 
    DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, UPDATE_DTTM, 
    UPDATE_USER, ROW_SEPERATOR_FLAG, COL_DETAIL_MODE, HIDDEN_MNEM_FLAG)
 Values
   (370, 'INS', 'ROE_I', 'Insurance.all', 11513, 
    'Return on Equity', 6, TO_DATE('07/17/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', TO_DATE('07/17/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 
    'R360_APPDATA', 'N', 2, 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, FIN_DATA_ELEMENT_ID, 
    DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, UPDATE_DTTM, 
    UPDATE_USER, ROW_SEPERATOR_FLAG, COL_DETAIL_MODE, HIDDEN_MNEM_FLAG)
 Values
   (371, 'INS', 'NetInvstYield_I', 'Insurance.all', 11520, 
    'Net Investment Yield', 7, TO_DATE('07/17/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', TO_DATE('07/17/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 
    'R360_APPDATA', 'N', 2, 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, FIN_DATA_ELEMENT_ID, 
    DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, UPDATE_DTTM, 
    UPDATE_USER, ROW_SEPERATOR_FLAG, COL_DETAIL_MODE, HIDDEN_MNEM_FLAG)
 Values
   (372, 'INS', 'NetCombinedRatio_PC_I', 'Insurance.all', 11519, 
    'Net Combined Ratio', 8, TO_DATE('07/17/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', TO_DATE('07/17/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 
    'R360_APPDATA', 'N', 2, 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, FIN_DATA_ELEMENT_ID, 
    DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, UPDATE_DTTM, 
    UPDATE_USER, ROW_SEPERATOR_FLAG, COL_DETAIL_MODE, HIDDEN_MNEM_FLAG)
 Values
   (373, 'INS', 'ReturnRev_I', 'Insurance.all', 11517, 
    'Return on Revenue', 9, TO_DATE('07/17/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', TO_DATE('07/17/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 
    'R360_APPDATA', 'N', 2, 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, FIN_DATA_ELEMENT_ID, 
    DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, UPDATE_DTTM, 
    UPDATE_USER, ROW_SEPERATOR_FLAG, COL_DETAIL_MODE, HIDDEN_MNEM_FLAG)
 Values
   (374, 'INS', 'ReturnAssets_Excl_InvestGL_I', 'Insurance.all', 11514, 
    'Return on Assets', 10, TO_DATE('07/17/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', TO_DATE('07/17/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 
    'R360_APPDATA', 'N', 2, 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, ROW_SEPERATOR_FLAG, COL_DETAIL_MODE, HIDDEN_MNEM_FLAG)
 Values
   (375, 'BANK', 'Asset_Adj_F', 'Financial.all', 'Key Figures', 
    11198, 'Adjusted Assets', 1, TO_DATE('07/17/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('07/17/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 'N', 2, 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, FIN_DATA_ELEMENT_ID, 
    DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, UPDATE_DTTM, 
    UPDATE_USER, ROW_SEPERATOR_FLAG, COL_DETAIL_MODE, HIDDEN_MNEM_FLAG)
 Values
   (403, 'CORP', 'DVA', 'Corporate.adjusted', 17, 
    'Dividends, Adjusted', 9, TO_DATE('07/17/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', TO_DATE('07/17/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 
    'R360_APPDATA', 'N', 2, 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, FIN_DATA_ELEMENT_ID, 
    DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, UPDATE_DTTM, 
    UPDATE_USER, ROW_SEPERATOR_FLAG, COL_DETAIL_MODE, HIDDEN_MNEM_FLAG)
 Values
   (409, 'CORP', 'TCAP', 'Corporate.adjusted', 325, 
    'Debt and Equity, Adjusted', 15, TO_DATE('07/17/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', TO_DATE('07/17/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 
    'R360_APPDATA', 'Y', 2, 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, ROW_SEPERATOR_FLAG, COL_DETAIL_MODE, HIDDEN_MNEM_FLAG)
 Values
   (410, 'CORP', 'TDE', 'Corporate.adjusted', 'Core Ratios', 
    327, 'Debt/ EBITDA, Adjusted', 16, TO_DATE('07/17/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('07/17/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 'N', 2, 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, ROW_SEPERATOR_FLAG, COL_DETAIL_MODE, HIDDEN_MNEM_FLAG)
 Values
   (411, 'CORP', 'FFOTD', 'Corporate.adjusted', 'Core Ratios', 
    33, 'FFO/ Debt, Adjusted', 17, TO_DATE('07/17/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('07/17/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 'Y', 1, 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, ROW_SEPERATOR_FLAG, COL_DETAIL_MODE, HIDDEN_MNEM_FLAG)
 Values
   (412, 'CORP', 'OCFTD', 'Corporate.adjusted', 'Supplemental Ratios - Cash Flow Payback', 
    49, 'Operating Cash Flow/ Debt, Adjusted', 18, TO_DATE('07/17/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('07/17/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 'N', 1, 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, ROW_SEPERATOR_FLAG, COL_DETAIL_MODE, HIDDEN_MNEM_FLAG)
 Values
   (413, 'CORP', 'FOCFTD', 'Corporate.adjusted', 'Supplemental Ratios - Cash Flow Payback', 
    38, 'Free Operating Cash Flow/ Debt, Adjusted', 19, TO_DATE('07/17/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('07/17/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 'N', 1, 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, ROW_SEPERATOR_FLAG, COL_DETAIL_MODE, HIDDEN_MNEM_FLAG)
 Values
   (414, 'CORP', 'DCFTD', 'Corporate.adjusted', 'Supplemental Ratios - Cash Flow Payback', 
    11, 'Discretionary Cash Flow/Debt, Adjusted', 20, TO_DATE('07/17/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('07/17/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 'Y', 1, 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, ROW_SEPERATOR_FLAG, COL_DETAIL_MODE, HIDDEN_MNEM_FLAG)
 Values
   (415, 'CORP', 'EBITDACOV', 'Corporate.adjusted', 'Supplemental Ratios - Interest Coverage', 
    22, 'EBITDA Interest Coverage, Adjusted', 21, TO_DATE('07/17/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('07/17/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 'N', 2, 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, ROW_SEPERATOR_FLAG, COL_DETAIL_MODE, HIDDEN_MNEM_FLAG)
 Values
   (416, 'CORP', 'FFOCIC', 'Corporate.adjusted', 'Supplemental Ratios - Interest Coverage', 
    31, 'FFO Cash Interest Coverage, Adjusted', 22, TO_DATE('07/17/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('07/17/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 'Y', 2, 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, ROW_SEPERATOR_FLAG, COL_DETAIL_MODE, HIDDEN_MNEM_FLAG)
 Values
   (417, 'CORP', 'EBITDASALEA', 'Corporate.adjusted', 'Profitability Metrics', 
    24, 'EBITDA Margin, Adjusted', 23, TO_DATE('07/17/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('07/17/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 'N', 2, 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, ROW_SEPERATOR_FLAG, COL_DETAIL_MODE, HIDDEN_MNEM_FLAG)
 Values
   (425, 'CORP', 'RELTV', 'Corporate.adjusted', 'Other Sector Specific Ratios', 
    310, 'LTV, Adjusted', 31, TO_DATE('07/17/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('07/17/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 'N', 1, 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, ROW_SEPERATOR_FLAG, COL_DETAIL_MODE, HIDDEN_MNEM_FLAG)
 Values
   (426, 'CORP', 'EBITCOV', 'Corporate.adjusted', 'Other Sector Specific Ratios', 
    19, 'EBIT Interest Coverage, Adjusted', 32, TO_DATE('07/17/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('07/17/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 'Y', 2, 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, FIN_DATA_ELEMENT_ID, 
    DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, UPDATE_DTTM, 
    UPDATE_USER, ROW_SEPERATOR_FLAG, COL_DETAIL_MODE, HIDDEN_MNEM_FLAG)
 Values
   (427, 'CORP', 'REVTREP', 'Corporate.pre-adjusted', 317, 
    'Revenues, Pre-Adjusted', 1, TO_DATE('07/17/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', TO_DATE('07/17/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 
    'R360_APPDATA', 'N', 2, 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, FIN_DATA_ELEMENT_ID, 
    DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, UPDATE_DTTM, 
    UPDATE_USER, ROW_SEPERATOR_FLAG, COL_DETAIL_MODE, HIDDEN_MNEM_FLAG)
 Values
   (428, 'CORP', 'EBITDAA', 'Corporate.pre-adjusted', 21, 
    'EBITDA, Pre-Adjusted', 2, TO_DATE('07/17/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', TO_DATE('07/17/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 
    'R360_APPDATA', 'N', 2, 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, FIN_DATA_ELEMENT_ID, 
    DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, UPDATE_DTTM, 
    UPDATE_USER, ROW_SEPERATOR_FLAG, COL_DETAIL_MODE, HIDDEN_MNEM_FLAG)
 Values
   (429, 'CORP', 'OPINCADAREP', 'Corporate.pre-adjusted', 53, 
    'Operating Income (After D&A), Pre-Adjusted', 3, TO_DATE('07/17/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', TO_DATE('07/17/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 
    'R360_APPDATA', 'N', 2, 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, FIN_DATA_ELEMENT_ID, 
    DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, UPDATE_DTTM, 
    UPDATE_USER, ROW_SEPERATOR_FLAG, COL_DETAIL_MODE, HIDDEN_MNEM_FLAG)
 Values
   (430, 'CORP', 'EBITREP', 'Corporate.pre-adjusted', 25, 
    'EBIT, Pre-Adjusted', 4, TO_DATE('07/17/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', TO_DATE('07/17/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 
    'R360_APPDATA', 'N', 2, 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, FIN_DATA_ELEMENT_ID, 
    DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, UPDATE_DTTM, 
    UPDATE_USER, ROW_SEPERATOR_FLAG, COL_DETAIL_MODE, HIDDEN_MNEM_FLAG)
 Values
   (431, 'CORP', 'IB', 'Corporate.pre-adjusted', 41, 
    'Net Income from Cont Operations, Pre-Adjusted', 5, TO_DATE('07/17/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', TO_DATE('07/17/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 
    'R360_APPDATA', 'Y', 2, 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, FIN_DATA_ELEMENT_ID, 
    DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, UPDATE_DTTM, 
    UPDATE_USER, ROW_SEPERATOR_FLAG, COL_DETAIL_MODE, HIDDEN_MNEM_FLAG)
 Values
   (432, 'CORP', 'OANCF.VLP', 'Corporate.pre-adjusted', 46, 
    'Cash Flow from Operations, Pre-Adjusted', 6, TO_DATE('07/17/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', TO_DATE('07/17/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 
    'R360_APPDATA', 'N', 2, 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, FIN_DATA_ELEMENT_ID, 
    DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, UPDATE_DTTM, 
    UPDATE_USER, ROW_SEPERATOR_FLAG, COL_DETAIL_MODE, HIDDEN_MNEM_FLAG)
 Values
   (433, 'CORP', 'CAPX', 'Corporate.pre-adjusted', 1, 
    'Capital Expenditures, Pre-Adjusted', 7, TO_DATE('07/17/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', TO_DATE('07/17/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 
    'R360_APPDATA', 'N', 2, 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, FIN_DATA_ELEMENT_ID, 
    DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, UPDATE_DTTM, 
    UPDATE_USER, ROW_SEPERATOR_FLAG, COL_DETAIL_MODE, HIDDEN_MNEM_FLAG)
 Values
   (434, 'CORP', 'FOCFREP', 'Corporate.pre-adjusted', 39, 
    'Free Operating Cash Flow, Pre-Adjusted', 8, TO_DATE('07/17/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', TO_DATE('07/17/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 
    'R360_APPDATA', 'N', 2, 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, FIN_DATA_ELEMENT_ID, 
    DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, UPDATE_DTTM, 
    UPDATE_USER, ROW_SEPERATOR_FLAG, COL_DETAIL_MODE, HIDDEN_MNEM_FLAG)
 Values
   (436, 'CORP', 'SHRREPUR', 'Corporate.pre-adjusted', 324, 
    'Share Repurchases', 10, TO_DATE('07/17/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', TO_DATE('07/17/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 
    'R360_APPDATA', 'N', 2, 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, FIN_DATA_ELEMENT_ID, 
    DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, UPDATE_DTTM, 
    UPDATE_USER, ROW_SEPERATOR_FLAG, COL_DETAIL_MODE, HIDDEN_MNEM_FLAG)
 Values
   (437, 'CORP', 'DCFREP', 'Corporate.pre-adjusted', 12, 
    'Discretionary Cash Flow, Pre-Adjusted', 11, TO_DATE('07/17/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', TO_DATE('07/17/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 
    'R360_APPDATA', 'Y', 2, 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, FIN_DATA_ELEMENT_ID, 
    DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, UPDATE_DTTM, 
    UPDATE_USER, ROW_SEPERATOR_FLAG, COL_DETAIL_MODE, HIDDEN_MNEM_FLAG)
 Values
   (438, 'CORP', 'CHE', 'Corporate.pre-adjusted', 8, 
    'Cash & Short-Term Investments, Pre-Adjusted', 12, TO_DATE('07/17/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', TO_DATE('07/17/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 
    'R360_APPDATA', 'N', 2, 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, FIN_DATA_ELEMENT_ID, 
    DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, UPDATE_DTTM, 
    UPDATE_USER, ROW_SEPERATOR_FLAG, COL_DETAIL_MODE, HIDDEN_MNEM_FLAG)
 Values
   (439, 'CORP', 'TDREP', 'Corporate.pre-adjusted', 330, 
    'Debt, Pre-Adjusted', 13, TO_DATE('07/17/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', TO_DATE('07/17/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 
    'R360_APPDATA', 'N', 2, 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, FIN_DATA_ELEMENT_ID, 
    DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, UPDATE_DTTM, 
    UPDATE_USER, ROW_SEPERATOR_FLAG, COL_DETAIL_MODE, HIDDEN_MNEM_FLAG)
 Values
   (440, 'CORP', 'PSTK', 'Corporate.pre-adjusted', 60, 
    'Preferred Stock, Pre-Adjusted', 14, TO_DATE('07/17/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', TO_DATE('07/17/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 
    'R360_APPDATA', 'N', 1, 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, FIN_DATA_ELEMENT_ID, 
    DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, UPDATE_DTTM, 
    UPDATE_USER, ROW_SEPERATOR_FLAG, COL_DETAIL_MODE, HIDDEN_MNEM_FLAG)
 Values
   (441, 'CORP', 'CEQ', 'Corporate.pre-adjusted', 4, 
    'Common Equity, Pre-Adjusted', 15, TO_DATE('07/17/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', TO_DATE('07/17/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 
    'R360_APPDATA', 'Y', 2, 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, ROW_SEPERATOR_FLAG, COL_DETAIL_MODE, HIDDEN_MNEM_FLAG)
 Values
   (442, 'CORP', 'TDEREP', 'Corporate.pre-adjusted', 'Core Ratios', 
    328, 'Debt/ EBITDA, Pre-Adjusted', 16, TO_DATE('07/17/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('07/17/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 'Y', 2, 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, ROW_SEPERATOR_FLAG, COL_DETAIL_MODE, HIDDEN_MNEM_FLAG)
 Values
   (443, 'CORP', 'OCFTDREP', 'Corporate.pre-adjusted', 'Supplemental Ratios - Cash Flow Payback', 
    50, 'Operating Cash Flow/ Debt, Pre-Adjusted', 17, TO_DATE('07/17/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('07/17/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 'N', 2, 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, ROW_SEPERATOR_FLAG, COL_DETAIL_MODE, HIDDEN_MNEM_FLAG)
 Values
   (444, 'CORP', 'FOCFTDREP', 'Corporate.pre-adjusted', 'Supplemental Ratios - Cash Flow Payback', 
    39, 'Free Operating Cash Flow/ Debt, Pre-Adjusted', 18, TO_DATE('07/17/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('07/17/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 'N', 2, 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, ROW_SEPERATOR_FLAG, COL_DETAIL_MODE, HIDDEN_MNEM_FLAG)
 Values
   (445, 'CORP', 'DCFTDREP', 'Corporate.pre-adjusted', 'Supplemental Ratios - Cash Flow Payback', 
    14, 'Discretionary Cash Flow/ Debt, Pre-Adjusted', 19, TO_DATE('07/17/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('07/17/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 'Y', 2, 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, ROW_SEPERATOR_FLAG, COL_DETAIL_MODE, HIDDEN_MNEM_FLAG)
 Values
   (446, 'CORP', 'EBITDACOVREP', 'Corporate.pre-adjusted', 'Supplemental Ratios - Interest Coverage', 
    23, 'EBITDA Interest Coverage, Pre-Adjusted', 20, TO_DATE('07/17/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('07/17/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 'Y', 2, 'N');
Insert into R360_APPDATA.DATAELEMENT_UI_CONFIG
   (DATAELEMENT_UI_CONFIG_ID, ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_TYPE, DATAELEMENT_GROUP, 
    FIN_DATA_ELEMENT_ID, DATAELEMENT_DISPLAY_NAME, SORT_ORDER, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, ROW_SEPERATOR_FLAG, COL_DETAIL_MODE, HIDDEN_MNEM_FLAG)
 Values
   (447, 'CORP', 'OPMARGREP', 'Corporate.pre-adjusted', 'Profitability Metrics', 
    59, 'EBITDA Margin, Pre-Adjusted', 21, TO_DATE('07/17/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('07/17/2023 16:46:46', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 'N', 2, 'N');
COMMIT;


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\R360_NonPublicOpions\R360CFS_Release_Sep8th_2023\dml\element_master.sql

SET DEFINE OFF;
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20352, 'Reconciliation', 'REC_FFOHYBDBTI', '$M', 'Hybrids, as reported in the debt notes to the company''s financials. Used to adjust 50% of the interest expense impact on funds from operations (FFO) to be reclassified to dividends as the company treats it as debt but S&P views it, based on the terms and conditions of the instrument, as intermediate-equity.', 
    '116078:CIQ048599', 'Intermediate Hybrids Reported As Debt', 2, TO_DATE('08/09/2023 03:51:23', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:51:23', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20353, 'Reconciliation', 'REC_FFOHYBEQUI', '$M', 'Hybrids, as reported in the notes to the company''s financials. Used to adjust funds from operations (FFO) by 50% of the dividends on the intermediate hybrid that are reclassified to interest expense since the company treats the instrument as debt but S&P views it based on the terms and conditions as intermediate-debt.', 
    '116079:CIQ048600', 'Intermediate Hybrids Reported As Equity', 2, TO_DATE('08/09/2023 03:51:24', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:51:24', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20354, 'Reconciliation', 'REC_FFOCAPINT', '$M', 'Capitalized interest, as reported on the company''s income statement or in the finance expense notes to the company''s financials. Capitalized interest is the cost of borrowing to acquire or construct a long-term asset. Unlike an interest expense incurred for any other purpose, capitalized interest must not be expensed on the income statement of a company''s financial statements, and instead firms capitalize it, meaning such interest increases the cost basis of a long-term asset on a balance sheet. Capitalized interest shows up on a company''s income statement through a periodic depreciation expense recorded on the associated long-term asset throughout its useful life.', 
    '116081:CIQ048602', 'Capitalized Interest', 2, TO_DATE('08/09/2023 03:51:24', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:51:24', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20355, 'Reconciliation', 'REC_FFOCAPFIN', '$M', 'FFO of the captive finance entity that S&P adjusts the consolidated company''s FFO for', 
    '116086:CIQ048607', 'Captive Finance Operations', 2, TO_DATE('08/09/2023 03:51:24', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:51:24', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20356, 'Reconciliation', 'REC_FFOCD', '$M', 'FFO of the entity that S&P consolidates with or deconsolidates from the parent company''s FFO in the calculation of adjusted FFO', 
    '116087:CIQ048608', 'Deconsolidation/ Consolidation', 2, TO_DATE('08/09/2023 03:51:25', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:51:25', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20357, 'Reconciliation', 'REC_FFOSECCOST', '$M', 'Interest expense related to the securitized debt to meet stranded costs, that S&P adjust FFO for, as the customers not the utility are responsible for it. The adjustment is specific to the utilities sector.', 
    '116089:CIQ048610', 'Securitized Stranded Costs', 2, TO_DATE('08/09/2023 03:51:25', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:51:25', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20358, 'Reconciliation', 'REC_FFOPPA', '$M', 'Power purchase agreements, as reported in the notes to the company''s financials. Used for regulated utilities to add back to funds from operations (FFO) the depreciation on the Power Purchase Agreement (PPA). A PPA is a contract between two parties, one which generates electricity, the seller, and one which is looking to purchase electricity, the buyer.', 
    '116090:CIQ048611', 'Power Purchase Agreements', 2, TO_DATE('08/09/2023 03:51:25', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:51:25', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20359, 'Reconciliation', 'REC_FFOEXPCOST', '$M', 'Exploration costs, as reported on the company''s income statement or notes to the company''s financials. Represents an expense in the period in respect of unsuccessful exploration activities for those companies following the successful efforts accounting method. Used to add it back to the calculation of EBITDA in the calculation of adjusted funds from operations so as to facilitate comparisons of successful efforts companies with full cost companies.', 
    '116092:CIQ048613', 'Exploration Costs', 2, TO_DATE('08/09/2023 03:51:26', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:51:26', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20360, 'Reconciliation', 'REC_FFOFFOOTH', '$M', 'Principle based adjustments to the funds from operations (FFO)', 
    '116131:CIQ048652', 'FFO, Other (Principle Based)', 2, TO_DATE('08/09/2023 03:51:26', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:51:26', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20361, 'Reconciliation', 'REC_FFOADJTOT', '$M', 'Sum of all S&P adjustments to funds from operations (FFO) such as profit on disposals, derivatives finance or interest income, interest expense, current tax expense, non-recurring and non-operating income, hybrid adjustments that are used to calculate adjusted FFO', 
    '116132:CIQ048653', 'Total Adjustments', 2, TO_DATE('08/09/2023 03:51:26', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:51:26', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20362, 'Reconciliation', 'REC_FFOA', '$M', 'Adjusted funds from operations, calculated as adjusted EBITDA less adjusted net interest expense, less adjusted current tax expense', 
    '116133:CIQ048654', 'Funds From Operations, Adjusted', 2, TO_DATE('08/09/2023 03:51:26', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:51:26', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20363, 'Reconciliation', 'REC_CFOREP', '$M', 'Cash flow from operations, as reported on the company''s cash flow statement', 
    '116134:CIQ048655', 'Cash Flow from Operations, Pre-Adjusted', 2, TO_DATE('08/09/2023 03:51:27', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:51:27', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20364, 'Reconciliation', 'REC_CFOTRECSLD', '$M', 'Trade receivables securitizations that S&P adjusts cash flow from operations for. This is mostly seen in the form of securitizations or factoring.', 
    '116135:CIQ048656', 'Trade Receivables Securitizations', 2, TO_DATE('08/09/2023 03:51:27', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:51:27', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20365, 'Reconciliation', 'REC_CFOOPLEASE', '$M', 'Operating leases, as reported under the contractual payments and operating lease notes to the company''s financials. An operating lease is a contract that allows for the use of an asset but does not convey rights of ownership of the asset. Represents an off-balance sheet financing of assets, where a leased asset and associated liabilities of future rent payments are not included on the balance sheet of a company.', 
    '116136:CIQ048657', 'Operating Leases', 2, TO_DATE('08/09/2023 03:51:27', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:51:27', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20366, 'Reconciliation', 'REC_CFOHYBDBT', '$M', 'Hybrids, as reported in the equity statement or notes to the company''s financials. Used to add to cash flow from operations the portion of dividends paid to be treated as interest paid since the company treats the instrument as equity but S&P views it as part of debt based on its features.', 
    '116137:CIQ048658', 'Debt-Like Hybrids', 2, TO_DATE('08/09/2023 03:51:28', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:51:28', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20367, 'Reconciliation', 'REC_CFOHYBEQU', '$M', 'Hybrids, as reported in the debt note of the company''s financials. Used to adjust cash flow from operations with the interest paid to be treated as dividends paid since the company treats the instrument as debt but S&P views it as part of equity based on its features.', 
    '116138:CIQ048659', 'Equity-Like Hybrids', 2, TO_DATE('08/09/2023 03:51:28', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:51:28', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20368, 'Reconciliation', 'REC_CFOHYBDBTI', '$M', 'Hybrids, as reported in the debt notes to the company''s financials. Used to adjust 50% of the interest paid impact on cash flow from operations to be reclassified as dividends paid as the company treats the hybrid as debt but S&P views it, based on the terms and conditions of the instrument, as intermediate-equity.', 
    '116139:CIQ048660', 'Intermediate Hybrids Reported As Debt', 2, TO_DATE('08/09/2023 03:51:28', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:51:28', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20369, 'Reconciliation', 'REC_CFOHYBEQUI', '$M', 'Hybrids, as reported in the notes to the company''s financials. Used to adjust cash flow from operations by 50% of the dividend paid on intermediate hybrid which is reclassified to interest paid since the company treats the instrument as equity and S&P views it based on the terms and conditions as intermediate-debt.', 
    '116140:CIQ048661', 'Intermediate Hybrids Reported As Equity', 2, TO_DATE('08/09/2023 03:51:28', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:51:28', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20370, 'Reconciliation', 'REC_CFOCAPINT', '$M', 'Capitalized interest, as reported on the company''s income statement or in the finance expense notes to the company''s financials. Capitalized interest is the cost of borrowing to acquire or construct a long-term asset. Unlike an interest expense incurred for any other purpose, capitalized interest must not be expensed on the income statement of a company''s financial statements, and instead firms capitalize it, meaning such interest increases the cost basis of a long-term asset on a balance sheet. Capitalized interest shows up on a company''s income statement through a periodic depreciation expense recorded on the associated long-term asset throughout its useful life.', 
    '116142:CIQ048663', 'Capitalized Interest', 2, TO_DATE('08/09/2023 03:51:29', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:51:29', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20371, 'Reconciliation', 'REC_CFOCAPDEVC', '$M', 'Capitalized development costs that S&P adjusts cash flow from operations for. Capitalized development costs are not expensed in the period they were incurred, but recognized over a period of time via depreciation or amortization.', 
    '116143:CIQ048664', 'Capitalized Development Costs', 2, TO_DATE('08/09/2023 03:51:29', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:51:29', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20372, 'Reconciliation', 'REC_CFOINFRENC', '$M', 'Infrastructure renewal costs that were capitalized during the period that S&P adjusts cash flow from operations for. Adjustment is specific to the utilities sector in the United Kingdom.', 
    '116144:CIQ048665', 'Infrastructure Renewal Costs', 2, TO_DATE('08/09/2023 03:51:29', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:51:29', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20373, 'Reconciliation', 'REC_CFOCAPFIN', '$M', 'Cash flow from operations of the captive finance entity that S&P adjusts the consolidated company''s cash flow from operations for', 
    '116145:CIQ048666', 'Captive Finance Operations', 2, TO_DATE('08/09/2023 03:51:30', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:51:30', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20374, 'Reconciliation', 'REC_CFOCD', '$M', 'Cash flow from operations of the entity that S&P consolidates with or deconsolidates from the parent company''s cash flow from operations in the calculation of adjusted cash flow from operations', 
    '116146:CIQ048667', 'Deconsolidation/ Consolidation', 2, TO_DATE('08/09/2023 03:51:30', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:51:30', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20375, 'Reconciliation', 'REC_CFOSECCOST', '$M', 'Interest expense related to the securitized debt to meet stranded costs, that S&P adjust cash flow from operations for, as the customers not the utility are responsible for it. The adjustment is specific to the utilities sector.', 
    '116147:CIQ048668', 'Securitized Stranded Costs', 2, TO_DATE('08/09/2023 03:51:30', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:51:30', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20376, 'Reconciliation', 'REC_CFOPPA', '$M', 'Power purchase agreements, as reported in the notes to the company''s financials. Used for regulated utilities to add back to cash flow from operations the depreciation on the Power Purchase Agreement (PPA). A PPA is a contract between two parties, one which generates electricity, the seller, and one which is looking to purchase electricity, the buyer.', 
    '116148:CIQ048669', 'Power Purchase Agreements', 2, TO_DATE('08/09/2023 03:51:30', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:51:30', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20377, 'Reconciliation', 'REC_CFOINTDVCF', '$M', 'Interest and dividend cash flows that S&P reclassify in the calculation of adjusted cash flow from operations', 
    '116150:CIQ048671', 'Reclassification of Interest & Dividend Cash Flows', 2, TO_DATE('08/09/2023 03:51:31', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:51:31', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20378, 'Reconciliation', 'REC_CFOFXMOV', '$M', 'Foreign exchange movements (reported below CFO), as reported in the cash flow statement of the company''s financials. Some companies adopt the approach of rather than adding back the non-cash FX movements from the P&L in cash flow from operations, these are reported below the cash flow statement in the final ''Reconciliation'' to cash. In circumstances where this is the case, S&P reclassifies the value as part of operating cash flow.', 
    '116151:CIQ048672', 'Foreign Exchange Movements (Reported below CFO)', 2, TO_DATE('08/09/2023 03:51:31', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:51:31', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20379, 'Reconciliation', 'REC_CFODECOMFD', '$M', 'U.S. decommissioning fund contributions, as reported under investing activity of the cash flow statement of the company''s financials. Used to enter any U.S. decommissioning fund contributions presented in the investing section of the cash flow statement.', 
    '116152:CIQ048673', 'Us Decommissioning Fund Contributions', 2, TO_DATE('08/09/2023 03:51:31', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:51:31', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20380, 'Reconciliation', 'REC_CFOWCLF', '$M', 'LIFO or FIFO inventory valuation impacts that S&P adjust working capital for', 
    '116153:CIQ048674', 'Working Capital - LIFO/ FIFO', 2, TO_DATE('08/09/2023 03:51:32', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:51:32', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20381, 'Reconciliation', 'REC_CFOWCTX', '$M', 'Income taxes that S&P adjust working capital for', 
    '116154:CIQ048675', 'Working Capital - Taxes', 2, TO_DATE('08/09/2023 03:51:32', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:51:32', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20382, 'Reconciliation', 'REC_CFOWCDER', '$M', 'Derivatives that S&P adjust working capital for', 
    '116155:CIQ048676', 'Working Capital - Derivatives', 2, TO_DATE('08/09/2023 03:51:32', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:51:32', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20383, 'Reconciliation', 'REC_CFOWCAH', '$M', 'Other adjustments to working capital that are not captured in another adjustment line. Includes adjustments to working capital for the impact of any current asset or current liability change', 
    '116156:CIQ048677', 'Working Capital - Other', 2, TO_DATE('08/09/2023 03:51:32', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:51:32', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20384, 'Reconciliation', 'REC_CFOFFOLF', '$M', 'LIFO liquidation gains that S&P adjust operating cash flow for', 
    '116157:CIQ048678', 'OCF - LIFO/ FIFO', 2, TO_DATE('08/09/2023 03:51:33', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:51:33', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20385, 'Reconciliation', 'REC_CFOFFOTX', '$M', 'Income taxes reported in investing or financing activities that S&P adjusts operating cash flows for', 
    '116158:CIQ048679', 'OCF - Taxes', 2, TO_DATE('08/09/2023 03:51:33', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:51:33', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20386, 'Reconciliation', 'REC_CFOFFORST', '$M', 'Cash flows from restructuring activities that are seen as transformative in nature. S&P adjusts cash flow from operations for these.', 
    '116159:CIQ048680', 'OCF - Restructuring Costs', 2, TO_DATE('08/09/2023 03:51:33', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:51:33', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20387, 'Reconciliation', 'REC_CFOFFODIS', '$M', 'Principle based adjustments (including asset disposals) to the operating cash flows (OCF)', 
    '116160:CIQ048681', 'OCF, Asset Disposals & Other (Principle Based)', 2, TO_DATE('08/09/2023 03:51:34', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:51:34', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20388, 'Reconciliation', 'REC_CFOFFODO', '$M', 'Cash flows from discontinued operations that S&P adjust cash flow from operations for', 
    '116161:CIQ048682', 'OCF - Discontinued Operations', 2, TO_DATE('08/09/2023 03:51:34', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:51:34', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20389, 'Reconciliation', 'REC_CFOFFOREGALL', '$M', 'Cash flows from regulatory allowances that S&P adjust cash flow from operations for', 
    '116162:CIQ048683', 'OCF - Regulatory Allowance', 2, TO_DATE('08/09/2023 03:51:34', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:51:34', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20390, 'Reconciliation', 'REC_CFOFFODER', '$M', 'Cash flows related to derivatives that S&P adjust cash flow from operations for', 
    '116163:CIQ048684', 'OCF - Derivatives', 2, TO_DATE('08/09/2023 03:51:34', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:51:34', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20391, 'Reconciliation', 'REC_CFOFFOOTHA', '$M', 'Situational adjustments to operating cash flows (OCF)', 
    '116164:CIQ048685', 'OCF, Other (Situational)', 2, TO_DATE('08/09/2023 03:51:35', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:51:35', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20392, 'Reconciliation', 'REC_CFOADJTOT', '$M', 'Sum of all S&P adjustments to cash flow from operations such as asset retirement obligations, power purchase agreements, hybrid adjustments, U.S. decommissioning fund contributions that are used to calculate adjusted cash flow from operations', 
    '116165:CIQ048686', 'Total Adjustments', 2, TO_DATE('08/09/2023 03:51:35', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:51:35', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20393, 'Reconciliation', 'REC_CFOA', '$M', 'Cash flow from operations which has been adjusted from the companies reported cash flow from operations to ensure a globally consistent and comparable number. The adjustments also enable better alignment of the company''s reported figure with S&P''s view of underlying economic conditions. Moreover, they allow a more accurate portrayal of the company''s ongoing business.', 
    '116166:CIQ048687', 'Cash Flow From Operations, Adjusted', 2, TO_DATE('08/09/2023 03:51:35', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:51:35', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20394, 'Reconciliation', 'REC_DIVREP', '$M', 'Reported dividends, as reported in the statement of changes in Shareholders'' table, cash flow statement or in the notes to the company''s financials', 
    '116167:CIQ048688', 'Dividends, Pre-Adjusted', 2, TO_DATE('08/09/2023 03:51:36', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:51:36', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20395, 'Reconciliation', 'REC_DIVHYBDBT', '$M', 'Hybrids, as reported in the equity statement or notes to the company''s financials. Used to adjust dividends for the portion of the hybrid treated as interest expense since the company treats it as equity and S&P views it as part of debt based on its features.', 
    '116168:CIQ048689', 'Debt-Like Hybrids', 2, TO_DATE('08/09/2023 03:51:36', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:51:36', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20396, 'Reconciliation', 'REC_DIVHYBEQU', '$M', 'Hybrids, as reported in the debt note of the company''s financials. Used to adjust dividends since the company treats the instrument as debt and S&P views it as part of equity based on its features.', 
    '116169:CIQ048690', 'Equity-Like Hybrids', 2, TO_DATE('08/09/2023 03:51:36', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:51:36', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20397, 'Reconciliation', 'REC_DIVHYBDBTI', '$M', 'Hybrids, as reported in the debt notes to the company''s financials. Used to adjust dividends with 50% of interest expense on the intermediate hybrid since the company treats it as debt but S&P views it, based on the terms and conditions of the instrument, as intermediate-equity.', 
    '116170:CIQ048691', 'Intermediate Hybrids Reported As Debt', 2, TO_DATE('08/09/2023 03:51:36', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:51:36', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20398, 'Reconciliation', 'REC_DIVHYBEQUI', '$M', 'Hybrids, as reported in the notes to the company''s financials. Used to adjust 50% of the dividends on intermediate hybrids reclassified to interest expense as the company treats the instrument as equity but S&P views it, based on the terms and conditions, as intermediate-debt.', 
    '116171:CIQ048692', 'Intermediate Hybrids Reported As Equity', 2, TO_DATE('08/09/2023 03:51:37', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:51:37', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20399, 'Reconciliation', 'REC_DIVCD', '$M', 'Dividends of the entity that S&P consolidates with or deconsolidates from the parent company''s dividends in the calculation of adjusted dividends', 
    '116172:CIQ048693', 'Deconsolidation/ Consolidation', 2, TO_DATE('08/09/2023 03:51:37', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:51:37', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20400, 'Reconciliation', 'REC_DIVDVAAH', '$M', 'Other adjustments S&P makes to dividends that are not captured in another adjustment line', 
    '116173:CIQ048694', 'Dividends - Other', 2, TO_DATE('08/09/2023 03:51:37', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:51:37', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20401, 'Reconciliation', 'REC_DIVADJTOT', '$M', 'Sum of all S&P adjustments to dividends such as hybrid adjustments, consolidation or deconsolidation adjustments that are used to calculate adjusted dividends', 
    '116174:CIQ048695', 'Total Adjustments', 2, TO_DATE('08/09/2023 03:51:38', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:51:38', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20402, 'Reconciliation', 'REC_DVA', '$M', 'Dividends which have been adjusted from the companies reported dividends to ensure a globally consistent and comparable number. The adjustments also enable better alignment of the company''s reported figure with S&P''s view of underlying economic conditions. Moreover, they allow a more accurate portrayal of the company''s ongoing business.', 
    '116175:CIQ048696', 'Dividends, Adjusted', 2, TO_DATE('08/09/2023 03:51:38', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:51:38', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20403, 'Reconciliation', 'REC_CAPEXREP', '$M', 'Capital expenditures, as reported on the company''s cash flow statement. Captures fixed asset purchases, both tangible and intangible. Includes normal expenditure on intangibles (i.e. purchased other than in the process of acquisition) so that free operating cash flow is comparable across all industries. This value is critical for analysis as it comprises the capital expenditures figure that affects free operating cash flows.', 
    '116176:CIQ048697', 'Capital Expenditures, Pre-Adjusted', 2, TO_DATE('08/09/2023 03:51:38', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:51:38', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20404, 'Reconciliation', 'REC_CAPEXCAPINT', '$M', 'Capitalized interest, as reported on the company''s income statement or in the finance expense notes to the company''s financials. Capitalized interest is the cost of borrowing to acquire or construct a long-term asset. Unlike an interest expense incurred for any other purpose, capitalized interest must not be expensed on the income statement of a company''s financial statements, and instead firms capitalize it, meaning such interest increases the cost basis of a long-term asset on a balance sheet. Capitalized interest shows up on a company''s income statement through a periodic depreciation expense recorded on the associated long-term asset throughout its useful life.', 
    '116177:CIQ048698', 'Capitalized Interest', 2, TO_DATE('08/09/2023 03:51:38', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:51:38', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20405, 'Reconciliation', 'REC_CAPEXCAPDEVC', '$M', 'Capitalized development costs that S&P adjusts capital expenditures for. Capitalized development costs are not expensed in the period they were incurred, but recognized over a period of time via depreciation or amortization.', 
    '116178:CIQ048699', 'Capitalized Development Costs', 2, TO_DATE('08/09/2023 03:51:39', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:51:39', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20406, 'Reconciliation', 'REC_CAPEXINFRENC', '$M', 'Infrastructure renewal costs that S&P reclassify as cash flow from operations. Adjustment is specific to the utilities sector in the United Kingdom.', 
    '116179:CIQ048700', 'Infrastructure Renewal Costs', 2, TO_DATE('08/09/2023 03:51:39', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:51:39', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20407, 'Reconciliation', 'REC_CAPEXCAPFIN', '$M', 'Capital expenditures of the captive finance entity that S&P adjusts the consolidated company''s capital expenditures for', 
    '116180:CIQ048701', 'Captive Finance Operations', 2, TO_DATE('08/09/2023 03:51:39', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:51:39', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20408, 'Reconciliation', 'REC_CAPEXCD', '$M', 'Capital expenditures of the entity that S&P consolidates with or deconsolidates from the parent company''s capital expenditures in the calculation of adjusted capital expenditures', 
    '116181:CIQ048702', 'Deconsolidation/ Consolidation', 2, TO_DATE('08/09/2023 03:51:40', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:51:40', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20409, 'Reconciliation', 'REC_CAPEXPPA', '$M', 'Power purchase agreements, as reported in the notes to the company''s financials. Used to add depreciation on the power purchase agreement (PPA) back to capital expenditures for regulated utilities. A PPA is a contract between two parties, one which generates electricity, the seller, and one which is looking to purchase electricity, the buyer.', 
    '116182:CIQ048703', 'Power Purchase Agreements', 2, TO_DATE('08/09/2023 03:51:40', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:51:40', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20410, 'Reconciliation', 'REC_CAPEXCAPXCC', '$M', 'Customer contributions towards capital expenditures, as reported in the cash flow statement. Used to adjust capital expenditures for any contributions from customers towards capital expenditures.', 
    '116183:CIQ048704', 'Capital Expenditures - Customer Contributions', 2, TO_DATE('08/09/2023 03:51:40', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:51:40', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20411, 'Reconciliation', 'REC_CAPEXCAPXRSE', '$M', 'Routine sales of equipment, as reported in the cash flow statement. Used to adjust any routine sales of equipment from capital expenditures. The adjustment is specific to the transportation sector.', 
    '116184:CIQ048705', 'Capital Expenditures - Routine Sales of Equipment', 2, TO_DATE('08/09/2023 03:51:40', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:51:40', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20412, 'Reconciliation', 'REC_CAPEXCAPXAH', '$M', 'Other adjustments S&P makes to capital expenditures that are not captured in another adjustment line', 
    '116185:CIQ048706', 'Capital Expenditures - Other', 2, TO_DATE('08/09/2023 03:51:41', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:51:41', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20103, 'Corporate.adjusted', 'EBITDASALEA', '%', 'Adjusted EBITDA as a percent of adjusted revenues', 
    '113255:CIQ045281', 'EBITDA Margin, Adjusted', 2, TO_DATE('08/08/2023 01:17:26', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/08/2023 01:17:26', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20104, 'Corporate.adjusted', 'EQUITYA', '$M', 'Adjusted equity has been adjusted from the companies reported equity to ensure a globally consistent and comparable number. The adjustments also enable better alignment of the company''s reported figure with our view of underlying economic conditions. Moreover, they allow a more accurate portrayal of the company''s ongoing business.', 
    '113264:CIQ045237', 'Equity, Adjusted', 2, TO_DATE('08/08/2023 01:17:26', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/08/2023 01:17:26', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20106, 'Corporate.adjusted', 'FOCFA', '$M', 'Adjusted cash flow from operating activities less adjusted capital expenditures', 
    '113279:CIQ045230', 'Free Operating Cash Flow, Adjusted', 2, TO_DATE('08/08/2023 01:17:26', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/08/2023 01:17:26', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20107, 'Corporate.adjusted', 'FOCFTD', '%', 'Free operating cash flow, adjusted as a percent of total debt, adjusted', 
    '113281:CIQ045269', 'Free Operating Cash Flow/ Debt, Adjusted', 2, TO_DATE('08/08/2023 01:17:26', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/08/2023 01:17:26', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20108, 'Corporate.adjusted', 'FFOA', '$M', 'Adjusted funds from operations has been adjusted from the companies reported funds from operations to ensure a globally consistent and comparable number. The adjustments also enable better alignment of the company''s reported figure with our view of underlying economic conditions. Moreover, they allow a more accurate portrayal of the company''s ongoing business.', 
    '113285:CIQ045227', 'FFO, Adjusted', 2, TO_DATE('08/08/2023 01:17:26', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/08/2023 01:17:26', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20109, 'Corporate.adjusted', 'OPINCDA', '$M', 'Adjusted operating income (after depreciation & amortization)', 
    '113399:CIQ045224', 'Operating Income (After D&A), Adjusted', 2, TO_DATE('08/08/2023 01:17:26', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/08/2023 01:17:26', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20110, 'Corporate.adjusted', 'ROC', '%', 'Earnings before interest and taxes (EBIT), adjusted as a percent of average capital, adjusted', 
    '113548:CIQ045254', 'Return on Capital, Adjusted', 2, TO_DATE('08/08/2023 01:17:26', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/08/2023 01:17:26', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20111, 'Corporate.adjusted', 'ROCEQ', '%', 'Income before extraordinary items less preferred dividends less capitalized interest or allowance for funds used during construction (AFUDC) debt less AFUDC equity as a percent of average common equity (average of common equity for the current period and the prior period)', 
    '113551:CIQ045251', 'Return on Common Equity Adj for AFUDC, Adjusted', 2, TO_DATE('08/08/2023 01:17:26', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/08/2023 01:17:26', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20112, 'Corporate.adjusted', 'REVTA', '$M', 'Revenue which has been adjusted from the companies reported revenue to ensure a globally consistent and comparable number. The adjustments also enable better alignment of the company''s reported figure with S&P''s view of underlying economic conditions. Moreover, they allow a more accurate portrayal of the company''s ongoing business.', 
    '113554:CIQ045221', 'Revenue, Adjusted', 2, TO_DATE('08/08/2023 01:17:26', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/08/2023 01:17:26', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20113, 'Corporate.adjusted', 'FFOCIC', 'x', 'Adjusted funds from operations (FFO) plus adjusted interest expense as a percent of capitalized interest plus cash interest paid', 
    '113685:CIQ046281', 'FFO Cash Interest Coverage, Adjusted', 2, TO_DATE('08/08/2023 01:17:26', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/08/2023 01:17:26', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20114, 'Corporate.adjusted', 'OCFA', '$M', 'Adjusted operating cash flow has been adjusted from the companies reported operating cash flow to ensure a globally consistent and comparable number. The adjustments also enable better alignment of the company''s reported figure with our view of underlying economic conditions. Moreover, they allow a more accurate portrayal of the company''s ongoing business.', 
    '113686:CIQ046751', 'Operating Cash Flow, Adjusted', 2, TO_DATE('08/08/2023 01:17:26', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/08/2023 01:17:26', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20115, 'Corporate.adjusted', 'OCFTD', '%', 'Cash flow from operations, adjusted as a percent of total debt, adjusted', 
    '113687:CIQ046752', 'Operating Cash Flow/ Debt, Adjusted', 2, TO_DATE('08/08/2023 01:17:26', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/08/2023 01:17:26', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20117, 'Corporate.adjusted', 'TDTUC', '%', 'Adjusted debt as a percent of adjusted debt and equity on an undepreciated basis, where accumulated depreciation from real estate is added back to equity', 
    '132488:AdjDebtEquityDep', 'Debt/Debt+Equity (undepreciated basis), Adjusted', 2, TO_DATE('08/08/2023 01:17:26', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/08/2023 01:17:26', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20118, 'Corporate.adjusted', 'RETDCAP', '%', 'Adjusted debt as a percent of the sum of adjusted debt and the fair value of the company''s equity', 
    '132489:AdjDebtAdjDebtEquity', 'Debt/Debt+Equity (fair value basis), Adjusted', 2, TO_DATE('08/08/2023 01:17:26', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/08/2023 01:17:26', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20119, 'Corporate.adjusted', 'RELTV', '%', 'Loan to value (LTV). Adjusted debt as a percent of the valuation of investments.', 
    '132490:AdjDebtInvestment', 'LTV, Adjusted', 2, TO_DATE('08/08/2023 01:17:26', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/08/2023 01:17:26', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20120, 'Corporate.adjusted', 'SHRREPUR', '$M', 'Total cash outflow from equity shares repurchased by the company', 
    '132491:ShareRepurchase', 'Share Repurchases', 2, TO_DATE('08/08/2023 01:17:26', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/08/2023 01:17:26', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20121, 'Insurance.all', 'Gross_Prem_AR_I', '$M', 'Total premiums, direct and assumed, written by the insurer before deductions for reinsurance and ceding commissions', 
    '115424:CIQ048344', 'Gross Premiums', 2, TO_DATE('08/08/2023 01:17:26', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/08/2023 01:17:26', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20122, 'Insurance.all', 'Net_Prem_AR_I', '$M', 'Total premiums, direct and assumed, written by an insurer after deductions for reinsurance and ceding commissions', 
    '115425:CIQ048345', 'Net Premiums', 2, TO_DATE('08/08/2023 01:17:26', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/08/2023 01:17:26', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20123, 'Insurance.all', 'Net_Inc_AttrAllShareHold_PefMin_I', '$M', 'Total earnings, or profit, adjusted for the costs of doing business such as depreciation, interest, taxes and other expenses', 
    '115426:CIQ048346', 'Net Income', 2, TO_DATE('08/08/2023 01:17:26', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/08/2023 01:17:26', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20124, 'Insurance.all', 'EBITDA_FixedChCov_I', '%', 'EBITDA as a percent of fixed charges. In this ratio, fixed charges refer to interest expenses and after tax charges on hybrids.', 
    '115427:CIQ048347', 'EBITDA Fixed-Charge Coverage', 2, TO_DATE('08/08/2023 01:17:26', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/08/2023 01:17:26', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20125, 'Insurance.all', 'FinLev_Incl_PensionDefAdj_I', '%', 'Total financial obligations as a percent of economic capital available', 
    '115428:CIQ048348', 'Financial Leverage', 2, TO_DATE('08/08/2023 01:17:26', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/08/2023 01:17:26', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20126, 'Insurance.all', 'ROE_I', '%', 'Net income after minorites as a percent of average shareholders'' equity', 
    '115429:CIQ048349', 'Return on Equity', 2, TO_DATE('08/08/2023 01:17:26', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/08/2023 01:17:26', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20127, 'Insurance.all', 'NetInvstYield_I', '%', 'Net investment income as a percent of average general account invested assets', 
    '115430:CIQ048350', 'Net Investment Yield', 2, TO_DATE('08/08/2023 01:17:26', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/08/2023 01:17:26', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20128, 'Insurance.all', 'NetCombinedRatio_PC_I', '%', 'The sum of net expense ratio, net loss ratio and the result of net bonuses, rebates and policy holder dividends as a percent of net premiums earned', 
    '115431:CIQ048351', 'Net Combined Ratio', 2, TO_DATE('08/08/2023 01:17:26', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/08/2023 01:17:26', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20129, 'Insurance.all', 'ReturnRev_I', '%', 'EBIT adjusted as a percent of total revenue', 
    '115432:CIQ048352', 'Return on Revenue', 2, TO_DATE('08/08/2023 01:17:26', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/08/2023 01:17:26', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20130, 'Insurance.all', 'ReturnAssets_Excl_InvestGL_I', '%', 'EBIT adjusted as a percent of average adjusted total assets', 
    '115433:CIQ048353', 'Return on Assets', 2, TO_DATE('08/08/2023 01:17:26', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/08/2023 01:17:26', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20131, 'Financial.all', 'Rev_F', '$M', 'Net interest income plus operating noninterest income', 
    '113717:CIQ044064', 'Operating Revenues', 2, TO_DATE('08/08/2023 01:17:26', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/08/2023 01:17:26', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20132, 'Financial.all', 'Non_Int_Exp_F', '$M', 'Operating expense aside from interest expense, including personnel expense, premises expense, depreciation and amortization, administrative costs, and other operating expenses', 
    '113720:CIQ044043', 'Noninterest Expense', 2, TO_DATE('08/08/2023 01:17:26', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/08/2023 01:17:26', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20133, 'Financial.all', 'Net_Inc_Af_Extr_F', '$M', 'Net income excluding minority interest but including extraordinary gains or losses', 
    '113731:CIQ044032', 'Net Income', 2, TO_DATE('08/08/2023 01:17:26', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/08/2023 01:17:26', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20134, 'Financial.all', 'Fee_Inc_Rev_F', '%', 'Fee income as a percent of operating revenue. Used to assess how much of the company''s revenue results from fees and commissions as opposed to lending, trading, or other revenues.', 
    '113740:CIQ043977', 'Fee Income/ Operating Revenue', 2, TO_DATE('08/08/2023 01:17:26', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/08/2023 01:17:26', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20135, 'Financial.all', 'Int_IncNet_Rev_F', '%', 'Net interest income as a percent of operating revenue. Used to assess how much of the company''s revenue results from traditional lending activities.', 
    '113751:CIQ043987', 'Net Interest Income/ Operating Revenue', 2, TO_DATE('08/08/2023 01:17:26', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/08/2023 01:17:26', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20116, 'Corporate.adjusted', 'REDFCCOV', '%', 'Adjusted EBITDA as a percent of adjusted interest expense and regularly scheduled debt principal amortization', 
    '132487:EBITDAIntExpDebtPrincipalAmort', 'Debt Fixed Charge Coverage, Adjusted', 2, TO_DATE('08/08/2023 01:17:26', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/08/2023 01:17:26', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20136, 'Financial.all', 'NwLnLos_Prov_CustLnAvg_F', '%', 'Credit loss provisions, net new, less provisions for loans to banks, as a percent of average customer loans. Indicates the company''s best estimate of future losses on their customer loan portfolio.', 
    '113784:CIQ044050', 'New Loan Loss Provisions/ Average Customer Loans', 2, TO_DATE('08/08/2023 01:17:26', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/08/2023 01:17:26', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20137, 'Financial.all', 'LnLos_Res_NonPer_Ass_F', '%', 'Loan loss reserves as a percent of nonperforming assets. Loan loss reserves build up through provisioning, which is an expense to companies. If this ratio is low it may mean that the company is not provisioning enough, which means they may need to incur larger provisioning expenses in the future.', 
    '113785:CIQ044012', 'Loan Loss Reserves/ Gross Nonperforming Assets', 2, TO_DATE('08/08/2023 01:17:26', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/08/2023 01:17:26', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20138, 'Financial.all', 'Chrgoff_Net_CustLnAvg_F', '%', 'Net charge-offs as a percent of average customer loans. Provides an indication of the percentage of customer debt that the company believes it will never collect.', 
    '113787:CIQ043942', 'Net Charge-Offs/ Average Customer Loans', 2, TO_DATE('08/08/2023 01:17:26', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/08/2023 01:17:26', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20139, 'Financial.all', 'Loans_Gross_F', '$M', 'Total customer loans on the company''s balance sheet, gross of loan loss reserves', 
    '113803:CIQ044019', 'Customer Loans (Gross)', 2, TO_DATE('08/08/2023 01:17:26', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/08/2023 01:17:26', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20140, 'Financial.all', 'Asset_Adj_F', '$M', 'Total assets less commitments and guarantees on the balance sheet, insurance statutory funds, and non-servicing intangibles and interest only strips', 
    '113817:CIQ043934', 'Adjusted Assets', 2, TO_DATE('08/08/2023 01:17:26', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/08/2023 01:17:26', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20141, 'Corporate.adjusted', 'EBITDACOV', 'x', 'Adjusted earnings before interest, taxes, depreciation and amortization (EBITDA) as a percent of adjusted interest expense', 
    '113257:CIQ045259', 'EBITDA Interest Coverage, Adjusted', 2, TO_DATE('08/08/2023 01:17:26', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/08/2023 01:17:26', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20142, 'Corporate.adjusted', 'EBITCOV', 'x', 'Adjusted earnings before interest and taxes as a percent of adjusted interest expense', 
    '113259:CIQ045258', 'EBIT Interest Coverage, Adjusted', 2, TO_DATE('08/08/2023 01:17:26', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/08/2023 01:17:26', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20143, 'Corporate.adjusted', 'EBITSALEA', '%', 'EBIT Margin', 
    '113261:CIQ045285', 'EBIT Margin, Adjusted', 2, TO_DATE('08/08/2023 01:17:26', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/08/2023 01:17:26', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20314, 'Reconciliation', 'REC_OPINCXOPRLIT', '$M', 'Settlement costs for litigation or insurance that S&P adjust EBIT for. This adjustment is rarely used, it is used in situations such as when there is a change in the measurement of a material litigation provision that leads to a very significant gain or loss in the year.', 
    '116033:CIQ048554', 'EBITDA - Settlement (Litigation/Insurance) Costs', 2, TO_DATE('08/09/2023 03:51:12', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:51:12', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20315, 'Reconciliation', 'REC_OPINCXOPRVAL', '$M', 'Fair value gains S&P remove from EBITDA, funds from operations and EBIT. For example fair value gains on investment properties for IFRS reporters.', 
    '116034:CIQ048555', 'EBITDA - Valuation Gains/(Losses)', 2, TO_DATE('08/09/2023 03:51:13', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:51:13', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20316, 'Reconciliation', 'REC_OPINCXBUSDIV', '$M', 'Gains on the sale of businesses reported as part of operating profit that S&P adjusts EBIT for as S&P views these as nonoperating items', 
    '116035:CIQ048556', 'EBITDA - Business Divestments', 2, TO_DATE('08/09/2023 03:51:13', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:51:13', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20317, 'Reconciliation', 'REC_OPINCXINVWO', '$M', 'Liquidation gains that S&P removes from EBIT for companies applying the LIFO method of inventory accounting', 
    '116036:CIQ048557', 'EBITDA - Inventory', 2, TO_DATE('08/09/2023 03:51:13', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:51:13', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20318, 'Reconciliation', 'REC_OPINCXIO', '$M', 'Principle based adjustments to the earnings before interest, taxes, depreciation, and amortization (EBITDA)', 
    '116037:CIQ048558', 'EBITDA, Other Income/(Expense) (Principle Based)', 2, TO_DATE('08/09/2023 03:51:14', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:51:14', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20319, 'Reconciliation', 'REC_OPINCXOPROA', '$M', 'Situational adjustments to earnings before interest, taxes, depreciation, and amortization (EBITDA)', 
    '116038:CIQ048559', 'EBITDA, Other (Situational)', 2, TO_DATE('08/09/2023 03:51:14', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:51:14', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20320, 'Reconciliation', 'REC_OPINCDPVAL', '$M', 'Asset valuation gains, as reported on the company''s income statement or in the notes to the company''s financials. Used to adjust for any valuation gain on investments, derivatives or debt.', 
    '116039:CIQ048560', 'D&A - Asset Valuation Gains/(Losses)', 2, TO_DATE('08/09/2023 03:51:14', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:51:14', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20321, 'Reconciliation', 'REC_OPINCDPIMPR', '$M', 'Large and nonrecurring impairment charges or reversals that S&P adjusts EBIT for', 
    '116040:CIQ048561', 'D&A - Impairment Charges/(Reversals)', 2, TO_DATE('08/09/2023 03:51:14', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:51:14', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20322, 'Reconciliation', 'REC_OPINCDPGAREV', '$M', 'Goodwill amortization, as reported on the company''s income statement or in the notes to the company''s financials. Goodwill amortization is allowed under some local country GAAP''s, such as UK GAAP, but S&P reverses this to make EBIT more comparable with IFRS and U.S. GAAP reporters where goodwill amortization is generally not permitted.', 
    '116041:CIQ048562', 'D&A - Reverse Goodwill Amortization', 2, TO_DATE('08/09/2023 03:51:15', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:51:15', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20323, 'Reconciliation', 'REC_OPINCDPXO', '$M', 'Other charges or reversals included within depreciation and amortization (D&A) that S&P adjust for', 
    '116042:CIQ048563', 'D&A - Other', 2, TO_DATE('08/09/2023 03:51:15', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:51:15', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20324, 'Reconciliation', 'REC_OPINCNOPIIDIT', '$M', 'Principle based adjustments (including finance  or interest income) to the earnings before interest and taxes (EBIT)', 
    '116043:CIQ048564', 'EBIT, Finance/Interest Income & Othr (Princ Based)', 2, TO_DATE('08/09/2023 03:51:15', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:51:15', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20325, 'Reconciliation', 'REC_OPINCNOPIOA', '$M', 'Situational adjustments to earnings before interest and taxes (EBIT)', 
    '116045:CIQ048566', 'EBIT, Other (Situational)', 2, TO_DATE('08/09/2023 03:51:16', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:51:16', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20326, 'Reconciliation', 'REC_OPINCADJTOT', '$M', 'Sum of all S&P adjustments to EBIT such as derivatives, settlement loss, gain or loss on disposal of assets, asset valuation gains or losses, non operating income or expense, impairment', 
    '116046:CIQ048567', 'Total Adjustments', 2, TO_DATE('08/09/2023 03:51:16', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:51:16', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20327, 'Reconciliation', 'REC_EBITA', '$M', 'EBIT which has been adjusted from the companies reported EBIT to ensure a globally consistent and comparable number. The adjustments also enable better alignment of the company''s reported figure with S&P''s view of underlying economic conditions. Moreover, they allow a more accurate portrayal of the company''s ongoing business.', 
    '116047:CIQ048568', 'EBIT, Adjusted', 2, TO_DATE('08/09/2023 03:51:16', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:51:16', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20328, 'Reconciliation', 'REC_INTEXPREP', '$M', 'Interest expense which includes only the gross interest expense on borrowings, overdrafts, finance leases, bank fees, and amortization of capitalized issuance costs. Where derivatives such as interest rate swaps are used to hedge interest, we seek to include within interest the realized effect of the derivative on the interest cost for the year (often this will be automatically included with the interest expense). Meanwhile, we seek to exclude any unrealized fair value movements on such derivatives as these do not relate to the interest cost for the year but relate to the future periods that the derivative is hedging.', 
    '116048:CIQ048569', 'Interest Expense, Pre-Adjusted', 2, TO_DATE('08/09/2023 03:51:16', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:51:16', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20329, 'Reconciliation', 'REC_INTEXPOPLEASE', '$M', 'Operating leases, as reported under the contractual payments and operating lease notes to the company''s financials. An operating lease is a contract that allows for the use of an asset but does not convey rights of ownership of the asset. Represents an off-balance sheet financing of assets, where a leased asset and associated liabilities of future rent payments are not included on the balance sheet of a company.', 
    '116050:CIQ048571', 'Operating Leases', 2, TO_DATE('08/09/2023 03:51:17', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:51:17', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20330, 'Reconciliation', 'REC_INTEXPHYBDBT', '$M', 'Hybrids, as reported in the equity statement or notes to the company''s financials. Used to add to interest expense the portion of dividends since the company treats it as equity but S&P views it as part of debt based on its features.', 
    '116051:CIQ048572', 'Debt-Like Hybrids', 2, TO_DATE('08/09/2023 03:51:17', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:51:17', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20331, 'Reconciliation', 'REC_INTEXPHYBEQU', '$M', 'Hybrids, as reported in the debt note of the company''s financials. Used to adjust interest expense to be treated as dividends since the company treats the instrument as debt and S&P views it as part of equity based on its features.', 
    '116052:CIQ048573', 'Equity-Like Hybrids', 2, TO_DATE('08/09/2023 03:51:17', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:51:17', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20332, 'Reconciliation', 'REC_INTEXPHYBDBTI', '$M', 'Hybrids, as reported in the debt notes to the company''s financials. Used to adjust 50% of the interest expense on the intermediate hybrid to be reclassified to dividends since the company treats it as debt and S&P views it, based on the terms and conditions of the instrument, as intermediate-equity.', 
    '116053:CIQ048574', 'Intermediate Hybrids Reported As Debt', 2, TO_DATE('08/09/2023 03:51:18', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:51:18', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20333, 'Reconciliation', 'REC_INTEXPHYBEQUI', '$M', 'Hybrids, as reported in the notes to the company''s financials. Used to adjust 50% of the dividends on the intermediate hybrid to be reclassified to interest expense as the company treats it as debt but S&P views it, based on the terms and conditions of the instrument, as intermediate-equity.', 
    '116054:CIQ048575', 'Intermediate Hybrids Reported As Equity', 2, TO_DATE('08/09/2023 03:51:18', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:51:18', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20334, 'Reconciliation', 'REC_INTEXPPBODC', '$M', 'Post-retirement benefit obligations or deferred compensation that S&P adjust interest expense for', 
    '116055:CIQ048576', 'Postretirement Benefit Oblg/ Deferred Compensation', 2, TO_DATE('08/09/2023 03:51:18', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:51:18', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20335, 'Reconciliation', 'REC_INTEXPCAPINT', '$M', 'Capitalized interest, as reported on the company''s income statement or in the finance expense notes to the company''s financials. Capitalized interest is the cost of borrowing to acquire or construct a long-term asset. Unlike an interest expense incurred for any other purpose, capitalized interest must not be expensed on the income statement and instead firms capitalize it, meaning such interest increases the cost basis of a long-term asset on a balance sheet. Capitalized interest shows up on a company''s income statement through a periodic depreciation expense recorded on the associated long-term asset throughout its useful life.', 
    '116056:CIQ048577', 'Capitalized Interest', 2, TO_DATE('08/09/2023 03:51:19', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:51:19', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20336, 'Reconciliation', 'REC_INTEXPCAPFIN', '$M', 'Interest expense of the captive finance entity that S&P adjusts the consolidated company''s interest expense for', 
    '116057:CIQ048578', 'Captive Finance Operations', 2, TO_DATE('08/09/2023 03:51:19', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:51:19', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20337, 'Reconciliation', 'REC_INTEXPCD', '$M', 'Interest expense of the entity that S&P consolidates with or deconsolidates from the parent company''s interest expense in the calculation of adjusted interest expense', 
    '116058:CIQ048579', 'Deconsolidation/ Consolidation', 2, TO_DATE('08/09/2023 03:51:19', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:51:19', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20338, 'Reconciliation', 'REC_INTEXPSECCOST', '$M', 'Interest expense related to the securitized debt to meet stranded costs as the customers not the utility are responsible for it. The adjustment is specific to the utilities sector.', 
    '116060:CIQ048581', 'Securitized Stranded Costs', 2, TO_DATE('08/09/2023 03:51:19', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:51:19', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20339, 'Reconciliation', 'REC_INTEXPPPA', '$M', 'Power purchase agreements, as reported in the notes to the company''s financials. Used for regulated utilities to add back to interest expense the interest on the Power Purchase Agreement (PPA) treated as debt. A PPA is a contract between two parties, one which generates electricity, the seller, and one which is looking to purchase electricity, the buyer.', 
    '116061:CIQ048582', 'Power Purchase Agreements', 2, TO_DATE('08/09/2023 03:51:20', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:51:20', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20340, 'Reconciliation', 'REC_INTEXPARO', '$M', 'Asset retirement obligations that S&P adjust interest expense for. An asset retirement obligation (ARO) is a legal obligation associated with the retirement of a tangible long-lived asset in which the timing or method of settlement may be conditional on a future event, the occurrence of which may not be within the control of the entity burdened by the obligation.', 
    '116062:CIQ048583', 'Asset Retirement Obligations', 2, TO_DATE('08/09/2023 03:51:20', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:51:20', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20341, 'Reconciliation', 'REC_INTEXPXINTDER', '$M', 'Unrealized gains on derivatives included within interest expense', 
    '116063:CIQ048584', 'Interest Expense - Derivatives', 2, TO_DATE('08/09/2023 03:51:20', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:51:20', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20342, 'Reconciliation', 'REC_INTEXPXINTSLN', '$M', 'Shareholder loan interest included within interest expense if S&P does not treat the shareholder loan as debt', 
    '116064:CIQ048585', 'Interest Expense - Shareholder Loan', 2, TO_DATE('08/09/2023 03:51:21', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:51:21', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20343, 'Reconciliation', 'REC_INTEXPXINTAC', '$M', 'Principle based adjustments (including amortized cost) to the interest expense', 
    '116065:CIQ048586', 'Interest Exp, Amortized Cost & Other (Princ based)', 2, TO_DATE('08/09/2023 03:51:21', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:51:21', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20344, 'Reconciliation', 'REC_INTEXPXINTST', '$M', 'Nonrecurring streaming transactions included in interest expense that S&P adjust interest expense for. A streaming transaction is an agreement whereby a financing party agrees to purchase future deliveries of minerals from an identified property in exchange for a significant up front advance payment which is applied against future deliveries, typically together with additional ongoing fixed payments as the minerals are delivered.', 
    '116066:CIQ048587', 'Interest - Streaming Transactions', 2, TO_DATE('08/09/2023 03:51:21', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:51:21', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20345, 'Reconciliation', 'REC_INTEXPINTOA', '$M', 'Situational adjustments to interest expense', 
    '116067:CIQ048588', 'Interest Expense, Other (Situational)', 2, TO_DATE('08/09/2023 03:51:21', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:51:21', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20346, 'Reconciliation', 'REC_INTEXPADJTOT', '$M', 'Sum of all S&P adjustments to interest such as interest on derivatives, capitalized interest, amortized cost that are used to calculate adjusted interest', 
    '116068:CIQ048589', 'Total Adjustments', 2, TO_DATE('08/09/2023 03:51:22', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:51:22', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20347, 'Reconciliation', 'REC_XINTA', '$M', 'Interest expense which has been adjusted from the companies reported interest expense to ensure a globally consistent and comparable number. The adjustments also enable better alignment of the company''s reported figure with S&P''s view of underlying economic conditions. Moreover, they allow a more accurate portrayal of the company''s ongoing business. S&P Global Ratings adjusts interest expense for items including capitalized interest, interest from receivables sold, captive finance interest, pension and other postretirement interest expense.', 
    '116069:CIQ048590', 'Interest Expense, Adjusted', 2, TO_DATE('08/09/2023 03:51:22', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:51:22', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20348, 'Reconciliation', 'REC_FFOREP', '$M', 'Earnings before interest, taxes, depreciation and amortization (EBITDA) calculated as reported revenue less operating expenses, plus depreciation and amortization', 
    '116070:CIQ048591', 'EBITDA, Adjusted', 2, TO_DATE('08/09/2023 03:51:22', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:51:22', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20349, 'Reconciliation', 'REC_FFOOPLEASE', '$M', 'Operating leases, as reported under the contractual payments and operating lease notes to the company''s financials. An operating lease is a contract that allows for the use of an asset but does not convey rights of ownership of the asset. Represents an off-balance sheet financing of assets, where a leased asset and associated liabilities of future rent payments are not included on the balance sheet of a company.', 
    '116075:CIQ048596', 'Operating Leases', 2, TO_DATE('08/09/2023 03:51:23', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:51:23', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20350, 'Reconciliation', 'REC_FFOHYBDBT', '$M', 'Hybrids, as reported in the equity statement or notes to the company''s financials. Used to add to funds from operations (FFO) the portion of dividends to be treated as interest expense as the company treats the instrument as equity and S&P views it as part of debt based on its features.', 
    '116076:CIQ048597', 'Debt-Like Hybrids', 2, TO_DATE('08/09/2023 03:51:23', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:51:23', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20351, 'Reconciliation', 'REC_FFOHYBEQU', '$M', 'Hybrids, as reported in the debt note of the company''s financials. Used to adjust funds from operations (FFO) with the interest expense to be treated as dividends as the company treats the instrument as debt and S&P views it as part of equity based on its features.', 
    '116077:CIQ048598', 'Equity-Like Hybrids', 2, TO_DATE('08/09/2023 03:51:23', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:51:23', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20165, 'Reconciliation', 'REC_FFOINTPN', '$M', 'Cash flow adjusted for capitalized interest, coupon payments on debt-like hybrid instruments, and any imputed lease-related cash interest for companies where lease payments are characterized as operating expenses', 
    '132476:CashInterestPaid', 'ash Interest Paid', 6, TO_DATE('08/09/2023 03:50:28', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:50:28', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20166, 'Reconciliation', 'REC_FFOCIPOTH', '$M', 'Sector specific or situational adjustments to cash interest paid', 
    '132477:CashInterestPaidOther', 'Cash Interest Paid Other', 6, TO_DATE('08/09/2023 03:50:29', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:50:29', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20167, 'Reconciliation', 'REC_FFOTXPD', '$M', 'Income taxes paid on taxable profit, or income tax refunded from tax losses', 
    '132474:CashTaxesPaidEarning', 'Cash Taxes Paid', 6, TO_DATE('08/09/2023 03:50:29', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:50:29', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20168, 'Reconciliation', 'REC_FFOCTPOTH', '$M', 'Sector specific or situational adjustments to cash taxes paid', 
    '132475:CashTaxesPaidOtherEarning', 'Cash Taxes Paid Other', 6, TO_DATE('08/09/2023 03:50:29', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:50:29', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20169, 'Reconciliation', 'REC_DEBTREP', '$M', 'Debt, as reported on the company''s balance sheet, includes both short term and long-term debt', 
    '115879:CIQ048400', 'Debt, Pre-Adjusted', 2, TO_DATE('08/09/2023 03:50:30', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:50:30', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20170, 'Reconciliation', 'REC_DEBTTRECSLD', '$M', 'Trade receivables securitizations that S&P adjusts debt for. This is mostly seen in the form of securitizations or factoring.', 
    '115880:CIQ048401', 'Trade Receivables Securitizations', 2, TO_DATE('08/09/2023 03:50:30', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:50:30', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20171, 'Reconciliation', 'REC_DEBTOPLEASE', '$M', 'Operating leases that S&P adjust debt for', 
    '115881:CIQ048402', 'Operating Leases', 2, TO_DATE('08/09/2023 03:50:30', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:50:30', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20172, 'Reconciliation', 'REC_DEBTHYBDBT', '$M', 'Hybrids the company treats as equity but S&P views as part of debt. S&P adds this value to reported debt in the calculation of adjusted debt.', 
    '115882:CIQ048403', 'Debt-Like Hybrids', 2, TO_DATE('08/09/2023 03:50:31', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:50:31', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20173, 'Reconciliation', 'REC_DEBTHYBEQU', '$M', 'Hybrids the company treats as debt but S&P views as part of equity. S&P adds this value to reported equity in the calculation of adjusted equity.', 
    '115883:CIQ048404', 'Equity-Like Hybrids', 2, TO_DATE('08/09/2023 03:50:31', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:50:31', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20174, 'Reconciliation', 'REC_DEBTHYBDBTI', '$M', '50% of the value of hybrids the company treats as debt but S&P views as intermediate equity. S&P adds 50% of the instrument value to reported equity in the calculation of adjusted equity.', 
    '115884:CIQ048405', 'Intermediate Hybrids Reported As Debt', 2, TO_DATE('08/09/2023 03:50:31', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:50:31', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20175, 'Reconciliation', 'REC_DEBTHYBEQUI', '$M', '50% of the value of hybrids the company treats as equity but S&P views as intermediate debt. S&P adds 50% of the instrument value to reported debt in the calculation of adjusted debt.', 
    '115885:CIQ048406', 'Intermediate Hybrids Reported As Equity', 2, TO_DATE('08/09/2023 03:50:31', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:50:31', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20176, 'Reconciliation', 'REC_DEBTPBODC', '$M', 'Post-retirement benefit obligations or deferred compensation, as reported in the pension and post-retirement benefits notes to the company''s financials. This is the tax adjusted net pension and post-retirement deficit. The tax impact, calculated using tax rate, is subtracted from the reported deficit number.', 
    '115886:CIQ048407', 'Postretirement Benefit Oblg/ Deferred Compensation', 2, TO_DATE('08/09/2023 03:50:32', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:50:32', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20413, 'Reconciliation', 'REC_CAPEXADJTOT', '$M', 'Sum of all S&P adjustments to capital expenditures such as capitalized interest, capitalized development costs, power purchase agreements that are used to calculated adjusted capital expenditures', 
    '116186:CIQ048707', 'Total Adjustments', 2, TO_DATE('08/09/2023 03:51:41', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:51:41', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20414, 'Reconciliation', 'REC_CAPXA', '$M', 'Capital expenditures which have been adjusted from the companies reported capital expenditures to ensure a globally consistent and comparable number. The adjustments also enable better alignment of the company''s reported figure with S&P''s view of underlying economic conditions. Moreover, they allow a more accurate portrayal of the company''s ongoing business.', 
    '116187:CIQ048708', 'Capital Expenditures, Adjusted', 2, TO_DATE('08/09/2023 03:51:41', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:51:41', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20415, 'Reconciliation', 'REC_EBITDAXESUB', '$M', 'Adjustments to EBITDA if the share of profits or losses from unconsolidated companies such as associates or joint ventures are reported above operating profit as our definition of EBITDA excludes the share of profits or losses from unconsolidated companies. This is as reported on the company''s income statement or in the notes to the company''s financials.', 
    '132486:IncomeUnconsolidatedCompany', 'Income of Unconsolidated Company', 6, TO_DATE('08/09/2023 03:51:42', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:51:42', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20416, 'Reconciliation', 'REC_CFOILL', '$M', 'Adjustments to cash flow from operations (CFO) to increase for lease expense and decrease for interest associated with incremental lease liabilities', 
    '132484:IncrementalLeaseCashFlowOper', 'CFO from Incremental Leases', 6, TO_DATE('08/09/2023 03:51:42', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:51:42', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20417, 'Reconciliation', 'REC_EBITDAILL', '$M', 'Adjustments to EBITDA for lease expenses associated with incremental lease liabilities', 
    '132480:IncrementalLeaseEarning', 'Incremental Lease Expense', 6, TO_DATE('08/09/2023 03:51:42', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:51:42', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20418, 'Reconciliation', 'REC_INTEXPILL', '$M', 'Adjustment to interest expense to include the interest associated with incremental lease liabilities', 
    '132482:IncrementalLeaseInterestExp', 'Incremental Lease Interest Expense', 6, TO_DATE('08/09/2023 03:51:43', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:51:43', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20419, 'Reconciliation', 'REC_DEBTILL', '$M', 'Adjustments to operating income for the interest associated with incremental lease liabilities in deriving adjusted EBIT', 
    '132481:IncrementalLeaseOpIncome', 'Incremental Lease Operating Income', 6, TO_DATE('08/09/2023 03:51:43', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:51:43', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20420, 'Reconciliation', 'REC_OPINCILL', '$M', 'Adjustments to adjusted EBITDA for the interest associated with incremental lease liabilities to derive funds from operations', 
    '132483:IncremLeaseFundOperation', 'FFO From Incremental Leases', 6, TO_DATE('08/09/2023 03:51:43', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:51:43', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20421, 'Reconciliation', 'REC_FFOILL', '$M', 'The lease adjustment added to our measure of debt when we believe the reported lease disclosure does not adequately capture the total liability related to the company''s leased assets', 
    '132479:LeaseLiabAdjToDebt', 'Incremental Lease Liabilities', 6, TO_DATE('08/09/2023 03:51:44', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:51:44', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20422, 'Reconciliation', 'REC_DEBTMULTPP', '$M', 'The adjustment to debt for the liability associated with a funding deficit on multi-employer pension plans.', 
    '132485:MultiEmployerPensionPlanDebt', 'Multi Employer Pension Plan Debt', 6, TO_DATE('08/09/2023 03:51:44', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:51:44', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20423, 'Reconciliation', 'REC_DEBTLLOFT', '$M', 'Reported operating and finance lease obligations for companies that capitalize all leases on their balance sheet, such as U.S. GAAP and IFRS filers, as well as reported finance leases for companies that do not capitalize operating lease obligations', 
    '132478:ReportedLeaseLiabilitiesDebt', 'Reported Lease Liabilities', 6, TO_DATE('08/09/2023 03:51:44', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:51:44', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20163, 'Corporate.adjusted', 'FFOTD', '%', 'Funds from operations as a percent of total debt', 
    '113273:CIQ045103', 'FFO/ Debt, Adjusted', 2, TO_DATE('08/08/2023 01:17:26', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/08/2023 01:17:26', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20164, 'Corporate.adjusted', 'DCFTD', '%', 'Discretionary Cash Flow/ Debt', 
    '113245:CIQ045311', 'Discretionary Cash Flow/Debt, Adjusted', 2, TO_DATE('08/08/2023 01:17:26', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/08/2023 01:17:26', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20144, 'Financial.all', 'Cap_Tier1_Rto_F', '%', 'The tier 1 capital ratio reflects the regulators'' view of the company''s capital to its risk-weighted assets (RWAs). A higher ratio indicates greater ability for the company to absorb future losses. Calculated as tier 1 capital as a percent of regulatory RWAs.', 
    '113837:CIQ043938', 'Tier 1 Capital Ratio', 2, TO_DATE('08/08/2023 01:17:26', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/08/2023 01:17:26', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20145, 'Financial.all', 'Comm_Eq_Adj_F', '$M', 'Intermediate adjusted common equity less deferred tax assets arising from temporary differences not convertible into cash or government bonds exceeding 10% of intermediate adjusted common equity', 
    '113843:CIQ043946', 'Adjusted Common Equity', 2, TO_DATE('08/08/2023 01:17:26', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/08/2023 01:17:26', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20146, 'Financial.all', 'RAC_BfDivrs_F', '%', 'The S&P risk-adjusted capital (RAC) ratio before diversification is a globally consistent comparison of the company''s capital to its risk-weighted assets (RWAs) before diversification. A higher ratio indicates greater ability for the company to absorb future losses. Calculated as total adjusted capital as a percent of S&P total risk-weighted assets (RWAs) before diversification.??', 
    '113864:CIQ045330', 'S&P RAC Ratio Before Diversification', 2, TO_DATE('08/08/2023 01:17:26', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/08/2023 01:17:26', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20147, 'Financial.all', 'NPA_CustLn_GR_F', '%', 'Gross nonperforming assets as a percent of gross customer loans plus other real estate owned. Used to assess the overall quality of the company''s customer loan portfolio, with a lower ratio indicating higher quality.', 
    '113869:CIQ045333', 'Gross NPAs/ Cust Loans + OREO', 2, TO_DATE('08/08/2023 01:17:26', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/08/2023 01:17:26', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20148, 'Financial.all', 'Loan_To_Dep_F', '%', 'Customer loans, net as a percent of customer deposits. Loan to deposit ratios are used to assess a company''s liquidity. A higher ratio indicates low liquidity, while a lower ratio indicates that the company may not be earning as much interest as it could.', 
    '113871:CIQ045335', 'Customer Loans (Net)/ Customer Deposits', 2, TO_DATE('08/08/2023 01:17:26', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/08/2023 01:17:26', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20149, 'Financial.all', 'ACE_TAC_F', '%', 'Adjusted common equity as a percent of total adjusted capital. The closer this ratio is to 100%, the less the company''s capital position relies on preferred stock and other hybrid issuance.', 
    '113873:CIQ045339', 'Adjusted Common Equity/ Total Adjusted Capital', 2, TO_DATE('08/08/2023 01:17:26', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/08/2023 01:17:26', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20150, 'Financial.all', 'BrdLiqAss_ST_WhSalFund_F', 'x', 'Broad liquid assets as a multiple of short term wholesale funding for banks, finance companies, and business development companies, and as broad liquid assets as a multiple of balance sheet liquidity needs for brokers. The higher the ratio, the more short term assets the company has to cover short term obligations.', 
    '113922:CIQ045567', 'Liquidity Coverage Metric', 2, TO_DATE('08/08/2023 01:17:26', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/08/2023 01:17:26', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20151, 'Financial.all', 'Return_Equity_Rto_F', '%', 'Return on average common equity measures a company''s profitability by revealing how much profit a company generates with the money shareholders have invested. Calculated as net income after extraordinary items net of preferred dividends, as a percent of average common equity.????', 
    '113930:CIQ045882', 'Return On Average Common Equity', 2, TO_DATE('08/08/2023 01:17:26', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/08/2023 01:17:26', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20152, 'Financial.all', 'Stbl_Fund_Rtio_F', '%', 'Available stable funding as a percent of stable funding needs. This ratio is specific to the bank, finance company, and business development company sectors.', 
    '113935:CIQ046050', 'Stable Funding Ratio', 2, TO_DATE('08/08/2023 01:17:26', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/08/2023 01:17:26', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20153, 'Financial.all', 'Gross_Stbl_Fund_Rtio_F', '%', 'Provides a holistic view of a company''s funding profile, with a higher ratio indicating a stronger funding position. This ratio is specific to the broker sector, calculated as available stable funding as a percent of stable funding needs.', 
    '122341:GrossStableFundingRatio', 'Gross Stable Funding Ratio', 2, TO_DATE('08/08/2023 01:17:26', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/08/2023 01:17:26', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20154, 'Corporate.pre-adjusted', 'CAPX', '$M', 'Capital expenditures as reported on the company''s cash flow statement. This captures fixed asset purchases (both tangible and intangible). It includes normal expenditures on intangibles (i.e. purchased other than in the process of acquisition) so that free operating cash flow (FOCF) is comparable across all industries. This value is critical for analysis as it comprises the capex figure that affects FOCF.', 
    '113188:CIQ045056', 'Capital Expenditures, Pre-Adjusted', 2, TO_DATE('08/08/2023 01:17:26', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/08/2023 01:17:26', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20155, 'Corporate.pre-adjusted', 'CHE', '$M', 'The total of cash, cash equivalents and short  term investments reported on the company''s balance sheet. Includes cash, cash in hand, cash at bank, cash and cash equivalents, bank balances, short-term deposits, deposits. Any adjustments for surplus cash credit or restricted cash are handled through separate adjustments. Restricted cash is included here under IFRS.', 
    '113196:CIQ044864', 'Cash & Short-Term Investments, Pre-Adjusted', 2, TO_DATE('08/08/2023 01:17:26', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/08/2023 01:17:26', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20156, 'Corporate.pre-adjusted', 'OANCF.VLP', '$M', 'Cash flow from operating activities as reported on the company''s cash flow statement', 
    '113204:CIQ045075', 'Cash Flow from Operations, Pre-Adjusted', 2, TO_DATE('08/08/2023 01:17:26', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/08/2023 01:17:26', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20157, 'Corporate.pre-adjusted', 'CEQ', '$M', 'Common or ordinary shareholders equity as reported on the balance sheet', 
    '113219:CIQ044938', 'Common Equity, Pre-Adjusted', 2, TO_DATE('08/08/2023 01:17:26', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/08/2023 01:17:26', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20158, 'Corporate.pre-adjusted', 'TDREP', '$M', 'Debt, as reported on the company''s balance sheet, includes both short term and long-term debt', 
    '113231:CIQ044894', 'Debt, Pre-Adjusted', 2, TO_DATE('08/08/2023 01:17:26', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/08/2023 01:17:26', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20159, 'Corporate.pre-adjusted', 'TDTCREP', '%', 'Total debt as reported on the balance sheet, short term debt plus long term debt, as a percent of the sum of total debt as reported, preferred stock as reported, common equity as reported and minority interests as reported on the balance sheet', 
    '113234:CIQ045268', 'Debt/ Debt and Equity, Pre-Adjusted', 2, TO_DATE('08/08/2023 01:17:26', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/08/2023 01:17:26', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20160, 'Corporate.pre-adjusted', 'TDEREP', 'x', 'Reported total debt as a percent of reported earnings before interest, taxes, depreciation and amortization', 
    '113235:CIQ045266', 'Debt/ EBITDA, Pre-Adjusted', 2, TO_DATE('08/08/2023 01:17:26', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/08/2023 01:17:26', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20161, 'Corporate.pre-adjusted', 'TDRAVREP', '%', 'Reported total debt as a percent of regulatory asset value', 
    '113236:CIQ045270', 'Debt/ Regulatory Asset Value, Pre-Adjusted', 2, TO_DATE('08/08/2023 01:17:26', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/08/2023 01:17:26', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20162, 'Corporate.pre-adjusted', 'DCFTDREP', '%', 'Discretionary Cash Flow/ Debt Pre-Adjusted (Rprtd)', 
    '113246:CIQ045312', 'Discretionary Cash Flow/ Debt, Pre-Adjusted', 2, TO_DATE('08/08/2023 01:17:26', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/08/2023 01:17:26', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20071, 'Corporate.pre-adjusted', 'EBITREP', '$M', 'Earnings before interest and taxes. A traditional view of profit that factors in capital intensity. However, it also includes interest income, the company???s share of equity earnings of associates and joint ventures, other recurring and nonoperating items.', 
    '113252:CIQ045129', 'EBIT, Pre-Adjusted', 2, TO_DATE('08/08/2023 01:17:26', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/08/2023 01:17:26', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20072, 'Corporate.pre-adjusted', 'EBITDAA', '$M', 'Adjusted earnings before interest, taxes, depreciation and amortization (EBITDA) has been adjusted from the companies reported EBITDA, to ensure a globally consistent and comparable number. The adjustments also enable better alignment of the company''s reported figure with our view of underlying economic conditions. Moreover, they allow a more accurate portrayal of the company''s ongoing business.', 
    '113253:CIQ045223', 'EBITDA, Pre-Adjusted', 2, TO_DATE('08/08/2023 01:17:26', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/08/2023 01:17:26', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20073, 'Corporate.pre-adjusted', 'EBITDACOVREP', 'x', 'Reported earnings before interest, taxes, depreciation and amortization as a percent of the sum of interest expense plus capitalized interest or allowance for funds used during construction (AFDUC) debt plus capitalized interest not in capex', 
    '113258:CIQ045253', 'EBITDA Interest Coverage, Pre-Adjusted', 2, TO_DATE('08/08/2023 01:17:26', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/08/2023 01:17:26', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20074, 'Corporate.pre-adjusted', 'EBITCOVREP', 'x', 'Reported earnings before interest and taxes as a percent of the sum of interest expense plus capitalized interest or allowance for funds used during construction (AFDUC) debt plus capitalized interest not in capex', 
    '113260:CIQ045250', 'EBIT Interest Coverage, Pre-Adjusted', 2, TO_DATE('08/08/2023 01:17:26', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/08/2023 01:17:26', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20075, 'Corporate.pre-adjusted', 'EBITSALEREP', '%', 'EBIT Margin Pre-Adjusted', 
    '113262:CIQ045286', 'EBIT Margin, Pre-Adjusted', 2, TO_DATE('08/08/2023 01:17:26', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/08/2023 01:17:26', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20076, 'Corporate.pre-adjusted', 'FOCFREP', '$M', 'Reported cash flow from operating activities less reported capital expenditures', 
    '113280:CIQ045081', 'Free Operating Cash Flow, Pre-Adjusted', 2, TO_DATE('08/08/2023 01:17:26', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/08/2023 01:17:26', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20077, 'Corporate.pre-adjusted', 'FOCFTDREP', '%', 'Free operating cash flow, reported as a percent of reported total debt', 
    '113282:CIQ045265', 'Free Operating Cash Flow/ Debt, Pre-Adjusted', 2, TO_DATE('08/08/2023 01:17:26', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/08/2023 01:17:26', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20078, 'Corporate.pre-adjusted', 'IB', '$M', 'Company''s net income from continuing operations, as reported on income statement', 
    '113293:CIQ045144', 'Net Income from Cont Operations, Pre-Adjusted', 2, TO_DATE('08/08/2023 01:17:26', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/08/2023 01:17:26', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20079, 'Corporate.pre-adjusted', 'OPMARGREP', '%', 'Reported operating income as a percent of reported revenues', 
    '113395:CIQ045241', 'EBITDA Margin, Pre-Adjusted', 2, TO_DATE('08/08/2023 01:17:26', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/08/2023 01:17:26', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20080, 'Corporate.pre-adjusted', 'OPINCADAREP', '$M', 'Preadjusted operating income (after depreciation & amortization)', 
    '113398:CIQ045118', 'Operating Income (After D&A), Pre-Adjusted', 2, TO_DATE('08/08/2023 01:17:26', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/08/2023 01:17:26', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20081, 'Corporate.pre-adjusted', 'PSTK', '$M', 'Preferred stock as reported on the company''s balance sheet. Also reported as preferred shares.', 
    '113511:CIQ044933', 'Preferred Stock, Pre-Adjusted', 2, TO_DATE('08/08/2023 01:17:26', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/08/2023 01:17:26', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20082, 'Corporate.pre-adjusted', 'ROCREP', '%', 'Reported earnings before interest and taxes (EBIT) as a percent of average capital for the period (average of capital for the current period and the prior period). Capital calculated as deferred taxes plus minority interest plus preferred stock plus common equity plus short term debt plus long term debt).', 
    '113549:CIQ045249', 'Return on Capital, Pre-Adjusted', 2, TO_DATE('08/08/2023 01:17:26', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/08/2023 01:17:26', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20083, 'Corporate.pre-adjusted', 'ROCEDVP', '%', 'Income before extraordinary items less preferred dividends as a percent of average common equity (average of common equity for the current period and the prior corresponding period)', 
    '113550:CIQ045252', 'Return on Common Equity, Pre-Adjusted', 2, TO_DATE('08/08/2023 01:17:26', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/08/2023 01:17:26', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20084, 'Corporate.pre-adjusted', 'REVTREP', '$M', 'Revenues reported on the company''s income statement. Includes sales plus other operating revenues.', 
    '113555:CIQ045106', 'Revenues, Pre-Adjusted', 2, TO_DATE('08/08/2023 01:17:26', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/08/2023 01:17:26', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20085, 'Corporate.pre-adjusted', 'DCFREP', '$M', 'Discretionary Cash Flow, Pre-Adjusted', 
    '113607:CIQ045584', 'Discretionary Cash Flow, Pre-Adjusted', 2, TO_DATE('08/08/2023 01:17:26', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/08/2023 01:17:26', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20086, 'Corporate.pre-adjusted', 'OCFTDREP', '%', 'Reported cash flow from operations as a percent of reported total debt', 
    '113688:CIQ046753', 'Operating Cash Flow/ Debt, Pre-Adjusted', 2, TO_DATE('08/08/2023 01:17:26', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/08/2023 01:17:26', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20087, 'Corporate.pre-adjusted', 'SHRREPUR', '$M', 'Total cash outflow from equity shares repurchased by the company', 
    '132491:ShareRepurchase', 'Share Repurchases', 2, TO_DATE('08/08/2023 01:17:26', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/08/2023 01:17:26', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20088, 'Corporate.pre-adjusted', 'REDFCCOVREP', '%', 'EBITDA as a percent of the sum of reported interest expense and regularly scheduled debt principal amortization and preferred dividends', 
    '132492:DebtFixedChargeCoverage', 'Debt Fixed Charge Coverage, Pre-Adjusted', 2, TO_DATE('08/08/2023 01:17:26', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/08/2023 01:17:26', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20089, 'Corporate.pre-adjusted', 'TDTUCREP', '%', 'Reported debt as a percent of the sum of reported debt and equity on an undepreciated basis, where accumulated depreciation from real estate is added back to equity', 
    '132493:DebtEquityUndepreciatedBasis', 'Debt/Debt+Equity (undepreciated basis), Pre-Adjusted', 2, TO_DATE('08/08/2023 01:17:26', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/08/2023 01:17:26', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20090, 'Corporate.pre-adjusted', 'RETDCAPREP', '%', 'Reported debt as a percent of reported debt and the fair value of the company''s equity', 
    '132494:DebtEquityFairValueBasis', 'Debt/Debt+Equity (fair value basis), Pre-Adjusted', 2, TO_DATE('08/08/2023 01:17:26', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/08/2023 01:17:26', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20091, 'Corporate.pre-adjusted', 'RELTVREP', '%', 'Reported debt as a percent of the valuation of investments', 
    '132495:DebtInvestment', 'LTV, Pre-Adjusted', 2, TO_DATE('08/08/2023 01:17:26', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/08/2023 01:17:26', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20092, 'Corporate.pre-adjusted', 'DIVREP', '$M', 'Reported dividends in the statement of changes in shareholders table, cash flow statement or in the notes to the company''s financials', 
    '132497:DividendsReported', 'Dividends, Pre-Adjusted', 2, TO_DATE('08/08/2023 01:17:26', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/08/2023 01:17:26', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20093, 'Corporate.adjusted', 'CAPXA', '$M', 'Adjusted capital expenditures have been adjusted from the companies reported capital expenditures to ensure a globally consistent and comparable number. The adjustments also enable better alignment of the company''s reported figure with our view of underlying economic conditions. Moreover, they allow a more accurate portrayal of the company''s ongoing business.', 
    '113189:CIQ045229', 'Capital Expenditures, Adjusted', 2, TO_DATE('08/08/2023 01:17:26', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/08/2023 01:17:26', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20094, 'Corporate.adjusted', 'CHA', '$M', 'Adjusted cash and investments have been adjusted from the companies reported cash and investments to ensure a globally consistent and comparable number. The adjustments also enable better alignment of the company''s reported figure with our view of underlying economic conditions. Moreover, they allow a more accurate portrayal of the company''s ongoing business.', 
    '113195:CIQ045232', 'Cash & Short-Term Investments, Adjusted', 2, TO_DATE('08/08/2023 01:17:26', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/08/2023 01:17:26', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20095, 'Corporate.adjusted', 'DVA', '$M', 'Dividends, Adjusted', 
    '113199:CIQ045074', 'Dividends, Adjusted', 2, TO_DATE('08/08/2023 01:17:26', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/08/2023 01:17:26', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20096, 'Corporate.adjusted', 'TDA', '$M', 'Adjusted total debt has been adjusted from the companies reported total debt (short term plus long term) to ensure a globally consistent and comparable number. The adjustments also enable better alignment of the company''s reported figure with our view of underlying economic conditions. Moreover, they allow a more accurate portrayal of the company''s ongoing business. S&P Global Ratings adjusts debt for items including trade receivables sold, captive finance debt, finance receivables sold, surplus cash, nonrecourse debt, securitized debt, purchase power debt equivalent, hybrids, pension and other postretirement debt or deferred compensation.', 
    '113230:CIQ045233', 'Debt, Adjusted', 2, TO_DATE('08/08/2023 01:17:26', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/08/2023 01:17:26', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20097, 'Corporate.adjusted', 'TDE', 'x', 'Adjusted total debt as a percent of adjusted earnings before interest taxes, depreciation and amortization', 
    '113232:CIQ045271', 'Debt/ EBITDA, Adjusted', 2, TO_DATE('08/08/2023 01:17:26', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/08/2023 01:17:26', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20098, 'Corporate.adjusted', 'TDTC', '%', 'Adjusted total debt as a percent of adjusted total debt plus adjusted equity (minority interests as reported on the balance sheet + preferred stock, adjusted + common equity, adjusted)', 
    '113233:CIQ045272', 'Debt/ Debt and Equity, Adjusted', 2, TO_DATE('08/08/2023 01:17:26', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/08/2023 01:17:26', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20099, 'Corporate.adjusted', 'TCAP', '$M', 'Adjusted debt plus adjusted equity', 
    '113237:CIQ045239', 'Debt and Equity, Adjusted', 2, TO_DATE('08/08/2023 01:17:26', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/08/2023 01:17:26', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20100, 'Corporate.adjusted', 'DCFA', '$M', 'Adjusted discretionary cash flow has been adjusted from the companies reported discretionary cash flow to ensure a globally consistent and comparable number. The adjustments also enable better alignment of the company''s reported figure with our view of underlying economic conditions. Moreover, they allow a more accurate portrayal of the company''s ongoing business.', 
    '113243:CIQ045086', 'Discretionary Cash Flow, Adjusted', 2, TO_DATE('08/08/2023 01:17:26', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/08/2023 01:17:26', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20101, 'Corporate.adjusted', 'EBITA', '$M', 'Adjusted earnings before interest and taxes (EBIT) has been adjusted from the companies reported EBIT. To ensure a globally consistent and comparable number. The adjustments also enable better alignment of the company''s reported figure with our view of underlying economic conditions.', 
    '113251:CIQ045225', 'EBIT, Adjusted', 2, TO_DATE('08/08/2023 01:17:26', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/08/2023 01:17:26', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20102, 'Corporate.adjusted', 'EBITDAA', '$M', 'Adjusted earnings before interest, taxes, depreciation and amortization (EBITDA) has been adjusted from the companies reported EBITDA, to ensure a globally consistent and comparable number. The adjustments also enable better alignment of the company''s reported figure with our view of underlying economic conditions. Moreover, they allow a more accurate portrayal of the company''s ongoing business.', 
    '113253:CIQ045223', 'EBITDA, Adjusted', 2, TO_DATE('08/08/2023 01:17:26', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/08/2023 01:17:26', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20305, 'Reconciliation', 'REC_OPINCXSTFVAL', '$M', 'Nonrecurring asset valuation gains that the company included in staff costs', 
    '116024:CIQ048545', 'Staff - Valuation Gains/(Losses)', 2, TO_DATE('08/09/2023 03:51:10', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:51:10', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20306, 'Reconciliation', 'REC_OPINCXSTFOTH', '$M', 'Other income included within staff expense that S&P adjusts for', 
    '116025:CIQ048546', 'Staff - Other Non-Operating Nonrecurring Items', 2, TO_DATE('08/09/2023 03:51:10', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:51:10', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20307, 'Reconciliation', 'REC_OPINCXOPRSUB', '$M', 'Income or expense from unconsolidated companies that S&P adjusts EBIT for. This adjustment is made if the share of profits or losses from unconsolidated companies such as associates or joint ventures are reported above operating profit as S&Ps definition of EBITDA excludes the share of profits or losses from unconsolidated companies.', 
    '116026:CIQ048547', 'EBITDA - Income (Expense) of Unconsolidated Cos', 2, TO_DATE('08/09/2023 03:51:10', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:51:10', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20308, 'Reconciliation', 'REC_OPINCXOPRDIS', '$M', 'Gains on disposals of PP&E reported as part of operating profit as S&P view these as nonoperating items', 
    '116027:CIQ048548', 'EBITDA - Gain/(Loss) on Disposals of PP&E', 2, TO_DATE('08/09/2023 03:51:11', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:51:11', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20309, 'Reconciliation', 'REC_OPINCXOPRFVC', '$M', 'Adjustments to EBIT for any fair value changes of contingent consideration reported as part of operating profit as S&P views these as nonoperating items', 
    '116028:CIQ048549', 'EBITDA - Fair Value Changes of Contingent Consid', 2, TO_DATE('08/09/2023 03:51:11', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:51:11', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20310, 'Reconciliation', 'REC_OPINCXOPRFX', '$M', 'Adjustments to EBIT for any foreign exchange gains that are reported as part of operating profit, but which S&P views as nonoperating', 
    '116029:CIQ048550', 'EBITDA - Foreign Exchange Gain/(Loss)', 2, TO_DATE('08/09/2023 03:51:11', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:51:11', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20311, 'Reconciliation', 'REC_OPINCXOPRRST', '$M', 'Adjustments to EBIT from any restructuring costs that are reported as part of operating profit, but which S&P views as nonrecurring. Note that such adjustments are rare because S&P''s use of nonrecurring adjustments is limited to the extent there has been some transformative change in the company?s business. Also captures restructuring costs that are reported below operating profit, but S&P believes are not nonrecurring.', 
    '116030:CIQ048551', 'EBITDA - Restructuring Costs', 2, TO_DATE('08/09/2023 03:51:11', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:51:11', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20312, 'Reconciliation', 'REC_OPINCXOPRDER', '$M', 'Adjustments to EBIT for any unrealized gains or losses on derivatives and gains or losses on debt derivatives if they are defined as adjustments in S&P criteria', 
    '116031:CIQ048552', 'EBITDA - Derivatives', 2, TO_DATE('08/09/2023 03:51:12', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:51:12', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20313, 'Reconciliation', 'REC_OPINCXOPRST', '$M', 'Streaming transactions, as reported on the company''s income statement or in the notes to the company''s financials, that S&P adjust operating income for. A streaming transaction is an agreement whereby a financing party agrees to purchase future deliveries of minerals from an identified property in exchange for a significant up-front advance payment which is applied against future deliveries, typically together with additional ongoing fixed payments as the minerals are delivered. Streaming transactions only apply to metals and mining companies.', 
    '116032:CIQ048553', 'EBITDA - Streaming Transactions', 2, TO_DATE('08/09/2023 03:51:12', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:51:12', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20189, 'Reconciliation', 'REC_DEBTDCC', '$M', 'Any consideration payable following the acquisition of a business that S&P treats as a part of debt', 
    '115902:CIQ048423', 'Debt - Contingent Considerations', 2, TO_DATE('08/09/2023 03:50:36', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:50:36', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20190, 'Reconciliation', 'REC_DEBTDFV', '$M', 'Fair value adjustments, as reported under the financial instruments notes to the company''s financials. Used to adjust debt for any fair value adjustments to the carrying value of debt arising from the use of interest rate swaps in fair value hedging relationships.', 
    '115903:CIQ048424', 'Debt - Fair Value Adjustments', 2, TO_DATE('08/09/2023 03:50:36', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:50:36', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20191, 'Reconciliation', 'REC_DEBTDFL', '$M', 'Finance leases, as reported either on the company''s balance sheet under current and noncurrent liabilities or in the notes to the company''s financials. Used to add to debt the finance lease liability if this is presented separately from reported debt.', 
    '115904:CIQ048425', 'Debt - Finance Leases', 2, TO_DATE('08/09/2023 03:50:36', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:50:36', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20192, 'Reconciliation', 'REC_DEBTDMIPUT', '$M', 'Put options on minority stakes, as reported under the financial instruments or other payables notes to the company''s financials. Used to add to debt any liability related to put options held by minority stakes, where the owner of the minority interest has the right to sell their stake to the company.', 
    '115905:CIQ048426', 'Debt - Put Options On Minority Stakes', 2, TO_DATE('08/09/2023 03:50:36', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:50:36', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20193, 'Reconciliation', 'REC_DEBTDTP', '$M', 'Principle based adjustments made to debt that are not captured in another debt adjustment line', 
    '115906:CIQ048427', 'Debt, Other (Principle Based)', 2, TO_DATE('08/09/2023 03:50:37', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:50:37', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20194, 'Reconciliation', 'REC_DEBTDST', '$M', 'Streaming transactions, as reported under the trade payables notes to the company''s financials. Used to adjust debt for any streaming transactions reported by the company. A streaming transaction is an agreement whereby a financing party agrees to purchase future deliveries of minerals from an identified property in exchange for a significant up front advance payment which is applied against future deliveries, typically together with additional ongoing fixed payments as the minerals are delivered.', 
    '115907:CIQ048428', 'Debt - Streaming Transactions', 2, TO_DATE('08/09/2023 03:50:37', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:50:37', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20195, 'Reconciliation', 'REC_DEBTDSL', '$M', 'Shareholder loans, as reported under the balance sheet and or loans and advances notes to the company''s financials. Used to add to debt loans taken from shareholders of the company where they meet S&P criteria for adding to debt.', 
    '115908:CIQ048429', 'Debt - Shareholder Loans', 2, TO_DATE('08/09/2023 03:50:37', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:50:37', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20196, 'Reconciliation', 'REC_DEBTDTX', '$M', 'Tax liabilities, as reported in the contingent liabilities notes to the company''s financials. Used to add to debt a tax liability that meets S&P''s adjusted debt principle.', 
    '115910:CIQ048431', 'Debt - Tax Liabilities', 2, TO_DATE('08/09/2023 03:50:38', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:50:38', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20197, 'Reconciliation', 'REC_DEBTDSFRC', '$M', 'Seller financing repayable in cash, as reported under the mergers and acquisition notes to the company''s financials. Used to adjust debt for the carrying value of seller financed debt at amortized cost, as well as any liability classified contingent consideration reported at fair value.', 
    '115912:CIQ048433', 'Debt - Seller Financing Repayable In Cash', 2, TO_DATE('08/09/2023 03:50:38', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:50:38', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20198, 'Reconciliation', 'REC_DEBTDAC', '$M', 'Amortized cost, as reported under the debt notes to the company''s financials. Used to adjust debt to its amortized cost where the carrying value is different.', 
    '115913:CIQ048434', 'Debt - Amortized Cost', 2, TO_DATE('08/09/2023 03:50:38', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:50:38', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20199, 'Reconciliation', 'REC_DEBTDGR', '$M', 'Addition of netted off workers'' compensation and post-retirement benefit deficit. Used to adjust pension and workers'' compensation for government reimbursements.', 
    '115914:CIQ048435', 'Debt - Government Cost Recovery (Defense Sector)', 2, TO_DATE('08/09/2023 03:50:38', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:50:38', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20200, 'Reconciliation', 'REC_DEBTTDOA', '$M', 'Situational adjustments made to debt that are not captured in another debt adjustment line', 
    '115915:CIQ048436', 'Debt, Other (Situational)', 2, TO_DATE('08/09/2023 03:50:39', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:50:39', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20201, 'Reconciliation', 'REC_DEBTADJTOT', '$M', 'Sum of all S&P adjustments to debt such as accrued interest not included in debt, workers'' compensation, guarantees, litigation, contingent consideration, pension and other postretirement debt or deferred compensation that are used to calculate adjusted debt', 
    '115916:CIQ048437', 'Total Adjustments', 2, TO_DATE('08/09/2023 03:50:39', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:50:39', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20202, 'Reconciliation', 'REC_TDA', '$M', 'Adjusted total debt which has been adjusted from the companies reported total debt, short term plus long term, to ensure a globally consistent and comparable number. The adjustments also enable better alignment of the company''s reported figure with S&P''s view of underlying economic conditions. Moreover, they allow a more accurate portrayal of the company''s ongoing business. S&P Global Ratings adjusts debt for items including trade receivables sold, captive finance debt, finance receivables sold, surplus cash, non-recourse debt, securitized debt, purchase power debt equivalent, hybrids, pension and other post-retirement debt/deferred compensation etc.', 
    '115917:CIQ048438', 'Debt, Adjusted', 2, TO_DATE('08/09/2023 03:50:39', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:50:39', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20203, 'Reconciliation', 'REC_SEQREP', '$M', 'Shareholders'' equity, as reported on the company''s balance sheet. Shareholders'' equity (SE), also referred to as the owner''s residual claim after debts have been paid, is equal to a firm''s total assets less its total liabilities. Shareholders'' equity represents the net or book value of a company.', 
    '115918:CIQ048439', 'Shareholders'' Equity, Pre-Adjusted', 2, TO_DATE('08/09/2023 03:50:40', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:50:40', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20204, 'Reconciliation', 'REC_SEQHYBDBT', '$M', 'Hybrids, as reported in the equity statement or notes to the company''s financials. Captures hybrids the company treats as equity but S&P views as part of debt. S&P adds this value to reported debt in the calculation of adjusted debt.', 
    '115919:CIQ048440', 'Debt-Like Hybrids', 2, TO_DATE('08/09/2023 03:50:40', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:50:40', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20205, 'Reconciliation', 'REC_SEQHYBEQU', '$M', 'Hybrids, as reported in the debt note of the company''s financials. Captures hybrids the company treats as debt but S&P views as part of equity. S&P adds this value to reported equity in the calculation of adjusted equity.', 
    '115920:CIQ048441', 'Equity-Like Hybrids', 2, TO_DATE('08/09/2023 03:50:40', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:50:40', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20206, 'Reconciliation', 'REC_SEQHYBDBTI', '$M', 'Hybrids, as reported in the debt notes of the company''s financials. Captures 50% of the value of hybrids the company treats as debt but S&P views as intermediate equity. S&P adds 50% of the instrument value to reported equity in the calculation of adjusted equity.', 
    '115921:CIQ048442', 'Intermediate Hybrids Reported As Debt', 2, TO_DATE('08/09/2023 03:50:41', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:50:41', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20207, 'Reconciliation', 'REC_SEQHYBEQUI', '$M', 'Hybrids, as reported in the equity statement or notes of the company''s financials. Captures 50% of the value of hybrids the company treats as equity but S&P views as intermediate debt. S&P adds 50% of the instrument value to reported debt in the calculation of adjusted debt.', 
    '115922:CIQ048443', 'Intermediate Hybrids Reported As Equity', 2, TO_DATE('08/09/2023 03:50:41', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:50:41', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20208, 'Reconciliation', 'REC_SEQCAPFIN', '$M', 'Equity of the captive finance entity that S&P adjusts the consolidated company''s equity for', 
    '115924:CIQ048445', 'Captive Finance Operations', 2, TO_DATE('08/09/2023 03:50:41', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:50:41', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20209, 'Reconciliation', 'REC_SEQCD', '$M', 'Equity of the entity that S&P consolidates with or deconsolidates from the parent company''s equity in the calculation of adjusted equity', 
    '115925:CIQ048446', 'Deconsolidation/ Consolidation', 2, TO_DATE('08/09/2023 03:50:42', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:50:42', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20210, 'Reconciliation', 'REC_SEQMIB', '$M', 'Non- controlling interest, as reported under Shareholders'' equity on the company''s balance sheet. Non-controlling interest, also known as minority interest, is an ownership position whereby a shareholder owns less than 50% of outstanding shares and has no control over decisions. Non-controlling interests are measured at the net asset value of entities and do not account for potential voting rights.', 
    '115926:CIQ048447', 'Non-Controlling Interest/Minority Interest', 2, TO_DATE('08/09/2023 03:50:42', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:50:42', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20211, 'Reconciliation', 'REC_SEQSEQG', '$M', 'Government grants, as reported in the notes to the company''s financials. Used to adjust equity for any government funding received in the form of grants that need to be treated as equity.', 
    '115927:CIQ048448', 'Equity - Government Grants', 2, TO_DATE('08/09/2023 03:50:42', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:50:42', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20212, 'Reconciliation', 'REC_SEQSEQFV', '$M', 'Fair value adjustments, as reported in the notes to the company''s financials. Used to make fair value adjustments to equity.', 
    '115928:CIQ048449', 'Equity - Fair Value Adjustments', 2, TO_DATE('08/09/2023 03:50:43', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:50:43', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20213, 'Reconciliation', 'REC_SEQCEQA', '$M', 'Other adjustments S&P makes to equity that are not captured in another equity adjustment line', 
    '115930:CIQ048451', 'Equity - Other', 2, TO_DATE('08/09/2023 03:50:43', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:50:43', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20214, 'Reconciliation', 'REC_SEQADJTOT', '$M', 'Sum of all S&P adjustments to equity such as hybrids, LIFO reserve, pension and other post-retirement debt or deferred compensation, and government grants that are used to calculate adjusted equity', 
    '115931:CIQ048452', 'Total Adjustments', 2, TO_DATE('08/09/2023 03:50:43', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:50:43', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20215, 'Reconciliation', 'REC_EQUITYA', '$M', 'Equity which has been adjusted from the companies reported equity to ensure a globally consistent and comparable number. The adjustments also enable better alignment of the company''s reported figure with S&P''s view of underlying economic conditions. Moreover, they allow a more accurate portrayal of the company''s ongoing business.', 
    '115932:CIQ048453', 'Equity, Adjusted', 2, TO_DATE('08/09/2023 03:50:44', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:50:44', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20216, 'Reconciliation', 'REC_REVREP', '$M', 'Core operating revenue of the company, as reported on the company''s income statement', 
    '115933:CIQ048454', 'Revenues, Pre-Adjusted', 2, TO_DATE('08/09/2023 03:50:44', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:50:44', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20217, 'Reconciliation', 'REC_REVCAPFIN', '$M', 'Revenues of the captive finance entity that S&P adjusts the consolidated company''s revenues for', 
    '115934:CIQ048455', 'Captive Finance Operations', 2, TO_DATE('08/09/2023 03:50:44', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:50:44', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20218, 'Reconciliation', 'REC_REVCD', '$M', 'Revenue of the entity that S&P consolidates with or deconsolidates from the parent company''s revenue in the calculation of adjusted revenue', 
    '115935:CIQ048456', 'Deconsolidation/ Consolidation', 2, TO_DATE('08/09/2023 03:50:45', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:50:45', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20219, 'Reconciliation', 'REC_REVSECCOST', '$M', 'Securitized stranded costs that S&P adjusts revenues for as the company has no control over these revenues', 
    '115936:CIQ048457', 'Securitized Stranded Costs', 2, TO_DATE('08/09/2023 03:50:45', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:50:45', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20220, 'Reconciliation', 'REC_REVREVIFIN', '$M', 'Interest income that the company reported within revenue that S&P excludes from revenue', 
    '115937:CIQ048458', 'Revenues - Finance/ Interest Income', 2, TO_DATE('08/09/2023 03:50:45', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:50:45', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20221, 'Reconciliation', 'REC_REVREVDIS', '$M', 'Principle based adjustments (including profit on disposals) to revenue', 
    '115938:CIQ048459', 'Rev, Profit on Disposals & Other (Principle Based)', 2, TO_DATE('08/09/2023 03:50:45', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:50:45', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20222, 'Reconciliation', 'REC_REVREVDER', '$M', 'Fair value gain on derivatives the company reported within revenue that S&P adjusts revenue for', 
    '115939:CIQ048460', 'Revenues - Derivatives', 2, TO_DATE('08/09/2023 03:50:46', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:50:46', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20223, 'Reconciliation', 'REC_REVOPRO1', '$M', 'Situational adjustments to revenues', 
    '115940:CIQ048461', 'Revenue, Other (Situational)', 2, TO_DATE('08/09/2023 03:50:46', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:50:46', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20224, 'Reconciliation', 'REC_REVADJTOT', '$M', 'Sum of all S&P adjustments to revenue such as profit on disposals, derivatives finance or interest income that are used to calculate adjusted revenue', 
    '115941:CIQ048462', 'Total Adjustments', 2, TO_DATE('08/09/2023 03:50:46', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:50:46', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20225, 'Reconciliation', 'REC_REVTA', '$M', 'Revenue which has been adjusted from the companies reported revenue to ensure a globally consistent and comparable number. The adjustments also enable better alignment of the company''s reported figure with S&P''s view of underlying economic conditions. Moreover, they allow a more accurate portrayal of the company''s ongoing business.', 
    '115942:CIQ048463', 'Revenues, Adjusted', 2, TO_DATE('08/09/2023 03:50:47', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:50:47', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20226, 'Reconciliation', 'REC_EBITDAREP', '$M', 'Earnings before interest, taxes, depreciation and amortization (EBITDA) calculated as reported revenue less operating expenses, plus depreciation and amortization', 
    '115943:CIQ048464', 'EBITDA, Pre-Adjusted', 2, TO_DATE('08/09/2023 03:50:47', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:50:47', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20227, 'Reconciliation', 'REC_EBITDAOPLEASE', '$M', 'Operating leases, as reported under the contractual payments and operating lease notes to the company''s financials. An operating lease is a contract that allows for the use of an asset but does not convey rights of ownership of the asset. Represents an off-balance sheet financing of assets, where a leased asset and associated liabilities of future rent payments are not included on the balance sheet of a company.', 
    '115945:CIQ048466', 'Operating Leases', 2, TO_DATE('08/09/2023 03:50:47', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:50:47', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20228, 'Reconciliation', 'REC_EBITDAPBODC', '$M', 'Post-retirement benefit obligations or deferred compensation that S&P adjust EBITDA for', 
    '115946:CIQ048467', 'Postretirement Benefit Oblg/ Deferred Compensation', 2, TO_DATE('08/09/2023 03:50:47', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:50:47', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20177, 'Reconciliation', 'REC_DEBTSURCASH', '$M', 'Surplus cash is the cash and investments that are liquid and accessible, determined by netting off the haircut from gross available cash', 
    '115887:CIQ048408', 'Accessible Cash & Liquid Investments', 2, TO_DATE('08/09/2023 03:50:32', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:50:32', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20178, 'Reconciliation', 'REC_DEBTCAPFIN', '$M', 'Debt of the captive finance entity that S&P adjusts the consolidated company''s debt for', 
    '115888:CIQ048409', 'Captive Finance Operations', 2, TO_DATE('08/09/2023 03:50:32', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:50:32', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20179, 'Reconciliation', 'REC_DEBTCD', '$M', 'Debt of the entity that S&P consolidates with or deconsolidates from the parent company''s debt in the calculation of adjusted debt', 
    '115889:CIQ048410', 'Deconsolidation/ Consolidation', 2, TO_DATE('08/09/2023 03:50:33', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:50:33', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20180, 'Reconciliation', 'REC_DEBTSECCOST', '$M', 'Securitized debt issued to meet stranded costs, that S&P adjusts debt for, as the customers not the utility are responsible for it. The adjustment is specific to the utilities sector.', 
    '115891:CIQ048412', 'Securitized Stranded Costs', 2, TO_DATE('08/09/2023 03:50:33', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:50:33', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20181, 'Reconciliation', 'REC_DEBTPPA', '$M', 'The equivalent portion of a power purchase agreement (PPA) that S&P treats as debt. A PPA is a contract between two parties, one which generates electricity, the seller, and one which is looking to purchase electricity, the buyer.', 
    '115892:CIQ048413', 'Power Purchase Agreements', 2, TO_DATE('08/09/2023 03:50:33', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:50:33', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20182, 'Reconciliation', 'REC_DEBTARO', '$M', 'Asset retirement obligations that S&P adjust debt for. An asset retirement obligation (ARO) is a legal obligation associated with the retirement of a tangible long-lived asset in which the timing or method of settlement may be conditional on a future event, the occurrence of which may not be within the control of the entity burdened by the obligation.', 
    '115893:CIQ048414', 'Asset Retirement Obligations', 2, TO_DATE('08/09/2023 03:50:33', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:50:33', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20183, 'Reconciliation', 'REC_DEBTTDOFFB', '$M', 'The financial guarantees that S&P treats as a part of debt. A financial guarantee is a non-cancellable indemnity bond backed by an insurer to guarantee investors that principal and interest payments will be made.', 
    '115895:CIQ048416', 'Debt - Guarantees', 2, TO_DATE('08/09/2023 03:50:34', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:50:34', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20184, 'Reconciliation', 'REC_DEBTDG', '$M', 'The financial liability on open litigations that S&P treats as a part of debt', 
    '115896:CIQ048417', 'Debt - Litigation', 2, TO_DATE('08/09/2023 03:50:34', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:50:34', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20185, 'Reconciliation', 'REC_DEBTDWCOMP', '$M', 'Liabilities payable as a part of worker''s compensation or as proceeds of self-insurance claims that S&P treats as part of debt', 
    '115897:CIQ048418', 'Debt - Workers Compensation/Self Insurance', 2, TO_DATE('08/09/2023 03:50:34', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:50:34', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20186, 'Reconciliation', 'REC_DEBTDVPP', '$M', 'Volumetric Production Payments (VPP) received by the company that S&P treats as a part of debt', 
    '115898:CIQ048419', 'Debt - Volumetric Production Payments', 2, TO_DATE('08/09/2023 03:50:35', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:50:35', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20187, 'Reconciliation', 'REC_DEBTDDER', '$M', 'Derivatives included in reported debt that S&P adjusts debt for', 
    '115900:CIQ048421', 'Debt - Derivatives', 2, TO_DATE('08/09/2023 03:50:35', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:50:35', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20188, 'Reconciliation', 'REC_DEBTDFXH', '$M', 'Foreign currency hedges, as reported under the derivatives, foreign currency hedges or swaps notes to the company''s financials. Used to re-translate foreign currency denominated debt to reflect the locked in foreign exchange rate achieved by the hedging derivative, or adjust the balance sheet value of the debt to equal the locked in principal value if this is different from the debt?s balance sheet carrying value. No adjustment is needed if fair value hedge accounting is applied to the foreign currency debt and the hedging derivative, where the balance sheet value equals the locked-in principal value.', 
    '115901:CIQ048422', 'Debt - Foreign Currency Hedges', 2, TO_DATE('08/09/2023 03:50:35', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:50:35', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20229, 'Reconciliation', 'REC_EBITDACAPINT', '$M', 'Capitalized interest, as reported on the company''s income statement or in the finance expense notes to the company''s financials. When interest costs have been capitalized into inventory rather than fixed assets, which subsequently has been allocated to COGS, the adjustment increases the EBITDA of the company by removing the finance cost component transferred to COGS in the current year.', 
    '115947:CIQ048468', 'Capitalized Interest', 2, TO_DATE('08/09/2023 03:50:48', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:50:48', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20230, 'Reconciliation', 'REC_EBITDACAPDEVC', '$M', 'Capitalized development costs that S&P adjusts EBITDA for. Capitalized development costs are not expensed in the period they were incurred, but recognized over a period of time via depreciation or amortization.', 
    '115948:CIQ048469', 'Capitalized Development Costs', 2, TO_DATE('08/09/2023 03:50:48', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:50:48', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20231, 'Reconciliation', 'REC_EBITDAINFRENC', '$M', 'Infrastructure renewal costs that were capitalized during the period that S&P adjusts EBITDA for. Adjustment is specific to the utilities sector in the United Kingdom.', 
    '115949:CIQ048470', 'Infrastructure Renewal Costs', 2, TO_DATE('08/09/2023 03:50:48', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:50:48', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20232, 'Reconciliation', 'REC_EBITDASTKCO', '$M', 'Share-based compensation expense, as reported on the company''s income statement, cash flow statement or in the share based compensation or employee benefits notes to the company''s financials. Captures non-cash expenses that are share based compensation such as stock options provided to employees as part of their remuneration that S&P adjusts EBITDA for.', 
    '115950:CIQ048471', 'Share-Based Compensation Expense', 2, TO_DATE('08/09/2023 03:50:49', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:50:49', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20233, 'Reconciliation', 'REC_EBITDADVESUB', '$M', 'Dividends received from equity investments, as reported on the company''s cash flow statement or in the notes to the company''s financials. Captures actual cash received as dividends from associates or joint ventures (i.e. equity accounted affiliates). S&P adds these back to earnings before interest, taxes, depreciation and amortization (EBITDA).', 
    '115951:CIQ048472', 'Dividends Received From Equity Investments', 2, TO_DATE('08/09/2023 03:50:49', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:50:49', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20234, 'Reconciliation', 'REC_EBITDACAPFIN', '$M', 'EBITDA of the captive finance entity that S&P adjusts the consolidated company''s EBITDA for', 
    '115952:CIQ048473', 'Captive Finance Operations', 2, TO_DATE('08/09/2023 03:50:49', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:50:49', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20235, 'Reconciliation', 'REC_EBITDACD', '$M', 'EBITDA of the entity that S&P consolidates with or deconsolidates from the parent company''s EBITDA in the calculation of adjusted EBITDA', 
    '115953:CIQ048474', 'Deconsolidation/ Consolidation', 2, TO_DATE('08/09/2023 03:50:49', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:50:49', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20236, 'Reconciliation', 'REC_EBITDASECCOST', '$M', 'EBITDA related to the recoveries from customers for servicing the securitized debt issued to meet stranded costs as the customers not the utility are responsible for it. The adjustment is specific to the utilities sector.', 
    '115954:CIQ048475', 'Securitized Stranded Costs', 2, TO_DATE('08/09/2023 03:50:50', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:50:50', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20237, 'Reconciliation', 'REC_EBITDAPPA', '$M', 'Power purchase agreements, as reported in the notes to the company''s financials. Used for regulated utilities to add back to EBITDA the depreciation on the Power Purchase Agreement (PPA). A PPA is a contract between two parties, one which generates electricity, the seller, and one which is looking to purchase electricity, the buyer.', 
    '115955:CIQ048476', 'Power Purchase Agreements', 2, TO_DATE('08/09/2023 03:50:50', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:50:50', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20238, 'Reconciliation', 'REC_EBITDAARO', '$M', 'Asset retirement obligations that S&P adjust EBITDA for. An asset retirement obligation (ARO) is a legal obligation associated with the retirement of a tangible long-lived asset in which the timing or method of settlement may be conditional on a future event, the occurrence of which may not be within the control of the entity burdened by the obligation.', 
    '115956:CIQ048477', 'Asset Retirement Obligations', 2, TO_DATE('08/09/2023 03:50:50', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:50:50', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20239, 'Reconciliation', 'REC_EBITDAEXPCOST', '$M', 'Exploration costs, as reported on the company''s income statement or notes to the company''s financials. Represents an expense in the period in respect of unsuccessful exploration activities for those companies following the successful efforts accounting method. Used to add it back to the calculation of EBITDA so as to facilitate comparisons of successful efforts companies with full cost companies.', 
    '115957:CIQ048478', 'Exploration Costs', 2, TO_DATE('08/09/2023 03:50:51', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:50:51', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20240, 'Reconciliation', 'REC_EBITDAREVIFIN', '$M', 'Interest income that the company reported within revenue that S&P adjusts EBITDA for', 
    '115958:CIQ048479', 'Revenues - Finance/Interest Income', 2, TO_DATE('08/09/2023 03:50:51', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:50:51', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20241, 'Reconciliation', 'REC_EBITDAREVDIS', '$M', 'Principle based adjustments (including profit on disposals) to revenue', 
    '115959:CIQ048480', 'Rev, Profit on Disposals & Other (Principle Based)', 2, TO_DATE('08/09/2023 03:50:51', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:50:51', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20242, 'Reconciliation', 'REC_EBITDAREVDER', '$M', 'Fair value gain on derivatives the company reported within revenue that S&P adjusts EBITDA for', 
    '115960:CIQ048481', 'Revenues - Derivatives', 2, TO_DATE('08/09/2023 03:50:51', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:50:51', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20243, 'Reconciliation', 'REC_EBITDAOPRO1', '$M', 'Situational adjustments to revenues', 
    '115961:CIQ048482', 'Revenue, Other (Situational)', 2, TO_DATE('08/09/2023 03:50:52', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:50:52', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20244, 'Reconciliation', 'REC_EBITDACOGSRST', '$M', 'Restructuring costs S&P exclude from EBITDA and cost of goods sold (COGS) that the company reported in COGS', 
    '115962:CIQ048483', 'COGS - Restructuring Costs', 2, TO_DATE('08/09/2023 03:50:52', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:50:52', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20245, 'Reconciliation', 'REC_EBITDACOGSVAL', '$M', 'Asset valuation gains S&P exclude from EBITDA and COGS that are reported in COGS', 
    '115963:CIQ048484', 'COGS - Valuation gains/(Losses)', 2, TO_DATE('08/09/2023 03:50:52', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:50:52', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20246, 'Reconciliation', 'REC_EBITDACOGSOTH', '$M', 'Other income or expense included within cost of goods sold (COGS) that S&P adjusts COGS for', 
    '115964:CIQ048485', 'COGS - Other Non-Operating Nonrecurring Items', 2, TO_DATE('08/09/2023 03:50:53', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:50:53', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20247, 'Reconciliation', 'REC_EBITDACOGSLIF', '$M', 'LIFO liquidation gains the company reported in COGS that S&P adjust EBITDA for', 
    '115965:CIQ048486', 'COGS - LIFO Liquidation Gains', 2, TO_DATE('08/09/2023 03:50:53', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:50:53', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20248, 'Reconciliation', 'REC_EBITDAXSGARST', '$M', 'Restructuring costs S&P exclude from selling, general and administrative expenses (SG&A) that the company reported in SG&A', 
    '115966:CIQ048487', 'SG&A - Restructuring Costs', 2, TO_DATE('08/09/2023 03:50:53', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:50:53', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20249, 'Reconciliation', 'REC_EBITDAXSGAVAL', '$M', 'Asset valuation gains S&P exclude from SG&A that are reported in SG&A', 
    '115967:CIQ048488', 'SG&A - Valuation Gains/(Losses)', 2, TO_DATE('08/09/2023 03:50:53', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:50:53', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20250, 'Reconciliation', 'REC_EBITDAXSGAOTH', '$M', 'Other income or expense included within selling, general and administrative expenses that S&P adjusts for', 
    '115968:CIQ048489', 'SG&A - Other Non-Operating Nonrecurring Items', 2, TO_DATE('08/09/2023 03:50:54', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:50:54', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20251, 'Reconciliation', 'REC_EBITDAXRDRST', '$M', 'Restructuring costs S&P exclude from EBITDA and research and development (R&D) that are reported in R&D by the company', 
    '115969:CIQ048490', 'R&D - Restructuring Costs', 2, TO_DATE('08/09/2023 03:50:54', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:50:54', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20252, 'Reconciliation', 'REC_EBITDAXRDVAL', '$M', 'Asset valuation gains S&P exclude from research and development (R&D) that are reported in R&D', 
    '115970:CIQ048491', 'R&D - Valuation Gains/(Losses)', 2, TO_DATE('08/09/2023 03:50:54', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:50:54', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20253, 'Reconciliation', 'REC_EBITDAXRDOTH', '$M', 'Other income or expense included within research and development (R&D) that S&P adjusts R&D for', 
    '115971:CIQ048492', 'R&D - Other Non-Operating Nonrecurring Items', 2, TO_DATE('08/09/2023 03:50:55', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:50:55', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20254, 'Reconciliation', 'REC_EBITDARMSMRST', '$M', 'Restructuring costs S&P exclude from raw materials, supplies and merchandise (RMS&M) that are reported in RMS&M', 
    '115972:CIQ048493', 'RMS&M - Restructuring Costs', 2, TO_DATE('08/09/2023 03:50:55', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:50:55', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20255, 'Reconciliation', 'REC_EBITDARMSMVAL', '$M', 'Asset valuation gains S&P excludes from EBITDA and raw materials, supplies and merchandise (RMS&M) that are reported in RMS&M', 
    '115973:CIQ048494', 'RMS&M - Valuation Gains/(Losses)', 2, TO_DATE('08/09/2023 03:50:55', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:50:55', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20256, 'Reconciliation', 'REC_EBITDARMSMOTH', '$M', 'Other nonrecurring or nonoperating items S&P excludes from raw materials, supplies and merchandise (RMS&M) that are reported in RMS&M and are not captured in another RMS&M adjustment line', 
    '115974:CIQ048495', 'RMS&M - Other Non-Operating Nonrecurring Items', 2, TO_DATE('08/09/2023 03:50:55', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:50:55', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20257, 'Reconciliation', 'REC_EBITDAXSTFRST', '$M', 'Nonrecurring restructuring costs included in staff costs by the company', 
    '115975:CIQ048496', 'Staff - Restructuring Costs', 2, TO_DATE('08/09/2023 03:50:56', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:50:56', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20258, 'Reconciliation', 'REC_EBITDAXSTFVAL', '$M', 'Nonrecurring asset valuation gains that the company included in staff costs', 
    '115976:CIQ048497', 'Staff - Valuation Gains/(Losses)', 2, TO_DATE('08/09/2023 03:50:56', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:50:56', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20259, 'Reconciliation', 'REC_EBITDAXSTFOTH', '$M', 'Other income or expense included within staff expense that S&P adjusts EBITDA for', 
    '115977:CIQ048498', 'Staff - Other Non-Operating Nonrecurring Items', 2, TO_DATE('08/09/2023 03:50:56', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:50:56', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20260, 'Reconciliation', 'REC_EBITDAXOPRDIS', '$M', 'Gains on disposals of PP&E reported as part of operating profit as S&P view these as nonoperating items', 
    '115979:CIQ048500', 'EBITDA - Gain/(Loss) on Disposals of PP&E', 2, TO_DATE('08/09/2023 03:50:57', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:50:57', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20261, 'Reconciliation', 'REC_EBITDAXOPRFVC', '$M', 'Adjustments to EBITDA for any fair value changes of contingent consideration reported as part of operating profit as S&P views these as nonoperating items', 
    '115980:CIQ048501', 'EBITDA - Fair Value Changes of Contingent Consid', 2, TO_DATE('08/09/2023 03:50:57', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:50:57', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20262, 'Reconciliation', 'REC_EBITDAXOPRFX', '$M', 'Adjustments to EBITDA for any foreign exchange gains that are reported as part of operating profit, but which S&P views as nonoperating', 
    '115981:CIQ048502', 'EBITDA - Foreign Exchange Gain/(Loss)', 2, TO_DATE('08/09/2023 03:50:57', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:50:57', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20263, 'Reconciliation', 'REC_EBITDAXOPRRST', '$M', 'Adjustments to EBITDA from any restructuring costs that are reported as part of operating profit, but which S&P views as nonrecurring. Note that such adjustments are rare because S&Ps use of nonrecurring adjustments is limited to the extent there has been some transformative change in the company?s business. Also captures restructuring costs that are reported below operating profit, but S&P treats as nonrecurring.', 
    '115982:CIQ048503', 'EBITDA - Restructuring Costs', 2, TO_DATE('08/09/2023 03:50:57', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:50:57', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20264, 'Reconciliation', 'REC_EBITDAXOPRDER', '$M', 'Adjustments to EBITDA for any unrealized gains or losses on derivatives and gains or losses on debt derivatives if they are defined as adjustments in S&P criteria', 
    '115983:CIQ048504', 'EBITDA - Derivatives', 2, TO_DATE('08/09/2023 03:50:58', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:50:58', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20265, 'Reconciliation', 'REC_EBITDAXOPRST', '$M', 'Streaming transactions, as reported on the company''s income statement or in the notes to the company''s financials, that S&P adjust EBITDA for. A streaming transaction is an agreement whereby a financing party agrees to purchase future deliveries of minerals from an identified property in exchange for a significant up-front advance payment which is applied against future deliveries, typically together with additional ongoing fixed payments as the minerals are delivered. Streaming transactions only apply to metals and mining companies.', 
    '115984:CIQ048505', 'EBITDA - Streaming Transactions', 2, TO_DATE('08/09/2023 03:50:58', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:50:58', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20266, 'Reconciliation', 'REC_EBITDAXOPRLIT', '$M', 'Settlement costs for litigation or insurance that S&P adjust EBITDA for. This adjustment is rarely used, it is used in situations such as when there is a change in the measurement of a material litigation provision that leads to a very significant gain or loss in the year.', 
    '115985:CIQ048506', 'EBITDA - Settlement (Litigation/Insurance) Costs', 2, TO_DATE('08/09/2023 03:50:58', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:50:58', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20267, 'Reconciliation', 'REC_EBITDAXOPRVAL', '$M', 'Fair value gains that S&P remove from EBITDA. For example fair value gains on investment properties for IFRS companies.', 
    '115986:CIQ048507', 'EBITDA - Valuation Gains/(Losses)', 2, TO_DATE('08/09/2023 03:50:59', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:50:59', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20268, 'Reconciliation', 'REC_EBITDAXBUSDIV', '$M', 'Gains on the sale of businesses reported as part of operating profit that S&P adjusts EBITDA for as S&P views these as nonoperating items', 
    '115987:CIQ048508', 'EBITDA - Business Divestments', 2, TO_DATE('08/09/2023 03:50:59', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:50:59', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20269, 'Reconciliation', 'REC_EBITDAXINVWO', '$M', 'Liquidation gains that S&P removes from EBITDA for companies applying the LIFO method of inventory accounting', 
    '115988:CIQ048509', 'EBITDA - Inventory', 2, TO_DATE('08/09/2023 03:50:59', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:50:59', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20270, 'Reconciliation', 'REC_EBITDAXIO', '$M', 'Principle based adjustments to the earnings before interest, taxes, depreciation, and amortization (EBITDA)', 
    '115989:CIQ048510', 'EBITDA, Other Income/(Expense) (Principle Based)', 2, TO_DATE('08/09/2023 03:51:00', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:51:00', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20271, 'Reconciliation', 'REC_EBITDAXOPROA', '$M', 'Situational adjustments to earnings before interest, taxes, depreciation, and amortization (EBITDA)', 
    '115990:CIQ048511', 'EBITDA, Other (Situational)', 2, TO_DATE('08/09/2023 03:51:00', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:51:00', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20272, 'Reconciliation', 'REC_EBITDAADJTOT', '$M', 'Sum of all S&P adjustments to EBITDA such as derivatives, settlement loss, gain or loss on disposal of assets, valuation gains, restructuring that are used to calculate adjusted EBITDA', 
    '115991:CIQ048512', 'Total Adjustments', 2, TO_DATE('08/09/2023 03:51:00', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:51:00', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20273, 'Reconciliation', 'REC_EBITDAA', '$M', 'EBITDA which has been adjusted from the companies reported EBITDA to ensure a globally consistent and comparable number. The adjustments also enable better alignment of the company''s reported figure with S&P''s view of underlying economic conditions. Moreover, they allow a more accurate portrayal of the company''s ongoing business.', 
    '115992:CIQ048513', 'EBITDA, Adjusted', 2, TO_DATE('08/09/2023 03:51:01', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:51:01', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20274, 'Reconciliation', 'REC_OPINCREP', '$M', 'Net sales or turnover plus other operating revenues, less cost of goods sold, less selling, general and administrative expense, less research and development expense, less raw materials, supplies and merchandise, plus change in stocks, plus capitalized costs, less total staff expense, less taxes other than income, less other operating expense, less asset valuation gains, less impairment, less depreciation and amortization.', 
    '115993:CIQ048514', 'Operating Income, Pre-Adjusted', 2, TO_DATE('08/09/2023 03:51:01', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:51:01', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20275, 'Reconciliation', 'REC_OPINCTRECSLD', '$M', 'Trade receivables securitizations that S&P adjusts EBIT for. This is mostly seen in the form of securitizations or factoring.', 
    '115994:CIQ048515', 'Trade Receivables Securitizations', 2, TO_DATE('08/09/2023 03:51:01', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:51:01', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20276, 'Reconciliation', 'REC_OPINCOPLEASE', '$M', 'Operating leases, as reported under the contractual payments and operating lease notes to the company''s financials. An operating lease is a contract that allows for the use of an asset but does not convey rights of ownership of the asset. Represents an off-balance sheet financing of assets, where a leased asset and associated liabilities of future rent payments are not included on the balance sheet of a company.', 
    '115995:CIQ048516', 'Operating Leases', 2, TO_DATE('08/09/2023 03:51:01', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:51:01', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20277, 'Reconciliation', 'REC_OPINCPBODC', '$M', 'Post-retirement benefit obligations or deferred compensation that S&P adjust operating income for', 
    '115996:CIQ048517', 'Postretirement Benefit Oblg/ Deferred Compensation', 2, TO_DATE('08/09/2023 03:51:02', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:51:02', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20278, 'Reconciliation', 'REC_OPINCCAPINT', '$M', 'Capitalized interest, as reported on the company''s income statement or in the finance expense notes to the company''s financials. Capitalized interest is the cost of borrowing to acquire or construct a long-term asset. Unlike an interest expense incurred for any other purpose, capitalized interest must not be expensed on the income statement and instead firms capitalize it, meaning such interest increases the cost basis of a long-term asset on a balance sheet. Capitalized interest shows up on a company''s income statement through a periodic depreciation expense recorded on the associated long-term asset throughout its useful life.', 
    '115997:CIQ048518', 'Capitalized Interest', 2, TO_DATE('08/09/2023 03:51:02', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:51:02', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20279, 'Reconciliation', 'REC_OPINCCAPDEVC', '$M', 'Capitalized development costs that S&P adjusts EBIT for. Capitalized development costs are not expensed in the period they were incurred, but recognized over a period of time via depreciation or amortization.', 
    '115998:CIQ048519', 'Capitalized Development Costs', 2, TO_DATE('08/09/2023 03:51:02', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:51:02', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20280, 'Reconciliation', 'REC_OPINCINFRENC', '$M', 'Difference between the adjustment to EBITDA for infrastructure renewal costs and the reduction in the depreciation expense, depending on the degree to which the actual cash spending in the current year matches the planned spending over the five-year regulatory review period. Adjustment is specific to the utilities sector in the United Kingdom.', 
    '115999:CIQ048520', 'Infrastructure Renewal Costs', 2, TO_DATE('08/09/2023 03:51:03', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:51:03', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20281, 'Reconciliation', 'REC_OPINCCAPFIN', '$M', 'EBIT of the captive finance entity that S&P adjusts the consolidated company''s EBIT for', 
    '116000:CIQ048521', 'Captive Finance Operations', 2, TO_DATE('08/09/2023 03:51:03', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:51:03', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20282, 'Reconciliation', 'REC_OPINCCD', '$M', 'EBIT of the entity that S&P consolidates with or deconsolidates from the parent company''s EBIT in the calculation of adjusted EBIT', 
    '116001:CIQ048522', 'Deconsolidation/ Consolidation', 2, TO_DATE('08/09/2023 03:51:03', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:51:03', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20283, 'Reconciliation', 'REC_OPINCSECCOST', '$M', 'EBIT related to the recoveries from customers for servicing the securitized debt issued to meet stranded costs as the customers not the utility are responsible for it. The adjustment is specific to the utilities sector.', 
    '116002:CIQ048523', 'Securitized Stranded Costs', 2, TO_DATE('08/09/2023 03:51:03', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:51:03', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20284, 'Reconciliation', 'REC_OPINCPPA', '$M', 'Power purchase agreements, as reported in the notes to the company''s financials. Used for regulated utilities to add back to EBIT any impact from the Power Purchase Agreement (PPA) that S&P treats as debt. A PPA is a contract between two parties, one which generates electricity, the seller, and one which is looking to purchase electricity, the buyer.', 
    '116003:CIQ048524', 'Power Purchase Agreements', 2, TO_DATE('08/09/2023 03:51:04', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:51:04', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20285, 'Reconciliation', 'REC_OPINCARO', '$M', 'Asset retirement obligations that S&P adjust operating income for. An asset retirement obligation (ARO) is a legal obligation associated with the retirement of a tangible long-lived asset in which the timing or method of settlement may be conditional on a future event, the occurrence of which may not be within the control of the entity burdened by the obligation.', 
    '116004:CIQ048525', 'Asset Retirement Obligations', 2, TO_DATE('08/09/2023 03:51:04', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:51:04', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20286, 'Reconciliation', 'REC_OPINCNOPI', '$M', 'Nonoperating income, as reported on the company''s income statement. Captures all nonoperating but recurring income.', 
    '116005:CIQ048526', 'Non-Operating Income (Expense)', 2, TO_DATE('08/09/2023 03:51:04', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:51:04', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20287, 'Reconciliation', 'REC_OPINCREVIFIN', '$M', 'Interest income that the company reported within revenue that S&P adjusts EBIT for', 
    '116006:CIQ048527', 'Revenues - Finance/Interest Income', 2, TO_DATE('08/09/2023 03:51:05', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:51:05', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20288, 'Reconciliation', 'REC_OPINCREVDIS', '$M', 'Principle based adjustments (including profit on disposals) to revenue', 
    '116007:CIQ048528', 'Rev, Profit on Disposals & Other (Principle Based)', 2, TO_DATE('08/09/2023 03:51:05', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:51:05', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20289, 'Reconciliation', 'REC_OPINCREVDER', '$M', 'Fair value gain on derivatives the company reported within revenue that S&P adjust EBIT for', 
    '116008:CIQ048529', 'Revenues - Derivatives', 2, TO_DATE('08/09/2023 03:51:05', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:51:05', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20290, 'Reconciliation', 'REC_OPINCOPRO1', '$M', 'Situational adjustments to revenues', 
    '116009:CIQ048530', 'Revenue, Other (Situational)', 2, TO_DATE('08/09/2023 03:51:05', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:51:05', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20291, 'Reconciliation', 'REC_OPINCCOGSRST', '$M', 'Restructuring costs S&P exclude from EBITDA and cost of goods sold (COGS) that the company reported in COGS', 
    '116010:CIQ048531', 'COGS - Restructuring Costs', 2, TO_DATE('08/09/2023 03:51:06', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:51:06', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20292, 'Reconciliation', 'REC_OPINCCOGSVAL', '$M', 'Asset valuation gains S&P exclude from EBITDA and COGS that are reported in COGS', 
    '116011:CIQ048532', 'COGS - Valuation Gains/(Losses)', 2, TO_DATE('08/09/2023 03:51:06', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:51:06', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20293, 'Reconciliation', 'REC_OPINCCOGSOTH', '$M', 'Other income or expense included within cost of goods sold (COGS) that S&P adjusts COGS for', 
    '116012:CIQ048533', 'COGS - Other Non-Operating Nonrecurring Items', 2, TO_DATE('08/09/2023 03:51:06', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:51:06', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20294, 'Reconciliation', 'REC_OPINCCOGSLIFO', '$M', 'Last in first out (LIFO) liquidation gains the company reported in cost of goods sold (COGS) that S&P adjusts EBIT for', 
    '116013:CIQ048534', 'COGS - LIFO Liquidation Gains', 2, TO_DATE('08/09/2023 03:51:07', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:51:07', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20295, 'Reconciliation', 'REC_OPINCXSGARST', '$M', 'Restructuring costs S&P exclude from selling, general and administrative expenses (SG&A) that the company reported in SG&A', 
    '116014:CIQ048535', 'SG&A - Restructuring Costs', 2, TO_DATE('08/09/2023 03:51:07', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:51:07', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20296, 'Reconciliation', 'REC_OPINCXSGAVAL', '$M', 'Asset valuation gains S&P exclude from SG&A that are reported in SG&A', 
    '116015:CIQ048536', 'SG&A - Valuation Gains/(Losses)', 2, TO_DATE('08/09/2023 03:51:07', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:51:07', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20297, 'Reconciliation', 'REC_OPINCXSGAOTH', '$M', 'Other income or expense included within selling, general and administrative expenses (SG&A) that S&P adjusts SG&A for', 
    '116016:CIQ048537', 'SG&A - Other Non-Operating Nonrecurring Items', 2, TO_DATE('08/09/2023 03:51:07', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:51:07', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20298, 'Reconciliation', 'REC_OPINCXRDRST', '$M', 'Restructuring costs S&P exclude from EBITDA and research and development (R&D) that are reported in R&D by the company', 
    '116017:CIQ048538', 'R&D - Restructuring Costs', 2, TO_DATE('08/09/2023 03:51:08', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:51:08', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20299, 'Reconciliation', 'REC_OPINCXRDVAL', '$M', 'Asset valuation gains S&P exclude from research and development (R&D) that are reported in R&D', 
    '116018:CIQ048539', 'R&D - Valuation Gains/(Losses)', 2, TO_DATE('08/09/2023 03:51:08', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:51:08', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20300, 'Reconciliation', 'REC_OPINCXRDOTH', '$M', 'Other income or expense included within research and development (R&D) that S&P adjusts R&D for', 
    '116019:CIQ048540', 'R&D - Other Non-Operating Nonrecurring Items', 2, TO_DATE('08/09/2023 03:51:08', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:51:08', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20301, 'Reconciliation', 'REC_OPINCRMSMRST', '$M', 'Restructuring costs S&P exclude from raw materials, supplies and merchandise (RMS&M) that are reported in RMS&M', 
    '116020:CIQ048541', 'RMS&M - Restructuring Costs', 2, TO_DATE('08/09/2023 03:51:09', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:51:09', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20302, 'Reconciliation', 'REC_OPINCRMSMVAL', '$M', 'Asset valuation gains S&P excludes from EBITDA and raw materials, supplies and merchandise (RMS&M) that are reported in RMS&M', 
    '116021:CIQ048542', 'RMS&M - Valuation Gains/(Losses)', 2, TO_DATE('08/09/2023 03:51:09', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:51:09', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20303, 'Reconciliation', 'REC_OPINCRMSMOTH', '$M', 'Other nonrecurring or nonoperating items S&P excludes from raw materials, supplies and merchandise (RMS&M) that are reported in RMS&M and are not captured in another RMS&M adjustment line', 
    '116022:CIQ048543', 'RMS&M - Other Non-Operating Nonrecurring Items', 2, TO_DATE('08/09/2023 03:51:09', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:51:09', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
Insert into R360_APPDATA.ELEMENT_MASTER
   (ELEMENT_ID, COLUMN_NAME, ITEM_NAME, MAGNITUDE, COLUMN_DEFINITION, 
    REMARKS, PRODUCT_CAPTION, PRODUCT_DECIMAL, CREATE_DATE, CREATE_USER, 
    UPDATE_DATE, UPDATE_USER)
 Values
   (20304, 'Reconciliation', 'REC_OPINCXSTFRST', '$M', 'Restructuring costs S&P exclude from EBITDA and staff costs that the company reported in staff costs', 
    '116023:CIQ048544', 'Staff - Restructuring Costs', 2, TO_DATE('08/09/2023 03:51:09', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 
    TO_DATE('08/09/2023 03:51:09', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA');
COMMIT;


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\R360_NonPublicOpions\R360CFS_Release_Sep8th_2023\tables\tables.sql

ALTER TABLE R360_APPDATA.CRITERIA_TYPES
   DROP PRIMARY KEY CASCADE;

DROP TABLE R360_APPDATA.CRITERIA_TYPES CASCADE CONSTRAINTS;

CREATE TABLE R360_APPDATA.CRITERIA_TYPES
(
   CRITERIA_TYPE_ID     INTEGER NOT NULL,
   CRITERIA_TYPE        VARCHAR2 (100 BYTE) NOT NULL,
   CRITERIA_TYPE_DESC   VARCHAR2 (1000 BYTE),
   RANK_ORDER_NUM       INTEGER,
   ACTV_FLAG            VARCHAR2 (1 BYTE) DEFAULT 'Y' NOT NULL,
   CREATE_DTTM          DATE DEFAULT SYSDATE NOT NULL,
   CREATE_USER          VARCHAR2 (20 BYTE) NOT NULL,
   UPDATE_DTTM          DATE,
   UPDATE_USER          VARCHAR2 (20 BYTE)
);

COMMENT ON TABLE R360_APPDATA.CRITERIA_TYPES IS
   'This table captures the Credit Research article types that are displyed on R360';

COMMENT ON COLUMN R360_APPDATA.CRITERIA_TYPES.CRITERIA_TYPE_ID IS
   'Surrogate PK used to identify a unique row in this table.';

COMMENT ON COLUMN R360_APPDATA.CRITERIA_TYPES.CRITERIA_TYPE IS
   'criteria type UI dropdown values';

COMMENT ON COLUMN R360_APPDATA.CRITERIA_TYPES.CRITERIA_TYPE_DESC IS
   'criteria type UI dropdown values description';

COMMENT ON COLUMN R360_APPDATA.CRITERIA_TYPES.RANK_ORDER_NUM IS
   'This column will define the sort order ';

COMMENT ON COLUMN R360_APPDATA.CRITERIA_TYPES.ACTV_FLAG IS
   'Y/N that specifies whether the record is active';

COMMENT ON COLUMN R360_APPDATA.CRITERIA_TYPES.CREATE_DTTM IS
   'The date and time that this record was created. This column usually appears if there is no start and end dates defined for the record.';

COMMENT ON COLUMN R360_APPDATA.CRITERIA_TYPES.CREATE_USER IS
   'The ID (usually LDAP Text or login used by the process) of the user that created this record.';

COMMENT ON COLUMN R360_APPDATA.CRITERIA_TYPES.UPDATE_DTTM IS
   'The date and time that this record was last updated.  This column usually appears if there is no start and end dates defined for the record.';

COMMENT ON COLUMN R360_APPDATA.CRITERIA_TYPES.UPDATE_USER IS
   'The ID (usually LDAP Text or login used by the process) of the user that last updated this record.';

CREATE UNIQUE INDEX R360_APPDATA.CRITERIA_TYPES_AK
   ON R360_APPDATA.CRITERIA_TYPES (CRITERIA_TYPE);


CREATE UNIQUE INDEX R360_APPDATA.CRITERIA_TYPE_PK
   ON R360_APPDATA.CRITERIA_TYPES (CRITERIA_TYPE_ID);

ALTER TABLE R360_APPDATA.CRITERIA_TYPES ADD (
  CONSTRAINT CRITERIA_TYPE_PK
  PRIMARY KEY
  (CRITERIA_TYPE_ID)
  USING INDEX R360_APPDATA.CRITERIA_TYPE_PK
  ENABLE VALIDATE);

GRANT SELECT ON R360_APPDATA.CRITERIA_TYPES TO R360_APPDATA_READER;
GRANT SELECT,
      INSERT,
      UPDATE,
      DELETE
   ON R360_APPDATA.CRITERIA_TYPES
   TO R360_APPDATA_WRITER;

ALTER TABLE R360_APPDATA.CRITERIA_TYPE_MAP
   DROP PRIMARY KEY CASCADE;

DROP TABLE R360_APPDATA.CRITERIA_TYPE_MAP CASCADE CONSTRAINTS;

CREATE TABLE R360_APPDATA.CRITERIA_TYPE_MAP
(
   CRITERIA_TYPE_MAP_ID   INTEGER NOT NULL,
   CRITERIA_TYPE_ID       INTEGER NOT NULL,
   MENU_CODE              VARCHAR2 (2000 BYTE),
   ACTV_FLAG              VARCHAR2 (1 BYTE) DEFAULT 'Y' NOT NULL,
   CREATE_DTTM            DATE DEFAULT SYSDATE NOT NULL,
   CREATE_USER            VARCHAR2 (20 BYTE) NOT NULL,
   UPDATE_DTTM            DATE,
   UPDATE_USER            VARCHAR2 (20 BYTE)
);

COMMENT ON TABLE R360_APPDATA.CRITERIA_TYPE_MAP IS
   'This table captures the criteria type mapping for R360';

COMMENT ON COLUMN R360_APPDATA.CRITERIA_TYPE_MAP.CRITERIA_TYPE_MAP_ID IS
   'Surrogate PK used to identify a unique row in this table.';

COMMENT ON COLUMN R360_APPDATA.CRITERIA_TYPE_MAP.CRITERIA_TYPE_ID IS
   'FK from CRITERIA_TYPES table';

COMMENT ON COLUMN R360_APPDATA.CRITERIA_TYPE_MAP.MENU_CODE IS
   'FK pointing to a unique row in the CRITERIA_SUBJECT_CODES table.';

COMMENT ON COLUMN R360_APPDATA.CRITERIA_TYPE_MAP.ACTV_FLAG IS
   'Y/N that specifies whether the record is active';

COMMENT ON COLUMN R360_APPDATA.CRITERIA_TYPE_MAP.CREATE_DTTM IS
   'The date and time that this record was created. This column usually appears if there is no start and end dates defined for the record.';

COMMENT ON COLUMN R360_APPDATA.CRITERIA_TYPE_MAP.CREATE_USER IS
   'The ID (usually LDAP Text or login used by the process) of the user that created this record.';

COMMENT ON COLUMN R360_APPDATA.CRITERIA_TYPE_MAP.UPDATE_DTTM IS
   'The date and time that this record was last updated.  This column usually appears if there is no start and end dates defined for the record.';

COMMENT ON COLUMN R360_APPDATA.CRITERIA_TYPE_MAP.UPDATE_USER IS
   'The ID (usually LDAP Text or login used by the process) of the user that last updated this record.';

CREATE UNIQUE INDEX R360_APPDATA.CRITERIA_TYPE_MAP_AK
   ON R360_APPDATA.CRITERIA_TYPE_MAP (CRITERIA_TYPE_ID, MENU_CODE);


CREATE UNIQUE INDEX R360_APPDATA.CRITERIA_TYPE_MAP_PK
   ON R360_APPDATA.CRITERIA_TYPE_MAP (CRITERIA_TYPE_MAP_ID);

GRANT SELECT ON R360_APPDATA.CRITERIA_TYPE_MAP TO R360_APPDATA_READER;
GRANT SELECT,
      INSERT,
      UPDATE,
      DELETE
   ON R360_APPDATA.CRITERIA_TYPE_MAP
   TO R360_APPDATA_WRITER;

ALTER TABLE R360_APPDATA.CONFIGURATION_DETAILS
   DROP PRIMARY KEY CASCADE;

DROP TABLE R360_APPDATA.CONFIGURATION_DETAILS CASCADE CONSTRAINTS;

CREATE TABLE R360_APPDATA.CONFIGURATION_DETAILS
(
   CONFIG_KEY     VARCHAR2 (50) NOT NULL ENABLE,
   CONFIG_VALUE   NUMBER (*, 0),
   CREATED_USER   VARCHAR2 (50),
   PRIMARY KEY (CONFIG_KEY)
);

GRANT SELECT ON R360_APPDATA.CONFIGURATION_DETAILS TO R360_APPDATA_READER;

GRANT SELECT,
      INSERT,
      UPDATE,
      DELETE
   ON R360_APPDATA.CONFIGURATION_DETAILS
   TO R360_APPDATA_WRITER;

ALTER TABLE R360_APPDATA.DATAELEMENT_UI_CONFIG
   DROP PRIMARY KEY CASCADE;

DROP TABLE R360_APPDATA.DATAELEMENT_UI_CONFIG CASCADE CONSTRAINTS;

CREATE TABLE R360_APPDATA.DATAELEMENT_UI_CONFIG
(
   DATAELEMENT_UI_CONFIG_ID   INTEGER NOT NULL,
   ANALYTIC_CASE_TYPE         VARCHAR2 (25 BYTE),
   DATAELEMENT_CODE           VARCHAR2 (100 BYTE) NOT NULL,
   DATAELEMENT_TYPE           VARCHAR2 (100 BYTE) NOT NULL,
   DATAELEMENT_GROUP          VARCHAR2 (100 BYTE),
   FIN_DATA_ELEMENT_ID        INTEGER,
   DATAELEMENT_DISPLAY_NAME   VARCHAR2 (255 BYTE),
   DATAELEMENT_DEFINITION     VARCHAR2 (4000 BYTE),
   SORT_ORDER                 INTEGER,
   HIGHLIGHT_FLAG             CHAR (1 BYTE),
   CREATE_DTTM                DATE DEFAULT SYSDATE NOT NULL,
   CREATE_USER                VARCHAR2 (20 BYTE) NOT NULL,
   UPDATE_DTTM                DATE,
   UPDATE_USER                VARCHAR2 (20 BYTE),
   ROW_SEPERATOR_FLAG         CHAR (1 BYTE),
   COL_DETAIL_MODE            NUMBER (5),
   HIDDEN_MNEM_FLAG           CHAR (1 BYTE) DEFAULT 'N'
);

COMMENT ON TABLE R360_APPDATA.DATAELEMENT_UI_CONFIG IS
   'This table captures R360 UI data element display configuration details';

COMMENT ON COLUMN R360_APPDATA.DATAELEMENT_UI_CONFIG.ANALYTIC_CASE_TYPE IS
   'This column will define if this is for CORP,BANK,IST,etc. These values should match with the source ANALYTIC_CASE_TYPE';

COMMENT ON COLUMN R360_APPDATA.DATAELEMENT_UI_CONFIG.DATAELEMENT_TYPE IS
   'This column will define the section of the data element.Ex: SCORES "&" MODIFIERS, Financials ';

COMMENT ON COLUMN R360_APPDATA.DATAELEMENT_UI_CONFIG.DATAELEMENT_GROUP IS
   'This column will define the group in the section.Ex:Scores,Scores,Anchor "&" Bank-Specific Factors,etc  ';

COMMENT ON COLUMN R360_APPDATA.DATAELEMENT_UI_CONFIG.DATAELEMENT_DISPLAY_NAME IS
   'This column will define the display name of the data element';

COMMENT ON COLUMN R360_APPDATA.DATAELEMENT_UI_CONFIG.DATAELEMENT_DEFINITION IS
   'This column will define the display definition of the data element.';

COMMENT ON COLUMN R360_APPDATA.DATAELEMENT_UI_CONFIG.SORT_ORDER IS
   'This column will define the sort order of the data element for ANALYTIC_CASE_TYPE,DATAELEMENT_TYPE combination ';

COMMENT ON COLUMN R360_APPDATA.DATAELEMENT_UI_CONFIG.HIGHLIGHT_FLAG IS
   'This column will provide which datapoint needs to be higlighted';

COMMENT ON COLUMN R360_APPDATA.DATAELEMENT_UI_CONFIG.CREATE_DTTM IS
   'The date and time that this record was created. This column usually appears if there is no start and end dates defined for the record.';

COMMENT ON COLUMN R360_APPDATA.DATAELEMENT_UI_CONFIG.CREATE_USER IS
   'The ID (usually LDAP Text or login used by the process) of the user that created this record.';

COMMENT ON COLUMN R360_APPDATA.DATAELEMENT_UI_CONFIG.UPDATE_DTTM IS
   'The date and time that this record was last updated.  This column usually appears if there is no start and end dates defined for the record.';

COMMENT ON COLUMN R360_APPDATA.DATAELEMENT_UI_CONFIG.UPDATE_USER IS
   'The ID (usually LDAP Text or login used by the process) of the user that last updated this record.';

COMMENT ON COLUMN R360_APPDATA.DATAELEMENT_UI_CONFIG.ROW_SEPERATOR_FLAG IS
   'This flag is added to identify the row seperator after which product caption for the Financial data';

COMMENT ON COLUMN R360_APPDATA.DATAELEMENT_UI_CONFIG.COL_DETAIL_MODE IS
   'This column is added to identify whether the product caption have definition/chart or the Financial data. (0 - No options, 1 - view defintion, 3 - view definition and chart)';

COMMENT ON COLUMN R360_APPDATA.DATAELEMENT_UI_CONFIG.HIDDEN_MNEM_FLAG IS
   'Hide menmmonic when it has no value. Y/N 
Set to Y when we don''t have to show mnemmonic on UI when there is no value available for that mnemmonic.';

CREATE UNIQUE INDEX R360_APPDATA.DATAELEMENT_UI_CONFIG_AK
   ON R360_APPDATA.DATAELEMENT_UI_CONFIG (ANALYTIC_CASE_TYPE,
                                          DATAELEMENT_CODE,
                                          DATAELEMENT_GROUP,
                                          DATAELEMENT_TYPE);


CREATE UNIQUE INDEX R360_APPDATA.DATAELEMENT_UI_CONFIG_PK
   ON R360_APPDATA.DATAELEMENT_UI_CONFIG (DATAELEMENT_UI_CONFIG_ID);


ALTER TABLE R360_APPDATA.DATAELEMENT_UI_CONFIG ADD (
  CONSTRAINT DATAELEMENT_UI_CONFIG_PK
  PRIMARY KEY
  (DATAELEMENT_UI_CONFIG_ID)
  USING INDEX R360_APPDATA.DATAELEMENT_UI_CONFIG_PK
  ENABLE VALIDATE,
  CONSTRAINT DATAELEMENT_UI_CONFIG_AK
  UNIQUE (ANALYTIC_CASE_TYPE, DATAELEMENT_CODE, DATAELEMENT_GROUP, DATAELEMENT_TYPE)
  USING INDEX R360_APPDATA.DATAELEMENT_UI_CONFIG_AK
  ENABLE VALIDATE);

GRANT SELECT ON R360_APPDATA.DATAELEMENT_UI_CONFIG TO R360_APPDATA_READER;
GRANT SELECT,
      INSERT,
      UPDATE,
      DELETE
   ON "R360_APPDATA"."DATAELEMENT_UI_CONFIG"
   TO R360_APPDATA_WRITER;

ALTER TABLE R360_APPDATA.ELEMENT_MASTER
   DROP PRIMARY KEY CASCADE;

DROP TABLE R360_APPDATA.ELEMENT_MASTER CASCADE CONSTRAINTS;

CREATE TABLE R360_APPDATA.ELEMENT_MASTER
(
   ELEMENT_ID          INTEGER NOT NULL,
   DB_NAME             VARCHAR2 (30 BYTE),
   SCHEMA_NAME         VARCHAR2 (30 BYTE),
   TABLE_NAME          VARCHAR2 (30 BYTE),
   COLUMN_NAME         VARCHAR2 (30 BYTE),
   OBJECT_ALIAS        VARCHAR2 (50 BYTE),
   ITEM_NAME           VARCHAR2 (50 BYTE),
   ITEM_ALIAS          VARCHAR2 (50 BYTE),
   MAGNITUDE           VARCHAR2 (10 BYTE),
   COLUMN_DEFINITION   VARCHAR2 (4000 BYTE),
   REMARKS             VARCHAR2 (100 BYTE),
   PRODUCT_MAGNITUDE   VARCHAR2 (10 BYTE),
   PRODUCT_CAPTION     VARCHAR2 (100 BYTE),
   PRODUCT_DECIMAL     INTEGER,
   CREATE_DATE         DATE DEFAULT SYSDATE NOT NULL,
   CREATE_USER         VARCHAR2 (20 BYTE) NOT NULL,
   UPDATE_DATE         DATE,
   UPDATE_USER         VARCHAR2 (20 BYTE)
);

COMMENT ON COLUMN R360_APPDATA.ELEMENT_MASTER.CREATE_DATE IS
   'The date and time that this record was created. This column usually appears if there is no start and end dates defined for the record.';

COMMENT ON COLUMN R360_APPDATA.ELEMENT_MASTER.CREATE_USER IS
   'The ID (usually LDAP Text or login used by the process) of the user that created this record.';

COMMENT ON COLUMN R360_APPDATA.ELEMENT_MASTER.UPDATE_DATE IS
   'The date and time that this record was last updated.  This column usually appears if there is no start and end dates defined for the record.';

COMMENT ON COLUMN R360_APPDATA.ELEMENT_MASTER.UPDATE_USER IS
   'The ID (usually LDAP Text or login used by the process) of the user that last updated this record.';

CREATE UNIQUE INDEX R360_APPDATA.XPKELEMENT_MASTER
   ON R360_APPDATA.ELEMENT_MASTER (ELEMENT_ID);


ALTER TABLE R360_APPDATA.ELEMENT_MASTER ADD (
  CONSTRAINT XPKELEMENT_MASTER
  PRIMARY KEY
  (ELEMENT_ID)
  USING INDEX R360_APPDATA.XPKELEMENT_MASTER
  ENABLE VALIDATE);

GRANT SELECT ON R360_APPDATA.ELEMENT_MASTER TO R360_APPDATA_READER;
GRANT SELECT,
      INSERT,
      UPDATE,
      DELETE
   ON "R360_APPDATA"."ELEMENT_MASTER"
   TO R360_APPDATA_WRITER;
   
   
DROP TABLE R360_APPDATA.CRARTICLE_TYPE_MAP;
DROP TABLE R360_APPDATA.CRARTICLE_TYPES;

CREATE TABLE R360_APPDATA.CRARTICLE_TYPES
(
    CRARTICLE_TYPE_ID    INTEGER  NOT NULL ,
    CRARTICLE_TYPE       VARCHAR2(100)  NOT NULL ,
    CRARTICLE_TYPE_DESC  VARCHAR2(1000)  NULL ,
    RANK_ORDER_NUM       INTEGER  NULL ,
    ACTV_FLAG            VARCHAR2(1)  DEFAULT 'Y'  NOT NULL ,
    CREATE_DTTM          DATE  DEFAULT SYSDATE  NOT NULL ,
    CREATE_USER          VARCHAR2(20)  NOT NULL ,
    UPDATE_DTTM          DATE  NULL ,
    UPDATE_USER          VARCHAR2(20)  NULL 
)
TABLESPACE R360_APPDATA_TS;

COMMENT ON TABLE R360_APPDATA.CRARTICLE_TYPES IS 
	'This table captures the Credit Research article types that are displyed on R360';

COMMENT ON COLUMN R360_APPDATA.CRARTICLE_TYPES.CRARTICLE_TYPE IS 
	'Credit Research Article type code';

COMMENT ON COLUMN R360_APPDATA.CRARTICLE_TYPES.CREATE_DTTM IS 
	'The date and time that this record was created. This column usually appears if there is no start and end dates defined for the record.';

COMMENT ON COLUMN R360_APPDATA.CRARTICLE_TYPES.CREATE_USER IS 
	'The ID (usually LDAP Text or login used by the process) of the user that created this record.';

COMMENT ON COLUMN R360_APPDATA.CRARTICLE_TYPES.UPDATE_DTTM IS 
	'The date and time that this record was last updated.  This column usually appears if there is no start and end dates defined for the record.';

COMMENT ON COLUMN R360_APPDATA.CRARTICLE_TYPES.UPDATE_USER IS 
	'The ID (usually LDAP Text or login used by the process) of the user that last updated this record.';

COMMENT ON COLUMN R360_APPDATA.CRARTICLE_TYPES.CRARTICLE_TYPE_DESC IS 
	'Credit Research Article type description displayed on R360';

COMMENT ON COLUMN R360_APPDATA.CRARTICLE_TYPES.CRARTICLE_TYPE_ID IS 
	'This column will define if this is for CORP,BANK,IST,etc. These values should match with the source ANALYTIC_CASE_TYPE';

COMMENT ON COLUMN R360_APPDATA.CRARTICLE_TYPES.RANK_ORDER_NUM IS 
	'This column will define the sort order ';

COMMENT ON COLUMN R360_APPDATA.CRARTICLE_TYPES.ACTV_FLAG IS 
	'Y/N that specifies whether the record is active';

CREATE UNIQUE INDEX R360_APPDATA.CRARTICLE_TYPES_PK 
	ON R360_APPDATA.CRARTICLE_TYPES (CRARTICLE_TYPE_ID    ASC) TABLESPACE R360_APPDATA_IS;

ALTER TABLE R360_APPDATA.CRARTICLE_TYPES
    ADD CONSTRAINT  CRARTICLE_TYPES_PK PRIMARY KEY (CRARTICLE_TYPE_ID);

CREATE UNIQUE INDEX R360_APPDATA.CRARTICLE_TYPES_AK 
	ON R360_APPDATA.CRARTICLE_TYPES (CRARTICLE_TYPE    ASC) TABLESPACE R360_APPDATA_IS;

ALTER TABLE R360_APPDATA.CRARTICLE_TYPES
	ADD CONSTRAINT  CRARTICLE_TYPES_AK UNIQUE (CRARTICLE_TYPE);
	
GRANT SELECT ON R360_APPDATA.CRARTICLE_TYPES TO R360_APPDATA_READER;
GRANT SELECT,
			  INSERT,
			  UPDATE,
			  DELETE
   ON R360_APPDATA.CRARTICLE_TYPES
			TO R360_APPDATA_WRITER;

CREATE TABLE R360_APPDATA.CRARTICLE_TYPE_MAP
(
    CRARTICLE_TYPE_MAP_ID INTEGER  NOT NULL ,
    SOURCE_ARTICLE_TYPE  VARCHAR2(100)  NOT NULL ,
    SOURCE_ARTICLE_SUB_TYPE VARCHAR2(100)  NULL ,
    CRARTICLE_TYPE_ID    INTEGER  NULL ,
    ACTV_FLAG            VARCHAR2(1)  DEFAULT 'Y'  NOT NULL ,
    CREATE_DTTM          DATE  DEFAULT SYSDATE  NOT NULL ,
    CREATE_USER          VARCHAR2(20)  NOT NULL ,
    UPDATE_DTTM          DATE  NULL ,
    UPDATE_USER          VARCHAR2(20)  NULL 
) 	TABLESPACE R360_APPDATA_TS;
	
COMMENT ON TABLE R360_APPDATA.CRARTICLE_TYPE_MAP IS 
	'This table captures the article type to subtype mapping for R360';

COMMENT ON COLUMN R360_APPDATA.CRARTICLE_TYPE_MAP.SOURCE_ARTICLE_TYPE IS 
	'FK pointing to a unique row in the ARTICLE_TYPES table.';

COMMENT ON COLUMN R360_APPDATA.CRARTICLE_TYPE_MAP.CREATE_DTTM IS 
	'The date and time that this record was created. This column usually appears if there is no start and end dates defined for the record.';

COMMENT ON COLUMN R360_APPDATA.CRARTICLE_TYPE_MAP.CREATE_USER IS 
	'The ID (usually LDAP Text or login used by the process) of the user that created this record.';

COMMENT ON COLUMN R360_APPDATA.CRARTICLE_TYPE_MAP.UPDATE_DTTM IS 
	'The date and time that this record was last updated.  This column usually appears if there is no start and end dates defined for the record.';

COMMENT ON COLUMN R360_APPDATA.CRARTICLE_TYPE_MAP.UPDATE_USER IS 
	'The ID (usually LDAP Text or login used by the process) of the user that last updated this record.';

COMMENT ON COLUMN R360_APPDATA.CRARTICLE_TYPE_MAP.SOURCE_ARTICLE_SUB_TYPE IS 
	'FK pointing to a unique row in the ARTICLE_SUB_TYPES table.';

COMMENT ON COLUMN R360_APPDATA.CRARTICLE_TYPE_MAP.CRARTICLE_TYPE_MAP_ID IS 
	'Surrogate PK used to identify a unique row in this table.';

COMMENT ON COLUMN R360_APPDATA.CRARTICLE_TYPE_MAP.CRARTICLE_TYPE_ID IS 
	'FK pointing to a unique row in the CRARTICLE_TYPES table.';

COMMENT ON COLUMN R360_APPDATA.CRARTICLE_TYPE_MAP.ACTV_FLAG IS 
	'Y/N that specifies whether the record is active';

CREATE UNIQUE INDEX R360_APPDATA.CRARTICLE_TYPE_MAP_PK 
	ON R360_APPDATA.CRARTICLE_TYPE_MAP (CRARTICLE_TYPE_MAP_ID    ASC) TABLESPACE R360_APPDATA_IS;

ALTER TABLE R360_APPDATA.CRARTICLE_TYPE_MAP
    ADD CONSTRAINT  CRARTICLE_TYPE_MAP_PK PRIMARY KEY (CRARTICLE_TYPE_MAP_ID);

CREATE UNIQUE INDEX R360_APPDATA.CRARTICLE_TYPE_MAP_AK 
	ON R360_APPDATA.CRARTICLE_TYPE_MAP (SOURCE_ARTICLE_TYPE   ASC,SOURCE_ARTICLE_SUB_TYPE   ASC,CRARTICLE_TYPE_ID    ASC) TABLESPACE R360_APPDATA_IS;

ALTER TABLE R360_APPDATA.CRARTICLE_TYPE_MAP
	ADD  CONSTRAINT  CRARTICLE_TYPE_MAP_AK UNIQUE (SOURCE_ARTICLE_TYPE,SOURCE_ARTICLE_SUB_TYPE,CRARTICLE_TYPE_ID);

ALTER TABLE R360_APPDATA.CRARTICLE_TYPE_MAP
    ADD (CONSTRAINT CRARTICLE_TYPE_ID_FK FOREIGN KEY (CRARTICLE_TYPE_ID) REFERENCES R360_APPDATA.CRARTICLE_TYPES (CRARTICLE_TYPE_ID) ON DELETE SET NULL);

GRANT SELECT ON R360_APPDATA.CRARTICLE_TYPE_MAP TO R360_APPDATA_READER;
GRANT SELECT,
			  INSERT,
			  UPDATE,
			  DELETE
   ON R360_APPDATA.CRARTICLE_TYPE_MAP
		TO R360_APPDATA_WRITER;


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\R360_NonPublicOpions\R360CFS_Release_Sep8th_2023\views\R360_APPDATA.VW_NR_SUSFIN_GET_ARTICLETOPICS.vw

Create Or Replace View 
 R360_APPDATA.VW_NR_SUSFIN_GET_ARTICLETOPICS as
(
select 
subject_id as KeyCreditResearchArticleTopic,
long_description as CreditResearchArticleTopic
from SPAPP.Subjects
where subject_id in (8249, 8248, 8253)  );

GRANT SELECT ON R360_APPDATA.VW_NR_SUSFIN_GET_ARTICLETOPICS TO R360_APPDATA_READER;


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\R360_NonPublicOpions\R360CFS_Release_Sep8th_2023\views\VW_ACTIVE_INSTRUMENTS_PVT.vw

SET DEFINE OFF;
/* Formatted on 8/29/2023 10:17:34 AM (QP5 v5.362) */
CREATE OR REPLACE FORCE VIEW R360_APPDATA.VW_ACTIVE_INSTRUMENTS_PVT
(
    INSTRUMENT_ID,
    INSTRUMENT_DETAIL_ID,
    RATING_TYPE_CODE,
    ACTIVE_RATING_IND
)
BEQUEATH DEFINER
AS
    SELECT i.INSTRUMENT_ID,
           NULL    AS INSTRUMENT_DETAIL_ID,
           pdtr.RATING_TYPE_CODE,
           CASE
               WHEN    (    pdtr.DEBT_TYPE_RATING_CODE NOT IN ('NR', 'NR/NR')
                        AND NOT REGEXP_LIKE (pdtr.DEBT_TYPE_RATING_CODE,
                                             '.[^/]NR')
                        AND i.source_status_ind <> 'Y')
                    OR (TRUNC (SYSDATE) - TRUNC (pdtr.data_admin_date) <= 90)
               THEN
                   'Y'
               ELSE
                   'N'
           END     rating_status
      FROM CORE.PROGRAM_DEBT_TYPES         pdt,
           CORE.PROGRAM_DEBT_TYPE_RATINGS  pdtr,
           FGR.INSTRUMENTS                 i
     WHERE     pdtr.PROGRAM_DEBT_TYPE_ID = pdt.PROGRAM_DEBT_TYPE_ID
           AND pdt.EXCLUDE_FROM_PRODUCTS_IND = 'N'
           AND pdtr.EXCLUDE_FROM_PRODUCTS_IND = 'N'
           AND pdtr.CONFIDENTIALITY_IND = 'Y'
           AND pdtr.CONFIDENTIAL_CATEGORY_CODE IN ('CIR', 'PVT')
           AND pdtr.CURR_IND = 'Y'
           AND i.SOURCE_INSTRUMENT_IND = 'R'
           AND i.RELATED_INSTRUMENT_ID = pdt.PROGRAM_ID
           AND i.SOURCE_INSTRUMENT_ID = pdt.PROGRAM_DEBT_TYPE_ID
    UNION ALL
    SELECT id.instrument_id,
           id.INSTRUMENT_DETAIL_ID    AS INSTRUMENT_DETAIL_ID,
           rtg.rating_type_code,
           CASE
               WHEN    (    rtg.RATING_CODE NOT IN ('NR', 'NR/NR')
                        AND NOT REGEXP_LIKE (rtg.RATING_CODE, '.[^/]NR')
                        AND id.source_status_ind <> 'Y')
                    OR (TRUNC (SYSDATE) - TRUNC (rtg.data_admin_date) <= 90)
               THEN
                   'Y'
               ELSE
                   'N'
           END                        rating_status
      FROM CORE.RATINGS rtg, FGR_PRIME.INSTRUMENT_DETAILS id
     WHERE     rtg.EXCLUDE_FROM_PRODUCTS_IND = 'N'
           AND rtg.CONFIDENTIALITY_IND = 'Y'
           AND rtg.CONFIDENTIAL_CATEGORY_CODE IN ('CIR', 'PVT')
           AND rtg.CURR_IND = 'Y'
           AND rtg.ISSUE_ID_TABLE_IND = 'M'
           AND id.SOURCE_INSTRUMENT_DETAIL_ID = rtg.ISSUE_ID
/


GRANT SELECT ON R360_APPDATA.VW_ACTIVE_INSTRUMENTS_PVT TO R360_APPDATA_READER
/


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\R360_NonPublicOpions\R360CFS_Release_Sep8th_2023\views\VW_CORE_REVIEW_HISTORY_LRD.vw

SET DEFINE OFF;
/* Formatted on 8/29/2023 10:17:38 AM (QP5 v5.362) */
CREATE OR REPLACE FORCE VIEW R360_APPDATA.VW_CORE_REVIEW_HISTORY_LRD
(
    RATING_ID,
    RATED_ENTITY_TYPE,
    LAST_REVIEW_DATE
)
BEQUEATH DEFINER
AS
      SELECT rdh.RATING_ID             AS RATING_ID,
             rdh.RATED_ENTITY_TYPE     AS RATED_ENTITY_TYPE,
             MAX (rdh.REVIEW_DATE)     AS LAST_REVIEW_DATE
        FROM CORE.REVIEW_HISTORY rdh
       WHERE rdh.ACTIVE_FLAG = 'Y'
    GROUP BY rdh.RATING_ID, rdh.RATED_ENTITY_TYPE
/


GRANT SELECT ON R360_APPDATA.VW_CORE_REVIEW_HISTORY_LRD TO R360_APPDATA_READER
/


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\R360_NonPublicOpions\R360CFS_Release_Sep8th_2023\views\VW_CRITERIA_ARTICLES.vw

CREATE OR REPLACE VIEW R360_APPDATA.VW_CRITERIA_ARTICLES AS
SELECT ao.article_id,
				REPLACE(REPLACE(ao.preferred_title, '<br>', ' '), '<BR>', ' ') AS title,
				ao.article_date,
				CASE WHEN (emp.employee_name IS NULL OR emp.employee_name = 'Standard & Poor''s') 
							THEN 'S&P Global Ratings'
					  WHEN emp.mi IS NULL 
							THEN emp.first_name || ' ' || emp.last_name_from_source 
					  ELSE emp.first_name || ' ' || emp.mi || ' ' || emp.last_name_from_source 
				END AS author,
				ctm.criteria_type_id,
				ct.criteria_type,
				CASE
				  WHEN ao.preferred_title LIKE 'ARCHIVE%' 
						THEN 'Y'
				  ELSE 'N' 
				END AS archive_ind
	  FROM fgr.article_objects ao
			JOIN fgr.article_relationships ar 
					ON ao.article_id = ar.article_id
			JOIN spapp.criteria_subject_codes csc 
					ON ar.relate_id = csc.subject_code
			JOIN r360_appdata.criteria_type_map ctm 
					ON csc.menu_code = ctm.menu_code
			JOIN r360_appdata.criteria_types ct 
					ON ctm.criteria_type_id = ct.criteria_type_id
			LEFT JOIN fgr.article_users au 
					ON ao.article_id = au.article_id 
						AND au.user_role = 'AUTHOR' AND au.ack_status IN ('D', 'Y') AND au.ciq_rep_ind = 1 
			LEFT JOIN spapp.employees emp 
					ON au.user_id = emp.employee_id 
						AND emp.active_ind = 'Y'
	  WHERE ar.relate_ind = 'S' AND ar.status_ind = 'A' AND ar.ack_status IN ('D', 'Y') AND ar.ciq_rep_ind = 1
			AND ao.fgr_status = 'A' AND ao.status_ind = 'A' AND ao.ack_status IN ('D', 'Y') AND ao.ciq_rep_ind = 1 AND ao.language_code = 'EN'  
			AND ao.article_sub_type IN ('CRITERIA', 'CRITERIA_GUIDANCE', 'COMMENTS') 
			AND csc.status_ind = 'A';
GRANT SELECT ON R360_APPDATA.VW_CRITERIA_ARTICLES TO R360_APPDATA_READER;


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\R360_NonPublicOpions\R360CFS_Release_Sep8th_2023\views\VW_CURRENT_INSTRUMENTS_WITH_ACTIVE_RATING_IND.vw

SET DEFINE OFF;
/* Formatted on 8/29/2023 10:17:40 AM (QP5 v5.362) */
CREATE OR REPLACE FORCE VIEW R360_APPDATA.VW_CURRENT_INSTRUMENTS_WITH_ACTIVE_RATING_IND
(
    INSTRUMENT_ID,
    INSTRUMENT_DETAIL_ID,
    RATING_DETAIL_ID,
    RATING_TYPE_CODE,
    RATING_CODE,
    RATING_DATE,
    DATA_ADMIN_DATE,
    REGULATORY_INDICATOR,
    SRD_CURR_IND,
    CURRENT_RATING_SYMBOL,
    DEBT_TYPE_CODE,
    RATING_TYPE_DESCRIPTION,
    PRELIM_IND,
    PRECEDENCE_NUM,
    INSTRUMENT_IND,
    INSTRUMENT_NAME,
    INSTRUMENT_TYPE_CODE,
    CURRENCY_TYPE_CODE,
    INSTRUMENT_DATE,
    CLOSED_DATE,
    MATURITY_DATE,
    DEPT_CODE,
    SUB_SECTOR_CODE,
    SECTOR_CODE,
    PROGRAM_TYPE_CODE,
    CUSIP,
    CINS,
    ISIN,
    NON_AFFIRM_RATING_ID,
    COUPON_RATE,
    CLASS_AMOUNT,
    SOURCE_INSTRUMENT_ID,
    MUNICIPAL_CATEGORY_CODE,
    MUNICIPAL_SECURITY_CODE,
    SERIES,
    REFUNDED_IND,
    RATING_STATUS,
    ACTIVE_RATING_IND
)
BEQUEATH DEFINER
AS
    (SELECT current_instruments.instrument_id,
            current_instruments.instrument_detail_id,
            current_instruments.rating_detail_id,
            current_instruments.rating_type_code,
            current_instruments.rating_code,
            current_instruments.rating_date,
            current_instruments.data_admin_date,
            current_instruments.regulatory_indicator,
            current_instruments.srd_curr_ind,
            current_instruments.current_rating_symbol,
            current_instruments.debt_type_code,
            current_instruments.rating_type_description,
            current_instruments.prelim_ind,
            current_instruments.precedence_num,
            current_instruments.instrument_ind,
            current_instruments.instrument_name,
            current_instruments.instrument_type_code,
            current_instruments.currency_type_code,
            current_instruments.instrument_date,
            current_instruments.closed_date,
            current_instruments.maturity_date,
            current_instruments.dept_code,
            current_instruments.sub_sector_code,
            current_instruments.sector_code,
            current_instruments.program_type_code,
            current_instruments.cusip,
            current_instruments.cins,
            current_instruments.isin,
            current_instruments.non_affirm_rating_id,
            current_instruments.coupon_rate,
            current_instruments.class_amount,
            current_instruments.source_instrument_id,
            current_instruments.municipal_category_code,
            current_instruments.municipal_security_code,
            current_instruments.series,
            current_instruments.refunded_ind,
            current_instruments.rating_status,
            (MAX (current_instruments.rating_status)
                 OVER (
                     PARTITION BY current_instruments.instrument_id,
                                  current_instruments.instrument_detail_id))    AS active_rating_ind
       FROM (SELECT r.rating_id                   AS instrument_id,
                    COALESCE (r.detail_id, -1)    AS instrument_detail_id,
                    r.rating_detail_id,
                    jrtc.description              AS rating_type_description,
                    r.rating_type_code,
                    r.rating_code,
                    r.rating_date,
                    r.data_admin_date,
                    r.regulatory_indicator,
                    r.srd_curr_ind,
                    r.current_rating_symbol,
                    r.debt_type_code,
                    r.non_affirm_rating_id,
                    i.instrument_ind,
                    i.instrument_name,
                    i.instrument_type_code,
                    i.currency_type_code,
                    i.instrument_date,
                    i.closed_date,
                    i.dept_code,
                    i.sub_sector_code,
                    i.sector_code,
                    i.program_type_code,
                    i.source_instrument_id,
                    i.municipal_category_code,
                    i.municipal_security_code,
                    i.series,
                    i.maturity_date,
                    ide.cusip9                    AS cusip,
                    ide.cins,
                    ide.isins                     AS isin,
                    ide.coupon_rate,
                    ide.class_amount,
                    ide.refunded_ind,
                    jrtc.prelim_ind,
                    jrtc.precedence_num,
                    (CASE
                         WHEN ((   (    r.rating_code NOT IN ('NR', 'NR/NR')
                                    AND NOT r.rating_code LIKE '.[^/]NR'
                                    AND COALESCE (ide.source_status_ind,
                                                  i.source_status_ind) <>
                                        'Y')
                                OR (CURRENT_DATE - TRUNC (r.data_admin_date)) <=
                                   90))
                         THEN
                             'Y'
                         ELSE
                             'N'
                     END)                         AS rating_status
               FROM (SELECT *
                       FROM FGR_PRIME.RATING_DETAILS
                      WHERE ciq_rep_ind = 1 AND ack_status = 'Y') r
                    INNER JOIN (SELECT *
                                  FROM FGR.INSTRUMENTS
                                 WHERE source_system = 'CORE') i
                        ON r.rating_id = i.instrument_id
                    LEFT OUTER JOIN (SELECT *
                                       FROM FGR_PRIME.INSTRUMENT_DETAILS
                                      WHERE source_system = 'CORE') ide
                        ON     r.rating_id = ide.instrument_id
                           AND r.detail_id = ide.instrument_detail_id
                           AND i.instrument_id = ide.instrument_id
                    INNER JOIN
                    (SELECT rtcm.rating_type_code,
                            rtc.description,
                            rtc.prelim_ind,
                            rtc.long_short_ind,
                            rtcm.rank_order_num     AS sort_order,
                            rtc.precedence_num
                       FROM R360_APPDATA.RATING_TYPE_CODE_MAP  rtcm
                            INNER JOIN SPAPP.RATING_TYPE_CODES rtc
                                ON RTCM.RATING_TYPE_CODE =
                                   RTC.RATING_TYPE_CODE
                      WHERE rtcm.actv_flag = 'Y' AND rtcm.process_ind = 'Y')
                    jrtc
                        ON R.RATING_TYPE_CODE = jrtc.rating_type_code
              WHERE r.srd_curr_ind = 'Y' AND r.rating_ind = 'I')
            current_instruments)
/


GRANT SELECT ON R360_APPDATA.VW_CURRENT_INSTRUMENTS_WITH_ACTIVE_RATING_IND TO R360_APPDATA_READER
/


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\R360_NonPublicOpions\R360CFS_Release_Sep8th_2023\views\VW_CURRENT_RATINGS_PEERS_PVT_PUB.vw

SET DEFINE OFF;
/* Formatted on 8/29/2023 10:17:44 AM (QP5 v5.362) */
CREATE OR REPLACE FORCE VIEW R360_APPDATA.VW_CURRENT_RATINGS_PEERS_PVT_PUB
(
    ENTITY_ID,
    ENTITY_LEGAL_NAME,
    RATING_TYPE_CODE,
    CURRENT_RATING_SYMBOL,
    DEBT_TYPE_CODE,
    RATING_DATE,
    LAST_REVIEW_DATE,
    LATEST_NON_AFFIRM_CW_OL,
    LATEST_NON_AFFIRM_CW_OL_DATE,
    ACTION,
    CONFIDENTIAL_CATEGORY_CODE,
    RATING_DETAIL_ID,
    DATA_ADMIN_DATE
)
BEQUEATH DEFINER
AS
    WITH
        FINAL_RES
        AS
            (SELECT PUB.ENTITY_ID,
                    PUB.RATING_TYPE_CODE,
                    PUB.CURRENT_RATING_SYMBOL,
                    PUB.DEBT_TYPE_CODE,
                    PUB.RATING_DATE,
                    PUB.LAST_REVIEW_DATE,
                    PUB.LATEST_NON_AFFIRM_CW_OL,
                    PUB.LATEST_NON_AFFIRM_CW_OL_DATE,
                    PUB.ACTION,
                    'Public'     AS CONFIDENTIAL_CATEGORY_CODE,
                    RATING_DETAIL_ID,
                    DATA_ADMIN_DATE
               FROM R360_APPDATA.VW_ENTITY_RATINGS_PEERS_PUBLIC PUB
              WHERE NOT EXISTS
                        (SELECT 1
                           FROM R360_APPDATA.VW_ENTITY_RATINGS_PEERS_PVT PVT
                          WHERE     PVT.ENTITY_ID = PUB.ENTITY_ID
                                AND PVT.RATING_TYPE_CODE =
                                    PUB.RATING_TYPE_CODE)
             UNION ALL
             SELECT ENTITY_ID,
                    RATING_TYPE_CODE,
                    CURRENT_RATING_SYMBOL,
                    DEBT_TYPE_CODE,
                    RATING_DATE,
                    LAST_REVIEW_DATE,
                    LATEST_NON_AFFIRM_CW_OL,
                    LATEST_NON_AFFIRM_CW_OL_DATE,
                    ACTION,
                    (CASE
                         WHEN CONFIDENTIAL_CATEGORY_CODE = 'PVT'
                         THEN
                             'Private'
                         WHEN CONFIDENTIAL_CATEGORY_CODE = 'CIR'
                         THEN
                             'Confidential(CIR)'
                         ELSE
                             CONFIDENTIAL_CATEGORY_CODE
                     END)    CONFIDENTIAL_CATEGORY_CODE,
                    RATING_DETAIL_ID,
                    DATA_ADMIN_DATE
               FROM R360_APPDATA.VW_ENTITY_RATINGS_PEERS_PVT)
    SELECT EN.ENTITY_ID,
           EN.ENTITY_LEGAL_NAME,
           RATING_TYPE_CODE,
           CURRENT_RATING_SYMBOL,
           DEBT_TYPE_CODE,
           RATING_DATE,
           LAST_REVIEW_DATE,
           LATEST_NON_AFFIRM_CW_OL,
           LATEST_NON_AFFIRM_CW_OL_DATE,
           ACTION,
           CONFIDENTIAL_CATEGORY_CODE,
           RATING_DETAIL_ID,
           DATA_ADMIN_DATE
      FROM FINAL_RES  PVT
           LEFT JOIN fgr.entity_names EN
               ON (PVT.ENTITY_ID = EN.ENTITY_ID AND EN.CURR_IND = 'Y')
/


GRANT SELECT ON R360_APPDATA.VW_CURRENT_RATINGS_PEERS_PVT_PUB TO R360_APPDATA_READER
/

GRANT SELECT ON R360_APPDATA.VW_CURRENT_RATINGS_PEERS_PVT_PUB TO R360_APPDATA_WRITER
/

GRANT SELECT ON R360_APPDATA.VW_CURRENT_RATINGS_PEERS_PVT_PUB TO R360_APP_USER
/

GRANT SELECT ON R360_APPDATA.VW_CURRENT_RATINGS_PEERS_PVT_PUB TO SRIKANTH_SARMA
/


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\R360_NonPublicOpions\R360CFS_Release_Sep8th_2023\views\VW_DASHBOARD_CONTACTS_NON_USPF.vw

SET DEFINE OFF;

CREATE OR REPLACE VIEW r360_appdata.vw_dashboard_contacts_non_uspf AS 
WITH cmp_emp_vw AS 
	(SELECT sp_id, core_id FROM gs_gc.cmp_employee_abstraction_vw WHERE core_id IS NOT NULL),
dashboard_contacts AS 
	(SELECT CASE 
						WHEN emp.mi IS NULL 
							THEN emp.first_name || ' ' || emp.last_name_from_source 
						ELSE emp.first_name || ' ' || emp.mi || ' ' || emp.last_name_from_source 
					END AS full_name,
				   CASE 
						WHEN ea_dept_role_code = 'TEAMLEADER' 
								THEN ea_dept_role_name 
							ELSE 'Primary Credit Analyst' 
					END AS ROLE, 
				   emp.telephone_num AS phone, 
				   emp.email_address AS email, 
				   ea.relate_id AS entity_id, 
				   'Analytical' AS contact_type, 
				   cev.sp_id AS spid, 
				   ea.listing_order
    FROM fgr_prime.entity_analysts ea 
      INNER JOIN spapp.employees emp ON ea.analyst_id = emp.employee_id AND emp.active_ind = 'Y'
      INNER JOIN cmp_emp_vw cev ON emp.employee_id = cev.core_id 
        WHERE ea.relate_ind = 'E' AND ea.ciq_rep_ind = 1 
            AND ea.ea_dept_role_code IN ('ORGANALYST', 'PRIMANALST', 'TEAMLEADER')
  UNION ALL
  SELECT first_name || ' ' || last_name AS full_name, 
				role_display_name AS ROLE, 
				phone, 
				email, 
				to_number(org_id) AS entity_id,
				'Commercial' AS contact_type, 
				spid, 
				row_number() OVER (PARTITION BY org_id ORDER BY role_display_name ASC) AS listing_order
    FROM dsmpstg.r360_per_rel_commercial WHERE spid LIKE 'P%')
 SELECT ear.entity_id,
             dc.full_name,
             dc.ROLE,
             dc.phone,
             dc.email,
             dc.contact_type,
             dc.spid
        FROM r360_appdata.vw_entity_active_rating ear
             INNER JOIN dashboard_contacts dc ON  ear.entity_id = dc.entity_id AND ear.active_rating_ind = 'Y'
    ORDER BY contact_type, listing_order;
		
GRANT SELECT ON r360_appdata.vw_dashboard_contacts_non_uspf TO R360_APPDATA_READER;


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\R360_NonPublicOpions\R360CFS_Release_Sep8th_2023\views\VW_ENTITY_ACTIVE_RATING.vw

SET DEFINE OFF;
/* Formatted on 8/29/2023 10:17:47 AM (QP5 v5.362) */
CREATE OR REPLACE FORCE VIEW R360_APPDATA.VW_ENTITY_ACTIVE_RATING
(
    ENTITY_ID,
    DEPT_CODE,
    PRIMARY_SECTOR_CODE,
    PRIMARY_SUB_SECTOR_CODE,
    ACTIVE_RATING_IND
)
BEQUEATH DEFINER
AS
    WITH
        active_entities
        AS
            (SELECT rd.rating_id     AS entity_id
               FROM fgr_prime.rating_details           rd,
                    r360_appdata.rating_type_code_map  rtcm
              WHERE     rd.rating_type_code = rtcm.rating_type_code
                    AND rd.ack_status = 'Y'
                    AND rd.ciq_rep_ind = 1
                    AND rd.srd_curr_ind = 'Y'
                    AND rd.debt_type_code = 'ICR'
                    AND rd.source_rating_ind = 'O'
                    AND rtcm.actv_flag = 'Y'
                    AND rtcm.process_ind = 'Y'
             UNION ALL
             SELECT ei.entity_id
               FROM fgr.entity_instruments             ei,
                    fgr_prime.rating_details           rd,
                    r360_appdata.rating_type_code_map  rtcm
              WHERE     rd.rating_id = ei.instrument_id
                    AND rtcm.rating_type_code = rd.rating_type_code
                    AND ei.status_ind = 'A'
                    AND ei.role_code = 'ISSUER'
                    AND ei.ciq_rep_ind = 1
                    AND rd.ack_status = 'Y'
                    AND rd.ciq_rep_ind = 1
                    AND rd.srd_curr_ind = 'Y'
                    AND rd.source_rating_ind = 'D'
                    AND rd.debt_type_code IN ('FSR', 'FER', 'FINPROG')
                    AND rtcm.actv_flag = 'Y'
                    AND rtcm.process_ind = 'Y'),
        /* Consider the roles ISSUER, OBLIGOR and COISSUER only */
        entity_instruments_union
        AS
            (SELECT entity_id, instrument_id
               FROM fgr.entity_instruments
              WHERE     role_code = 'ISSUER'
                    AND status_ind = 'A'
                    AND ciq_rep_ind = 1
             UNION ALL
             SELECT entity_id, instrument_id
               FROM fgr.instrument_participants
              WHERE     role_code IN ('COISSUER', 'OBLIGOR')
                    AND status_ind = 'A'
                    AND ciq_rep_ind = 1),
        /* Derive rating status for instrument/security */
        instrument_rating_status
        AS
            (SELECT i.instrument_id,
                    rd.debt_type_code,
                    CASE
                        WHEN    (    rd.rating_code NOT IN ('NR', 'NR/NR')
                                 AND NOT REGEXP_LIKE (rd.rating_code,
                                                      '.[^/]NR')
                                 AND COALESCE (id.source_status_ind,
                                               i.source_status_ind) <>
                                     'Y')
                             OR (TRUNC (SYSDATE) - TRUNC (rd.data_admin_date) <=
                                 90)
                        THEN
                            'Y'
                        ELSE
                            'N'
                    END    rating_status
               FROM fgr.instruments                    i,
                    fgr_prime.instrument_details       id,
                    fgr_prime.rating_details           rd,
                    r360_appdata.rating_type_code_map  rtcm
              WHERE     i.instrument_id = rd.rating_id
                    AND i.instrument_id = id.instrument_id(+)
                    AND rd.rating_id = id.instrument_id(+)
                    AND rd.detail_id = id.instrument_detail_id(+)
                    AND rd.rating_type_code = rtcm.rating_type_code
                    AND rd.rating_ind = 'I'
                    AND rd.srd_curr_ind = 'Y'
                    AND rtcm.actv_flag = 'Y'
                    AND rtcm.process_ind = 'Y'),
        active_entity_instruments
        AS
            (SELECT ei.entity_id, ei.instrument_id
               FROM instrument_rating_status ir, entity_instruments_union ei
              WHERE     ir.instrument_id = ei.instrument_id
                    AND ir.rating_status = 'Y'
                    AND ir.debt_type_code NOT IN ('FINPROG',
                                                  'FSR',
                                                  'FER',
                                                  'RC'))
    SELECT e.entity_id,
           e.dept_code,
           e.primary_sector_code,
           e.primary_sub_sector_code,
           CASE
               WHEN    EXISTS
                           (SELECT 1
                              FROM active_entities ae
                             WHERE ae.entity_id = e.entity_id) -- check for active entity rating
                    OR EXISTS
                           (SELECT 1
                              FROM active_entity_instruments ai
                             WHERE ai.entity_id = e.entity_id) -- check for active instrument rating
               THEN
                   'Y'
               ELSE
                   'N'
           END    AS active_rating_ind
      FROM fgr.entities e
/


GRANT SELECT ON R360_APPDATA.VW_ENTITY_ACTIVE_RATING TO R360_APPDATA_READER
/


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\R360_NonPublicOpions\R360CFS_Release_Sep8th_2023\views\VW_ENTITY_ACTIVE_RATING_PVT.vw

SET DEFINE OFF;
/* Formatted on 8/29/2023 10:17:50 AM (QP5 v5.362) */
CREATE OR REPLACE FORCE VIEW R360_APPDATA.VW_ENTITY_ACTIVE_RATING_PVT
(
    ENTITY_ID,
    DEPT_CODE,
    PRIMARY_SECTOR_CODE,
    PRIMARY_SUB_SECTOR_CODE,
    ACTIVE_RATING_IND
)
BEQUEATH DEFINER
AS
    WITH
        active_entities
        AS
            (SELECT DISTINCT odt.ORG_ID     AS entity_id
               FROM CORE.ORG_DEBT_TYPES                odt,
                    CORE.ORG_DEBT_TYPE_RATINGS         odtr,
                    r360_appdata.rating_type_code_map  rtcm
              WHERE     odtr.ORG_DEBT_TYPE = odt.ORG_DEBT_TYPE_ID
                    AND odt.exclude_from_products_ind = 'N'
                    AND odtr.exclude_from_products_ind = 'N'
                    AND odtr.confidentiality_ind = 'Y'
                    AND odtr.CONFIDENTIAL_CATEGORY_CODE IN ('CIR', 'PVT')
                    AND odt.debt_type_code IN ('ICR',
                                               'FSR',
                                               'FER',
                                               'RC',
                                               'FINPROG')
                    AND odtr.CURR_IND = 'Y'
                    AND odtr.rating_type_code = rtcm.rating_type_code
                    AND rtcm.actv_flag = 'Y'
                    AND rtcm.process_ind = 'Y'),
        /* Consider the roles ISSUER, OBLIGOR and COISSUER only */
        active_entity_instruments
        AS
            (SELECT DISTINCT ei.entity_id
               FROM CORE.PROGRAM_DEBT_TYPES                 pdt,
                    CORE.PROGRAM_DEBT_TYPE_RATINGS          pdtr,
                    fgr.entity_instruments                  ei,
                    fgr.instruments                         i,
                    R360_APPDATA.VW_ACTIVE_INSTRUMENTS_PVT  ir,
                    r360_appdata.rating_type_code_map       rtcm
              WHERE     pdtr.PROGRAM_DEBT_TYPE_ID = pdt.PROGRAM_DEBT_TYPE_ID
                    AND pdt.exclude_from_products_ind = 'N'
                    AND pdtr.exclude_from_products_ind = 'N'
                    AND pdtr.confidentiality_ind = 'Y'
                    AND pdtr.CONFIDENTIAL_CATEGORY_CODE IN ('CIR', 'PVT')
                    AND pdtr.CURR_IND = 'Y'
                    AND i.SOURCE_INSTRUMENT_IND = 'R'
                    AND i.RELATED_INSTRUMENT_ID = pdt.PROGRAM_ID
                    AND i.instrument_id = ei.instrument_id
                    AND ei.role_code = 'ISSUER'
                    AND ei.status_ind = 'A'
                    AND i.SOURCE_INSTRUMENT_ID = pdt.PROGRAM_DEBT_TYPE_ID
                    AND ir.INSTRUMENT_ID = ei.INSTRUMENT_ID
                    AND ir.ACTIVE_RATING_IND = 'Y'
                    AND pdtr.rating_type_code = rtcm.rating_type_code
                    AND rtcm.actv_flag = 'Y'
                    AND rtcm.process_ind = 'Y'
             UNION ALL
             SELECT DISTINCT ip.entity_id
               FROM CORE.PROGRAM_DEBT_TYPES                 pdt,
                    CORE.PROGRAM_DEBT_TYPE_RATINGS          pdtr,
                    fgr.instrument_participants             ip,
                    fgr.instruments                         i,
                    R360_APPDATA.VW_ACTIVE_INSTRUMENTS_PVT  ir,
                    r360_appdata.rating_type_code_map       rtcm
              WHERE     pdtr.PROGRAM_DEBT_TYPE_ID = pdt.PROGRAM_DEBT_TYPE_ID
                    AND pdt.exclude_from_products_ind = 'N'
                    AND pdtr.exclude_from_products_ind = 'N'
                    AND pdtr.confidentiality_ind = 'Y'
                    AND pdtr.CONFIDENTIAL_CATEGORY_CODE IN ('CIR', 'PVT')
                    AND pdtr.CURR_IND = 'Y'
                    AND i.SOURCE_INSTRUMENT_IND = 'R'
                    AND i.RELATED_INSTRUMENT_ID = pdt.program_id
                    AND ip.INSTRUMENT_ID = i.INSTRUMENT_ID
                    AND ip.role_code IN ('COISSUER', 'OBLIGOR')
                    AND i.SOURCE_INSTRUMENT_ID = pdt.PROGRAM_DEBT_TYPE_ID
                    AND ip.status_ind = 'A'
                    AND ir.INSTRUMENT_ID = ip.INSTRUMENT_ID
                    AND ir.ACTIVE_RATING_IND = 'Y'
                    AND pdtr.rating_type_code = rtcm.rating_type_code
                    AND rtcm.actv_flag = 'Y'
                    AND rtcm.process_ind = 'Y'
             UNION ALL
             SELECT DISTINCT ei.entity_id
               FROM CORE.RATINGS                            rtg,
                    fgr.entity_instruments                  ei,
                    fgr_PRIME.instrument_details            id,
                    R360_APPDATA.VW_ACTIVE_INSTRUMENTS_PVT  ir,
                    r360_appdata.rating_type_code_map       rtcm
              WHERE     rtg.exclude_from_products_ind = 'N'
                    AND rtg.confidentiality_ind = 'Y'
                    AND rtg.CONFIDENTIAL_CATEGORY_CODE IN ('CIR', 'PVT')
                    AND rtg.CURR_IND = 'Y'
                    AND id.SOURCE_INSTRUMENT_DETAIL_ID = rtg.ISSUE_ID
                    AND rtg.issue_id_table_ind = 'M'
                    AND ei.instrument_id = id.instrument_id
                    AND ei.role_code = 'ISSUER'
                    AND ei.status_ind = 'A'
                    AND ir.INSTRUMENT_ID = ei.INSTRUMENT_ID
                    AND ir.ACTIVE_RATING_IND = 'Y'
                    AND rtcm.rating_type_code = rtg.RATING_TYPE_CODE
                    AND rtcm.actv_flag = 'Y'
                    AND rtcm.process_ind = 'Y'
             UNION ALL
             SELECT DISTINCT ip.entity_id
               FROM CORE.RATINGS                            rtg,
                    fgr.instrument_participants             ip,
                    fgr_prime.instrument_details            id,
                    R360_APPDATA.VW_ACTIVE_INSTRUMENTS_PVT  ir,
                    r360_appdata.rating_type_code_map       rtcm
              WHERE     rtg.exclude_from_products_ind = 'N'
                    AND rtg.confidentiality_ind = 'Y'
                    AND rtg.CONFIDENTIAL_CATEGORY_CODE IN ('CIR', 'PVT')
                    AND rtg.CURR_IND = 'Y'
                    AND id.SOURCE_INSTRUMENT_DETAIL_ID = rtg.ISSUE_ID
                    AND issue_id_table_ind = 'M'
                    AND ip.instrument_id = id.instrument_id
                    AND ip.role_code IN ('COISSUER', 'OBLIGOR')
                    AND ip.status_ind = 'A'
                    AND ir.INSTRUMENT_ID = ip.INSTRUMENT_ID
                    AND ir.ACTIVE_RATING_IND = 'Y'
                    AND rtcm.rating_type_code = rtg.RATING_TYPE_CODE
                    AND rtcm.actv_flag = 'Y'
                    AND rtcm.process_ind = 'Y')
    SELECT e.entity_id,
           e.dept_code,
           e.primary_sector_code,
           e.primary_sub_sector_code,
           CASE
               WHEN    EXISTS
                           (SELECT 1
                              FROM active_entities ae
                             WHERE ae.entity_id = e.entity_id) -- check for active entity rating
                    OR EXISTS
                           (SELECT 1
                              FROM active_entity_instruments ai
                             WHERE ai.entity_id = e.entity_id) -- check for active instrument rating
               THEN
                   'Y'
               ELSE
                   'N'
           END    AS active_rating_ind
      FROM fgr.entities e
/


GRANT SELECT ON R360_APPDATA.VW_ENTITY_ACTIVE_RATING_PVT TO R360_APPDATA_READER
/


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\R360_NonPublicOpions\R360CFS_Release_Sep8th_2023\views\VW_ENTITY_ACTIVE_RATING_PVT_ORG.vw

CREATE OR REPLACE VIEW R360_APPDATA.VW_ENTITY_ACTIVE_RATING_PVT_ORG AS
WITH
        active_entities
        AS
            (SELECT DISTINCT odt.ORG_ID     AS entity_id
               FROM CORE.ORG_DEBT_TYPES                odt,
                    CORE.ORG_DEBT_TYPE_RATINGS         odtr,
                    r360_appdata.rating_type_code_map  rtcm
              WHERE     odtr.ORG_DEBT_TYPE = odt.ORG_DEBT_TYPE_ID
                    AND odt.exclude_from_products_ind = 'N'
                    AND odtr.exclude_from_products_ind = 'N'
                    AND odtr.confidentiality_ind = 'Y'
                    AND odtr.CONFIDENTIAL_CATEGORY_CODE IN ('CIR', 'PVT')
                    AND odt.debt_type_code IN ('ICR',
                                               'FSR',
                                               'FER',
                                               'RC',
                                               'FINPROG')
                    AND odtr.CURR_IND = 'Y'
                    AND odtr.rating_type_code = rtcm.rating_type_code
                    AND rtcm.actv_flag = 'Y'
                    AND rtcm.process_ind = 'Y'
             UNION ALL
             SELECT DISTINCT ei.entity_id     AS entity_id
               FROM CORE.PROGRAM_DEBT_TYPES            pdt,
                    CORE.PROGRAM_DEBT_TYPE_RATINGS     pdtr,
                    fgr.entity_instruments             ei,
                    fgr.instruments                    i,
                    r360_appdata.rating_type_code_map  rtcm
              WHERE     pdtr.PROGRAM_DEBT_TYPE_ID = pdt.PROGRAM_DEBT_TYPE_ID
                    AND pdt.exclude_from_products_ind = 'N'
                    AND pdtr.exclude_from_products_ind = 'N'
                    AND pdtr.confidentiality_ind = 'Y'
                    AND pdtr.CONFIDENTIAL_CATEGORY_CODE IN ('CIR', 'PVT')
                    AND pdtr.CURR_IND = 'Y'
                    AND i.SOURCE_INSTRUMENT_IND = 'R'
                    AND i.RELATED_INSTRUMENT_ID = pdt.PROGRAM_ID
                    AND i.instrument_id = ei.instrument_id
                    AND ei.role_code = 'ISSUER'
                    AND i.SOURCE_INSTRUMENT_ID = pdt.PROGRAM_DEBT_TYPE_ID
                    AND ei.status_ind = 'A'
                    AND rtcm.rating_type_code = pdtr.RATING_TYPE_CODE
                    AND rtcm.actv_flag = 'Y'
                    AND rtcm.process_ind = 'Y'
             UNION ALL
             SELECT DISTINCT ei.entity_id     AS entity_id
               FROM CORE.RATINGS                       rtg,
                    fgr.entity_instruments             ei,
                    fgr_PRIME.instrument_details       id,
                    r360_appdata.rating_type_code_map  rtcm
              WHERE     rtg.exclude_from_products_ind = 'N'
                    AND rtg.confidentiality_ind = 'Y'
                    AND rtg.CONFIDENTIAL_CATEGORY_CODE IN ('CIR', 'PVT')
                    AND rtg.CURR_IND = 'Y'
                    AND id.SOURCE_INSTRUMENT_DETAIL_ID = rtg.ISSUE_ID
                    AND rtg.issue_id_table_ind = 'M'
                    AND ei.instrument_id = id.instrument_id
                    AND ei.role_code = 'ISSUER'
                    AND ei.status_ind = 'A'
                    AND rtcm.rating_type_code = rtg.RATING_TYPE_CODE
                    AND rtcm.actv_flag = 'Y'
                    AND rtcm.process_ind = 'Y'),
        /* Consider the roles ISSUER, OBLIGOR and COISSUER only */
        entity_instruments_union
        AS
            (SELECT DISTINCT ei.entity_id, ei.instrument_id
               FROM CORE.PROGRAM_DEBT_TYPES         pdt,
                    CORE.PROGRAM_DEBT_TYPE_RATINGS  pdtr,
                    fgr.entity_instruments          ei,
                    fgr.instruments                 i
              WHERE     pdtr.PROGRAM_DEBT_TYPE_ID = pdt.PROGRAM_DEBT_TYPE_ID
                    AND pdt.exclude_from_products_ind = 'N'
                    AND pdtr.exclude_from_products_ind = 'N'
                    AND pdtr.confidentiality_ind = 'Y'
                    AND pdtr.CONFIDENTIAL_CATEGORY_CODE IN ('CIR', 'PVT')
                    AND pdtr.CURR_IND = 'Y'
                    AND i.SOURCE_INSTRUMENT_IND = 'R'
                    AND i.RELATED_INSTRUMENT_ID = pdt.PROGRAM_ID
                    AND i.instrument_id = ei.instrument_id
                    AND ei.role_code = 'ISSUER'
                    AND ei.status_ind = 'A'
                    AND i.SOURCE_INSTRUMENT_ID = pdt.PROGRAM_DEBT_TYPE_ID
             UNION
             SELECT DISTINCT ip.entity_id, ip.INSTRUMENT_ID
               FROM CORE.PROGRAM_DEBT_TYPES         pdt,
                    CORE.PROGRAM_DEBT_TYPE_RATINGS  pdtr,
                    fgr.instrument_participants     ip,
                    fgr.instruments                 i
              WHERE     pdtr.PROGRAM_DEBT_TYPE_ID = pdt.PROGRAM_DEBT_TYPE_ID
                    AND pdt.exclude_from_products_ind = 'N'
                    AND pdtr.exclude_from_products_ind = 'N'
                    AND pdtr.confidentiality_ind = 'Y'
                    AND pdtr.CONFIDENTIAL_CATEGORY_CODE IN ('CIR', 'PVT')
                    AND pdtr.CURR_IND = 'Y'
                    AND i.SOURCE_INSTRUMENT_IND = 'R'
                    AND i.RELATED_INSTRUMENT_ID = pdt.program_id
                    AND ip.INSTRUMENT_ID = i.INSTRUMENT_ID
                    AND ip.role_code IN ('COISSUER', 'OBLIGOR')
                    AND i.SOURCE_INSTRUMENT_ID = pdt.PROGRAM_DEBT_TYPE_ID
                    AND ip.status_ind = 'A'
             UNION
             SELECT DISTINCT ei.entity_id, ei.instrument_id
               FROM CORE.RATINGS                  rtg,
                    fgr.entity_instruments        ei,
                    fgr_PRIME.instrument_details  id
              WHERE     rtg.exclude_from_products_ind = 'N'
                    AND rtg.confidentiality_ind = 'Y'
                    AND rtg.CONFIDENTIAL_CATEGORY_CODE IN ('CIR', 'PVT')
                    AND rtg.CURR_IND = 'Y'
                    AND id.SOURCE_INSTRUMENT_DETAIL_ID = rtg.ISSUE_ID
                    AND rtg.issue_id_table_ind = 'M'
                    AND ei.instrument_id = id.instrument_id
                    AND ei.role_code = 'ISSUER'
                    AND ei.status_ind = 'A'
             UNION
             SELECT DISTINCT ip.entity_id, ip.INSTRUMENT_ID
               FROM CORE.RATINGS                  rtg,
                    fgr.instrument_participants   ip,
                    fgr_prime.instrument_details  id
              WHERE     rtg.exclude_from_products_ind = 'N'
                    AND rtg.confidentiality_ind = 'Y'
                    AND rtg.CONFIDENTIAL_CATEGORY_CODE IN ('CIR', 'PVT')
                    AND rtg.CURR_IND = 'Y'
                    AND id.SOURCE_INSTRUMENT_DETAIL_ID = rtg.ISSUE_ID
                    AND issue_id_table_ind = 'M'
                    AND ip.instrument_id = id.instrument_id
                    AND ip.role_code IN ('COISSUER', 'OBLIGOR')
                    AND ip.status_ind = 'A'),
        active_entity_instruments
        AS
            (SELECT ei.entity_id, ei.instrument_id
               FROM R360_APPDATA.VW_ACTIVE_INSTRUMENTS_PVT  ir,
                    entity_instruments_union                ei
              WHERE     ir.INSTRUMENT_ID = ei.INSTRUMENT_ID
                    AND ir.ACTIVE_RATING_IND = 'Y')
    SELECT e.entity_id,
           e.dept_code,
           e.primary_sector_code,
           e.primary_sub_sector_code,
           CASE
               WHEN    EXISTS
                           (SELECT 1
                              FROM active_entities ae
                             WHERE ae.entity_id = e.entity_id) -- check for active entity rating
                    OR EXISTS
                           (SELECT 1
                              FROM active_entity_instruments ai
                             WHERE ai.entity_id = e.entity_id) -- check for active instrument rating
               THEN
                   'Y'
               ELSE
                   'N'
           END    AS active_rating_ind
      FROM fgr.entities e;
	  
GRANT SELECT ON R360_APPDATA.VW_ENTITY_ACTIVE_RATING_PVT_ORG  TO R360_APPDATA_READER;


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\R360_NonPublicOpions\R360CFS_Release_Sep8th_2023\views\VW_ENTITY_ACTIVE_RATING_TAC.vw

SET DEFINE OFF;
/* Formatted on 8/29/2023 10:17:54 AM (QP5 v5.362) */
CREATE OR REPLACE FORCE VIEW R360_APPDATA.VW_ENTITY_ACTIVE_RATING_TAC
(
    ENTITY_ID,
    DEPT_CODE,
    PRIMARY_SECTOR_CODE,
    PRIMARY_SUB_SECTOR_CODE,
    ACTIVE_RATING_IND
)
BEQUEATH DEFINER
AS
    WITH
        active_entities
        AS
            (SELECT rd.rating_id     AS entity_id
               FROM fgr_prime.rating_details           rd,
                    r360_appdata.rating_type_code_map  rtcm
              WHERE     rd.rating_type_code = rtcm.rating_type_code
                    AND rd.ack_status = 'Y'
                    AND rd.ciq_rep_ind = 1
                    AND rd.srd_curr_ind = 'Y'
                    AND rd.debt_type_code = 'TACASSES'
                    AND rd.source_rating_ind = 'O'
                    AND rtcm.actv_flag = 'Y'
                    AND rtcm.process_ind = 'Y'
             UNION ALL
             SELECT ei.entity_id
               FROM fgr.entity_instruments             ei,
                    fgr_prime.rating_details           rd,
                    r360_appdata.rating_type_code_map  rtcm
              WHERE     rd.rating_id = ei.instrument_id
                    AND rtcm.rating_type_code = rd.rating_type_code
                    AND ei.status_ind = 'A'
                    AND ei.role_code = 'ISSUER'
                    AND ei.ciq_rep_ind = 1
                    AND rd.ack_status = 'Y'
                    AND rd.ciq_rep_ind = 1
                    AND rd.srd_curr_ind = 'Y'
                    AND rd.source_rating_ind = 'D'
                    AND rd.debt_type_code IN ('FSR',
                                              'FER',
                                              'FINPROG',
                                              'TACASSES')
                    AND rtcm.actv_flag = 'Y'
                    AND rtcm.process_ind = 'Y'),
        /* Consider the roles ISSUER, OBLIGOR and COISSUER only */
        entity_instruments_union
        AS
            (SELECT entity_id, instrument_id
               FROM fgr.entity_instruments
              WHERE     role_code = 'ISSUER'
                    AND status_ind = 'A'
                    AND ciq_rep_ind = 1
             UNION ALL
             SELECT entity_id, instrument_id
               FROM fgr.instrument_participants
              WHERE     role_code IN ('COISSUER', 'OBLIGOR')
                    AND status_ind = 'A'
                    AND ciq_rep_ind = 1),
        /* Derive rating status for instrument/security */
        instrument_rating_status
        AS
            (SELECT i.instrument_id,
                    rd.debt_type_code,
                    CASE
                        WHEN    (    rd.rating_code NOT IN ('NR', 'NR/NR')
                                 AND NOT REGEXP_LIKE (rd.rating_code,
                                                      '.[^/]NR')
                                 AND COALESCE (id.source_status_ind,
                                               i.source_status_ind) <>
                                     'Y')
                             OR (TRUNC (SYSDATE) - TRUNC (rd.data_admin_date) <=
                                 90)
                        THEN
                            'Y'
                        ELSE
                            'N'
                    END    rating_status
               FROM fgr.instruments                    i,
                    fgr_prime.instrument_details       id,
                    fgr_prime.rating_details           rd,
                    r360_appdata.rating_type_code_map  rtcm
              WHERE     i.instrument_id = rd.rating_id
                    AND i.instrument_id = id.instrument_id(+)
                    AND rd.rating_id = id.instrument_id(+)
                    AND rd.detail_id = id.instrument_detail_id(+)
                    AND rd.rating_type_code = rtcm.rating_type_code
                    AND rd.rating_ind = 'I'
                    AND rd.srd_curr_ind = 'Y'
                    AND rtcm.actv_flag = 'Y'
                    AND rd.debt_type_code = 'TACASSES'
                    AND rtcm.process_ind = 'Y'),
        active_entity_instruments
        AS
            (SELECT ei.entity_id, ei.instrument_id
               FROM instrument_rating_status ir, entity_instruments_union ei
              WHERE     ir.instrument_id = ei.instrument_id
                    AND ir.rating_status = 'Y'
                    AND ir.debt_type_code NOT IN ('FINPROG',
                                                  'FSR',
                                                  'FER',
                                                  'RC'))
    SELECT e.entity_id,
           e.dept_code,
           e.primary_sector_code,
           e.primary_sub_sector_code,
           CASE
               WHEN    EXISTS
                           (SELECT 1
                              FROM active_entities ae
                             WHERE ae.entity_id = e.entity_id) -- check for active entity rating
                    OR EXISTS
                           (SELECT 1
                              FROM active_entity_instruments ai
                             WHERE ai.entity_id = e.entity_id) -- check for active instrument rating
               THEN
                   'Y'
               ELSE
                   'N'
           END    AS active_rating_ind
      FROM fgr.entities e
/


GRANT SELECT ON R360_APPDATA.VW_ENTITY_ACTIVE_RATING_TAC TO R360_APPDATA_READER
/

GRANT SELECT ON R360_APPDATA.VW_ENTITY_ACTIVE_RATING_TAC TO R360_APP_USER
/


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\R360_NonPublicOpions\R360CFS_Release_Sep8th_2023\views\VW_ENTITY_ACTIVE_RATING_TAC_PVT.vw

SET DEFINE OFF;
/* Formatted on 8/29/2023 10:17:57 AM (QP5 v5.362) */
CREATE OR REPLACE FORCE VIEW R360_APPDATA.VW_ENTITY_ACTIVE_RATING_TAC_PVT
(
    ENTITY_ID,
    DEPT_CODE,
    PRIMARY_SECTOR_CODE,
    PRIMARY_SUB_SECTOR_CODE,
    ACTIVE_RATING_IND
)
BEQUEATH DEFINER
AS
    WITH
        active_entities
        AS
            (SELECT DISTINCT odt.ORG_ID     AS entity_id
               FROM CORE.ORG_DEBT_TYPES                odt,
                    CORE.ORG_DEBT_TYPE_RATINGS         odtr,
                    r360_appdata.rating_type_code_map  rtcm
              WHERE     odtr.ORG_DEBT_TYPE = odt.ORG_DEBT_TYPE_ID
                    AND odt.exclude_from_products_ind = 'N'
                    AND odtr.exclude_from_products_ind = 'N'
                    AND odtr.confidentiality_ind = 'Y'
                    AND odtr.CONFIDENTIAL_CATEGORY_CODE IN ('CIR', 'PVT')
                    AND odt.debt_type_code = 'TACASSES'
                    AND odtr.CURR_IND = 'Y'
                    AND odtr.rating_type_code = rtcm.rating_type_code
                    AND rtcm.actv_flag = 'Y'
                    AND rtcm.process_ind = 'Y'),
        /* Consider the roles ISSUER, OBLIGOR and COISSUER only */
        active_entity_instruments
        AS
            (SELECT DISTINCT ei.entity_id
               FROM CORE.PROGRAM_DEBT_TYPES                 pdt,
                    CORE.PROGRAM_DEBT_TYPE_RATINGS          pdtr,
                    fgr.entity_instruments                  ei,
                    fgr.instruments                         i,
                    R360_APPDATA.VW_ACTIVE_INSTRUMENTS_PVT  ir,
                    r360_appdata.rating_type_code_map       rtcm
              WHERE     pdtr.PROGRAM_DEBT_TYPE_ID = pdt.PROGRAM_DEBT_TYPE_ID
                    AND pdt.exclude_from_products_ind = 'N'
                    AND pdtr.exclude_from_products_ind = 'N'
                    AND pdtr.confidentiality_ind = 'Y'
                    AND pdtr.CONFIDENTIAL_CATEGORY_CODE IN ('CIR', 'PVT')
                    AND pdtr.CURR_IND = 'Y'
                    AND i.SOURCE_INSTRUMENT_IND = 'R'
                    AND i.RELATED_INSTRUMENT_ID = pdt.PROGRAM_ID
                    AND i.instrument_id = ei.instrument_id
                    AND ei.role_code = 'ISSUER'
                    AND ei.status_ind = 'A'
                    AND i.SOURCE_INSTRUMENT_ID = pdt.PROGRAM_DEBT_TYPE_ID
                    AND ir.INSTRUMENT_ID = ei.INSTRUMENT_ID
                    AND ir.ACTIVE_RATING_IND = 'Y'
                    AND pdtr.rating_type_code = rtcm.rating_type_code
                    AND rtcm.actv_flag = 'Y'
                    AND rtcm.process_ind = 'Y'
             UNION ALL
             SELECT DISTINCT ip.entity_id
               FROM CORE.PROGRAM_DEBT_TYPES                 pdt,
                    CORE.PROGRAM_DEBT_TYPE_RATINGS          pdtr,
                    fgr.instrument_participants             ip,
                    fgr.instruments                         i,
                    R360_APPDATA.VW_ACTIVE_INSTRUMENTS_PVT  ir,
                    r360_appdata.rating_type_code_map       rtcm
              WHERE     pdtr.PROGRAM_DEBT_TYPE_ID = pdt.PROGRAM_DEBT_TYPE_ID
                    AND pdt.exclude_from_products_ind = 'N'
                    AND pdtr.exclude_from_products_ind = 'N'
                    AND pdtr.confidentiality_ind = 'Y'
                    AND pdtr.CONFIDENTIAL_CATEGORY_CODE IN ('CIR', 'PVT')
                    AND pdtr.CURR_IND = 'Y'
                    AND i.SOURCE_INSTRUMENT_IND = 'R'
                    AND i.RELATED_INSTRUMENT_ID = pdt.program_id
                    AND ip.INSTRUMENT_ID = i.INSTRUMENT_ID
                    AND ip.role_code IN ('COISSUER', 'OBLIGOR')
                    AND i.SOURCE_INSTRUMENT_ID = pdt.PROGRAM_DEBT_TYPE_ID
                    AND ip.status_ind = 'A'
                    AND ir.INSTRUMENT_ID = ip.INSTRUMENT_ID
                    AND ir.ACTIVE_RATING_IND = 'Y'
                    AND pdtr.rating_type_code = rtcm.rating_type_code
                    AND rtcm.actv_flag = 'Y'
                    AND rtcm.process_ind = 'Y'
             UNION ALL
             SELECT DISTINCT ei.entity_id
               FROM CORE.RATINGS                            rtg,
                    fgr.entity_instruments                  ei,
                    fgr_PRIME.instrument_details            id,
                    R360_APPDATA.VW_ACTIVE_INSTRUMENTS_PVT  ir,
                    r360_appdata.rating_type_code_map       rtcm
              WHERE     rtg.exclude_from_products_ind = 'N'
                    AND rtg.confidentiality_ind = 'Y'
                    AND rtg.CONFIDENTIAL_CATEGORY_CODE IN ('CIR', 'PVT')
                    AND rtg.CURR_IND = 'Y'
                    AND id.SOURCE_INSTRUMENT_DETAIL_ID = rtg.ISSUE_ID
                    AND rtg.issue_id_table_ind = 'M'
                    AND ei.instrument_id = id.instrument_id
                    AND ei.role_code = 'ISSUER'
                    AND ei.status_ind = 'A'
                    AND ir.INSTRUMENT_ID = ei.INSTRUMENT_ID
                    AND ir.ACTIVE_RATING_IND = 'Y'
                    AND rtcm.rating_type_code = rtg.RATING_TYPE_CODE
                    AND rtcm.actv_flag = 'Y'
                    AND rtcm.process_ind = 'Y'
             UNION ALL
             SELECT DISTINCT ip.entity_id
               FROM CORE.RATINGS                            rtg,
                    fgr.instrument_participants             ip,
                    fgr_prime.instrument_details            id,
                    R360_APPDATA.VW_ACTIVE_INSTRUMENTS_PVT  ir,
                    r360_appdata.rating_type_code_map       rtcm
              WHERE     rtg.exclude_from_products_ind = 'N'
                    AND rtg.confidentiality_ind = 'Y'
                    AND rtg.CONFIDENTIAL_CATEGORY_CODE IN ('CIR', 'PVT')
                    AND rtg.CURR_IND = 'Y'
                    AND id.SOURCE_INSTRUMENT_DETAIL_ID = rtg.ISSUE_ID
                    AND issue_id_table_ind = 'M'
                    AND ip.instrument_id = id.instrument_id
                    AND ip.role_code IN ('COISSUER', 'OBLIGOR')
                    AND ip.status_ind = 'A'
                    AND ir.INSTRUMENT_ID = ip.INSTRUMENT_ID
                    AND ir.ACTIVE_RATING_IND = 'Y'
                    AND rtcm.rating_type_code = rtg.RATING_TYPE_CODE
                    AND rtcm.actv_flag = 'Y'
                    AND rtcm.process_ind = 'Y')
    SELECT e.entity_id,
           e.dept_code,
           e.primary_sector_code,
           e.primary_sub_sector_code,
           CASE
               WHEN    EXISTS
                           (SELECT 1
                              FROM active_entities ae
                             WHERE ae.entity_id = e.entity_id) -- check for active entity rating
                    OR EXISTS
                           (SELECT 1
                              FROM active_entity_instruments ai
                             WHERE ai.entity_id = e.entity_id) -- check for active instrument rating
               THEN
                   'Y'
               ELSE
                   'N'
           END    AS active_rating_ind
      FROM fgr.entities e
/


GRANT SELECT ON R360_APPDATA.VW_ENTITY_ACTIVE_RATING_TAC_PVT TO R360_APPDATA_READER
/

GRANT SELECT ON R360_APPDATA.VW_ENTITY_ACTIVE_RATING_TAC_PVT TO R360_APP_USER
/


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\R360_NonPublicOpions\R360CFS_Release_Sep8th_2023\views\VW_ENTITY_CURRENT_RATING.vw

SET DEFINE OFF;
/* Formatted on 8/29/2023 10:18:00 AM (QP5 v5.362) */
CREATE OR REPLACE FORCE VIEW R360_APPDATA.VW_ENTITY_CURRENT_RATING
(
    ENTITY_ID,
    CURRENT_RATING_SYMBOL,
    DEBT_TYPE_DESC,
    RATING_TYPE_DESC,
    ACTION,
    LATEST_NON_AFFIRM_CW_OL,
    RATINGS_ORDER,
    CONFIDENTIALITY_IND,
    CONFIDENTIAL_CATEGORY_CODE,
    CONFIDENTIAL_CATEGORY_DESC
)
BEQUEATH DEFINER
AS
    WITH
        Final_res
        AS
            (SELECT PUB.ENTITY_ID,
                    PUB.CURRENT_RATING_SYMBOL,
                    PUB.DEBT_TYPE_DESC,
                    PUB.RATING_TYPE_DESC,
                    PUB.ACTION,
                    PUB.LATEST_NON_AFFIRM_CW_OL,
                    PUB.RATINGS_ORDER,
                    'N'          AS CONFIDENTIALITY_IND,
                    'PUB'        AS CONFIDENTIAL_CATEGORY_CODE,
                    'Public'     AS CONFIDENTIAL_CATEGORY_DESC
               FROM R360_APPDATA.VW_ENTITY_CURRENT_RATING_PUBLIC PUB
              WHERE NOT EXISTS
                        (SELECT 1
                           FROM R360_APPDATA.VW_ENTITY_CURRENT_RATING_PVT
                          WHERE     ENTITY_ID = PUB.ENTITY_ID
                                AND RATING_TYPE_CODE = PUB.RATING_TYPE_CODE)
             UNION ALL
             SELECT ENTITY_ID,
                    CURRENT_RATING_SYMBOL,
                    DEBT_TYPE_DESC,
                    RATING_TYPE_DESC,
                    ACTION,
                    LATEST_NON_AFFIRM_CW_OL,
                    RATINGS_ORDER,
                    CONFIDENTIALITY_IND,
                    CONFIDENTIAL_CATEGORY_CODE,
                    (CASE
                         WHEN CONFIDENTIAL_CATEGORY_CODE = 'CIR'
                         THEN
                             'Confidential(CIR)'
                         WHEN CONFIDENTIAL_CATEGORY_CODE = 'PVT'
                         THEN
                             'Private'
                         ELSE
                             ''
                     END)    AS CONFIDENTIAL_CATEGORY_DESC
               FROM R360_APPDATA.VW_ENTITY_CURRENT_RATING_PVT),
        CURR_RAT_FINLA
        AS
            (SELECT ENTITY_ID,
                    CURRENT_RATING_SYMBOL,
                    DEBT_TYPE_DESC,
                    RATING_TYPE_DESC,
                    ACTION,
                    LATEST_NON_AFFIRM_CW_OL,
                    RATINGS_ORDER,
                    CONFIDENTIALITY_IND,
                    CONFIDENTIAL_CATEGORY_CODE,
                    CONFIDENTIAL_CATEGORY_DESC,
                    ROW_NUMBER ()
                        OVER (PARTITION BY ENTITY_ID
                              ORDER BY RATINGS_ORDER ASC)    RWNUM
               FROM Final_res cr)
    SELECT ENTITY_ID,
           CURRENT_RATING_SYMBOL,
           DEBT_TYPE_DESC,
           RATING_TYPE_DESC,
           ACTION,
           LATEST_NON_AFFIRM_CW_OL,
           RATINGS_ORDER,
           CONFIDENTIALITY_IND,
           CONFIDENTIAL_CATEGORY_CODE,
           CONFIDENTIAL_CATEGORY_DESC
      FROM CURR_RAT_FINLA
     WHERE RWNUM = 1
/


GRANT SELECT ON R360_APPDATA.VW_ENTITY_CURRENT_RATING TO R360_APPDATA_READER
/


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\R360_NonPublicOpions\R360CFS_Release_Sep8th_2023\views\VW_ENTITY_CURRENT_RATING_PUBLIC.vw

SET DEFINE OFF;
/* Formatted on 8/29/2023 10:18:03 AM (QP5 v5.362) */
CREATE OR REPLACE FORCE VIEW R360_APPDATA.VW_ENTITY_CURRENT_RATING_PUBLIC
(
    ENTITY_ID,
    CURRENT_RATING_SYMBOL,
    DEBT_TYPE_DESC,
    RATING_TYPE_CODE,
    RATING_TYPE_DESC,
    ACTION,
    LATEST_NON_AFFIRM_CW_OL,
    RATINGS_ORDER,
    RATING_DATE,
    LAST_REVIEW_DATE,
    LATEST_NON_AFFIRM_CW_OL_DATE,
    CONFIDENTIALITY_IND,
    CONFIDENTIAL_CATEGORY_CODE,
    CONFIDENTIAL_CATEGORY_DESC
)
BEQUEATH DEFINER
AS
    WITH
        current_Rating
        AS
            (SELECT CURRENT_RATING_SYMBOL,
                    DEBT_TYPE_DESC,
                    RATING_TYPE_CODE,
                    RATING_TYPE_DESC,
                    ACTION,
                    LATEST_NON_AFFIRM_CW_OL,
                    ENTITY_ID,
                    RATING_DATE,
                    LAST_REVIEW_DATE,
                    LATEST_NON_AFFIRM_CW_OL_DATE,
                    (CASE
                         WHEN     DEBT_TYPE_CODE = 'ICR'
                              AND RATING_TYPE_CODE = 'FCLONG'
                         THEN
                             1
                         WHEN     DEBT_TYPE_CODE = 'ICR'
                              AND RATING_TYPE_CODE = 'STDLONG'
                         THEN
                             2
                         WHEN     DEBT_TYPE_CODE = 'ICR'
                              AND RATING_TYPE_CODE = 'FCSHORT'
                         THEN
                             3
                         WHEN     DEBT_TYPE_CODE = 'ICR'
                              AND RATING_TYPE_CODE = 'STDSHORT'
                         THEN
                             4
                         WHEN     DEBT_TYPE_CODE = 'FSR'
                              AND RATING_TYPE_CODE = 'FCLONG'
                         THEN
                             5
                         WHEN     DEBT_TYPE_CODE = 'FSR'
                              AND RATING_TYPE_CODE = 'STDLONG'
                         THEN
                             6
                         WHEN     DEBT_TYPE_CODE = 'FSR'
                              AND RATING_TYPE_CODE = 'FCSHORT'
                         THEN
                             7
                         WHEN     DEBT_TYPE_CODE = 'FSR'
                              AND RATING_TYPE_CODE = 'STDSHORT'
                         THEN
                             8
                         WHEN     DEBT_TYPE_CODE = 'FER'
                              AND RATING_TYPE_CODE = 'FCLONG'
                         THEN
                             9
                         WHEN     DEBT_TYPE_CODE = 'FER'
                              AND RATING_TYPE_CODE = 'STDLONG'
                         THEN
                             10
                         WHEN     DEBT_TYPE_CODE = 'FER'
                              AND RATING_TYPE_CODE = 'FCSHORT'
                         THEN
                             11
                         WHEN     DEBT_TYPE_CODE = 'FER'
                              AND RATING_TYPE_CODE = 'STDSHORT'
                         THEN
                             12
                         WHEN     DEBT_TYPE_CODE = 'RC'
                              AND RATING_TYPE_CODE = 'FCLONG'
                         THEN
                             13
                         WHEN     DEBT_TYPE_CODE = 'RC'
                              AND RATING_TYPE_CODE = 'STDLONG'
                         THEN
                             14
                         WHEN     DEBT_TYPE_CODE = 'RC'
                              AND RATING_TYPE_CODE = 'FCSHORT'
                         THEN
                             15
                         WHEN     DEBT_TYPE_CODE = 'RC'
                              AND RATING_TYPE_CODE = 'STDSHORT'
                         THEN
                             16
                         WHEN     DEBT_TYPE_CODE = 'FINPROG'
                              AND RATING_TYPE_CODE = 'FCLONG'
                         THEN
                             17
                         WHEN     DEBT_TYPE_CODE = 'FINPROG'
                              AND RATING_TYPE_CODE = 'STDLONG'
                         THEN
                             18
                         WHEN     DEBT_TYPE_CODE = 'FINPROG'
                              AND RATING_TYPE_CODE = 'FCSHORT'
                         THEN
                             19
                         WHEN     DEBT_TYPE_CODE = 'FINPROG'
                              AND RATING_TYPE_CODE = 'STDSHORT'
                         THEN
                             20
                         WHEN     DEBT_TYPE_CODE = 'ICR'
                              AND (    RATING_TYPE_CODE <> 'FCLONG'
                                   AND RATING_TYPE_CODE <> 'STDLONG'
                                   AND RATING_TYPE_CODE <> 'FCSHORT'
                                   AND RATING_TYPE_CODE <> 'STDSHORT')
                         THEN
                             22
                         ELSE
                             23
                     END)    AS RATINGS_ORDER
               FROM R360_APPDATA.VW_ENTITY_RATINGS_PUBLIC
              WHERE CURRENT_RATING_SYMBOL <> 'NR'
             UNION ALL
             SELECT CURRENT_RATING_SYMBOL,
                    DEBT_TYPE_DESC,
                    RATING_TYPE_CODE,
                    RATING_TYPE_DESC,
                    ACTION,
                    LATEST_NON_AFFIRM_CW_OL,
                    ENTITY_ID,
                    RATING_DATE,
                    LAST_REVIEW_DATE,
                    LATEST_NON_AFFIRM_CW_OL_DATE,
                    21     AS RATINGS_ORDER
               FROM R360_APPDATA.VW_ENTITY_RATINGS_PUBLIC
              WHERE RATING_TYPE_CODE LIKE '%PRLM%'),
        CURR_RAT_FINLA
        AS
            (SELECT ENTITY_ID,
                    CURRENT_RATING_SYMBOL,
                    DEBT_TYPE_DESC,
                    RATING_TYPE_CODE,
                    RATING_TYPE_DESC,
                    ACTION,
                    LATEST_NON_AFFIRM_CW_OL,
                    RATINGS_ORDER,
                    RATING_DATE,
                    LAST_REVIEW_DATE,
                    LATEST_NON_AFFIRM_CW_OL_DATE,
                    ROW_NUMBER ()
                        OVER (PARTITION BY ENTITY_ID
                              ORDER BY RATINGS_ORDER ASC)    RWNUM
               FROM current_Rating cr)
    SELECT ENTITY_ID,
           CURRENT_RATING_SYMBOL,
           DEBT_TYPE_DESC,
           RATING_TYPE_CODE,
           RATING_TYPE_DESC,
           ACTION,
           LATEST_NON_AFFIRM_CW_OL,
           RATINGS_ORDER,
           RATING_DATE,
           LAST_REVIEW_DATE,
           LATEST_NON_AFFIRM_CW_OL_DATE,
           'N'          AS CONFIDENTIALITY_IND,
           'PUB'        AS CONFIDENTIAL_CATEGORY_CODE,
           'Public'     AS CONFIDENTIAL_CATEGORY_DESC
      FROM CURR_RAT_FINLA
     WHERE RWNUM = 1
/


GRANT SELECT ON R360_APPDATA.VW_ENTITY_CURRENT_RATING_PUBLIC TO R360_APPDATA_READER
/


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\R360_NonPublicOpions\R360CFS_Release_Sep8th_2023\views\VW_ENTITY_CURRENT_RATING_PVT.vw

SET DEFINE OFF;
/* Formatted on 8/29/2023 10:18:06 AM (QP5 v5.362) */
CREATE OR REPLACE FORCE VIEW R360_APPDATA.VW_ENTITY_CURRENT_RATING_PVT
(
    ENTITY_ID,
    CURRENT_RATING_SYMBOL,
    DEBT_TYPE_DESC,
    RATING_TYPE_CODE,
    RATING_TYPE_DESC,
    ACTION,
    LATEST_NON_AFFIRM_CW_OL,
    RATING_DATE,
    LAST_REVIEW_DATE,
    LATEST_NON_AFFIRM_CW_OL_DATE,
    RATINGS_ORDER,
    CONFIDENTIALITY_IND,
    CONFIDENTIAL_CATEGORY_CODE
)
BEQUEATH DEFINER
AS
    WITH
        current_Rating
        AS
            (SELECT CURRENT_RATING_SYMBOL,
                    DEBT_TYPE_DESC,
                    RATING_TYPE_CODE,
                    RATING_TYPE_DESC,
                    ACTION,
                    LATEST_NON_AFFIRM_CW_OL,
                    ENTITY_ID,
                    RATING_DATE,
                    LAST_REVIEW_DATE,
                    LATEST_NON_AFFIRM_CW_OL_DATE,
                    (CASE
                         WHEN     DEBT_TYPE_CODE = 'ICR'
                              AND RATING_TYPE_CODE = 'FCLONG'
                         THEN
                             1
                         WHEN     DEBT_TYPE_CODE = 'ICR'
                              AND RATING_TYPE_CODE = 'STDLONG'
                         THEN
                             2
                         WHEN     DEBT_TYPE_CODE = 'ICR'
                              AND RATING_TYPE_CODE = 'FCSHORT'
                         THEN
                             3
                         WHEN     DEBT_TYPE_CODE = 'ICR'
                              AND RATING_TYPE_CODE = 'STDSHORT'
                         THEN
                             4
                         WHEN     DEBT_TYPE_CODE = 'FSR'
                              AND RATING_TYPE_CODE = 'FCLONG'
                         THEN
                             5
                         WHEN     DEBT_TYPE_CODE = 'FSR'
                              AND RATING_TYPE_CODE = 'STDLONG'
                         THEN
                             6
                         WHEN     DEBT_TYPE_CODE = 'FSR'
                              AND RATING_TYPE_CODE = 'FCSHORT'
                         THEN
                             7
                         WHEN     DEBT_TYPE_CODE = 'FSR'
                              AND RATING_TYPE_CODE = 'STDSHORT'
                         THEN
                             8
                         WHEN     DEBT_TYPE_CODE = 'FER'
                              AND RATING_TYPE_CODE = 'FCLONG'
                         THEN
                             9
                         WHEN     DEBT_TYPE_CODE = 'FER'
                              AND RATING_TYPE_CODE = 'STDLONG'
                         THEN
                             10
                         WHEN     DEBT_TYPE_CODE = 'FER'
                              AND RATING_TYPE_CODE = 'FCSHORT'
                         THEN
                             11
                         WHEN     DEBT_TYPE_CODE = 'FER'
                              AND RATING_TYPE_CODE = 'STDSHORT'
                         THEN
                             12
                         WHEN     DEBT_TYPE_CODE = 'RC'
                              AND RATING_TYPE_CODE = 'FCLONG'
                         THEN
                             13
                         WHEN     DEBT_TYPE_CODE = 'RC'
                              AND RATING_TYPE_CODE = 'STDLONG'
                         THEN
                             14
                         WHEN     DEBT_TYPE_CODE = 'RC'
                              AND RATING_TYPE_CODE = 'FCSHORT'
                         THEN
                             15
                         WHEN     DEBT_TYPE_CODE = 'RC'
                              AND RATING_TYPE_CODE = 'STDSHORT'
                         THEN
                             16
                         WHEN     DEBT_TYPE_CODE = 'FINPROG'
                              AND RATING_TYPE_CODE = 'FCLONG'
                         THEN
                             17
                         WHEN     DEBT_TYPE_CODE = 'FINPROG'
                              AND RATING_TYPE_CODE = 'STDLONG'
                         THEN
                             18
                         WHEN     DEBT_TYPE_CODE = 'FINPROG'
                              AND RATING_TYPE_CODE = 'FCSHORT'
                         THEN
                             19
                         WHEN     DEBT_TYPE_CODE = 'FINPROG'
                              AND RATING_TYPE_CODE = 'STDSHORT'
                         THEN
                             20
                         WHEN     DEBT_TYPE_CODE = 'ICR'
                              AND (    RATING_TYPE_CODE <> 'FCLONG'
                                   AND RATING_TYPE_CODE <> 'STDLONG'
                                   AND RATING_TYPE_CODE <> 'FCSHORT'
                                   AND RATING_TYPE_CODE <> 'STDSHORT')
                         THEN
                             22
                         ELSE
                             23
                     END)    AS RATINGS_ORDER,
                    CONFIDENTIALITY_IND,
                    CONFIDENTIAL_CATEGORY_CODE
               FROM R360_APPDATA.VW_ENTITY_RATINGS_PVT
              WHERE CURRENT_RATING_SYMBOL <> 'NR'
             UNION ALL
             SELECT CURRENT_RATING_SYMBOL,
                    DEBT_TYPE_DESC,
                    RATING_TYPE_CODE,
                    RATING_TYPE_DESC,
                    ACTION,
                    LATEST_NON_AFFIRM_CW_OL,
                    ENTITY_ID,
                    RATING_DATE,
                    LAST_REVIEW_DATE,
                    LATEST_NON_AFFIRM_CW_OL_DATE,
                    21     AS RATINGS_ORDER,
                    CONFIDENTIALITY_IND,
                    CONFIDENTIAL_CATEGORY_CODE
               FROM R360_APPDATA.VW_ENTITY_RATINGS_PVT
              WHERE RATING_TYPE_CODE LIKE '%PRLM%'),
        CURR_RAT_FINLA
        AS
            (SELECT ENTITY_ID,
                    CURRENT_RATING_SYMBOL,
                    RATING_TYPE_CODE,
                    DEBT_TYPE_DESC,
                    RATING_TYPE_DESC,
                    ACTION,
                    LATEST_NON_AFFIRM_CW_OL,
                    RATINGS_ORDER,
                    RATING_DATE,
                    LAST_REVIEW_DATE,
                    LATEST_NON_AFFIRM_CW_OL_DATE,
                    ROW_NUMBER ()
                        OVER (PARTITION BY ENTITY_ID
                              ORDER BY RATINGS_ORDER ASC)    RWNUM,
                    CONFIDENTIALITY_IND,
                    CONFIDENTIAL_CATEGORY_CODE
               FROM current_Rating cr)
    SELECT ENTITY_ID,
           CURRENT_RATING_SYMBOL,
           DEBT_TYPE_DESC,
           RATING_TYPE_CODE,
           RATING_TYPE_DESC,
           ACTION,
           LATEST_NON_AFFIRM_CW_OL,
           RATING_DATE,
           LAST_REVIEW_DATE,
           LATEST_NON_AFFIRM_CW_OL_DATE,
           RATINGS_ORDER,
           CONFIDENTIALITY_IND,
           CONFIDENTIAL_CATEGORY_CODE
      FROM CURR_RAT_FINLA
     WHERE RWNUM = 1
/


GRANT SELECT ON R360_APPDATA.VW_ENTITY_CURRENT_RATING_PVT TO R360_APPDATA_READER
/


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\R360_NonPublicOpions\R360CFS_Release_Sep8th_2023\views\VW_ENTITY_DETAILS.vw

SET DEFINE OFF;
/* Formatted on 8/29/2023 10:18:09 AM (QP5 v5.362) */
CREATE OR REPLACE FORCE VIEW R360_APPDATA.VW_ENTITY_DETAILS
(
    ENTITY_ID,
    KEY_INSTN_ID,
    ENTITY_NAME,
    TICKER,
    PRIMARY_SECTOR_CODE,
    PRIMARY_SUB_SECTOR_CODE,
    COUNTRY_CODE,
    ACTIVE_RATING_IND,
    CRA_IND
)
BEQUEATH DEFINER
AS
    WITH
        core_org_key_instn_id_mapping
        AS
            (SELECT core.fins_identifier     AS entity_id,
                    snl.fins_identifier      AS key_instn_id
               FROM gs_gc.financial_institution_id  snl
                    INNER JOIN gs_gc.financial_institution_id core
                        ON snl.lnk_financial_institution_oid =
                           core.lnk_financial_institution_oid
              WHERE     snl.fins_id_context = 'SNL'
                    AND snl.data_source_id IS NOT NULL
                    AND snl.end_datetime IS NULL
                    AND core.fins_id_context = 'CORE'
                    AND core.end_datetime IS NULL),
        entity_ticker
        AS
            (  SELECT ccr.identifiervalue                                           AS entity_id,
                      LISTAGG (ce.exchangesymbol || ': ' || cti.tickersymbol,
                               ', ')
                      WITHIN GROUP (ORDER BY
                                        cti.tickersymbol ASC, tradingitemid ASC)    AS ticker
                 FROM capiq.ciqcompanycrossref ccr
                      JOIN
                      (capiq.ciqfoundationsecurity cfs
                       JOIN
                       capiq.ciqtradingitem cti
                       ON cfs.securityid = cti.securityid
                       JOIN
                       capiq.ciqexchange ce
                       ON cti.exchangeid = ce.exchangeid)
                          ON ccr.companyid = cfs.companyid
                WHERE     ccr.identifiervalue IS NOT NULL
                      AND ccr.identifiertypeid = 73
                      AND ce.exchangesymbol IS NOT NULL
                      AND cfs.securitysubtypeid IN (1, 2)
                      AND cti.primaryflag = 1
                      AND cti.tickersymbol IS NOT NULL
                      AND cti.tradingitemstatusid = 15
             GROUP BY ccr.identifiervalue)
    SELECT e.entity_id,
           om.key_instn_id,
           en.entity_name,
           et.ticker,
           e.primary_sector_code,
           e.primary_sub_sector_code,
           e.country_code,
           ear.active_rating_ind,
           CASE
               WHEN (    e.primary_sector_code = 'GLOBISS'
                     AND e.primary_sub_sector_code IN ('CORP',
                                                       'UTIL',
                                                       'FI',
                                                       'INFRAFIN',
                                                       'LEVFIN')
                     AND e.country_code NOT IN ('RUS',
                                                'JPN',
                                                'ISR',
                                                'CHN',
                                                'TWN'))
               THEN
                   'Y'
               ELSE
                   'N'
           END    AS cra_ind
      FROM r360_appdata.vw_entity_active_rating  ear
           INNER JOIN fgr.entities e ON ear.entity_id = e.entity_id
           INNER JOIN spapp.departments d ON e.dept_code = d.department_id
           INNER JOIN fgr.entity_names en ON e.entity_id = en.entity_id
           INNER JOIN core_org_key_instn_id_mapping om
               ON om.entity_id = TO_CHAR (en.entity_id)
           LEFT OUTER JOIN entity_ticker et ON om.entity_id = et.entity_id
     WHERE     e.source_system = 'CORE'
           AND d.active_ind = 'Y'
           AND en.curr_ind = 'Y'
           AND en.source_system = 'CORE'
/


GRANT SELECT ON R360_APPDATA.VW_ENTITY_DETAILS TO R360_APPDATA_READER
/


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\R360_NonPublicOpions\R360CFS_Release_Sep8th_2023\views\VW_ENTITY_INSTRUMENTS_PARTICIPANTS.vw

SET DEFINE OFF;
/* Formatted on 8/29/2023 10:18:12 AM (QP5 v5.362) */
CREATE OR REPLACE FORCE VIEW R360_APPDATA.VW_ENTITY_INSTRUMENTS_PARTICIPANTS
(
    ENTITY_ID,
    INSTRUMENT_ID,
    ROLE_CODE,
    COVERAGE_CODE,
    STATUS_IND,
    SOURCE_SYSTEM,
    SOURCE_ORG_ROLE_ID,
    SOURCE_ORG_ROLE_IND,
    UPD_DATE,
    CURRENCY_TYPE_CODE,
    EXCHANGE_RATE,
    PRIMARY_SECONDARY_IND,
    PRIMARY_PARTICIPANT_IND,
    CIQ_REP_IND,
    INSTRUMENT_PARTICIPANT_ID
)
BEQUEATH DEFINER
AS
    (SELECT entity_id,
            instrument_id,
            role_code,
            coverage_code,
            status_ind,
            source_system,
            source_org_role_id,
            source_org_role_ind,
            upd_date,
            currency_type_code,
            exchange_rate,
            primary_secondary_ind,
            primary_participant_ind,
            ciq_rep_ind,
            instrument_participant_id
       FROM (SELECT entity_id,
                    instrument_id,
                    role_code,
                    status_ind,
                    source_system,
                    source_org_role_id,
                    source_org_role_ind,
                    upd_date,
                    currency_type_code,
                    exchange_rate,
                    primary_secondary_ind,
                    primary_participant_ind,
                    ciq_rep_ind,
                    NULL     AS coverage_code,
                    NULL     AS coverage_amt,
                    NULL     AS coverage_effective_date,
                    NULL     AS coverage_expiration_date,
                    NULL     AS credit_enhancement_ind,
                    NULL     AS credit_ind,
                    NULL     AS evergreen_ind,
                    NULL     AS joint_and_several_ind,
                    NULL     AS liquidity_ind,
                    NULL     AS policy_num,
                    NULL     AS evergreen_cap_date,
                    NULL     AS instrument_participant_id
               FROM FGR.ENTITY_INSTRUMENTS
              WHERE ciq_rep_ind = 1
             UNION ALL
             SELECT entity_id,
                    instrument_id,
                    role_code,
                    status_ind,
                    source_system,
                    source_org_role_id,
                    source_org_role_ind,
                    upd_date,
                    currency_type_code,
                    exchange_rate,
                    primary_secondary_ind,
                    primary_participant_ind,
                    ciq_rep_ind,
                    coverage_code,
                    coverage_amt,
                    coverage_effective_date,
                    coverage_expiration_date,
                    credit_enhancement_ind,
                    credit_ind,
                    evergreen_ind,
                    joint_and_several_ind,
                    liquidity_ind,
                    policy_num,
                    evergreen_cap_date,
                    instrument_participant_id
               FROM FGR.INSTRUMENT_PARTICIPANTS
              WHERE ciq_rep_ind = 1))
/


GRANT SELECT ON R360_APPDATA.VW_ENTITY_INSTRUMENTS_PARTICIPANTS TO R360_APPDATA_READER
/


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\R360_NonPublicOpions\R360CFS_Release_Sep8th_2023\views\VW_ENTITY_RATINGS.vw

SET DEFINE OFF;
/* Formatted on 8/29/2023 10:18:15 AM (QP5 v5.362) */
CREATE OR REPLACE FORCE VIEW R360_APPDATA.VW_ENTITY_RATINGS
(
    ENTITY_ID,
    DEBT_TYPE_CODE,
    DEBT_TYPE_DESC,
    RATING_TYPE_CODE,
    RATING_TYPE_DESC,
    CURRENT_RATING_SYMBOL,
    RATING_DATE,
    LAST_REVIEW_DATE,
    REGULATORY_INDICATOR,
    ACTION,
    LATEST_NON_AFFIRM_CW_OL,
    LATEST_NON_AFFIRM_CW_OL_DATE,
    SRD_CURR_IND,
    RATING_DETAIL_ID,
    DATA_ADMIN_DATE,
    DEBT_TYPE_SORT_ORDER,
    DERIVED_DEBT_TYPE_SORT_ORDER,
    LONG_SHORT_IND,
    RATING_TYPE_SORT_ORDER,
    RATING_ID,
    PRIMARY_SECTOR_CODE,
    PRIMARY_SUB_SECTOR_CODE,
    CONFIDENTIALITY_IND,
    CONFIDENTIAL_CATEGORY_CODE
)
BEQUEATH DEFINER
AS
    (SELECT ENTITY_ID,
            DEBT_TYPE_CODE,
            DEBT_TYPE_DESC,
            RATING_TYPE_CODE,
            RATING_TYPE_DESC,
            CURRENT_RATING_SYMBOL,
            RATING_DATE,
            LAST_REVIEW_DATE,
            REGULATORY_INDICATOR,
            ACTION,
            LATEST_NON_AFFIRM_CW_OL,
            LATEST_NON_AFFIRM_CW_OL_DATE,
            SRD_CURR_IND,
            RATING_DETAIL_ID,
            DATA_ADMIN_DATE,
            DEBT_TYPE_SORT_ORDER,
            DERIVED_DEBT_TYPE_SORT_ORDER,
            LONG_SHORT_IND,
            RATING_TYPE_SORT_ORDER,
            RATING_ID,
            PRIMARY_SECTOR_CODE,
            PRIMARY_SUB_SECTOR_CODE,
            'N'      AS CONFIDENTIALITY_IND,
            NULL     AS CONFIDENTIAL_CATEGORY_CODE
       FROM R360_APPDATA.VW_ENTITY_RATINGS_PUBLIC
     UNION ALL
     SELECT ENTITY_ID,
            DEBT_TYPE_CODE,
            DEBT_TYPE_DESC,
            RATING_TYPE_CODE,
            RATING_TYPE_DESC,
            CURRENT_RATING_SYMBOL,
            RATING_DATE,
            LAST_REVIEW_DATE,
            REGULATORY_INDICATOR,
            ACTION,
            LATEST_NON_AFFIRM_CW_OL,
            LATEST_NON_AFFIRM_CW_OL_DATE,
            SRD_CURR_IND,
            RATING_DETAIL_ID,
            DATA_ADMIN_DATE,
            DEBT_TYPE_SORT_ORDER,
            DERIVED_DEBT_TYPE_SORT_ORDER,
            LONG_SHORT_IND,
            RATING_TYPE_SORT_ORDER,
            RATING_ID,
            PRIMARY_SECTOR_CODE,
            PRIMARY_SUB_SECTOR_CODE,
            CONFIDENTIALITY_IND,
            CONFIDENTIAL_CATEGORY_CODE
       FROM R360_APPDATA.VW_ENTITY_RATINGS_PVT)
/


GRANT SELECT ON R360_APPDATA.VW_ENTITY_RATINGS TO R360_APPDATA_READER
/


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\R360_NonPublicOpions\R360CFS_Release_Sep8th_2023\views\VW_ENTITY_RATINGS_HISTORY.vw

SET DEFINE OFF;
/* Formatted on 8/29/2023 10:18:18 AM (QP5 v5.362) */
CREATE OR REPLACE FORCE VIEW R360_APPDATA.VW_ENTITY_RATINGS_HISTORY
(
    ENTITY_ID,
    DEBT_TYPE_CODE,
    RATING_TYPE_CODE,
    RATING_TYPE_DESCRIPTION,
    RATING,
    RATING_DATE,
    ACTION,
    CREDITWATCH_OUTLOOK,
    CREDITWATCH_OUTLOOK_DATE,
    RATING_DETAIL_ID,
    DATA_ADMIN_DATE,
    CONFIDENTIALITY_IND,
    CONFIDENTIAL_CATEGORY_CODE
)
BEQUEATH DEFINER
AS
    (SELECT ENTITY_ID,
            DEBT_TYPE_CODE,
            RATING_TYPE_CODE,
            RATING_TYPE_DESCRIPTION,
            RATING,
            RATING_DATE,
            ACTION,
            CREDITWATCH_OUTLOOK,
            CREDITWATCH_OUTLOOK_DATE,
            RATING_DETAIL_ID,
            DATA_ADMIN_DATE,
            'N'      AS CONFIDENTIALITY_IND,
            NULL     AS CONFIDENTIAL_CATEGORY_CODE
       FROM R360_APPDATA.VW_ENTITY_RATINGS_HISTORY_PUBLIC
     UNION ALL
     SELECT ENTITY_ID,
            DEBT_TYPE_CODE,
            RATING_TYPE_CODE,
            RATING_TYPE_DESCRIPTION,
            RATING,
            RATING_DATE,
            ACTION,
            CREDITWATCH_OUTLOOK,
            CREDITWATCH_OUTLOOK_DATE,
            RATING_DETAIL_ID,
            DATA_ADMIN_DATE,
            CONFIDENTIALITY_IND,
            CONFIDENTIAL_CATEGORY_CODE
       FROM R360_APPDATA.VW_ENTITY_RATINGS_HISTORY_PVT)
/


GRANT SELECT ON R360_APPDATA.VW_ENTITY_RATINGS_HISTORY TO R360_APPDATA_READER
/


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\R360_NonPublicOpions\R360CFS_Release_Sep8th_2023\views\VW_ENTITY_RATINGS_HISTORY_LAST_10YRS.vw

SET DEFINE OFF;
/* Formatted on 8/29/2023 10:18:21 AM (QP5 v5.362) */
CREATE OR REPLACE FORCE VIEW R360_APPDATA.VW_ENTITY_RATINGS_HISTORY_LAST_10YRS
(
    ENTITY_ID,
    ENTITY_NAME,
    DEBT_TYPE_CODE,
    DEBT_TYPE_DESC,
    RATING_TYPE_CODE,
    RATING_TYPE_DESC,
    CURRENT_RATING_SYMBOL,
    RATING_DATE,
    CONFIDENTIALITY_IND,
    CONFIDENTIAL_CATEGORY_CODE,
    CONFIDENTIAL_CATEGORY_DESC,
    RATING_DETAIL_ID,
    RATING_TYPE_SORTORDER
)
BEQUEATH DEFINER
AS
    WITH
        FINAL_RES
        AS
            (SELECT PUB.ENTITY_ID,
                    PUB.CURRENT_RATING_SYMBOL,
                    PUB.DEBT_TYPE_CODE,
                    PUB.DEBT_TYPE_DESC,
                    PUB.RATING_TYPE_CODE,
                    PUB.RATING_TYPE_DESC,
                    PUB.RATING_DETAIL_ID,
                    PUB.RATING_DATE,
                    'N'          AS CONFIDENTIALITY_IND,
                    'PUB'        AS CONFIDENTIAL_CATEGORY_CODE,
                    'Public'     AS CONFIDENTIAL_CATEGORY_DESC
               FROM R360_APPDATA.VW_ENTITY_RATINGS_HISTORY_LAST_10YRS_PUBLIC
                    PUB
             -- WHERE NOT EXISTS
             --       (SELECT 1
             --         FROM R360_APPDATA.VW_ENTITY_RATINGS_HISTORY_LAST_10YRS_PVT
             --        WHERE ENTITY_ID = PUB.ENTITY_ID)
             UNION ALL
             SELECT ENTITY_ID,
                    CURRENT_RATING_SYMBOL,
                    DEBT_TYPE_CODE,
                    DEBT_TYPE_DESC,
                    RATING_TYPE_CODE,
                    RATING_TYPE_DESC,
                    RATING_DETAIL_ID,
                    RATING_DATE,
                    CONFIDENTIALITY_IND,
                    CONFIDENTIAL_CATEGORY_CODE,
                    (CASE
                         WHEN CONFIDENTIAL_CATEGORY_CODE = 'CIR'
                         THEN
                             'Confidential(CIR)'
                         WHEN CONFIDENTIAL_CATEGORY_CODE = 'PVT'
                         THEN
                             'Private'
                         ELSE
                             ''
                     END)    AS CONFIDENTIAL_CATEGORY_DESC
               FROM R360_APPDATA.VW_ENTITY_RATINGS_HISTORY_LAST_10YRS_PVT)
    SELECT EN.ENTITY_ID,
           EN.ENTITY_LEGAL_NAME    AS ENTITY_NAME,
           PVT.DEBT_TYPE_CODE,
           PVT.DEBT_TYPE_DESC,
           (CASE
                WHEN PVT.RATING_TYPE_CODE = 'FCLONG' THEN 'FC'
                WHEN PVT.RATING_TYPE_CODE = 'STDLONG' THEN 'LC'
                ELSE PVT.RATING_TYPE_CODE
            END)                   AS RATING_TYPE_CODE,
           PVT.RATING_TYPE_DESC,
           PVT.CURRENT_RATING_SYMBOL,
           PVT.RATING_DATE,
           PVT.CONFIDENTIALITY_IND,
           PVT.CONFIDENTIAL_CATEGORY_CODE,
           PVT.CONFIDENTIAL_CATEGORY_DESC,
           PVT.RATING_DETAIL_ID,
           NULL                    AS RATING_TYPE_SORTORDER
      FROM fgr.entity_names  EN
           INNER JOIN FINAL_RES PVT ON (PVT.ENTITY_ID = EN.ENTITY_ID)
     WHERE EN.CURR_IND = 'Y'
/


GRANT SELECT ON R360_APPDATA.VW_ENTITY_RATINGS_HISTORY_LAST_10YRS TO R360_APPDATA_READER
/


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\R360_NonPublicOpions\R360CFS_Release_Sep8th_2023\views\VW_ENTITY_RATINGS_HISTORY_LAST_10YRS_PUBLIC.vw

SET DEFINE OFF;
/* Formatted on 8/29/2023 10:18:24 AM (QP5 v5.362) */
CREATE OR REPLACE FORCE VIEW R360_APPDATA.VW_ENTITY_RATINGS_HISTORY_LAST_10YRS_PUBLIC
(
    ENTITY_ID,
    ENTITY_NAME,
    DEBT_TYPE_CODE,
    DEBT_TYPE_DESC,
    RATING_TYPE_CODE,
    RATING_TYPE_DESC,
    CURRENT_RATING_SYMBOL,
    RATING_DATE,
    CONFIDENTIALITY_IND,
    CONFIDENTIAL_CATEGORY_CODE,
    CONFIDENTIAL_CATEGORY_DESC,
    RATING_DETAIL_ID,
    RATING_TYPE_SORTORDER
)
BEQUEATH DEFINER
AS
    SELECT DISTINCT
           EN.ENTITY_ID,
           EN.ENTITY_LEGAL_NAME           AS ENTITY_NAME,
           PUB.DEBT_TYPE_CODE,
           NULL                           AS DEBT_TYPE_DESC,
           (CASE
                WHEN PUB.RATING_TYPE_CODE = 'FCLONG' THEN 'FC'
                WHEN PUB.RATING_TYPE_CODE = 'STDLONG' THEN 'LC'
                ELSE PUB.RATING_TYPE_CODE
            END)                          AS RATING_TYPE_CODE,
           PUB.RATING_TYPE_DESCRIPTION    AS RATING_TYPE_DESC,
           PUB.RATING                     AS CURRENT_RATING_SYMBOL,
           PUB.RATING_DATE,
           'N'                            AS CONFIDENTIALITY_IND,
           'PUB'                          AS CONFIDENTIAL_CATEGORY_CODE,
           'Public'                       AS CONFIDENTIAL_CATEGORY_DESC,
           PUB.RATING_DETAIL_ID,
           NULL                           AS RATING_TYPE_SORTORDER
      FROM R360_APPDATA.VW_ENTITY_RATINGS_HISTORY_PUBLIC  PUB
           INNER JOIN fgr.entity_names EN ON (PUB.ENTITY_ID = EN.ENTITY_ID)
     WHERE     PUB.RATING_TYPE_CODE IN ('FCLONG', 'STDLONG')
           AND PUB.DEBT_TYPE_CODE = 'ICR'
           AND TRUNC (PUB.RATING_DATE) BETWEEN ADD_MONTHS (TRUNC (SYSDATE),
                                                           -120)
                                           AND SYSDATE
           AND EN.CURR_IND = 'Y'
/


GRANT SELECT ON R360_APPDATA.VW_ENTITY_RATINGS_HISTORY_LAST_10YRS_PUBLIC TO R360_APPDATA_READER
/


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\R360_NonPublicOpions\R360CFS_Release_Sep8th_2023\views\VW_ENTITY_RATINGS_HISTORY_LAST_10YRS_PVT.vw

SET DEFINE OFF;
/* Formatted on 8/29/2023 10:18:27 AM (QP5 v5.362) */
CREATE OR REPLACE FORCE VIEW R360_APPDATA.VW_ENTITY_RATINGS_HISTORY_LAST_10YRS_PVT
(
    ENTITY_ID,
    ENTITY_NAME,
    CURRENT_RATING_SYMBOL,
    DEBT_TYPE_CODE,
    DEBT_TYPE_DESC,
    RATING_TYPE_CODE,
    RATING_TYPE_DESC,
    RATING_DETAIL_ID,
    RATING_DATE,
    CONFIDENTIALITY_IND,
    CONFIDENTIAL_CATEGORY_CODE
)
BEQUEATH DEFINER
AS
    SELECT DISTINCT
           EN.ENTITY_ID,
           EN.ENTITY_LEGAL_NAME           AS ENTITY_NAME,
           PVT.RATING                     AS CURRENT_RATING_SYMBOL,
           PVT.DEBT_TYPE_CODE,
           NULL                           AS DEBT_TYPE_DESC,
           (CASE
                WHEN PVT.RATING_TYPE_CODE = 'FCLONG' THEN 'FC'
                WHEN PVT.RATING_TYPE_CODE = 'STDLONG' THEN 'LC'
                ELSE PVT.RATING_TYPE_CODE
            END)                          AS RATING_TYPE_CODE,
           PVT.RATING_TYPE_DESCRIPTION    AS RATING_TYPE_DESC,
           PVT.RATING_DETAIL_ID,
           PVT.RATING_DATE,
           PVT.CONFIDENTIALITY_IND,
           PVT.CONFIDENTIAL_CATEGORY_CODE
      FROM R360_APPDATA.VW_ENTITY_RATINGS_HISTORY_PVT_ORG_ID  PVT
           INNER JOIN fgr.entity_names EN ON (PVT.ENTITY_ID = EN.ENTITY_ID)
     WHERE     PVT.RATING_TYPE_CODE IN ('FCLONG', 'STDLONG')
           AND PVT.DEBT_TYPE_CODE = 'ICR'
           AND TRUNC (PVT.RATING_DATE) BETWEEN ADD_MONTHS (TRUNC (SYSDATE),
                                                           -120)
                                           AND SYSDATE
           AND EN.CURR_IND = 'Y'
/


GRANT SELECT ON R360_APPDATA.VW_ENTITY_RATINGS_HISTORY_LAST_10YRS_PVT TO R360_APPDATA_READER
/


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\R360_NonPublicOpions\R360CFS_Release_Sep8th_2023\views\VW_ENTITY_RATINGS_HISTORY_PUBLIC.vw

SET DEFINE OFF;
/* Formatted on 8/29/2023 10:18:30 AM (QP5 v5.362) */
CREATE OR REPLACE FORCE VIEW R360_APPDATA.VW_ENTITY_RATINGS_HISTORY_PUBLIC
(
    ENTITY_ID,
    DEBT_TYPE_CODE,
    RATING_TYPE_CODE,
    RATING_TYPE_DESCRIPTION,
    RATING,
    RATING_DATE,
    ACTION,
    CREDITWATCH_OUTLOOK,
    CREDITWATCH_OUTLOOK_DATE,
    RATING_DETAIL_ID,
    DATA_ADMIN_DATE
)
BEQUEATH DEFINER
AS
    (SELECT rd.rating_id                       AS ENTITY_ID,
            rd.debt_type_code                  AS DEBT_TYPE_CODE,
            rd.rating_type_code                AS RATING_TYPE_CODE,
            rating_type_codes.description      AS RATING_TYPE_DESCRIPTION,
            rd.current_rating_symbol           AS RATING,
            rd.rating_date                     AS RATING_DATE,
            (CASE
                 WHEN ((    rd_nonaffirm.rating_action_word <> 'Affirmed'
                        AND rd_nonaffirm.current_cw_ol_action_word
                                IS NOT NULL))
                 THEN
                     (   (rd_nonaffirm.rating_action_word || ' | ')
                      || rd_nonaffirm.current_cw_ol_action_word)
                 WHEN ((    rd_nonaffirm.rating_action_word <> 'Affirmed'
                        AND rd_nonaffirm.current_cw_ol_action_word IS NULL))
                 THEN
                     rd_nonaffirm.rating_action_word
                 WHEN (rd_nonaffirm.rating_action_word IS NULL)
                 THEN
                     rd_nonaffirm.current_cw_ol_action_word
                 WHEN ((    rd_nonaffirm.rating_action_word = 'Affirmed'
                        AND rd_nonaffirm.current_cw_ol_action_word
                                IS NOT NULL))
                 THEN
                     rd_nonaffirm.current_cw_ol_action_word
                 WHEN ((    rd_nonaffirm.rating_action_word = 'Affirmed'
                        AND rd_nonaffirm.current_cw_ol_action_word IS NULL))
                 THEN
                     'Deleted Row'
                 ELSE
                     NULL
             END)                              AS action,
            rd_nonaffirm.current_cw_ol         AS CREDITWATCH_OUTLOOK,
            rd_nonaffirm.current_cw_ol_date    AS CREDITWATCH_OUTLOOK_DATE,
            rd.rating_detail_id                AS RATING_DETAIL_ID,
            rd.data_admin_date                 AS DATA_ADMIN_DATE
       FROM FGR_PRIME.RATING_DETAILS  rd
            INNER JOIN R360_APPDATA.VW_RATING_TYPE_CODES rating_type_codes
                ON rd.rating_type_code = rating_type_codes.rating_type_code
            INNER JOIN FGR_PRIME.RATING_DETAILS rd_nonaffirm
                ON rd.non_affirm_rating_id = rd_nonaffirm.source_rating_id
      WHERE     rd.ACK_STATUS = 'Y'
            AND rd.CIQ_REP_IND = 1
            AND rd.debt_type_code = 'ICR'
            AND rd.source_rating_ind = 'O'
            AND rd_nonaffirm.debt_type_code = 'ICR'
            AND rd_nonaffirm.source_rating_ind = 'O'
            AND rd.rating_action_type <> 'Affirmed'
     UNION ALL
     SELECT ei.entity_id                       AS ENTITY_ID,
            rd.debt_type_code                  AS DEBT_TYPE_CODE,
            rd.rating_type_code                AS RATING_TYPE_CODE,
            rating_type_codes.description      AS RATING_TYPE_DESCRIPTION,
            rd.current_rating_symbol           AS RATING,
            rd.rating_date                     AS RATING_DATE,
            (CASE
                 WHEN ((    rd_nonaffirm.rating_action_word <> 'Affirmed'
                        AND rd_nonaffirm.current_cw_ol_action_word
                                IS NOT NULL))
                 THEN
                     (   (rd_nonaffirm.rating_action_word || ' | ')
                      || rd_nonaffirm.current_cw_ol_action_word)
                 WHEN ((    rd_nonaffirm.rating_action_word <> 'Affirmed'
                        AND rd_nonaffirm.current_cw_ol_action_word IS NULL))
                 THEN
                     rd_nonaffirm.rating_action_word
                 WHEN (rd_nonaffirm.rating_action_word IS NULL)
                 THEN
                     rd_nonaffirm.current_cw_ol_action_word
                 WHEN ((    rd_nonaffirm.rating_action_word = 'Affirmed'
                        AND rd_nonaffirm.current_cw_ol_action_word
                                IS NOT NULL))
                 THEN
                     rd_nonaffirm.current_cw_ol_action_word
                 WHEN ((    rd_nonaffirm.rating_action_word = 'Affirmed'
                        AND rd_nonaffirm.current_cw_ol_action_word IS NULL))
                 THEN
                     'Deleted Row'
                 ELSE
                     NULL
             END)                              AS action,
            rd_nonaffirm.current_cw_ol         AS CREDITWATCH_OUTLOOK,
            rd_nonaffirm.current_cw_ol_date    AS CREDITWATCH_OUTLOOK_DATE,
            rd.rating_detail_id                AS RATING_DETAIL_ID,
            rd.data_admin_date                 AS DATA_ADMIN_DATE
       FROM FGR_PRIME.RATING_DETAILS  rd
            INNER JOIN R360_APPDATA.VW_RATING_TYPE_CODES rating_type_codes
                ON rd.rating_type_code = rating_type_codes.rating_type_code
            INNER JOIN FGR_PRIME.RATING_DETAILS rd_nonaffirm
                ON rd.non_affirm_rating_id = rd_nonaffirm.source_rating_id
            INNER JOIN R360_APPDATA.VW_ENTITY_INSTRUMENTS_PARTICIPANTS ei
                ON ei.instrument_id = rd.rating_id
      WHERE     rd.ACK_STATUS = 'Y'
            AND rd.CIQ_REP_IND = 1
            AND rd.debt_type_code IN ('FSR',
                                      'FER',
                                      'FINPROG',
                                      'RC')
            AND rd.source_rating_ind = 'D'
            AND rd_nonaffirm.debt_type_code IN ('FSR',
                                                'FER',
                                                'FINPROG',
                                                'RC')
            AND rd_nonaffirm.source_rating_ind = 'D'
            AND rd.rating_action_type <> 'Affirmed'
            AND ei.role_code = 'ISSUER'
            AND ei.status_ind = 'A')
/


GRANT SELECT ON R360_APPDATA.VW_ENTITY_RATINGS_HISTORY_PUBLIC TO R360_APPDATA_READER
/


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\R360_NonPublicOpions\R360CFS_Release_Sep8th_2023\views\VW_ENTITY_RATINGS_HISTORY_PVT.vw

SET DEFINE OFF;
/* Formatted on 8/29/2023 10:18:33 AM (QP5 v5.362) */
CREATE OR REPLACE FORCE VIEW R360_APPDATA.VW_ENTITY_RATINGS_HISTORY_PVT
(
    ENTITY_ID,
    DEBT_TYPE_CODE,
    RATING_TYPE_CODE,
    RATING_TYPE_DESCRIPTION,
    RATING,
    RATING_DATE,
    ACTION,
    CREDITWATCH_OUTLOOK,
    CREDITWATCH_OUTLOOK_DATE,
    RATING_DETAIL_ID,
    DATA_ADMIN_DATE,
    CONFIDENTIALITY_IND,
    CONFIDENTIAL_CATEGORY_CODE
)
BEQUEATH DEFINER
AS
    SELECT odt.ORG_ID                         AS ENTITY_ID,
           odt.DEBT_TYPE_CODE                 AS DEBT_TYPE_CODE,
           odtr.RATING_TYPE_CODE              AS RATING_TYPE_CODE,
           rtc.DESCRIPTION                    AS RATING_TYPE_DESCRIPTION,
           dr.CURRENT_RATING_SYMBOL           AS RATING,
           odtr.RATING_DATE                   AS RATING_DATE,
           CASE
               WHEN ((    dr.rating_action_word <> 'Affirmed'
                      AND dr.current_cw_ol_action_word IS NOT NULL))
               THEN
                   (   (dr.rating_action_word || ' | ')
                    || dr.current_cw_ol_action_word)
               WHEN ((    dr.rating_action_word <> 'Affirmed'
                      AND dr.current_cw_ol_action_word IS NULL))
               THEN
                   dr.rating_action_word
               WHEN (dr.rating_action_word IS NULL)
               THEN
                   dr.current_cw_ol_action_word
               WHEN ((    dr.rating_action_word = 'Affirmed'
                      AND dr.current_cw_ol_action_word IS NOT NULL))
               THEN
                   dr.current_cw_ol_action_word
               WHEN ((    dr.rating_action_word = 'Affirmed'
                      AND dr.current_cw_ol_action_word IS NULL))
               THEN
                   'Deleted Row'
               ELSE
                   NULL
           END                                AS ACTION,
           dr.CURRENT_CW_OL                   AS CREDITWATCH_OUTLOOK,
           dr.CURRENT_CW_OL_DATE              AS CREDITWATCH_OUTLOOK_DATE,
           odtr.ORG_DEBT_TYPE_RATING_ID       AS RATING_DETAIL_ID,
           odtr.DATA_ADMIN_DATE               AS DATA_ADMIN_DATE,
           odtr.CONFIDENTIALITY_IND           AS CONFIDENTIALITY_IND,
           odtr.CONFIDENTIAL_CATEGORY_CODE    AS CONFIDENTIAL_CATEGORY_CODE
      FROM CORE.ORG_DEBT_TYPES  odt
           JOIN CORE.ORG_DEBT_TYPE_RATINGS odtr
               ON odtr.ORG_DEBT_TYPE = odt.ORG_DEBT_TYPE_ID
           INNER JOIN R360_APPDATA.VW_RATING_TYPE_CODES rtc
               ON rtc.RATING_TYPE_CODE = odtr.RATING_TYPE_CODE
           INNER JOIN DERIVATION.deriv_rating dr
               ON dr.RATING_ID = odtr.ORG_DEBT_TYPE_RATING_ID
     WHERE dr.active_flag = 'Y' AND dr.RATING_ACTION_TYPE <> 'Affirmed'
/


GRANT SELECT ON R360_APPDATA.VW_ENTITY_RATINGS_HISTORY_PVT TO R360_APPDATA_READER
/


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\R360_NonPublicOpions\R360CFS_Release_Sep8th_2023\views\VW_ENTITY_RATINGS_HISTORY_PVT_ORG_ID.vw

SET DEFINE OFF;
/* Formatted on 8/29/2023 10:18:36 AM (QP5 v5.362) */
CREATE OR REPLACE FORCE VIEW R360_APPDATA.VW_ENTITY_RATINGS_HISTORY_PVT_ORG_ID
(
    ENTITY_ID,
    DEBT_TYPE_CODE,
    RATING_TYPE_CODE,
    RATING_TYPE_DESCRIPTION,
    RATING,
    RATING_DATE,
    ACTION,
    CREDITWATCH_OUTLOOK,
    CREDITWATCH_OUTLOOK_DATE,
    RATING_DETAIL_ID,
    DATA_ADMIN_DATE,
    CONFIDENTIALITY_IND,
    CONFIDENTIAL_CATEGORY_CODE
)
BEQUEATH DEFINER
AS
    SELECT odt.ORG_ID                         AS ENTITY_ID,
           odt.DEBT_TYPE_CODE                 AS DEBT_TYPE_CODE,
           odtr.RATING_TYPE_CODE              AS RATING_TYPE_CODE,
           rtc.DESCRIPTION                    AS RATING_TYPE_DESCRIPTION,
           dr.CURRENT_RATING_SYMBOL           AS RATING,
           odtr.RATING_DATE                   AS RATING_DATE,
           CASE
               WHEN ((    dr.rating_action_word <> 'Affirmed'
                      AND dr.current_cw_ol_action_word IS NOT NULL))
               THEN
                   (   (dr.rating_action_word || ' | ')
                    || dr.current_cw_ol_action_word)
               WHEN ((    dr.rating_action_word <> 'Affirmed'
                      AND dr.current_cw_ol_action_word IS NULL))
               THEN
                   dr.rating_action_word
               WHEN (dr.rating_action_word IS NULL)
               THEN
                   dr.current_cw_ol_action_word
               WHEN ((    dr.rating_action_word = 'Affirmed'
                      AND dr.current_cw_ol_action_word IS NOT NULL))
               THEN
                   dr.current_cw_ol_action_word
               WHEN ((    dr.rating_action_word = 'Affirmed'
                      AND dr.current_cw_ol_action_word IS NULL))
               THEN
                   'Deleted Row'
               ELSE
                   NULL
           END                                AS ACTION,
           dr.CURRENT_CW_OL                   AS CREDITWATCH_OUTLOOK,
           dr.CURRENT_CW_OL_DATE              AS CREDITWATCH_OUTLOOK_DATE,
           odtr.ORG_DEBT_TYPE_RATING_ID       AS RATING_DETAIL_ID,
           odtr.DATA_ADMIN_DATE               AS DATA_ADMIN_DATE,
           odtr.CONFIDENTIALITY_IND           AS CONFIDENTIALITY_IND,
           odtr.CONFIDENTIAL_CATEGORY_CODE    AS CONFIDENTIAL_CATEGORY_CODE
      FROM CORE.ORG_DEBT_TYPES  odt
           JOIN CORE.ORG_DEBT_TYPE_RATINGS odtr
               ON odtr.ORG_DEBT_TYPE = odt.ORG_DEBT_TYPE_ID
           INNER JOIN R360_APPDATA.VW_RATING_TYPE_CODES rtc
               ON rtc.RATING_TYPE_CODE = odtr.RATING_TYPE_CODE
           INNER JOIN DERIVATION.deriv_rating dr
               ON dr.RATING_ID = odtr.ORG_DEBT_TYPE_RATING_ID
     WHERE dr.active_flag = 'Y' AND dr.RATING_ACTION_TYPE <> 'Affirmed'
/


GRANT SELECT ON R360_APPDATA.VW_ENTITY_RATINGS_HISTORY_PVT_ORG_ID TO R360_APPDATA_READER
/


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\R360_NonPublicOpions\R360CFS_Release_Sep8th_2023\views\VW_ENTITY_RATINGS_HISTORY_TAC.vw

SET DEFINE OFF;
/* Formatted on 8/29/2023 10:18:39 AM (QP5 v5.362) */
CREATE OR REPLACE FORCE VIEW R360_APPDATA.VW_ENTITY_RATINGS_HISTORY_TAC
(
    ENTITY_ID,
    DEBT_TYPE_CODE,
    RATING_TYPE_CODE,
    RATING_TYPE_DESCRIPTION,
    RATING,
    RATING_DATE,
    ACTION,
    CREDITWATCH_OUTLOOK,
    CREDITWATCH_OUTLOOK_DATE,
    RATING_DETAIL_ID,
    DATA_ADMIN_DATE,
    CONFIDENTIALITY_IND,
    CONFIDENTIAL_CATEGORY_CODE
)
BEQUEATH DEFINER
AS
    (SELECT ENTITY_ID,
            DEBT_TYPE_CODE,
            RATING_TYPE_CODE,
            RATING_TYPE_DESCRIPTION,
            RATING,
            RATING_DATE,
            ACTION,
            CREDITWATCH_OUTLOOK,
            CREDITWATCH_OUTLOOK_DATE,
            RATING_DETAIL_ID,
            DATA_ADMIN_DATE,
            'N'          AS CONFIDENTIALITY_IND,
            'Public'     AS CONFIDENTIAL_CATEGORY_CODE
       FROM R360_APPDATA.VW_ENTITY_RATINGS_HISTORY_TAC_PUBLIC
     UNION ALL
     SELECT ENTITY_ID,
            DEBT_TYPE_CODE,
            RATING_TYPE_CODE,
            RATING_TYPE_DESCRIPTION,
            RATING,
            RATING_DATE,
            ACTION,
            CREDITWATCH_OUTLOOK,
            CREDITWATCH_OUTLOOK_DATE,
            RATING_DETAIL_ID,
            DATA_ADMIN_DATE,
            CONFIDENTIALITY_IND,
            CONFIDENTIAL_CATEGORY_CODE
       FROM R360_APPDATA.VW_ENTITY_RATINGS_HISTORY_TAC_PVT)
/


GRANT SELECT ON R360_APPDATA.VW_ENTITY_RATINGS_HISTORY_TAC TO R360_APPDATA_READER
/


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\R360_NonPublicOpions\R360CFS_Release_Sep8th_2023\views\VW_ENTITY_RATINGS_HISTORY_TAC_PUBLIC.vw

SET DEFINE OFF;
/* Formatted on 8/29/2023 10:18:42 AM (QP5 v5.362) */
CREATE OR REPLACE FORCE VIEW R360_APPDATA.VW_ENTITY_RATINGS_HISTORY_TAC_PUBLIC
(
    ENTITY_ID,
    DEBT_TYPE_CODE,
    RATING_TYPE_CODE,
    RATING_TYPE_DESCRIPTION,
    RATING,
    RATING_DATE,
    ACTION,
    CREDITWATCH_OUTLOOK,
    CREDITWATCH_OUTLOOK_DATE,
    RATING_DETAIL_ID,
    DATA_ADMIN_DATE,
    CONFIDENTIALITY_IND,
    CONFIDENTIAL_CATEGORY_CODE
)
BEQUEATH DEFINER
AS
    (SELECT rd.rating_id                       AS ENTITY_ID,
            rd.debt_type_code                  AS DEBT_TYPE_CODE,
            rd.rating_type_code                AS RATING_TYPE_CODE,
            rating_type_codes.description      AS RATING_TYPE_DESCRIPTION,
            rd.current_rating_symbol           AS RATING,
            rd.rating_date                     AS RATING_DATE,
            (CASE
                 WHEN ((    rd_nonaffirm.rating_action_word <> 'Affirmed'
                        AND rd_nonaffirm.current_cw_ol_action_word
                                IS NOT NULL))
                 THEN
                     (   (rd_nonaffirm.rating_action_word || ' | ')
                      || rd_nonaffirm.current_cw_ol_action_word)
                 WHEN ((    rd_nonaffirm.rating_action_word <> 'Affirmed'
                        AND rd_nonaffirm.current_cw_ol_action_word IS NULL))
                 THEN
                     rd_nonaffirm.rating_action_word
                 WHEN (rd_nonaffirm.rating_action_word IS NULL)
                 THEN
                     rd_nonaffirm.current_cw_ol_action_word
                 WHEN ((    rd_nonaffirm.rating_action_word = 'Affirmed'
                        AND rd_nonaffirm.current_cw_ol_action_word
                                IS NOT NULL))
                 THEN
                     rd_nonaffirm.current_cw_ol_action_word
                 WHEN ((    rd_nonaffirm.rating_action_word = 'Affirmed'
                        AND rd_nonaffirm.current_cw_ol_action_word IS NULL))
                 THEN
                     'Deleted Row'
                 ELSE
                     NULL
             END)                              AS action,
            rd_nonaffirm.current_cw_ol         AS CREDITWATCH_OUTLOOK,
            rd_nonaffirm.current_cw_ol_date    AS CREDITWATCH_OUTLOOK_DATE,
            rd.rating_detail_id                AS RATING_DETAIL_ID,
            rd.data_admin_date                 AS DATA_ADMIN_DATE,
            'N'                                AS CONFIDENTIALITY_IND,
            NULL                               AS CONFIDENTIAL_CATEGORY_CODE
       FROM FGR_PRIME.RATING_DETAILS  rd
            INNER JOIN R360_APPDATA.VW_RATING_TYPE_CODES rating_type_codes
                ON rd.rating_type_code = rating_type_codes.rating_type_code
            INNER JOIN FGR_PRIME.RATING_DETAILS rd_nonaffirm
                ON rd.non_affirm_rating_id = rd_nonaffirm.source_rating_id
      WHERE     rd.ACK_STATUS = 'Y'
            AND rd.CIQ_REP_IND = 1
            AND rd.debt_type_code = 'TACASSES'
            AND rd.source_rating_ind = 'O'
            AND rd_nonaffirm.debt_type_code = 'TACASSES'
            AND rd_nonaffirm.source_rating_ind = 'O'
            AND rd.rating_action_type <> 'Affirmed'
     UNION ALL
     SELECT ei.entity_id                       AS ENTITY_ID,
            rd.debt_type_code                  AS DEBT_TYPE_CODE,
            rd.rating_type_code                AS RATING_TYPE_CODE,
            rating_type_codes.description      AS RATING_TYPE_DESCRIPTION,
            rd.current_rating_symbol           AS RATING,
            rd.rating_date                     AS RATING_DATE,
            (CASE
                 WHEN ((    rd_nonaffirm.rating_action_word <> 'Affirmed'
                        AND rd_nonaffirm.current_cw_ol_action_word
                                IS NOT NULL))
                 THEN
                     (   (rd_nonaffirm.rating_action_word || ' | ')
                      || rd_nonaffirm.current_cw_ol_action_word)
                 WHEN ((    rd_nonaffirm.rating_action_word <> 'Affirmed'
                        AND rd_nonaffirm.current_cw_ol_action_word IS NULL))
                 THEN
                     rd_nonaffirm.rating_action_word
                 WHEN (rd_nonaffirm.rating_action_word IS NULL)
                 THEN
                     rd_nonaffirm.current_cw_ol_action_word
                 WHEN ((    rd_nonaffirm.rating_action_word = 'Affirmed'
                        AND rd_nonaffirm.current_cw_ol_action_word
                                IS NOT NULL))
                 THEN
                     rd_nonaffirm.current_cw_ol_action_word
                 WHEN ((    rd_nonaffirm.rating_action_word = 'Affirmed'
                        AND rd_nonaffirm.current_cw_ol_action_word IS NULL))
                 THEN
                     'Deleted Row'
                 ELSE
                     NULL
             END)                              AS action,
            rd_nonaffirm.current_cw_ol         AS CREDITWATCH_OUTLOOK,
            rd_nonaffirm.current_cw_ol_date    AS CREDITWATCH_OUTLOOK_DATE,
            rd.rating_detail_id                AS RATING_DETAIL_ID,
            rd.data_admin_date                 AS DATA_ADMIN_DATE,
            'N'                                AS CONFIDENTIALITY_IND,
            NULL                               AS CONFIDENTIAL_CATEGORY_CODE
       FROM FGR_PRIME.RATING_DETAILS  rd
            INNER JOIN R360_APPDATA.VW_RATING_TYPE_CODES rating_type_codes
                ON rd.rating_type_code = rating_type_codes.rating_type_code
            INNER JOIN FGR_PRIME.RATING_DETAILS rd_nonaffirm
                ON rd.non_affirm_rating_id = rd_nonaffirm.source_rating_id
            INNER JOIN R360_APPDATA.VW_ENTITY_INSTRUMENTS_PARTICIPANTS ei
                ON ei.instrument_id = rd.rating_id
      WHERE     rd.ACK_STATUS = 'Y'
            AND rd.CIQ_REP_IND = 1
            AND rd.debt_type_code = 'TACASSES'
            AND rd.source_rating_ind = 'D'
            AND rd_nonaffirm.debt_type_code IN 'TACASSES'
            AND rd_nonaffirm.source_rating_ind = 'D'
            AND rd.rating_action_type <> 'Affirmed'
            AND ei.role_code = 'ISSUER'
            AND ei.status_ind = 'A')
/


GRANT SELECT ON R360_APPDATA.VW_ENTITY_RATINGS_HISTORY_TAC_PUBLIC TO R360_APPDATA_READER
/

GRANT SELECT ON R360_APPDATA.VW_ENTITY_RATINGS_HISTORY_TAC_PUBLIC TO R360_APP_USER
/


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\R360_NonPublicOpions\R360CFS_Release_Sep8th_2023\views\VW_ENTITY_RATINGS_HISTORY_TAC_PVT.vw

SET DEFINE OFF;
/* Formatted on 8/29/2023 10:18:45 AM (QP5 v5.362) */
CREATE OR REPLACE FORCE VIEW R360_APPDATA.VW_ENTITY_RATINGS_HISTORY_TAC_PVT
(
    ENTITY_ID,
    DEBT_TYPE_CODE,
    RATING_TYPE_CODE,
    RATING_TYPE_DESCRIPTION,
    RATING,
    RATING_DATE,
    ACTION,
    CREDITWATCH_OUTLOOK,
    CREDITWATCH_OUTLOOK_DATE,
    RATING_DETAIL_ID,
    DATA_ADMIN_DATE,
    CONFIDENTIALITY_IND,
    CONFIDENTIAL_CATEGORY_CODE
)
BEQUEATH DEFINER
AS
    SELECT odt.ORG_ID                         AS ENTITY_ID,
           odt.DEBT_TYPE_CODE                 AS DEBT_TYPE_CODE,
           odtr.RATING_TYPE_CODE              AS RATING_TYPE_CODE,
           rtc.DESCRIPTION                    AS RATING_TYPE_DESCRIPTION,
           dr.CURRENT_RATING_SYMBOL           AS RATING,
           odtr.RATING_DATE                   AS RATING_DATE,
           CASE
               WHEN ((    dr.rating_action_word <> 'Affirmed'
                      AND dr.current_cw_ol_action_word IS NOT NULL))
               THEN
                   (   (dr.rating_action_word || ' | ')
                    || dr.current_cw_ol_action_word)
               WHEN ((    dr.rating_action_word <> 'Affirmed'
                      AND dr.current_cw_ol_action_word IS NULL))
               THEN
                   dr.rating_action_word
               WHEN (dr.rating_action_word IS NULL)
               THEN
                   dr.current_cw_ol_action_word
               WHEN ((    dr.rating_action_word = 'Affirmed'
                      AND dr.current_cw_ol_action_word IS NOT NULL))
               THEN
                   dr.current_cw_ol_action_word
               WHEN ((    dr.rating_action_word = 'Affirmed'
                      AND dr.current_cw_ol_action_word IS NULL))
               THEN
                   'Deleted Row'
               ELSE
                   NULL
           END                                AS ACTION,
           dr.CURRENT_CW_OL                   AS CREDITWATCH_OUTLOOK,
           dr.CURRENT_CW_OL_DATE              AS CREDITWATCH_OUTLOOK_DATE,
           odtr.ORG_DEBT_TYPE_RATING_ID       AS RATING_DETAIL_ID,
           odtr.DATA_ADMIN_DATE               AS DATA_ADMIN_DATE,
           odtr.CONFIDENTIALITY_IND           AS CONFIDENTIALITY_IND,
           odtr.CONFIDENTIAL_CATEGORY_CODE    AS CONFIDENTIAL_CATEGORY_CODE
      FROM CORE.ORG_DEBT_TYPES  odt
           JOIN CORE.ORG_DEBT_TYPE_RATINGS odtr
               ON odtr.ORG_DEBT_TYPE = odt.ORG_DEBT_TYPE_ID
           INNER JOIN R360_APPDATA.VW_RATING_TYPE_CODES rtc
               ON rtc.RATING_TYPE_CODE = odtr.RATING_TYPE_CODE
           INNER JOIN DERIVATION.deriv_rating dr
               ON dr.RATING_ID = odtr.ORG_DEBT_TYPE_RATING_ID
     WHERE     dr.active_flag = 'Y'
           AND dr.RATING_ACTION_TYPE <> 'Affirmed'
           AND odt.DEBT_TYPE_CODE = 'TACASSES'
           AND odtr.RATING_TYPE_CODE = 'TACASSES'
/


GRANT SELECT ON R360_APPDATA.VW_ENTITY_RATINGS_HISTORY_TAC_PVT TO R360_APPDATA_READER
/

GRANT SELECT ON R360_APPDATA.VW_ENTITY_RATINGS_HISTORY_TAC_PVT TO R360_APP_USER
/


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\R360_NonPublicOpions\R360CFS_Release_Sep8th_2023\views\VW_ENTITY_RATINGS_PEERS_PUBLIC.vw

SET DEFINE OFF;
/* Formatted on 8/29/2023 10:18:48 AM (QP5 v5.362) */
CREATE OR REPLACE FORCE VIEW R360_APPDATA.VW_ENTITY_RATINGS_PEERS_PUBLIC
(
    ENTITY_ID,
    ENTITY_LEGAL_NAME,
    RATING_TYPE_CODE,
    CURRENT_RATING_SYMBOL,
    RATING_DATE,
    LAST_REVIEW_DATE,
    LATEST_NON_AFFIRM_CW_OL,
    LATEST_NON_AFFIRM_CW_OL_DATE,
    ACTION,
    CONFIDENTIAL_CATEGORY_CODE,
    DEBT_TYPE_CODE,
    RATING_DETAIL_ID,
    DATA_ADMIN_DATE
)
BEQUEATH DEFINER
AS
    WITH
        Result_qry
        AS
            (SELECT ENTITY_ID,
                    CURRENT_RATING_SYMBOL,
                    DEBT_TYPE_CODE,
                    RATING_TYPE_CODE,
                    RATING_DATE,
                    ACTION,
                    RATING_DETAIL_ID,
                    DATA_ADMIN_DATE,
                    ROW_NUMBER ()
                        OVER (PARTITION BY ENTITY_ID, RATING_TYPE_CODE
                              ORDER BY RATING_DATE DESC)    ROWNUMBER,
                    LAST_REVIEW_DATE,
                    LATEST_NON_AFFIRM_CW_OL,
                    LATEST_NON_AFFIRM_CW_OL_DATE,
                    'Public'                                AS CONFIDENTIAL_CATEGORY_CODE
               FROM R360_APPDATA.VW_ENTITY_RATINGS_PUBLIC
              WHERE     RATING_TYPE_CODE IN ('FCLONG', 'STDLONG')
                    AND DEBT_TYPE_CODE = 'ICR')
    SELECT PVT.ENTITY_ID,
           ENTITY_LEGAL_NAME,
           RATING_TYPE_CODE,
           CURRENT_RATING_SYMBOL,
           RATING_DATE,
           LAST_REVIEW_DATE,
           LATEST_NON_AFFIRM_CW_OL,
           LATEST_NON_AFFIRM_CW_OL_DATE,
           ACTION,
           CONFIDENTIAL_CATEGORY_CODE,
           DEBT_TYPE_CODE,
           RATING_DETAIL_ID,
           DATA_ADMIN_DATE
      FROM Result_qry  PVT
           LEFT JOIN fgr.entity_names EN
               ON (PVT.ENTITY_ID = EN.ENTITY_ID AND EN.CURR_IND = 'Y')
     WHERE ROWNUMBER = 1
/


GRANT SELECT ON R360_APPDATA.VW_ENTITY_RATINGS_PEERS_PUBLIC TO R360_APPDATA_READER
/

GRANT SELECT ON R360_APPDATA.VW_ENTITY_RATINGS_PEERS_PUBLIC TO R360_APPDATA_WRITER
/

GRANT SELECT ON R360_APPDATA.VW_ENTITY_RATINGS_PEERS_PUBLIC TO R360_APP_USER
/


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\R360_NonPublicOpions\R360CFS_Release_Sep8th_2023\views\VW_ENTITY_RATINGS_PEERS_PVT.vw

SET DEFINE OFF;
/* Formatted on 8/29/2023 10:18:51 AM (QP5 v5.362) */
CREATE OR REPLACE FORCE VIEW R360_APPDATA.VW_ENTITY_RATINGS_PEERS_PVT
(
    ENTITY_ID,
    CURRENT_RATING_SYMBOL,
    DEBT_TYPE_CODE,
    RATING_TYPE_CODE,
    RATING_DATE,
    ACTION,
    RATING_DETAIL_ID,
    DATA_ADMIN_DATE,
    ROWNUMBER,
    LAST_REVIEW_DATE,
    LATEST_NON_AFFIRM_CW_OL,
    LATEST_NON_AFFIRM_CW_OL_DATE,
    CONFIDENTIAL_CATEGORY_CODE
)
BEQUEATH DEFINER
AS
    WITH
        Result_qry
        AS
            (SELECT ENTITY_ID,
                    CURRENT_RATING_SYMBOL,
                    DEBT_TYPE_CODE,
                    RATING_TYPE_CODE,
                    RATING_DATE,
                    ACTION,
                    RATING_DETAIL_ID,
                    DATA_ADMIN_DATE,
                    ROW_NUMBER ()
                        OVER (PARTITION BY ENTITY_ID, RATING_TYPE_CODE
                              ORDER BY RATING_DATE DESC)    ROWNUMBER,
                    LAST_REVIEW_DATE,
                    LATEST_NON_AFFIRM_CW_OL,
                    LATEST_NON_AFFIRM_CW_OL_DATE,
                    CONFIDENTIAL_CATEGORY_CODE
               FROM R360_APPDATA.VW_ENTITY_RATINGS_PVT
              WHERE     RATING_TYPE_CODE IN ('FCLONG', 'STDLONG')
                    AND DEBT_TYPE_CODE = 'ICR')
    SELECT ENTITY_ID,
           CURRENT_RATING_SYMBOL,
           DEBT_TYPE_CODE,
           RATING_TYPE_CODE,
           RATING_DATE,
           ACTION,
           RATING_DETAIL_ID,
           DATA_ADMIN_DATE,
           ROWNUMBER,
           LAST_REVIEW_DATE,
           LATEST_NON_AFFIRM_CW_OL,
           LATEST_NON_AFFIRM_CW_OL_DATE,
           CONFIDENTIAL_CATEGORY_CODE
      FROM Result_qry
     WHERE ROWNUMBER = 1
/


GRANT SELECT ON R360_APPDATA.VW_ENTITY_RATINGS_PEERS_PVT TO R360_APPDATA_READER
/


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\R360_NonPublicOpions\R360CFS_Release_Sep8th_2023\views\VW_ENTITY_RATINGS_PUBLIC.vw

SET DEFINE OFF;
/* Formatted on 8/29/2023 10:18:54 AM (QP5 v5.362) */
CREATE OR REPLACE FORCE VIEW R360_APPDATA.VW_ENTITY_RATINGS_PUBLIC
(
    ENTITY_ID,
    DEBT_TYPE_CODE,
    DEBT_TYPE_DESC,
    RATING_TYPE_CODE,
    RATING_TYPE_DESC,
    CURRENT_RATING_SYMBOL,
    RATING_DATE,
    LAST_REVIEW_DATE,
    REGULATORY_INDICATOR,
    ACTION,
    LATEST_NON_AFFIRM_CW_OL,
    LATEST_NON_AFFIRM_CW_OL_DATE,
    SRD_CURR_IND,
    RATING_DETAIL_ID,
    DATA_ADMIN_DATE,
    DEBT_TYPE_SORT_ORDER,
    DERIVED_DEBT_TYPE_SORT_ORDER,
    LONG_SHORT_IND,
    RATING_TYPE_SORT_ORDER,
    RATING_ID,
    PRIMARY_SECTOR_CODE,
    PRIMARY_SUB_SECTOR_CODE
)
BEQUEATH DEFINER
AS
    (SELECT ear.entity_id,
            rdini.debt_type_code,
            rdini.debt_type_desc,
            rdini.rating_type_code,
            rdini.rating_type_desc,
            rdini.current_rating_symbol,
            rdini.rating_date,
            rdini.last_review_date,
            rdini.regulatory_indicator,
            rdini.action,
            rdini.latest_non_affirm_cw_ol,
            rdini.latest_non_affirm_cw_ol_date,
            rdini.srd_curr_ind,
            rdini.rating_detail_id,
            rdini.data_admin_date,
            rdini.debt_type_sort_order,
            (CASE
                 WHEN (rdini.debt_type_code = 'FINPROG') THEN -1
                 ELSE rdini.debt_type_sort_order
             END)    AS derived_debt_type_sort_order,
            rdini.long_short_ind,
            rdini.rating_type_sort_order,
            rdini.rating_id,
            ear.primary_sector_code,
            ear.primary_sub_sector_code
       FROM R360_APPDATA.VW_ENTITY_ACTIVE_RATING  ear
            INNER JOIN R360_APPDATA.VW_RATING_DETAILS_ICR_NON_ICR rdini
                ON rdini.ENTITY_ID = ear.ENTITY_ID
      WHERE     ear.DEPT_CODE IN (202,
                                  214,
                                  210,
                                  217)
            AND ear.active_rating_ind = 'Y')
/


GRANT SELECT ON R360_APPDATA.VW_ENTITY_RATINGS_PUBLIC TO R360_APPDATA_READER
/


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\R360_NonPublicOpions\R360CFS_Release_Sep8th_2023\views\VW_ENTITY_RATINGS_PUBLIC_TAC.vw

SET DEFINE OFF;
/* Formatted on 8/29/2023 10:18:57 AM (QP5 v5.362) */
CREATE OR REPLACE FORCE VIEW R360_APPDATA.VW_ENTITY_RATINGS_PUBLIC_TAC
(
    ENTITY_ID,
    DEBT_TYPE_CODE,
    DEBT_TYPE_DESC,
    RATING_TYPE_CODE,
    RATING_TYPE_DESC,
    CURRENT_RATING_SYMBOL,
    RATING_DATE,
    LAST_REVIEW_DATE,
    REGULATORY_INDICATOR,
    ACTION,
    LATEST_NON_AFFIRM_CW_OL,
    LATEST_NON_AFFIRM_CW_OL_DATE,
    SRD_CURR_IND,
    RATING_DETAIL_ID,
    DATA_ADMIN_DATE,
    DEBT_TYPE_SORT_ORDER,
    DERIVED_DEBT_TYPE_SORT_ORDER,
    LONG_SHORT_IND,
    RATING_TYPE_SORT_ORDER,
    RATING_ID,
    PRIMARY_SECTOR_CODE,
    PRIMARY_SUB_SECTOR_CODE,
    CONFIDENTIAL_CATEGORY_CODE
)
BEQUEATH DEFINER
AS
    (SELECT ear.entity_id,
            rdini.debt_type_code,
            rdini.debt_type_desc,
            rdini.rating_type_code,
            rdini.rating_type_desc,
            rdini.current_rating_symbol,
            rdini.rating_date,
            rdini.last_review_date,
            rdini.regulatory_indicator,
            rdini.action,
            rdini.latest_non_affirm_cw_ol,
            rdini.latest_non_affirm_cw_ol_date,
            rdini.srd_curr_ind,
            rdini.rating_detail_id,
            rdini.data_admin_date,
            rdini.debt_type_sort_order,
            (CASE
                 WHEN (rdini.debt_type_code = 'FINPROG') THEN -1
                 ELSE rdini.debt_type_sort_order
             END)       AS derived_debt_type_sort_order,
            rdini.long_short_ind,
            rdini.rating_type_sort_order,
            rdini.rating_id,
            ear.primary_sector_code,
            ear.primary_sub_sector_code,
            'Public'    AS CONFIDENTIAL_CATEGORY_CODE
       FROM R360_APPDATA.VW_ENTITY_ACTIVE_RATING_TAC  ear
            INNER JOIN R360_APPDATA.vw_rating_details_non_icr_tac rdini
                ON rdini.ENTITY_ID = ear.ENTITY_ID
      /*
      For IPF/SOV/SOVR dept code is 214
      */
      WHERE ear.DEPT_CODE = 214 AND ear.active_rating_ind = 'Y')
/


GRANT SELECT ON R360_APPDATA.VW_ENTITY_RATINGS_PUBLIC_TAC TO R360_APPDATA_READER
/

GRANT SELECT ON R360_APPDATA.VW_ENTITY_RATINGS_PUBLIC_TAC TO R360_APP_USER
/


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\R360_NonPublicOpions\R360CFS_Release_Sep8th_2023\views\VW_ENTITY_RATINGS_PVT.vw

SET DEFINE OFF;
/* Formatted on 8/29/2023 10:19:00 AM (QP5 v5.362) */
CREATE OR REPLACE FORCE VIEW R360_APPDATA.VW_ENTITY_RATINGS_PVT
(
    ENTITY_ID,
    DEBT_TYPE_CODE,
    DEBT_TYPE_DESC,
    RATING_TYPE_CODE,
    RATING_TYPE_DESC,
    CURRENT_RATING_SYMBOL,
    RATING_DATE,
    LAST_REVIEW_DATE,
    REGULATORY_INDICATOR,
    ACTION,
    LATEST_NON_AFFIRM_CW_OL,
    LATEST_NON_AFFIRM_CW_OL_DATE,
    SRD_CURR_IND,
    RATING_DETAIL_ID,
    DATA_ADMIN_DATE,
    DEBT_TYPE_SORT_ORDER,
    DERIVED_DEBT_TYPE_SORT_ORDER,
    LONG_SHORT_IND,
    RATING_TYPE_SORT_ORDER,
    RATING_ID,
    PRIMARY_SECTOR_CODE,
    PRIMARY_SUB_SECTOR_CODE,
    CONFIDENTIALITY_IND,
    CONFIDENTIAL_CATEGORY_CODE
)
BEQUEATH DEFINER
AS
    (SELECT odt.ORG_ID                         AS ENTITY_ID,
            odt.DEBT_TYPE_CODE                 AS DEBT_TYPE_CODE,
            dtc.DESCRIPTION                    AS DEBT_TYPE_DESC,
            odtr.RATING_TYPE_CODE              AS RATING_TYPE_CODE,
            rtc.DESCRIPTION                    AS RATING_TYPE_DESC,
            dr.CURRENT_RATING_SYMBOL           AS CURRENT_RATING_SYMBOL,
            odtr.RATING_DATE                   AS RATING_DATE,
            rdh.LAST_REVIEW_DATE               AS LAST_REVIEW_DATE,
            odtr.REGULATORY_INDICATOR          AS REGULATORY_INDICATOR,
            CASE
                WHEN (    dr.rating_action_word <> 'Affirmed'
                      AND dr.current_cw_ol_action_word IS NOT NULL)
                THEN
                    (   (dr.rating_action_word || ' | ')
                     || dr.current_cw_ol_action_word)
                WHEN (    dr.rating_action_word = 'Affirmed'
                      AND dr.current_cw_ol_action_word IS NOT NULL)
                THEN
                    dr.current_cw_ol_action_word
                WHEN (dr.rating_action_word IS NULL)
                THEN
                    dr.current_cw_ol_action_word
                WHEN (    dr.rating_action_word <> 'Affirmed'
                      AND dr.current_cw_ol_action_word IS NULL)
                THEN
                    dr.rating_action_word
            END                                AS ACTION,
            dr.CURRENT_CW_OL                   AS LATEST_NON_AFFIRM_CW_OL,
            dr.CURRENT_CW_OL_DATE              AS LATEST_NON_AFFIRM_CW_OL_DATE,
            odtr.CURR_IND                      AS SRD_CURR_IND,
            odtr.ORG_DEBT_TYPE_RATING_ID       AS RATING_DETAIL_ID,
            odtr.DATA_ADMIN_DATE               AS DATA_ADMIN_DATE,
            dtc.SORT_ORDER                     AS DEBT_TYPE_SORT_ORDER,
            (CASE
                 WHEN (dtc.debt_type_code = 'FINPROG') THEN -1
                 ELSE dtc.SORT_ORDER
             END)                              AS DERIVED_DEBT_TYPE_SORT_ORDER,
            rtc.LONG_SHORT_IND                 AS LONG_SHORT_IND,
            rtc.SORT_ORDER                     AS RATING_TYPE_SORT_ORDER,
            odtr.ORG_DEBT_TYPE                 AS RATING_ID,
            ear.primary_sector_code            AS PRIMARY_SECTOR_CODE,
            ear.primary_sub_sector_code        AS PRIMARY_SUB_SECTOR_CODE,
            odtr.CONFIDENTIALITY_IND           AS CONFIDENTIALITY_IND,
            odtr.CONFIDENTIAL_CATEGORY_CODE    AS CONFIDENTIAL_CATEGORY_CODE
       FROM CORE.ORG_DEBT_TYPES  odt
            JOIN CORE.ORG_DEBT_TYPE_RATINGS odtr
                ON     odtr.ORG_DEBT_TYPE = odt.ORG_DEBT_TYPE_ID
                   AND odtr.ORG_DEBT_TYPE_RATING_ID NOT IN
                           (SELECT nar.RATING_ID
                              FROM CORE.NON_ACK_RATINGS nar
                             WHERE nar.RATING_ID_IND = 'O')
            INNER JOIN SPAPP.DEBT_TYPE_CODES dtc
                ON dtc.DEBT_TYPE_CODE = odt.DEBT_TYPE_CODE
            INNER JOIN R360_APPDATA.VW_RATING_TYPE_CODES rtc
                ON rtc.RATING_TYPE_CODE = odtr.RATING_TYPE_CODE
            INNER JOIN DERIVATION.deriv_rating dr
                ON dr.RATING_ID = odtr.ORG_DEBT_TYPE_RATING_ID
            LEFT OUTER JOIN R360_APPDATA.VW_CORE_REVIEW_HISTORY_LRD rdh
                ON rdh.RATING_ID = odtr.ORG_DEBT_TYPE_RATING_ID
            INNER JOIN R360_APPDATA.VW_ENTITY_ACTIVE_RATING_PVT ear
                ON ear.ENTITY_ID = odt.ORG_ID
      WHERE     dtc.active_ind = 'Y'
            AND odt.exclude_from_products_ind = 'N'
            AND odtr.exclude_from_products_ind = 'N'
            AND odtr.confidentiality_ind = 'Y'
            AND ear.DEPT_CODE IN (202,
                                  214,
                                  210,
                                  217)
            AND odtr.CONFIDENTIAL_CATEGORY_CODE IN ('CIR', 'PVT')
            AND odt.debt_type_code IN ('ICR',
                                       'FSR',
                                       'FER',
                                       'RC',
                                       'FINPROG')
            AND odtr.CURR_IND = 'Y'
            AND dr.ACTIVE_FLAG = 'Y')
/


GRANT SELECT ON R360_APPDATA.VW_ENTITY_RATINGS_PVT TO R360_APPDATA_READER
/


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\R360_NonPublicOpions\R360CFS_Release_Sep8th_2023\views\VW_ENTITY_RATINGS_TAC.vw

SET DEFINE OFF;
/* Formatted on 8/29/2023 10:19:03 AM (QP5 v5.362) */
CREATE OR REPLACE FORCE VIEW R360_APPDATA.VW_ENTITY_RATINGS_TAC
(
    ENTITY_ID,
    DEBT_TYPE_CODE,
    DEBT_TYPE_DESC,
    RATING_TYPE_CODE,
    RATING_TYPE_DESC,
    CURRENT_RATING_SYMBOL,
    RATING_DATE,
    LAST_REVIEW_DATE,
    REGULATORY_INDICATOR,
    ACTION,
    LATEST_NON_AFFIRM_CW_OL,
    LATEST_NON_AFFIRM_CW_OL_DATE,
    SRD_CURR_IND,
    RATING_DETAIL_ID,
    DATA_ADMIN_DATE,
    DEBT_TYPE_SORT_ORDER,
    DERIVED_DEBT_TYPE_SORT_ORDER,
    LONG_SHORT_IND,
    RATING_TYPE_SORT_ORDER,
    RATING_ID,
    PRIMARY_SECTOR_CODE,
    PRIMARY_SUB_SECTOR_CODE,
    CONFIDENTIALITY_IND,
    CONFIDENTIAL_CATEGORY_CODE
)
BEQUEATH DEFINER
AS
    (SELECT odt.ORG_ID                         AS ENTITY_ID,
            odt.DEBT_TYPE_CODE                 AS DEBT_TYPE_CODE,
            dtc.DESCRIPTION                    AS DEBT_TYPE_DESC,
            odtr.RATING_TYPE_CODE              AS RATING_TYPE_CODE,
            rtc.DESCRIPTION                    AS RATING_TYPE_DESC,
            dr.CURRENT_RATING_SYMBOL           AS CURRENT_RATING_SYMBOL,
            odtr.RATING_DATE                   AS RATING_DATE,
            rdh.LAST_REVIEW_DATE               AS LAST_REVIEW_DATE,
            odtr.REGULATORY_INDICATOR          AS REGULATORY_INDICATOR,
            CASE
                WHEN (    dr.rating_action_word <> 'Affirmed'
                      AND dr.current_cw_ol_action_word IS NOT NULL)
                THEN
                    (   (dr.rating_action_word || ' | ')
                     || dr.current_cw_ol_action_word)
                WHEN (    dr.rating_action_word = 'Affirmed'
                      AND dr.current_cw_ol_action_word IS NOT NULL)
                THEN
                    dr.current_cw_ol_action_word
                WHEN (dr.rating_action_word IS NULL)
                THEN
                    dr.current_cw_ol_action_word
                WHEN (    dr.rating_action_word <> 'Affirmed'
                      AND dr.current_cw_ol_action_word IS NULL)
                THEN
                    dr.rating_action_word
            END                                AS ACTION,
            dr.CURRENT_CW_OL                   AS LATEST_NON_AFFIRM_CW_OL,
            dr.CURRENT_CW_OL_DATE              AS LATEST_NON_AFFIRM_CW_OL_DATE,
            odtr.CURR_IND                      AS SRD_CURR_IND,
            odtr.ORG_DEBT_TYPE_RATING_ID       AS RATING_DETAIL_ID,
            odtr.DATA_ADMIN_DATE               AS DATA_ADMIN_DATE,
            dtc.SORT_ORDER                     AS DEBT_TYPE_SORT_ORDER,
            (CASE
                 WHEN (dtc.debt_type_code = 'FINPROG') THEN -1
                 ELSE dtc.SORT_ORDER
             END)                              AS DERIVED_DEBT_TYPE_SORT_ORDER,
            rtc.LONG_SHORT_IND                 AS LONG_SHORT_IND,
            rtc.SORT_ORDER                     AS RATING_TYPE_SORT_ORDER,
            odtr.ORG_DEBT_TYPE                 AS RATING_ID,
            ear.primary_sector_code            AS PRIMARY_SECTOR_CODE,
            ear.primary_sub_sector_code        AS PRIMARY_SUB_SECTOR_CODE,
            odtr.CONFIDENTIALITY_IND           AS CONFIDENTIALITY_IND,
            odtr.CONFIDENTIAL_CATEGORY_CODE    AS CONFIDENTIAL_CATEGORY_CODE
       FROM CORE.ORG_DEBT_TYPES  odt
            JOIN CORE.ORG_DEBT_TYPE_RATINGS odtr
                ON     odtr.ORG_DEBT_TYPE = odt.ORG_DEBT_TYPE_ID
                   AND odtr.ORG_DEBT_TYPE_RATING_ID NOT IN
                           (SELECT nar.RATING_ID
                              FROM CORE.NON_ACK_RATINGS nar
                             WHERE nar.RATING_ID_IND = 'O')
            INNER JOIN SPAPP.DEBT_TYPE_CODES dtc
                ON dtc.DEBT_TYPE_CODE = odt.DEBT_TYPE_CODE
            INNER JOIN R360_APPDATA.VW_RATING_TYPE_CODES rtc
                ON rtc.RATING_TYPE_CODE = odtr.RATING_TYPE_CODE
            INNER JOIN DERIVATION.deriv_rating dr
                ON dr.RATING_ID = odtr.ORG_DEBT_TYPE_RATING_ID
            LEFT OUTER JOIN R360_APPDATA.VW_CORE_REVIEW_HISTORY_LRD rdh
                ON rdh.RATING_ID = odtr.ORG_DEBT_TYPE_RATING_ID
            INNER JOIN R360_APPDATA.VW_ENTITY_ACTIVE_RATING_TAC_PVT ear
                ON ear.ENTITY_ID = odt.ORG_ID
      WHERE     dtc.active_ind = 'Y'
            AND odt.exclude_from_products_ind = 'N'
            AND odtr.exclude_from_products_ind = 'N'
            AND odtr.confidentiality_ind = 'Y'
            AND ear.DEPT_CODE IN (202,
                                  214,
                                  210,
                                  217)
            AND odtr.CONFIDENTIAL_CATEGORY_CODE IN ('CIR', 'PVT')
            AND odt.debt_type_code = 'TACASSES'
            AND odtr.CURR_IND = 'Y'
            AND dr.ACTIVE_FLAG = 'Y')
/


GRANT SELECT ON R360_APPDATA.VW_ENTITY_RATINGS_TAC TO R360_APPDATA_READER
/

GRANT SELECT ON R360_APPDATA.VW_ENTITY_RATINGS_TAC TO R360_APP_USER
/


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\R360_NonPublicOpions\R360CFS_Release_Sep8th_2023\views\VW_ENTITY_RATINGS_TAC_PVT.vw

SET DEFINE OFF;
/* Formatted on 8/29/2023 10:19:06 AM (QP5 v5.362) */
CREATE OR REPLACE FORCE VIEW R360_APPDATA.VW_ENTITY_RATINGS_TAC_PVT
(
    ENTITY_ID,
    DEBT_TYPE_CODE,
    DEBT_TYPE_DESC,
    RATING_TYPE_CODE,
    RATING_TYPE_DESC,
    CURRENT_RATING_SYMBOL,
    RATING_DATE,
    LAST_REVIEW_DATE,
    REGULATORY_INDICATOR,
    ACTION,
    LATEST_NON_AFFIRM_CW_OL,
    LATEST_NON_AFFIRM_CW_OL_DATE,
    SRD_CURR_IND,
    RATING_DETAIL_ID,
    DATA_ADMIN_DATE,
    DEBT_TYPE_SORT_ORDER,
    DERIVED_DEBT_TYPE_SORT_ORDER,
    LONG_SHORT_IND,
    RATING_TYPE_SORT_ORDER,
    RATING_ID,
    PRIMARY_SECTOR_CODE,
    PRIMARY_SUB_SECTOR_CODE,
    CONFIDENTIALITY_IND,
    CONFIDENTIAL_CATEGORY_CODE
)
BEQUEATH DEFINER
AS
    SELECT ENTITY_ID,
           DEBT_TYPE_CODE,
           DEBT_TYPE_DESC,
           RATING_TYPE_CODE,
           RATING_TYPE_DESC,
           CURRENT_RATING_SYMBOL,
           RATING_DATE,
           LAST_REVIEW_DATE,
           REGULATORY_INDICATOR,
           ACTION,
           LATEST_NON_AFFIRM_CW_OL,
           LATEST_NON_AFFIRM_CW_OL_DATE,
           SRD_CURR_IND,
           RATING_DETAIL_ID,
           DATA_ADMIN_DATE,
           DEBT_TYPE_SORT_ORDER,
           DERIVED_DEBT_TYPE_SORT_ORDER,
           LONG_SHORT_IND,
           RATING_TYPE_SORT_ORDER,
           RATING_ID,
           PRIMARY_SECTOR_CODE,
           PRIMARY_SUB_SECTOR_CODE,
           'N'          AS CONFIDENTIALITY_IND,
           'Public'     AS CONFIDENTIAL_CATEGORY_CODE
      FROM R360_APPDATA.VW_ENTITY_RATINGS_PUBLIC_TAC PUB
     WHERE NOT EXISTS
               (SELECT 1
                  FROM R360_APPDATA.VW_ENTITY_RATINGS_TAC
                 WHERE     ENTITY_ID = PUB.ENTITY_ID
                       AND RATING_TYPE_CODE = PUB.RATING_TYPE_CODE)
    UNION ALL
    SELECT ENTITY_ID,
           DEBT_TYPE_CODE,
           DEBT_TYPE_DESC,
           RATING_TYPE_CODE,
           RATING_TYPE_DESC,
           CURRENT_RATING_SYMBOL,
           RATING_DATE,
           LAST_REVIEW_DATE,
           REGULATORY_INDICATOR,
           ACTION,
           LATEST_NON_AFFIRM_CW_OL,
           LATEST_NON_AFFIRM_CW_OL_DATE,
           SRD_CURR_IND,
           RATING_DETAIL_ID,
           DATA_ADMIN_DATE,
           DEBT_TYPE_SORT_ORDER,
           DERIVED_DEBT_TYPE_SORT_ORDER,
           LONG_SHORT_IND,
           RATING_TYPE_SORT_ORDER,
           RATING_ID,
           PRIMARY_SECTOR_CODE,
           PRIMARY_SUB_SECTOR_CODE,
           CONFIDENTIALITY_IND,
           (CASE
                WHEN CONFIDENTIAL_CATEGORY_CODE = 'CIR'
                THEN
                    'Confidential(CIR)'
                WHEN CONFIDENTIAL_CATEGORY_CODE = 'PVT'
                THEN
                    'Private'
                ELSE
                    ''
            END)    AS CONFIDENTIAL_CATEGORY_CODE
      FROM R360_APPDATA.VW_ENTITY_RATINGS_TAC
/


GRANT SELECT ON R360_APPDATA.VW_ENTITY_RATINGS_TAC_PVT TO R360_APPDATA_READER
/

GRANT SELECT ON R360_APPDATA.VW_ENTITY_RATINGS_TAC_PVT TO R360_APP_USER
/


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\R360_NonPublicOpions\R360CFS_Release_Sep8th_2023\views\VW_INVESTOR_SENTIMENT_SECTOR_LIST.vw

CREATE OR REPLACE VIEW r360_appdata.vw_investor_sentiment_sector_list AS 
SELECT s.rating_industry_id  AS industry_id,
			  s.is_sector_id AS sector_id,
			  s.is_sector_parent_id AS parent_sector_id,
			  s.is_sector AS sector_name,
			  p.is_sector AS parent_sector_name
    FROM sec_stg.inv_sentiment_sector_stg s
		LEFT JOIN sec_stg.inv_sentiment_sector_stg p 
				ON s.is_sector_parent_id = p.is_sector_id AND p.active_flg = 'Y' AND s.active_flg = 'Y'  
		ORDER BY COALESCE(p.is_sector, s.is_sector), s.is_sector_id;
	  
GRANT SELECT ON r360_appdata.vw_investor_sentiment_sector_list TO R360_APPDATA_READER;


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\R360_NonPublicOpions\R360CFS_Release_Sep8th_2023\views\VW_ISSUES_MATURITIES.vw

SET DEFINE OFF;
/* Formatted on 8/29/2023 10:19:09 AM (QP5 v5.362) */
CREATE OR REPLACE FORCE VIEW R360_APPDATA.VW_ISSUES_MATURITIES
(
    ENTITY_ID,
    INSTRUMENT_ID,
    INSTRUMENT_DETAIL_ID,
    INSTRUMENT_NAME,
    DEBT_TYPE_CODE,
    DESCRIPTION,
    MATURITY_DATE,
    MATURITY_DATE_DERIVED,
    CUSIP,
    CINS,
    ISIN,
    RATING_TYPE_CODE,
    RATING_TYPE_DESCRIPTION,
    CURRENT_RATING_SYMBOL,
    RATING_DATE,
    DATA_ADMIN_DATE,
    LAST_REVIEW_DATE,
    REGULATORY_INDICATOR,
    CURRENT_CW_OL,
    CURRENT_CW_OL_DATE,
    ISSUE_PROGRAM_TYPE,
    COUPON_RATE,
    ORIGINAL_PRINCIPAL_BALANCE,
    CURRENCY,
    SORT_ORDER,
    PRECEDENCE_NUM,
    RATING_DETAIL_ID,
    CONFIDENTIALITY_IND,
    CONFIDENTIAL_CATEGORY_CODE
)
BEQUEATH DEFINER
AS
    (SELECT ENTITY_ID,
            INSTRUMENT_ID,
            INSTRUMENT_DETAIL_ID || ''     AS INSTRUMENT_DETAIL_ID,
            INSTRUMENT_NAME,
            DEBT_TYPE_CODE,
            DESCRIPTION,
            MATURITY_DATE,
            MATURITY_DATE_DERIVED,
            CUSIP,
            CINS,
            ISIN,
            RATING_TYPE_CODE,
            RATING_TYPE_DESCRIPTION,
            CURRENT_RATING_SYMBOL,
            RATING_DATE,
            DATA_ADMIN_DATE,
            LAST_REVIEW_DATE,
            REGULATORY_INDICATOR,
            CURRENT_CW_OL,
            CURRENT_CW_OL_DATE,
            ISSUE_PROGRAM_TYPE,
            COUPON_RATE,
            ORIGINAL_PRINCIPAL_BALANCE,
            CURRENCY,
            SORT_ORDER,
            PRECEDENCE_NUM,
            RATING_DETAIL_ID,
            'N'                            AS CONFIDENTIALITY_IND,
            NULL                           AS CONFIDENTIAL_CATEGORY_CODE
       FROM R360_APPDATA.VW_ISSUES_MATURITIES_PUBLIC
     UNION
     SELECT ENTITY_ID,
            INSTRUMENT_ID,
            INSTRUMENT_DETAIL_ID,
            INSTRUMENT_NAME,
            DEBT_TYPE_CODE,
            DESCRIPTION,
            MATURITY_DATE,
            MATURITY_DATE_DERIVED,
            CUSIP,
            CINS,
            ISIN,
            RATING_TYPE_CODE,
            RATING_TYPE_DESCRIPTION,
            CURRENT_RATING_SYMBOL,
            RATING_DATE,
            DATA_ADMIN_DATE,
            LAST_REVIEW_DATE,
            REGULATORY_INDICATOR,
            CURRENT_CW_OL,
            CURRENT_CW_OL_DATE,
            ISSUE_PROGRAM_TYPE,
            COUPON_RATE,
            ORIGINAL_PRINCIPAL_BALANCE,
            CURRENCY,
            SORT_ORDER,
            PRECEDENCE_NUM,
            RATING_DETAIL_ID,
            CONFIDENTIALITY_IND,
            CONFIDENTIAL_CATEGORY_CODE
       FROM R360_APPDATA.VW_ISSUES_MATURITIES_PVT)
/


GRANT SELECT ON R360_APPDATA.VW_ISSUES_MATURITIES TO R360_APPDATA_READER
/


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\R360_NonPublicOpions\R360CFS_Release_Sep8th_2023\views\VW_ISSUES_MATURITIES_HISTORY.vw

SET DEFINE OFF;
/* Formatted on 8/29/2023 10:19:12 AM (QP5 v5.362) */
CREATE OR REPLACE FORCE VIEW R360_APPDATA.VW_ISSUES_MATURITIES_HISTORY
(
    INSTRUMENT_ID,
    INSTRUMENT_DETAIL_ID,
    RATING_TYPE_CODE,
    RATING_TYPE_DESCRIPTION,
    RATING,
    RATING_DATE,
    ACTION,
    CREDITWATCH_OUTLOOK,
    CREDITWATCH_OUTLOOK_DATE,
    DEBT_TYPE_CODE,
    RATING_DETAIL_ID,
    DATA_ADMIN_DATE,
    CONFIDENTIALITY_IND,
    CONFIDENTIAL_CATEGORY_CODE
)
BEQUEATH DEFINER
AS
    (SELECT INSTRUMENT_ID,
            INSTRUMENT_DETAIL_ID || ''     AS INSTRUMENT_DETAIL_ID,
            RATING_TYPE_CODE,
            RATING_TYPE_DESCRIPTION,
            RATING,
            RATING_DATE,
            ACTION,
            CREDITWATCH_OUTLOOK,
            CREDITWATCH_OUTLOOK_DATE,
            DEBT_TYPE_CODE,
            RATING_DETAIL_ID,
            DATA_ADMIN_DATE,
            'N'                            AS CONFIDENTIALITY_IND,
            NULL                           AS CONFIDENTIAL_CATEGORY_CODE
       FROM R360_APPDATA.VW_ISSUES_MATURITIES_HISTORY_PUBLIC
     UNION
     SELECT INSTRUMENT_ID,
            INSTRUMENT_DETAIL_ID,
            RATING_TYPE_CODE,
            RATING_TYPE_DESCRIPTION,
            RATING,
            RATING_DATE,
            ACTION,
            CREDITWATCH_OUTLOOK,
            CREDITWATCH_OUTLOOK_DATE,
            DEBT_TYPE_CODE,
            RATING_DETAIL_ID,
            DATA_ADMIN_DATE,
            CONFIDENTIALITY_IND,
            CONFIDENTIAL_CATEGORY_CODE
       FROM R360_APPDATA.VW_ISSUES_MATURITIES_HISTORY_PVT)
/


GRANT SELECT ON R360_APPDATA.VW_ISSUES_MATURITIES_HISTORY TO R360_APPDATA_READER
/


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\R360_NonPublicOpions\R360CFS_Release_Sep8th_2023\views\VW_ISSUES_MATURITIES_HISTORY_PUBLIC.vw

SET DEFINE OFF;
/* Formatted on 8/29/2023 10:19:15 AM (QP5 v5.362) */
CREATE OR REPLACE FORCE VIEW R360_APPDATA.VW_ISSUES_MATURITIES_HISTORY_PUBLIC
(
    INSTRUMENT_ID,
    INSTRUMENT_DETAIL_ID,
    RATING_TYPE_CODE,
    RATING_TYPE_DESCRIPTION,
    RATING,
    RATING_DATE,
    ACTION,
    CREDITWATCH_OUTLOOK,
    CREDITWATCH_OUTLOOK_DATE,
    DEBT_TYPE_CODE,
    RATING_DETAIL_ID,
    DATA_ADMIN_DATE
)
BEQUEATH DEFINER
AS
    (SELECT rd.rating_id,
            COALESCE (rd.detail_id, -1)    AS INSTRUMENT_DETAIL_ID,
            rd.rating_type_code,
            rtc.description,
            rd.current_rating_symbol,
            rd.rating_date,
            (CASE
                 WHEN ((    rd.rating_action_word <> 'Affirmed'
                        AND rd.current_cw_ol_action_word IS NOT NULL))
                 THEN
                     (   (rd.rating_action_word || ' | ')
                      || rd.current_cw_ol_action_word)
                 WHEN ((    rd.rating_action_word <> 'Affirmed'
                        AND rd.current_cw_ol_action_word IS NULL))
                 THEN
                     rd.rating_action_word
                 WHEN (rd.rating_action_word IS NULL)
                 THEN
                     rd.current_cw_ol_action_word
                 WHEN ((    rd.rating_action_word = 'Affirmed'
                        AND rd.current_cw_ol_action_word IS NOT NULL))
                 THEN
                     rd.current_cw_ol_action_word
                 WHEN ((    rd.rating_action_word = 'Affirmed'
                        AND rd.current_cw_ol_action_word IS NULL))
                 THEN
                     'Deleted Row'
                 ELSE
                     NULL
             END)                          AS action,
            rd.current_cw_ol,
            rd.current_cw_ol_date,
            rd.debt_type_code,
            rd.RATING_DETAIL_ID,
            rd.DATA_ADMIN_DATE
       FROM FGR_PRIME.RATING_DETAILS  rd
            INNER JOIN R360_APPDATA.vw_rating_type_codes rtc
                ON rd.rating_type_code = rtc.rating_type_code
      WHERE     rd.rating_action_type <> 'Affirmed'
            AND rd.ack_status = 'Y'
            AND rd.ciq_rep_ind = 1)
/


GRANT SELECT ON R360_APPDATA.VW_ISSUES_MATURITIES_HISTORY_PUBLIC TO R360_APPDATA_READER
/


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\R360_NonPublicOpions\R360CFS_Release_Sep8th_2023\views\VW_ISSUES_MATURITIES_HISTORY_PVT.vw

SET DEFINE OFF;
/* Formatted on 8/29/2023 10:19:18 AM (QP5 v5.362) */
CREATE OR REPLACE FORCE VIEW R360_APPDATA.VW_ISSUES_MATURITIES_HISTORY_PVT
(
    INSTRUMENT_ID,
    INSTRUMENT_DETAIL_ID,
    RATING_TYPE_CODE,
    RATING_TYPE_DESCRIPTION,
    RATING,
    RATING_DATE,
    ACTION,
    CREDITWATCH_OUTLOOK,
    CREDITWATCH_OUTLOOK_DATE,
    DEBT_TYPE_CODE,
    RATING_DETAIL_ID,
    DATA_ADMIN_DATE,
    CONFIDENTIALITY_IND,
    CONFIDENTIAL_CATEGORY_CODE
)
BEQUEATH DEFINER
AS
    SELECT INSTRUMENT_ID,
           COALESCE (INSTRUMENT_DETAIL_ID, '-1')
               AS INSTRUMENT_DETAIL_ID,
           ins.RATING_TYPE_CODE,
           rtc.DESCRIPTION
               AS RATING_TYPE_DESCRIPTION,
           dr.CURRENT_RATING_SYMBOL
               AS RATING,
           dr.CURRENT_RATING_DATE
               AS RATING_DATE,
           CASE
               WHEN ((    dr.rating_action_word <> 'Affirmed'
                      AND dr.current_cw_ol_action_word IS NOT NULL))
               THEN
                   (   (dr.rating_action_word || ' | ')
                    || dr.current_cw_ol_action_word)
               WHEN ((    dr.rating_action_word <> 'Affirmed'
                      AND dr.current_cw_ol_action_word IS NULL))
               THEN
                   dr.rating_action_word
               WHEN (dr.rating_action_word IS NULL)
               THEN
                   dr.current_cw_ol_action_word
               WHEN ((    dr.rating_action_word = 'Affirmed'
                      AND dr.current_cw_ol_action_word IS NOT NULL))
               THEN
                   dr.current_cw_ol_action_word
               WHEN ((    dr.rating_action_word = 'Affirmed'
                      AND dr.current_cw_ol_action_word IS NULL))
               THEN
                   'Deleted Row'
               ELSE
                   NULL
           END
               AS ACTION,
           dr.CURRENT_CW_OL
               AS CREDITWATCH_OUTLOOK,
           dr.CURRENT_CW_OL_DATE
               AS CREDITWATCH_OUTLOOK_DATE,
           ins.DEBT_TYPE_CODE,
           ins.RATING_ID
               RATING_DETAIL_ID,
           ins.DATA_ADMIN_DATE,
           CONFIDENTIALITY_IND,
           CONFIDENTIAL_CATEGORY_CODE
      FROM (SELECT i.INSTRUMENT_ID,
                   ''                                   AS INSTRUMENT_DETAIL_ID,
                   pdtr.rating_type_code,
                   pdtr.program_debt_type_rating_id     AS rating_id,
                   pdt.DEBT_TYPE_CODE                   DEBT_TYPE_CODE,
                   pdtr.DATA_ADMIN_DATE,
                   pdtr.CONFIDENTIALITY_IND,
                   pdtr.CONFIDENTIAL_CATEGORY_CODE
              FROM core.program_debt_types         pdt,
                   core.program_debt_type_ratings  pdtr,
                   FGR.INSTRUMENTS                 i
             WHERE     pdtr.PROGRAM_DEBT_TYPE_ID = pdt.PROGRAM_DEBT_TYPE_id
                   AND pdt.EXCLUDE_FROM_PRODUCTS_IND = 'N'
                   AND pdtr.EXCLUDE_FROM_PRODUCTS_IND = 'N'
                   AND pdtr.CONFIDENTIALITY_IND = 'Y'
                   AND pdtr.CONFIDENTIAL_CATEGORY_CODE IN ('CIR', 'PVT')
                   AND i.RELATED_INSTRUMENT_ID = pdt.PROGRAM_ID
                   AND i.SOURCE_INSTRUMENT_IND = 'R'
                   AND i.SOURCE_INSTRUMENT_ID = pdt.PROGRAM_DEBT_TYPE_ID --788
            UNION
            SELECT id.INSTRUMENT_ID,
                   '' || id.INSTRUMENT_DETAIL_ID,
                   r.rating_type_code,
                   r.rating_id,
                   i.DEBT_TYPE_CODE     DEBT_TYPE_CODE,
                   r.DATA_ADMIN_DATE,
                   r.CONFIDENTIALITY_IND,
                   r.CONFIDENTIAL_CATEGORY_CODE
              FROM core.ratings                  r,
                   FGR_PRIME.INSTRUMENT_DETAILS  id,
                   FGR.INSTRUMENTS               i
             WHERE     r.EXCLUDE_FROM_PRODUCTS_IND = 'N'
                   AND r.CONFIDENTIALITY_IND = 'Y'
                   AND r.issue_id_table_ind IN ('M')
                   AND r.CONFIDENTIAL_CATEGORY_CODE IN ('CIR', 'PVT')
                   AND id.SOURCE_INSTRUMENT_DETAIL_ID = r.ISSUE_ID
                   AND id.INSTRUMENT_ID = i.INSTRUMENT_ID            --747,261
                                                         ) ins
           LEFT OUTER JOIN R360_APPDATA.VW_RATING_TYPE_CODES rtc
               ON rtc.RATING_TYPE_CODE = ins.RATING_TYPE_CODE
           INNER JOIN DERIVATION.deriv_rating dr
               ON     dr.RATING_ID = ins.RATING_ID
                  AND dr.ACTIVE_FLAG = 'Y'
                  AND dr.RATING_ACTION_TYPE <> 'Affirmed'
     WHERE ins.debt_type_code NOT IN ('FER',
                                      'FINPROG',
                                      'FSR',
                                      'RC')
/


GRANT SELECT ON R360_APPDATA.VW_ISSUES_MATURITIES_HISTORY_PVT TO R360_APPDATA_READER
/


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\R360_NonPublicOpions\R360CFS_Release_Sep8th_2023\views\VW_ISSUES_MATURITIES_PUBLIC.vw

SET DEFINE OFF;
/* Formatted on 8/29/2023 10:19:21 AM (QP5 v5.362) */
CREATE OR REPLACE FORCE VIEW R360_APPDATA.VW_ISSUES_MATURITIES_PUBLIC
(
    ENTITY_ID,
    INSTRUMENT_ID,
    INSTRUMENT_DETAIL_ID,
    INSTRUMENT_NAME,
    DEBT_TYPE_CODE,
    DESCRIPTION,
    MATURITY_DATE,
    MATURITY_DATE_DERIVED,
    CUSIP,
    CINS,
    ISIN,
    RATING_TYPE_CODE,
    RATING_TYPE_DESCRIPTION,
    CURRENT_RATING_SYMBOL,
    RATING_DATE,
    DATA_ADMIN_DATE,
    LAST_REVIEW_DATE,
    REGULATORY_INDICATOR,
    CURRENT_CW_OL,
    CURRENT_CW_OL_DATE,
    ISSUE_PROGRAM_TYPE,
    COUPON_RATE,
    ORIGINAL_PRINCIPAL_BALANCE,
    CURRENCY,
    SORT_ORDER,
    PRECEDENCE_NUM,
    RATING_DETAIL_ID
)
BEQUEATH DEFINER
AS
    (SELECT entity_id,
            instrument_id,
            instrument_detail_id,
            instrument_name,
            debt_type_code,
            description,
            maturity_date,
            COALESCE (maturity_date,
                      TO_TIMESTAMP ('1900-01-01', 'yyyy-MM-dd'))
                AS maturity_date_derived,
            cusip,
            cins,
            isin,
            rating_type_code,
            rating_type_description,
            current_rating_symbol,
            rating_date,
            data_admin_date,
            last_review_date,
            regulatory_indicator,
            current_cw_ol,
            current_cw_ol_date,
            issue_type_description
                AS issue_program_type,
            (CASE
                 WHEN (INSTR ('.', coupon_rate) = 1)
                 THEN
                     ('0' || coupon_rate)
                 ELSE
                     coupon_rate
             END)
                AS coupon_rate,
            class_amount
                AS original_principal_balance,
            COALESCE (currency_type_code, 'USD')
                AS currency,
            sort_order,
            precedence_num,
            rating_detail_id
       FROM (SELECT eip.entity_id,
                    curr_ins.instrument_id,
                    eip.role_code,
                    curr_ins.instrument_detail_id,
                    curr_ins.rating_detail_id,
                    curr_ins.instrument_name,
                    curr_ins.debt_type_code,
                    debt_type_codes.description,
                    curr_ins.maturity_date,
                    (CASE
                         WHEN (curr_ins.debt_type_code = 'COMMPAPER')
                         THEN
                             cp_identifiers_by_instrument.cp_cusip
                         ELSE
                             curr_ins.cusip
                     END)    AS cusip,
                    curr_ins.cins,
                    curr_ins.isin,
                    curr_ins.rating_type_code,
                    curr_ins.rating_type_description,
                    curr_ins.current_rating_symbol,
                    curr_ins.rating_date,
                    curr_ins.data_admin_date,
                    curr_ins.regulatory_indicator,
                    rating_details.current_cw_ol,
                    rating_details.current_cw_ol_date,
                    curr_ins.instrument_type_code,
                    (CASE
                         WHEN (curr_ins.instrument_type_code = 'CP')
                         THEN
                             'Commercial Paper'
                         WHEN (curr_ins.instrument_type_code = 'PROGRAM')
                         THEN
                             'Program'
                         ELSE
                             issue_debt.description
                     END)    AS issue_type_description,
                    (CASE
                         WHEN (curr_ins.coupon_rate IS NOT NULL)
                         THEN
                             (   CAST (curr_ins.coupon_rate AS VARCHAR (100))
                              || '%')
                         ELSE
                             NULL
                     END)    AS coupon_rate,
                    curr_ins.class_amount,
                    curr_ins.currency_type_code,
                    curr_ins.program_type_code,
                    curr_ins.prelim_ind,
                    curr_ins.precedence_num,
                    debt_type_codes.sort_order,
                    curr_ins.rating_status,
                    curr_ins.active_rating_ind,
                    review_history_lrd.last_review_date,
                    curr_ins.sector_code,
                    eip.status_ind
               FROM (SELECT *
                       FROM R360_APPDATA.vw_entity_instruments_participants
                      WHERE     status_ind = 'A'
                            AND role_code IN ('ISSUER',
                                              'OBLIGOR',
                                              'COISSUER',
                                              'SERVICER')) eip
                    INNER JOIN
                    (SELECT *
                       FROM R360_APPDATA.vw_current_instruments_with_active_rating_ind
                      WHERE     debt_type_code NOT IN ('FER',
                                                       'FINPROG',
                                                       'FSR',
                                                       'RC')
                            AND sector_code = 'GLOBISS'
                            AND prelim_ind = 'N'
                            AND program_type_code <> 'COVERPOOL'
                            AND active_rating_ind = 'Y') curr_ins
                        ON eip.instrument_id = curr_ins.instrument_id
                    -- join the result with debt_type_codes to get instrument debt type description and sort_order
                    INNER JOIN
                    (SELECT debt_type_code, description, sort_order
                       FROM SPAPP.DEBT_TYPE_CODES
                      WHERE active_ind = 'Y') debt_type_codes
                        ON curr_ins.debt_type_code =
                           debt_type_codes.debt_type_code
                    -- join the result with REVIEW_HISTORY to get last review date for instuments rating
                    LEFT OUTER JOIN
                    (  SELECT rating_detail_id,
                              MAX (last_review_date)     AS last_review_date
                         FROM FGR.REVIEW_HISTORY
                        WHERE     source_active_ind = 'Y'
                              AND ack_status = 'Y'
                              AND ciq_rep_ind = 1
                     GROUP BY rating_detail_id) review_history_lrd
                        ON curr_ins.rating_detail_id =
                           review_history_lrd.rating_detail_id
                    -- join the result with cp_identifiers to get CUSIP for instuments
                    LEFT OUTER JOIN
                    (  SELECT instrument_id,
                              LISTAGG (cusip6, ', ')
                                  WITHIN GROUP (ORDER BY cusip6 ASC)    AS cp_cusip
                         FROM FGR.CP_IDENTIFIERS
                     GROUP BY instrument_id) cp_identifiers_by_instrument
                        ON curr_ins.instrument_id =
                           cp_identifiers_by_instrument.instrument_id
                    --join the result Rating Details to get the creditwatch outlook and date
                    INNER JOIN
                    (SELECT source_rating_id,
                            current_cw_ol,
                            current_cw_ol_date
                       FROM FGR_PRIME.RATING_DETAILS
                      WHERE ciq_rep_ind = 1 AND ack_status = 'Y')
                    rating_details
                        ON curr_ins.non_affirm_rating_id =
                           RATING_DETAILS.source_rating_id
                    -- join result with issue_type code and debt_type_code
                    LEFT OUTER JOIN
                    (SELECT issue_type_code, description
                       FROM (SELECT issue_type_code, description
                               FROM SPAPP.ISSUE_TYPE_CODES
                              WHERE active_ind = 'Y'
                             UNION ALL
                             SELECT debt_type_code, description
                               FROM SPAPP.DEBT_TYPE_CODES
                              WHERE active_ind = 'Y')) issue_debt
                        ON curr_ins.instrument_type_code =
                           issue_debt.issue_type_code))
/


GRANT SELECT ON R360_APPDATA.VW_ISSUES_MATURITIES_PUBLIC TO R360_APPDATA_READER
/


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\R360_NonPublicOpions\R360CFS_Release_Sep8th_2023\views\VW_ISSUES_MATURITIES_PVT.vw

SET DEFINE OFF;
/* Formatted on 8/29/2023 10:19:24 AM (QP5 v5.362) */
CREATE OR REPLACE FORCE VIEW R360_APPDATA.VW_ISSUES_MATURITIES_PVT
(
    ENTITY_ID,
    INSTRUMENT_ID,
    INSTRUMENT_DETAIL_ID,
    INSTRUMENT_NAME,
    DEBT_TYPE_CODE,
    DESCRIPTION,
    MATURITY_DATE,
    MATURITY_DATE_DERIVED,
    CUSIP,
    CINS,
    ISIN,
    RATING_TYPE_CODE,
    RATING_TYPE_DESCRIPTION,
    CURRENT_RATING_SYMBOL,
    RATING_DATE,
    DATA_ADMIN_DATE,
    LAST_REVIEW_DATE,
    REGULATORY_INDICATOR,
    CURRENT_CW_OL,
    CURRENT_CW_OL_DATE,
    ISSUE_PROGRAM_TYPE,
    COUPON_RATE,
    ORIGINAL_PRINCIPAL_BALANCE,
    CURRENCY,
    SORT_ORDER,
    PRECEDENCE_NUM,
    RATING_DETAIL_ID,
    CONFIDENTIALITY_IND,
    CONFIDENTIAL_CATEGORY_CODE
)
BEQUEATH DEFINER
AS
    SELECT ins.ENTITY_ID,
           ins.INSTRUMENT_ID,
           COALESCE (ins.INSTRUMENT_DETAIL_ID, '-1')
               AS INSTRUMENT_DETAIL_ID,
           ins.INSTRUMENT_NAME, --ins.reason_type_code, ins.program_id, ins.issue_id_table_ind,
           ins.debt_type_code,
           dtc.DESCRIPTION
               AS DESCRIPTION,
           ins.MATURITY_DATE
               AS MATURITY_DATE,
           COALESCE (ins.MATURITY_DATE,
                     TO_TIMESTAMP ('1900-01-01', 'yyyy-MM-dd'))
               AS MATURITY_DATE_DERIVED,
           (CASE
                WHEN (ins.debt_type_code = 'COMMPAPER')
                THEN
                    cp_identifiers_by_instrument.cp_cusip
                ELSE
                    ins.CUSIP
            END)
               AS CUSIP,
           ins.CINS,
           ins.ISINS
               AS ISIN,
           ins.RATING_TYPE_CODE,
           rtc.DESCRIPTION
               AS RATING_TYPE_DESCRIPTION,
           dr.CURRENT_RATING_SYMBOL,
           dr.CURRENT_RATING_DATE
               AS RATING_DATE,
           ins.DATA_ADMIN_DATE,
           rh.LAST_REVIEW_DATE,
           ins.REGULATORY_INDICATOR,
           dr.CURRENT_CW_OL,
           dr.CURRENT_CW_OL_DATE,
           (CASE
                WHEN (ins.INSTRUMENT_TYPE_CODE = 'CP')
                THEN
                    'Commercial Paper'
                WHEN (ins.INSTRUMENT_TYPE_CODE = 'PROGRAM')
                THEN
                    'Program'
                ELSE
                    issue_debt.description
            END)
               AS ISSUE_PROGRAM_TYPE,
           ins.COUPON_RATE
               AS COUPON_RATE,
           ins.ORIGINAL_PRINCIPAL_BALANCE,
           COALESCE (ins.currency_type_code, 'USD')
               AS CURRENCY,
           dtc.SORT_ORDER,
           rtc.PRECEDENCE_NUM,
           ins.rating_id
               AS RATING_DETAIL_ID,
           ins.CONFIDENTIALITY_IND,
           ins.CONFIDENTIAL_CATEGORY_CODE
      FROM (SELECT ei.ENTITY_ID,
                   i.INSTRUMENT_ID,
                   ''
                       AS INSTRUMENT_DETAIL_ID,
                   i.INSTRUMENT_NAME,
                   reason_type_code,
                   pdt.program_id,
                   ''
                       issue_id_table_ind,
                   pdt.debt_type_code
                       debt_type_code,
                   pdtr.rating_type_code,
                   i.MATURITY_DATE
                       AS MATURITY_DATE,
                   i.CUSIP9
                       AS CUSIP,
                   i.CINS,
                   i.ISINS,
                   pdtr.CONFIDENTIALITY_IND,
                   pdtr.regulatory_indicator,
                   pdtr.DATA_ADMIN_DATE,
                   pdtr.CONFIDENTIAL_CATEGORY_CODE,
                   pdtr.program_debt_type_rating_id
                       AS rating_id,
                   i.INSTRUMENT_TYPE_CODE,
                   i.COUPON_RATE || ''
                       AS COUPON_RATE,
                   ''
                       AS ORIGINAL_PRINCIPAL_BALANCE,
                   i.CURRENCY_TYPE_CODE,
                   ai.ACTIVE_RATING_IND
              FROM core.program_debt_types                 pdt,
                   core.program_debt_type_ratings          pdtr,
                   FGR.INSTRUMENTS                         i,
                   R360_APPDATA.VW_ACTIVE_INSTRUMENTS_PVT  ai,
                   FGR.ENTITY_INSTRUMENTS                  ei
             WHERE     ei.INSTRUMENT_ID = i.INSTRUMENT_ID
                   AND pdtr.PROGRAM_DEBT_TYPE_ID = pdt.PROGRAM_DEBT_TYPE_id
                   AND pdt.EXCLUDE_FROM_PRODUCTS_IND = 'N'
                   AND pdtr.EXCLUDE_FROM_PRODUCTS_IND = 'N'
                   AND pdtr.CONFIDENTIALITY_IND = 'Y'
                   AND pdtr.CONFIDENTIAL_CATEGORY_CODE IN ('CIR', 'PVT')
                   AND pdtr.CURR_IND = 'Y'
                   AND i.RELATED_INSTRUMENT_ID = pdt.PROGRAM_ID
                   AND i.SOURCE_INSTRUMENT_IND = 'R'
                   AND i.SOURCE_INSTRUMENT_ID = pdt.PROGRAM_DEBT_TYPE_ID
                   AND i.SECTOR_CODE = 'GLOBISS'
                   AND i.INSTRUMENT_ID = ai.INSTRUMENT_ID
                   AND pdtr.RATING_TYPE_CODE = ai.RATING_TYPE_CODE
                   AND pdtr.PROGRAM_DEBT_TYPE_RATING_ID NOT IN
                           (SELECT RATING_ID
                              FROM CORE.NON_ACK_RATINGS
                             WHERE RATING_ID_IND = 'R')
            UNION
            SELECT ei.ENTITY_ID,
                   id.INSTRUMENT_ID,
                   '' || id.INSTRUMENT_DETAIL_ID,
                   i.INSTRUMENT_NAME        AS INSTRUMENT_NAME,
                   reason_type_code,
                   r.ISSUE_ID               AS program_id,
                   r.issue_id_table_ind     issue_id_table_ind,
                   i.DEBT_TYPE_CODE         debt_type_code,
                   r.rating_type_code,
                   id.MATURITY_DATE         AS MATURITY_DATE,
                   id.CUSIP9                AS CUSIP,
                   id.CINS,
                   id.ISINS,
                   r.CONFIDENTIALITY_IND,
                   r.regulatory_indicator,
                   r.DATA_ADMIN_DATE,
                   r.CONFIDENTIAL_CATEGORY_CODE,
                   r.rating_id,
                   i.INSTRUMENT_TYPE_CODE,
                   id.CURRENT_COUPON_RATE,
                   id.CLASS_AMOUNT          AS ORIGINAL_PRINCIPAL_BALANCE,
                   id.CURRENCY_TYPE_CODE,
                   ai.ACTIVE_RATING_IND
              FROM core.ratings                            r,
                   FGR_PRIME.INSTRUMENT_DETAILS            id,
                   FGR.INSTRUMENTS                         i,
                   R360_APPDATA.VW_ACTIVE_INSTRUMENTS_PVT  ai,
                   FGR.ENTITY_INSTRUMENTS                  ei
             WHERE     ei.INSTRUMENT_ID = id.INSTRUMENT_ID
                   AND r.EXCLUDE_FROM_PRODUCTS_IND = 'N'
                   AND r.CONFIDENTIALITY_IND = 'Y'
                   AND r.issue_id_table_ind IN ('M')
                   AND r.CONFIDENTIAL_CATEGORY_CODE IN ('CIR', 'PVT')
                   AND r.CURR_IND = 'Y'
                   AND id.SOURCE_INSTRUMENT_DETAIL_ID = r.ISSUE_ID
                   AND id.INSTRUMENT_ID = i.INSTRUMENT_ID
                   AND i.INSTRUMENT_ID = ai.INSTRUMENT_ID
                   AND i.SECTOR_CODE = 'GLOBISS'
                   AND id.INSTRUMENT_DETAIL_ID = ai.INSTRUMENT_DETAIL_ID
                   AND r.RATING_TYPE_CODE = ai.RATING_TYPE_CODE
                   AND r.RATING_ID NOT IN (SELECT RATING_ID
                                             FROM CORE.NON_ACK_RATINGS
                                            WHERE RATING_ID_IND = 'M')) ins
           LEFT OUTER JOIN SPAPP.DEBT_TYPE_CODES dtc
               ON dtc.DEBT_TYPE_CODE = ins.DEBT_TYPE_CODE
           LEFT OUTER JOIN R360_APPDATA.VW_RATING_TYPE_CODES rtc
               ON rtc.RATING_TYPE_CODE = ins.RATING_TYPE_CODE
           INNER JOIN DERIVATION.deriv_rating dr
               ON dr.RATING_ID = ins.RATING_ID
           LEFT OUTER JOIN R360_APPDATA.VW_CORE_REVIEW_HISTORY_LRD rh
               ON     rh.RATING_ID = ins.RATING_ID
                  AND rh.RATED_ENTITY_TYPE IN ('R', 'M')
           LEFT OUTER JOIN (SELECT issue_type_code, description
                              FROM (SELECT issue_type_code, description
                                      FROM SPAPP.ISSUE_TYPE_CODES
                                     WHERE active_ind = 'Y'
                                    UNION ALL
                                    SELECT debt_type_code, description
                                      FROM SPAPP.DEBT_TYPE_CODES
                                     WHERE active_ind = 'Y')) issue_debt
               ON ins.instrument_type_code = issue_debt.issue_type_code
           LEFT OUTER JOIN
           (  SELECT instrument_id,
                     LISTAGG (cusip6, ', ') WITHIN GROUP (ORDER BY cusip6 ASC)    AS cp_cusip
                FROM FGR.CP_IDENTIFIERS
            GROUP BY instrument_id) cp_identifiers_by_instrument
               ON ins.instrument_id =
                  cp_identifiers_by_instrument.instrument_id
     WHERE     ins.debt_type_code NOT IN ('FER',
                                          'FINPROG',
                                          'FSR',
                                          'RC')
           AND ins.ACTIVE_RATING_IND = 'Y'
           AND dr.ACTIVE_FLAG = 'Y'
/


GRANT SELECT ON R360_APPDATA.VW_ISSUES_MATURITIES_PVT TO R360_APPDATA_READER
/


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\R360_NonPublicOpions\R360CFS_Release_Sep8th_2023\views\VW_MY_RATING.vw

CREATE OR REPLACE VIEW r360_appdata.VW_MY_RATING AS
WITH 
icr_ratings AS       
   (SELECT rd.rating_id as entity_id, rd.current_rating_symbol AS rating, 
           CASE WHEN rtc.prelim_ind = 'Y' THEN 'Preliminary Rating' ELSE dt.description END AS debt_type, 
           rtc.description AS rating_type, rdna.current_cw_ol AS creditwatch_outlook, rd.debt_type_code,
		   rd.rating_type_code, rtc.long_short_ind, rtc.rd7_sort_order, rtc.prelim_ind
    FROM   fgr_prime.rating_details rd 
    INNER JOIN spapp.debt_type_codes dt ON rd.debt_type_code = dt.debt_type_code AND dt.active_ind = 'Y'
    INNER JOIN spapp.rating_type_codes rtc ON rtc.rating_type_code = rd.rating_type_code
	INNER JOIN r360_appdata.rating_type_code_map rtm ON rtc.rating_type_code = rtm.rating_type_code 
	  AND rtm.actv_flag = 'Y' AND rtm.process_ind = 'Y'
    INNER JOIN fgr_prime.rating_details rdna ON rdna.source_rating_id = rd.non_affirm_rating_id 
	  AND rdna.ack_status = 'Y' AND rdna.ciq_rep_ind = 1
    WHERE rd.ack_status = 'Y' AND rd.ciq_rep_ind = 1 AND rd.rating_ind = 'E' AND rd.srd_curr_ind = 'Y'
	  AND rd.debt_type_code = 'ICR' AND rd.current_rating_symbol <> 'NR'),
non_icr_ratings AS 
   (SELECT ei.entity_id, rd.current_rating_symbol AS rating, 
           CASE WHEN rtc.prelim_ind = 'Y' THEN 'Preliminary Rating' ELSE dt.description END AS debt_type, 
		   rtc.description AS rating_type, rdna.current_cw_ol AS creditwatch_outlook, rd.debt_type_code, 
		   rd.rating_type_code, rtc.long_short_ind, rtc.rd7_sort_order, rtc.prelim_ind	   
    FROM fgr.entity_instruments ei 
    INNER JOIN fgr_prime.rating_details rd ON rd.rating_id = ei.instrument_id 
	  AND rd.ack_status = 'Y' AND rd.ciq_rep_ind = 1 AND rd.rating_ind = 'I' 
    INNER JOIN spapp.debt_type_codes dt ON rd.debt_type_code = dt.debt_type_code AND dt.active_ind = 'Y'
    INNER JOIN spapp.rating_type_codes rtc ON rtc.rating_type_code = rd.rating_type_code
	INNER JOIN r360_appdata.rating_type_code_map rtm ON rtc.rating_type_code = rtm.rating_type_code 
	  AND rtm.actv_flag = 'Y' AND rtm.process_ind = 'Y'
    INNER JOIN fgr_prime.rating_details rdna ON rdna.source_rating_id = rd.non_affirm_rating_id 
	  AND rdna.ack_status = 'Y' AND rdna.ciq_rep_ind = 1
    WHERE ei.role_code = 'ISSUER' AND ei.status_ind = 'A' AND ei.ciq_rep_ind = 1
	  AND rd.debt_type_code IN ('FSR', 'FER', 'FINPROG', 'RC')	
      AND rd.srd_curr_ind = 'Y' AND rd.source_rating_ind = 'D' AND rd.current_rating_symbol <> 'NR'),
entity_ratings AS          					    
   (SELECT *
    FROM   icr_ratings   
    UNION ALL
    SELECT *
    FROM   non_icr_ratings),   
entity_ratings_with_sort_order AS 
   (SELECT er.*, 
           CASE WHEN er.debt_type_code = 'ICR' AND er.rating_type_code = 'FCLONG'   THEN 100
             WHEN er.debt_type_code = 'ICR' AND er.rating_type_code = 'STDLONG'  THEN 101
             WHEN er.debt_type_code = 'ICR' AND er.rating_type_code = 'FCSHORT'  THEN 102
             WHEN er.debt_type_code = 'ICR' AND er.rating_type_code = 'STDSHORT' THEN 103            
             WHEN er.debt_type_code = 'FSR' AND er.prelim_ind = 'N' THEN 200      
             WHEN er.debt_type_code = 'FER' AND er.prelim_ind = 'N'THEN 300                      
             WHEN er.debt_type_code = 'RC'  AND er.prelim_ind = 'N'THEN 400       
             WHEN er.debt_type_code = 'FINPROG' AND er.prelim_ind = 'N' THEN 500                 
             WHEN er.prelim_ind	= 'Y' THEN 600            
             WHEN er.debt_type_code = 'ICR' AND er.rating_type_code NOT IN ('FCLONG', 'STDLONG', 'FCSHORT', 'STDSHORT') THEN 700
		   END AS sort_order, 
	       'Y' AS entity_rating_ind
    FROM   entity_ratings er),   
instrument_rating_status AS 
       (SELECT i.instrument_id, 
			   rd.detail_id AS instrument_detail_id,
			   rd.rating_detail_id ,
			   rd.current_rating_symbol as rating,
			   dtc.description as debt_type,
			   rtc.description as rating_type,
			   CASE WHEN (rd.rating_code NOT IN('NR', 'NR/NR') AND NOT REGEXP_LIKE(rd.rating_code, '.[^/]NR') 
			              AND COALESCE(ids.source_status_ind, i.source_status_ind) <> 'Y') 
						  OR                         
                         (trunc(SYSDATE) - trunc(rd.data_admin_date) <= 90) THEN
                      'Y'
               ELSE
                      'N'
               END rating_status,
               rtc.long_short_ind, 
			   rtc.rd7_sort_order, 
			   rtc.prelim_ind			 
        FROM   fgr.instruments i,
			   fgr_prime.instrument_details ids,
			   fgr_prime.rating_details rd,
			   spapp.rating_type_codes rtc,
			   r360_appdata.rating_type_code_map rtm,
			   spapp.debt_type_codes dtc      
        WHERE  i.instrument_id = rd.rating_id
           AND i.instrument_id = ids.instrument_id(+)
           AND rd.rating_id = ids.instrument_id(+)
           AND rd.detail_id = ids.instrument_detail_id(+)
           AND rd.rating_type_code =  rtc.rating_type_code
           AND rtc.rating_type_code = rtm.rating_type_code 
           AND rd.debt_type_code = dtc.debt_type_code          
           AND rd.ack_status = 'Y' AND rd.ciq_rep_ind = 1 
           AND rd.rating_ind = 'I' AND rd.srd_curr_ind = 'Y' 
           AND i.sector_code = 'GLOBISS' AND i.program_type_code <> 'COVERPOOL'          
		   AND rtc.prelim_ind = 'N' AND rtm.actv_flag = 'Y' AND rtm.process_ind = 'Y'),
u_entity_instruments AS
   (SELECT entity_id, instrument_id 
    FROM   fgr.entity_instruments 
	WHERE  role_code = 'ISSUER' AND status_ind = 'A' AND ciq_rep_ind = 1
    UNION ALL
    SELECT entity_id, instrument_id 
	FROM   fgr.instrument_participants 
	WHERE  role_code IN ('OBLIGOR', 'COISSUER', 'SERVICER') AND status_ind = 'A' AND ciq_rep_ind = 1), 
program_maturity_ratings AS    
   (SELECT uei.entity_id, NULL AS rating, NULL as debt_type, NULL rating_type, 
           NULL AS creditwatch_outlook, NULL AS debt_type_code, NULL AS rating_type_code,  
	        NULL AS long_short_ind, NULL AS rd7_sort_order, NULL AS prelim_ind, 
			900 AS sort_order, 'N' AS entity_rating_ind
    FROM   u_entity_instruments uei
    WHERE EXISTS (SELECT 1 
	              FROM   instrument_rating_status  ir    
                  WHERE  ir.instrument_id = uei.instrument_id AND ir.rating_status = 'Y')),
all_ratings AS 
   (SELECT * FROM entity_ratings_with_sort_order	 
    UNION
	SELECT * FROM program_maturity_ratings),	 
my_rating AS
   (SELECT entity_id, rating, debt_type, rating_type, creditwatch_outlook, entity_rating_ind, 
           ROW_NUMBER() OVER(PARTITION BY entity_id ORDER BY sort_order, long_short_ind, rd7_sort_order) AS rank_num
    FROM   all_ratings) 
SELECT entity_id, rating, debt_type, rating_type, creditwatch_outlook, entity_rating_ind
FROM my_rating
WHERE rank_num = 1;
GRANT SELECT ON r360_appdata.VW_MY_RATING TO r360_appdata_READER;


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\R360_NonPublicOpions\R360CFS_Release_Sep8th_2023\views\VW_NR_SUSFIN_GET_ANALYTICAL_APPROACH.vw

CREATE OR REPLACE VIEW R360_APPDATA.VW_NR_SUSFIN_GET_ANALYTICAL_APPROACH AS SELECT 
ao.ARTICLE_id as article_id,
AO.Article_Release_Date as PresentationDate,
AO.Article_Date as ArticleDate,
ao.article_type as CRArticleType,
AO.PREFERRED_TITLE  as CRPresentationTitle, 
NVL(EMP.Employee_Name, 'S&P Global Ratings') As BestPersonName, 
sub.Long_Description as CreditResearchArticleTopic,              
AR.RELATE_ID  
from fgr.article_relationships ar
inner join spapp.Subjects  sub on sub.subject_id = ar.source_relate_id
inner join fgr.article_objects ao ON ao.article_id = ar.article_id
inner join fgr.ARTICLE_USERS au ON ao.article_id = au.article_id and au.user_role = 'AUTHOR' LEFT OUTER JOIN SPAPP.Employees EMP on EMP.employee_id  = au.user_id
where  ao.fgr_status = 'A'
and  ar.source_relate_id IN (8249, 8248, 8253)  
and ao.ciq_rep_ind = 1
and ao.ack_status in ('Y', 'D')  
and ar.source_relate_ind = 'S';

GRANT SELECT ON R360_APPDATA.VW_NR_SUSFIN_GET_ANALYTICAL_APPROACH TO R360_APPDATA_READER;


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\R360_NonPublicOpions\R360CFS_Release_Sep8th_2023\views\VW_NR_SUSFIN_GET_ARTICLETOPICS.vw

Create Or Replace View 
 R360_APPDATA.VW_NR_SUSFIN_GET_ARTICLETOPICS as
(
select 
subject_id as KeyCreditResearchArticleTopic,
long_description as CreditResearchArticleTopic
from SPAPP.Subjects
where subject_id in (8249, 8248, 8253)  );

GRANT SELECT ON R360_APPDATA.VW_NR_SUSFIN_GET_ARTICLETOPICS TO R360_APPDATA_READER;


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\R360_NonPublicOpions\R360CFS_Release_Sep8th_2023\views\VW_NR_SUSFIN_GET_GREEN_SPO.vw

CREATE OR REPLACE VIEW "R360_APPDATA"."VW_NR_SUSFIN_GET_GREEN_SPO" 
AS
select * from 
(select 
object_id as KeyInstn,   
job_id as ArticleId,
max(SP_AR_DATE) as ardate ,
max(SP_GE_ISSUER) as Issuer ,
max(SP_NR_GE_TRANSACTION_DESC) as Report ,
max(SP_NR_SECTOR_NM) as Sector ,
max(SP_GE_ISSUE) as Issue ,
max(SP_NR_FINANCING_AMT) as Amount ,  
max(SP_NR_GOVERN) as GovernanceScore ,
nvl(max(SP_NR_MIT_SCORE), 'NA') as MitigationScore ,
max(SP_NR_TRANSP) as transparencyScore ,  
nvl(max(SP_NR_RES_SCORE), 'NA') as AdaptationScore ,
max(SP_AR_PUBLIC_DATE) as PublicDate ,    
(CASE WHEN max(SP_NR_RES_SCORE) is null then max(SP_NR_OVRL_E_SCORE_QTILE) || '/' || max(SP_NR_OVRL_E_SCORE_NUM) 
ELSE max(SP_NR_OVRL_R_SCORE_QTILE) || '/' || max(SP_NR_OVRL_R_SCORE_NUM) END) as OverallScore,
nvl(max(SP_NR_ALIGN_PRNCPL),'NA') as AlignedTo ,
nvl(max(SP_NR_FRMWRK_TYPE),'NA') as Ftype
from
(
SELECT * FROM 
( 
SELECT * FROM (
SELECT ES.* , dense_rank() over (partition by ES.object_id  order by es.as_of_date desc) as latestRank
FROM DSMPSTG.r360_ECON_FACTS_SCORES  es
where es.data_group = 'GREEN'
)
----WHERE object_id = '4245644' ---- review  and confirm with Chan,Man or Shilp Moduga   
---- and  latestRank=1 ------ *********TESTING ALERT
) es1
inner join fgr.article_objects  ao  on es1.Job_Id = ao.article_id
where ao.article_type = 'COMMENTS'  
----and ao.article_sub_type = 'GREEN EVALUATION'  ---- GREEN EVAL Articles
and ao.fgr_status = 'A' 
----and ao.status_ind='A'  
----and CIQ_REP_IND= 1  ---- review  and confirm with Chan,Man or Shilp Moduga 
----and es1.object_id = '4245644' --- '9733885'   ------ *********TESTING ALERT
) 
PIVOT  
(  
max(data_value)
FOR de_mnemonic 
IN ('SP_AR_DATE' as SP_AR_DATE,
'SP_GE_ISSUER' as SP_GE_ISSUER,
'SP_NR_ALIGN_PRNCPL' as SP_NR_ALIGN_PRNCPL,
'SP_NR_FRMWRK_TYPE' as SP_NR_FRMWRK_TYPE,
'SP_NR_GE_TRANSACTION_DESC' as SP_NR_GE_TRANSACTION_DESC,
'SP_NR_SECTOR_NM' as SP_NR_SECTOR_NM,
'SP_GE_ISSUE' as SP_GE_ISSUE ,
'SP_NR_FINANCING_AMT' as SP_NR_FINANCING_AMT,
'SP_NR_GOVERN' as SP_NR_GOVERN,
'SP_NR_MIT_SCORE' as SP_NR_MIT_SCORE,
'SP_NR_TRANSP' as SP_NR_TRANSP,
'SP_NR_RES_SCORE' as SP_NR_RES_SCORE,
'SP_AR_PUBLIC_DATE' as SP_AR_PUBLIC_DATE,
'SP_NR_OVRL_E_SCORE_QTILE' as SP_NR_OVRL_E_SCORE_QTILE,
'SP_NR_OVRL_E_SCORE_NUM' as SP_NR_OVRL_E_SCORE_NUM,
'SP_NR_OVRL_R_SCORE_QTILE' as SP_NR_OVRL_R_SCORE_QTILE,
'SP_NR_OVRL_R_SCORE_NUM' as SP_NR_OVRL_R_SCORE_NUM)
)
GROUP BY  object_id,job_id
order by issuer
);

GRANT SELECT ON "R360_APPDATA"."VW_NR_SUSFIN_GET_GREEN_SPO"  TO R360_APPDATA_READER;


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\R360_NonPublicOpions\R360CFS_Release_Sep8th_2023\views\VW_ORG_KEY_INST_ID_MAPPING.vw

SET DEFINE OFF;
/* Formatted on 8/29/2023 10:19:27 AM (QP5 v5.362) */
CREATE OR REPLACE FORCE VIEW R360_APPDATA.VW_ORG_KEY_INST_ID_MAPPING
(
    LNK_FINANCIAL_INSTITUTION_OID,
    CORE_FINS_ID_CONTEXT,
    CORE_FINS_IDENTIFIER,
    FINS_ID_CONTEXT,
    FINS_IDENTIFIER,
    CAPIQ_FINS_ID_CONTEXT,
    CAPIQ_FINS_IDENTIFIER,
    END_DATETIME,
    END_DATETIME1,
    END_DATETIME3
)
BEQUEATH DEFINER
AS
    SELECT DISTINCT
           t0.LNK_FINANCIAL_INSTITUTION_OID
               AS LNK_FINANCIAL_INSTITUTION_OID,
           t1.FINS_ID_CONTEXT
               AS CORE_FINS_ID_CONTEXT,
           t1.FINS_IDENTIFIER
               AS CORE_FINS_IDENTIFIER,
           t0.FINS_ID_CONTEXT
               AS FINS_ID_CONTEXT,
           t0.FINS_IDENTIFIER
               AS FINS_IDENTIFIER,
           t3.FINS_ID_CONTEXT
               AS CAPIQ_FINS_ID_CONTEXT,
           t3.FINS_IDENTIFIER
               AS CAPIQ_FINS_IDENTIFIER,
           t0.END_DATETIME
               AS END_DATETIME,
           t1.END_DATETIME
               AS END_DATETIME1,
           t1.END_DATETIME
               AS END_DATETIME3
      FROM GS_GC.FINANCIAL_INSTITUTION_ID  t0
           LEFT JOIN GS_GC.FINANCIAL_INSTITUTION_ID t1
               ON (    t0.LNK_FINANCIAL_INSTITUTION_OID =
                       t1.LNK_FINANCIAL_INSTITUTION_OID
                   AND t1.FINS_ID_CONTEXT = 'CORE'
                   AND t1.END_DATETIME IS NULL)
           LEFT JOIN GS_GC.FINANCIAL_INSTITUTION_ID t3
               ON (    t0.LNK_FINANCIAL_INSTITUTION_OID =
                       t3.LNK_FINANCIAL_INSTITUTION_OID
                   AND t3.FINS_ID_CONTEXT = 'CAPIQ'
                   AND t3.END_DATETIME IS NULL)
     WHERE t0.FINS_ID_CONTEXT = 'SNL' AND t0.END_DATETIME IS NULL
/


GRANT SELECT ON R360_APPDATA.VW_ORG_KEY_INST_ID_MAPPING TO NAGABHUSHAN_PATHI
/

GRANT SELECT ON R360_APPDATA.VW_ORG_KEY_INST_ID_MAPPING TO R360_APPDATA_READER
/


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\R360_NonPublicOpions\R360CFS_Release_Sep8th_2023\views\VW_PEERS_PORTFOLIO_CONTENTS.vw

CREATE OR REPLACE VIEW R360_APPDATA.VW_PEERS_PORTFOLIO_CONTENTS AS
WITH entity_id_mapping AS (
     SELECT CAST(core.fins_identifier AS NUMBER DEFAULT NULL ON CONVERSION ERROR) AS entity_id,	        
            snl.fins_identifier  AS key_instn_id
     FROM   gs_gc.financial_institution_id snl, 
            gs_gc.financial_institution_id core 
     WHERE  snl.lnk_financial_institution_oid = core.lnk_financial_institution_oid
        AND snl.fins_id_context = 'SNL'      
        AND snl.data_source_id IS NOT NULL      
        AND snl.end_datetime IS NULL
        AND core.fins_id_context = 'CORE'       
        AND core.end_datetime IS NULL),
   icr_fclong_rating AS (
     SELECT rd.rating_id             AS entity_id, 
            rd.current_rating_symbol AS rating,
            rdna.current_cw_ol       AS latest_non_affirm_cw_ol
     FROM   fgr_prime.rating_details rd
     INNER JOIN spapp.debt_type_codes dt 
	         ON rd.debt_type_code = dt.debt_type_code AND dt.active_ind = 'Y'      
     INNER JOIN r360_appdata.rating_type_code_map rtcm 
	         ON rd.rating_type_code = rtcm.rating_type_code AND rtcm.actv_flag = 'Y' AND  rtcm.process_ind = 'Y'
     INNER JOIN spapp.rating_type_codes rt 
	         ON rt.rating_type_code = rtcm.rating_type_code
     INNER JOIN fgr_prime.rating_details rdna 
	         ON rd.non_affirm_rating_id = rdna.source_rating_id AND rdna.ack_status = 'Y' AND rdna.ciq_rep_ind = 1
     WHERE rd.srd_curr_ind = 'Y' AND rd.ack_status = 'Y' AND rd.ciq_rep_ind = 1 AND rd.rating_ind = 'E'
       AND rd.debt_type_code = 'ICR' AND rd.rating_type_code = 'FCLONG'),
   entity_industry AS (
     SELECT e.entity_id,
            i.description AS industry,
            ROW_NUMBER () OVER (PARTITION BY e.entity_id ORDER BY i.code ASC) AS row_num			 
     FROM   fgr.entities       e,  
            fgr.entity_types   et,
            spapp.v_industries i
     WHERE  e.entity_id = et.entity_id 
        AND et.type_code_value = i.code
        AND e.primary_sub_sector_code = i.sub_sector_code
        AND et.entity_type_code = 'INDUSTRY'
        AND et.status_ind = 'A'
        AND et.primary_secondary_ind = 'P'
        AND i.status_ind = 'A')	 
SELECT e.entity_id, 
       eim.key_instn_id,
       en.entity_name, 
       icr.rating, 
       icr.latest_non_affirm_cw_ol AS creditwatch_outlook,	   
       s.state_name, 
       c.description AS country_name, 
	   ei.industry,
       ear.primary_sector_code, 
       ear.primary_sub_sector_code, 
       ear.active_rating_ind,
       CASE WHEN fe.core_id IS NOT NULL THEN 'Y'
            ELSE 'N'
       END AS financials_available
FROM   entity_id_mapping eim
INNER JOIN r360_appdata.vw_entity_active_rating ear 
        ON eim.entity_id = ear.entity_id  
INNER JOIN fgr.entities e
        ON eim.entity_id = e.entity_id
INNER JOIN fgr.entity_names en
        ON e.entity_id = en.entity_id		
INNER JOIN spapp.countries c
        ON e.country_code = c.country_code
LEFT JOIN  r360_user_pref.r360_app_state s
        ON e.state_code = s.state_cd   	
LEFT JOIN  icr_fclong_rating icr
        ON e.entity_id = icr.entity_id		
LEFT JOIN  spgiproduct.fin_entity fe
        ON e.entity_id = fe.core_id AND (ab_ind = 'Y' OR ag_ind = 'Y') AND active_flag = 'Y'
LEFT JOIN entity_industry ei
        ON e.entity_id = ei.entity_id AND ei.row_num = 1 
WHERE  en.status_ind   = 'A'   
   AND en.curr_ind     = 'Y'
ORDER BY en.entity_name ASC;

GRANT SELECT ON R360_APPDATA.VW_PEERS_PORTFOLIO_CONTENTS TO R360_APPDATA_READER;


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\R360_NonPublicOpions\R360CFS_Release_Sep8th_2023\views\VW_R360_APP_TIME_ZONE.vw

SET DEFINE OFF;
/* Formatted on 8/29/2023 10:19:30 AM (QP5 v5.362) */
CREATE OR REPLACE FORCE VIEW R360_APPDATA.VW_R360_APP_TIME_ZONE
(
    TIME_ZONE,
    TIME_ZONE_NAME,
    TIME_ZONE_DISPLAY_NAME
)
BEQUEATH DEFINER
AS
    SELECT TIME_ZONE, TIME_ZONE_NAME, TIME_ZONE_DISPLAY_NAME
      FROM R360_USER_PREF.R360_APP_TIME_ZONE
     WHERE ACTV_FLAG = 'Y'
/


GRANT SELECT ON R360_APPDATA.VW_R360_APP_TIME_ZONE TO R360_APPDATA_READER
/


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\R360_NonPublicOpions\R360CFS_Release_Sep8th_2023\views\VW_R360_FINANCIALS_DATA.vw

SET DEFINE OFF;
/* Formatted on 8/29/2023 10:19:33 AM (QP5 v5.362) */
CREATE OR REPLACE FORCE VIEW R360_APPDATA.VW_R360_FINANCIALS_DATA
(
    FIN_DATA_POINT_ID,
    FIN_PERIOD_ID,
    FIN_DATA_ELEMENT_ID,
    FIN_ENTITY_ID,
    DATA_POINT_VALUE,
    DATA_SOURCE,
    CONF_FLAG,
    DATA_ELEMENT_CD,
    DATA_ELEMENT_NAME,
    DATA_ELEMENT_DESC,
    CALCULATION_FORMULA,
    CALCULATED_MNEM_IND,
    FISCAL_YEAR,
    PERIOD_TYPE_CD,
    PERIOD_TYPE_NAME,
    PERIOD_END_DATE,
    PERIOD_STATE,
    REPORTED_CURRENCY,
    SCENARIO_NAME,
    DATA_SOURCE_SYSTEM,
    LAST_UPDATED_DATE,
    CORE_ID,
    SP_ID,
    TEMPLATE_NAME,
    FISCALYEAR,
    MAGNITUDE,
    PRODUCT_DECIMAL,
    ID
)
BEQUEATH DEFINER
AS
    SELECT dp.FIN_DATA_POINT_ID,
           per.FIN_PERIOD_ID,
           de.FIN_DATA_ELEMENT_ID,
           org.FIN_ENTITY_ID,
           CASE
               WHEN REGEXP_LIKE (dp.data_point_value, '[[:digit:]]')
               THEN
                   CASE
                       WHEN     em.column_name IN
                                    ('Financial.all', 'Insurance.all')
                            AND em.MAGNITUDE IN ('%', 'x')
                       THEN
                           ROUND (TO_NUMBER (dp.DATA_POINT_VALUE) * 100, 2)
                       ELSE
                           ROUND (TO_NUMBER (dp.DATA_POINT_VALUE), 2)
                   END
               ELSE
                   NULL
           END                  AS DATA_POINT_VALUE,
           dp.DATA_SOURCE,
           dp.CONF_FLAG,
           de.DATA_ELEMENT_CD,
           de.DATA_ELEMENT_NAME,
           de.DATA_ELEMENT_DESC,
           de.CALCULATION_FORMULA,
           de.CALCULATED_MNEM_IND,
           per.FISCAL_YEAR,
           per.PERIOD_TYPE_CD,
           per.PERIOD_TYPE_NAME,
           per.PERIOD_END_DATE,
           per.PERIOD_STATE,
           per.REPORTED_CURRENCY,
           per.SCENARIO_NAME,
           per.DATA_SOURCE_SYSTEM,
           per.LAST_UPDATED_DATE,
           org.CORE_ID,
           org.SP_ID,
           em.COLUMN_NAME       AS TEMPLATE_NAME,
           CASE
               WHEN per.PERIOD_TYPE_CD = 'LTM'
               THEN
                   'LTM'
               ELSE
                      CAST (per.FISCAL_YEAR AS VARCHAR2 (4000))
                   || CASE
                          WHEN per.PERIOD_TYPE_NAME = 'Annual'
                          THEN
                              ' FY'
                          WHEN per.PERIOD_TYPE_NAME = 'Quarterly'
                          THEN
                              ' ' || per.PERIOD_TYPE_CD
                          ELSE
                              per.PERIOD_TYPE_CD
                      END
           END                  AS FiscalYear,
           em.MAGNITUDE,
           em.PRODUCT_DECIMAL,
           per.FIN_PERIOD_ID    AS ID
      FROM SPGIPRODUCT.FIN_DATA_POINT  dp
           JOIN SPGIPRODUCT.FIN_DATA_ELEMENT de
               ON (DP.FIN_DATA_ELEMENT_ID = de.FIN_DATA_ELEMENT_ID)
           JOIN SPGIPRODUCT.FIN_PERIOD per
               ON (PER.FIN_PERIOD_ID = dp.FIN_PERIOD_ID)
           JOIN SPGIPRODUCT.FIN_ENTITY org
               ON (ORG.FIN_ENTITY_ID = per.FIN_ENTITY_ID)
           JOIN R360_APPDATA.ELEMENT_MASTER em
               ON (de.DATA_ELEMENT_CD = em.ITEM_NAME)
     WHERE 1 = 1 AND de.r360_flag = 'Y'             --AND org.CORE_ID = 383312
                                        -- and de.EXTERNAL_DISTR_FLAG='Y'
                                        --  and per.CONF_FLAG='N'
                                        --  and per.EXTERNAL_DISTR_FLAG='Y'
                                        AND dp.CONF_FLAG = 'N'
/


GRANT SELECT ON R360_APPDATA.VW_R360_FINANCIALS_DATA TO R360_APPDATA_READER
/


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\R360_NonPublicOpions\R360CFS_Release_Sep8th_2023\views\VW_R360_FINANCIALS_DATA_PEERS.vw

SET DEFINE OFF;
/* Formatted on 8/29/2023 10:19:36 AM (QP5 v5.362) */
CREATE OR REPLACE FORCE VIEW R360_APPDATA.VW_R360_FINANCIALS_DATA_PEERS
(
    CORE_ID,
    DATA_SOURCE_SYSTEM,
    DATA_ELEMENT_CD,
    DATA_POINT_VALUE,
    TEMPLATE_NAME,
    PERIOD_STATE,
    PERIOD_END_DATE,
    LAST_UPDATED_DATE,
    REPORTED_CURRENCY,
    MAGNITUDE,
    PRODUCT_DECIMAL,
    FISCALYEAR,
    FIN_PERIOD_ID,
    FIN_ENTITY_ID,
    FISCAL_YEAR,
    PERIOD_TYPE_CD,
    PERIOD_TYPE_NAME
)
BEQUEATH DEFINER
AS
    SELECT t1.CORE_ID               AS CORE_ID,
           t1.DATA_SOURCE_SYSTEM    AS DATA_SOURCE_SYSTEM,
           t1.DATA_ELEMENT_CD,
           t1.DATA_POINT_VALUE,
           t1.TEMPLATE_NAME,
           CASE
               WHEN t1.PERIOD_STATE = 'FINAL' THEN 'Reviewed'
               WHEN t1.PERIOD_STATE = 'WIP' THEN 'Basic'
               ELSE PERIOD_STATE
           END                      AS PERIOD_STATE,
           t1.PERIOD_END_DATE       AS PERIOD_END_DATE,
           t1.LAST_UPDATED_DATE     AS LAST_UPDATED_DATE,
           t1.REPORTED_CURRENCY     AS REPORTED_CURRENCY,
           t1.MAGNITUDE             AS MAGNITUDE,
           t1.PRODUCT_DECIMAL       AS PRODUCT_DECIMAL,
           t1.FISCALYEAR            AS FISCALYEAR,
           t0.FIN_PERIOD_ID         AS FIN_PERIOD_ID,
           t0.FIN_ENTITY_ID         AS FIN_ENTITY_ID,
           t0.FISCAL_YEAR           AS FISCAL_YEAR,
           t0.PERIOD_TYPE_CD        AS PERIOD_TYPE_CD,
           t0.PERIOD_TYPE_NAME      AS PERIOD_TYPE_NAME
      FROM R360_APPDATA.VW_R360_FIN_PERIODS_RANK  t0
           JOIN R360_APPDATA.VW_R360_FINANCIALS_DATA t1
               ON ((    t0.FIN_PERIOD_ID = t1.FIN_PERIOD_ID
                    AND t0.FIN_ENTITY_ID = t1.FIN_ENTITY_ID
                    AND t0.CORE_ID = t1.CORE_ID))
     WHERE 1 = 1 AND (t1.PERIOD_TYPE_CD = 'A' AND t0.RN <= 1)
/


GRANT SELECT ON R360_APPDATA.VW_R360_FINANCIALS_DATA_PEERS TO R360_APPDATA_READER
/


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\R360_NonPublicOpions\R360CFS_Release_Sep8th_2023\views\VW_R360_FINDATA_5QTRS.vw

SET DEFINE OFF;
/* Formatted on 8/29/2023 10:19:39 AM (QP5 v5.362) */
CREATE OR REPLACE FORCE VIEW R360_APPDATA.VW_R360_FINDATA_5QTRS
(
    ID,
    FIN_PERIOD_ID,
    FIN_ENTITY_ID,
    FISCAL_YEAR,
    PERIOD_TYPE_CD,
    PERIOD_TYPE_NAME,
    CORE_ID,
    DATA_SOURCE_SYSTEM,
    PERIOD_STATE,
    REPORTED_CURRENCY,
    PERIOD_END_DATE,
    LAST_UPDATED_DATE,
    FISCALYEAR,
    DATA_ELEMENT_CD,
    DATA_POINT_VALUE,
    TEMPLATE_NAME,
    MAGNITUDE,
    PRODUCT_DECIMAL
)
BEQUEATH DEFINER
AS
    SELECT t0.RN                    AS ID,
           t0.FIN_PERIOD_ID         AS FIN_PERIOD_ID,
           t0.FIN_ENTITY_ID         AS FIN_ENTITY_ID,
           t0.FISCAL_YEAR           AS FISCAL_YEAR,
           t0.PERIOD_TYPE_CD        AS PERIOD_TYPE_CD,
           t0.PERIOD_TYPE_NAME      AS PERIOD_TYPE_NAME,
           t0.CORE_ID               AS CORE_ID,
           t1.DATA_SOURCE_SYSTEM    AS DATA_SOURCE_SYSTEM,
           CASE
               WHEN t1.PERIOD_STATE = 'FINAL' THEN 'Reviewed'
               WHEN t1.PERIOD_STATE = 'WIP' THEN 'Basic'
               ELSE PERIOD_STATE
           END                      AS PERIOD_STATE,
           t1.REPORTED_CURRENCY     AS REPORTED_CURRENCY,
           t1.PERIOD_END_DATE       AS PERIOD_END_DATE,
           t1.LAST_UPDATED_DATE     AS LAST_UPDATED_DATE,
           t1.FiscalYear,
           t1.data_element_cd,
           t1.data_point_value,
           t1.TEMPLATE_NAME,
           T1.MAGNITUDE,
           T1.PRODUCT_DECIMAL
      FROM R360_APPDATA.VW_R360_FIN_PERIODS_RANK  t0
           JOIN R360_APPDATA.VW_R360_FINANCIALS_DATA t1
               ON     t0.FIN_PERIOD_ID = t1.FIN_PERIOD_ID
                  AND t0.FIN_ENTITY_ID = t1.FIN_ENTITY_ID
                  AND t0.CORE_ID = t1.CORE_ID
     WHERE 1 = 1                            --AND t1.DATA_SOURCE_SYSTEM = 'AB'
                                                     --AND t1.CORE_ID = 101950
            AND t1.period_type_name = 'Quarterly' AND t0.rn <= 5
/


GRANT SELECT ON R360_APPDATA.VW_R360_FINDATA_5QTRS TO R360_APPDATA_READER
/


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\R360_NonPublicOpions\R360CFS_Release_Sep8th_2023\views\VW_R360_FINDATA_5YRS_LTM.vw

SET DEFINE OFF;
/* Formatted on 8/29/2023 10:19:42 AM (QP5 v5.362) */
CREATE OR REPLACE FORCE VIEW R360_APPDATA.VW_R360_FINDATA_5YRS_LTM
(
    ID,
    FIN_PERIOD_ID,
    FIN_ENTITY_ID,
    FISCAL_YEAR,
    PERIOD_TYPE_CD,
    PERIOD_TYPE_NAME,
    CORE_ID,
    DATA_SOURCE_SYSTEM,
    PERIOD_STATE,
    REPORTED_CURRENCY,
    PERIOD_END_DATE,
    LAST_UPDATED_DATE,
    FISCALYEAR,
    DATA_ELEMENT_CD,
    DATA_POINT_VALUE,
    TEMPLATE_NAME,
    MAGNITUDE,
    PRODUCT_DECIMAL
)
BEQUEATH DEFINER
AS
    SELECT CASE WHEN t0.PERIOD_TYPE_CD = 'LTM' THEN 1 ELSE t0.RN + 1 END
               AS ID,
           t0.FIN_PERIOD_ID
               AS FIN_PERIOD_ID,
           t0.FIN_ENTITY_ID
               AS FIN_ENTITY_ID,
           t0.FISCAL_YEAR
               AS FISCAL_YEAR,
           t0.PERIOD_TYPE_CD
               AS PERIOD_TYPE_CD,
           t0.PERIOD_TYPE_NAME
               AS PERIOD_TYPE_NAME,
           t0.CORE_ID
               AS CORE_ID,
           t1.DATA_SOURCE_SYSTEM
               AS DATA_SOURCE_SYSTEM,
           CASE
               WHEN t1.PERIOD_STATE = 'FINAL' THEN 'Reviewed'
               WHEN t1.PERIOD_STATE = 'WIP' THEN 'Basic'
               ELSE PERIOD_STATE
           END
               AS PERIOD_STATE,
           t1.REPORTED_CURRENCY
               AS REPORTED_CURRENCY,
           t1.PERIOD_END_DATE
               AS PERIOD_END_DATE,
           t1.LAST_UPDATED_DATE
               AS LAST_UPDATED_DATE,
           t1.FiscalYear,
           t1.data_element_cd,
           CASE
               WHEN REGEXP_LIKE (t1.data_point_value, '[[:digit:]]')
               THEN
                   ROUND (TO_NUMBER (t1.DATA_POINT_VALUE), 2)
               ELSE
                   NULL
           END
               AS DATA_POINT_VALUE,
           t1.TEMPLATE_NAME,
           T1.MAGNITUDE,
           T1.PRODUCT_DECIMAL
      FROM R360_APPDATA.VW_R360_FIN_PERIODS_RANK  t0
           JOIN R360_APPDATA.VW_R360_FINANCIALS_DATA t1
               ON ((    t1.CORE_ID = t0.CORE_ID
                    AND t0.FIN_PERIOD_ID = t1.FIN_PERIOD_ID
                    AND t0.FIN_ENTITY_ID = t1.FIN_ENTITY_ID))
     WHERE     1 = 1
           AND t0.core_id = t1.core_id
           --AND t0.CORE_ID = 100252
           AND (   (t0.period_type_cd = 'A' AND t0.rn <= 5)
                OR (t0.period_type_cd = 'LTM' AND t0.rn <= 1))
/


GRANT SELECT ON R360_APPDATA.VW_R360_FINDATA_5YRS_LTM TO R360_APPDATA_READER
/


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\R360_NonPublicOpions\R360CFS_Release_Sep8th_2023\views\VW_R360_FIN_MNEMONICMAGNITUDE.vw

SET DEFINE OFF;
/* Formatted on 8/29/2023 10:19:45 AM (QP5 v5.362) */
CREATE OR REPLACE FORCE VIEW R360_APPDATA.VW_R360_FIN_MNEMONICMAGNITUDE
(
    CURRENCY_CD,
    MAGNITUDE,
    CONV_MAGNITUDE,
    MAGNITUDE_CONSTANT_QUANTITY
)
BEQUEATH DEFINER
AS
    SELECT C.CURRENCY_CD,
           M.MAGNITUDE,
           REPLACE (M1.MAGNITUDE,
                    '$',
                    NVL (C.CURRENCY_SYMBOL, C.CURRENCY_CD))
               AS CONV_MAGNITUDE,
             M.MAGNITUDE_CONSTANT_QUANTITY
           + NVL (C.MAGNITUDE_MULTIPLIER_DISPLAY, 0)
               AS MAGNITUDE_CONSTANT_QUANTITY
      FROM R360_USER_PREF.MAGNITUDE  M
           CROSS JOIN R360_USER_PREF.R360_APP_CURRENCY C
           JOIN R360_USER_PREF.MAGNITUDE M1
               ON     M.MAGNITUDE_UNIT_OF_MEASURE =
                      M1.MAGNITUDE_UNIT_OF_MEASURE
                  AND M1.MAGNITUDE_CONSTANT_QUANTITY =
                        M.MAGNITUDE_CONSTANT_QUANTITY
                      + NVL (C.MAGNITUDE_MULTIPLIER_DISPLAY, 0)
     WHERE     M.MAGNITUDE_UNIT_OF_MEASURE = '$'
           AND M.ACTV_FLAG = 'Y'
           AND C.ACTV_FLAG = 'A'
           --AND C.CURRENCY_CD = 'INR'
           AND M.MAGNITUDE = '$M'
/


GRANT SELECT ON R360_APPDATA.VW_R360_FIN_MNEMONICMAGNITUDE TO R360_APPDATA_READER
/


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\R360_NonPublicOpions\R360CFS_Release_Sep8th_2023\views\VW_R360_FIN_MNEMONICS_METADATA.vw

SET DEFINE OFF;
/* Formatted on 8/29/2023 10:19:50 AM (QP5 v5.362) */
CREATE OR REPLACE FORCE VIEW R360_APPDATA.VW_R360_FIN_MNEMONICS_METADATA
(
    MNEMONIC,
    TEMPLATE_NAME,
    SECTION_NAME,
    PRODUCT_CAPTION,
    COLUMN_DEFINITION,
    MAGNITUDE,
    PRODUCT_DECIMAL,
    SORT_ORDER,
    HIGHLIGHT_FLAG,
    ROW_SEPERATOR_FLAG,
    COL_DETAIL_MODE,
    HIDDEN_MNEM_FLAG
)
BEQUEATH DEFINER
AS
    SELECT CASE
               WHEN     UI.DATAELEMENT_TYPE = 'Corporate.pre-adjusted'
                    AND UI.DATAELEMENT_CODE = 'OANCF.VLP'
               THEN
                   'OANCF_VLP'
               ELSE
                   UI.DATAELEMENT_CODE
           END
               AS MNEMONIC,
           UI.DATAELEMENT_TYPE
               AS TEMPLATE_NAME,
           UI.DATAELEMENT_GROUP
               AS SECTION_NAME,
           UI.DATAELEMENT_DISPLAY_NAME || ' (' || EM.MAGNITUDE || ')'
               AS PRODUCT_CAPTION,
           EM.COLUMN_DEFINITION,
           EM.MAGNITUDE,
           EM.PRODUCT_DECIMAL,
           UI.SORT_ORDER,
           UI.HIGHLIGHT_FLAG,
           UI.ROW_SEPERATOR_FLAG,
           UI.COL_DETAIL_MODE,
           UI.HIDDEN_MNEM_FLAG
      FROM R360_APPDATA.DATAELEMENT_UI_CONFIG  UI
           JOIN R360_APPDATA.ELEMENT_MASTER EM
               ON     UI.DATAELEMENT_CODE = EM.ITEM_NAME
                  AND UI.DATAELEMENT_TYPE = EM.COLUMN_NAME
/


GRANT SELECT ON R360_APPDATA.VW_R360_FIN_MNEMONICS_METADATA TO R360_APPDATA_READER
/


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\R360_NonPublicOpions\R360CFS_Release_Sep8th_2023\views\VW_R360_FIN_PERIODS_RANK.vw

SET DEFINE OFF;
/* Formatted on 8/29/2023 10:19:53 AM (QP5 v5.362) */
CREATE OR REPLACE FORCE VIEW R360_APPDATA.VW_R360_FIN_PERIODS_RANK
(
    RN,
    FIN_PERIOD_ID,
    FIN_ENTITY_ID,
    FISCAL_YEAR,
    PERIOD_TYPE_CD,
    PERIOD_TYPE_NAME,
    CORE_ID,
    FISCALYEAR,
    REPORTED_CURRENCY,
    PERIOD_END_DATE
)
BEQUEATH DEFINER
AS
    SELECT ROW_NUMBER ()
               OVER (PARTITION BY p.FIN_ENTITY_ID, p.PERIOD_TYPE_NAME
                     ORDER BY p.FISCAL_YEAR DESC, p.PERIOD_TYPE_CD DESC)
               RN,
           p.FIN_PERIOD_ID,
           p.FIN_ENTITY_ID,
           p.FISCAL_YEAR,
           p.PERIOD_TYPE_CD,
           p.PERIOD_TYPE_NAME,
           org.CORE_ID,
           CASE
               WHEN p.PERIOD_TYPE_CD = 'LTM'
               THEN
                   'LTM'
               ELSE
                      CAST (p.FISCAL_YEAR AS VARCHAR2 (4000))
                   || CASE
                          WHEN p.PERIOD_TYPE_NAME = 'Annual'
                          THEN
                              ' FY'
                          WHEN p.PERIOD_TYPE_NAME = 'Quarterly'
                          THEN
                              ' ' || p.PERIOD_TYPE_CD
                          ELSE
                              p.PERIOD_TYPE_CD
                      END
           END
               AS FiscalYear,
           p.REPORTED_CURRENCY,
           p.PERIOD_END_DATE
      FROM SPGIPRODUCT.FIN_ENTITY  org
           INNER JOIN SPGIPRODUCT.FIN_PERIOD p
               ON (ORG.FIN_ENTITY_ID = p.FIN_ENTITY_ID)
     WHERE p.active_flag = 'Y'
/


GRANT SELECT ON R360_APPDATA.VW_R360_FIN_PERIODS_RANK TO R360_APPDATA_READER
/


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\R360_NonPublicOpions\R360CFS_Release_Sep8th_2023\views\VW_R360_RECONCILIATION.vw

SET DEFINE OFF;
/* Formatted on 8/29/2023 10:19:56 AM (QP5 v5.362) */
CREATE OR REPLACE FORCE VIEW R360_APPDATA.VW_R360_RECONCILIATION
(
    CORE_ID,
    SP_ID,
    FIN_DATA_POINT_ID,
    FIN_PERIOD_ID,
    FIN_DATA_ELEMENT_ID,
    FIN_ENTITY_ID,
    DATA_POINT_VALUE,
    DATA_SOURCE,
    CONF_FLAG,
    DATA_ELEMENT_CD,
    DATA_ELEMENT_NAME,
    DATA_ELEMENT_DESC,
    CALCULATION_FORMULA,
    CALCULATED_MNEM_IND,
    FISCAL_YEAR,
    PERIOD_TYPE_CD,
    PERIOD_TYPE_NAME,
    PERIOD_END_DATE,
    PERIOD_STATE,
    REPORTED_CURRENCY,
    SCENARIO_NAME,
    DATA_SOURCE_SYSTEM,
    LAST_UPDATED_DATE,
    MAGNITUDE
)
BEQUEATH DEFINER
AS
    SELECT org.CORE_ID,
           org.SP_ID,
           dp.FIN_DATA_POINT_ID,
           per.FIN_PERIOD_ID,
           de.FIN_DATA_ELEMENT_ID,
           org.FIN_ENTITY_ID,
           dp.DATA_POINT_VALUE,
           dp.DATA_SOURCE,
           dp.CONF_FLAG,
           de.DATA_ELEMENT_CD,
           de.DATA_ELEMENT_NAME,
           de.DATA_ELEMENT_DESC,
           de.CALCULATION_FORMULA,
           de.CALCULATED_MNEM_IND,
           per.FISCAL_YEAR,
           per.PERIOD_TYPE_CD,
           per.PERIOD_TYPE_NAME,
           per.PERIOD_END_DATE,
           per.PERIOD_STATE,
           per.REPORTED_CURRENCY,
           --per.DATA_STATE_NAME,
           --per.DATA_STAGE_NAME,
           per.SCENARIO_NAME,
           per.DATA_SOURCE_SYSTEM,
           per.LAST_UPDATED_DATE,
           em.MAGNITUDE
      FROM SPGIPRODUCT.FIN_ENTITY  org
           JOIN SPGIPRODUCT.FIN_PERIOD per
               ON (ORG.FIN_ENTITY_ID = per.FIN_ENTITY_ID)
           JOIN SPGIPRODUCT.FIN_DATA_POINT dp
               ON (PER.FIN_PERIOD_ID = dp.FIN_PERIOD_ID)
           JOIN SPGIPRODUCT.FIN_DATA_ELEMENT de
               ON (DP.FIN_DATA_ELEMENT_ID = de.FIN_DATA_ELEMENT_ID)
           JOIN ELEMENT_MASTER EM ON DE.DATA_ELEMENT_CD = EM.ITEM_NAME
     WHERE     1 = 1
           AND de.r360_flag = 'Y'
           AND EM.COLUMN_NAME = 'Reconciliation'
           -- and de.EXTERNAL_DISTR_FLAG='Y'
           AND dp.CONF_FLAG = 'N'
--  and per.CONF_FLAG='N'
--  and per.EXTERNAL_DISTR_FLAG='Y'
--AND INSTR(DATA_ELEMENT_CD,'REC_',1) > 0
/


GRANT SELECT ON R360_APPDATA.VW_R360_RECONCILIATION TO R360_APPDATA_READER
/


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\R360_NonPublicOpions\R360CFS_Release_Sep8th_2023\views\VW_R360_RECONCILIATION_CUSTOM.vw

SET DEFINE OFF;
/* Formatted on 8/29/2023 10:19:59 AM (QP5 v5.362) */
CREATE OR REPLACE FORCE VIEW R360_APPDATA.VW_R360_RECONCILIATION_CUSTOM
(
    FILENAME_DATAPOINTNAME,
    DATA_POINT_VALUE,
    FILENAME_SECTIONNAME,
    FISCALYEAR,
    REPORTED_CURRENCY,
    DATEENDED,
    DATEBEGUN,
    FORMORDER,
    MAGNITUDEMULTIPLIER,
    CSDLASTUPDATE,
    RATINGREVIEWSTATUS,
    ID,
    CORE_ID,
    FIN_PERIOD_ID,
    FISCAL_YEAR,
    PERIOD_TYPE_CD,
    DATA_SOURCE_SYSTEM,
    FIN_DATA_POINT_ID,
    DATA_ELEMENT_CD,
    MAGNITUDE
)
BEQUEATH DEFINER
AS
    SELECT S.filename_DataPointName     AS filename_DataPointName,
           S.DATA_POINT_VALUE           AS DATA_POINT_VALUE,
           S.filename_SectionName       AS filename_SectionName,
           s.FiscalYear                 AS FiscalYear,
           s.REPORTED_CURRENCY,
           s.DateEnded                  AS DateEnded,
           s.DateBegun                  AS DateBegun,
           s.FormOrder                  AS FormOrder,
           s.MagnitudeMultiplier        AS MagnitudeMultiplier,
           s.CSDLastUpdate              AS CSDLastUpdate,
           s.RatingReviewStatus         AS RatingReviewStatus,
           s.Id                         AS Id,
           s.CORE_ID,
           s.FIN_PERIOD_ID,
           s.FISCAL_YEAR,
           s.PERIOD_TYPE_CD,
           s.DATA_SOURCE_SYSTEM,
           s.FIN_DATA_POINT_ID,
           s.DATA_ELEMENT_CD,
           s.MAGNITUDE
      FROM (SELECT s0.DATAELEMENT_DISPLAY_NAME      AS filename_DataPointName,
                   s0.DATA_POINT_VALUE              AS DATA_POINT_VALUE,
                   UPPER (s0.DATAELEMENT_GROUP)     AS filename_SectionName,
                   s0.FISCALYEAR                    AS FiscalYear,
                   UPPER (s0.REPORTED_CURRENCY)     AS REPORTED_CURRENCY,
                   s0.PERIOD_END_DATE               AS DateEnded,
                   s0.PERIOD_END_DATE               AS DateBegun,
                   FORM_ORDER                       AS FormOrder,
                   'Millions'                       AS MagnitudeMultiplier,
                   s0.LAST_UPDATED_DATE             AS CSDLastUpdate,
                   s0.PERIOD_TYPE_NAME              AS RatingReviewStatus,
                   s0.ID                            AS Id,
                   s0.CORE_ID,
                   s0.FIN_PERIOD_ID,
                   s0.FISCAL_YEAR,
                   s0.PERIOD_TYPE_CD,
                   s0.DATA_SOURCE_SYSTEM,
                   s0.FIN_DATA_POINT_ID,
                   s0.DATA_ELEMENT_CD,
                   S0.MAGNITUDE
              FROM (SELECT t1.DATAELEMENT_DISPLAY_NAME
                               AS DATAELEMENT_DISPLAY_NAME,
                           t0.DATA_POINT_VALUE
                               AS DATA_POINT_VALUE,
                           t2.FISCALYEAR
                               AS FISCALYEAR,
                           t0.PERIOD_END_DATE
                               AS PERIOD_END_DATE,
                           t0.LAST_UPDATED_DATE
                               AS LAST_UPDATED_DATE,
                           CASE
                               WHEN t0.PERIOD_STATE = 'FINAL' THEN 'Reviewed'
                               WHEN t0.PERIOD_STATE = 'WIP' THEN 'Basic'
                               ELSE t0.PERIOD_STATE
                           END
                               AS PERIOD_TYPE_NAME,
                           ROW_NUMBER ()
                               OVER (
                                   PARTITION BY t0.CORE_ID, FISCALYEAR
                                   ORDER BY
                                       t1.SORT_ORDER ASC, t2.FISCALYEAR DESC)
                               AS ID,
                           t1.DATAELEMENT_GROUP
                               AS DATAELEMENT_GROUP,
                           t0.REPORTED_CURRENCY
                               AS REPORTED_CURRENCY,
                           t1.SORT_ORDER
                               AS FORM_ORDER,
                           t0.CORE_ID,
                           t0.FIN_PERIOD_ID,
                           t0.FISCAL_YEAR,
                           t0.PERIOD_TYPE_CD,
                           t0.DATA_SOURCE_SYSTEM,
                           t0.FIN_DATA_POINT_ID,
                           t0.DATA_ELEMENT_CD,
                           t0.MAGNITUDE,
                           t1.HIDDEN_MNEM_FLAG
                      FROM R360_APPDATA.DATAELEMENT_UI_CONFIG  t1
                           LEFT JOIN R360_APPDATA.VW_R360_RECONCILIATION t0
                               ON t0.DATA_ELEMENT_CD = T1.DATAELEMENT_CODE
                           JOIN R360_APPDATA.VW_R360_FIN_PERIODS_RANK t2
                               ON     t0.FIN_PERIOD_ID = t2.FIN_PERIOD_ID
                                  AND t0.FIN_ENTITY_ID = t2.FIN_ENTITY_ID) s0
             WHERE    CASE
                          WHEN REGEXP_LIKE (s0.DATA_POINT_VALUE,
                                            '[[:digit:]]')
                          THEN
                              s0.DATA_POINT_VALUE
                          ELSE
                              NULL
                      END <>
                      0
                   OR (    s0.HIDDEN_MNEM_FLAG = 'Y'
                       AND CASE
                               WHEN REGEXP_LIKE (s0.DATA_POINT_VALUE,
                                                 '[[:digit:]]')
                               THEN
                                   s0.DATA_POINT_VALUE
                               ELSE
                                   NULL
                           END =
                           0)) s
/


GRANT SELECT ON R360_APPDATA.VW_R360_RECONCILIATION_CUSTOM TO R360_APPDATA_READER
/


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\R360_NonPublicOpions\R360CFS_Release_Sep8th_2023\views\VW_R360_RECON_FISCALQTRS.vw

SET DEFINE OFF;
/* Formatted on 8/29/2023 10:20:02 AM (QP5 v5.362) */
CREATE OR REPLACE FORCE VIEW R360_APPDATA.VW_R360_RECON_FISCALQTRS
(
    FILENAME_DATAPOINTNAME,
    DATA_POINT_VALUE,
    FILENAME_SECTIONNAME,
    FISCALYEAR,
    REPORTED_CURRENCY,
    DATEENDED,
    DATEBEGUN,
    FORMORDER,
    MAGNITUDEMULTIPLIER,
    CSDLASTUPDATE,
    RATINGREVIEWSTATUS,
    ID,
    CORE_ID,
    FIN_PERIOD_ID,
    FISCAL_YEAR,
    PERIOD_TYPE_CD,
    DATA_SOURCE_SYSTEM,
    FIN_DATA_POINT_ID,
    DATA_ELEMENT_CD,
    MAGNITUDE
)
BEQUEATH DEFINER
AS
    SELECT S.filename_DataPointName     AS filename_DataPointName,
           S.DATA_POINT_VALUE           AS DATA_POINT_VALUE,
           S.filename_SectionName       AS filename_SectionName,
           s.FiscalYear                 AS FiscalYear,
           s.REPORTED_CURRENCY,
           s.DateEnded                  AS DateEnded,
           s.DateBegun                  AS DateBegun,
           s.FormOrder                  AS FormOrder,
           s.MagnitudeMultiplier        AS MagnitudeMultiplier,
           s.CSDLastUpdate              AS CSDLastUpdate,
           s.RatingReviewStatus         AS RatingReviewStatus,
           s.Id                         AS Id,
           s.CORE_ID,
           s.FIN_PERIOD_ID,
           s.FISCAL_YEAR,
           s.PERIOD_TYPE_CD,
           s.DATA_SOURCE_SYSTEM,
           s.FIN_DATA_POINT_ID,
           s.DATA_ELEMENT_CD,
           s.MAGNITUDE
      FROM (SELECT s0.DATAELEMENT_DISPLAY_NAME      AS filename_DataPointName,
                   s0.DATA_POINT_VALUE              AS DATA_POINT_VALUE,
                   UPPER (s0.DATAELEMENT_GROUP)     AS filename_SectionName,
                   s0.FISCALYEAR                    AS FiscalYear,
                   UPPER (s0.REPORTED_CURRENCY)     AS REPORTED_CURRENCY,
                   s0.PERIOD_END_DATE               AS DateEnded,
                   s0.PERIOD_END_DATE               AS DateBegun,
                   s0.FORM_ORDER                    AS FormOrder,
                   'Millions'                       AS MagnitudeMultiplier,
                   s0.LAST_UPDATED_DATE             AS CSDLastUpdate,
                   s0.PERIOD_TYPE_NAME              AS RatingReviewStatus,
                   s0.ID                            AS Id,
                   s0.CORE_ID,
                   s0.FIN_PERIOD_ID,
                   s0.FISCAL_YEAR,
                   s0.PERIOD_TYPE_CD,
                   s0.DATA_SOURCE_SYSTEM,
                   s0.FIN_DATA_POINT_ID,
                   s0.DATA_ELEMENT_CD,
                   s0.MAGNITUDE
              FROM (SELECT t1.DATAELEMENT_DISPLAY_NAME
                               AS DATAELEMENT_DISPLAY_NAME,
                           t0.DATA_POINT_VALUE
                               AS DATA_POINT_VALUE,
                           t2.FISCALYEAR
                               AS FISCALYEAR,
                           t0.PERIOD_END_DATE
                               AS PERIOD_END_DATE,
                           t0.LAST_UPDATED_DATE
                               AS LAST_UPDATED_DATE,
                           CASE
                               WHEN t0.PERIOD_STATE = 'FINAL' THEN 'Reviewed'
                               WHEN t0.PERIOD_STATE = 'WIP' THEN 'Basic'
                               ELSE t0.PERIOD_STATE
                           END
                               AS PERIOD_TYPE_NAME,
                           ROW_NUMBER ()
                               OVER (
                                   PARTITION BY t0.CORE_ID, t2.FISCALYEAR
                                   ORDER BY
                                       t1.SORT_ORDER ASC, t2.FISCALYEAR DESC)
                               AS ID,
                           t1.DATAELEMENT_GROUP
                               AS DATAELEMENT_GROUP,
                           t0.REPORTED_CURRENCY
                               AS REPORTED_CURRENCY,
                           t1.SORT_ORDER
                               AS FORM_ORDER,
                           t0.CORE_ID,
                           t0.FIN_PERIOD_ID,
                           t0.FISCAL_YEAR,
                           t0.PERIOD_TYPE_CD,
                           t0.DATA_SOURCE_SYSTEM,
                           t0.FIN_DATA_POINT_ID,
                           t0.DATA_ELEMENT_CD,
                           t0.MAGNITUDE,
                           t1.HIDDEN_MNEM_FLAG
                      FROM R360_APPDATA.VW_R360_RECONCILIATION  t0
                           JOIN R360_APPDATA.DATAELEMENT_UI_CONFIG t1
                               ON t0.DATA_ELEMENT_CD = T1.DATAELEMENT_CODE
                           JOIN R360_APPDATA.VW_R360_FIN_PERIODS_RANK t2
                               ON     t0.FIN_PERIOD_ID = t2.FIN_PERIOD_ID
                                  AND t0.FIN_ENTITY_ID = t2.FIN_ENTITY_ID
                     WHERE     1 = 1
                           --AND t0.CORE_ID = 326452
                           AND t0.DATA_SOURCE_SYSTEM = 'AB'
                           AND t2.PERIOD_TYPE_NAME = 'Quarterly'
                           AND t2.RN <= 5) s0
             WHERE    CASE
                          WHEN REGEXP_LIKE (s0.DATA_POINT_VALUE,
                                            '[[:digit:]]')
                          THEN
                              s0.DATA_POINT_VALUE
                          ELSE
                              NULL
                      END <>
                      0
                   OR (    s0.HIDDEN_MNEM_FLAG = 'Y'
                       AND CASE
                               WHEN REGEXP_LIKE (s0.DATA_POINT_VALUE,
                                                 '[[:digit:]]')
                               THEN
                                   s0.DATA_POINT_VALUE
                               ELSE
                                   NULL
                           END =
                           0)) s
/


GRANT SELECT ON R360_APPDATA.VW_R360_RECON_FISCALQTRS TO R360_APPDATA_READER
/


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\R360_NonPublicOpions\R360CFS_Release_Sep8th_2023\views\VW_R360_RECON_FISCALYRS.vw

SET DEFINE OFF;
/* Formatted on 8/29/2023 10:20:05 AM (QP5 v5.362) */
CREATE OR REPLACE FORCE VIEW R360_APPDATA.VW_R360_RECON_FISCALYRS
(
    FILENAME_DATAPOINTNAME,
    DATA_POINT_VALUE,
    FILENAME_SECTIONNAME,
    FISCALYEAR,
    REPORTED_CURRENCY,
    DATEENDED,
    DATEBEGUN,
    FORMORDER,
    MAGNITUDEMULTIPLIER,
    CSDLASTUPDATE,
    RATINGREVIEWSTATUS,
    ID,
    CORE_ID,
    FIN_PERIOD_ID,
    FISCAL_YEAR,
    PERIOD_TYPE_CD,
    DATA_SOURCE_SYSTEM,
    FIN_DATA_POINT_ID,
    DATA_ELEMENT_CD,
    MAGNITUDE
)
BEQUEATH DEFINER
AS
    SELECT S.filename_DataPointName     AS filename_DataPointName,
           S.DATA_POINT_VALUE           AS DATA_POINT_VALUE,
           S.filename_SectionName       AS filename_SectionName,
           s.FiscalYear                 AS FiscalYear,
           s.REPORTED_CURRENCY,
           s.DateEnded                  AS DateEnded,
           s.DateBegun                  AS DateBegun,
           s.FormOrder                  AS FormOrder,
           s.MagnitudeMultiplier        AS MagnitudeMultiplier,
           s.CSDLastUpdate              AS CSDLastUpdate,
           s.RatingReviewStatus         AS RatingReviewStatus,
           s.Id                         AS Id,
           s.CORE_ID,
           s.FIN_PERIOD_ID,
           s.FISCAL_YEAR,
           s.PERIOD_TYPE_CD,
           s.DATA_SOURCE_SYSTEM,
           s.FIN_DATA_POINT_ID,
           s.DATA_ELEMENT_CD,
           s.MAGNITUDE
      FROM (SELECT s0.DATAELEMENT_DISPLAY_NAME      AS filename_DataPointName,
                   s0.DATA_POINT_VALUE              AS DATA_POINT_VALUE,
                   UPPER (s0.DATAELEMENT_GROUP)     AS filename_SectionName,
                   s0.FISCALYEAR                    AS FiscalYear,
                   UPPER (s0.REPORTED_CURRENCY)     AS REPORTED_CURRENCY,
                   s0.PERIOD_END_DATE               AS DateEnded,
                   s0.PERIOD_END_DATE               AS DateBegun,
                   FORM_ORDER                       AS FormOrder,
                   'Millions'                       AS MagnitudeMultiplier,
                   s0.LAST_UPDATED_DATE             AS CSDLastUpdate,
                   s0.PERIOD_TYPE_NAME              AS RatingReviewStatus,
                   s0.ID                            AS Id,
                   s0.CORE_ID,
                   s0.FIN_PERIOD_ID,
                   s0.FISCAL_YEAR,
                   s0.PERIOD_TYPE_CD,
                   s0.DATA_SOURCE_SYSTEM,
                   s0.FIN_DATA_POINT_ID,
                   s0.DATA_ELEMENT_CD,
                   s0.MAGNITUDE
              FROM (SELECT t1.DATAELEMENT_DISPLAY_NAME
                               AS DATAELEMENT_DISPLAY_NAME,
                           t0.DATA_POINT_VALUE
                               AS DATA_POINT_VALUE,
                           t2.FISCALYEAR
                               AS FISCALYEAR,
                           t0.PERIOD_END_DATE
                               AS PERIOD_END_DATE,
                           t0.LAST_UPDATED_DATE
                               AS LAST_UPDATED_DATE,
                           CASE
                               WHEN t0.PERIOD_STATE = 'FINAL' THEN 'Reviewed'
                               WHEN t0.PERIOD_STATE = 'WIP' THEN 'Basic'
                               ELSE t0.PERIOD_STATE
                           END
                               AS PERIOD_TYPE_NAME,
                           ROW_NUMBER ()
                               OVER (
                                   PARTITION BY t0.CORE_ID, FISCALYEAR
                                   ORDER BY
                                       t1.SORT_ORDER ASC, t2.FISCALYEAR DESC)
                               AS ID,
                           t1.DATAELEMENT_GROUP
                               AS DATAELEMENT_GROUP,
                           t0.REPORTED_CURRENCY
                               AS REPORTED_CURRENCY,
                           t1.SORT_ORDER
                               AS FORM_ORDER,
                           t0.CORE_ID,
                           t0.FIN_PERIOD_ID,
                           t0.FISCAL_YEAR,
                           t0.PERIOD_TYPE_CD,
                           t0.DATA_SOURCE_SYSTEM,
                           t0.FIN_DATA_POINT_ID,
                           t0.DATA_ELEMENT_CD,
                           T1.HIDDEN_MNEM_FLAG,
                           T0.MAGNITUDE
                      FROM R360_APPDATA.VW_R360_RECONCILIATION  t0
                           JOIN R360_APPDATA.DATAELEMENT_UI_CONFIG t1
                               ON t0.DATA_ELEMENT_CD = T1.DATAELEMENT_CODE
                           JOIN R360_APPDATA.VW_R360_FIN_PERIODS_RANK t2
                               ON     t0.FIN_PERIOD_ID = t2.FIN_PERIOD_ID
                                  AND t0.FIN_ENTITY_ID = t2.FIN_ENTITY_ID
                     WHERE 1 = 1                     --AND t0.CORE_ID = 101203
                                 --AND t0.DATA_SOURCE_SYSTEM = 'AB'
                                 AND t2.PERIOD_TYPE_CD = 'A' AND t2.RN <= 5)
                   s0
             WHERE    CASE
                          WHEN REGEXP_LIKE (s0.DATA_POINT_VALUE,
                                            '[[:digit:]]')
                          THEN
                              s0.DATA_POINT_VALUE
                          ELSE
                              NULL
                      END <>
                      0
                   OR (    s0.HIDDEN_MNEM_FLAG = 'Y'
                       AND CASE
                               WHEN REGEXP_LIKE (s0.DATA_POINT_VALUE,
                                                 '[[:digit:]]')
                               THEN
                                   s0.DATA_POINT_VALUE
                               ELSE
                                   NULL
                           END =
                           0)) s
/


GRANT SELECT ON R360_APPDATA.VW_R360_RECON_FISCALYRS TO R360_APPDATA_READER
/


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\R360_NonPublicOpions\R360CFS_Release_Sep8th_2023\views\VW_RATING_ARTICLES.vw

SET DEFINE OFF;
/* Formatted on 8/29/2023 10:20:08 AM (QP5 v5.362) */
CREATE OR REPLACE FORCE VIEW R360_APPDATA.VW_RATING_ARTICLES
(
    ENTITY_ID,
    ARTICLE_ID,
    TITLE,
    ARTICLE_TYPE,
    ARTICLE_DATE,
    AUTHOR,
    ARTICLE_TYPE_ID
)
BEQUEATH DEFINER
AS
      SELECT ear.entity_id,
             ao.article_id,
             REPLACE (REPLACE (ao.preferred_title, '<br>', ' '), '<BR>', ' ')
                 AS title,
             ct.crarticle_type
                 AS article_type,
             ao.article_date,
             CASE
                 WHEN (   emp.employee_name IS NULL
                       OR emp.employee_name = 'Standard & Poor''s')
                 THEN
                     'S&P Global Ratings'
                 WHEN emp.mi IS NULL
                 THEN
                     emp.first_name || ' ' || emp.last_name_from_source
                 ELSE
                        emp.first_name
                     || ' '
                     || emp.mi
                     || ' '
                     || emp.last_name_from_source
             END
                 AS author,
             ct.crarticle_type_id
                 AS article_type_id
        FROM r360_appdata.vw_entity_active_rating ear
             JOIN fgr.article_relationships ar ON ear.entity_id = ar.relate_id
             JOIN fgr.article_objects ao ON ar.article_id = ao.article_id
             JOIN r360_appdata.crarticle_type_map ctm
                 ON     ao.article_type = ctm.source_article_type
                    AND COALESCE (ao.article_sub_type, 'N') =
                        COALESCE (ctm.source_article_sub_type, 'N')
                    AND ctm.actv_flag = 'Y'
             JOIN r360_appdata.crarticle_types ct
                 ON     ctm.crarticle_type_id = ct.crarticle_type_id
                    AND ct.actv_flag = 'Y'
             JOIN fgr.article_users au ON ao.article_id = au.article_id
             LEFT JOIN spapp.employees emp
                 ON au.user_id = emp.employee_id AND emp.active_ind = 'Y'
       WHERE     ear.active_rating_ind = 'Y'
             AND ear.primary_sector_code = 'GLOBISS'
             AND ar.relate_ind = 'E'
             AND ar.ack_status IN ('D', 'Y')
             AND ar.ciq_rep_ind = 1
             AND au.user_role = 'AUTHOR'
             AND au.ack_status IN ('D', 'Y')
             AND au.ciq_rep_ind = 1
             AND ao.fgr_status = 'A'
             AND ao.ack_status IN ('D', 'Y')
             AND ao.ciq_rep_ind = 1
             AND ao.article_date >= TO_DATE ('01/01/2000', 'MM/dd/yyyy')
             AND ct.crarticle_type_id IN (1,
                                          3,
                                          7,
                                          10,
                                          11,
                                          13,
                                          14,
                                          15)
    ORDER BY ao.article_date DESC
/


GRANT SELECT ON R360_APPDATA.VW_RATING_ARTICLES TO R360_APPDATA_READER
/


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\R360_NonPublicOpions\R360CFS_Release_Sep8th_2023\views\VW_RATING_ARTICLES_CN.vw

SET DEFINE OFF;
/* Formatted on 8/29/2023 10:20:11 AM (QP5 v5.362) */
CREATE OR REPLACE FORCE VIEW R360_APPDATA.VW_RATING_ARTICLES_CN
(
    ENTITY_ID,
    ARTICLE_ID,
    TITLE,
    ARTICLE_TYPE,
    ARTICLE_DATE,
    AUTHOR,
    ARTICLE_TYPE_ID
)
BEQUEATH DEFINER
AS
    WITH
        hkg_mac_twn_articles
        AS
            (SELECT ar.article_id
               FROM fgr.article_relationships  ar
                    JOIN fgr.entities e
                        ON     e.entity_id = ar.relate_id
                           AND e.country_code IN ('HKG', 'MAC', 'TWN')
                           AND ar.relate_ind = 'E'
                           AND ar.ack_status IN ('D', 'Y')
                           AND ar.ciq_rep_ind = 1)
    SELECT entity_id,
           article_id,
           title,
           article_type,
           article_date,
           author,
           article_type_id
      FROM r360_appdata.vw_rating_articles
     WHERE article_id NOT IN (SELECT article_id FROM hkg_mac_twn_articles)
/


GRANT SELECT ON R360_APPDATA.VW_RATING_ARTICLES_CN TO R360_APPDATA_READER
/


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\R360_NonPublicOpions\R360CFS_Release_Sep8th_2023\views\VW_RATING_CRITERIA_ARTICLES.vw

SET DEFINE OFF;
/* Formatted on 8/29/2023 10:20:14 AM (QP5 v5.362) */
CREATE OR REPLACE FORCE VIEW R360_APPDATA.VW_RATING_CRITERIA_ARTICLES
(
    RATING_DETAIL_ID,
    SOURCE_RATING_ID,
    PCR_REGION,
    CRITERIA_ARTICLE_ID,
    ARTICLE_DATE,
    PREFERRED_TITLE,
    LAST_NAME,
    FIRST_NAME,
    FULL_NAME
)
BEQUEATH DEFINER
AS
      SELECT rd.rating_detail_id     AS rating_detail_id,
             rd.source_rating_id     AS source_rating_id,
             am.metadata_value       AS pcr_region,
             ao2.article_id          AS criteria_article_id,
             ao2.article_date        AS article_date,
             ao2.preferred_title     AS preferred_title,
             emp.last_name           AS last_name,
             emp.first_name          AS first_name,
             emp.employee_name       AS full_name
        FROM fgr_prime.rating_details rd,
             fgr.article_relationships ar,
             fgr.article_hyperlinks   ah,
             fgr.article_objects      ao,
             fgr.article_metadata     am,
             fgr.article_objects      ao2,
             fgr.article_users        au,
             spapp.employees          emp
       WHERE     rd.source_rating_id = ar.relate_id
             AND ar.article_id = ah.article_id
             AND ar.article_id = ao.article_id
             AND ao.article_id = am.article_id
             AND ah.hlink_source_id = ao2.source_object_id
             AND ao2.article_id = au.article_id
             AND au.user_id = emp.employee_id(+)
             AND RD.ACK_STATUS = 'Y'
             AND RD.CIQ_REP_IND = 1
             AND AR.RELATE_IND = 'Q'
             AND AR.STATUS_IND = 'A'
             AND AR.ACK_STATUS IN ('D', 'Y')
             AND AR.CIQ_REP_IND = 1
             AND AH.STATUS_IND = 'A'
             AND AH.ACK_STATUS IN ('Y', 'D')
             AND AH.CIQ_REP_IND = 1
             AND AO.STATUS_IND = 'A'
             AND AO.ACK_STATUS IN ('D', 'Y')
             AND AO.CIQ_REP_IND = 1
             AND AM.METADATA_NAME = 'PCR'
             AND AM.METADATA_TYPE = 'REGION'
             AND AM.STATUS_IND = 'A'
             AND AM.ACK_STATUS IN ('Y', 'D')
             AND AM.CIQ_REP_IND = 1
             AND AO2.STATUS_IND = 'A'
             AND UPPER (AO2.PREFERRED_TITLE) NOT LIKE '%CREDIT RATING MODEL:%'
             AND AO2.ACK_STATUS IN ('D', 'Y')
             AND AO2.CIQ_REP_IND = 1
             AND AU.USER_ROLE = 'AUTHOR'
             AND AU.ACK_STATUS IN ('Y', 'D')
             AND AU.CIQ_REP_IND = 1
    ORDER BY AO2.ARTICLE_DATE DESC
/


GRANT SELECT ON R360_APPDATA.VW_RATING_CRITERIA_ARTICLES TO R360_APPDATA_READER
/


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\R360_NonPublicOpions\R360CFS_Release_Sep8th_2023\views\VW_RATING_CRITERIA_ARTICLES_PUBLIC.vw

SET DEFINE OFF;
/* Formatted on 8/29/2023 10:20:17 AM (QP5 v5.362) */
CREATE OR REPLACE FORCE VIEW R360_APPDATA.VW_RATING_CRITERIA_ARTICLES_PUBLIC
(
    RATING_DETAIL_ID,
    SOURCE_RATING_ID,
    PCR_REGION,
    CRITERIA_ARTICLE_ID,
    ARTICLE_DATE,
    PREFERRED_TITLE,
    LAST_NAME,
    FIRST_NAME,
    FULL_NAME
)
BEQUEATH DEFINER
AS
      SELECT rd.rating_detail_id     AS rating_detail_id,
             rd.source_rating_id     AS source_rating_id,
             am.metadata_value       AS pcr_region,
             ao2.article_id          AS criteria_article_id,
             ao2.article_date        AS article_date,
             ao2.preferred_title     AS preferred_title,
             emp.last_name           AS last_name,
             emp.first_name          AS first_name,
             emp.employee_name       AS full_name
        FROM fgr_prime.rating_details rd,
             fgr.article_relationships ar,
             fgr.article_hyperlinks   ah,
             fgr.article_objects      ao,
             fgr.article_metadata     am,
             fgr.article_objects      ao2,
             fgr.article_users        au,
             spapp.employees          emp
       WHERE     rd.source_rating_id = ar.relate_id
             AND ar.article_id = ah.article_id
             AND ar.article_id = ao.article_id
             AND ao.article_id = am.article_id
             AND ah.hlink_source_id = ao2.source_object_id
             AND ao2.article_id = au.article_id
             AND au.user_id = emp.employee_id(+)
             AND RD.ACK_STATUS = 'Y'
             AND RD.CIQ_REP_IND = 1
             AND AR.RELATE_IND = 'Q'
             AND AR.STATUS_IND = 'A'
             AND AR.ACK_STATUS IN ('D', 'Y')
             AND AR.CIQ_REP_IND = 1
             AND AH.STATUS_IND = 'A'
             AND AH.ACK_STATUS IN ('Y', 'D')
             AND AH.CIQ_REP_IND = 1
             AND AO.STATUS_IND = 'A'
             AND AO.ACK_STATUS IN ('D', 'Y')
             AND AO.CIQ_REP_IND = 1
             AND AM.METADATA_NAME = 'PCR'
             AND AM.METADATA_TYPE = 'REGION'
             AND AM.STATUS_IND = 'A'
             AND AM.ACK_STATUS IN ('Y', 'D')
             AND AM.CIQ_REP_IND = 1
             AND AO2.STATUS_IND = 'A'
             AND UPPER (AO2.PREFERRED_TITLE) NOT LIKE '%CREDIT RATING MODEL:%'
             AND AO2.ACK_STATUS IN ('D', 'Y')
             AND AO2.CIQ_REP_IND = 1
             AND AU.USER_ROLE = 'AUTHOR'
             AND AU.ACK_STATUS IN ('Y', 'D')
             AND AU.CIQ_REP_IND = 1
    ORDER BY AO2.ARTICLE_DATE DESC
/


GRANT SELECT ON R360_APPDATA.VW_RATING_CRITERIA_ARTICLES_PUBLIC TO R360_APPDATA_READER
/


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\R360_NonPublicOpions\R360CFS_Release_Sep8th_2023\views\VW_RATING_CRITERIA_ARTICLES_PVT.vw

SET DEFINE OFF;
/* Formatted on 8/29/2023 10:20:20 AM (QP5 v5.362) */
CREATE OR REPLACE FORCE VIEW R360_APPDATA.VW_RATING_CRITERIA_ARTICLES_PVT
(
    RATING_DETAIL_ID,
    SOURCE_RATING_ID,
    PCR_REGION,
    CRITERIA_ARTICLE_ID,
    ARTICLE_DATE,
    PREFERRED_TITLE,
    LAST_NAME,
    FIRST_NAME,
    FULL_NAME,
    SOURCE_OBJECT_ID
)
BEQUEATH DEFINER
AS
      SELECT ''                      AS RATING_DETAIL_ID,
             ''                      AS SOURCE_RATING_ID,
             ''                      AS PCR_REGION,
             AO.ARTICLE_ID           AS CRITERIA_ARTICLE_ID,
             AO.ARTICLE_DATE         AS ARTICLE_DATE,
             AO.PREFERRED_TITLE      AS PREFERRED_TITLE,
             EMP.LAST_NAME           AS LAST_NAME,
             EMP.FIRST_NAME          AS FIRST_NAME,
             EMP.EMPLOYEE_NAME       AS FULL_NAME,
             AO.SOURCE_OBJECT_ID     AS SOURCE_OBJECT_ID
        FROM FGR.ARTICLE_OBJECTS AO, FGR.ARTICLE_USERS AU, SPAPP.EMPLOYEES EMP
       WHERE     AO.FGR_STATUS = 'A'
             AND AO.ARTICLE_ID = AU.ARTICLE_ID
             AND AU.USER_ID = EMP.EMPLOYEE_ID(+)
             AND AU.USER_ROLE = 'AUTHOR'
             AND AU.ACK_STATUS IN ('Y', 'D')
             AND AU.CIQ_REP_IND = 1
    ORDER BY AO.ARTICLE_DATE DESC
/


GRANT SELECT ON R360_APPDATA.VW_RATING_CRITERIA_ARTICLES_PVT TO R360_APPDATA_READER
/


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\R360_NonPublicOpions\R360CFS_Release_Sep8th_2023\views\VW_RATING_DETAILS_CURRENT.vw

SET DEFINE OFF;
/* Formatted on 8/29/2023 10:20:23 AM (QP5 v5.362) */
CREATE OR REPLACE FORCE VIEW R360_APPDATA.VW_RATING_DETAILS_CURRENT
(
    RATING_DETAIL_ID,
    RATING_ID,
    DEBT_TYPE_CODE,
    DEBT_TYPE_DESC,
    RATING_TYPE_CODE,
    RATING_TYPE_DESC,
    RATING_DATE,
    RATING_IND,
    DATA_ADMIN_DATE,
    CURR_IND,
    SOURCE_RATING_ID,
    SOURCE_RATING_IND,
    REGULATORY_INDICATOR,
    SRD_CURR_IND,
    RATING_ACTION_WORD,
    RATING_ACTION_TYPE,
    CURRENT_RATING_SYMBOL,
    CURRENT_CW_OL_DATE,
    CURRENT_CW_OL,
    CURRENT_CW_OL_ACTION_WORD,
    NON_AFFIRM_RATING_ID,
    UPD_DATE,
    REASON_TYPE_CODE,
    ANALYST_CODE,
    SOURCE_SYSTEM,
    REGULATORY_QUALIFIER,
    WORK_OBJECT_ID,
    CURRENT_CW_VALUE,
    CURRENT_OL_VALUE,
    CURRENT_CW_DATE,
    CURRENT_OL_DATE,
    RATING_END_DATE,
    RATING_NON_AFFIRM_END_DATE,
    PRIOR_RATING_CODE,
    CURRENT_CW_IND,
    CURRENT_OL_IND,
    DEBT_TYPE_SORT_ORDER,
    LONG_SHORT_IND,
    SORT_ORDER,
    PRECEDENCE_NUM,
    LAST_REVIEW_DATE
)
BEQUEATH DEFINER
AS
    SELECT rating_details.rating_detail_id
               AS rating_detail_id,
           rating_details.rating_id
               AS rating_id,
           rating_details.debt_type_code
               AS debt_type_code,
           debt_type_codes.description
               AS debt_type_desc,
           rating_details.rating_type_code
               AS rating_type_code,
           rating_type_codes.description
               AS rating_type_desc,
           rating_details.rating_date
               AS rating_date,
           rating_details.rating_ind
               AS rating_ind,
           rating_details.data_admin_date
               AS data_admin_date,
           rating_details.curr_ind
               AS curr_ind,
           rating_details.source_rating_id
               AS source_rating_id,
           rating_details.source_rating_ind
               AS source_rating_ind,
           rating_details.regulatory_indicator
               AS regulatory_indicator,
           rating_details.srd_curr_ind
               AS srd_curr_ind,
           rating_details.rating_action_word
               AS rating_action_word,
           rating_details.rating_action_type
               AS rating_action_type,
           rating_details.current_rating_symbol
               AS current_rating_symbol,
           rating_details.current_cw_ol_date
               AS current_cw_ol_date,
           rating_details.current_cw_ol
               AS current_cw_ol,
           rating_details.current_cw_ol_action_word
               AS current_cw_ol_action_word,
           rating_details.non_affirm_rating_id
               AS non_affirm_rating_id,
           debt_type_codes.upd_date
               AS upd_date,
           rating_details.reason_type_code
               AS reason_type_code,
           rating_details.analyst_code
               AS analyst_code,
           rating_details.source_system
               AS source_system,
           rating_details.regulatory_qualifier
               AS regulatory_qualifier,
           rating_details.work_object_id
               AS work_object_id,
           rating_details.current_cw_value
               AS current_cw_value,
           rating_details.current_ol_value
               AS current_ol_value,
           rating_details.current_cw_date
               AS current_cw_date,
           rating_details.current_ol_date
               AS current_ol_date,
           rating_details.rating_end_date
               AS rating_end_date,
           rating_details.rating_non_affirm_end_date
               AS rating_non_affirm_end_date,
           rating_details.prior_rating_code
               AS prior_rating_code,
           rating_details.current_cw_ind
               AS current_cw_ind,
           rating_details.current_ol_ind
               AS current_ol_ind,
           debt_type_codes.sort_order
               AS debt_type_sort_order,
           rating_type_codes.long_short_ind
               AS long_short_ind,
           rating_type_codes.sort_order
               AS sort_order,
           rating_type_codes.precedence_num
               AS precedence_num,
           v_review_history_lrd.last_review_date
               AS last_review_date
      FROM FGR_PRIME.RATING_DETAILS  rating_details
           LEFT OUTER JOIN
           R360_APPDATA.VW_REVIEW_HISTORY_LRD v_review_history_lrd
               ON rating_details.rating_detail_id =
                  v_review_history_lrd.rating_detail_id
           INNER JOIN SPAPP.DEBT_TYPE_CODES debt_type_codes
               ON rating_details.debt_type_code =
                  debt_type_codes.debt_type_code
           INNER JOIN R360_APPDATA.VW_RATING_TYPE_CODES rating_type_codes
               ON rating_details.rating_type_code =
                  rating_type_codes.rating_type_code
     WHERE     rating_details.SRD_CURR_IND = 'Y'
           AND rating_details.ACK_STATUS = 'Y'
           AND rating_details.CIQ_REP_IND = 1
           AND debt_type_codes.active_ind = 'Y'
/


GRANT SELECT ON R360_APPDATA.VW_RATING_DETAILS_CURRENT TO R360_APPDATA_READER
/


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\R360_NonPublicOpions\R360CFS_Release_Sep8th_2023\views\VW_RATING_DETAILS_ICR.vw

SET DEFINE OFF;
/* Formatted on 8/29/2023 10:20:27 AM (QP5 v5.362) */
CREATE OR REPLACE FORCE VIEW R360_APPDATA.VW_RATING_DETAILS_ICR
(
    RATING_DETAIL_ID,
    ENTITY_ID,
    DEBT_TYPE_CODE,
    DEBT_TYPE_DESC,
    RATING_TYPE_CODE,
    RATING_TYPE_DESC,
    CURRENT_RATING_SYMBOL,
    RATING_DATE,
    LAST_REVIEW_DATE,
    REGULATORY_INDICATOR,
    ACTION,
    LATEST_NON_AFFIRM_CW_OL,
    LATEST_NON_AFFIRM_CW_OL_DATE,
    DATA_ADMIN_DATE,
    SRD_CURR_IND,
    RATING_ACTION_WORD,
    RATING_ACTION_TYPE,
    CURRENT_CW_OL_DATE,
    CURRENT_CW_OL,
    CURRENT_CW_OL_ACTION_WORD,
    LONG_SHORT_IND,
    RATING_ID,
    DEBT_TYPE_SORT_ORDER,
    RATING_TYPE_SORT_ORDER
)
BEQUEATH DEFINER
AS
    SELECT v_rating_details_current.rating_detail_id
               AS rating_detail_id,
           v_rating_details_current.rating_id
               AS entity_id,
           v_rating_details_current.debt_type_code
               AS debt_type_code,
           v_rating_details_current.debt_type_desc
               AS debt_type_desc,
           v_rating_details_current.rating_type_code
               AS rating_type_code,
           v_rating_details_current.rating_type_desc
               AS rating_type_desc,
           v_rating_details_current.current_rating_symbol
               AS current_rating_symbol,
           v_rating_details_current.rating_date
               AS rating_date,
           v_rating_details_current.last_review_date
               AS last_review_date,
           v_rating_details_current.regulatory_indicator
               AS regulatory_indicator,
           CASE
               WHEN ((    rating_details.rating_action_word <> 'Affirmed'
                      AND rating_details.current_cw_ol_action_word
                              IS NOT NULL))
               THEN
                   (   (rating_details.rating_action_word || ' | ')
                    || rating_details.current_cw_ol_action_word)
               WHEN ((    rating_details.rating_action_word = 'Affirmed'
                      AND rating_details.current_cw_ol_action_word
                              IS NOT NULL))
               THEN
                   rating_details.current_cw_ol_action_word
               WHEN (rating_details.rating_action_word IS NULL)
               THEN
                   rating_details.current_cw_ol_action_word
               WHEN ((    rating_details.rating_action_word <> 'Affirmed'
                      AND rating_details.current_cw_ol_action_word IS NULL))
               THEN
                   rating_details.rating_action_word
           END
               AS action,
           rating_details.current_cw_ol
               AS latest_non_affirm_cw_ol,
           rating_details.current_cw_ol_date
               AS latest_non_affirm_cw_ol_date,
           v_rating_details_current.data_admin_date
               AS data_admin_date,
           v_rating_details_current.srd_curr_ind
               AS srd_curr_ind,
           v_rating_details_current.rating_action_word
               AS rating_action_word,
           v_rating_details_current.rating_action_type
               AS rating_action_type,
           v_rating_details_current.current_cw_ol_date
               AS current_cw_ol_date,
           v_rating_details_current.current_cw_ol
               AS current_cw_ol,
           v_rating_details_current.current_cw_ol_action_word
               AS current_cw_ol_action_word,
           v_rating_details_current.long_short_ind
               AS long_short_ind,
           v_rating_details_current.rating_id
               AS rating_id,
           v_rating_details_current.debt_type_sort_order
               AS debt_type_sort_order,
           v_rating_details_current.sort_order
               AS rating_type_sort_order
      FROM R360_APPDATA.vw_rating_details_current  v_rating_details_current
           INNER JOIN FGR_PRIME.RATING_DETAILS rating_details
               ON v_rating_details_current.non_affirm_rating_id =
                  rating_details.source_rating_id
     WHERE     v_rating_details_current.debt_type_code = 'ICR'
           AND v_rating_details_current.source_rating_ind = 'O'
           AND rating_details.debt_type_code = 'ICR'
           AND rating_details.source_rating_ind = 'O'
/


GRANT SELECT ON R360_APPDATA.VW_RATING_DETAILS_ICR TO R360_APPDATA_READER
/


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\R360_NonPublicOpions\R360CFS_Release_Sep8th_2023\views\VW_RATING_DETAILS_ICR_NON_ICR.vw

SET DEFINE OFF;
/* Formatted on 8/29/2023 10:20:30 AM (QP5 v5.362) */
CREATE OR REPLACE FORCE VIEW R360_APPDATA.VW_RATING_DETAILS_ICR_NON_ICR
(
    ENTITY_ID,
    DEBT_TYPE_CODE,
    DEBT_TYPE_DESC,
    RATING_TYPE_CODE,
    RATING_TYPE_DESC,
    CURRENT_RATING_SYMBOL,
    RATING_DATE,
    LAST_REVIEW_DATE,
    REGULATORY_INDICATOR,
    ACTION,
    LATEST_NON_AFFIRM_CW_OL,
    LATEST_NON_AFFIRM_CW_OL_DATE,
    SRD_CURR_IND,
    RATING_DETAIL_ID,
    DATA_ADMIN_DATE,
    RATING_ACTION_WORD,
    RATING_ACTION_TYPE,
    DEBT_TYPE_SORT_ORDER,
    LONG_SHORT_IND,
    RATING_TYPE_SORT_ORDER,
    RATING_ID
)
BEQUEATH DEFINER
AS
    SELECT entity_id                        AS entity_id,
           debt_type_code                   AS debt_type_code,
           debt_type_desc                   AS debt_type_desc,
           rating_type_code                 AS rating_type_code,
           rating_type_desc                 AS rating_type_desc,
           current_rating_symbol            AS current_rating_symbol,
           rating_date                      AS rating_date,
           last_review_date                 AS last_review_date,
           regulatory_indicator             AS regulatory_indicator,
           action                           AS action,
           latest_non_affirm_cw_ol          AS latest_non_affirm_cw_ol,
           latest_non_affirm_cw_ol_date     AS latest_non_affirm_cw_ol_date,
           srd_curr_ind                     AS srd_curr_ind,
           rating_detail_id                 AS rating_detail_id,
           data_admin_date                  AS data_admin_date,
           rating_action_word               AS rating_action_word,
           rating_action_type               AS rating_action_type,
           debt_type_sort_order             AS debt_type_sort_order,
           long_short_ind                   AS long_short_ind,
           rating_type_sort_order           AS rating_type_sort_order,
           rating_id                        AS rating_id
      FROM (SELECT rating_detail_id,
                   entity_id,
                   debt_type_code,
                   debt_type_desc,
                   rating_type_code,
                   rating_type_desc,
                   current_rating_symbol,
                   rating_date,
                   last_review_date,
                   regulatory_indicator,
                   action,
                   latest_non_affirm_cw_ol,
                   latest_non_affirm_cw_ol_date,
                   data_admin_date,
                   srd_curr_ind,
                   rating_action_word,
                   rating_action_type,
                   current_cw_ol_date,
                   current_cw_ol,
                   current_cw_ol_action_word,
                   long_short_ind,
                   rating_type_sort_order,
                   rating_id,
                   debt_type_sort_order
              FROM R360_APPDATA.vw_rating_details_icr
            UNION ALL
            SELECT rating_detail_id,
                   entity_id,
                   debt_type_code,
                   debt_type_desc,
                   rating_type_code,
                   rating_type_desc,
                   current_rating_symbol,
                   rating_date,
                   last_review_date,
                   regulatory_indicator,
                   action,
                   latest_non_affirm_cw_ol,
                   latest_non_affirm_cw_ol_date,
                   data_admin_date,
                   srd_curr_ind,
                   rating_action_word,
                   rating_action_type,
                   current_cw_ol_date,
                   current_cw_ol,
                   current_cw_ol_action_word,
                   long_short_ind,
                   rating_type_sort_order,
                   rating_id,
                   debt_type_sort_order
              FROM R360_APPDATA.vw_rating_details_non_icr)
/


GRANT SELECT ON R360_APPDATA.VW_RATING_DETAILS_ICR_NON_ICR TO R360_APPDATA_READER
/


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\R360_NonPublicOpions\R360CFS_Release_Sep8th_2023\views\VW_RATING_DETAILS_NON_ICR.vw

SET DEFINE OFF;
/* Formatted on 8/29/2023 10:20:33 AM (QP5 v5.362) */
CREATE OR REPLACE FORCE VIEW R360_APPDATA.VW_RATING_DETAILS_NON_ICR
(
    RATING_DETAIL_ID,
    ENTITY_ID,
    DEBT_TYPE_CODE,
    DEBT_TYPE_DESC,
    RATING_TYPE_CODE,
    RATING_TYPE_DESC,
    CURRENT_RATING_SYMBOL,
    RATING_DATE,
    LAST_REVIEW_DATE,
    REGULATORY_INDICATOR,
    ACTION,
    LATEST_NON_AFFIRM_CW_OL,
    LATEST_NON_AFFIRM_CW_OL_DATE,
    DATA_ADMIN_DATE,
    SRD_CURR_IND,
    RATING_ACTION_WORD,
    RATING_ACTION_TYPE,
    CURRENT_CW_OL_DATE,
    CURRENT_CW_OL,
    CURRENT_CW_OL_ACTION_WORD,
    LONG_SHORT_IND,
    RATING_ID,
    DEBT_TYPE_SORT_ORDER,
    RATING_TYPE_SORT_ORDER
)
BEQUEATH DEFINER
AS
    SELECT v_rating_details_current.rating_detail_id
               AS rating_detail_id,
           entity_instruments.entity_id
               AS entity_id,
           v_rating_details_current.debt_type_code
               AS debt_type_code,
           v_rating_details_current.debt_type_desc
               AS debt_type_desc,
           v_rating_details_current.rating_type_code
               AS rating_type_code,
           v_rating_details_current.rating_type_desc
               AS rating_type_desc,
           v_rating_details_current.current_rating_symbol
               AS current_rating_symbol,
           v_rating_details_current.rating_date
               AS rating_date,
           v_rating_details_current.last_review_date
               AS last_review_date,
           v_rating_details_current.regulatory_indicator
               AS regulatory_indicator,
           CASE
               WHEN ((    rating_details.rating_action_word <> 'Affirmed'
                      AND rating_details.current_cw_ol_action_word
                              IS NOT NULL))
               THEN
                   (   (rating_details.rating_action_word || ' | ')
                    || rating_details.current_cw_ol_action_word)
               WHEN ((    rating_details.rating_action_word = 'Affirmed'
                      AND rating_details.current_cw_ol_action_word
                              IS NOT NULL))
               THEN
                   rating_details.current_cw_ol_action_word
               WHEN (rating_details.rating_action_word IS NULL)
               THEN
                   rating_details.current_cw_ol_action_word
               WHEN ((    rating_details.rating_action_word <> 'Affirmed'
                      AND rating_details.current_cw_ol_action_word IS NULL))
               THEN
                   rating_details.rating_action_word
           END
               AS action,
           rating_details.current_cw_ol
               AS latest_non_affirm_cw_ol,
           rating_details.current_cw_ol_date
               AS latest_non_affirm_cw_ol_date,
           v_rating_details_current.data_admin_date
               AS data_admin_date,
           v_rating_details_current.srd_curr_ind
               AS srd_curr_ind,
           v_rating_details_current.rating_action_word
               AS rating_action_word,
           v_rating_details_current.rating_action_type
               AS rating_action_type,
           v_rating_details_current.current_cw_ol_date
               AS current_cw_ol_date,
           v_rating_details_current.current_cw_ol
               AS current_cw_ol,
           v_rating_details_current.current_cw_ol_action_word
               AS current_cw_ol_action_word,
           v_rating_details_current.long_short_ind
               AS long_short_ind,
           v_rating_details_current.rating_id
               AS rating_id,
           v_rating_details_current.debt_type_sort_order
               AS debt_type_sort_order,
           v_rating_details_current.sort_order
               AS rating_type_sort_order
      FROM R360_APPDATA.VW_ENTITY_INSTRUMENTS_PARTICIPANTS entity_instruments
           JOIN
           R360_APPDATA.vw_rating_details_current v_rating_details_current
               ON entity_instruments.instrument_id =
                  v_rating_details_current.rating_id
           JOIN FGR_PRIME.RATING_DETAILS rating_details
               ON v_rating_details_current.non_affirm_rating_id =
                  rating_details.source_rating_id
     WHERE (    entity_instruments.role_code = 'ISSUER'
            AND entity_instruments.status_ind = 'A'
            AND v_rating_details_current.debt_type_code IN ('FSR',
                                                            'FER',
                                                            'FINPROG',
                                                            'RC')
            AND v_rating_details_current.source_rating_ind = 'D')
/


GRANT SELECT ON R360_APPDATA.VW_RATING_DETAILS_NON_ICR TO R360_APPDATA_READER
/


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\R360_NonPublicOpions\R360CFS_Release_Sep8th_2023\views\VW_RATING_DETAILS_NON_ICR_TAC.vw

SET DEFINE OFF;
/* Formatted on 8/29/2023 10:20:36 AM (QP5 v5.362) */
CREATE OR REPLACE FORCE VIEW R360_APPDATA.VW_RATING_DETAILS_NON_ICR_TAC
(
    RATING_DETAIL_ID,
    ENTITY_ID,
    DEBT_TYPE_CODE,
    DEBT_TYPE_DESC,
    RATING_TYPE_CODE,
    RATING_TYPE_DESC,
    CURRENT_RATING_SYMBOL,
    RATING_DATE,
    LAST_REVIEW_DATE,
    REGULATORY_INDICATOR,
    ACTION,
    LATEST_NON_AFFIRM_CW_OL,
    LATEST_NON_AFFIRM_CW_OL_DATE,
    DATA_ADMIN_DATE,
    SRD_CURR_IND,
    RATING_ACTION_WORD,
    RATING_ACTION_TYPE,
    CURRENT_CW_OL_DATE,
    CURRENT_CW_OL,
    CURRENT_CW_OL_ACTION_WORD,
    LONG_SHORT_IND,
    RATING_ID,
    DEBT_TYPE_SORT_ORDER,
    RATING_TYPE_SORT_ORDER
)
BEQUEATH DEFINER
AS
    SELECT v_rating_details_current.rating_detail_id
               AS rating_detail_id,
           entity_instruments.entity_id
               AS entity_id,
           v_rating_details_current.debt_type_code
               AS debt_type_code,
           v_rating_details_current.debt_type_desc
               AS debt_type_desc,
           v_rating_details_current.rating_type_code
               AS rating_type_code,
           v_rating_details_current.rating_type_desc
               AS rating_type_desc,
           v_rating_details_current.current_rating_symbol
               AS current_rating_symbol,
           v_rating_details_current.rating_date
               AS rating_date,
           v_rating_details_current.last_review_date
               AS last_review_date,
           v_rating_details_current.regulatory_indicator
               AS regulatory_indicator,
           CASE
               WHEN ((    rating_details.rating_action_word <> 'Affirmed'
                      AND rating_details.current_cw_ol_action_word
                              IS NOT NULL))
               THEN
                   (   (rating_details.rating_action_word || ' | ')
                    || rating_details.current_cw_ol_action_word)
               WHEN ((    rating_details.rating_action_word = 'Affirmed'
                      AND rating_details.current_cw_ol_action_word
                              IS NOT NULL))
               THEN
                   rating_details.current_cw_ol_action_word
               WHEN (rating_details.rating_action_word IS NULL)
               THEN
                   rating_details.current_cw_ol_action_word
               WHEN ((    rating_details.rating_action_word <> 'Affirmed'
                      AND rating_details.current_cw_ol_action_word IS NULL))
               THEN
                   rating_details.rating_action_word
           END
               AS action,
           rating_details.current_cw_ol
               AS latest_non_affirm_cw_ol,
           rating_details.current_cw_ol_date
               AS latest_non_affirm_cw_ol_date,
           v_rating_details_current.data_admin_date
               AS data_admin_date,
           v_rating_details_current.srd_curr_ind
               AS srd_curr_ind,
           v_rating_details_current.rating_action_word
               AS rating_action_word,
           v_rating_details_current.rating_action_type
               AS rating_action_type,
           v_rating_details_current.current_cw_ol_date
               AS current_cw_ol_date,
           v_rating_details_current.current_cw_ol
               AS current_cw_ol,
           v_rating_details_current.current_cw_ol_action_word
               AS current_cw_ol_action_word,
           v_rating_details_current.long_short_ind
               AS long_short_ind,
           v_rating_details_current.rating_id
               AS rating_id,
           v_rating_details_current.debt_type_sort_order
               AS debt_type_sort_order,
           v_rating_details_current.sort_order
               AS rating_type_sort_order
      FROM R360_APPDATA.VW_ENTITY_INSTRUMENTS_PARTICIPANTS entity_instruments
           JOIN
           R360_APPDATA.vw_rating_details_current v_rating_details_current
               ON entity_instruments.instrument_id =
                  v_rating_details_current.rating_id
           JOIN FGR_PRIME.RATING_DETAILS rating_details
               ON v_rating_details_current.non_affirm_rating_id =
                  rating_details.source_rating_id
     WHERE (    entity_instruments.role_code = 'ISSUER'
            AND entity_instruments.status_ind = 'A'
            AND v_rating_details_current.debt_type_code = 'TACASSES'
            AND v_rating_details_current.source_rating_ind = 'D')
/


GRANT SELECT ON R360_APPDATA.VW_RATING_DETAILS_NON_ICR_TAC TO R360_APPDATA_READER
/


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\R360_NonPublicOpions\R360CFS_Release_Sep8th_2023\views\VW_RATING_TYPE_CODES.vw

SET DEFINE OFF;
/* Formatted on 8/29/2023 10:20:39 AM (QP5 v5.362) */
CREATE OR REPLACE FORCE VIEW R360_APPDATA.VW_RATING_TYPE_CODES
(
    RATING_TYPE_CODE,
    DESCRIPTION,
    PRELIM_IND,
    LONG_SHORT_IND,
    SORT_ORDER,
    PRECEDENCE_NUM
)
BEQUEATH DEFINER
AS
    (SELECT rtcm.rating_type_code,
            rtc.description,
            rtc.prelim_ind,
            rtc.long_short_ind,
            rtcm.rank_order_num,
            rtc.precedence_num
       FROM R360_APPDATA.RATING_TYPE_CODE_MAP  rtcm
            INNER JOIN SPAPP.RATING_TYPE_CODES rtc
                ON rtcm.rating_type_code = rtc.rating_type_code
      WHERE rtcm.ACTV_FLAG = 'Y' AND rtcm.PROCESS_IND = 'Y')
/


GRANT SELECT ON R360_APPDATA.VW_RATING_TYPE_CODES TO R360_APPDATA_READER
/


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\R360_NonPublicOpions\R360CFS_Release_Sep8th_2023\views\VW_RELATED_ARTICLES.vw

SET DEFINE OFF;

CREATE OR REPLACE VIEW R360_APPDATA.VW_RELATED_ARTICLES AS
SELECT 
       ar.relate_id, --instrument_id from fgr.analytic_securities table (USPF)
       a.article_id, 
       REPLACE(REPLACE(a.preferred_title, '<br>', ''), '<BR>', '') AS article_title,
       at.crarticle_type_id AS article_type_id,
       at.crarticle_type AS article_type,       
       a.article_date, 
       CASE WHEN (e.employee_name IS NULL OR e.employee_name = 'Standard & Poor''s') THEN
			  'S&P Global Ratings'
			WHEN e.mi IS NULL THEN
			  e.first_name || ' ' || e.last_name_from_source 
		    ELSE 
			  e.first_name || ' ' || e.mi || ' ' || e.last_name_from_source 
	   END AS article_author
FROM   fgr.article_objects a,
       fgr.article_relationships ar,
       fgr.article_users au,
       (SELECT * 
        FROM   spapp.employees 
        WHERE  active_ind = 'Y'
        ) e,
       r360_appdata.crarticle_type_map m,
       r360_appdata.crarticle_types at
WHERE  a.article_id = ar.article_id
   AND a.article_id = au.article_id
   AND au.user_id = e.employee_id(+)
   AND a.article_type || '_' ||  NVL(a.article_sub_type, 'N') = m.source_article_type || '_' || NVL(m.source_article_sub_type, 'N') 
   AND m.crarticle_type_id = at.crarticle_type_id
   AND a.ack_status in ('D', 'Y') AND a.ciq_rep_ind = 1
   AND a.fgr_status = 'A'
   AND ar.relate_ind IN ('A', 'I')
   AND ar.ack_status in ('D', 'Y') AND ar.ciq_rep_ind = 1
   AND au.ack_status in ('D', 'Y') AND au.ciq_rep_ind = 1   
   AND au.user_role = 'AUTHOR'
   AND at.crarticle_type_id IN (1, 3, 7, 10, 11, 13, 14, 15) 
   AND at.actv_flag = 'Y'
   AND m.actv_flag = 'Y'
   AND a.article_date >= TO_DATE('01-JAN-2000', 'DD-MON-YYYY')
ORDER BY a.article_date desc;

GRANT SELECT ON R360_APPDATA.VW_RELATED_ARTICLES TO R360_APPDATA_READER;


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\R360_NonPublicOpions\R360CFS_Release_Sep8th_2023\views\VW_RELATED_CRITERIA_USPF.vw

SET DEFINE OFF;

CREATE OR REPLACE VIEW r360_appdata.vw_related_criteria_uspf AS 
SELECT rd.rating_detail_id, 
       a.article_id, 
       REPLACE(REPLACE(a.preferred_title, '<br>', ''), '<BR>', '') AS article_title,
       a.article_date,
       CASE WHEN (e.employee_name IS NULL OR e.employee_name = 'Standard & Poor''s') THEN
			  'S&P Global Ratings'
		    WHEN e.mi IS NULL THEN
			  e.first_name || ' ' || e.last_name_from_source 
		    ELSE 
			  e.first_name || ' ' || e.mi || ' ' || e.last_name_from_source 
	   END AS article_author,       
       a.source_object_id
FROM   fgr.rating_link rl,
       fgr_prime.rating_details rd,
       fgr.article_objects a,
       fgr.article_users au,
       (SELECT * 
        FROM   spapp.employees 
        WHERE  active_ind = 'Y') e
WHERE  rd.source_rating_id = rl.source_rating_id
   AND rl.linx_object_id = a.source_object_id 
   AND a.article_id = au.article_id
   AND au.user_id = e.employee_id(+)
   AND rd.ack_status = 'Y' 
   AND rd.ciq_rep_ind = 1
   AND rd.rating_ind = 'A' -- Ratings for USPF analytic securities
   AND rd.curr_ind = 'Y'
   AND rl.source_status_ind = 'A' 
   AND rl.ack_status = 'Y' 
   AND rl.ciq_rep_ind = 1
   AND rl.source_rating_ind = 'A'
   AND a.ack_status in ('D', 'Y') 
   AND a.ciq_rep_ind = 1
   AND a.fgr_status = 'A'
   AND au.ack_status in ('D', 'Y') 
   AND au.ciq_rep_ind = 1
   AND au.user_role = 'AUTHOR'   
ORDER BY a.article_date desc;

GRANT SELECT ON r360_appdata.vw_related_criteria_uspf TO r360_appdata_reader;   


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\R360_NonPublicOpions\R360CFS_Release_Sep8th_2023\views\VW_RELATED_ENTITIES.vw

SET DEFINE OFF;
/* Formatted on 8/29/2023 10:20:42 AM (QP5 v5.362) */
CREATE OR REPLACE FORCE VIEW R360_APPDATA.VW_RELATED_ENTITIES
(
    ENTITY_ID,
    SUPER_PARENT_ID,
    RE_ENTITY_ID,
    RE_NAME,
    RE_SHORT_NAME,
    RE_LEGAL_NAME,
    FAMILY_LEVEL,
    SORT_ORDER,
    RE_SUB_SECTOR,
    KEY_INSTN
)
BEQUEATH DEFINER
AS
    WITH
        related_entities
        AS
            (SELECT e.entity_id,
                    e.super_parent_id,
                    COALESCE (ef.entity_id, e.entity_id)
                        AS related_entity_id,
                    COALESCE (ef.family_level, 1)
                        AS family_level,
                    COALESCE (ef.sort_order, 1)
                        AS sort_order
               FROM fgr.entities e, fgr.entity_family ef
              WHERE e.super_parent_id = ef.super_parent_id(+))
      SELECT re.entity_id,
             re.super_parent_id,
             re.related_entity_id          AS re_entity_id,
             n.entity_name                 AS re_name,
             n.entity_short_name           AS re_short_name,
             n.entity_legal_name           AS re_legal_name,
             re.family_level,
             re.sort_order,
             e.primary_sub_sector_code     AS re_sub_sector,
             o.fins_identifier             AS key_instn
        FROM related_entities                       re,
             fgr.entities                           e,
             fgr.entity_names                       n,
             r360_appdata.vw_org_key_inst_id_mapping o
       WHERE     re.related_entity_id = e.entity_id
             AND re.related_entity_id = n.entity_id
             AND n.curr_ind = 'Y'
             AND o.core_fins_identifier = TO_CHAR (re.related_entity_id)
    ORDER BY re.entity_id, re.sort_order
/


GRANT SELECT ON R360_APPDATA.VW_RELATED_ENTITIES TO R360_APPDATA_READER
/


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\R360_NonPublicOpions\R360CFS_Release_Sep8th_2023\views\VW_REVIEW_HISTORY_LRD.vw

SET DEFINE OFF;
/* Formatted on 8/29/2023 10:20:45 AM (QP5 v5.362) */
CREATE OR REPLACE FORCE VIEW R360_APPDATA.VW_REVIEW_HISTORY_LRD
(
    RATING_DETAIL_ID,
    LAST_REVIEW_DATE
)
BEQUEATH DEFINER
AS
      SELECT review_history.rating_detail_id           AS rating_detail_id,
             MAX (review_history.last_review_date)     AS last_review_date
        FROM FGR.REVIEW_HISTORY review_history
       WHERE     review_history.SOURCE_ACTIVE_IND = 'Y'
             AND review_history.ACK_STATUS = 'Y'
             AND review_history.CIQ_REP_IND = 1
    GROUP BY review_history.rating_detail_id
/


GRANT SELECT ON R360_APPDATA.VW_REVIEW_HISTORY_LRD TO R360_APPDATA_READER
/


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\R360_NonPublicOpions\R360CFS_Release_Sep8th_2023\views\VW_SCORES_DEFINITIONS_INS.vw

CREATE OR REPLACE VIEW R360_APPDATA.VW_SCORES_DEFINITIONS_INS AS
SELECT dataelement_code         AS score_code, 
       dataelement_display_name AS score_name, 
       dataelement_definition   AS definition, 
       highlight_flag
FROM   r360_appdata.dataelement_ui_config
WHERE  dataelement_type = 'SCORES & MODIFIERS'
   AND analytic_case_type = 'IST'
ORDER BY sort_order ASC;

GRANT SELECT ON R360_APPDATA.VW_SCORES_DEFINITIONS_INS TO R360_APPDATA_READER;


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\R360_NonPublicOpions\R360CFS_Release_Sep8th_2023\views\VW_SCORES_MODIFIERS_FACTORS.vw

SET DEFINE OFF;
/* Formatted on 8/29/2023 10:20:47 AM (QP5 v5.362) */
CREATE OR REPLACE FORCE VIEW R360_APPDATA.VW_SCORES_MODIFIERS_FACTORS
(
    P_ENTITY_ID,
    ANALYTIC_CASE_TYPE,
    SCORE_NAME,
    SCORE_VALUE,
    SCORE_VALUE_DESC,
    SCORE_GROUP,
    HIGHLIGHT_FLAG,
    SORT_ORDER,
    CONFIDENTIAL_IND,
    CONFIDENTIAL_CATEGORY_CODE
)
BEQUEATH DEFINER
AS
    SELECT P_ENTITY_ID,
           ANALYTIC_CASE_TYPE,
           SCORE_NAME,
           SCORE_VALUE,
           SCORE_VALUE_DESC,
           SCORE_GROUP,
           HIGHLIGHT_FLAG,
           SORT_ORDER,
           'N'      AS CONFIDENTIAL_IND,
           NULL     AS CONFIDENTIAL_CATEGORY_CODE
      FROM R360_APPDATA.VW_SCORES_MODIFIERS_FACTORS_PUBLIC
    UNION
    SELECT P_ENTITY_ID,
           ANALYTIC_CASE_TYPE,
           SCORE_NAME,
           SCORE_VALUE,
           SCORE_VALUE_DESC,
           SCORE_GROUP,
           HIGHLIGHT_FLAG,
           SORT_ORDER,
           CONFIDENTIAL_IND,
           CONFIDENTIAL_CATEGORY_CODE
      FROM R360_APPDATA.VW_SCORES_MODIFIERS_FACTORS_PVT
/


GRANT SELECT ON R360_APPDATA.VW_SCORES_MODIFIERS_FACTORS TO R360_APPDATA_READER
/


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\R360_NonPublicOpions\R360CFS_Release_Sep8th_2023\views\VW_SCORES_MODIFIERS_FACTORS_PUBLIC.vw

SET DEFINE OFF;
/* Formatted on 8/29/2023 10:20:50 AM (QP5 v5.362) */
CREATE OR REPLACE FORCE VIEW R360_APPDATA.VW_SCORES_MODIFIERS_FACTORS_PUBLIC
(
    ANALYTIC_CASE_TYPE,
    SCORE_NAME,
    SCORE_VALUE,
    SCORE_VALUE_DESC,
    SCORE_GROUP,
    HIGHLIGHT_FLAG,
    SORT_ORDER,
    P_ENTITY_ID
)
BEQUEATH DEFINER
AS
    SELECT analytic_case_type,
           score_name,
           score_value,
           score_value_desc,
           score_group,
           highlight_flag,
           sort_order,
           p_entity_id
      FROM (SELECT dp.analytic_case_type,
                   ui.DATAELEMENT_DISPLAY_NAME
                       AS score_name,
                   ROW_NUMBER ()
                       OVER (
                           PARTITION BY dp.ANALYTIC_ENTITY_ID_TEXT,
                                        ui.DATAELEMENT_DISPLAY_NAME,
                                        ui.sort_order
                           ORDER BY
                               dp.VALUE_EFFECTIVE_DATE,
                               dp.analytic_review_id DESC)
                       rn,
                   dp.VALUE_TEXT
                       AS score_value,
                   dp.VALUE_DESCR
                       AS score_value_desc,
                   ui.DATAELEMENT_GROUP
                       AS score_group,
                   ui.HIGHLIGHT_FLAG,
                   dp.analytic_entity_id_text
                       AS p_entity_id,
                   ui.sort_order
              FROM SPSCORES_REF.DATA_POINT_SCHEMA_DISTR  dp
                   JOIN R360_APPDATA.DATAELEMENT_UI_CONFIG ui
                       ON     dp.analytic_case_type = ui.ANALYTIC_CASE_TYPE
                          AND dp.data_element_code = ui.DATAELEMENT_CODE
             WHERE EXISTS
                       (SELECT 1
                          FROM (SELECT review_ref_id,
                                       ROW_NUMBER ()
                                           OVER (
                                               PARTITION BY ANALYTIC_ENTITY_ID_TEXT,
                                                            ANALYTIC_CASE_TYPE
                                               ORDER BY
                                                   COALESCE (
                                                       REVIEW_EFFECTIVE_DATE,
                                                       CREATE_DTIME) DESC)
                                           rn,
                                       ANALYTIC_ENTITY_ID_TEXT,
                                       ANALYTIC_CASE_TYPE
                                  FROM SPSCORES_REF.ANALYTIC_REVIEW_DISTR
                                 WHERE     analytic_case_type IN ('CORP',
                                                                  'IST',
                                                                  'BANK',
                                                                  'SOV')
                                       AND analysis_type_name NOT LIKE
                                               '%_ESG_%'
                                       AND CIQ_REP_IND = 1
                                       AND ACK_FLAG = 'Y') lr
                         WHERE     lr.review_ref_id = dp.review_ref_id
                               AND lr.analytic_case_type =
                                   dp.analytic_case_Type
                               AND lr.analytic_entity_id_text =
                                   dp.analytic_entity_id_text
                               AND lr.rn = 1)) agg
     WHERE agg.rn = 1
/


GRANT SELECT ON R360_APPDATA.VW_SCORES_MODIFIERS_FACTORS_PUBLIC TO R360_APPDATA_READER
/


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\R360_NonPublicOpions\R360CFS_Release_Sep8th_2023\views\VW_SCORES_MODIFIERS_FACTORS_PVT.vw

SET DEFINE OFF;
/* Formatted on 8/29/2023 10:20:53 AM (QP5 v5.362) */
CREATE OR REPLACE FORCE VIEW R360_APPDATA.VW_SCORES_MODIFIERS_FACTORS_PVT
(
    P_ENTITY_ID,
    ANALYTIC_CASE_TYPE,
    SCORE_NAME,
    SCORE_VALUE,
    SCORE_VALUE_DESC,
    SCORE_GROUP,
    HIGHLIGHT_FLAG,
    SORT_ORDER,
    CONFIDENTIAL_IND,
    CONFIDENTIAL_CATEGORY_CODE
)
BEQUEATH DEFINER
AS
    SELECT A.ANALYTIC_ENTITY_ID_TEXT      AS P_ENTITY_ID,
           A.ANALYTIC_CASE_TYPE,
           A.DATAELEMENT_DISPLAY_NAME     AS SCORE_NAME,
           A.VALUE_TEXT                   AS SCORE_VALUE,
           A.VALUE_DESCR                  AS SCORE_VALUE_DESC,
           A.DATAELEMENT_GROUP            AS SCORE_GROUP,
           A.HIGHLIGHT_FLAG,
           A.SORT_ORDER,
           A.CONF                         AS CONFIDENTIAL_IND,
           A.CONFIDENTIAL_CATEGORY_CODE
      FROM (SELECT DP.ANALYTIC_ENTITY_ID_TEXT,
                   DP.ANALYTIC_CASE_TYPE,
                   UI.DATAELEMENT_DISPLAY_NAME,
                   DP.VALUE_TEXT,
                   DP.VALUE_DESCR,
                   UI.DATAELEMENT_GROUP,
                   UI.HIGHLIGHT_FLAG,
                   UI.SORT_ORDER,
                   ROW_NUMBER ()
                       OVER (
                           PARTITION BY DP.ANALYTIC_ENTITY_ID_TEXT,
                                        DP.ANALYTIC_CASE_TYPE,
                                        DP.DATA_ELEMENT_CODE
                           ORDER BY DP.VALUE_EFFECTIVE_DATE DESC)    RN,
                   DP.CONF,
                   DP.CONFIDENTIAL_CATEGORY_CODE
              FROM SPSCORES.DATA_POINT_SCHEMA_DISTR  DP
                   JOIN SPSCORES.ANALYTIC_REVIEW_DISTR ARD
                       ON ARD.ANALYTIC_REVIEW_ID = DP.ANALYTIC_REVIEW_ID
                   JOIN R360_APPDATA.DATAELEMENT_UI_CONFIG UI
                       ON     DP.ANALYTIC_CASE_TYPE = UI.ANALYTIC_CASE_TYPE
                          AND DP.DATA_ELEMENT_CODE = UI.DATAELEMENT_CODE) A
     WHERE RN = 1
/


GRANT SELECT ON R360_APPDATA.VW_SCORES_MODIFIERS_FACTORS_PVT TO R360_APPDATA_READER
/


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\R360_NonPublicOpions\R360CFS_Release_Sep8th_2023_Calling.sql

spool R360CFS_Release_Sep8th_2023_Tables_Calling.log 

@R360CFS_Release_Sep8th_2023/tables/tables.sql;
@R360CFS_Release_Sep8th_2023/views/VW_RATING_TYPE_CODES.vw;
@R360CFS_Release_Sep8th_2023/views/VW_R360_FIN_MNEMONICS_METADATA.vw;
@R360CFS_Release_Sep8th_2023/views/VW_R360_FINANCIALS_DATA.vw;
@R360CFS_Release_Sep8th_2023/views/VW_R360_FIN_PERIODS_RANK.vw;
@R360CFS_Release_Sep8th_2023/views/VW_R360_FINDATA_5YRS_LTM.vw;
@R360CFS_Release_Sep8th_2023/views/VW_R360_FINDATA_5QTRS.vw;
@R360CFS_Release_Sep8th_2023/views/VW_R360_RECONCILIATION.vw;
@R360CFS_Release_Sep8th_2023/views/VW_R360_RECONCILIATION_CUSTOM.vw;
@R360CFS_Release_Sep8th_2023/views/VW_R360_RECON_FISCALQTRS.vw;
@R360CFS_Release_Sep8th_2023/views/VW_R360_RECON_FISCALYRS.vw;
@R360CFS_Release_Sep8th_2023/views/VW_ORG_KEY_INST_ID_MAPPING.vw;
@R360CFS_Release_Sep8th_2023/views/VW_RELATED_ENTITIES.vw;
@R360CFS_Release_Sep8th_2023/views/VW_REVIEW_HISTORY_LRD.vw;
@R360CFS_Release_Sep8th_2023/views/VW_RATING_DETAILS_CURRENT.vw;
@R360CFS_Release_Sep8th_2023/views/VW_ENTITY_ACTIVE_RATING.vw;
@R360CFS_Release_Sep8th_2023/views/VW_ENTITY_DETAILS.vw;
@R360CFS_Release_Sep8th_2023/views/VW_R360_FINANCIALS_DATA_PEERS.vw;
@R360CFS_Release_Sep8th_2023/views/VW_RATING_CRITERIA_ARTICLES_PUBLIC.vw;
@R360CFS_Release_Sep8th_2023/views/VW_RATING_CRITERIA_ARTICLES_PVT.vw;
@R360CFS_Release_Sep8th_2023/views/VW_CORE_REVIEW_HISTORY_LRD.vw;
@R360CFS_Release_Sep8th_2023/views/VW_ENTITY_INSTRUMENTS_PARTICIPANTS.vw;
@R360CFS_Release_Sep8th_2023/views/VW_RATING_DETAILS_ICR.vw;
@R360CFS_Release_Sep8th_2023/views/VW_RATING_DETAILS_NON_ICR.vw;
@R360CFS_Release_Sep8th_2023/views/VW_RATING_DETAILS_ICR_NON_ICR.vw;
@R360CFS_Release_Sep8th_2023/views/VW_ENTITY_RATINGS_PUBLIC.vw;
@R360CFS_Release_Sep8th_2023/views/VW_ACTIVE_INSTRUMENTS_PVT.vw;
@R360CFS_Release_Sep8th_2023/views/VW_ENTITY_ACTIVE_RATING_PVT.vw;
@R360CFS_Release_Sep8th_2023/views/VW_ENTITY_RATINGS_PVT.vw;
@R360CFS_Release_Sep8th_2023/views/VW_ENTITY_CURRENT_RATING_PUBLIC.vw;
@R360CFS_Release_Sep8th_2023/views/VW_ENTITY_CURRENT_RATING_PVT.vw;
@R360CFS_Release_Sep8th_2023/views/VW_ENTITY_CURRENT_RATING.vw;
@R360CFS_Release_Sep8th_2023/views/VW_RATING_ARTICLES.vw;
@R360CFS_Release_Sep8th_2023/views/VW_RATING_ARTICLES_CN.vw;
@R360CFS_Release_Sep8th_2023/views/VW_ENTITY_RATINGS_HISTORY_PVT_ORG_ID.vw;
@R360CFS_Release_Sep8th_2023/views/VW_ENTITY_RATINGS_HISTORY_LAST_10YRS_PVT.vw;
@R360CFS_Release_Sep8th_2023/views/VW_ENTITY_RATINGS_HISTORY_PUBLIC.vw;
@R360CFS_Release_Sep8th_2023/views/VW_ENTITY_RATINGS_HISTORY_LAST_10YRS_PUBLIC.vw;
@R360CFS_Release_Sep8th_2023/views/VW_ENTITY_RATINGS_HISTORY_LAST_10YRS.vw;
@R360CFS_Release_Sep8th_2023/views/VW_ENTITY_RATINGS_PEERS_PVT.vw;
@R360CFS_Release_Sep8th_2023/views/VW_ENTITY_RATINGS_PEERS_PUBLIC.vw;
@R360CFS_Release_Sep8th_2023/views/VW_CURRENT_RATINGS_PEERS_PVT_PUB.vw;
@R360CFS_Release_Sep8th_2023/views/VW_CURRENT_INSTRUMENTS_WITH_ACTIVE_RATING_IND.vw;
@R360CFS_Release_Sep8th_2023/views/VW_ENTITY_RATINGS.vw;
@R360CFS_Release_Sep8th_2023/views/VW_ENTITY_RATINGS_HISTORY_PVT.vw;
@R360CFS_Release_Sep8th_2023/views/VW_ENTITY_RATINGS_HISTORY.vw;
@R360CFS_Release_Sep8th_2023/views/VW_ISSUES_MATURITIES_PUBLIC.vw;
@R360CFS_Release_Sep8th_2023/views/VW_ISSUES_MATURITIES_PVT.vw;
@R360CFS_Release_Sep8th_2023/views/VW_ISSUES_MATURITIES.vw;
@R360CFS_Release_Sep8th_2023/views/VW_ISSUES_MATURITIES_HISTORY_PUBLIC.vw;
@R360CFS_Release_Sep8th_2023/views/VW_ISSUES_MATURITIES_HISTORY_PVT.vw;
@R360CFS_Release_Sep8th_2023/views/VW_ISSUES_MATURITIES_HISTORY.vw;
@R360CFS_Release_Sep8th_2023/views/VW_SCORES_MODIFIERS_FACTORS_PVT.vw;
@R360CFS_Release_Sep8th_2023/views/VW_SCORES_MODIFIERS_FACTORS_PUBLIC.vw;
@R360CFS_Release_Sep8th_2023/views/VW_SCORES_MODIFIERS_FACTORS.vw;
@R360CFS_Release_Sep8th_2023/views/VW_R360_FIN_MNEMONICMAGNITUDE.vw;
@R360CFS_Release_Sep8th_2023/views/VW_R360_APP_TIME_ZONE.vw;
@R360CFS_Release_Sep8th_2023/views/VW_ENTITY_ACTIVE_RATING_TAC_PVT.vw;
@R360CFS_Release_Sep8th_2023/views/VW_ENTITY_RATINGS_TAC.vw;
@R360CFS_Release_Sep8th_2023/views/VW_ENTITY_ACTIVE_RATING_TAC.vw;
@R360CFS_Release_Sep8th_2023/views/VW_RATING_DETAILS_NON_ICR_TAC.vw;
@R360CFS_Release_Sep8th_2023/views/VW_ENTITY_RATINGS_PUBLIC_TAC.vw;
@R360CFS_Release_Sep8th_2023/views/VW_ENTITY_RATINGS_TAC_PVT.vw;
@R360CFS_Release_Sep8th_2023/views/VW_ENTITY_RATINGS_HISTORY_TAC_PUBLIC.vw;
@R360CFS_Release_Sep8th_2023/views/VW_ENTITY_RATINGS_HISTORY_TAC_PVT.vw;
@R360CFS_Release_Sep8th_2023/views/VW_ENTITY_RATINGS_HISTORY_TAC.vw;
@R360CFS_Release_Sep8th_2023/views/VW_NR_SUSFIN_GET_GREEN_SPO.vw;
@R360CFS_Release_Sep8th_2023/views/VW_NR_SUSFIN_GET_ARTICLETOPICS.vw;
@R360CFS_Release_Sep8th_2023/views/VW_NR_SUSFIN_GET_ANALYTICAL_APPROACH.vw;
@R360CFS_Release_Sep8th_2023/views/VW_CRITERIA_ARTICLES.vw;
@R360CFS_Release_Sep8th_2023/views/VW_ENTITY_ACTIVE_RATING_PVT_ORG.vw;
@R360CFS_Release_Sep8th_2023/views/VW_MY_RATING.vw;
@R360CFS_Release_Sep8th_2023/views/VW_PEERS_PORTFOLIO_CONTENTS.vw;
@R360CFS_Release_Sep8th_2023/views/VW_RELATED_ARTICLES.vw;
@R360CFS_Release_Sep8th_2023/views/VW_SCORES_DEFINITIONS_INS.vw;
@R360CFS_Release_Sep8th_2023/views/VW_DASHBOARD_CONTACTS_NON_USPF.vw;
@R360CFS_Release_Sep8th_2023/views/VW_INVESTOR_SENTIMENT_SECTOR_LIST.vw;
@R360CFS_Release_Sep8th_2023/views/VW_RELATED_CRITERIA_USPF.vw;
@R360CFS_Release_Sep8th_2023/dml/configuration_details.sql;
@R360CFS_Release_Sep8th_2023/dml/criteria_types.sql;
@R360CFS_Release_Sep8th_2023/dml/criteria_type_map.sql;
@R360CFS_Release_Sep8th_2023/dml/dataelement_ui_config.sql;
@R360CFS_Release_Sep8th_2023/dml/element_master.sql;
@R360CFS_Release_Sep8th_2023/dml/crarticle_types.sql;
@R360CFS_Release_Sep8th_2023/dml/crarticle_type_map.sql;

spool off


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\R360_NonPublicOpions\R360CFS_Release_Sep8th_2023_Rollback.sql

spool R360CFS_Release_Sep8th_2023_Rollback_Calling.log 

DROP VIEW R360_APPDATA.VW_ACTIVE_INSTRUMENTS_PVT;
DROP VIEW R360_APPDATA.VW_CORE_REVIEW_HISTORY_LRD;
DROP VIEW R360_APPDATA.VW_CURRENT_INSTRUMENTS_WITH_ACTIVE_RATING_IND;
DROP VIEW R360_APPDATA.VW_CURRENT_RATINGS_PEERS_PVT_PUB;
DROP VIEW R360_APPDATA.VW_ENTITY_ACTIVE_RATING;
DROP VIEW R360_APPDATA.VW_ENTITY_ACTIVE_RATING_PVT;
DROP VIEW R360_APPDATA.VW_ENTITY_ACTIVE_RATING_TAC;
DROP VIEW R360_APPDATA.VW_ENTITY_ACTIVE_RATING_TAC_PVT;
DROP VIEW R360_APPDATA.VW_ENTITY_CURRENT_RATING;
DROP VIEW R360_APPDATA.VW_ENTITY_CURRENT_RATING_PUBLIC;
DROP VIEW R360_APPDATA.VW_ENTITY_CURRENT_RATING_PVT;
DROP VIEW R360_APPDATA.VW_ENTITY_DETAILS;
DROP VIEW R360_APPDATA.VW_ENTITY_INSTRUMENTS_PARTICIPANTS;
DROP VIEW R360_APPDATA.VW_ENTITY_RATINGS;
DROP VIEW R360_APPDATA.VW_ENTITY_RATINGS_HISTORY;
DROP VIEW R360_APPDATA.VW_ENTITY_RATINGS_HISTORY_LAST_10YRS;
DROP VIEW R360_APPDATA.VW_ENTITY_RATINGS_HISTORY_LAST_10YRS_PUBLIC;
DROP VIEW R360_APPDATA.VW_ENTITY_RATINGS_HISTORY_LAST_10YRS_PVT;
DROP VIEW R360_APPDATA.VW_ENTITY_RATINGS_HISTORY_PUBLIC;
DROP VIEW R360_APPDATA.VW_ENTITY_RATINGS_HISTORY_PVT;
DROP VIEW R360_APPDATA.VW_ENTITY_RATINGS_HISTORY_PVT_ORG_ID;
DROP VIEW R360_APPDATA.VW_ENTITY_RATINGS_HISTORY_TAC;
DROP VIEW R360_APPDATA.VW_ENTITY_RATINGS_HISTORY_TAC_PUBLIC;
DROP VIEW R360_APPDATA.VW_ENTITY_RATINGS_HISTORY_TAC_PVT;
DROP VIEW R360_APPDATA.VW_ENTITY_RATINGS_PEERS_PUBLIC;
DROP VIEW R360_APPDATA.VW_ENTITY_RATINGS_PEERS_PVT;
DROP VIEW R360_APPDATA.VW_ENTITY_RATINGS_PUBLIC;
DROP VIEW R360_APPDATA.VW_ENTITY_RATINGS_PUBLIC_TAC;
DROP VIEW R360_APPDATA.VW_ENTITY_RATINGS_PVT;
DROP VIEW R360_APPDATA.VW_ENTITY_RATINGS_TAC;
DROP VIEW R360_APPDATA.VW_ENTITY_RATINGS_TAC_PVT;
DROP VIEW R360_APPDATA.VW_ISSUES_MATURITIES;
DROP VIEW R360_APPDATA.VW_ISSUES_MATURITIES_HISTORY;
DROP VIEW R360_APPDATA.VW_ISSUES_MATURITIES_HISTORY_PUBLIC;
DROP VIEW R360_APPDATA.VW_ISSUES_MATURITIES_HISTORY_PVT;
DROP VIEW R360_APPDATA.VW_ISSUES_MATURITIES_PUBLIC;
DROP VIEW R360_APPDATA.VW_ISSUES_MATURITIES_PVT;
DROP VIEW R360_APPDATA.VW_ORG_KEY_INST_ID_MAPPING;
DROP VIEW R360_APPDATA.VW_R360_APP_TIME_ZONE;
DROP VIEW R360_APPDATA.VW_R360_FIN_MNEMONICMAGNITUDE;
DROP VIEW R360_APPDATA.VW_R360_FIN_MNEMONICS_METADATA;
DROP VIEW R360_APPDATA.VW_R360_FIN_PERIODS_RANK;
DROP VIEW R360_APPDATA.VW_R360_FINANCIALS_DATA;
DROP VIEW R360_APPDATA.VW_R360_FINANCIALS_DATA_PEERS;
DROP VIEW R360_APPDATA.VW_R360_FINDATA_5QTRS;
DROP VIEW R360_APPDATA.VW_R360_FINDATA_5YRS_LTM;
DROP VIEW R360_APPDATA.VW_R360_RECON_FISCALQTRS;
DROP VIEW R360_APPDATA.VW_R360_RECON_FISCALYRS;
DROP VIEW R360_APPDATA.VW_R360_RECONCILIATION;
DROP VIEW R360_APPDATA.VW_R360_RECONCILIATION_CUSTOM;
DROP VIEW R360_APPDATA.VW_RATING_ARTICLES;
DROP VIEW R360_APPDATA.VW_RATING_ARTICLES_CN;
DROP VIEW R360_APPDATA.VW_RATING_CRITERIA_ARTICLES_PUBLIC;
DROP VIEW R360_APPDATA.VW_RATING_CRITERIA_ARTICLES_PVT;
DROP VIEW R360_APPDATA.VW_RATING_DETAILS_CURRENT;
DROP VIEW R360_APPDATA.VW_RATING_DETAILS_ICR;
DROP VIEW R360_APPDATA.VW_RATING_DETAILS_ICR_NON_ICR;
DROP VIEW R360_APPDATA.VW_RATING_DETAILS_NON_ICR;
DROP VIEW R360_APPDATA.VW_RATING_DETAILS_NON_ICR_TAC;
DROP VIEW R360_APPDATA.VW_RATING_TYPE_CODES;
DROP VIEW R360_APPDATA.VW_RELATED_ENTITIES;
DROP VIEW R360_APPDATA.VW_REVIEW_HISTORY_LRD;
DROP VIEW R360_APPDATA.VW_SCORES_MODIFIERS_FACTORS;
DROP VIEW R360_APPDATA.VW_SCORES_MODIFIERS_FACTORS_PUBLIC;
DROP VIEW R360_APPDATA.VW_SCORES_MODIFIERS_FACTORS_PVT;
DROP VIEW R360_APPDATA.VW_NR_SUSFIN_GET_GREEN_SPO;
DROP VIEW R360_APPDATA.VW_NR_SUSFIN_GET_ARTICLETOPICS;
DROP VIEW R360_APPDATA.VW_NR_SUSFIN_GET_ANALYTICAL_APPROACH;
DROP VIEW R360_APPDATA.VW_CRITERIA_ARTICLES;
DROP VIEW R360_APPDATA.VW_ENTITY_ACTIVE_RATING_PVT_ORG;
DROP VIEW R360_APPDATA.VW_MY_RATING;
DROP VIEW R360_APPDATA.VW_PEERS_PORTFOLIO_CONTENTS;
DROP VIEW R360_APPDATA.VW_RELATED_ARTICLES;
DROP VIEW R360_APPDATA.VW_SCORES_DEFINITIONS_INS;
DROP VIEW R360_APPDATA.VW_DASHBOARD_CONTACTS_NON_USPF;
DROP VIEW R360_APPDATA.VW_INVESTOR_SENTIMENT_SECTOR_LIST;
DROP VIEW R360_APPDATA.VW_RELATED_CRITERIA_USPF;

spool off


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\R360_NonPublicOpions_Incremental\R360CFS_Incremental_Release_Sep8th_2023\dml\element_master.sql

SET DEFINE OFF;

UPDATE r360_appdata.element_master
   SET item_alias = 'CHE'
 WHERE item_name = 'CHE' AND column_name = 'Corporate.pre-adjusted';

UPDATE r360_appdata.element_master
   SET item_alias = 'TDREP'
 WHERE item_name = 'TDREP' AND column_name = 'Corporate.pre-adjusted';

UPDATE r360_appdata.element_master
   SET item_alias = 'PSTK'
 WHERE item_name = 'PSTK' AND column_name = 'Corporate.pre-adjusted';

UPDATE r360_appdata.element_master
   SET item_alias = 'CEQ'
 WHERE item_name = 'CEQ' AND column_name = 'Corporate.pre-adjusted';

UPDATE r360_appdata.element_master
   SET item_alias = 'CAPXRTM'
 WHERE item_name = 'CAPX' AND column_name = 'Corporate.pre-adjusted';

UPDATE r360_appdata.element_master
   SET item_alias = 'OANCFRTM'
 WHERE item_name = 'OANCF.VLP' AND column_name = 'Corporate.pre-adjusted';

UPDATE r360_appdata.element_master
   SET item_alias = 'FOCFREPRTM'
 WHERE item_name = 'FOCFREP' AND column_name = 'Corporate.pre-adjusted';

UPDATE r360_appdata.element_master
   SET item_alias = 'REVTREPRTM'
 WHERE item_name = 'REVTREP' AND column_name = 'Corporate.pre-adjusted';

UPDATE r360_appdata.element_master
   SET item_alias = 'OPINCREPRTM'
 WHERE item_name = 'OPINCADAREP' AND column_name = 'Corporate.pre-adjusted';

UPDATE r360_appdata.element_master
   SET item_alias = 'EBITREPRTM'
 WHERE item_name = 'EBITREP' AND column_name = 'Corporate.pre-adjusted';

UPDATE r360_appdata.element_master
   SET item_alias = 'IBRTM'
 WHERE item_name = 'IB' AND column_name = 'Corporate.pre-adjusted';

UPDATE r360_appdata.element_master
   SET item_alias = 'EBITDAARTM'
 WHERE item_name = 'EBITDAA' AND column_name = 'Corporate.pre-adjusted';

UPDATE r360_appdata.element_master
   SET item_alias = 'OPMARGREPRTM'
 WHERE item_name = 'OPMARGREP' AND column_name = 'Corporate.pre-adjusted';

UPDATE r360_appdata.element_master
   SET item_alias = 'ROCREPRTM'
 WHERE item_name = 'ROCREP' AND column_name = 'Corporate.pre-adjusted';

UPDATE r360_appdata.element_master
   SET item_alias = 'EBITCOVREPRTM'
 WHERE item_name = 'EBITCOVREP' AND column_name = 'Corporate.pre-adjusted';

UPDATE r360_appdata.element_master
   SET item_alias = 'ROCEDVPRTM'
 WHERE item_name = 'ROCEDVP' AND column_name = 'Corporate.pre-adjusted';

UPDATE r360_appdata.element_master
   SET item_alias = 'EBITDACOVREPRTM'
 WHERE item_name = 'EBITDACOVREP' AND column_name = 'Corporate.pre-adjusted';

UPDATE r360_appdata.element_master
   SET item_alias = 'FOCFTDREPRTM'
 WHERE item_name = 'FOCFTDREP' AND column_name = 'Corporate.pre-adjusted';

UPDATE r360_appdata.element_master
   SET item_alias = 'TDEREPRTM'
 WHERE item_name = 'TDEREP' AND column_name = 'Corporate.pre-adjusted';

UPDATE r360_appdata.element_master
   SET item_alias = 'TDTCREP'
 WHERE item_name = 'TDTCREP' AND column_name = 'Corporate.pre-adjusted';

UPDATE r360_appdata.element_master
   SET item_alias = 'TDRAVREP'
 WHERE item_name = 'TDRAVREP' AND column_name = 'Corporate.pre-adjusted';

UPDATE r360_appdata.element_master
   SET item_alias = 'EBITSALERRTM'
 WHERE item_name = 'EBITSALEREP' AND column_name = 'Corporate.pre-adjusted';

UPDATE r360_appdata.element_master
   SET item_alias = 'DCFTDRRTM'
 WHERE item_name = 'DCFTDREP' AND column_name = 'Corporate.pre-adjusted';

UPDATE r360_appdata.element_master
   SET item_alias = 'DCFREPRTM'
 WHERE item_name = 'DCFREP' AND column_name = 'Corporate.pre-adjusted';

UPDATE r360_appdata.element_master
   SET item_alias = 'OCFTDREPRTM'
 WHERE item_name = 'OCFTDREP' AND column_name = 'Corporate.pre-adjusted';

UPDATE r360_appdata.element_master
   SET item_alias = 'RETDCAPREPRTM'
 WHERE item_name = 'RETDCAPREP' AND column_name = 'Corporate.pre-adjusted';

UPDATE r360_appdata.element_master
   SET item_alias = 'TDTUCREPRTM'
 WHERE item_name = 'TDTUCREP' AND column_name = 'Corporate.pre-adjusted';

UPDATE r360_appdata.element_master
   SET item_alias = 'REDFCCOVREPRTM'
 WHERE item_name = 'REDFCCOVREP' AND column_name = 'Corporate.pre-adjusted';

UPDATE r360_appdata.element_master
   SET item_alias = 'RELTVREPRTM'
 WHERE item_name = 'RELTVREP' AND column_name = 'Corporate.pre-adjusted';

UPDATE r360_appdata.element_master
   SET item_alias = 'DIVREPRTM'
 WHERE item_name = 'DIVREP' AND column_name = 'Corporate.pre-adjusted';

UPDATE r360_appdata.element_master
   SET item_alias = 'SHRREPURRTM'
 WHERE item_name = 'SHRREPUR' AND column_name = 'Corporate.pre-adjusted';
 
 UPDATE r360_appdata.element_master
   SET item_alias = 'RETDCAPRTM'
 WHERE item_name = 'RETDCAP' and column_name ='Corporate.adjusted';

UPDATE r360_appdata.element_master
   SET item_alias = 'TDTUCRTM'
 WHERE item_name = 'TDTUC' and column_name ='Corporate.adjusted';

UPDATE r360_appdata.element_master
   SET item_alias = 'RELTVRTM'
 WHERE item_name = 'RELTV' and column_name ='Corporate.adjusted';

UPDATE r360_appdata.element_master
   SET item_alias = 'DVARTM'
 WHERE item_name = 'DVA' and column_name ='Corporate.adjusted';

UPDATE r360_appdata.element_master
   SET item_alias = 'DCFARTM'
 WHERE item_name = 'DCFA' and column_name ='Corporate.adjusted';

UPDATE r360_appdata.element_master
   SET item_alias = 'FFOTDRTM'
 WHERE item_name = 'FFOTD' and column_name ='Corporate.adjusted';

UPDATE r360_appdata.element_master
   SET item_alias = 'REVTARTM'
 WHERE item_name = 'REVTA' and column_name ='Corporate.adjusted';

UPDATE r360_appdata.element_master
   SET item_alias = 'EBITDAARTM'
 WHERE item_name = 'EBITDAA' and column_name ='Corporate.adjusted';

UPDATE r360_appdata.element_master
   SET item_alias = 'OPINCDARTM'
 WHERE item_name = 'OPINCDA' and column_name ='Corporate.adjusted';

UPDATE r360_appdata.element_master
   SET item_alias = 'EBITARTM'
 WHERE item_name = 'EBITA' and column_name ='Corporate.adjusted';

UPDATE r360_appdata.element_master
   SET item_alias = 'FFOARTM'
 WHERE item_name = 'FFOA' and column_name ='Corporate.adjusted';

UPDATE r360_appdata.element_master
   SET item_alias = 'CAPXARTM'
 WHERE item_name = 'CAPXA' and column_name ='Corporate.adjusted';

UPDATE r360_appdata.element_master
   SET item_alias = 'FOCFARTM'
 WHERE item_name = 'FOCFA' and column_name ='Corporate.adjusted';

UPDATE r360_appdata.element_master
   SET item_alias = 'CHA'
 WHERE item_name = 'CHA' and column_name ='Corporate.adjusted';

UPDATE r360_appdata.element_master
   SET item_alias = 'TDA'
 WHERE item_name = 'TDA' and column_name ='Corporate.adjusted';

UPDATE r360_appdata.element_master
   SET item_alias = 'EQUITYA'
 WHERE item_name = 'EQUITYA' and column_name ='Corporate.adjusted';

UPDATE r360_appdata.element_master
   SET item_alias = 'TCAP'
 WHERE item_name = 'TCAP' and column_name ='Corporate.adjusted';

UPDATE r360_appdata.element_master
   SET item_alias = 'ROCEQRTM'
 WHERE item_name = 'ROCEQ' and column_name ='Corporate.adjusted';

UPDATE r360_appdata.element_master
   SET item_alias = 'ROCRTM'
 WHERE item_name = 'ROC' and column_name ='Corporate.adjusted';

UPDATE r360_appdata.element_master
   SET item_alias = 'EBITCOVRTM'
 WHERE item_name = 'EBITCOV' and column_name ='Corporate.adjusted';

UPDATE r360_appdata.element_master
   SET item_alias = 'EBITDACOVRTM'
 WHERE item_name = 'EBITDACOV' and column_name ='Corporate.adjusted';

UPDATE r360_appdata.element_master
   SET item_alias = 'FOCFTDRTM'
 WHERE item_name = 'FOCFTD' and column_name ='Corporate.adjusted';

UPDATE r360_appdata.element_master
   SET item_alias = 'TDERTM'
 WHERE item_name = 'TDE' and column_name ='Corporate.adjusted';

UPDATE r360_appdata.element_master
   SET item_alias = 'TDTC'
 WHERE item_name = 'TDTC' and column_name ='Corporate.adjusted';

UPDATE r360_appdata.element_master
   SET item_alias = 'EBITDASALEARTM'
 WHERE item_name = 'EBITDASALEA' and column_name ='Corporate.adjusted';

UPDATE r360_appdata.element_master
   SET item_alias = 'EBITSALEARTM'
 WHERE item_name = 'EBITSALEA' and column_name ='Corporate.adjusted';

UPDATE r360_appdata.element_master
   SET item_alias = 'FFOCICRTM'
 WHERE item_name = 'FFOCIC' and column_name ='Corporate.adjusted';

UPDATE r360_appdata.element_master
   SET item_alias = 'CFOARTM'
 WHERE item_name = 'OCFA' and column_name ='Corporate.adjusted';

UPDATE r360_appdata.element_master
   SET item_alias = 'OCFTDRTM'
 WHERE item_name = 'OCFTD' and column_name ='Corporate.adjusted';

UPDATE r360_appdata.element_master
   SET item_alias = 'REDFCCOVRTM'
 WHERE item_name = 'REDFCCOV' and column_name ='Corporate.adjusted';

UPDATE r360_appdata.element_master
   SET item_alias = 'SHRREPURRTM'
 WHERE item_name = 'SHRREPUR' and column_name ='Corporate.adjusted';

UPDATE r360_appdata.element_master
   SET item_alias = 'DCFTDRTM'
 WHERE item_name = 'DCFTD' and column_name ='Corporate.adjusted';
 
 update r360_appdata.dataelement_ui_config set HIDDEN_MNEM_FLAG = 'Y'
where DATAELEMENT_CODE in('EBITSALEREP',
'REDFCCOVREP',
'RELTVREP',
'RETDCAPREP',
'TDTUCREP',
'RELTV',
'EBITSALEA',
'REDFCCOV',
'TDTUC',
'RETDCAP'
); 

UPDATE r360_appdata.element_master
   SET COLUMN_DEFINITION =
          'The S&P risk-adjusted capital (RAC) ratio before diversification is a globally consistent comparison of the company''s capital to its risk-weighted assets (RWAs) before diversification. A higher ratio indicates greater ability for the company to absorb future losses. Calculated as total adjusted capital as a percent of S&P total risk-weighted assets (RWAs) before diversification.'
 WHERE ITEM_NAME = 'RAC_BfDivrs_F' AND column_name = 'Financial.all';

UPDATE r360_appdata.element_master
   SET COLUMN_DEFINITION =
          'Return on average common equity measures a company''s profitability by revealing how much profit a company generates with the money shareholders have invested. Calculated as net income after extraordinary items net of preferred dividends, as a percent of average common equity.'
 WHERE ITEM_NAME = 'Return_Equity_Rto_F' AND column_name = 'Financial.all';

UPDATE r360_appdata.element_master
   SET COLUMN_DEFINITION =
          'Earnings before interest and taxes. A traditional view of profit that factors in capital intensity. However, it also includes interest income, the company''s share of equity earnings of associates and joint ventures, other recurring and nonoperating items.'
 WHERE ITEM_NAME = 'EBITREP' AND column_name = 'Corporate.pre-adjusted';
 
 COMMIT;


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\R360_NonPublicOpions_Incremental\R360CFS_Incremental_Release_Sep8th_2023\views\VW_R360_FINANCIALS_DATA.vw

CREATE OR REPLACE VIEW R360_APPDATA.VW_R360_FINANCIALS_DATA
AS
   SELECT dp.FIN_DATA_POINT_ID,
          per.FIN_PERIOD_ID,
          de.FIN_DATA_ELEMENT_ID,
          org.FIN_ENTITY_ID,
          CASE
             WHEN REGEXP_LIKE (dp.data_point_value, '[[:digit:]]')
             THEN
                CASE
                   WHEN     em.column_name IN ('Financial.all',
                                               'Insurance.all')
                        AND em.MAGNITUDE IN ('%', 'x')
                   THEN
                      ROUND (TO_NUMBER (dp.DATA_POINT_VALUE) * 100, 2)
                   ELSE
                      ROUND (TO_NUMBER (dp.DATA_POINT_VALUE), 2)
                END
             ELSE
                NULL
          END
             AS DATA_POINT_VALUE,
          dp.DATA_SOURCE,
          dp.CONF_FLAG,
          em.ITEM_NAME AS DATA_ELEMENT_CD,
          de.DATA_ELEMENT_NAME,
          de.DATA_ELEMENT_DESC,
          de.CALCULATION_FORMULA,
          de.CALCULATED_MNEM_IND,
          per.FISCAL_YEAR,
          per.PERIOD_TYPE_CD,
          per.PERIOD_TYPE_NAME,
          per.PERIOD_END_DATE,
          per.PERIOD_STATE,
          per.REPORTED_CURRENCY,
          per.SCENARIO_NAME,
          per.DATA_SOURCE_SYSTEM,
          per.LAST_UPDATED_DATE,
          org.CORE_ID,
          org.SP_ID,
          em.COLUMN_NAME AS TEMPLATE_NAME,
          CASE
             WHEN per.PERIOD_TYPE_CD = 'LTM'
             THEN
                'LTM'
             ELSE
                   CAST (per.FISCAL_YEAR AS VARCHAR2 (4000))
                || CASE
                      WHEN per.PERIOD_TYPE_NAME = 'Annual'
                      THEN
                         ' FY'
                      WHEN per.PERIOD_TYPE_NAME = 'Quarterly'
                      THEN
                         ' ' || per.PERIOD_TYPE_CD
                      ELSE
                         per.PERIOD_TYPE_CD
                   END
          END
             AS FiscalYear,
          em.MAGNITUDE,
          em.PRODUCT_DECIMAL,
          per.FIN_PERIOD_ID AS ID,
          em.ITEM_ALIAS
     FROM SPGIPRODUCT.FIN_DATA_POINT dp
          JOIN SPGIPRODUCT.FIN_DATA_ELEMENT de
             ON (DP.FIN_DATA_ELEMENT_ID = de.FIN_DATA_ELEMENT_ID)
          JOIN SPGIPRODUCT.FIN_PERIOD per
             ON (PER.FIN_PERIOD_ID = dp.FIN_PERIOD_ID)
          JOIN SPGIPRODUCT.FIN_ENTITY org
             ON (ORG.FIN_ENTITY_ID = per.FIN_ENTITY_ID)
          JOIN R360_APPDATA.ELEMENT_MASTER em
             ON (   de.DATA_ELEMENT_CD = em.ITEM_NAME
                 OR (    per.period_type_cd = 'LTM'
                     AND de.DATA_ELEMENT_CD = em.ITEM_ALIAS))
    WHERE     1 = 1
          AND de.r360_flag = 'Y'              --      AND org.CORE_ID = 112354
          -- and de.EXTERNAL_DISTR_FLAG='Y'
          --  and per.CONF_FLAG='N'
          --  and per.EXTERNAL_DISTR_FLAG='Y'
          AND dp.CONF_FLAG = 'N'
          AND em.COLUMN_NAME IN ('Corporate.adjusted',
                                 'Corporate.pre-adjusted',
                                 'Financial.all',
                                 'Insurance.all');
                                 


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\R360_NonPublicOpions_Incremental\R360CFS_Release_Sep8th_2023_Calling.sql

spool R360CFS_Release_Sep8th_2023_Tables_Calling.log 

@R360CFS_Incremental_Release_Sep8th_2023/views/VW_R360_FINANCIALS_DATA.vw;
@R360CFS_Incremental_Release_Sep8th_2023/dml/element_master.sql;

spool off


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\R360_NonPublicOpions_Incremental\R360CFS_Release_Sep8th_2023_Rollback.sql

spool R360CFS_Release_Sep8th_2023_Rollback_Calling.log 

DROP VIEW R360_APPDATA.VW_R360_FINANCIALS_DATA;

spool off


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\r360_sector_rsch_sectors_March15_2024_release\vw_sector_rsch_sectors_calling.sql

set scan off time on timing on
set sqlblanklines on
set define off
set echo on
spool vw_sector_rsch_sectors_calling.log

DROP VIEW R360_APPDATA.VW_SECTOR_RSCH_SECTORS;

/* Formatted on 3/7/2024 7:42:03 PM (QP5 v5.267.14150.38573) */
CREATE OR REPLACE FORCE VIEW R360_APPDATA.VW_SECTOR_RSCH_SECTORS
AS
   SELECT ss.SUB_SECTOR_CODE SUB_SECTOR_CODE,
          ss.DESCRIPTION SUB_SECTOR,
          ind.CODE INDUSTRY_CODE,
          DECODE (ind.CODE,
                  'TITINSCO', 'Other',
                  'FUNDS', 'Other',
                  ind.DESCRIPTION)
             INDUSTRY
     FROM SPAPP.SUB_SECTORS ss
          LEFT JOIN SPAPP.V_INDUSTRIES ind
             ON     ind.SUB_SECTOR_CODE = ss.SUB_SECTOR_CODE
                AND ind.STATUS_IND = 'A'
    WHERE     ss.ACTIVE_IND = 'Y'
          AND ss.SUB_SECTOR_CODE NOT IN ('PUBFIN',
                                         'LEVFIN',
                                         'PERFDATA',
                                         'ABCP',
                                         'ABS',
                                         'CMBS',
                                         'REC',
                                         'RMBS',
                                         'SE',
                                         'CDO',
                                         'IFOG',
                                         'IFIPF',
                                         'IFOTHER',
                                         'IFP',
                                         'IFPJD',
                                         'IFSOC',
                                         'IFTR',
                                         'IFU',
                                         'GOVS',
                                         'SOVR',
                                         'SOV')
          AND ind.CODE NOT IN (SELECT RATING_INDUSTRY_CODE
                                 FROM R360_APPDATA.RATING_INDUSTRY_TREE_MAP)
   UNION ALL
   SELECT 'STRUC' SUB_SECTOR_CODE,
          'Structured Finance' SUB_SECTOR,
          ss.SUB_SECTOR_CODE INDUSTRY_CODE,
          ss.DESCRIPTION INDUSTRY
     FROM SPAPP.SUB_SECTORS ss
    WHERE     ss.ACTIVE_IND = 'Y'
          AND ss.SUB_SECTOR_CODE IN ('ABCP',
                                     'ABS',
                                     'CMBS',
                                     'REC',
                                     'RMBS',
                                     'SE',
                                     'CDO')
   UNION ALL
   SELECT 'INFRA' SUB_SECTOR_CODE,
          'Infrastructure' SUB_SECTOR,
          ss.SUB_SECTOR_CODE INDUSTRY_CODE,
          ss.DESCRIPTION INDUSTRY
     FROM SPAPP.SUB_SECTORS ss
    WHERE     ss.ACTIVE_IND = 'Y'
          AND ss.SUB_SECTOR_CODE IN ('IFOG',
                                     'IFIPF',
                                     'IFOTHER',
                                     'IFP',
                                     'IFPJD',
                                     'IFSOC',
                                     'IFTR',
                                     'IFU')
   UNION ALL
   SELECT 'GOVS' SUB_SECTOR_CODE,
          'Governaments' AS SUB_SECTOR,
          ss.SUB_SECTOR_CODE AS INDUSTRY_CODE,
          ss.DESCRIPTION AS INDUSTRY
     FROM SPAPP.SUB_SECTORS ss
    WHERE     ss.ACTIVE_IND = 'Y'
          AND ss.SUB_SECTOR_CODE IN ('GOVS', 'SOVR', 'SOV')
   UNION ALL
   SELECT ss.SUB_SECTOR_CODE SUB_SECTOR_CODE,
          ss.DESCRIPTION SUB_SECTOR,
          TO_CHAR (s.SUBJECT_ID) INDUSTRY_CODE,
          s.LONG_DESCRIPTION INDUSTRY
     FROM SPAPP.SUB_SECTORS ss
          RIGHT JOIN SPAPP.SUBJECTS s
             ON     1 = 1
                AND s.SUBJECT_ID IN (2602,
                                     2120,
                                     9002,
                                     7078,
                                     2705,
                                     8003,
                                     2605,
                                     9051,
                                     9052)
    WHERE ss.SUB_SECTOR_CODE = 'PUBFIN'
   ORDER BY 1, 4;

GRANT SELECT ON R360_APPDATA.VW_SECTOR_RSCH_SECTORS TO R360_APPDATA_READER;

spool off;


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\r360_sector_rsch_sectors_March15_2024_release\vw_sector_rsch_sectors_rollback.sql

set scan off time on timing on
set sqlblanklines on
set define off
set echo on
spool R360_AllArticles_Jan19_2024_release_rollback.log

DROP VIEW R360_APPDATA.VW_RATING_ARTICLES_PEERS;

DROP VIEW R360_APPDATA.VW_RATING_ARTICLES_CN_PEERS;

spool off;


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\R360_Sovereign_Research\R360_Sovereign_Research_Calling.sql

spool R360_Sovereign_Research_Calling.log 

@R360_Sovereign_Research_Scripts/views/vw_sov_research_summary.sql;
@R360_Sovereign_Research_Scripts/views/vw_sov_risk_econ_fin_indicators.sql;
@R360_Sovereign_Research_Scripts/views/vw_sov_bicra_scores.sql;
@R360_Sovereign_Research_Scripts/views/vw_sov_peer_bicra_scores.sql;
@R360_Sovereign_Research_Scripts/views/vw_sov_fin_sec_iicra.sql;

spool off


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\R360_Sovereign_Research\R360_Sovereign_Research_Rollback.sql

spool R360_Sovereign_Research_Rollback.log 

@R360_Sovereign_Research_Scripts/rollback/vw_sov_research_summary_rollback.sql;
@R360_Sovereign_Research_Scripts/rollback/vw_sov_risk_econ_fin_indicators_rollback.sql;
@R360_Sovereign_Research_Scripts/rollback/vw_sov_bicra_scores_rollback.sql;
@R360_Sovereign_Research_Scripts/rollback/vw_sov_peer_bicra_scores_rollback.sql;
@R360_Sovereign_Research_Scripts/rollback/vw_sov_fin_sec_iicra_rollback.sql;

spool off


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\R360_Sovereign_Research\R360_Sovereign_Research_Scripts\rollback\vw_sov_bicra_scores_rollback.sql

DROP VIEW r360_appdata.vw_sov_bicra_scores;


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\R360_Sovereign_Research\R360_Sovereign_Research_Scripts\rollback\vw_sov_fin_sec_iicra_rollback.sql

DROP VIEW r360_appdata.vw_sov_fin_sec_iicra;


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\R360_Sovereign_Research\R360_Sovereign_Research_Scripts\rollback\vw_sov_peer_bicra_scores_rollback.sql

DROP VIEW r360_appdata.vw_sov_peer_bicra_scores;


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\R360_Sovereign_Research\R360_Sovereign_Research_Scripts\rollback\vw_sov_research_summary_rollback.sql

DROP VIEW r360_appdata.vw_sov_research_summary;


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\R360_Sovereign_Research\R360_Sovereign_Research_Scripts\rollback\vw_sov_risk_econ_fin_indicators_rollback.sql

DROP VIEW r360_appdata.vw_sov_risk_econ_fin_indicators;


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\R360_Sovereign_Research\R360_Sovereign_Research_Scripts\views\vw_sov_bicra_scores.sql

SET DEFINE OFF;

-- Banking Industry Country Risk Assessment
CREATE OR REPLACE VIEW r360_appdata.vw_sov_bicra_scores AS 		
WITH bicra_mnemonics AS (
     SELECT 1 AS score_sort_order, 'BG' AS data_element_code, 0 AS hierarchy_level, 'Y' AS peer_ind FROM DUAL
	 UNION ALL
	 SELECT 2,'BG_ER',0,'Y' FROM DUAL
	 UNION ALL
	 SELECT 3,'BG_ER_ERESL',1,'N' FROM DUAL
	 UNION ALL
	 SELECT 4,'BG_ER_EIMB',1,'N' FROM DUAL
	 UNION ALL
	 SELECT 5,'BG_ER_CRISK',1,'N' FROM DUAL
	 UNION ALL
	 SELECT 6,'BG_ER_ERT',1,'Y' FROM DUAL
	 UNION ALL
	 SELECT 7,'BG_IR',0,'Y' FROM DUAL
	 UNION ALL
	 SELECT 8,'BG_IR_IFRW',1,'N' FROM DUAL
	 UNION ALL
	 SELECT 9,'BG_IR_CDNM',1,'N' FROM DUAL
	 UNION ALL
	 SELECT 10,'BG_IR_SFND',1,'N' FROM DUAL
	 UNION ALL
	 SELECT 11,'BG_IR_IRT',1,'Y' FROM DUAL
	 UNION ALL
	 SELECT 12, 'BG_GSA',0,'Y' FROM DUAL),
bicra_scores AS 
	(SELECT cl.iso2_code AS country_code,
			 cl.entity_name as country_name,
			 dpsd.data_element_code AS score_code,
			 dpsd.data_element_name AS score_name,
			 dpsd.value_descr AS score_value, 	   
			 dpsd.value_effective_date AS assessment_date,
			 bm.score_sort_order,
			 bm.hierarchy_level,
			 bm.peer_ind,
			 DENSE_RANK() OVER (PARTITION BY ard.analytic_entity_id_text, ard.analytic_case_type ORDER BY COALESCE(ard.review_effective_date, ard.create_dtime) DESC) as rank_num
	  FROM dsmpstg.r360_country_list cl  
		  INNER JOIN spscores_ref.data_point_schema_distr dpsd ON cl.bicra_spid = dpsd.analytic_entity_id_text 
						AND cl.active_flag = 'Y' AND dpsd.analytic_case_type = 'BICRA'
		  INNER JOIN spscores_ref.analytic_review_distr ard ON dpsd.analytic_entity_id_text = ard.analytic_entity_id_text AND dpsd.review_ref_id = ard.review_ref_id 
						AND dpsd.analysis_type_name = ard.analysis_type_name AND ard.ack_flag = 'Y' AND ard.ciq_rep_ind = 1 
		  INNER JOIN bicra_mnemonics bm ON dpsd.data_element_code = bm.data_element_code)
SELECT country_code,
		country_name,
		score_code,
		score_name, 
		score_value,
		hierarchy_level,
		assessment_date,
		peer_ind,
		score_sort_order
  FROM bicra_scores 
	WHERE  rank_num = 1 
		ORDER BY score_sort_order;
	
GRANT SELECT ON r360_appdata.vw_sov_bicra_scores TO R360_APPDATA_READER;


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\R360_Sovereign_Research\R360_Sovereign_Research_Scripts\views\vw_sov_fin_sec_iicra.sql

SET DEFINE OFF;

-- Insurance Industry Country Risk Assessment
CREATE OR REPLACE VIEW r360_appdata.vw_sov_fin_sec_iicra AS 		
SELECT dataset_id,
		country_code,
		de_mnemonic_class,
       CASE WHEN de_mnemonic_class = 'LIFE' THEN 'LIFE INSURANCE' 
            WHEN de_mnemonic_class = 'PC' THEN 'PROPERTY AND CASUALTY INSURANCE' 
            WHEN de_mnemonic_class = 'HEALTH' THEN 'HEALTH INSURANCE'
       END AS title,
       de_name AS indicator,
       data_value AS indicator_value,
       display_order AS indicator_order,
       CASE WHEN de_mnemonic_class = 'LIFE' THEN 1 
            WHEN de_mnemonic_class = 'PC' THEN 2 
            WHEN de_mnemonic_class = 'HEALTH' THEN 3
       END AS sort_order
 FROM dsmpstg.r360_econ_facts_scores
    WHERE UPPER(de_mnemonic_class) IN ('LIFE','PC', 'HEALTH')
		ORDER BY indicator_order, sort_order;
	
GRANT SELECT ON r360_appdata.vw_sov_fin_sec_iicra TO R360_APPDATA_READER;


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\R360_Sovereign_Research\R360_Sovereign_Research_Scripts\views\vw_sov_peer_bicra_scores.sql

SET DEFINE OFF;

CREATE OR REPLACE VIEW r360_appdata.vw_sov_peer_bicra_scores AS 		
SELECT rep.country_code AS country_code,
       sbs.country_code AS peer_country_code, 
       sbs.country_name AS peer_country_name,
       sbs.score_code,
       sbs.score_name,
       sbs.score_value,
	   sbs.assessment_date,
	   score_sort_order,
       CASE 
        WHEN sbs.country_code = rep.country_code 
            THEN 'Y' 
        ELSE 'N' 
       END AS home_country_ind
 FROM r360_appdata.vw_sov_bicra_scores sbs
    INNER JOIN dsmpstg.r360_econ_peers rep ON sbs.country_code = rep.peer_country_code AND sbs.peer_ind = 'Y' 
			ORDER BY sbs.score_sort_order, home_country_ind DESC, sbs.country_name;
	
GRANT SELECT ON r360_appdata.vw_sov_peer_bicra_scores TO R360_APPDATA_READER;


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\R360_Sovereign_Research\R360_Sovereign_Research_Scripts\views\vw_sov_research_summary.sql

SET DEFINE OFF;

CREATE OR REPLACE VIEW r360_appdata.vw_sov_research_summary AS 			
WITH sov_research_summary AS
  (SELECT country_code, 
					'Regional Spotlight' AS title, 
					spotlight AS detail, 
					0 AS display_order, 
					last_modified_date 
		FROM dsmpstg.r360_econ_commentary_spot 
   UNION ALL 
   SELECT country_code, 
				  CASE WHEN display_order = 1 THEN 'Summary/Overview' 
						  WHEN display_order = 100 THEN 'Rating Action' 
						  WHEN display_order >= 200 AND display_order < 300 THEN 'Rationale' 
						  ELSE 'Outlook' 
				  END AS title, 
				  detail, 
				  display_order, 
				  last_modified_date 
      FROM dsmpstg.r360_econ_commentary_summary)
SELECT * FROM sov_research_summary
      ORDER BY display_order;
	  
GRANT SELECT ON r360_appdata.vw_sov_research_summary TO R360_APPDATA_READER;


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\R360_Sovereign_Research\R360_Sovereign_Research_Scripts\views\vw_sov_risk_econ_fin_indicators.sql

SET DEFINE OFF;

CREATE OR REPLACE VIEW r360_appdata.vw_sov_risk_econ_fin_indicators AS 		
WITH sov_risk_econ_fin_indicators AS 
	(SELECT dataset_id,
					country_code, 
					data_group,
					de_mnemonic_class AS grid_name, 
					de_name AS score_name,
					REPLACE(data_value, ',', '') AS score_value,
					CASE WHEN dp_context = 'Forecast' 
								THEN EXTRACT(YEAR FROM as_of_date) || 'F'
							ELSE 
								TO_CHAR(EXTRACT(YEAR FROM as_of_date))
					END AS fin_year,
					display_order,
					last_modified_date
			FROM dsmpstg.r360_econ_facts_scores
		WHERE UPPER(de_mnemonic_class) IN ('MONETARY DATA', 'GOVERNMENT DATA', 'BALANCE OF PAYMENTS DATA', 'EXTERNAL BALANCE SHEET', 'ECONOMIC DATA', 
																						'ECONOMIC RESILIENCE', 'ECONOMIC IMBALANCES', 'CREDIT RISK IN THE ECONOMY', 'COMPETITIVE DYNAMICS', 'SYSTEMWIDE FUNDING')
	UNION ALL 
	SELECT dataset_id,
				   country_code,
				   data_group,
				   de_class AS grid_name, 
				   de_name AS score_name,
				   data_value AS score_value,
				   CASE WHEN dp_context = 'FORECAST' 
							THEN EXTRACT(YEAR FROM as_of_date) || 'F'
						ELSE 
							TO_CHAR(EXTRACT(YEAR FROM as_of_date))
				   END AS fin_year, 
				   display_order,
				   last_modified_date
	  FROM dsmpstg.r360_credit_conditions) 
SELECT * FROM sov_risk_econ_fin_indicators
	ORDER BY grid_name, display_order, fin_year;
	
GRANT SELECT ON r360_appdata.vw_sov_risk_econ_fin_indicators TO R360_APPDATA_READER;


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\R360_USPF_MFE_V2_JAN_05_2024\Ratings_CallingScript.sql

spool Ratings_CallingScript.log

@R360_USPF_MFE_V2_JAN_05_2024/Views/VW_ISSUES_MATURITIES_USPF_PUBLIC.sql;
@R360_USPF_MFE_V2_JAN_05_2024/Views/VW_ISSUES_MATURITIES_USPF_PUBLIC_MIN_MAX_DATE.sql;

spool off;


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\R360_USPF_MFE_V2_JAN_05_2024\Ratings_RollBack_CallingScript.sql

spool Ratings_RollBack_CallingScript.log 

DROP VIEW R360_APPDATA.VW_ISSUES_MATURITIES_USPF_PUBLIC_MIN_MAX_DATE;
DROP VIEW R360_APPDATA.VW_ISSUES_MATURITIES_USPF_PUBLIC;

spool off


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\R360_USPF_MFE_V2_JAN_05_2024\Views\VW_ISSUES_MATURITIES_USPF_PUBLIC.sql

BEGIN

-- -----------------------------------------------------
-- 			VW_ISSUES_MATURITIES_USPF_PUBLIC
-- -----------------------------------------------------

CREATE OR REPLACE VIEW r360_appdata.VW_ISSUES_MATURITIES_USPF_PUBLIC AS

SELECT issue_name,
          (CASE
              WHEN TRIM (cusip) IS NULL THEN 'No Cusip Available'
              ELSE cusip
           END)
             cusip,
          maturity_date,
          rating_type,
          rating,
          rating_date,
          last_review_date,
          regulatory_identifier,
          action,
          creditwatch_outlook,
          creditwatch_outlook_date,
          coupon_rate,
          refunded,
          insurance_provider,
          InstrumentsAll.instrument_id,
          instrument_detail_id,
          rating_detail_id,
          rating_type_code,
          entity_id,
          debt_type_code,
          description,
          cins,
          isin,
          data_admin_date,
          instrument_type_code,
          series,
          security_id
     FROM (SELECT DISTINCT
                  curr_ins.instrument_name AS issue_name,
                  (CASE
                      WHEN (curr_ins.debt_type_code = 'COMMPAPER')
                      THEN
                         cp_identifiers_by_instrument.cp_cusip
                      ELSE
                         curr_ins.cusip
                   END)
                     AS cusip,
                  curr_ins.maturity_date,
                  curr_ins.rating_type_description AS rating_type,
                  curr_ins.current_rating_symbol AS rating,
                  curr_ins.rating_date,
                  review_history_lrd.last_review_date,
                  curr_ins.regulatory_indicator AS regulatory_identifier,
                  CASE
                     WHEN ( (    rating_details.rating_action_word <>
                                    'Affirmed'
                             AND rating_details.current_cw_ol_action_word
                                    IS NOT NULL))
                     THEN
                        (   (rating_details.rating_action_word || ' | ')
                         || rating_details.current_cw_ol_action_word)
                     WHEN ( (    rating_details.rating_action_word =
                                    'Affirmed'
                             AND rating_details.current_cw_ol_action_word
                                    IS NOT NULL))
                     THEN
                        rating_details.current_cw_ol_action_word
                     WHEN (rating_details.rating_action_word IS NULL)
                     THEN
                        rating_details.current_cw_ol_action_word
                     WHEN ( (    rating_details.rating_action_word <>
                                    'Affirmed'
                             AND rating_details.current_cw_ol_action_word
                                    IS NULL))
                     THEN
                        rating_details.rating_action_word
                     WHEN ( (    rating_details.rating_action_word =
                                    'Affirmed'
                             AND rating_details.current_cw_ol_action_word
                                    IS NULL))
                     THEN
                        rating_details.rating_action_word
                     ELSE
                        NULL
                  END
                     AS action,
                  rating_details.current_cw_ol AS creditwatch_outlook,
                  rating_details.current_cw_ol_date creditwatch_outlook_date,
                  (CASE
                      WHEN (curr_ins.coupon_rate IS NOT NULL)
                      THEN
                         (CAST (curr_ins.coupon_rate AS VARCHAR (100)) || '%')
                      ELSE
                         NULL
                   END)
                     AS coupon_rate,
                  instrument_details.refunded_ind AS refunded,
                  (  SELECT DISTINCT
                            LISTAGG (entity_short_name, ',')
                               WITHIN GROUP (ORDER BY entity_short_name ASC)
                               AS insurance_provider
                       FROM fgr.instrument_participants ip
                            INNER JOIN fgr.instr_dtl_credit_enh idc
                               ON ip.instrument_participant_id =
                                     idc.instrument_participant_id
                            INNER JOIN fgr.entity_names en
                               ON     en.entity_id = ip.entity_id
                                  AND en.CURR_IND = 'Y'
                      WHERE     ip.role_code = 'INSPRO'
                            AND ip.coverage_code = 'BOND'
                            AND ip.status_ind = 'A'
                            AND ip.instrument_participant_id IS NOT NULL
                            AND ip.instrument_id = curr_ins.instrument_id
                            AND idc.instrument_detail_id =
                                   curr_ins.instrument_detail_id
                   GROUP BY instrument_detail_id)
                     AS insurance_provider,
                  curr_ins.instrument_id,
                  curr_ins.instrument_detail_id,
                  curr_ins.rating_detail_id,
                  curr_ins.rating_type_code,
                  eip.entity_id,
                  curr_ins.debt_type_code,
                  debt_type_codes.description,
                  curr_ins.cins,
                  curr_ins.isin,
                  curr_ins.data_admin_date,
                  curr_ins.instrument_type_code
             FROM (SELECT *
                     FROM R360_APPDATA.vw_entity_instruments_participants
                    WHERE     status_ind = 'A'
                          AND role_code IN ('ISSUER',
                                            'OBLIGOR',
                                            'COISSUER',
                                            'SERVICER')) eip
                  INNER JOIN
                  (SELECT *
                     FROM R360_APPDATA.vw_current_instruments_with_active_rating_ind
                    WHERE     debt_type_code NOT IN ('FER',
                                                     'FINPROG',
                                                     'FSR',
                                                     'RC')
                          AND sector_code = 'PUBFIN'
                          AND prelim_ind = 'N'
                          AND program_type_code <> 'COVERPOOL'
                          AND active_rating_ind = 'Y') curr_ins
                     ON eip.instrument_id = curr_ins.instrument_id
                  -- join the result with debt_type_codes to get instrument debt type description and sort_order
                  INNER JOIN (SELECT debt_type_code, description, sort_order
                                FROM SPAPP.DEBT_TYPE_CODES
                               WHERE active_ind = 'Y') debt_type_codes
                     ON curr_ins.debt_type_code =
                           debt_type_codes.debt_type_code
                  -- join the result with REVIEW_HISTORY to get last review date for instuments rating
                  LEFT OUTER JOIN
                  (  SELECT rating_detail_id,
                            MAX (last_review_date) AS last_review_date
                       FROM FGR.REVIEW_HISTORY
                      WHERE     source_active_ind = 'Y'
                            AND ack_status = 'Y'
                            AND ciq_rep_ind = 1
                   GROUP BY rating_detail_id) review_history_lrd
                     ON curr_ins.rating_detail_id =
                           review_history_lrd.rating_detail_id
                  -- join the result with cp_identifiers to get CUSIP for instuments
                  LEFT OUTER JOIN
                  (  SELECT instrument_id,
                            LISTAGG (cusip6, ', ')
                               WITHIN GROUP (ORDER BY cusip6 ASC)
                               AS cp_cusip
                       FROM FGR.CP_IDENTIFIERS
                   GROUP BY instrument_id) cp_identifiers_by_instrument
                     ON curr_ins.instrument_id =
                           cp_identifiers_by_instrument.instrument_id
                  --join the result Rating Details to get the creditwatch outlook and date
                  INNER JOIN
                  (SELECT source_rating_id,
                          current_cw_ol,
                          current_cw_ol_date,
                          rating_action_word,
                          current_cw_ol_action_word
                     FROM FGR_PRIME.RATING_DETAILS
                    WHERE ciq_rep_ind = 1 AND ack_status = 'Y')
                  rating_details
                     ON curr_ins.non_affirm_rating_id =
                           RATING_DETAILS.source_rating_id
                  -- join result with issue_type code and debt_type_code
                  LEFT OUTER JOIN
                  (SELECT issue_type_code, description
                     FROM (SELECT issue_type_code, description
                             FROM SPAPP.ISSUE_TYPE_CODES
                            WHERE active_ind = 'Y'
                           UNION ALL
                           SELECT debt_type_code, description
                             FROM SPAPP.DEBT_TYPE_CODES
                            WHERE active_ind = 'Y')) issue_debt
                     ON curr_ins.instrument_type_code =
                           issue_debt.issue_type_code
                  INNER JOIN
                  (SELECT refunded_ind, instrument_detail_id
                     FROM FGR_PRIME.INSTRUMENT_DETAILS) instrument_details
                     ON curr_ins.instrument_detail_id =
                           instrument_details.instrument_detail_id)
          InstrumentsAll
          INNER JOIN
          (SELECT series, instrument_id, security_id
             FROM R360_APPDATA.VW_ISSUESMATURITIES_SECURITY_INSTRUMENTS)
          instruments
             ON InstrumentsAll.instrument_id = instruments.instrument_id

GRANT SELECT ON r360_appdata.VW_ISSUES_MATURITIES_USPF_PUBLIC TO R360_APPDATA_READER;

COMMIT;
END;
/


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\R360_USPF_MFE_V2_JAN_05_2024\Views\VW_ISSUES_MATURITIES_USPF_PUBLIC_MIN_MAX_DATE.sql

BEGIN

-- -----------------------------------------------------
-- 			VW_ISSUES_MATURITIES_USPF_PUBLIC_MIN_MAX_DATE
-- -----------------------------------------------------

CREATE OR REPLACE VIEW r360_appdata.VW_ISSUES_MATURITIES_USPF_PUBLIC_MIN_MAX_DATE AS

SELECT eip.entity_id,
            b.security_id,
            extract(year from MIN (a.Maturity_date)) from_year,
            extract(year from MAX (a.Maturity_date)) to_year
       FROM R360_APPDATA.vw_current_instruments_with_active_rating_ind a
            INNER JOIN R360_APPDATA.VW_ISSUESMATURITIES_SECURITY_INSTRUMENTS b
               ON (a.instrument_id = b.instrument_id)
            INNER JOIN R360_APPDATA.vw_entity_instruments_participants eip
               ON (    a.instrument_id = eip.instrument_id
                   AND status_ind = 'A'
                   AND role_code IN ('ISSUER',
                                     'OBLIGOR',
                                     'COISSUER',
                                     'SERVICER'))
      WHERE     a.debt_type_code NOT IN ('FER',
                                         'FINPROG',
                                         'FSR',
                                         'RC')
            AND a.sector_code = 'PUBFIN'
            AND a.prelim_ind = 'N'
            AND a.program_type_code <> 'COVERPOOL'
            AND a.active_rating_ind = 'Y'
   GROUP BY entity_id, security_id

GRANT SELECT ON r360_appdata.VW_ISSUES_MATURITIES_USPF_PUBLIC_MIN_MAX_DATE TO R360_APPDATA_READER;

COMMIT;
END;
/


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\RATINGS_23.09\DDL\CREATE\vw_criteria_articles_public.sql

SET DEFINE OFF;

CREATE OR REPLACE VIEW r360_appdata.vw_criteria_articles AS 
SELECT ao.article_id,
				REPLACE(REPLACE(ao.preferred_title, '<br>', ' '), '<BR>', ' ') AS title,
				ao.article_date,
				CASE WHEN (emp.employee_name IS NULL OR emp.employee_name = 'Standard & Poor''s') 
							THEN 'S&P Global Ratings'
					  WHEN emp.mi IS NULL 
							THEN emp.first_name || ' ' || emp.last_name_from_source 
					  ELSE emp.first_name || ' ' || emp.mi || ' ' || emp.last_name_from_source 
				END AS author,
				ctm.criteria_type_id,
				ct.criteria_type,
				CASE
				  WHEN ao.preferred_title LIKE 'ARCHIVE%' 
						THEN 'Y'
				  ELSE 'N' 
				END AS archive_ind
	  FROM fgr.article_objects ao
			JOIN fgr.article_relationships ar 
					ON ao.article_id = ar.article_id
			JOIN spapp.criteria_subject_codes csc 
					ON ar.relate_id = csc.subject_code
			JOIN r360_appdata.criteria_type_map ctm 
					ON csc.menu_code = ctm.menu_code
			JOIN r360_appdata.criteria_types ct 
					ON ctm.criteria_type_id = ct.criteria_type_id
			LEFT JOIN fgr.article_users au 
					ON ao.article_id = au.article_id 
						AND au.user_role = 'AUTHOR' AND au.ack_status IN ('D', 'Y') AND au.ciq_rep_ind = 1 
			LEFT JOIN spapp.employees emp 
					ON au.user_id = emp.employee_id 
						AND emp.active_ind = 'Y'
	  WHERE ar.relate_ind = 'S' AND ar.status_ind = 'A' AND ar.ack_status IN ('D', 'Y') AND ar.ciq_rep_ind = 1
			AND ao.fgr_status = 'A' AND ao.status_ind = 'A' AND ao.ack_status IN ('D', 'Y') AND ao.ciq_rep_ind = 1 AND ao.language_code = 'EN'  
			AND ao.article_sub_type IN ('CRITERIA', 'CRITERIA_GUIDANCE', 'COMMENTS') 
			AND csc.status_ind = 'A';
		  
GRANT SELECT ON r360_appdata.vw_criteria_articles TO R360_APPDATA_READER;


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\RATINGS_23.09\DDL\CREATE\vw_criteria_articles_public_rollback.sql

DROP VIEW r360_appdata.vw_criteria_articles;


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\RATINGS_23.09\DDL\CREATE\vw_dashboard_contacts_non_uspf.sql

SET DEFINE OFF;

CREATE OR REPLACE VIEW r360_appdata.vw_dashboard_contacts_non_uspf AS 
WITH cmp_emp_vw AS 
	(SELECT sp_id, core_id FROM gs_gc.cmp_employee_abstraction_vw WHERE core_id IS NOT NULL),
dashboard_contacts AS 
	(SELECT CASE 
						WHEN emp.mi IS NULL 
							THEN emp.first_name || ' ' || emp.last_name_from_source 
						ELSE emp.first_name || ' ' || emp.mi || ' ' || emp.last_name_from_source 
					END AS full_name,
				   CASE 
						WHEN ea_dept_role_code = 'TEAMLEADER' 
								THEN ea_dept_role_name 
							ELSE 'Primary Credit Analyst' 
					END AS ROLE, 
				   emp.telephone_num AS phone, 
				   emp.email_address AS email, 
				   ea.relate_id AS entity_id, 
				   'Analytical' AS contact_type, 
				   cev.sp_id AS spid, 
				   ea.listing_order
    FROM fgr_prime.entity_analysts ea 
      INNER JOIN spapp.employees emp ON ea.analyst_id = emp.employee_id AND emp.active_ind = 'Y'
      INNER JOIN cmp_emp_vw cev ON emp.employee_id = cev.core_id 
        WHERE ea.relate_ind = 'E' AND ea.ciq_rep_ind = 1 
            AND ea.ea_dept_role_code IN ('ORGANALYST', 'PRIMANALST', 'TEAMLEADER')
  UNION ALL
  SELECT first_name || ' ' || last_name AS full_name, 
				role_display_name AS ROLE, 
				phone, 
				email, 
				to_number(org_id) AS entity_id,
				'Commercial' AS contact_type, 
				spid, 
				row_number() OVER (PARTITION BY org_id ORDER BY role_display_name ASC) AS listing_order
    FROM dsmpstg.r360_per_rel_commercial WHERE spid LIKE 'P%')
 SELECT ear.entity_id,
             dc.full_name,
             dc.ROLE,
             dc.phone,
             dc.email,
             dc.contact_type,
             dc.spid
        FROM r360_appdata.vw_entity_active_rating ear
             INNER JOIN dashboard_contacts dc ON  ear.entity_id = dc.entity_id AND ear.active_rating_ind = 'Y'
    ORDER BY contact_type, listing_order;
		
GRANT SELECT ON r360_appdata.vw_dashboard_contacts_non_uspf TO R360_APPDATA_READER;


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\RATINGS_23.09\DDL\CREATE\vw_dashboard_contacts_non_uspf_rollback.sql

DROP VIEW r360_appdata.vw_dashboard_contacts_non_uspf;


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\RATINGS_23.09\DDL\CREATE\VW_ENTITY_CURRENT_RATING_PUBLIC.sql

BEGIN
	
SET DEFINE OFF;

CREATE OR REPLACE VIEW r360_appdata.VW_ENTITY_CURRENT_RATING_PUBLIC AS 
WITH current_Rating
        AS (SELECT CURRENT_RATING_SYMBOL,
                   DEBT_TYPE_DESC,
                   RATING_TYPE_CODE,
                   RATING_TYPE_DESC,
                   ACTION,
                   LATEST_NON_AFFIRM_CW_OL,
                   ENTITY_ID,
                   RATING_DATE,
                   LAST_REVIEW_DATE,
                   LATEST_NON_AFFIRM_CW_OL_DATE,
                   (CASE
                       WHEN     DEBT_TYPE_CODE = 'ICR'
                            AND RATING_TYPE_CODE = 'FCLONG'
                       THEN
                          1
                       WHEN     DEBT_TYPE_CODE = 'ICR'
                            AND RATING_TYPE_CODE = 'STDLONG'
                       THEN
                          2
                       WHEN     DEBT_TYPE_CODE = 'ICR'
                            AND RATING_TYPE_CODE = 'FCSHORT'
                       THEN
                          3
                       WHEN     DEBT_TYPE_CODE = 'ICR'
                            AND RATING_TYPE_CODE = 'STDSHORT'
                       THEN
                          4
                       WHEN     DEBT_TYPE_CODE = 'FSR'
                            AND RATING_TYPE_CODE = 'FCLONG'
                       THEN
                          5
                       WHEN     DEBT_TYPE_CODE = 'FSR'
                            AND RATING_TYPE_CODE = 'STDLONG'
                       THEN
                          6
                       WHEN     DEBT_TYPE_CODE = 'FSR'
                            AND RATING_TYPE_CODE = 'FCSHORT'
                       THEN
                          7
                       WHEN     DEBT_TYPE_CODE = 'FSR'
                            AND RATING_TYPE_CODE = 'STDSHORT'
                       THEN
                          8
                       WHEN     DEBT_TYPE_CODE = 'FER'
                            AND RATING_TYPE_CODE = 'FCLONG'
                       THEN
                          9
                       WHEN     DEBT_TYPE_CODE = 'FER'
                            AND RATING_TYPE_CODE = 'STDLONG'
                       THEN
                          10
                       WHEN     DEBT_TYPE_CODE = 'FER'
                            AND RATING_TYPE_CODE = 'FCSHORT'
                       THEN
                          11
                       WHEN     DEBT_TYPE_CODE = 'FER'
                            AND RATING_TYPE_CODE = 'STDSHORT'
                       THEN
                          12
                       WHEN     DEBT_TYPE_CODE = 'RC'
                            AND RATING_TYPE_CODE = 'FCLONG'
                       THEN
                          13
                       WHEN     DEBT_TYPE_CODE = 'RC'
                            AND RATING_TYPE_CODE = 'STDLONG'
                       THEN
                          14
                       WHEN     DEBT_TYPE_CODE = 'RC'
                            AND RATING_TYPE_CODE = 'FCSHORT'
                       THEN
                          15
                       WHEN     DEBT_TYPE_CODE = 'RC'
                            AND RATING_TYPE_CODE = 'STDSHORT'
                       THEN
                          16
                       WHEN     DEBT_TYPE_CODE = 'FINPROG'
                            AND RATING_TYPE_CODE = 'FCLONG'
                       THEN
                          17
                       WHEN     DEBT_TYPE_CODE = 'FINPROG'
                            AND RATING_TYPE_CODE = 'STDLONG'
                       THEN
                          18
                       WHEN     DEBT_TYPE_CODE = 'FINPROG'
                            AND RATING_TYPE_CODE = 'FCSHORT'
                       THEN
                          19
                       WHEN     DEBT_TYPE_CODE = 'FINPROG'
                            AND RATING_TYPE_CODE = 'STDSHORT'
                       THEN
                          20
                       WHEN     DEBT_TYPE_CODE = 'ICR'
                            AND (    RATING_TYPE_CODE <> 'FCLONG'
                                 AND RATING_TYPE_CODE <> 'STDLONG'
                                 AND RATING_TYPE_CODE <> 'FCSHORT'
                                 AND RATING_TYPE_CODE <> 'STDSHORT')
                       THEN
                          22
                       ELSE
                          23
                    END)
                      AS RATINGS_ORDER
              FROM R360_APPDATA.VW_ENTITY_RATINGS_PUBLIC
             WHERE CURRENT_RATING_SYMBOL <> 'NR'
            UNION ALL
            SELECT CURRENT_RATING_SYMBOL,
                   DEBT_TYPE_DESC,
                   RATING_TYPE_CODE,
                   RATING_TYPE_DESC,
                   ACTION,
                   LATEST_NON_AFFIRM_CW_OL,
                   ENTITY_ID,
                   RATING_DATE,
                   LAST_REVIEW_DATE,
                   LATEST_NON_AFFIRM_CW_OL_DATE,
                   21 AS RATINGS_ORDER
              FROM R360_APPDATA.VW_ENTITY_RATINGS_PUBLIC
             WHERE RATING_TYPE_CODE LIKE '%PRLM%'),
        CURR_RAT_FINLA
        AS (SELECT ENTITY_ID,
                   CURRENT_RATING_SYMBOL,
                   DEBT_TYPE_DESC,
                   RATING_TYPE_CODE,
                   RATING_TYPE_DESC,
                   ACTION,
                   LATEST_NON_AFFIRM_CW_OL,
                   RATINGS_ORDER,
                   RATING_DATE,
                   LAST_REVIEW_DATE,
                   LATEST_NON_AFFIRM_CW_OL_DATE,
                   ROW_NUMBER ()
                   OVER (PARTITION BY ENTITY_ID ORDER BY RATINGS_ORDER ASC)
                      RWNUM
              FROM current_Rating cr)
   SELECT ENTITY_ID,
          CURRENT_RATING_SYMBOL,
          DEBT_TYPE_DESC,
          RATING_TYPE_CODE,
          RATING_TYPE_DESC,
          ACTION,
          LATEST_NON_AFFIRM_CW_OL,
          RATINGS_ORDER,
          RATING_DATE,
          LAST_REVIEW_DATE,
          LATEST_NON_AFFIRM_CW_OL_DATE,
          'N' AS CONFIDENTIALITY_IND,
          'PUB' AS CONFIDENTIAL_CATEGORY_CODE,
          'Public' AS CONFIDENTIAL_CATEGORY_DESC
     FROM CURR_RAT_FINLA
    WHERE RWNUM = 1
    
GRANT SELECT ON r360_appdata.VW_ENTITY_CURRENT_RATING_PUBLIC TO R360_APPDATA_READER;    

COMMIT;
END;
/


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\RATINGS_23.09\DDL\CREATE\VW_ENTITY_CURRENT_RATING_PUBLIC_ROLLBACK.sql

DROP VIEW r360_appdata.VW_ENTITY_CURRENT_RATING_PUBLIC;


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\RATINGS_23.09\DDL\CREATE\vw_entity_details_public.sql

SET DEFINE OFF;

CREATE OR REPLACE VIEW r360_appdata.vw_entity_details AS 
WITH core_org_key_instn_id_mapping AS (
    SELECT core.fins_identifier AS entity_id,
				   snl.fins_identifier AS key_instn_id
			FROM   gs_gc.financial_institution_id snl
			INNER JOIN gs_gc.financial_institution_id core ON snl.lnk_financial_institution_oid = core.lnk_financial_institution_oid
				  WHERE snl.fins_id_context = 'SNL'      
						AND snl.data_source_id IS NOT NULL      
						AND snl.end_datetime IS NULL
						AND core.fins_id_context = 'CORE'       
						AND core.end_datetime IS NULL
        ),
entity_ticker AS 
  (SELECT ccr.identifiervalue AS entity_id, 
					listagg(ce.exchangesymbol || ': ' || cti.tickersymbol, ', ') WITHIN GROUP (ORDER BY cti.tickersymbol ASC, tradingitemid ASC) AS ticker 
			FROM capiq.ciqcompanycrossref ccr 
			  JOIN (capiq.ciqfoundationsecurity cfs 
					JOIN capiq.ciqtradingitem cti ON cfs.securityid = cti.securityid
					JOIN capiq.ciqexchange ce ON cti.exchangeid = ce.exchangeid) ON ccr.companyid = cfs.companyid
			WHERE ccr.identifiervalue IS NOT NULL 
					AND ccr.identifiertypeid = 73 
					AND ce.exchangesymbol IS NOT NULL 
					AND cfs.securitysubtypeid IN (1, 2) 
					AND cti.primaryflag = 1 
					AND cti.tickersymbol IS NOT NULL 
					AND cti.tradingitemstatusid = 15
			GROUP BY ccr.identifiervalue
	) 
SELECT e.entity_id,
			om.key_instn_id,
			en.entity_name, 
			et.ticker,
			e.primary_sector_code, 
			e.primary_sub_sector_code, 
			e.country_code,
			ear.active_rating_ind,
			CASE WHEN (e.primary_sector_code = 'GLOBISS' 
						AND e.primary_sub_sector_code IN ('CORP', 'UTIL', 'FI', 'INFRAFIN', 'LEVFIN')  
						 AND e.country_code NOT IN ('RUS', 'JPN', 'ISR', 'CHN', 'TWN'))
				  THEN 'Y'
				ELSE 'N'
			END as cra_ind       
FROM r360_appdata.vw_entity_active_rating ear 
			INNER JOIN fgr.entities e ON ear.entity_id = e.entity_id 
			INNER JOIN spapp.departments d ON e.dept_code = d.department_id
			INNER JOIN fgr.entity_names en ON e.entity_id = en.entity_id
			INNER JOIN core_org_key_instn_id_mapping om ON om.entity_id = to_char(en.entity_id)
			LEFT OUTER JOIN entity_ticker et ON om.entity_id = et.entity_id
			  WHERE e.source_system = 'CORE' AND d.active_ind = 'Y'
					AND en.curr_ind = 'Y' AND en.source_system = 'CORE';
		
GRANT SELECT ON r360_appdata.vw_entity_details TO R360_APPDATA_READER;


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\RATINGS_23.09\DDL\CREATE\vw_entity_details_public_rollback.sql

DROP VIEW r360_appdata.vw_entity_details;


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\RATINGS_23.09\DDL\CREATE\VW_ENTITY_RATINGS_HISTORY_TAC_PVT.sql

BEGIN

-- -----------------------------------------------------
-- 			VW_ENTITY_RATINGS_HISTORY_TAC_PVT
-- -----------------------------------------------------

CREATE OR REPLACE VIEW r360_appdata.VW_ENTITY_RATINGS_HISTORY_TAC_PVT AS

SELECT odt.ORG_ID                 AS ENTITY_ID,
           odt.DEBT_TYPE_CODE                 AS DEBT_TYPE_CODE,
           odtr.RATING_TYPE_CODE              AS RATING_TYPE_CODE,
           rtc.DESCRIPTION                    AS RATING_TYPE_DESCRIPTION,
           dr.CURRENT_RATING_SYMBOL           AS RATING,
           odtr.RATING_DATE                   AS RATING_DATE,
           CASE
               WHEN ((    dr.rating_action_word <> 'Affirmed'
                      AND dr.current_cw_ol_action_word IS NOT NULL))
               THEN
                   (   (dr.rating_action_word || ' | ')
                    || dr.current_cw_ol_action_word)
               WHEN ((    dr.rating_action_word <> 'Affirmed'
                      AND dr.current_cw_ol_action_word IS NULL))
               THEN
                   dr.rating_action_word
               WHEN (dr.rating_action_word IS NULL)
               THEN
                   dr.current_cw_ol_action_word
               WHEN ((    dr.rating_action_word = 'Affirmed'
                      AND dr.current_cw_ol_action_word IS NOT NULL))
               THEN
                   dr.current_cw_ol_action_word
               WHEN ((    dr.rating_action_word = 'Affirmed'
                      AND dr.current_cw_ol_action_word IS NULL))
               THEN
                   'Deleted Row'
               ELSE
                   NULL
           END                                AS ACTION,
           dr.CURRENT_CW_OL                   AS CREDITWATCH_OUTLOOK,
           dr.CURRENT_CW_OL_DATE              AS CREDITWATCH_OUTLOOK_DATE,
           odtr.ORG_DEBT_TYPE_RATING_ID       AS RATING_DETAIL_ID,
           odtr.DATA_ADMIN_DATE               AS DATA_ADMIN_DATE,
           odtr.CONFIDENTIALITY_IND           AS CONFIDENTIALITY_IND,
           odtr.CONFIDENTIAL_CATEGORY_CODE    AS CONFIDENTIAL_CATEGORY_CODE
        FROM CORE.ORG_DEBT_TYPES odt
          JOIN CORE.ORG_DEBT_TYPE_RATINGS odtr
             ON odtr.ORG_DEBT_TYPE = odt.ORG_DEBT_TYPE_ID
          INNER JOIN R360_APPDATA.VW_RATING_TYPE_CODES rtc
             ON rtc.RATING_TYPE_CODE = odtr.RATING_TYPE_CODE
          INNER JOIN DERIVATION.deriv_rating dr
             ON dr.RATING_ID = odtr.ORG_DEBT_TYPE_RATING_ID
    WHERE dr.active_flag = 'Y' AND dr.RATING_ACTION_TYPE <> 'Affirmed'
    and odt.DEBT_TYPE_CODE='TACASSES'
    and odtr.RATING_TYPE_CODE='TACASSES'

GRANT SELECT ON r360_appdata.VW_ENTITY_RATINGS_HISTORY_TAC_PVT TO R360_APPDATA_READER;

COMMIT;
END;
/


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\RATINGS_23.09\DDL\CREATE\VW_ENTITY_RATINGS_HISTORY_TAC_PVT_ROLLBACK.sql

DROP VIEW r360_appdata.VW_ENTITY_RATINGS_HISTORY_TAC_PVT;


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\RATINGS_23.09\DDL\CREATE\VW_ENTITY_RATINGS_PEERS_PUBLIC.sql

BEGIN
	
SET DEFINE OFF;

CREATE OR REPLACE VIEW r360_appdata.VW_ENTITY_RATINGS_PEERS_PUBLIC AS 

WITH Result_qry
        AS (SELECT ENTITY_ID,
                   CURRENT_RATING_SYMBOL,
                   DEBT_TYPE_CODE,
                   RATING_TYPE_CODE,
                   RATING_DATE,
                   ACTION,
                   RATING_DETAIL_ID,
                   DATA_ADMIN_DATE,
                   ROW_NUMBER ()
                   OVER (PARTITION BY ENTITY_ID, RATING_TYPE_CODE
                         ORDER BY RATING_DATE DESC)
                      ROWNUMBER,
                   LAST_REVIEW_DATE,
                   LATEST_NON_AFFIRM_CW_OL,
                   LATEST_NON_AFFIRM_CW_OL_DATE,
                   'Public' AS CONFIDENTIAL_CATEGORY_CODE
              FROM R360_APPDATA.VW_ENTITY_RATINGS_PUBLIC
             WHERE     RATING_TYPE_CODE IN ('FCLONG', 'STDLONG')
                   AND DEBT_TYPE_CODE = 'ICR')
   SELECT PVT.ENTITY_ID,
          ENTITY_LEGAL_NAME,
          RATING_TYPE_CODE,
          CURRENT_RATING_SYMBOL,
          RATING_DATE,
          LAST_REVIEW_DATE,
          LATEST_NON_AFFIRM_CW_OL,
          LATEST_NON_AFFIRM_CW_OL_DATE,
          ACTION,
          CONFIDENTIAL_CATEGORY_CODE,
          DEBT_TYPE_CODE,
          RATING_DETAIL_ID,
          DATA_ADMIN_DATE
     FROM Result_qry PVT
          LEFT JOIN fgr.entity_names EN
             ON (PVT.ENTITY_ID = EN.ENTITY_ID AND EN.CURR_IND = 'Y')
    WHERE ROWNUMBER = 1
    
GRANT SELECT ON r360_appdata.VW_ENTITY_RATINGS_PEERS_PUBLIC TO R360_APPDATA_READER;    

COMMIT;
END;
/


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\RATINGS_23.09\DDL\CREATE\VW_ENTITY_RATINGS_PEERS_PUBLIC_ROLLBACK.sql

DROP VIEW r360_appdata.VW_ENTITY_RATINGS_PEERS_PUBLIC;


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\RATINGS_23.09\DDL\CREATE\vw_investor_sentiment_sector_list.sql

CREATE OR REPLACE VIEW r360_appdata.vw_investor_sentiment_sector_list AS 
SELECT s.rating_industry_id  AS industry_id,
			  s.is_sector_id AS sector_id,
			  s.is_sector_parent_id AS parent_sector_id,
			  s.is_sector AS sector_name,
			  p.is_sector AS parent_sector_name
    FROM sec_stg.inv_sentiment_sector_stg s
		LEFT JOIN sec_stg.inv_sentiment_sector_stg p 
				ON s.is_sector_parent_id = p.is_sector_id AND p.active_flg = 'Y' AND s.active_flg = 'Y'  
		ORDER BY COALESCE(p.is_sector, s.is_sector), s.is_sector_id;
	  
GRANT SELECT ON r360_appdata.vw_investor_sentiment_sector_list TO R360_APPDATA_READER;


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\RATINGS_23.09\DDL\CREATE\vw_investor_sentiment_sector_list_rollback.sql

DROP VIEW r360_appdata.vw_investor_sentiment_sector_list;


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\RATINGS_23.09\DDL\CREATE\vw_my_rating.sql

SET DEFINE OFF;

CREATE OR REPLACE VIEW r360_appdata.vw_my_rating AS 
WITH 
icr_ratings AS       
   (SELECT rd.rating_id as entity_id, rd.current_rating_symbol AS rating, 
           CASE WHEN rtc.prelim_ind = 'Y' THEN 'Preliminary Rating' ELSE dt.description END AS debt_type, 
           rtc.description AS rating_type, rdna.current_cw_ol AS creditwatch_outlook, rd.debt_type_code,
		   rd.rating_type_code, rtc.long_short_ind, rtc.rd7_sort_order, rtc.prelim_ind
    FROM   fgr_prime.rating_details rd 
    INNER JOIN spapp.debt_type_codes dt ON rd.debt_type_code = dt.debt_type_code AND dt.active_ind = 'Y'
    INNER JOIN spapp.rating_type_codes rtc ON rtc.rating_type_code = rd.rating_type_code
	INNER JOIN r360_appdata.rating_type_code_map rtm ON rtc.rating_type_code = rtm.rating_type_code 
	  AND rtm.actv_flag = 'Y' AND rtm.process_ind = 'Y'
    INNER JOIN fgr_prime.rating_details rdna ON rdna.source_rating_id = rd.non_affirm_rating_id 
	  AND rdna.ack_status = 'Y' AND rdna.ciq_rep_ind = 1
    WHERE rd.ack_status = 'Y' AND rd.ciq_rep_ind = 1 AND rd.rating_ind = 'E' AND rd.srd_curr_ind = 'Y'
	  AND rd.debt_type_code = 'ICR' AND rd.current_rating_symbol <> 'NR'),
non_icr_ratings AS 
   (SELECT ei.entity_id, rd.current_rating_symbol AS rating, 
           CASE WHEN rtc.prelim_ind = 'Y' THEN 'Preliminary Rating' ELSE dt.description END AS debt_type, 
		   rtc.description AS rating_type, rdna.current_cw_ol AS creditwatch_outlook, rd.debt_type_code, 
		   rd.rating_type_code, rtc.long_short_ind, rtc.rd7_sort_order, rtc.prelim_ind	   
    FROM fgr.entity_instruments ei 
    INNER JOIN fgr_prime.rating_details rd ON rd.rating_id = ei.instrument_id 
	  AND rd.ack_status = 'Y' AND rd.ciq_rep_ind = 1 AND rd.rating_ind = 'I' 
    INNER JOIN spapp.debt_type_codes dt ON rd.debt_type_code = dt.debt_type_code AND dt.active_ind = 'Y'
    INNER JOIN spapp.rating_type_codes rtc ON rtc.rating_type_code = rd.rating_type_code
	INNER JOIN r360_appdata.rating_type_code_map rtm ON rtc.rating_type_code = rtm.rating_type_code 
	  AND rtm.actv_flag = 'Y' AND rtm.process_ind = 'Y'
    INNER JOIN fgr_prime.rating_details rdna ON rdna.source_rating_id = rd.non_affirm_rating_id 
	  AND rdna.ack_status = 'Y' AND rdna.ciq_rep_ind = 1
    WHERE ei.role_code = 'ISSUER' AND ei.status_ind = 'A' AND ei.ciq_rep_ind = 1
	  AND rd.debt_type_code IN ('FSR', 'FER', 'FINPROG', 'RC')	
      AND rd.srd_curr_ind = 'Y' AND rd.source_rating_ind = 'D' AND rd.current_rating_symbol <> 'NR'),
entity_ratings AS          					    
   (SELECT *
    FROM   icr_ratings   
    UNION ALL
    SELECT *
    FROM   non_icr_ratings),   
entity_ratings_with_sort_order AS 
   (SELECT er.*, 
           CASE WHEN er.debt_type_code = 'ICR' AND er.rating_type_code = 'FCLONG'   THEN 100
             WHEN er.debt_type_code = 'ICR' AND er.rating_type_code = 'STDLONG'  THEN 101
             WHEN er.debt_type_code = 'ICR' AND er.rating_type_code = 'FCSHORT'  THEN 102
             WHEN er.debt_type_code = 'ICR' AND er.rating_type_code = 'STDSHORT' THEN 103            
             WHEN er.debt_type_code = 'FSR' AND er.prelim_ind = 'N' THEN 200      
             WHEN er.debt_type_code = 'FER' AND er.prelim_ind = 'N'THEN 300                      
             WHEN er.debt_type_code = 'RC'  AND er.prelim_ind = 'N'THEN 400       
             WHEN er.debt_type_code = 'FINPROG' AND er.prelim_ind = 'N' THEN 500                 
             WHEN er.prelim_ind	= 'Y' THEN 600            
             WHEN er.debt_type_code = 'ICR' AND er.rating_type_code NOT IN ('FCLONG', 'STDLONG', 'FCSHORT', 'STDSHORT') THEN 700
		   END AS sort_order, 
	       'Y' AS entity_rating_ind
    FROM   entity_ratings er),   
instrument_rating_status AS 
       (SELECT i.instrument_id, 
			   rd.detail_id AS instrument_detail_id,
			   rd.rating_detail_id ,
			   rd.current_rating_symbol as rating,
			   dtc.description as debt_type,
			   rtc.description as rating_type,
			   CASE WHEN (rd.rating_code NOT IN('NR', 'NR/NR') AND NOT REGEXP_LIKE(rd.rating_code, '.[^/]NR') 
			              AND COALESCE(ids.source_status_ind, i.source_status_ind) <> 'Y') 
						  OR                         
                         (trunc(SYSDATE) - trunc(rd.data_admin_date) <= 90) THEN
                      'Y'
               ELSE
                      'N'
               END rating_status,
               rtc.long_short_ind, 
			   rtc.rd7_sort_order, 
			   rtc.prelim_ind			 
        FROM   fgr.instruments i,
			   fgr_prime.instrument_details ids,
			   fgr_prime.rating_details rd,
			   spapp.rating_type_codes rtc,
			   r360_appdata.rating_type_code_map rtm,
			   spapp.debt_type_codes dtc      
        WHERE  i.instrument_id = rd.rating_id
           AND i.instrument_id = ids.instrument_id(+)
           AND rd.rating_id = ids.instrument_id(+)
           AND rd.detail_id = ids.instrument_detail_id(+)
           AND rd.rating_type_code =  rtc.rating_type_code
           AND rtc.rating_type_code = rtm.rating_type_code 
           AND rd.debt_type_code = dtc.debt_type_code          
           AND rd.ack_status = 'Y' AND rd.ciq_rep_ind = 1 
           AND rd.rating_ind = 'I' AND rd.srd_curr_ind = 'Y' 
           AND i.sector_code = 'GLOBISS' AND i.program_type_code <> 'COVERPOOL'          
		   AND rtc.prelim_ind = 'N' AND rtm.actv_flag = 'Y' AND rtm.process_ind = 'Y'),
u_entity_instruments AS
   (SELECT entity_id, instrument_id 
    FROM   fgr.entity_instruments 
	WHERE  role_code = 'ISSUER' AND status_ind = 'A' AND ciq_rep_ind = 1
    UNION ALL
    SELECT entity_id, instrument_id 
	FROM   fgr.instrument_participants 
	WHERE  role_code IN ('OBLIGOR', 'COISSUER', 'SERVICER') AND status_ind = 'A' AND ciq_rep_ind = 1), 
program_maturity_ratings AS    
   (SELECT uei.entity_id, NULL AS rating, NULL as debt_type, NULL rating_type, 
           NULL AS creditwatch_outlook, NULL AS debt_type_code, NULL AS rating_type_code,  
	        NULL AS long_short_ind, NULL AS rd7_sort_order, NULL AS prelim_ind, 
			900 AS sort_order, 'N' AS entity_rating_ind
    FROM   u_entity_instruments uei
    WHERE EXISTS (SELECT 1 
	              FROM   instrument_rating_status  ir    
                  WHERE  ir.instrument_id = uei.instrument_id AND ir.rating_status = 'Y')),
all_ratings AS 
   (SELECT * FROM entity_ratings_with_sort_order	 
    UNION
	SELECT * FROM program_maturity_ratings),	 
my_rating AS
   (SELECT entity_id, rating, debt_type, rating_type, creditwatch_outlook, entity_rating_ind, 
           ROW_NUMBER() OVER(PARTITION BY entity_id ORDER BY sort_order, long_short_ind, rd7_sort_order) AS rank_num
    FROM   all_ratings) 
SELECT entity_id, rating, debt_type, rating_type, creditwatch_outlook, entity_rating_ind
FROM my_rating
WHERE rank_num = 1; 
  
GRANT SELECT ON r360_appdata.vw_my_rating TO r360_appdata_reader;


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\RATINGS_23.09\DDL\CREATE\vw_my_rating_rollback.sql

DROP VIEW r360_appdata.vw_my_rating;


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\RATINGS_23.09\DDL\CREATE\vw_peers_portfolio_contents.sql

SET DEFINE OFF;

CREATE OR REPLACE VIEW r360_appdata.vw_peers_portfolio_contents AS
WITH entity_id_mapping AS (
     SELECT CAST(core.fins_identifier AS NUMBER DEFAULT NULL ON CONVERSION ERROR) AS entity_id,	        
            snl.fins_identifier  AS key_instn_id
     FROM   gs_gc.financial_institution_id snl, 
            gs_gc.financial_institution_id core 
     WHERE  snl.lnk_financial_institution_oid = core.lnk_financial_institution_oid
        AND snl.fins_id_context = 'SNL'      
        AND snl.data_source_id IS NOT NULL      
        AND snl.end_datetime IS NULL
        AND core.fins_id_context = 'CORE'       
        AND core.end_datetime IS NULL),
   icr_fclong_rating AS (
     SELECT rd.rating_id             AS entity_id, 
            rd.current_rating_symbol AS rating,
            rdna.current_cw_ol       AS latest_non_affirm_cw_ol
     FROM   fgr_prime.rating_details rd
     INNER JOIN spapp.debt_type_codes dt 
	         ON rd.debt_type_code = dt.debt_type_code AND dt.active_ind = 'Y'      
     INNER JOIN r360_appdata.rating_type_code_map rtcm 
	         ON rd.rating_type_code = rtcm.rating_type_code AND rtcm.actv_flag = 'Y' AND  rtcm.process_ind = 'Y'
     INNER JOIN spapp.rating_type_codes rt 
	         ON rt.rating_type_code = rtcm.rating_type_code
     INNER JOIN fgr_prime.rating_details rdna 
	         ON rd.non_affirm_rating_id = rdna.source_rating_id AND rdna.ack_status = 'Y' AND rdna.ciq_rep_ind = 1
     WHERE rd.srd_curr_ind = 'Y' AND rd.ack_status = 'Y' AND rd.ciq_rep_ind = 1 AND rd.rating_ind = 'E'
       AND rd.debt_type_code = 'ICR' AND rd.rating_type_code = 'FCLONG'),
   entity_industry AS (
     SELECT e.entity_id,
            i.description AS industry,
            ROW_NUMBER () OVER (PARTITION BY e.entity_id ORDER BY i.code ASC) AS row_num			 
     FROM   fgr.entities       e,  
            fgr.entity_types   et,
            spapp.v_industries i
     WHERE  e.entity_id = et.entity_id 
        AND et.type_code_value = i.code
        AND e.primary_sub_sector_code = i.sub_sector_code
        AND et.entity_type_code = 'INDUSTRY'
        AND et.status_ind = 'A'
        AND et.primary_secondary_ind = 'P'
        AND i.status_ind = 'A')	 
SELECT e.entity_id, 
       eim.key_instn_id,
       en.entity_name, 
       icr.rating, 
       icr.latest_non_affirm_cw_ol AS creditwatch_outlook,	   
       s.state_name, 
       c.description AS country_name, 
	   ei.industry,
       ear.primary_sector_code, 
       ear.primary_sub_sector_code, 
       ear.active_rating_ind,
       CASE WHEN fe.core_id IS NOT NULL THEN 'Y'
            ELSE 'N'
       END AS financials_available
FROM   entity_id_mapping eim
INNER JOIN r360_appdata.vw_entity_active_rating ear 
        ON eim.entity_id = ear.entity_id  
INNER JOIN fgr.entities e
        ON eim.entity_id = e.entity_id
INNER JOIN fgr.entity_names en
        ON e.entity_id = en.entity_id		
INNER JOIN spapp.countries c
        ON e.country_code = c.country_code
LEFT JOIN  r360_user_pref.r360_app_state s
        ON e.state_code = s.state_cd   	
LEFT JOIN  icr_fclong_rating icr
        ON e.entity_id = icr.entity_id		
LEFT JOIN  spgiproduct.fin_entity fe
        ON e.entity_id = fe.core_id AND (ab_ind = 'Y' OR ag_ind = 'Y') AND active_flag = 'Y'
LEFT JOIN entity_industry ei
        ON e.entity_id = ei.entity_id AND ei.row_num = 1 
WHERE  en.status_ind   = 'A'   
   AND en.curr_ind     = 'Y'
ORDER BY en.entity_name ASC;  

GRANT SELECT ON r360_appdata.vw_peers_portfolio_contents TO r360_appdata_reader;



C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\RATINGS_23.09\DDL\CREATE\vw_peers_portfolio_contents_rollback.sql

DROP VIEW r360_appdata.vw_peers_portfolio_contents;


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\RATINGS_23.09\DDL\CREATE\vw_rating_articles_cn_public.sql

SET DEFINE OFF;

CREATE OR REPLACE VIEW r360_appdata.vw_rating_articles_cn AS 
WITH hkg_mac_twn_articles AS 
    (SELECT ar.article_id 
			FROM fgr.article_relationships ar
				  JOIN fgr.entities e ON e.entity_id = ar.relate_id
						AND e.country_code IN ('HKG', 'MAC', 'TWN') 
						AND ar.relate_ind = 'E' AND ar.ack_status IN ('D', 'Y') AND ar.ciq_rep_ind  = 1)  
SELECT entity_id,
				article_id,
				title,
				article_type,
				article_date,
				author,
				article_type_id
		FROM  r360_appdata.vw_rating_articles
				WHERE article_id NOT IN (SELECT article_id FROM hkg_mac_twn_articles) ;
	  
GRANT SELECT ON r360_appdata.vw_rating_articles_cn TO R360_APPDATA_READER;


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\RATINGS_23.09\DDL\CREATE\vw_rating_articles_cn_public_rollback.sql

DROP VIEW r360_appdata.vw_rating_articles_cn;


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\RATINGS_23.09\DDL\CREATE\vw_rating_articles_public.sql

SET DEFINE OFF;

CREATE OR REPLACE VIEW r360_appdata.vw_rating_articles AS 
SELECT ear.entity_id,
		  ao.article_id,
		  REPLACE(REPLACE(ao.preferred_title, '<br>', ' '), '<BR>', ' ') AS title,
		  ct.crarticle_type AS article_type,
		  ao.article_date,
		  CASE WHEN (emp.employee_name IS NULL OR emp.employee_name = 'Standard & Poor''s') 
					THEN 'S&P Global Ratings'
			  WHEN emp.mi IS NULL 
					THEN emp.first_name || ' ' || emp.last_name_from_source 
			  ELSE emp.first_name || ' ' || emp.mi || ' ' || emp.last_name_from_source 
		  END AS author,
		  ct.crarticle_type_id AS article_type_id 
  FROM r360_appdata.vw_entity_active_rating ear 
    JOIN fgr.article_relationships ar 
			ON ear.entity_id = ar.relate_id 
    JOIN fgr.article_objects ao 
			ON ar.article_id = ao.article_id
    JOIN r360_appdata.crarticle_type_map ctm 
			ON ao.article_type = ctm.source_article_type AND COALESCE(ao.article_sub_type, 'N') = COALESCE(ctm.source_article_sub_type, 'N') AND ctm.actv_flag = 'Y'
    JOIN r360_appdata.crarticle_types ct 
			ON ctm.crarticle_type_id = ct.crarticle_type_id AND ct.actv_flag = 'Y' 
    JOIN fgr.article_users au 
			ON ao.article_id = au.article_id
    LEFT JOIN spapp.employees emp 
			ON au.user_id = emp.employee_id AND emp.active_ind = 'Y'
      WHERE ear.active_rating_ind = 'Y' AND ear.primary_sector_code = 'GLOBISS' 
			AND ar.relate_ind = 'E' AND ar.ack_status IN ('D', 'Y') AND ar.ciq_rep_ind  = 1
			AND au.user_role = 'AUTHOR' AND au.ack_status IN ('D', 'Y') AND au.ciq_rep_ind  = 1 
			AND ao.fgr_status = 'A' AND ao.ack_status IN ('D', 'Y') AND ao.ciq_rep_ind  = 1 
			AND ao.article_date >= to_date('01/01/2000','MM/dd/yyyy') 
			AND ct.crarticle_type_id IN (1,3,7,10,11,13,14,15)
      ORDER BY ao.article_date DESC;
	  
GRANT SELECT ON r360_appdata.vw_rating_articles TO R360_APPDATA_READER;


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\RATINGS_23.09\DDL\CREATE\vw_rating_articles_public_rollback.sql

DROP VIEW r360_appdata.vw_rating_articles;


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\RATINGS_23.09\DDL\CREATE\VW_RATING_CRITERIA_ARTICLES_PUBLIC_SCRIPT.sql

BEGIN

-- -----------------------------------------------------
-- 			VW_RATING_CRITERIA_ARTICLES_PUBLIC
-- -----------------------------------------------------


CREATE OR REPLACE VIEW r360_appdata.vw_rating_criteria_articles_public AS
SELECT
    rd.rating_detail_id as rating_detail_id,
    rd.source_rating_id as source_rating_id,
    am.metadata_value as pcr_region,
    ao2.article_id as criteria_article_id,
    ao2.article_date as article_date,
    ao2.preferred_title as preferred_title,
    emp.last_name as last_name,
    emp.first_name as first_name,
    emp.employee_name as full_name
FROM
    fgr_prime.rating_details rd,
    fgr.article_relationships ar,
    fgr.article_hyperlinks ah,
    fgr.article_objects ao,
    fgr.article_metadata am,
    fgr.article_objects ao2,
    fgr.article_users au,
    spapp.employees emp
WHERE   rd.source_rating_id = ar.relate_id
    and ar.article_id = ah.article_id
    and ar.article_id = ao.article_id
    and ao.article_id = am.article_id
    and ah.hlink_source_id = ao2.source_object_id
    and ao2.article_id = au.article_id
    and au.user_id = emp.employee_id(+)    
    AND RD.ACK_STATUS = 'Y' 
    AND RD.CIQ_REP_IND = 1    
    AND AR.RELATE_IND = 'Q'
    AND AR.STATUS_IND = 'A'
    AND AR.ACK_STATUS in ('D', 'Y') 
    AND AR.CIQ_REP_IND = 1    
    AND AH.STATUS_IND = 'A'
    AND AH.ACK_STATUS in ('Y', 'D') 
    AND AH.CIQ_REP_IND = 1    
    AND AO.STATUS_IND = 'A'
    AND AO.ACK_STATUS in ('D', 'Y') 
    AND AO.CIQ_REP_IND = 1    
    AND AM.METADATA_NAME = 'PCR'
    AND AM.METADATA_TYPE = 'REGION'
    AND AM.STATUS_IND = 'A'
    AND AM.ACK_STATUS in ('Y', 'D') 
    AND AM.CIQ_REP_IND = 1    
    AND AO2.STATUS_IND = 'A'
    AND UPPER(AO2.PREFERRED_TITLE) NOT LIKE '%CREDIT RATING MODEL:%'
    AND AO2.ACK_STATUS in ('D', 'Y') 
    AND AO2.CIQ_REP_IND = 1    
    AND AU.USER_ROLE = 'AUTHOR'
    AND AU.ACK_STATUS in ('Y', 'D') 
    AND AU.CIQ_REP_IND = 1    
ORDER BY AO2.ARTICLE_DATE DESC;

GRANT SELECT ON r360_appdata.vw_rating_criteria_articles_public TO R360_APPDATA_READER;


COMMIT;
END;
/


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\RATINGS_23.09\DDL\CREATE\VW_RATING_CRITERIA_ARTICLES_PVT_SCRIPT.sql

BEGIN

-- -----------------------------------------------------
-- 			VW_RATING_CRITERIA_ARTICLES_PVT
-- -----------------------------------------------------


CREATE OR REPLACE VIEW r360_appdata.vw_rating_criteria_articles_pvt AS
SELECT
	'' AS RATING_DETAIL_ID,
	'' AS SOURCE_RATING_ID,
	'' AS PCR_REGION,
	AO.ARTICLE_ID AS CRITERIA_ARTICLE_ID,
	AO.ARTICLE_DATE AS ARTICLE_DATE,
	AO.PREFERRED_TITLE AS PREFERRED_TITLE,
	EMP.LAST_NAME AS LAST_NAME,
	EMP.FIRST_NAME AS FIRST_NAME,
	EMP.EMPLOYEE_NAME AS FULL_NAME,
	AO.SOURCE_OBJECT_ID AS SOURCE_OBJECT_ID
FROM
	FGR.ARTICLE_OBJECTS AO,
	FGR.ARTICLE_USERS AU,
	SPAPP.EMPLOYEES EMP 
WHERE
	    AO.FGR_STATUS = 'A'
	AND AO.ARTICLE_ID = AU.ARTICLE_ID
	AND AU.USER_ID = EMP.EMPLOYEE_ID(+)
	AND AU.USER_ROLE = 'AUTHOR'
	AND AU.ACK_STATUS IN ('Y', 'D')
	AND AU.CIQ_REP_IND = 1 
ORDER BY AO.ARTICLE_DATE DESC;

GRANT SELECT ON r360_appdata.vw_rating_criteria_articles_pvt TO R360_APPDATA_READER;


COMMIT;
END;
/


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\RATINGS_23.09\DDL\CREATE\VW_RATING_CRITERIA_ARTICLES_ROLLBACK_SCRIPT.sql

BEGIN

-- ----------------------------------------------------
-- 			VW_RATING_CRITERIA_ARTICLES_PUBLIC
-- ----------------------------------------------------

EXECUTE IMMEDIATE 'DROP VIEW R360_APPDATA.VW_RATING_CRITERIA_ARTICLES_PUBLIC';

-- ----------------------------------------------------
-- 			VW_RATING_CRITERIA_ARTICLES_PVT
-- ----------------------------------------------------

EXECUTE IMMEDIATE 'DROP VIEW R360_APPDATA.VW_RATING_CRITERIA_ARTICLES_PVT';

COMMIT;
END;
/


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\RATINGS_23.09\DDL\CREATE\vw_related_articles.sql

SET DEFINE OFF;

CREATE OR REPLACE VIEW r360_appdata.vw_related_articles AS
SELECT 
       ar.relate_id, --instrument_id from fgr.analytic_securities table (USPF)
       a.article_id, 
       REPLACE(REPLACE(a.preferred_title, '<br>', ''), '<BR>', '') AS article_title,
       at.crarticle_type_id AS article_type_id,
       at.crarticle_type AS article_type,       
       a.article_date, 
       CASE WHEN (e.employee_name IS NULL OR e.employee_name = 'Standard & Poor''s') THEN
			  'S&P Global Ratings'
			WHEN e.mi IS NULL THEN
			  e.first_name || ' ' || e.last_name_from_source 
		    ELSE 
			  e.first_name || ' ' || e.mi || ' ' || e.last_name_from_source 
	   END AS article_author
FROM   fgr.article_objects a,
       fgr.article_relationships ar,
       fgr.article_users au,
       (SELECT * 
        FROM   spapp.employees 
        WHERE  active_ind = 'Y'
        ) e,
       r360_appdata.crarticle_type_map m,
       r360_appdata.crarticle_types at
WHERE  a.article_id = ar.article_id
   AND a.article_id = au.article_id
   AND au.user_id = e.employee_id(+)
   AND a.article_type || '_' ||  NVL(a.article_sub_type, 'N') = m.source_article_type || '_' || NVL(m.source_article_sub_type, 'N') 
   AND m.crarticle_type_id = at.crarticle_type_id
   AND a.ack_status in ('D', 'Y') AND a.ciq_rep_ind = 1
   AND a.fgr_status = 'A'
   AND ar.relate_ind IN ('A', 'I')
   AND ar.ack_status in ('D', 'Y') AND ar.ciq_rep_ind = 1
   AND au.ack_status in ('D', 'Y') AND au.ciq_rep_ind = 1   
   AND au.user_role = 'AUTHOR'
   AND at.crarticle_type_id IN (1, 3, 7, 10, 11, 13, 14, 15) 
   AND at.actv_flag = 'Y'
   AND m.actv_flag = 'Y'
   AND a.article_date >= TO_DATE('01-JAN-2000', 'DD-MON-YYYY')
ORDER BY a.article_date desc;

GRANT SELECT ON r360_appdata.vw_related_articles TO r360_appdata_reader;



C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\RATINGS_23.09\DDL\CREATE\vw_related_articles_rollback.sql

DROP VIEW r360_appdata.vw_related_articles;


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\RATINGS_23.09\DDL\CREATE\vw_related_criteria_uspf.sql

SET DEFINE OFF;

CREATE OR REPLACE VIEW r360_appdata.vw_related_criteria_uspf AS 
SELECT rd.rating_detail_id, 
       a.article_id, 
       REPLACE(REPLACE(a.preferred_title, '<br>', ''), '<BR>', '') AS article_title,
       a.article_date,
       CASE WHEN (e.employee_name IS NULL OR e.employee_name = 'Standard & Poor''s') THEN
			  'S&P Global Ratings'
		    WHEN e.mi IS NULL THEN
			  e.first_name || ' ' || e.last_name_from_source 
		    ELSE 
			  e.first_name || ' ' || e.mi || ' ' || e.last_name_from_source 
	   END AS article_author,       
       a.source_object_id
FROM   fgr.rating_link rl,
       fgr_prime.rating_details rd,
       fgr.article_objects a,
       fgr.article_users au,
       (SELECT * 
        FROM   spapp.employees 
        WHERE  active_ind = 'Y') e
WHERE  rd.source_rating_id = rl.source_rating_id
   AND rl.linx_object_id = a.source_object_id 
   AND a.article_id = au.article_id
   AND au.user_id = e.employee_id(+)
   AND rd.ack_status = 'Y' 
   AND rd.ciq_rep_ind = 1
   AND rd.rating_ind = 'A' -- Ratings for USPF analytic securities
   AND rd.curr_ind = 'Y'
   AND rl.source_status_ind = 'A' 
   AND rl.ack_status = 'Y' 
   AND rl.ciq_rep_ind = 1
   AND rl.source_rating_ind = 'A'
   AND a.ack_status in ('D', 'Y') 
   AND a.ciq_rep_ind = 1
   AND a.fgr_status = 'A'
   AND au.ack_status in ('D', 'Y') 
   AND au.ciq_rep_ind = 1
   AND au.user_role = 'AUTHOR'   
ORDER BY a.article_date desc;

GRANT SELECT ON r360_appdata.vw_related_criteria_uspf TO r360_appdata_reader;   


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\RATINGS_23.09\DDL\CREATE\vw_related_criteria_uspf_rollback.sql

DROP VIEW r360_appdata.vw_related_criteria_uspf;





C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\RATINGS_23.09\DDL\CREATE\vw_related_entities.sql

SET DEFINE OFF;

CREATE OR REPLACE VIEW r360_appdata.vw_related_entities AS
WITH related_entities AS (
  SELECT e.entity_id, 
         e.super_parent_id, 
         COALESCE(ef.entity_id, e.entity_id)  AS related_entity_id,
         COALESCE(ef.family_level, 1)         AS family_level, 
         COALESCE(ef.sort_order, 1)           AS sort_order
  FROM   fgr.entities e,
         fgr.entity_family ef
  WHERE  e.super_parent_id = ef.super_parent_id(+))
SELECT   re.entity_id, 
         re.super_parent_id, 
         re.related_entity_id      AS re_entity_id, 
         n.entity_name             AS re_name,  
         n.entity_short_name       AS re_short_name, 
         n.entity_legal_name       AS re_legal_name, 
         re.family_level, 
         re.sort_order,
         e.primary_sub_sector_code AS re_sub_sector,
         o.fins_identifier         AS key_instn
FROM  related_entities re,
      fgr.entities e,
      fgr.entity_names n,
      r360_appdata.vw_org_key_inst_id_mapping o
WHERE re.related_entity_id = e.entity_id 
  AND re.related_entity_id = n.entity_id
  AND n.curr_ind = 'Y'
  AND o.core_fins_identifier = TO_CHAR(re.related_entity_id)
ORDER BY re.entity_id, re.sort_order;
          
GRANT SELECT ON r360_appdata.vw_related_entities TO r360_appdata_reader;



C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\RATINGS_23.09\DDL\CREATE\vw_related_entities_rollback.sql

DROP VIEW r360_appdata.vw_related_entities;


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\RATINGS_23.09\DDL\CREATE\vw_scores_definitions_ins.sql

SET DEFINE OFF;

CREATE OR REPLACE VIEW r360_appdata.vw_scores_definitions_ins AS
SELECT dataelement_code         AS score_code, 
       dataelement_display_name AS score_name, 
       dataelement_definition   AS definition, 
       highlight_flag
FROM   r360_appdata.dataelement_ui_config
WHERE  dataelement_type = 'SCORES & MODIFIERS'
   AND analytic_case_type = 'IST'
ORDER BY sort_order ASC;   

GRANT SELECT ON r360_appdata.vw_scores_definitions_ins TO r360_appdata_reader;


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\RATINGS_23.09\DDL\CREATE\vw_scores_definitions_ins_rollback.sql

DROP VIEW r360_appdata.vw_scores_definitions_ins;



C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\RATINGS_23.09\DDL\CREATE\vw_scores_modifiers.sql

SET DEFINE OFF;

-- used to fetch scores & modifiers/factors data for entities from CORP, UTIL, FI, INS and SOV sub sectors
CREATE OR REPLACE VIEW r360_appdata.vw_scores_modifiers AS 
WITH scores_modifiers AS (
  SELECT d.analytic_entity_id_text AS entity_id, 
         d.analytic_case_type,
		 d.data_element_code AS score_code,
		 u.dataelement_display_name AS score_name,
  	     d.value_descr       AS score_value,
	     d.value_text        AS score_value_text,
         u.dataelement_group AS score_group,
         u.highlight_flag,
         u.sort_order, 	   
         DENSE_RANK() OVER (PARTITION BY r.analytic_entity_id_text, r.analytic_case_type 
                            ORDER BY COALESCE(r.review_effective_date, r.create_dtime) DESC) AS rank_num
  FROM  spscores_ref.data_point_schema_distr d 
  INNER JOIN spscores_ref.analytic_review_distr r 
    ON  d.analytic_entity_id_text = r.analytic_entity_id_text
    AND d.review_ref_id = r.review_ref_id
    AND d.analytic_case_type = r.analytic_case_type 
    AND d.analysis_type_name = r.analysis_type_name 
  INNER JOIN r360_appdata.dataelement_ui_config u
    ON  d.analytic_case_type = u.analytic_case_type 
    AND d.analysis_type_name = u.analytic_case_type	
	AND d.data_element_code  = u.dataelement_code 
	AND u.dataelement_type   = 'SCORES & MODIFIERS'  
  WHERE r.ack_flag = 'Y'
    AND r.ciq_rep_ind = 1)
SELECT s.entity_id, 
       s.analytic_case_type, 
	   s.score_code,
	   s.score_name, 
	   s.score_value, 
	   s.score_value_text,
	   s.score_group, 
	   s.highlight_flag
FROM   scores_modifiers s
WHERE  s.rank_num = 1
ORDER BY s.entity_id, 
         s.sort_order;						
		 
GRANT SELECT ON r360_appdata.vw_scores_modifiers TO r360_appdata_reader;		 


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\RATINGS_23.09\DDL\CREATE\vw_scores_modifiers_rollback.sql

DROP VIEW r360_appdata.vw_scores_modifiers;



C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\RATINGS_23.09\Ratings_CallingScript.sql

set scan off time on timing on
set sqlblanklines on
set define off
set echo on
spool Ratings_CallingScript.log

@DDL/CREATE/CREATE/VW_RATING_CRITERIA_ARTICLES_PUBLIC_SCRIPT.sql;
@DDL/CREATE/CREATE/VW_RATING_CRITERIA_ARTICLES_PVT_SCRIPT.sql;
@DDL/CREATE/vw_rating_articles_public.sql;
@DDL/CREATE/vw_investor_sentiment_sector_list.sql;
@DDL/CREATE/vw_dashboard_contacts_non_uspf.sql;
@DDL/CREATE/vw_criteria_articles_public.sql;
@DDL/CREATE/vw_entity_details_public.sql;
@DDL/CREATE/vw_related_articles.sql;
@DDL/CREATE/vw_related_criteria_uspf.sql;
@DDL/CREATE/vw_scores_modifiers.sql;
@DDL/CREATE/vw_scores_definitions_ins.sql;
@DDL/CREATE/vw_my_rating.sql;
@DDL/CREATE/vw_rating_articles_cn_public.sql;
@DDL/CREATE/vw_related_entities.sql;
@DDL/CREATE/vw_peers_portfolio_contents.sql;
@DDL/CREATE/VW_ENTITY_CURRENT_RATING_PUBLIC.sql;
@DDL/CREATE/VW_ENTITY_RATINGS_PEERS_PUBLIC.sql;
@DDL/CREATE/VW_ENTITY_RATINGS_HISTORY_TAC_PVT.sql;

spool off;


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\RATINGS_23.09\Ratings_RollBack_CallingScript.sql

set scan off time on timing on
set sqlblanklines on
set define off
set echo on
spool Ratings_RollBack_CallingScript.log

@DDL/CREATE/VW_RATING_CRITERIA_ARTICLES_ROLLBACK_SCRIPT.sql;
@DDL/CREATE/vw_rating_articles_public_rollback.sql;
@DDL/CREATE/vw_investor_sentiment_sector_list_rollback.sql;
@DDL/CREATE/vw_dashboard_contacts_non_uspf_rollback.sql;
@DDL/CREATE/vw_criteria_articles_public_rollback.sql;
@DDL/CREATE/vw_entity_details_public_rollback.sql;
@DDL/CREATE/vw_related_articles_rollback.sql;
@DDL/CREATE/vw_related_criteria_uspf_rollback.sql;
@DDL/CREATE/vw_scores_modifiers_rollback.sql;
@DDL/CREATE/vw_scores_definitions_ins_rollback.sql;
@DDL/CREATE/vw_my_rating_rollback.sql;
@DDL/CREATE/vw_rating_articles_cn_public_rollback.sql;
@DDL/CREATE/vw_related_entities_rollback.sql;
@DDL/CREATE/vw_peers_portfolio_contents_rollback.sql;
@DDL/CREATE/VW_ENTITY_CURRENT_RATING_PUBLIC_ROLLBACK.sql;
@DDL/CREATE/VW_ENTITY_RATINGS_PEERS_PUBLIC_ROLLBACK.sql;
@DDL/CREATE/VW_ENTITY_RATINGS_HISTORY_TAC_PVT_ROLLBACK.sql;

spool off;


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\Ratings_SustainableFinance_23.12_Release\R360_Release_Dec_1_2023_Calling.sql

set scan off time on timing on
set sqlblanklines on
set define off
set echo on
spool R360_Release_Dec_1_2023_Calling.log


DROP VIEW R360_APPDATA.VW_NR_SUSFIN_GET_ANALYTICAL_APPROACH;

/* Formatted on 11/28/2023 5:02:56 PM (QP5 v5.362) */
CREATE OR REPLACE FORCE VIEW R360_APPDATA.VW_NR_SUSFIN_GET_ANALYTICAL_APPROACH
(
    ARTICLE_ID,
    PRESENTATIONDATE,
    ARTICLEDATE,
    CRARTICLETYPE,
    CRPRESENTATIONTITLE,
    BESTPERSONNAME,
    CREDITRESEARCHARTICLETOPIC,
    RELATE_ID
)
BEQUEATH DEFINER
AS
    SELECT ao.ARTICLE_id
               AS article_id,
           AO.Article_Release_Date
               AS PresentationDate,
           AO.Article_Date
               AS ArticleDate,
           CASE
               WHEN ao.article_type = 'COMMENTS' THEN 'Commentary'
               WHEN ao.article_type = 'NEWS' THEN 'News'
               WHEN ao.article_type = 'FULL' THEN 'Full Analysis'
               ELSE ao.article_type
           END
               AS CRArticleType,
           AO.PREFERRED_TITLE
               AS CRPresentationTitle,
           NVL (EMP.Employee_Name, 'S&P Global Ratings')
               AS BestPersonName,
           sub.Long_Description
               AS CreditResearchArticleTopic,
           AR.RELATE_ID
      FROM fgr.article_relationships  ar
           INNER JOIN spapp.Subjects sub
               ON sub.subject_id = ar.source_relate_id
           INNER JOIN fgr.article_objects ao ON ao.article_id = ar.article_id
           INNER JOIN fgr.ARTICLE_USERS au
               ON ao.article_id = au.article_id AND au.user_role = 'AUTHOR'
           LEFT OUTER JOIN SPAPP.Employees EMP
               ON EMP.employee_id = au.user_id
     WHERE     ao.fgr_status = 'A'
           AND (   ar.source_relate_id IN (8249, 8248, 8253)
                OR (    ar.source_relate_id IN (8254,
                                                8255,
                                                8256,
                                                8257)
                    AND UPPER (ao.article_type) <> 'COMMENTS'))
           AND ao.ciq_rep_ind = 1
           AND ao.ack_status IN ('Y', 'D')
           AND ar.source_relate_ind = 'S';


DROP VIEW R360_APPDATA.VW_NR_SUSFIN_GET_ARTICLETOPICS;

/* Formatted on 11/28/2023 5:02:56 PM (QP5 v5.362) */
CREATE OR REPLACE FORCE VIEW R360_APPDATA.VW_NR_SUSFIN_GET_ARTICLETOPICS
(
    KEYCREDITRESEARCHARTICLETOPIC,
    CREDITRESEARCHARTICLETOPIC
)
BEQUEATH DEFINER
AS
    (SELECT subject_id           AS KeyCreditResearchArticleTopic,
            long_description     AS CreditResearchArticleTopic
       FROM SPAPP.Subjects
      WHERE subject_id IN (8249,
                           8248,
                           8253,
                           8254,
                           8255,
                           8256,
                           8257));


DROP VIEW R360_APPDATA.VW_NR_SUSFIN_GET_GREEN_SPO;

/* Formatted on 11/28/2023 5:02:56 PM (QP5 v5.362) */
CREATE OR REPLACE FORCE VIEW R360_APPDATA.VW_NR_SUSFIN_GET_GREEN_SPO
(
    KEYINSTN,
    ARTICLEID,
    ARDATE,
    ISSUER,
    REPORT,
    SECTOR,
    ISSUE,
    AMOUNT,
    GOVERNANCESCORE,
    MITIGATIONSCORE,
    TRANSPARENCYSCORE,
    ADAPTATIONSCORE,
    PUBLICDATE,
    OVERALLSCORE,
    ALIGNEDTO,
    FTYPE
)
BEQUEATH DEFINER
AS
    SELECT "KEYINSTN",
           "ARTICLEID",
           "ARDATE",
           "ISSUER",
           "REPORT",
           "SECTOR",
           "ISSUE",
           "AMOUNT",
           "GOVERNANCESCORE",
           "MITIGATIONSCORE",
           "TRANSPARENCYSCORE",
           "ADAPTATIONSCORE",
           "PUBLICDATE",
           "OVERALLSCORE",
           "ALIGNEDTO",
           "FTYPE"
      FROM (  SELECT object_id                               AS KeyInstn,
                     job_id                                  AS ArticleId,
                     MAX (SP_AR_DATE)                        AS ardate,
                     MAX (SP_GE_ISSUER)                      AS Issuer,
                     MAX (SP_NR_GE_TRANSACTION_DESC)         AS Report,
                     MAX (SP_NR_SECTOR_NM)                   AS Sector,
                     MAX (SP_GE_ISSUE)                       AS Issue,
                     MAX (SP_NR_FINANCING_AMT)               AS Amount,
                     MAX (SP_NR_GOVERN)                      AS GovernanceScore,
                     NVL (MAX (SP_NR_MIT_SCORE), 'NA')       AS MitigationScore,
                     MAX (SP_NR_TRANSP)                      AS transparencyScore,
                     NVL (MAX (SP_NR_RES_SCORE), 'NA')       AS AdaptationScore,
                     MAX (SP_AR_PUBLIC_DATE)                 AS PublicDate,
                     (CASE
                          WHEN MAX (SP_NR_RES_SCORE) IS NULL
                          THEN
                                 MAX (SP_NR_OVRL_E_SCORE_QTILE)
                              || '/'
                              || MAX (SP_NR_OVRL_E_SCORE_NUM)
                          ELSE
                                 MAX (SP_NR_OVRL_R_SCORE_QTILE)
                              || '/'
                              || MAX (SP_NR_OVRL_R_SCORE_NUM)
                      END)                                   AS OverallScore,
                     NVL (MAX (SP_NR_ALIGN_PRNCPL), 'NA')    AS AlignedTo,
                     NVL (MAX (SP_NR_FRMWRK_TYPE), 'NA')     AS Ftype
                FROM (SELECT *
                        FROM (SELECT *
                                FROM (SELECT ES.*,
                                             DENSE_RANK ()
                                                 OVER (
                                                     PARTITION BY ES.object_id
                                                     ORDER BY
                                                         es.as_of_date DESC)    AS latestRank
                                        FROM DSMPSTG.r360_ECON_FACTS_SCORES es
                                       WHERE es.data_group = 'GREEN') ----WHERE object_id = '4245644' ---- review  and confirm with Chan,Man or Shilp Moduga
                          ---- and  latestRank=1 ------ *********TESTING ALERT
                             ) es1
                             INNER JOIN fgr.article_objects ao
                                 ON es1.Job_Id = ao.article_id
                       WHERE     ao.article_type = 'COMMENTS'
                             ----and ao.article_sub_type = 'GREEN EVALUATION'  ---- GREEN EVAL Articles
                             AND ao.fgr_status = 'A' ----and ao.status_ind='A'
 ----and CIQ_REP_IND= 1  ---- review  and confirm with Chan,Man or Shilp Moduga
 ----and es1.object_id = '4245644' --- '9733885'   ------ *********TESTING ALERT
                     )
                     PIVOT (MAX (data_value)
                           FOR de_mnemonic
                           IN ('SP_AR_DATE' AS SP_AR_DATE,
                              'SP_GE_ISSUER' AS SP_GE_ISSUER,
                              'SP_NR_ALIGN_PRNCPL' AS SP_NR_ALIGN_PRNCPL,
                              'SP_NR_FRMWRK_TYPE' AS SP_NR_FRMWRK_TYPE,
                              'SP_NR_GE_TRANSACTION_DESC' AS SP_NR_GE_TRANSACTION_DESC,
                              'SP_NR_SECTOR_NM' AS SP_NR_SECTOR_NM,
                              'SP_GE_ISSUE' AS SP_GE_ISSUE,
                              'SP_NR_FINANCING_AMT' AS SP_NR_FINANCING_AMT,
                              'SP_NR_GOVERN' AS SP_NR_GOVERN,
                              'SP_NR_MIT_SCORE' AS SP_NR_MIT_SCORE,
                              'SP_NR_TRANSP' AS SP_NR_TRANSP,
                              'SP_NR_RES_SCORE' AS SP_NR_RES_SCORE,
                              'SP_AR_PUBLIC_DATE' AS SP_AR_PUBLIC_DATE,
                              'SP_NR_OVRL_E_SCORE_QTILE' AS SP_NR_OVRL_E_SCORE_QTILE,
                              'SP_NR_OVRL_E_SCORE_NUM' AS SP_NR_OVRL_E_SCORE_NUM,
                              'SP_NR_OVRL_R_SCORE_QTILE' AS SP_NR_OVRL_R_SCORE_QTILE,
                              'SP_NR_OVRL_R_SCORE_NUM' AS SP_NR_OVRL_R_SCORE_NUM))
            GROUP BY object_id, job_id
            ORDER BY issuer);


DROP VIEW R360_APPDATA.VW_NR_SUSFIN_GET_MYPROFILE_EVALN;

/* Formatted on 11/28/2023 5:02:56 PM (QP5 v5.362) */
CREATE OR REPLACE FORCE VIEW R360_APPDATA.VW_NR_SUSFIN_GET_MYPROFILE_EVALN
(
    KEYINSTN,
    ARTICLEID,
    ARDATE,
    ISSUER,
    REPORT,
    SECTOR,
    ISSUE,
    AMOUNT,
    GOVERNANCESCORE,
    MITIGATIONSCORE,
    TRANSPARENCYSCORE,
    ADAPTATIONSCORE,
    PUBLICDATE,
    OVERALLSCORE,
    ALIGNEDTO,
    FTYPE
)
BEQUEATH DEFINER
AS
    SELECT "KEYINSTN",
           "ARTICLEID",
           "ARDATE",
           "ISSUER",
           "REPORT",
           "SECTOR",
           "ISSUE",
           "AMOUNT",
           "GOVERNANCESCORE",
           "MITIGATIONSCORE",
           "TRANSPARENCYSCORE",
           "ADAPTATIONSCORE",
           "PUBLICDATE",
           "OVERALLSCORE",
           "ALIGNEDTO",
           "FTYPE"
      FROM (  SELECT object_id                               AS KeyInstn,
                     job_id                                  AS ArticleId,
                     MAX (SP_AR_DATE)                        AS ardate,
                     MAX (SP_GE_ISSUER)                      AS Issuer,
                     MAX (SP_NR_GE_TRANSACTION_DESC)         AS Report,
                     MAX (SP_NR_SECTOR_NM)                   AS Sector,
                     MAX (SP_GE_ISSUE)                       AS Issue,
                     MAX (SP_NR_FINANCING_AMT)               AS Amount,
                     MAX (SP_NR_GOVERN)                      AS GovernanceScore,
                     NVL (MAX (SP_NR_MIT_SCORE), 'NA')       AS MitigationScore,
                     MAX (SP_NR_TRANSP)                      AS transparencyScore,
                     NVL (MAX (SP_NR_RES_SCORE), 'NA')       AS AdaptationScore,
                     MAX (SP_AR_PUBLIC_DATE)                 AS PublicDate,
                     (CASE
                          WHEN MAX (SP_NR_RES_SCORE) IS NULL
                          THEN
                                 MAX (SP_NR_OVRL_E_SCORE_QTILE)
                              || '/'
                              || MAX (SP_NR_OVRL_E_SCORE_NUM)
                          ELSE
                                 MAX (SP_NR_OVRL_R_SCORE_QTILE)
                              || '/'
                              || MAX (SP_NR_OVRL_R_SCORE_NUM)
                      END)                                   AS OverallScore,
                     NVL (MAX (SP_NR_ALIGN_PRNCPL), 'NA')    AS AlignedTo,
                     NVL (MAX (SP_NR_FRMWRK_TYPE), 'NA')     AS Ftype
                FROM (SELECT *
                        FROM (SELECT *
                                FROM (SELECT ES.*,
                                             DENSE_RANK ()
                                                 OVER (
                                                     PARTITION BY ES.object_id
                                                     ORDER BY
                                                         es.as_of_date DESC)    AS latestRank
                                        FROM DSMPSTG.r360_ECON_FACTS_SCORES es
                                       WHERE es.data_group = 'GREEN') ----WHERE object_id = '4245644' ---- review  and confirm with Chan,Man or Shilp Moduga
                          ---- and  latestRank=1 ------ *********TESTING ALERT
                             ) es1
                             INNER JOIN fgr.article_objects ao
                                 ON es1.Job_Id = ao.article_id
                       WHERE     ao.article_type = 'COMMENTS'
                             ----and ao.article_sub_type = 'GREEN EVALUATION'  ---- GREEN EVAL Articles
                             AND ao.fgr_status = 'A' ----and ao.status_ind='A'
 ----and CIQ_REP_IND= 1  ---- review  and confirm with Chan,Man or Shilp Moduga
 ----and es1.object_id = '4245644' --- '9733885'   ------ *********TESTING ALERT
                     )
                     PIVOT (MAX (data_value)
                           FOR de_mnemonic
                           IN ('SP_AR_DATE' AS SP_AR_DATE,
                              'SP_GE_ISSUER' AS SP_GE_ISSUER,
                              'SP_NR_ALIGN_PRNCPL' AS SP_NR_ALIGN_PRNCPL,
                              'SP_NR_FRMWRK_TYPE' AS SP_NR_FRMWRK_TYPE,
                              'SP_NR_GE_TRANSACTION_DESC' AS SP_NR_GE_TRANSACTION_DESC,
                              'SP_NR_SECTOR_NM' AS SP_NR_SECTOR_NM,
                              'SP_GE_ISSUE' AS SP_GE_ISSUE,
                              'SP_NR_FINANCING_AMT' AS SP_NR_FINANCING_AMT,
                              'SP_NR_GOVERN' AS SP_NR_GOVERN,
                              'SP_NR_MIT_SCORE' AS SP_NR_MIT_SCORE,
                              'SP_NR_TRANSP' AS SP_NR_TRANSP,
                              'SP_NR_RES_SCORE' AS SP_NR_RES_SCORE,
                              'SP_AR_PUBLIC_DATE' AS SP_AR_PUBLIC_DATE,
                              'SP_NR_OVRL_E_SCORE_QTILE' AS SP_NR_OVRL_E_SCORE_QTILE,
                              'SP_NR_OVRL_E_SCORE_NUM' AS SP_NR_OVRL_E_SCORE_NUM,
                              'SP_NR_OVRL_R_SCORE_QTILE' AS SP_NR_OVRL_R_SCORE_QTILE,
                              'SP_NR_OVRL_R_SCORE_NUM' AS SP_NR_OVRL_R_SCORE_NUM))
            GROUP BY object_id, job_id
            ORDER BY issuer);


DROP VIEW R360_APPDATA.VW_NR_SUSFIN_GET_SPO_TE_DATA;

/* Formatted on 11/28/2023 5:02:56 PM (QP5 v5.362) */
CREATE OR REPLACE FORCE VIEW R360_APPDATA.VW_NR_SUSFIN_GET_SPO_TE_DATA
(
    ARTICLE_ID,
    PRESENTATIONDATE,
    ARTICLEDATE,
    CRARTICLETYPE,
    CRPRESENTATIONTITLE,
    BESTPERSONNAME,
    CREDITRESEARCHARTICLETOPIC,
    RELATE_ID,
    ENTITY_ID
)
BEQUEATH DEFINER
AS
    WITH
        TEMP
        AS
            (SELECT ao.ARTICLE_id
                        AS article_id,
                    AO.Article_Release_Date
                        AS PresentationDate,
                    AO.Article_Date
                        AS ArticleDate,
                    REPLACE (ao.article_type, 'COMMENTS', 'COMMENTARY')
                        AS CRArticleType,
                    AO.PREFERRED_TITLE
                        AS CRPresentationTitle,
                    sub.Long_Description
                        AS CreditResearchArticleTopic,
                    AR.RELATE_ID,
                    NVL (en.ENTITY_LEGAL_NAME, '-1')
                        AS BestPersonName,
                    NVL (en.ENTITY_ID, -1)
                        AS ENTITY_ID
               FROM fgr.article_objects  ao
                    INNER JOIN fgr.article_relationships ar
                        ON ao.article_id = ar.article_id
                    INNER JOIN spapp.Subjects sub
                        ON sub.subject_id = ar.relate_id
                    LEFT OUTER JOIN fgr.article_relationships ar1
                        ON     ar.article_id = ar1.article_id
                           AND ar1.relate_ind = 'E'
                           AND ar1.source_relate_ind = 'O'
                    LEFT OUTER JOIN fgr.ENTITY_NAMES en
                        ON     en.ENTITY_ID = ar1.relate_id
                           AND en.STATUS_IND = 'A'
                           AND en.CURR_IND = 'Y'
              WHERE     ao.fgr_status = 'A'
                    AND ar.relate_id IN (8254,
                                         8255,
                                         8256,
                                         8257)
                    AND AR.RELATE_IND = 'S'
                    AND AR.STATUS_IND = 'A'
                    AND ao.article_type = 'COMMENTS')
    SELECT tmp.ARTICLE_id,
           tmp.PresentationDate,
           tmp.ArticleDate,
           tmp.CRArticleType,
           tmp.CRPresentationTitle,
           tmp.BestPersonName     AS BestPersonName,
           tmp.CreditResearchArticleTopic,
           tmp.RELATE_ID,
           tmp.ENTITY_ID
      FROM TEMP tmp
     WHERE tmp.RELATE_ID IN (8255, 8256, 8257)
    UNION ALL
    SELECT TEMP.ARTICLE_id,
           TEMP.PresentationDate,
           TEMP.ArticleDate,
           TEMP.CRArticleType,
           TEMP.CRPresentationTitle,
           NVL (esl.data_value, '')     AS BestPersonName,
           TEMP.CreditResearchArticleTopic,
           TEMP.RELATE_ID,
           TEMP.ENTITY_ID
      FROM TEMP
           LEFT OUTER JOIN DSMPSTG.r360_ECON_FACTS_SCORES esl
               ON     esl.Job_Id = TEMP.article_id
                  AND esl.de_mnemonic = 'SP_GE_ISSUER'
                  AND esl.data_group = 'GREEN'
     WHERE TEMP.RELATE_ID = 8254;


DROP VIEW R360_APPDATA.VW_NR_SUSFIN_GET_SUBJECTCODES;

/* Formatted on 11/28/2023 5:02:56 PM (QP5 v5.362) */
CREATE OR REPLACE FORCE VIEW R360_APPDATA.VW_NR_SUSFIN_GET_SUBJECTCODES
(
    KEYCREDITRESEARCHARTICLETOPIC,
    CREDITRESEARCHARTICLETOPIC
)
BEQUEATH DEFINER
AS
    (SELECT subject_id           AS KeyCreditResearchArticleTopic,
            long_description     AS CreditResearchArticleTopic
       FROM SPAPP.Subjects
      WHERE subject_id IN (8254,
                           8255,
                           8256,
                           8257));


GRANT SELECT ON R360_APPDATA.VW_NR_SUSFIN_GET_ANALYTICAL_APPROACH TO R360_APPDATA_READER;

GRANT SELECT ON R360_APPDATA.VW_NR_SUSFIN_GET_ARTICLETOPICS TO R360_APPDATA_READER;

GRANT SELECT ON R360_APPDATA.VW_NR_SUSFIN_GET_GREEN_SPO TO R360_APPDATA_READER;

GRANT SELECT ON R360_APPDATA.VW_NR_SUSFIN_GET_SPO_TE_DATA TO R360_APPDATA_READER;

GRANT SELECT ON R360_APPDATA.VW_NR_SUSFIN_GET_SUBJECTCODES TO R360_APPDATA_READER;

GRANT SELECT ON R360_APPDATA.VW_NR_SUSFIN_GET_MYPROFILE_EVALN TO R360_APPDATA_READER;

spool off;


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\Ratings_SustainableFinance_23.12_Release\R360_Release_Dec_1_2023_Rollback.sql

set scan off time on timing on
set sqlblanklines on
set define off
set echo on
spool R360_Release_Dec_1_2023_Rollback.log

DROP VIEW R360_APPDATA.VW_NR_SUSFIN_GET_ANALYTICAL_APPROACH; 

DROP VIEW R360_APPDATA.VW_NR_SUSFIN_GET_ARTICLETOPICS; 

DROP VIEW R360_APPDATA.VW_NR_SUSFIN_GET_GREEN_SPO;

DROP VIEW R360_APPDATA.VW_NR_SUSFIN_GET_MYPROFILE_EVALN;
 
DROP VIEW R360_APPDATA.VW_NR_SUSFIN_GET_SPO_TE_DATA;

DROP VIEW R360_APPDATA.VW_NR_SUSFIN_GET_SUBJECTCODES; 

spool off;


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\Ratings_SustainableFinance_23.12_Release\R360_Release_Dec_8_2023_Calling.sql

set scan off time on timing on
set sqlblanklines on
set define off
set echo on
spool R360_Release_Dec_8_2023_Calling.log


DROP VIEW R360_APPDATA.VW_NR_SUSFIN_GET_SPO_TE_DATA;

/* Formatted on 12/4/2023 5:56:06 PM (QP5 v5.362) */
CREATE OR REPLACE FORCE VIEW R360_APPDATA.VW_NR_SUSFIN_GET_SPO_TE_DATA
(
    ARTICLE_ID,
    PRESENTATIONDATE,
    ARTICLEDATE,
    CRARTICLETYPE,
    CRPRESENTATIONTITLE,
    BESTPERSONNAME,
    CREDITRESEARCHARTICLETOPIC,
    RELATE_ID,
    ENTITY_ID
)
BEQUEATH DEFINER
AS
    WITH
        TEMP
        AS
            (SELECT ao.ARTICLE_id
                        AS article_id,
                    AO.Article_Release_Date
                        AS PresentationDate,
                    AO.Article_Date
                        AS ArticleDate,
                    REPLACE (ao.article_type, 'COMMENTS', 'COMMENTARY')
                        AS CRArticleType,
                    AO.PREFERRED_TITLE
                        AS CRPresentationTitle,
                    sub.Long_Description
                        AS CreditResearchArticleTopic,
                    AR.RELATE_ID,
                    NVL (en.ENTITY_LEGAL_NAME, '-1')
                        AS BestPersonName,
                    NVL (en.ENTITY_ID, -1)
                        AS ENTITY_ID
               FROM fgr.article_objects  ao
                    INNER JOIN fgr.article_relationships ar
                        ON ao.article_id = ar.article_id
                    INNER JOIN spapp.Subjects sub
                        ON sub.subject_id = ar.relate_id
                    LEFT OUTER JOIN fgr.article_relationships ar1
                        ON     ar.article_id = ar1.article_id
                           AND ar1.relate_ind = 'E'
                           AND ar1.source_relate_ind = 'O'
                    LEFT OUTER JOIN fgr.ENTITY_NAMES en
                        ON     en.ENTITY_ID = ar1.relate_id
                           AND en.STATUS_IND = 'A'
                           AND en.CURR_IND = 'Y'
              WHERE     ao.fgr_status = 'A'
                    AND ar.relate_id IN (8254,
                                         8255,
                                         8256,
                                         8257)
                    AND AR.RELATE_IND = 'S'
                    AND AR.STATUS_IND = 'A'
                    AND ao.article_type = 'COMMENTS')
    SELECT tmp.ARTICLE_id,
           tmp.PresentationDate,
           tmp.ArticleDate,
           tmp.CRArticleType,
           tmp.CRPresentationTitle,
           tmp.BestPersonName     AS BestPersonName,
           tmp.CreditResearchArticleTopic,
           tmp.RELATE_ID,
           tmp.ENTITY_ID
      FROM TEMP tmp
     WHERE tmp.RELATE_ID IN (8255, 8256, 8257)
    UNION ALL
    SELECT TEMP.ARTICLE_id,
           TEMP.PresentationDate,
           TEMP.ArticleDate,
           TEMP.CRArticleType,
           TEMP.CRPresentationTitle,
           NVL (esl.data_value, '-1')     AS BestPersonName,
           TEMP.CreditResearchArticleTopic,
           TEMP.RELATE_ID,
           TEMP.ENTITY_ID
      FROM TEMP
           LEFT OUTER JOIN DSMPSTG.r360_ECON_FACTS_SCORES esl
               ON     esl.Job_Id = TEMP.article_id
                  AND esl.de_mnemonic = 'SP_GE_ISSUER'
                  AND esl.data_group = 'GREEN'
     WHERE TEMP.RELATE_ID = 8254;


GRANT SELECT ON R360_APPDATA.VW_NR_SUSFIN_GET_SPO_TE_DATA TO R360_APPDATA_READER;


spool off;


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\Ratings_SustainableFinance_23.12_Release\R360_Release_Dec_8_2023_Rollback.sql

set scan off time on timing on
set sqlblanklines on
set define off
set echo on
spool R360_Release_Dec_8_2023_Rollback.log
 
 
DROP VIEW R360_APPDATA.VW_NR_SUSFIN_GET_SPO_TE_DATA; 

spool off;


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\Ratings_SustainableFinance_Dec_8_2023\DDL\views\R360_Release_Dec_8_2023_Calling.sql

set scan off time on timing on
set sqlblanklines on
set define off
set echo on
spool R360_Release_Dec_8_2023_Calling.log


DROP VIEW R360_APPDATA.VW_NR_SUSFIN_GET_SPO_TE_DATA;

/* Formatted on 12/4/2023 5:56:06 PM (QP5 v5.362) */
CREATE OR REPLACE FORCE VIEW R360_APPDATA.VW_NR_SUSFIN_GET_SPO_TE_DATA
(
    ARTICLE_ID,
    PRESENTATIONDATE,
    ARTICLEDATE,
    CRARTICLETYPE,
    CRPRESENTATIONTITLE,
    BESTPERSONNAME,
    CREDITRESEARCHARTICLETOPIC,
    RELATE_ID,
    ENTITY_ID
)
BEQUEATH DEFINER
AS
    WITH
        TEMP
        AS
            (SELECT ao.ARTICLE_id
                        AS article_id,
                    AO.Article_Release_Date
                        AS PresentationDate,
                    AO.Article_Date
                        AS ArticleDate,
                    REPLACE (ao.article_type, 'COMMENTS', 'COMMENTARY')
                        AS CRArticleType,
                    AO.PREFERRED_TITLE
                        AS CRPresentationTitle,
                    sub.Long_Description
                        AS CreditResearchArticleTopic,
                    AR.RELATE_ID,
                    NVL (en.ENTITY_LEGAL_NAME, '-1')
                        AS BestPersonName,
                    NVL (en.ENTITY_ID, -1)
                        AS ENTITY_ID
               FROM fgr.article_objects  ao
                    INNER JOIN fgr.article_relationships ar
                        ON ao.article_id = ar.article_id
                    INNER JOIN spapp.Subjects sub
                        ON sub.subject_id = ar.relate_id
                    LEFT OUTER JOIN fgr.article_relationships ar1
                        ON     ar.article_id = ar1.article_id
                           AND ar1.relate_ind = 'E'
                           AND ar1.source_relate_ind = 'O'
                    LEFT OUTER JOIN fgr.ENTITY_NAMES en
                        ON     en.ENTITY_ID = ar1.relate_id
                           AND en.STATUS_IND = 'A'
                           AND en.CURR_IND = 'Y'
              WHERE     ao.fgr_status = 'A'
                    AND ar.relate_id IN (8254,
                                         8255,
                                         8256,
                                         8257)
                    AND AR.RELATE_IND = 'S'
                    AND AR.STATUS_IND = 'A'
                    AND ao.article_type = 'COMMENTS')
    SELECT tmp.ARTICLE_id,
           tmp.PresentationDate,
           tmp.ArticleDate,
           tmp.CRArticleType,
           tmp.CRPresentationTitle,
           tmp.BestPersonName     AS BestPersonName,
           tmp.CreditResearchArticleTopic,
           tmp.RELATE_ID,
           tmp.ENTITY_ID
      FROM TEMP tmp
     WHERE tmp.RELATE_ID IN (8255, 8256, 8257)
    UNION ALL
    SELECT TEMP.ARTICLE_id,
           TEMP.PresentationDate,
           TEMP.ArticleDate,
           TEMP.CRArticleType,
           TEMP.CRPresentationTitle,
           NVL (esl.data_value, '-1')     AS BestPersonName,
           TEMP.CreditResearchArticleTopic,
           TEMP.RELATE_ID,
           TEMP.ENTITY_ID
      FROM TEMP
           LEFT OUTER JOIN DSMPSTG.r360_ECON_FACTS_SCORES esl
               ON     esl.Job_Id = TEMP.article_id
                  AND esl.de_mnemonic = 'SP_GE_ISSUER'
                  AND esl.data_group = 'GREEN'
     WHERE TEMP.RELATE_ID = 8254;


GRANT SELECT ON R360_APPDATA.VW_NR_SUSFIN_GET_SPO_TE_DATA TO R360_APPDATA_READER;


spool off;


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\Ratings_SustainableFinance_Dec_8_2023\DDL\views\R360_Release_Dec_8_2023_Rollback.sql

 
DROP VIEW R360_APPDATA.VW_NR_SUSFIN_GET_SPO_TE_DATA
/

/* Formatted on 12/5/2023 4:47:45 AM (QP5 v5.362) */
CREATE OR REPLACE FORCE VIEW R360_APPDATA.VW_NR_SUSFIN_GET_SPO_TE_DATA
(
    ARTICLE_ID,
    PRESENTATIONDATE,
    ARTICLEDATE,
    CRARTICLETYPE,
    CRPRESENTATIONTITLE,
    BESTPERSONNAME,
    CREDITRESEARCHARTICLETOPIC,
    RELATE_ID,
    ENTITY_ID
)
BEQUEATH DEFINER
AS
    WITH
        TEMP
        AS
            (SELECT ao.ARTICLE_id
                        AS article_id,
                    AO.Article_Release_Date
                        AS PresentationDate,
                    AO.Article_Date
                        AS ArticleDate,
                    REPLACE (ao.article_type, 'COMMENTS', 'COMMENTARY')
                        AS CRArticleType,
                    AO.PREFERRED_TITLE
                        AS CRPresentationTitle,
                    sub.Long_Description
                        AS CreditResearchArticleTopic,
                    AR.RELATE_ID,
                    NVL (en.ENTITY_LEGAL_NAME, '-1')
                        AS BestPersonName,
                    NVL (en.ENTITY_ID, -1)
                        AS ENTITY_ID
               FROM fgr.article_objects  ao
                    INNER JOIN fgr.article_relationships ar
                        ON ao.article_id = ar.article_id
                    INNER JOIN spapp.Subjects sub
                        ON sub.subject_id = ar.relate_id
                    LEFT OUTER JOIN fgr.article_relationships ar1
                        ON     ar.article_id = ar1.article_id
                           AND ar1.relate_ind = 'E'
                           AND ar1.source_relate_ind = 'O'
                    LEFT OUTER JOIN fgr.ENTITY_NAMES en
                        ON     en.ENTITY_ID = ar1.relate_id
                           AND en.STATUS_IND = 'A'
                           AND en.CURR_IND = 'Y'
              WHERE     ao.fgr_status = 'A'
                    AND ar.relate_id IN (8254,
                                         8255,
                                         8256,
                                         8257)
                    AND AR.RELATE_IND = 'S'
                    AND AR.STATUS_IND = 'A'
                    AND ao.article_type = 'COMMENTS')
    SELECT tmp.ARTICLE_id,
           tmp.PresentationDate,
           tmp.ArticleDate,
           tmp.CRArticleType,
           tmp.CRPresentationTitle,
           tmp.BestPersonName     AS BestPersonName,
           tmp.CreditResearchArticleTopic,
           tmp.RELATE_ID,
           tmp.ENTITY_ID
      FROM TEMP tmp
     WHERE tmp.RELATE_ID IN (8255, 8256, 8257)
    UNION ALL
    SELECT TEMP.ARTICLE_id,
           TEMP.PresentationDate,
           TEMP.ArticleDate,
           TEMP.CRArticleType,
           TEMP.CRPresentationTitle,
           NVL (esl.data_value, '')     AS BestPersonName,
           TEMP.CreditResearchArticleTopic,
           TEMP.RELATE_ID,
           TEMP.ENTITY_ID
      FROM TEMP
           LEFT OUTER JOIN DSMPSTG.r360_ECON_FACTS_SCORES esl
               ON     esl.Job_Id = TEMP.article_id
                  AND esl.de_mnemonic = 'SP_GE_ISSUER'
                  AND esl.data_group = 'GREEN'
     WHERE TEMP.RELATE_ID = 8254
/


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\Ratings_SustainableFinance_Dec_8_2023\R360_Release_Dec_8_2023_Calling_script.sql

spool R360_Release_Dec_8_2023_Calling_script.log 

@DDL/views/R360_Release_Dec_8_2023_Calling.sql;

spool off


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\Ratings_SustainableFinance_Dec_8_2023\R360_Release_Dec_8_2023_Rollback_script.sql

R360_Release_Dec_8_2023_Rollback_script.log 

@DDL/views/R360_Release_Dec_8_2023_Rollback.sql;

spool off


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\USER_PROFILE-LOOKUP_23.09\user_profile_lookup\DML\FOREIGN_LANGUAGE_TRANS.sql

﻿SET DEFINE OFF;
Insert into R360_USER_PREF.FOREIGN_LANGUAGE_TRANS
   (FOREIGN_LANGUAGE_TRANS_ID, R360_APP_LANGUAGE_CD, ITEM_VALUE, ITEM_TYPE, FOREIGN_LANGUAGE_VALUE, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   (800, 'zh-CN', 'SP_NR_BRP_ANCH', 'INS Scores Definition', '业务风险概况 (BRP) 基于 S&P Global Ratings 对保险公司竞争地位的分析确定，并经 IICRA 调整。', 
    TO_DATE('08/21/2023 03:10:14', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', TO_DATE('08/21/2023 03:10:14', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 'Y');
Insert into R360_USER_PREF.FOREIGN_LANGUAGE_TRANS
   (FOREIGN_LANGUAGE_TRANS_ID, R360_APP_LANGUAGE_CD, ITEM_VALUE, ITEM_TYPE, FOREIGN_LANGUAGE_VALUE, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   (801, 'zh-CN', 'SP_NR_BRP_CP', 'INS Scores Definition', 'S&P Global Ratings 通过分析以下因素来评估保险公司的竞争地位：竞争优势、业务多样性和盈利能力。评估保险公司盈利能力的可持续性时，通常会考虑以下竞争优势来源：市场或细分市场地位、经营规模或效率、品牌知名度或声誉以及分销实力。对业务多样性进行评估，从而确定可能得益于更强的业务稳定性和压力适应性的保险公司。S&P Global Ratings 除了考虑保险公司的盈利水平、可持续性和波动性（包括来自非保险业务的贡献），还会考察保险公司风险收益优化的手段，以及评估和确定战略选项优先顺序的方法。如果一家保险公司因其商业模式或所有权结构（如相互保险公司）不太关注利润最大化或相关盈利能力比率，但上述因素在实际中产生了重大可持续的竞争优势，那么 S&P Global Ratings 通常不会将盈利能力视为该公司竞争地位的一个劣势或制约因素。', 
    TO_DATE('08/21/2023 03:10:14', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', TO_DATE('08/21/2023 03:10:14', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 'Y');
Insert into R360_USER_PREF.FOREIGN_LANGUAGE_TRANS
   (FOREIGN_LANGUAGE_TRANS_ID, R360_APP_LANGUAGE_CD, ITEM_VALUE, ITEM_TYPE, FOREIGN_LANGUAGE_VALUE, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   (802, 'zh-CN', 'SP_NR_BRP_IICRA', 'INS Scores Definition', '保险业和国家风险评估 (IICRA) 分析在特定行业和特定国家营业的保险公司通常面临的风险。S&P Global Ratings 还可能从全球范围分析特定部门的行业和国家风险。 为了确定各个国家和部门的  IICRA，我们评估国家风险，然后根据我们对行业风险的评估对其进行修改。对于在多个国家或部门运营的保险公司，我们会给出一个合并 IICRA。', 
    TO_DATE('08/21/2023 03:10:14', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', TO_DATE('08/21/2023 03:10:14', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 'Y');
Insert into R360_USER_PREF.FOREIGN_LANGUAGE_TRANS
   (FOREIGN_LANGUAGE_TRANS_ID, R360_APP_LANGUAGE_CD, ITEM_VALUE, ITEM_TYPE, FOREIGN_LANGUAGE_VALUE, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   (803, 'zh-CN', 'SP_NR_FRP_ANCH', 'INS Scores Definition', '财务风险概况 (FRP) 基于 S&P Global Ratings 对保险公司资本和收益的分析，并经风险敞口和融资结构修正。', 
    TO_DATE('08/21/2023 03:10:14', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', TO_DATE('08/21/2023 03:10:14', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 'Y');
Insert into R360_USER_PREF.FOREIGN_LANGUAGE_TRANS
   (FOREIGN_LANGUAGE_TRANS_ID, R360_APP_LANGUAGE_CD, ITEM_VALUE, ITEM_TYPE, FOREIGN_LANGUAGE_VALUE, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   (804, 'zh-CN', 'SP_NR_FRP_CE', 'INS Scores Definition', '在没有重大监管干预风险的情况下，S&P Global Ratings 会在预测期期末对资本和收益作出前瞻性分析。', 
    TO_DATE('08/21/2023 03:10:15', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', TO_DATE('08/21/2023 03:10:15', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 'Y');
Insert into R360_USER_PREF.FOREIGN_LANGUAGE_TRANS
   (FOREIGN_LANGUAGE_TRANS_ID, R360_APP_LANGUAGE_CD, ITEM_VALUE, ITEM_TYPE, FOREIGN_LANGUAGE_VALUE, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   (805, 'zh-CN', 'SP_NR_FRP_R_EXPO', 'INS Scores Definition', '风险敞口评估考虑的是资本和收益分析没有纳入的重大风险，以及资本和收益分析纳入了、但可能导致保险公司资本和收益的波动性大幅上升/下降的特定风险。S&P Global Ratings 认为，当风险出现或波动加剧时，若风险或对我们的资本和收益评估造成影响，则该风险属于重大风险。风险敞口评估为前瞻性评估，考虑了保险公司的风险偏好利用情况。我们还评估了保险公司的风险控制能多有效地将损失限制在其风险偏好范围内。', 
    TO_DATE('08/21/2023 03:10:15', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', TO_DATE('08/21/2023 03:10:15', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 'Y');
Insert into R360_USER_PREF.FOREIGN_LANGUAGE_TRANS
   (FOREIGN_LANGUAGE_TRANS_ID, R360_APP_LANGUAGE_CD, ITEM_VALUE, ITEM_TYPE, FOREIGN_LANGUAGE_VALUE, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   (806, 'zh-CN', 'SP_NR_FRP_FUND_STRUC', 'INS Scores Definition', 'S&P Global Ratings 考虑了使用财务杠杆和资产负债表上大量无形资产带来的风险。一家杠杆率高、固定费用覆盖比率低的公司，承受压力情景的能力和灵活性可能也比较低。', 
    TO_DATE('08/21/2023 03:10:15', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', TO_DATE('08/21/2023 03:10:15', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 'Y');
Insert into R360_USER_PREF.FOREIGN_LANGUAGE_TRANS
   (FOREIGN_LANGUAGE_TRANS_ID, R360_APP_LANGUAGE_CD, ITEM_VALUE, ITEM_TYPE, FOREIGN_LANGUAGE_VALUE, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   (807, 'zh-CN', 'SP_NR_SACP_ANCH', 'INS Scores Definition', '基准评级通过分析业务风险概况 (BRP) 和财务风险概况 (FRP) 综合得出。S&P Global Ratings 还会对治理情况、流动性以及我们为确定 SACP 而进行可比评级分析导致的任何调整进行评估，从而进一步调整基准评级。', 
    TO_DATE('08/21/2023 03:10:16', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', TO_DATE('08/21/2023 03:10:16', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 'Y');
Insert into R360_USER_PREF.FOREIGN_LANGUAGE_TRANS
   (FOREIGN_LANGUAGE_TRANS_ID, R360_APP_LANGUAGE_CD, ITEM_VALUE, ITEM_TYPE, FOREIGN_LANGUAGE_VALUE, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   (808, 'zh-CN', 'SP_NR_MG_G_G', 'INS Scores Definition', '治理分析涵盖许多风险，比如企业风险文化和治理方式、企业与股东、债权人和其他利益相关者的关系，以及企业的内部程序、政策和实践是如何引发或缓解风险的。', 
    TO_DATE('08/21/2023 03:10:16', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', TO_DATE('08/21/2023 03:10:16', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 'Y');
Insert into R360_USER_PREF.FOREIGN_LANGUAGE_TRANS
   (FOREIGN_LANGUAGE_TRANS_ID, R360_APP_LANGUAGE_CD, ITEM_VALUE, ITEM_TYPE, FOREIGN_LANGUAGE_VALUE, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   (809, 'zh-CN', 'SP_NR_GC_LIQ_MOD', 'INS Scores Definition', '流动性分析考察的是保险公司在压力状况下满足其流动性需求的能力。评估一个集团的流动性时，S&P Global Ratings 分析采取的是将控股公司包含在内的全面视角。因此，我们不会对非营运控股公司 (NOHC) 进行流动性评估。', 
    TO_DATE('08/21/2023 03:10:16', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', TO_DATE('08/21/2023 03:10:16', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 'Y');
Insert into R360_USER_PREF.FOREIGN_LANGUAGE_TRANS
   (FOREIGN_LANGUAGE_TRANS_ID, R360_APP_LANGUAGE_CD, ITEM_VALUE, ITEM_TYPE, FOREIGN_LANGUAGE_VALUE, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   (810, 'zh-CN', 'SP_NR_GC_CRA_MOD', 'INS Scores Definition', 'S&P Global Ratings 的可比评级分析纳入了标准没有单独确定的额外信用因素，以及未完全抓取的、可能由同行分析提供信息的现有信用因素。', 
    TO_DATE('08/21/2023 03:10:16', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', TO_DATE('08/21/2023 03:10:16', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 'Y');
Insert into R360_USER_PREF.FOREIGN_LANGUAGE_TRANS
   (FOREIGN_LANGUAGE_TRANS_ID, R360_APP_LANGUAGE_CD, ITEM_VALUE, ITEM_TYPE, FOREIGN_LANGUAGE_VALUE, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   (811, 'zh-CN', 'SP_NR_GC_SACP', 'INS Scores Definition', '保险公司的发行人信用评级 (ICR) 由个体信用状况 (SACP) 与支持框架共同确定。对 SACP 的评估基于以下关键因素：竞争地位、保险行业和国家风险评估 (IICRA)、资本与收益、风险敞口、融资结构、治理情况和流动性。', 
    TO_DATE('08/21/2023 03:10:17', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', TO_DATE('08/21/2023 03:10:17', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA', 'Y');
Insert into R360_USER_PREF.FOREIGN_LANGUAGE_TRANS
   (FOREIGN_LANGUAGE_TRANS_ID, R360_APP_LANGUAGE_CD, ITEM_VALUE, ITEM_TYPE, FOREIGN_LANGUAGE_VALUE, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   (812, 'zh-CN', 'AFN', 'Currency', '阿富汗阿富汗尼', 
    TO_DATE('08/21/2023 07:49:01', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', TO_DATE('08/21/2023 07:49:01', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.FOREIGN_LANGUAGE_TRANS
   (FOREIGN_LANGUAGE_TRANS_ID, R360_APP_LANGUAGE_CD, ITEM_VALUE, ITEM_TYPE, FOREIGN_LANGUAGE_VALUE, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   (813, 'zh-CN', 'DZD', 'Currency', '阿尔及利亚第纳尔', 
    TO_DATE('08/21/2023 07:49:01', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', TO_DATE('08/21/2023 07:49:01', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.FOREIGN_LANGUAGE_TRANS
   (FOREIGN_LANGUAGE_TRANS_ID, R360_APP_LANGUAGE_CD, ITEM_VALUE, ITEM_TYPE, FOREIGN_LANGUAGE_VALUE, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   (814, 'zh-CN', 'ARS', 'Currency', '阿根廷比索', 
    TO_DATE('08/21/2023 07:49:01', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', TO_DATE('08/21/2023 07:49:01', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.FOREIGN_LANGUAGE_TRANS
   (FOREIGN_LANGUAGE_TRANS_ID, R360_APP_LANGUAGE_CD, ITEM_VALUE, ITEM_TYPE, FOREIGN_LANGUAGE_VALUE, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   (815, 'zh-CN', 'AMD', 'Currency', '亚美尼亚德拉姆', 
    TO_DATE('08/21/2023 07:49:02', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', TO_DATE('08/21/2023 07:49:02', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.FOREIGN_LANGUAGE_TRANS
   (FOREIGN_LANGUAGE_TRANS_ID, R360_APP_LANGUAGE_CD, ITEM_VALUE, ITEM_TYPE, FOREIGN_LANGUAGE_VALUE, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   (816, 'zh-CN', 'AWG', 'Currency', '阿鲁巴弗罗林', 
    TO_DATE('08/21/2023 07:49:02', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', TO_DATE('08/21/2023 07:49:02', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.FOREIGN_LANGUAGE_TRANS
   (FOREIGN_LANGUAGE_TRANS_ID, R360_APP_LANGUAGE_CD, ITEM_VALUE, ITEM_TYPE, FOREIGN_LANGUAGE_VALUE, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   (817, 'zh-CN', 'AUD', 'Currency', '澳元', 
    TO_DATE('08/21/2023 07:49:02', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', TO_DATE('08/21/2023 07:49:02', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.FOREIGN_LANGUAGE_TRANS
   (FOREIGN_LANGUAGE_TRANS_ID, R360_APP_LANGUAGE_CD, ITEM_VALUE, ITEM_TYPE, FOREIGN_LANGUAGE_VALUE, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   (818, 'zh-CN', 'AZN', 'Currency', '阿塞拜疆马纳特', 
    TO_DATE('08/21/2023 07:49:02', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', TO_DATE('08/21/2023 07:49:02', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.FOREIGN_LANGUAGE_TRANS
   (FOREIGN_LANGUAGE_TRANS_ID, R360_APP_LANGUAGE_CD, ITEM_VALUE, ITEM_TYPE, FOREIGN_LANGUAGE_VALUE, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   (819, 'zh-CN', 'BSD', 'Currency', '巴哈马元', 
    TO_DATE('08/21/2023 07:49:03', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', TO_DATE('08/21/2023 07:49:03', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.FOREIGN_LANGUAGE_TRANS
   (FOREIGN_LANGUAGE_TRANS_ID, R360_APP_LANGUAGE_CD, ITEM_VALUE, ITEM_TYPE, FOREIGN_LANGUAGE_VALUE, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   (820, 'zh-CN', 'BHD', 'Currency', '巴林第纳尔', 
    TO_DATE('08/21/2023 07:49:03', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', TO_DATE('08/21/2023 07:49:03', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.FOREIGN_LANGUAGE_TRANS
   (FOREIGN_LANGUAGE_TRANS_ID, R360_APP_LANGUAGE_CD, ITEM_VALUE, ITEM_TYPE, FOREIGN_LANGUAGE_VALUE, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   (821, 'zh-CN', 'THB', 'Currency', '泰铢', 
    TO_DATE('08/21/2023 07:49:03', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', TO_DATE('08/21/2023 07:49:03', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.FOREIGN_LANGUAGE_TRANS
   (FOREIGN_LANGUAGE_TRANS_ID, R360_APP_LANGUAGE_CD, ITEM_VALUE, ITEM_TYPE, FOREIGN_LANGUAGE_VALUE, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   (822, 'zh-CN', 'PAB', 'Currency', '巴拿马巴波亚', 
    TO_DATE('08/21/2023 07:49:04', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', TO_DATE('08/21/2023 07:49:04', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.FOREIGN_LANGUAGE_TRANS
   (FOREIGN_LANGUAGE_TRANS_ID, R360_APP_LANGUAGE_CD, ITEM_VALUE, ITEM_TYPE, FOREIGN_LANGUAGE_VALUE, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   (823, 'zh-CN', 'BBD', 'Currency', '巴巴多斯元', 
    TO_DATE('08/21/2023 07:49:04', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', TO_DATE('08/21/2023 07:49:04', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.FOREIGN_LANGUAGE_TRANS
   (FOREIGN_LANGUAGE_TRANS_ID, R360_APP_LANGUAGE_CD, ITEM_VALUE, ITEM_TYPE, FOREIGN_LANGUAGE_VALUE, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   (824, 'zh-CN', 'BYN', 'Currency', '白俄罗斯卢布', 
    TO_DATE('08/21/2023 07:49:04', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', TO_DATE('08/21/2023 07:49:04', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.FOREIGN_LANGUAGE_TRANS
   (FOREIGN_LANGUAGE_TRANS_ID, R360_APP_LANGUAGE_CD, ITEM_VALUE, ITEM_TYPE, FOREIGN_LANGUAGE_VALUE, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   (825, 'zh-CN', 'BZD', 'Currency', '伯利兹元', 
    TO_DATE('08/21/2023 07:49:05', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', TO_DATE('08/21/2023 07:49:05', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.FOREIGN_LANGUAGE_TRANS
   (FOREIGN_LANGUAGE_TRANS_ID, R360_APP_LANGUAGE_CD, ITEM_VALUE, ITEM_TYPE, FOREIGN_LANGUAGE_VALUE, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   (826, 'zh-CN', 'BMD', 'Currency', '百慕大元', 
    TO_DATE('08/21/2023 07:49:05', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', TO_DATE('08/21/2023 07:49:05', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.FOREIGN_LANGUAGE_TRANS
   (FOREIGN_LANGUAGE_TRANS_ID, R360_APP_LANGUAGE_CD, ITEM_VALUE, ITEM_TYPE, FOREIGN_LANGUAGE_VALUE, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   (827, 'zh-CN', 'VES', 'Currency', '委内瑞拉玻利瓦尔', 
    TO_DATE('08/21/2023 07:49:05', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', TO_DATE('08/21/2023 07:49:05', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.FOREIGN_LANGUAGE_TRANS
   (FOREIGN_LANGUAGE_TRANS_ID, R360_APP_LANGUAGE_CD, ITEM_VALUE, ITEM_TYPE, FOREIGN_LANGUAGE_VALUE, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   (828, 'zh-CN', 'BOB', 'Currency', '玻利维亚诺', 
    TO_DATE('08/21/2023 07:49:05', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', TO_DATE('08/21/2023 07:49:05', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.FOREIGN_LANGUAGE_TRANS
   (FOREIGN_LANGUAGE_TRANS_ID, R360_APP_LANGUAGE_CD, ITEM_VALUE, ITEM_TYPE, FOREIGN_LANGUAGE_VALUE, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   (829, 'zh-CN', 'BRL', 'Currency', '巴西雷亚尔', 
    TO_DATE('08/21/2023 07:49:06', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', TO_DATE('08/21/2023 07:49:06', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.FOREIGN_LANGUAGE_TRANS
   (FOREIGN_LANGUAGE_TRANS_ID, R360_APP_LANGUAGE_CD, ITEM_VALUE, ITEM_TYPE, FOREIGN_LANGUAGE_VALUE, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   (830, 'zh-CN', 'BND', 'Currency', '文莱元', 
    TO_DATE('08/21/2023 07:49:06', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', TO_DATE('08/21/2023 07:49:06', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.FOREIGN_LANGUAGE_TRANS
   (FOREIGN_LANGUAGE_TRANS_ID, R360_APP_LANGUAGE_CD, ITEM_VALUE, ITEM_TYPE, FOREIGN_LANGUAGE_VALUE, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   (831, 'zh-CN', 'BGN', 'Currency', '保加利亚列弗', 
    TO_DATE('08/21/2023 07:49:06', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', TO_DATE('08/21/2023 07:49:06', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.FOREIGN_LANGUAGE_TRANS
   (FOREIGN_LANGUAGE_TRANS_ID, R360_APP_LANGUAGE_CD, ITEM_VALUE, ITEM_TYPE, FOREIGN_LANGUAGE_VALUE, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   (832, 'zh-CN', 'BIF', 'Currency', '布隆迪法郎', 
    TO_DATE('08/21/2023 07:49:07', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', TO_DATE('08/21/2023 07:49:07', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.FOREIGN_LANGUAGE_TRANS
   (FOREIGN_LANGUAGE_TRANS_ID, R360_APP_LANGUAGE_CD, ITEM_VALUE, ITEM_TYPE, FOREIGN_LANGUAGE_VALUE, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   (833, 'zh-CN', 'CAD', 'Currency', '加元', 
    TO_DATE('08/21/2023 07:49:07', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', TO_DATE('08/21/2023 07:49:07', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.FOREIGN_LANGUAGE_TRANS
   (FOREIGN_LANGUAGE_TRANS_ID, R360_APP_LANGUAGE_CD, ITEM_VALUE, ITEM_TYPE, FOREIGN_LANGUAGE_VALUE, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   (834, 'zh-CN', 'CVE', 'Currency', '佛得角埃斯库多', 
    TO_DATE('08/21/2023 07:49:07', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', TO_DATE('08/21/2023 07:49:07', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.FOREIGN_LANGUAGE_TRANS
   (FOREIGN_LANGUAGE_TRANS_ID, R360_APP_LANGUAGE_CD, ITEM_VALUE, ITEM_TYPE, FOREIGN_LANGUAGE_VALUE, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   (835, 'zh-CN', 'KYD', 'Currency', '开曼群岛元', 
    TO_DATE('08/21/2023 07:49:07', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', TO_DATE('08/21/2023 07:49:07', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.FOREIGN_LANGUAGE_TRANS
   (FOREIGN_LANGUAGE_TRANS_ID, R360_APP_LANGUAGE_CD, ITEM_VALUE, ITEM_TYPE, FOREIGN_LANGUAGE_VALUE, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   (836, 'zh-CN', 'GHS', 'Currency', '加纳塞地', 
    TO_DATE('08/21/2023 07:49:08', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', TO_DATE('08/21/2023 07:49:08', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.FOREIGN_LANGUAGE_TRANS
   (FOREIGN_LANGUAGE_TRANS_ID, R360_APP_LANGUAGE_CD, ITEM_VALUE, ITEM_TYPE, FOREIGN_LANGUAGE_VALUE, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   (837, 'zh-CN', 'XOF', 'Currency', '西非法郎', 
    TO_DATE('08/21/2023 07:49:08', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', TO_DATE('08/21/2023 07:49:08', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.FOREIGN_LANGUAGE_TRANS
   (FOREIGN_LANGUAGE_TRANS_ID, R360_APP_LANGUAGE_CD, ITEM_VALUE, ITEM_TYPE, FOREIGN_LANGUAGE_VALUE, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   (838, 'zh-CN', 'XAF', 'Currency', '中非法郎', 
    TO_DATE('08/21/2023 07:49:08', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', TO_DATE('08/21/2023 07:49:08', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.FOREIGN_LANGUAGE_TRANS
   (FOREIGN_LANGUAGE_TRANS_ID, R360_APP_LANGUAGE_CD, ITEM_VALUE, ITEM_TYPE, FOREIGN_LANGUAGE_VALUE, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   (839, 'zh-CN', 'XPF', 'Currency', '太平洋法郎', 
    TO_DATE('08/21/2023 07:49:09', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', TO_DATE('08/21/2023 07:49:09', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.FOREIGN_LANGUAGE_TRANS
   (FOREIGN_LANGUAGE_TRANS_ID, R360_APP_LANGUAGE_CD, ITEM_VALUE, ITEM_TYPE, FOREIGN_LANGUAGE_VALUE, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   (840, 'zh-CN', 'CLP', 'Currency', '智利比索', 
    TO_DATE('08/21/2023 07:49:09', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', TO_DATE('08/21/2023 07:49:09', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.FOREIGN_LANGUAGE_TRANS
   (FOREIGN_LANGUAGE_TRANS_ID, R360_APP_LANGUAGE_CD, ITEM_VALUE, ITEM_TYPE, FOREIGN_LANGUAGE_VALUE, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   (841, 'zh-CN', 'CNY', 'Currency', '人民币元', 
    TO_DATE('08/21/2023 07:49:09', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', TO_DATE('08/21/2023 07:49:09', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.FOREIGN_LANGUAGE_TRANS
   (FOREIGN_LANGUAGE_TRANS_ID, R360_APP_LANGUAGE_CD, ITEM_VALUE, ITEM_TYPE, FOREIGN_LANGUAGE_VALUE, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   (842, 'zh-CN', 'COP', 'Currency', '哥伦比亚比索', 
    TO_DATE('08/21/2023 07:49:09', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', TO_DATE('08/21/2023 07:49:09', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.FOREIGN_LANGUAGE_TRANS
   (FOREIGN_LANGUAGE_TRANS_ID, R360_APP_LANGUAGE_CD, ITEM_VALUE, ITEM_TYPE, FOREIGN_LANGUAGE_VALUE, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   (843, 'zh-CN', 'KMF', 'Currency', '科摩罗法郎', 
    TO_DATE('08/21/2023 07:49:10', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', TO_DATE('08/21/2023 07:49:10', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.FOREIGN_LANGUAGE_TRANS
   (FOREIGN_LANGUAGE_TRANS_ID, R360_APP_LANGUAGE_CD, ITEM_VALUE, ITEM_TYPE, FOREIGN_LANGUAGE_VALUE, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   (844, 'zh-CN', 'CDF', 'Currency', '刚果法郎', 
    TO_DATE('08/21/2023 07:49:10', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', TO_DATE('08/21/2023 07:49:10', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.FOREIGN_LANGUAGE_TRANS
   (FOREIGN_LANGUAGE_TRANS_ID, R360_APP_LANGUAGE_CD, ITEM_VALUE, ITEM_TYPE, FOREIGN_LANGUAGE_VALUE, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   (845, 'zh-CN', 'BAM', 'Currency', '波斯尼亚可兑换马克', 
    TO_DATE('08/21/2023 07:49:10', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', TO_DATE('08/21/2023 07:49:10', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.FOREIGN_LANGUAGE_TRANS
   (FOREIGN_LANGUAGE_TRANS_ID, R360_APP_LANGUAGE_CD, ITEM_VALUE, ITEM_TYPE, FOREIGN_LANGUAGE_VALUE, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   (846, 'zh-CN', 'NIO', 'Currency', '尼加拉瓜科多巴', 
    TO_DATE('08/21/2023 07:49:11', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', TO_DATE('08/21/2023 07:49:11', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.FOREIGN_LANGUAGE_TRANS
   (FOREIGN_LANGUAGE_TRANS_ID, R360_APP_LANGUAGE_CD, ITEM_VALUE, ITEM_TYPE, FOREIGN_LANGUAGE_VALUE, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   (847, 'zh-CN', 'CRC', 'Currency', '哥斯达黎加科朗', 
    TO_DATE('08/21/2023 07:49:11', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', TO_DATE('08/21/2023 07:49:11', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.FOREIGN_LANGUAGE_TRANS
   (FOREIGN_LANGUAGE_TRANS_ID, R360_APP_LANGUAGE_CD, ITEM_VALUE, ITEM_TYPE, FOREIGN_LANGUAGE_VALUE, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   (848, 'zh-CN', 'HRK', 'Currency', '克罗地亚库钠', 
    TO_DATE('08/21/2023 07:49:11', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', TO_DATE('08/21/2023 07:49:11', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.FOREIGN_LANGUAGE_TRANS
   (FOREIGN_LANGUAGE_TRANS_ID, R360_APP_LANGUAGE_CD, ITEM_VALUE, ITEM_TYPE, FOREIGN_LANGUAGE_VALUE, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   (849, 'zh-CN', 'CUP', 'Currency', '古巴比索', 
    TO_DATE('08/21/2023 07:49:12', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', TO_DATE('08/21/2023 07:49:12', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.FOREIGN_LANGUAGE_TRANS
   (FOREIGN_LANGUAGE_TRANS_ID, R360_APP_LANGUAGE_CD, ITEM_VALUE, ITEM_TYPE, FOREIGN_LANGUAGE_VALUE, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   (850, 'zh-CN', 'CZK', 'Currency', '捷克克朗', 
    TO_DATE('08/21/2023 07:49:12', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', TO_DATE('08/21/2023 07:49:12', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.FOREIGN_LANGUAGE_TRANS
   (FOREIGN_LANGUAGE_TRANS_ID, R360_APP_LANGUAGE_CD, ITEM_VALUE, ITEM_TYPE, FOREIGN_LANGUAGE_VALUE, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   (851, 'zh-CN', 'GMD', 'Currency', '冈比亚达拉西', 
    TO_DATE('08/21/2023 07:49:12', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', TO_DATE('08/21/2023 07:49:12', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.FOREIGN_LANGUAGE_TRANS
   (FOREIGN_LANGUAGE_TRANS_ID, R360_APP_LANGUAGE_CD, ITEM_VALUE, ITEM_TYPE, FOREIGN_LANGUAGE_VALUE, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   (852, 'zh-CN', 'DKK', 'Currency', '丹麦克朗', 
    TO_DATE('08/21/2023 07:49:12', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', TO_DATE('08/21/2023 07:49:12', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.FOREIGN_LANGUAGE_TRANS
   (FOREIGN_LANGUAGE_TRANS_ID, R360_APP_LANGUAGE_CD, ITEM_VALUE, ITEM_TYPE, FOREIGN_LANGUAGE_VALUE, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   (853, 'zh-CN', 'MKD', 'Currency', '马其顿第纳尔', 
    TO_DATE('08/21/2023 07:49:13', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', TO_DATE('08/21/2023 07:49:13', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.FOREIGN_LANGUAGE_TRANS
   (FOREIGN_LANGUAGE_TRANS_ID, R360_APP_LANGUAGE_CD, ITEM_VALUE, ITEM_TYPE, FOREIGN_LANGUAGE_VALUE, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   (854, 'zh-CN', 'DJF', 'Currency', '吉布提法郎', 
    TO_DATE('08/21/2023 07:49:13', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', TO_DATE('08/21/2023 07:49:13', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.FOREIGN_LANGUAGE_TRANS
   (FOREIGN_LANGUAGE_TRANS_ID, R360_APP_LANGUAGE_CD, ITEM_VALUE, ITEM_TYPE, FOREIGN_LANGUAGE_VALUE, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   (855, 'zh-CN', 'STD', 'Currency', '圣多美与普林西比多布拉', 
    TO_DATE('08/21/2023 07:49:13', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', TO_DATE('08/21/2023 07:49:13', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.FOREIGN_LANGUAGE_TRANS
   (FOREIGN_LANGUAGE_TRANS_ID, R360_APP_LANGUAGE_CD, ITEM_VALUE, ITEM_TYPE, FOREIGN_LANGUAGE_VALUE, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   (856, 'zh-CN', 'DOP', 'Currency', '多米尼加比索', 
    TO_DATE('08/21/2023 07:49:13', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', TO_DATE('08/21/2023 07:49:13', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.FOREIGN_LANGUAGE_TRANS
   (FOREIGN_LANGUAGE_TRANS_ID, R360_APP_LANGUAGE_CD, ITEM_VALUE, ITEM_TYPE, FOREIGN_LANGUAGE_VALUE, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   (857, 'zh-CN', 'XCD', 'Currency', '东加勒比元', 
    TO_DATE('08/21/2023 07:49:14', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', TO_DATE('08/21/2023 07:49:14', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.FOREIGN_LANGUAGE_TRANS
   (FOREIGN_LANGUAGE_TRANS_ID, R360_APP_LANGUAGE_CD, ITEM_VALUE, ITEM_TYPE, FOREIGN_LANGUAGE_VALUE, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   (858, 'zh-CN', 'EGP', 'Currency', '埃及镑', 
    TO_DATE('08/21/2023 07:49:14', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', TO_DATE('08/21/2023 07:49:14', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.FOREIGN_LANGUAGE_TRANS
   (FOREIGN_LANGUAGE_TRANS_ID, R360_APP_LANGUAGE_CD, ITEM_VALUE, ITEM_TYPE, FOREIGN_LANGUAGE_VALUE, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   (859, 'zh-CN', 'SVC', 'Currency', '萨尔瓦多科郎', 
    TO_DATE('08/21/2023 07:49:14', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', TO_DATE('08/21/2023 07:49:14', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.FOREIGN_LANGUAGE_TRANS
   (FOREIGN_LANGUAGE_TRANS_ID, R360_APP_LANGUAGE_CD, ITEM_VALUE, ITEM_TYPE, FOREIGN_LANGUAGE_VALUE, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   (860, 'zh-CN', 'ETB', 'Currency', '埃塞俄比亚比尔', 
    TO_DATE('08/21/2023 07:49:15', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', TO_DATE('08/21/2023 07:49:15', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.FOREIGN_LANGUAGE_TRANS
   (FOREIGN_LANGUAGE_TRANS_ID, R360_APP_LANGUAGE_CD, ITEM_VALUE, ITEM_TYPE, FOREIGN_LANGUAGE_VALUE, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   (861, 'zh-CN', 'EUR', 'Currency', '欧元', 
    TO_DATE('08/21/2023 07:49:15', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', TO_DATE('08/21/2023 07:49:15', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.FOREIGN_LANGUAGE_TRANS
   (FOREIGN_LANGUAGE_TRANS_ID, R360_APP_LANGUAGE_CD, ITEM_VALUE, ITEM_TYPE, FOREIGN_LANGUAGE_VALUE, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   (862, 'zh-CN', 'FKP', 'Currency', '福克兰群岛镑', 
    TO_DATE('08/21/2023 07:49:15', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', TO_DATE('08/21/2023 07:49:15', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.FOREIGN_LANGUAGE_TRANS
   (FOREIGN_LANGUAGE_TRANS_ID, R360_APP_LANGUAGE_CD, ITEM_VALUE, ITEM_TYPE, FOREIGN_LANGUAGE_VALUE, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   (863, 'zh-CN', 'FJD', 'Currency', '斐济元', 
    TO_DATE('08/21/2023 07:49:16', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', TO_DATE('08/21/2023 07:49:16', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.FOREIGN_LANGUAGE_TRANS
   (FOREIGN_LANGUAGE_TRANS_ID, R360_APP_LANGUAGE_CD, ITEM_VALUE, ITEM_TYPE, FOREIGN_LANGUAGE_VALUE, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   (864, 'zh-CN', 'HUF', 'Currency', '匈牙利福林', 
    TO_DATE('08/21/2023 07:49:16', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', TO_DATE('08/21/2023 07:49:16', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.FOREIGN_LANGUAGE_TRANS
   (FOREIGN_LANGUAGE_TRANS_ID, R360_APP_LANGUAGE_CD, ITEM_VALUE, ITEM_TYPE, FOREIGN_LANGUAGE_VALUE, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   (865, 'zh-CN', 'GIP', 'Currency', '直布罗陀镑', 
    TO_DATE('08/21/2023 07:49:16', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', TO_DATE('08/21/2023 07:49:16', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.FOREIGN_LANGUAGE_TRANS
   (FOREIGN_LANGUAGE_TRANS_ID, R360_APP_LANGUAGE_CD, ITEM_VALUE, ITEM_TYPE, FOREIGN_LANGUAGE_VALUE, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   (866, 'zh-CN', 'HTG', 'Currency', '海地古德', 
    TO_DATE('08/21/2023 07:49:17', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', TO_DATE('08/21/2023 07:49:17', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.FOREIGN_LANGUAGE_TRANS
   (FOREIGN_LANGUAGE_TRANS_ID, R360_APP_LANGUAGE_CD, ITEM_VALUE, ITEM_TYPE, FOREIGN_LANGUAGE_VALUE, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   (867, 'zh-CN', 'PYG', 'Currency', '巴拉圭瓜拉尼', 
    TO_DATE('08/21/2023 07:49:17', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', TO_DATE('08/21/2023 07:49:17', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.FOREIGN_LANGUAGE_TRANS
   (FOREIGN_LANGUAGE_TRANS_ID, R360_APP_LANGUAGE_CD, ITEM_VALUE, ITEM_TYPE, FOREIGN_LANGUAGE_VALUE, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   (868, 'zh-CN', 'GNF', 'Currency', '几内亚法郎', 
    TO_DATE('08/21/2023 07:49:17', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', TO_DATE('08/21/2023 07:49:17', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.FOREIGN_LANGUAGE_TRANS
   (FOREIGN_LANGUAGE_TRANS_ID, R360_APP_LANGUAGE_CD, ITEM_VALUE, ITEM_TYPE, FOREIGN_LANGUAGE_VALUE, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   (869, 'zh-CN', 'GYD', 'Currency', '圭亚那元', 
    TO_DATE('08/21/2023 07:49:17', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', TO_DATE('08/21/2023 07:49:17', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.FOREIGN_LANGUAGE_TRANS
   (FOREIGN_LANGUAGE_TRANS_ID, R360_APP_LANGUAGE_CD, ITEM_VALUE, ITEM_TYPE, FOREIGN_LANGUAGE_VALUE, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   (870, 'zh-CN', 'HKD', 'Currency', '港币', 
    TO_DATE('08/21/2023 07:49:18', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', TO_DATE('08/21/2023 07:49:18', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.FOREIGN_LANGUAGE_TRANS
   (FOREIGN_LANGUAGE_TRANS_ID, R360_APP_LANGUAGE_CD, ITEM_VALUE, ITEM_TYPE, FOREIGN_LANGUAGE_VALUE, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   (871, 'zh-CN', 'UAH', 'Currency', '乌克兰格里夫纳', 
    TO_DATE('08/21/2023 07:49:18', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', TO_DATE('08/21/2023 07:49:18', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.FOREIGN_LANGUAGE_TRANS
   (FOREIGN_LANGUAGE_TRANS_ID, R360_APP_LANGUAGE_CD, ITEM_VALUE, ITEM_TYPE, FOREIGN_LANGUAGE_VALUE, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   (872, 'zh-CN', 'ISK', 'Currency', '冰岛克朗', 
    TO_DATE('08/21/2023 07:49:18', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', TO_DATE('08/21/2023 07:49:18', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.FOREIGN_LANGUAGE_TRANS
   (FOREIGN_LANGUAGE_TRANS_ID, R360_APP_LANGUAGE_CD, ITEM_VALUE, ITEM_TYPE, FOREIGN_LANGUAGE_VALUE, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   (873, 'zh-CN', 'INR', 'Currency', '印度卢比', 
    TO_DATE('08/21/2023 07:49:19', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', TO_DATE('08/21/2023 07:49:19', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.FOREIGN_LANGUAGE_TRANS
   (FOREIGN_LANGUAGE_TRANS_ID, R360_APP_LANGUAGE_CD, ITEM_VALUE, ITEM_TYPE, FOREIGN_LANGUAGE_VALUE, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   (874, 'zh-CN', 'IRR', 'Currency', '伊朗里亚尔', 
    TO_DATE('08/21/2023 07:49:19', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', TO_DATE('08/21/2023 07:49:19', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.FOREIGN_LANGUAGE_TRANS
   (FOREIGN_LANGUAGE_TRANS_ID, R360_APP_LANGUAGE_CD, ITEM_VALUE, ITEM_TYPE, FOREIGN_LANGUAGE_VALUE, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   (875, 'zh-CN', 'IQD', 'Currency', '伊拉克第纳尔', 
    TO_DATE('08/21/2023 07:49:19', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', TO_DATE('08/21/2023 07:49:19', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.FOREIGN_LANGUAGE_TRANS
   (FOREIGN_LANGUAGE_TRANS_ID, R360_APP_LANGUAGE_CD, ITEM_VALUE, ITEM_TYPE, FOREIGN_LANGUAGE_VALUE, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   (876, 'zh-CN', 'JMD', 'Currency', '牙买加元', 
    TO_DATE('08/21/2023 07:49:20', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', TO_DATE('08/21/2023 07:49:20', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.FOREIGN_LANGUAGE_TRANS
   (FOREIGN_LANGUAGE_TRANS_ID, R360_APP_LANGUAGE_CD, ITEM_VALUE, ITEM_TYPE, FOREIGN_LANGUAGE_VALUE, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   (877, 'zh-CN', 'JOD', 'Currency', '约旦第纳尔', 
    TO_DATE('08/21/2023 07:49:20', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', TO_DATE('08/21/2023 07:49:20', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.FOREIGN_LANGUAGE_TRANS
   (FOREIGN_LANGUAGE_TRANS_ID, R360_APP_LANGUAGE_CD, ITEM_VALUE, ITEM_TYPE, FOREIGN_LANGUAGE_VALUE, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   (878, 'zh-CN', 'KES', 'Currency', '肯尼亚先令', 
    TO_DATE('08/21/2023 07:49:20', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', TO_DATE('08/21/2023 07:49:20', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.FOREIGN_LANGUAGE_TRANS
   (FOREIGN_LANGUAGE_TRANS_ID, R360_APP_LANGUAGE_CD, ITEM_VALUE, ITEM_TYPE, FOREIGN_LANGUAGE_VALUE, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   (879, 'zh-CN', 'PGK', 'Currency', '巴布亚新几内亚比娜', 
    TO_DATE('08/21/2023 07:49:21', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', TO_DATE('08/21/2023 07:49:21', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.FOREIGN_LANGUAGE_TRANS
   (FOREIGN_LANGUAGE_TRANS_ID, R360_APP_LANGUAGE_CD, ITEM_VALUE, ITEM_TYPE, FOREIGN_LANGUAGE_VALUE, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   (880, 'zh-CN', 'LAK', 'Currency', '老挝基普', 
    TO_DATE('08/21/2023 07:49:21', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', TO_DATE('08/21/2023 07:49:21', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.FOREIGN_LANGUAGE_TRANS
   (FOREIGN_LANGUAGE_TRANS_ID, R360_APP_LANGUAGE_CD, ITEM_VALUE, ITEM_TYPE, FOREIGN_LANGUAGE_VALUE, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   (881, 'zh-CN', 'KWD', 'Currency', '科威特第纳尔', 
    TO_DATE('08/21/2023 07:49:21', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', TO_DATE('08/21/2023 07:49:21', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.FOREIGN_LANGUAGE_TRANS
   (FOREIGN_LANGUAGE_TRANS_ID, R360_APP_LANGUAGE_CD, ITEM_VALUE, ITEM_TYPE, FOREIGN_LANGUAGE_VALUE, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   (882, 'zh-CN', 'MWK', 'Currency', '马拉维克瓦查', 
    TO_DATE('08/21/2023 07:49:22', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', TO_DATE('08/21/2023 07:49:22', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.FOREIGN_LANGUAGE_TRANS
   (FOREIGN_LANGUAGE_TRANS_ID, R360_APP_LANGUAGE_CD, ITEM_VALUE, ITEM_TYPE, FOREIGN_LANGUAGE_VALUE, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   (883, 'zh-CN', 'AOA', 'Currency', '安哥拉宽扎', 
    TO_DATE('08/21/2023 07:49:22', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', TO_DATE('08/21/2023 07:49:22', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.FOREIGN_LANGUAGE_TRANS
   (FOREIGN_LANGUAGE_TRANS_ID, R360_APP_LANGUAGE_CD, ITEM_VALUE, ITEM_TYPE, FOREIGN_LANGUAGE_VALUE, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   (884, 'zh-CN', 'MMK', 'Currency', '缅甸缅元', 
    TO_DATE('08/21/2023 07:49:22', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', TO_DATE('08/21/2023 07:49:22', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.FOREIGN_LANGUAGE_TRANS
   (FOREIGN_LANGUAGE_TRANS_ID, R360_APP_LANGUAGE_CD, ITEM_VALUE, ITEM_TYPE, FOREIGN_LANGUAGE_VALUE, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   (885, 'zh-CN', 'GEL', 'Currency', '格鲁吉亚拉里', 
    TO_DATE('08/21/2023 07:49:23', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', TO_DATE('08/21/2023 07:49:23', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.FOREIGN_LANGUAGE_TRANS
   (FOREIGN_LANGUAGE_TRANS_ID, R360_APP_LANGUAGE_CD, ITEM_VALUE, ITEM_TYPE, FOREIGN_LANGUAGE_VALUE, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   (886, 'zh-CN', 'LBP', 'Currency', '黎巴嫩镑', 
    TO_DATE('08/21/2023 07:49:23', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', TO_DATE('08/21/2023 07:49:23', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.FOREIGN_LANGUAGE_TRANS
   (FOREIGN_LANGUAGE_TRANS_ID, R360_APP_LANGUAGE_CD, ITEM_VALUE, ITEM_TYPE, FOREIGN_LANGUAGE_VALUE, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   (887, 'zh-CN', 'ALL', 'Currency', '阿尔巴尼亚列克', 
    TO_DATE('08/21/2023 07:49:23', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', TO_DATE('08/21/2023 07:49:23', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.FOREIGN_LANGUAGE_TRANS
   (FOREIGN_LANGUAGE_TRANS_ID, R360_APP_LANGUAGE_CD, ITEM_VALUE, ITEM_TYPE, FOREIGN_LANGUAGE_VALUE, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   (888, 'zh-CN', 'HNL', 'Currency', '洪都拉斯伦皮拉', 
    TO_DATE('08/21/2023 07:49:24', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', TO_DATE('08/21/2023 07:49:24', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.FOREIGN_LANGUAGE_TRANS
   (FOREIGN_LANGUAGE_TRANS_ID, R360_APP_LANGUAGE_CD, ITEM_VALUE, ITEM_TYPE, FOREIGN_LANGUAGE_VALUE, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   (889, 'zh-CN', 'SLL', 'Currency', '塞拉利昂利昂', 
    TO_DATE('08/21/2023 07:49:24', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', TO_DATE('08/21/2023 07:49:24', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.FOREIGN_LANGUAGE_TRANS
   (FOREIGN_LANGUAGE_TRANS_ID, R360_APP_LANGUAGE_CD, ITEM_VALUE, ITEM_TYPE, FOREIGN_LANGUAGE_VALUE, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   (890, 'zh-CN', 'LRD', 'Currency', '利比里亚元', 
    TO_DATE('08/21/2023 07:49:24', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', TO_DATE('08/21/2023 07:49:24', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.FOREIGN_LANGUAGE_TRANS
   (FOREIGN_LANGUAGE_TRANS_ID, R360_APP_LANGUAGE_CD, ITEM_VALUE, ITEM_TYPE, FOREIGN_LANGUAGE_VALUE, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   (891, 'zh-CN', 'LYD', 'Currency', '利比亚第纳尔', 
    TO_DATE('08/21/2023 07:49:25', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', TO_DATE('08/21/2023 07:49:25', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.FOREIGN_LANGUAGE_TRANS
   (FOREIGN_LANGUAGE_TRANS_ID, R360_APP_LANGUAGE_CD, ITEM_VALUE, ITEM_TYPE, FOREIGN_LANGUAGE_VALUE, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   (892, 'zh-CN', 'SZL', 'Currency', '斯威士兰里兰吉尼', 
    TO_DATE('08/21/2023 07:49:25', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', TO_DATE('08/21/2023 07:49:25', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.FOREIGN_LANGUAGE_TRANS
   (FOREIGN_LANGUAGE_TRANS_ID, R360_APP_LANGUAGE_CD, ITEM_VALUE, ITEM_TYPE, FOREIGN_LANGUAGE_VALUE, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   (893, 'zh-CN', 'LSL', 'Currency', '莱索托洛蒂', 
    TO_DATE('08/21/2023 07:49:25', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', TO_DATE('08/21/2023 07:49:25', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.FOREIGN_LANGUAGE_TRANS
   (FOREIGN_LANGUAGE_TRANS_ID, R360_APP_LANGUAGE_CD, ITEM_VALUE, ITEM_TYPE, FOREIGN_LANGUAGE_VALUE, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   (894, 'zh-CN', 'MGA', 'Currency', '马达加斯加阿里亚里', 
    TO_DATE('08/21/2023 07:49:26', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', TO_DATE('08/21/2023 07:49:26', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.FOREIGN_LANGUAGE_TRANS
   (FOREIGN_LANGUAGE_TRANS_ID, R360_APP_LANGUAGE_CD, ITEM_VALUE, ITEM_TYPE, FOREIGN_LANGUAGE_VALUE, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   (895, 'zh-CN', 'MYR', 'Currency', '马来西亚林吉特', 
    TO_DATE('08/21/2023 07:49:26', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', TO_DATE('08/21/2023 07:49:26', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.FOREIGN_LANGUAGE_TRANS
   (FOREIGN_LANGUAGE_TRANS_ID, R360_APP_LANGUAGE_CD, ITEM_VALUE, ITEM_TYPE, FOREIGN_LANGUAGE_VALUE, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   (896, 'zh-CN', 'TMT', 'Currency', '土库曼斯坦马纳特', 
    TO_DATE('08/21/2023 07:49:26', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', TO_DATE('08/21/2023 07:49:26', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.FOREIGN_LANGUAGE_TRANS
   (FOREIGN_LANGUAGE_TRANS_ID, R360_APP_LANGUAGE_CD, ITEM_VALUE, ITEM_TYPE, FOREIGN_LANGUAGE_VALUE, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   (897, 'zh-CN', 'MUR', 'Currency', '毛里求斯卢比', 
    TO_DATE('08/21/2023 07:49:27', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', TO_DATE('08/21/2023 07:49:27', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.FOREIGN_LANGUAGE_TRANS
   (FOREIGN_LANGUAGE_TRANS_ID, R360_APP_LANGUAGE_CD, ITEM_VALUE, ITEM_TYPE, FOREIGN_LANGUAGE_VALUE, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   (898, 'zh-CN', 'MZN', 'Currency', '莫桑比克梅蒂卡尔', 
    TO_DATE('08/21/2023 07:49:27', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', TO_DATE('08/21/2023 07:49:27', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.FOREIGN_LANGUAGE_TRANS
   (FOREIGN_LANGUAGE_TRANS_ID, R360_APP_LANGUAGE_CD, ITEM_VALUE, ITEM_TYPE, FOREIGN_LANGUAGE_VALUE, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   (899, 'zh-CN', 'MXN', 'Currency', '墨西哥比索', 
    TO_DATE('08/21/2023 07:49:27', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', TO_DATE('08/21/2023 07:49:27', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.FOREIGN_LANGUAGE_TRANS
   (FOREIGN_LANGUAGE_TRANS_ID, R360_APP_LANGUAGE_CD, ITEM_VALUE, ITEM_TYPE, FOREIGN_LANGUAGE_VALUE, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   (900, 'zh-CN', 'MDL', 'Currency', '摩尔多瓦列伊', 
    TO_DATE('08/21/2023 07:49:28', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', TO_DATE('08/21/2023 07:49:28', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.FOREIGN_LANGUAGE_TRANS
   (FOREIGN_LANGUAGE_TRANS_ID, R360_APP_LANGUAGE_CD, ITEM_VALUE, ITEM_TYPE, FOREIGN_LANGUAGE_VALUE, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   (901, 'zh-CN', 'MAD', 'Currency', '摩洛哥迪拉姆', 
    TO_DATE('08/21/2023 07:49:28', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', TO_DATE('08/21/2023 07:49:28', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.FOREIGN_LANGUAGE_TRANS
   (FOREIGN_LANGUAGE_TRANS_ID, R360_APP_LANGUAGE_CD, ITEM_VALUE, ITEM_TYPE, FOREIGN_LANGUAGE_VALUE, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   (902, 'zh-CN', 'NGN', 'Currency', '尼日利亚奈拉', 
    TO_DATE('08/21/2023 07:49:28', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', TO_DATE('08/21/2023 07:49:28', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.FOREIGN_LANGUAGE_TRANS
   (FOREIGN_LANGUAGE_TRANS_ID, R360_APP_LANGUAGE_CD, ITEM_VALUE, ITEM_TYPE, FOREIGN_LANGUAGE_VALUE, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   (903, 'zh-CN', 'ERN', 'Currency', '厄立特里亚纳克法', 
    TO_DATE('08/21/2023 07:49:28', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', TO_DATE('08/21/2023 07:49:28', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.FOREIGN_LANGUAGE_TRANS
   (FOREIGN_LANGUAGE_TRANS_ID, R360_APP_LANGUAGE_CD, ITEM_VALUE, ITEM_TYPE, FOREIGN_LANGUAGE_VALUE, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   (904, 'zh-CN', 'NAD', 'Currency', '纳米比亚元', 
    TO_DATE('08/21/2023 07:49:29', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', TO_DATE('08/21/2023 07:49:29', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.FOREIGN_LANGUAGE_TRANS
   (FOREIGN_LANGUAGE_TRANS_ID, R360_APP_LANGUAGE_CD, ITEM_VALUE, ITEM_TYPE, FOREIGN_LANGUAGE_VALUE, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   (905, 'zh-CN', 'NPR', 'Currency', '尼泊尔卢比', 
    TO_DATE('08/21/2023 07:49:29', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', TO_DATE('08/21/2023 07:49:29', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.FOREIGN_LANGUAGE_TRANS
   (FOREIGN_LANGUAGE_TRANS_ID, R360_APP_LANGUAGE_CD, ITEM_VALUE, ITEM_TYPE, FOREIGN_LANGUAGE_VALUE, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   (906, 'zh-CN', 'ANG', 'Currency', '荷兰安的列斯盾', 
    TO_DATE('08/21/2023 07:49:29', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', TO_DATE('08/21/2023 07:49:29', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.FOREIGN_LANGUAGE_TRANS
   (FOREIGN_LANGUAGE_TRANS_ID, R360_APP_LANGUAGE_CD, ITEM_VALUE, ITEM_TYPE, FOREIGN_LANGUAGE_VALUE, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   (907, 'zh-CN', 'ILS', 'Currency', '以色列新谢克尔', 
    TO_DATE('08/21/2023 07:49:30', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', TO_DATE('08/21/2023 07:49:30', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.FOREIGN_LANGUAGE_TRANS
   (FOREIGN_LANGUAGE_TRANS_ID, R360_APP_LANGUAGE_CD, ITEM_VALUE, ITEM_TYPE, FOREIGN_LANGUAGE_VALUE, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   (908, 'zh-CN', 'RON', 'Currency', '罗马尼亚列伊', 
    TO_DATE('08/21/2023 07:49:30', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', TO_DATE('08/21/2023 07:49:30', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.FOREIGN_LANGUAGE_TRANS
   (FOREIGN_LANGUAGE_TRANS_ID, R360_APP_LANGUAGE_CD, ITEM_VALUE, ITEM_TYPE, FOREIGN_LANGUAGE_VALUE, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   (909, 'zh-CN', 'TWD', 'Currency', '新台币', 
    TO_DATE('08/21/2023 07:49:30', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', TO_DATE('08/21/2023 07:49:30', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.FOREIGN_LANGUAGE_TRANS
   (FOREIGN_LANGUAGE_TRANS_ID, R360_APP_LANGUAGE_CD, ITEM_VALUE, ITEM_TYPE, FOREIGN_LANGUAGE_VALUE, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   (910, 'zh-CN', 'NZD', 'Currency', '新西兰元', 
    TO_DATE('08/21/2023 07:49:31', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', TO_DATE('08/21/2023 07:49:31', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.FOREIGN_LANGUAGE_TRANS
   (FOREIGN_LANGUAGE_TRANS_ID, R360_APP_LANGUAGE_CD, ITEM_VALUE, ITEM_TYPE, FOREIGN_LANGUAGE_VALUE, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   (911, 'zh-CN', 'BTN', 'Currency', '不丹努尔特鲁姆', 
    TO_DATE('08/21/2023 07:49:31', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', TO_DATE('08/21/2023 07:49:31', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.FOREIGN_LANGUAGE_TRANS
   (FOREIGN_LANGUAGE_TRANS_ID, R360_APP_LANGUAGE_CD, ITEM_VALUE, ITEM_TYPE, FOREIGN_LANGUAGE_VALUE, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   (912, 'zh-CN', 'KPW', 'Currency', '朝鲜元', 
    TO_DATE('08/21/2023 07:49:31', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', TO_DATE('08/21/2023 07:49:31', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.FOREIGN_LANGUAGE_TRANS
   (FOREIGN_LANGUAGE_TRANS_ID, R360_APP_LANGUAGE_CD, ITEM_VALUE, ITEM_TYPE, FOREIGN_LANGUAGE_VALUE, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   (913, 'zh-CN', 'NOK', 'Currency', '挪威克朗', 
    TO_DATE('08/21/2023 07:49:32', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', TO_DATE('08/21/2023 07:49:32', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.FOREIGN_LANGUAGE_TRANS
   (FOREIGN_LANGUAGE_TRANS_ID, R360_APP_LANGUAGE_CD, ITEM_VALUE, ITEM_TYPE, FOREIGN_LANGUAGE_VALUE, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   (914, 'zh-CN', 'PEN', 'Currency', '秘鲁新索尔', 
    TO_DATE('08/21/2023 07:49:32', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', TO_DATE('08/21/2023 07:49:32', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.FOREIGN_LANGUAGE_TRANS
   (FOREIGN_LANGUAGE_TRANS_ID, R360_APP_LANGUAGE_CD, ITEM_VALUE, ITEM_TYPE, FOREIGN_LANGUAGE_VALUE, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   (915, 'zh-CN', 'MRO', 'Currency', '毛里塔尼亚乌吉亚', 
    TO_DATE('08/21/2023 07:49:32', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', TO_DATE('08/21/2023 07:49:32', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.FOREIGN_LANGUAGE_TRANS
   (FOREIGN_LANGUAGE_TRANS_ID, R360_APP_LANGUAGE_CD, ITEM_VALUE, ITEM_TYPE, FOREIGN_LANGUAGE_VALUE, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   (916, 'zh-CN', 'TOP', 'Currency', '汤加潘加', 
    TO_DATE('08/21/2023 07:49:32', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', TO_DATE('08/21/2023 07:49:32', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.FOREIGN_LANGUAGE_TRANS
   (FOREIGN_LANGUAGE_TRANS_ID, R360_APP_LANGUAGE_CD, ITEM_VALUE, ITEM_TYPE, FOREIGN_LANGUAGE_VALUE, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   (917, 'zh-CN', 'PKR', 'Currency', '巴基斯坦卢比', 
    TO_DATE('08/21/2023 07:49:33', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', TO_DATE('08/21/2023 07:49:33', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.FOREIGN_LANGUAGE_TRANS
   (FOREIGN_LANGUAGE_TRANS_ID, R360_APP_LANGUAGE_CD, ITEM_VALUE, ITEM_TYPE, FOREIGN_LANGUAGE_VALUE, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   (918, 'zh-CN', 'MOP', 'Currency', '澳门币', 
    TO_DATE('08/21/2023 07:49:33', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', TO_DATE('08/21/2023 07:49:33', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.FOREIGN_LANGUAGE_TRANS
   (FOREIGN_LANGUAGE_TRANS_ID, R360_APP_LANGUAGE_CD, ITEM_VALUE, ITEM_TYPE, FOREIGN_LANGUAGE_VALUE, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   (919, 'zh-CN', 'UYU', 'Currency', '乌拉圭比索', 
    TO_DATE('08/21/2023 07:49:33', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', TO_DATE('08/21/2023 07:49:33', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.FOREIGN_LANGUAGE_TRANS
   (FOREIGN_LANGUAGE_TRANS_ID, R360_APP_LANGUAGE_CD, ITEM_VALUE, ITEM_TYPE, FOREIGN_LANGUAGE_VALUE, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   (920, 'zh-CN', 'PHP', 'Currency', '菲律宾比索', 
    TO_DATE('08/21/2023 07:49:34', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', TO_DATE('08/21/2023 07:49:34', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.FOREIGN_LANGUAGE_TRANS
   (FOREIGN_LANGUAGE_TRANS_ID, R360_APP_LANGUAGE_CD, ITEM_VALUE, ITEM_TYPE, FOREIGN_LANGUAGE_VALUE, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   (921, 'zh-CN', 'GBP', 'Currency', '英镑', 
    TO_DATE('08/21/2023 07:49:34', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', TO_DATE('08/21/2023 07:49:34', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.FOREIGN_LANGUAGE_TRANS
   (FOREIGN_LANGUAGE_TRANS_ID, R360_APP_LANGUAGE_CD, ITEM_VALUE, ITEM_TYPE, FOREIGN_LANGUAGE_VALUE, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   (922, 'zh-CN', 'BWP', 'Currency', '博茨瓦纳普拉', 
    TO_DATE('08/21/2023 07:49:34', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', TO_DATE('08/21/2023 07:49:34', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.FOREIGN_LANGUAGE_TRANS
   (FOREIGN_LANGUAGE_TRANS_ID, R360_APP_LANGUAGE_CD, ITEM_VALUE, ITEM_TYPE, FOREIGN_LANGUAGE_VALUE, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   (923, 'zh-CN', 'QAR', 'Currency', '卡塔尔里亚尔', 
    TO_DATE('08/21/2023 07:49:34', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', TO_DATE('08/21/2023 07:49:34', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.FOREIGN_LANGUAGE_TRANS
   (FOREIGN_LANGUAGE_TRANS_ID, R360_APP_LANGUAGE_CD, ITEM_VALUE, ITEM_TYPE, FOREIGN_LANGUAGE_VALUE, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   (924, 'zh-CN', 'GTQ', 'Currency', '危地马拉格查尔', 
    TO_DATE('08/21/2023 07:49:35', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', TO_DATE('08/21/2023 07:49:35', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.FOREIGN_LANGUAGE_TRANS
   (FOREIGN_LANGUAGE_TRANS_ID, R360_APP_LANGUAGE_CD, ITEM_VALUE, ITEM_TYPE, FOREIGN_LANGUAGE_VALUE, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   (925, 'zh-CN', 'ZAR', 'Currency', '南非兰特', 
    TO_DATE('08/21/2023 07:49:35', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', TO_DATE('08/21/2023 07:49:35', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.FOREIGN_LANGUAGE_TRANS
   (FOREIGN_LANGUAGE_TRANS_ID, R360_APP_LANGUAGE_CD, ITEM_VALUE, ITEM_TYPE, FOREIGN_LANGUAGE_VALUE, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   (926, 'zh-CN', 'OMR', 'Currency', '阿曼里亚尔', 
    TO_DATE('08/21/2023 07:49:35', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', TO_DATE('08/21/2023 07:49:35', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.FOREIGN_LANGUAGE_TRANS
   (FOREIGN_LANGUAGE_TRANS_ID, R360_APP_LANGUAGE_CD, ITEM_VALUE, ITEM_TYPE, FOREIGN_LANGUAGE_VALUE, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   (927, 'zh-CN', 'KHR', 'Currency', '柬埔寨瑞尔', 
    TO_DATE('08/21/2023 07:49:36', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', TO_DATE('08/21/2023 07:49:36', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.FOREIGN_LANGUAGE_TRANS
   (FOREIGN_LANGUAGE_TRANS_ID, R360_APP_LANGUAGE_CD, ITEM_VALUE, ITEM_TYPE, FOREIGN_LANGUAGE_VALUE, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   (928, 'zh-CN', 'MVR', 'Currency', '马尔代夫罗非亚', 
    TO_DATE('08/21/2023 07:49:36', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', TO_DATE('08/21/2023 07:49:36', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.FOREIGN_LANGUAGE_TRANS
   (FOREIGN_LANGUAGE_TRANS_ID, R360_APP_LANGUAGE_CD, ITEM_VALUE, ITEM_TYPE, FOREIGN_LANGUAGE_VALUE, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   (929, 'zh-CN', 'IDR', 'Currency', '印尼盾', 
    TO_DATE('08/21/2023 07:49:36', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', TO_DATE('08/21/2023 07:49:36', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.FOREIGN_LANGUAGE_TRANS
   (FOREIGN_LANGUAGE_TRANS_ID, R360_APP_LANGUAGE_CD, ITEM_VALUE, ITEM_TYPE, FOREIGN_LANGUAGE_VALUE, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   (930, 'zh-CN', 'RUB', 'Currency', '俄罗斯卢布', 
    TO_DATE('08/21/2023 07:49:36', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', TO_DATE('08/21/2023 07:49:36', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.FOREIGN_LANGUAGE_TRANS
   (FOREIGN_LANGUAGE_TRANS_ID, R360_APP_LANGUAGE_CD, ITEM_VALUE, ITEM_TYPE, FOREIGN_LANGUAGE_VALUE, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   (931, 'zh-CN', 'RWF', 'Currency', '卢旺达法郎', 
    TO_DATE('08/21/2023 07:49:37', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', TO_DATE('08/21/2023 07:49:37', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.FOREIGN_LANGUAGE_TRANS
   (FOREIGN_LANGUAGE_TRANS_ID, R360_APP_LANGUAGE_CD, ITEM_VALUE, ITEM_TYPE, FOREIGN_LANGUAGE_VALUE, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   (932, 'zh-CN', 'SHP', 'Currency', '圣赫勒拿镑', 
    TO_DATE('08/21/2023 07:49:37', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', TO_DATE('08/21/2023 07:49:37', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.FOREIGN_LANGUAGE_TRANS
   (FOREIGN_LANGUAGE_TRANS_ID, R360_APP_LANGUAGE_CD, ITEM_VALUE, ITEM_TYPE, FOREIGN_LANGUAGE_VALUE, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   (933, 'zh-CN', 'SAR', 'Currency', '沙特里亚尔', 
    TO_DATE('08/21/2023 07:49:37', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', TO_DATE('08/21/2023 07:49:37', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.FOREIGN_LANGUAGE_TRANS
   (FOREIGN_LANGUAGE_TRANS_ID, R360_APP_LANGUAGE_CD, ITEM_VALUE, ITEM_TYPE, FOREIGN_LANGUAGE_VALUE, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   (934, 'zh-CN', 'XDR', 'Currency', '特别提款权', 
    TO_DATE('08/21/2023 07:49:38', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', TO_DATE('08/21/2023 07:49:38', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.FOREIGN_LANGUAGE_TRANS
   (FOREIGN_LANGUAGE_TRANS_ID, R360_APP_LANGUAGE_CD, ITEM_VALUE, ITEM_TYPE, FOREIGN_LANGUAGE_VALUE, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   (935, 'zh-CN', 'RSD', 'Currency', '塞尔维亚第纳尔', 
    TO_DATE('08/21/2023 07:49:38', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', TO_DATE('08/21/2023 07:49:38', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.FOREIGN_LANGUAGE_TRANS
   (FOREIGN_LANGUAGE_TRANS_ID, R360_APP_LANGUAGE_CD, ITEM_VALUE, ITEM_TYPE, FOREIGN_LANGUAGE_VALUE, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   (936, 'zh-CN', 'SCR', 'Currency', '塞舌尔卢比', 
    TO_DATE('08/21/2023 07:49:38', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', TO_DATE('08/21/2023 07:49:38', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.FOREIGN_LANGUAGE_TRANS
   (FOREIGN_LANGUAGE_TRANS_ID, R360_APP_LANGUAGE_CD, ITEM_VALUE, ITEM_TYPE, FOREIGN_LANGUAGE_VALUE, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   (937, 'zh-CN', 'SGD', 'Currency', '新加坡元', 
    TO_DATE('08/21/2023 07:49:39', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', TO_DATE('08/21/2023 07:49:39', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.FOREIGN_LANGUAGE_TRANS
   (FOREIGN_LANGUAGE_TRANS_ID, R360_APP_LANGUAGE_CD, ITEM_VALUE, ITEM_TYPE, FOREIGN_LANGUAGE_VALUE, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   (938, 'zh-CN', 'SBD', 'Currency', '所罗门群岛元', 
    TO_DATE('08/21/2023 07:49:39', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', TO_DATE('08/21/2023 07:49:39', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.FOREIGN_LANGUAGE_TRANS
   (FOREIGN_LANGUAGE_TRANS_ID, R360_APP_LANGUAGE_CD, ITEM_VALUE, ITEM_TYPE, FOREIGN_LANGUAGE_VALUE, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   (939, 'zh-CN', 'KGS', 'Currency', '吉尔吉斯斯坦索姆', 
    TO_DATE('08/21/2023 07:49:39', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', TO_DATE('08/21/2023 07:49:39', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.FOREIGN_LANGUAGE_TRANS
   (FOREIGN_LANGUAGE_TRANS_ID, R360_APP_LANGUAGE_CD, ITEM_VALUE, ITEM_TYPE, FOREIGN_LANGUAGE_VALUE, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   (940, 'zh-CN', 'SOS', 'Currency', '索马里先令', 
    TO_DATE('08/21/2023 07:49:40', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', TO_DATE('08/21/2023 07:49:40', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.FOREIGN_LANGUAGE_TRANS
   (FOREIGN_LANGUAGE_TRANS_ID, R360_APP_LANGUAGE_CD, ITEM_VALUE, ITEM_TYPE, FOREIGN_LANGUAGE_VALUE, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   (941, 'zh-CN', 'TJS', 'Currency', '塔吉克斯坦索莫尼', 
    TO_DATE('08/21/2023 07:49:40', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', TO_DATE('08/21/2023 07:49:40', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.FOREIGN_LANGUAGE_TRANS
   (FOREIGN_LANGUAGE_TRANS_ID, R360_APP_LANGUAGE_CD, ITEM_VALUE, ITEM_TYPE, FOREIGN_LANGUAGE_VALUE, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   (942, 'zh-CN', 'LKR', 'Currency', '斯里兰卡卢比', 
    TO_DATE('08/21/2023 07:49:40', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', TO_DATE('08/21/2023 07:49:40', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.FOREIGN_LANGUAGE_TRANS
   (FOREIGN_LANGUAGE_TRANS_ID, R360_APP_LANGUAGE_CD, ITEM_VALUE, ITEM_TYPE, FOREIGN_LANGUAGE_VALUE, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   (943, 'zh-CN', 'SDG', 'Currency', '苏丹镑', 
    TO_DATE('08/21/2023 07:49:40', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', TO_DATE('08/21/2023 07:49:40', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.FOREIGN_LANGUAGE_TRANS
   (FOREIGN_LANGUAGE_TRANS_ID, R360_APP_LANGUAGE_CD, ITEM_VALUE, ITEM_TYPE, FOREIGN_LANGUAGE_VALUE, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   (944, 'zh-CN', 'SRD', 'Currency', '苏里南元', 
    TO_DATE('08/21/2023 07:49:41', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', TO_DATE('08/21/2023 07:49:41', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.FOREIGN_LANGUAGE_TRANS
   (FOREIGN_LANGUAGE_TRANS_ID, R360_APP_LANGUAGE_CD, ITEM_VALUE, ITEM_TYPE, FOREIGN_LANGUAGE_VALUE, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   (945, 'zh-CN', 'SEK', 'Currency', '瑞典克朗', 
    TO_DATE('08/21/2023 07:49:41', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', TO_DATE('08/21/2023 07:49:41', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.FOREIGN_LANGUAGE_TRANS
   (FOREIGN_LANGUAGE_TRANS_ID, R360_APP_LANGUAGE_CD, ITEM_VALUE, ITEM_TYPE, FOREIGN_LANGUAGE_VALUE, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   (946, 'zh-CN', 'CHF', 'Currency', '瑞士法郎', 
    TO_DATE('08/21/2023 07:49:41', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', TO_DATE('08/21/2023 07:49:41', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.FOREIGN_LANGUAGE_TRANS
   (FOREIGN_LANGUAGE_TRANS_ID, R360_APP_LANGUAGE_CD, ITEM_VALUE, ITEM_TYPE, FOREIGN_LANGUAGE_VALUE, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   (947, 'zh-CN', 'SYP', 'Currency', '叙利亚镑', 
    TO_DATE('08/21/2023 07:49:42', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', TO_DATE('08/21/2023 07:49:42', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.FOREIGN_LANGUAGE_TRANS
   (FOREIGN_LANGUAGE_TRANS_ID, R360_APP_LANGUAGE_CD, ITEM_VALUE, ITEM_TYPE, FOREIGN_LANGUAGE_VALUE, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   (948, 'zh-CN', 'BDT', 'Currency', '孟加拉塔卡', 
    TO_DATE('08/21/2023 07:49:42', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', TO_DATE('08/21/2023 07:49:42', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.FOREIGN_LANGUAGE_TRANS
   (FOREIGN_LANGUAGE_TRANS_ID, R360_APP_LANGUAGE_CD, ITEM_VALUE, ITEM_TYPE, FOREIGN_LANGUAGE_VALUE, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   (949, 'zh-CN', 'WST', 'Currency', '萨摩亚塔拉', 
    TO_DATE('08/21/2023 07:49:42', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', TO_DATE('08/21/2023 07:49:42', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.FOREIGN_LANGUAGE_TRANS
   (FOREIGN_LANGUAGE_TRANS_ID, R360_APP_LANGUAGE_CD, ITEM_VALUE, ITEM_TYPE, FOREIGN_LANGUAGE_VALUE, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   (950, 'zh-CN', 'TZS', 'Currency', '坦桑尼亚先令', 
    TO_DATE('08/21/2023 07:49:42', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', TO_DATE('08/21/2023 07:49:42', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.FOREIGN_LANGUAGE_TRANS
   (FOREIGN_LANGUAGE_TRANS_ID, R360_APP_LANGUAGE_CD, ITEM_VALUE, ITEM_TYPE, FOREIGN_LANGUAGE_VALUE, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   (951, 'zh-CN', 'KZT', 'Currency', '哈萨克斯坦坚戈', 
    TO_DATE('08/21/2023 07:49:43', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', TO_DATE('08/21/2023 07:49:43', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.FOREIGN_LANGUAGE_TRANS
   (FOREIGN_LANGUAGE_TRANS_ID, R360_APP_LANGUAGE_CD, ITEM_VALUE, ITEM_TYPE, FOREIGN_LANGUAGE_VALUE, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   (952, 'zh-CN', 'TTD', 'Currency', '特立尼达和多巴哥元', 
    TO_DATE('08/21/2023 07:49:43', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', TO_DATE('08/21/2023 07:49:43', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.FOREIGN_LANGUAGE_TRANS
   (FOREIGN_LANGUAGE_TRANS_ID, R360_APP_LANGUAGE_CD, ITEM_VALUE, ITEM_TYPE, FOREIGN_LANGUAGE_VALUE, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   (953, 'zh-CN', 'MNT', 'Currency', '蒙古图格里克', 
    TO_DATE('08/21/2023 07:49:43', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', TO_DATE('08/21/2023 07:49:43', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.FOREIGN_LANGUAGE_TRANS
   (FOREIGN_LANGUAGE_TRANS_ID, R360_APP_LANGUAGE_CD, ITEM_VALUE, ITEM_TYPE, FOREIGN_LANGUAGE_VALUE, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   (954, 'zh-CN', 'TND', 'Currency', '突尼斯第纳尔', 
    TO_DATE('08/21/2023 07:49:44', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', TO_DATE('08/21/2023 07:49:44', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.FOREIGN_LANGUAGE_TRANS
   (FOREIGN_LANGUAGE_TRANS_ID, R360_APP_LANGUAGE_CD, ITEM_VALUE, ITEM_TYPE, FOREIGN_LANGUAGE_VALUE, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   (955, 'zh-CN', 'TRY', 'Currency', '土耳其里拉', 
    TO_DATE('08/21/2023 07:49:44', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', TO_DATE('08/21/2023 07:49:44', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.FOREIGN_LANGUAGE_TRANS
   (FOREIGN_LANGUAGE_TRANS_ID, R360_APP_LANGUAGE_CD, ITEM_VALUE, ITEM_TYPE, FOREIGN_LANGUAGE_VALUE, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   (956, 'zh-CN', 'AED', 'Currency', '阿联酋迪拉姆', 
    TO_DATE('08/21/2023 07:49:44', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', TO_DATE('08/21/2023 07:49:44', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.FOREIGN_LANGUAGE_TRANS
   (FOREIGN_LANGUAGE_TRANS_ID, R360_APP_LANGUAGE_CD, ITEM_VALUE, ITEM_TYPE, FOREIGN_LANGUAGE_VALUE, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   (957, 'zh-CN', 'UGX', 'Currency', '乌干达先令', 
    TO_DATE('08/21/2023 07:49:45', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', TO_DATE('08/21/2023 07:49:45', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.FOREIGN_LANGUAGE_TRANS
   (FOREIGN_LANGUAGE_TRANS_ID, R360_APP_LANGUAGE_CD, ITEM_VALUE, ITEM_TYPE, FOREIGN_LANGUAGE_VALUE, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   (958, 'zh-CN', 'CLF', 'Currency', '智利发展单位', 
    TO_DATE('08/21/2023 07:49:45', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', TO_DATE('08/21/2023 07:49:45', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.FOREIGN_LANGUAGE_TRANS
   (FOREIGN_LANGUAGE_TRANS_ID, R360_APP_LANGUAGE_CD, ITEM_VALUE, ITEM_TYPE, FOREIGN_LANGUAGE_VALUE, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   (959, 'zh-CN', 'VND', 'Currency', '越南盾', 
    TO_DATE('08/21/2023 07:49:45', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', TO_DATE('08/21/2023 07:49:45', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.FOREIGN_LANGUAGE_TRANS
   (FOREIGN_LANGUAGE_TRANS_ID, R360_APP_LANGUAGE_CD, ITEM_VALUE, ITEM_TYPE, FOREIGN_LANGUAGE_VALUE, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   (960, 'zh-CN', 'USD', 'Currency', '美元', 
    TO_DATE('08/21/2023 07:49:45', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', TO_DATE('08/21/2023 07:49:45', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.FOREIGN_LANGUAGE_TRANS
   (FOREIGN_LANGUAGE_TRANS_ID, R360_APP_LANGUAGE_CD, ITEM_VALUE, ITEM_TYPE, FOREIGN_LANGUAGE_VALUE, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   (961, 'zh-CN', 'UZS', 'Currency', '乌兹别克斯坦索姆', 
    TO_DATE('08/21/2023 07:49:46', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', TO_DATE('08/21/2023 07:49:46', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.FOREIGN_LANGUAGE_TRANS
   (FOREIGN_LANGUAGE_TRANS_ID, R360_APP_LANGUAGE_CD, ITEM_VALUE, ITEM_TYPE, FOREIGN_LANGUAGE_VALUE, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   (962, 'zh-CN', 'VUV', 'Currency', '瓦努阿图瓦图', 
    TO_DATE('08/21/2023 07:49:46', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', TO_DATE('08/21/2023 07:49:46', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.FOREIGN_LANGUAGE_TRANS
   (FOREIGN_LANGUAGE_TRANS_ID, R360_APP_LANGUAGE_CD, ITEM_VALUE, ITEM_TYPE, FOREIGN_LANGUAGE_VALUE, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   (963, 'zh-CN', 'VEF', 'Currency', '委内瑞拉玻利瓦尔', 
    TO_DATE('08/21/2023 07:49:46', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', TO_DATE('08/21/2023 07:49:46', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.FOREIGN_LANGUAGE_TRANS
   (FOREIGN_LANGUAGE_TRANS_ID, R360_APP_LANGUAGE_CD, ITEM_VALUE, ITEM_TYPE, FOREIGN_LANGUAGE_VALUE, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   (964, 'zh-CN', 'KRW', 'Currency', '韩元', 
    TO_DATE('08/21/2023 07:49:47', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', TO_DATE('08/21/2023 07:49:47', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.FOREIGN_LANGUAGE_TRANS
   (FOREIGN_LANGUAGE_TRANS_ID, R360_APP_LANGUAGE_CD, ITEM_VALUE, ITEM_TYPE, FOREIGN_LANGUAGE_VALUE, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   (965, 'zh-CN', 'YER', 'Currency', '也门里亚尔', 
    TO_DATE('08/21/2023 07:49:47', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', TO_DATE('08/21/2023 07:49:47', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.FOREIGN_LANGUAGE_TRANS
   (FOREIGN_LANGUAGE_TRANS_ID, R360_APP_LANGUAGE_CD, ITEM_VALUE, ITEM_TYPE, FOREIGN_LANGUAGE_VALUE, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   (966, 'zh-CN', 'JPY', 'Currency', '日元', 
    TO_DATE('08/21/2023 07:49:47', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', TO_DATE('08/21/2023 07:49:47', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.FOREIGN_LANGUAGE_TRANS
   (FOREIGN_LANGUAGE_TRANS_ID, R360_APP_LANGUAGE_CD, ITEM_VALUE, ITEM_TYPE, FOREIGN_LANGUAGE_VALUE, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   (967, 'zh-CN', 'ZMW', 'Currency', '赞比亚克瓦查', 
    TO_DATE('08/21/2023 07:49:48', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', TO_DATE('08/21/2023 07:49:48', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.FOREIGN_LANGUAGE_TRANS
   (FOREIGN_LANGUAGE_TRANS_ID, R360_APP_LANGUAGE_CD, ITEM_VALUE, ITEM_TYPE, FOREIGN_LANGUAGE_VALUE, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   (968, 'zh-CN', 'ZWL', 'Currency', '新津巴布韦元', 
    TO_DATE('08/21/2023 07:49:48', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', TO_DATE('08/21/2023 07:49:48', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.FOREIGN_LANGUAGE_TRANS
   (FOREIGN_LANGUAGE_TRANS_ID, R360_APP_LANGUAGE_CD, ITEM_VALUE, ITEM_TYPE, FOREIGN_LANGUAGE_VALUE, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   (969, 'zh-CN', 'PLN', 'Currency', '波兰兹罗提', 
    TO_DATE('08/21/2023 07:49:48', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', TO_DATE('08/21/2023 07:49:48', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
COMMIT;


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\USER_PROFILE-LOOKUP_23.09\user_profile_lookup\DML\MAGNITUDE.sql

﻿SET DEFINE OFF;
Insert into R360_USER_PREF.MAGNITUDE
   (MAGNITUDE, MAGNITUDE_UNIT_OF_MEASURE, MAGNITUDE_CONSTANT_QUANTITY, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   ('¢/Dth', '$', '-2', TO_DATE('08/21/2023 04:41:53', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 
    TO_DATE('08/21/2023 04:41:53', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.MAGNITUDE
   (MAGNITUDE, MAGNITUDE_UNIT_OF_MEASURE, MAGNITUDE_CONSTANT_QUANTITY, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   ('¢/Dth/day', '$', '-2', TO_DATE('08/21/2023 04:41:53', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 
    TO_DATE('08/21/2023 04:41:53', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.MAGNITUDE
   (MAGNITUDE, MAGNITUDE_UNIT_OF_MEASURE, MAGNITUDE_CONSTANT_QUANTITY, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   ('¢/Dth/mile', '$', '-2', TO_DATE('08/21/2023 04:41:53', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 
    TO_DATE('08/21/2023 04:41:53', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.MAGNITUDE
   (MAGNITUDE, MAGNITUDE_UNIT_OF_MEASURE, MAGNITUDE_CONSTANT_QUANTITY, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   ('¢/Dth/mo', '$', '-2', TO_DATE('08/21/2023 04:41:54', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 
    TO_DATE('08/21/2023 04:41:54', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.MAGNITUDE
   (MAGNITUDE, MAGNITUDE_UNIT_OF_MEASURE, MAGNITUDE_CONSTANT_QUANTITY, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   ('¢/gal', '$', '-2', TO_DATE('08/21/2023 04:41:54', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 
    TO_DATE('08/21/2023 04:41:54', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.MAGNITUDE
   (MAGNITUDE, MAGNITUDE_UNIT_OF_MEASURE, MAGNITUDE_CONSTANT_QUANTITY, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   ('¢/kWh', '$', '-2', TO_DATE('08/21/2023 04:41:54', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 
    TO_DATE('08/21/2023 04:41:54', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.MAGNITUDE
   (MAGNITUDE, MAGNITUDE_UNIT_OF_MEASURE, MAGNITUDE_CONSTANT_QUANTITY, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   ('¢/lb', '$', '-2', TO_DATE('08/21/2023 04:41:54', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 
    TO_DATE('08/21/2023 04:41:54', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.MAGNITUDE
   (MAGNITUDE, MAGNITUDE_UNIT_OF_MEASURE, MAGNITUDE_CONSTANT_QUANTITY, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   ('¢/litre', '$', '-2', TO_DATE('08/21/2023 04:41:55', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 
    TO_DATE('08/21/2023 04:41:55', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.MAGNITUDE
   (MAGNITUDE, MAGNITUDE_UNIT_OF_MEASURE, MAGNITUDE_CONSTANT_QUANTITY, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   ('¢/mile', '$', '-2', TO_DATE('08/21/2023 04:41:55', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 
    TO_DATE('08/21/2023 04:41:55', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.MAGNITUDE
   (MAGNITUDE, MAGNITUDE_UNIT_OF_MEASURE, MAGNITUDE_CONSTANT_QUANTITY, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   ('¢/month', '$', '-2', TO_DATE('08/21/2023 04:41:55', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 
    TO_DATE('08/21/2023 04:41:55', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.MAGNITUDE
   (MAGNITUDE, MAGNITUDE_UNIT_OF_MEASURE, MAGNITUDE_CONSTANT_QUANTITY, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   ('¢/MTU', '$', '-2', TO_DATE('08/21/2023 04:41:56', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 
    TO_DATE('08/21/2023 04:41:56', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.MAGNITUDE
   (MAGNITUDE, MAGNITUDE_UNIT_OF_MEASURE, MAGNITUDE_CONSTANT_QUANTITY, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   ('¢/oz', '$', '-2', TO_DATE('08/21/2023 04:41:56', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 
    TO_DATE('08/21/2023 04:41:56', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.MAGNITUDE
   (MAGNITUDE, MAGNITUDE_UNIT_OF_MEASURE, MAGNITUDE_CONSTANT_QUANTITY, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   ('¢/RNC', '$', '-2', TO_DATE('08/21/2023 04:41:56', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 
    TO_DATE('08/21/2023 04:41:56', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.MAGNITUDE
   (MAGNITUDE, MAGNITUDE_UNIT_OF_MEASURE, MAGNITUDE_CONSTANT_QUANTITY, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   ('¢/thm', '$', '-2', TO_DATE('08/21/2023 04:41:56', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 
    TO_DATE('08/21/2023 04:41:56', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.MAGNITUDE
   (MAGNITUDE, MAGNITUDE_UNIT_OF_MEASURE, MAGNITUDE_CONSTANT_QUANTITY, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   ('¢/ton', '$', '-2', TO_DATE('08/21/2023 04:41:57', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 
    TO_DATE('08/21/2023 04:41:57', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.MAGNITUDE
   (MAGNITUDE, MAGNITUDE_UNIT_OF_MEASURE, MAGNITUDE_CONSTANT_QUANTITY, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   ('¢/yard', '$', '-2', TO_DATE('08/21/2023 04:41:57', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 
    TO_DATE('08/21/2023 04:41:57', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.MAGNITUDE
   (MAGNITUDE, MAGNITUDE_UNIT_OF_MEASURE, MAGNITUDE_CONSTANT_QUANTITY, MAGNITUDE_DESCR, CREATE_DTTM, 
    CREATE_USER, UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   ('b.p.', '%', '2', 'Basis points. One hundredth of one percent, used chiefly in expressing differences of interest rates', TO_DATE('08/21/2023 04:41:57', 'MM/DD/YYYY HH24:MI:SS'), 
    'SURENDRA_AVULA', TO_DATE('08/21/2023 04:41:57', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.MAGNITUDE
   (MAGNITUDE, MAGNITUDE_UNIT_OF_MEASURE, MAGNITUDE_CONSTANT_QUANTITY, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   ('x', '%', '-2', TO_DATE('08/21/2023 04:41:58', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 
    TO_DATE('08/21/2023 04:41:58', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.MAGNITUDE
   (MAGNITUDE, MAGNITUDE_UNIT_OF_MEASURE, MAGNITUDE_CONSTANT_QUANTITY, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   ('$', '$', '0', TO_DATE('08/21/2023 04:41:26', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 
    TO_DATE('08/21/2023 04:41:26', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.MAGNITUDE
   (MAGNITUDE, MAGNITUDE_UNIT_OF_MEASURE, MAGNITUDE_CONSTANT_QUANTITY, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   ('$-meter/t', '$', '0', TO_DATE('08/21/2023 04:41:26', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 
    TO_DATE('08/21/2023 04:41:26', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.MAGNITUDE
   (MAGNITUDE, MAGNITUDE_UNIT_OF_MEASURE, MAGNITUDE_CONSTANT_QUANTITY, MAGNITUDE_DESCR, CREATE_DTTM, 
    CREATE_USER, UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   ('$/0', '$', '-1', '1/10th', TO_DATE('08/21/2023 04:41:27', 'MM/DD/YYYY HH24:MI:SS'), 
    'SURENDRA_AVULA', TO_DATE('08/21/2023 04:41:27', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.MAGNITUDE
   (MAGNITUDE, MAGNITUDE_UNIT_OF_MEASURE, MAGNITUDE_CONSTANT_QUANTITY, MAGNITUDE_DESCR, CREATE_DTTM, 
    CREATE_USER, UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   ('$/1000', '$', '-3', '1/1000th', TO_DATE('08/21/2023 04:41:27', 'MM/DD/YYYY HH24:MI:SS'), 
    'SURENDRA_AVULA', TO_DATE('08/21/2023 04:41:27', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.MAGNITUDE
   (MAGNITUDE, MAGNITUDE_UNIT_OF_MEASURE, MAGNITUDE_CONSTANT_QUANTITY, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   ('$/arroba', '$', '0', TO_DATE('08/21/2023 04:41:27', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 
    TO_DATE('08/21/2023 04:41:27', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.MAGNITUDE
   (MAGNITUDE, MAGNITUDE_UNIT_OF_MEASURE, MAGNITUDE_CONSTANT_QUANTITY, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   ('$/bag', '$', '0', TO_DATE('08/21/2023 04:41:28', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 
    TO_DATE('08/21/2023 04:41:28', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.MAGNITUDE
   (MAGNITUDE, MAGNITUDE_UNIT_OF_MEASURE, MAGNITUDE_CONSTANT_QUANTITY, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   ('$/bale', '$', '0', TO_DATE('08/21/2023 04:41:28', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 
    TO_DATE('08/21/2023 04:41:28', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.MAGNITUDE
   (MAGNITUDE, MAGNITUDE_UNIT_OF_MEASURE, MAGNITUDE_CONSTANT_QUANTITY, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   ('$/bbl', '$', '0', TO_DATE('08/21/2023 04:41:28', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 
    TO_DATE('08/21/2023 04:41:28', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.MAGNITUDE
   (MAGNITUDE, MAGNITUDE_UNIT_OF_MEASURE, MAGNITUDE_CONSTANT_QUANTITY, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   ('$/BOE', '$', '0', TO_DATE('08/21/2023 04:41:28', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 
    TO_DATE('08/21/2023 04:41:28', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.MAGNITUDE
   (MAGNITUDE, MAGNITUDE_UNIT_OF_MEASURE, MAGNITUDE_CONSTANT_QUANTITY, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   ('$/BSH', '$', '0', TO_DATE('08/21/2023 04:41:29', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 
    TO_DATE('08/21/2023 04:41:29', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.MAGNITUDE
   (MAGNITUDE, MAGNITUDE_UNIT_OF_MEASURE, MAGNITUDE_CONSTANT_QUANTITY, MAGNITUDE_DESCR, CREATE_DTTM, 
    CREATE_USER, UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   ('$/CER', '$', '0', 'Cost per Certified Emission Reduction (CER) allowance', TO_DATE('08/21/2023 04:41:29', 'MM/DD/YYYY HH24:MI:SS'), 
    'SURENDRA_AVULA', TO_DATE('08/21/2023 04:41:29', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.MAGNITUDE
   (MAGNITUDE, MAGNITUDE_UNIT_OF_MEASURE, MAGNITUDE_CONSTANT_QUANTITY, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   ('$/ct', '$', '0', TO_DATE('08/21/2023 04:41:29', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 
    TO_DATE('08/21/2023 04:41:29', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.MAGNITUDE
   (MAGNITUDE, MAGNITUDE_UNIT_OF_MEASURE, MAGNITUDE_CONSTANT_QUANTITY, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   ('$/customer', '$', '0', TO_DATE('08/21/2023 04:41:30', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 
    TO_DATE('08/21/2023 04:41:30', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.MAGNITUDE
   (MAGNITUDE, MAGNITUDE_UNIT_OF_MEASURE, MAGNITUDE_CONSTANT_QUANTITY, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   ('$/cwt', '$', '0', TO_DATE('08/21/2023 04:41:30', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 
    TO_DATE('08/21/2023 04:41:30', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.MAGNITUDE
   (MAGNITUDE, MAGNITUDE_UNIT_OF_MEASURE, MAGNITUDE_CONSTANT_QUANTITY, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   ('$/day', '$', '0', TO_DATE('08/21/2023 04:41:30', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 
    TO_DATE('08/21/2023 04:41:30', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.MAGNITUDE
   (MAGNITUDE, MAGNITUDE_UNIT_OF_MEASURE, MAGNITUDE_CONSTANT_QUANTITY, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   ('$/dmt', '$', '0', TO_DATE('08/21/2023 04:41:30', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 
    TO_DATE('08/21/2023 04:41:30', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.MAGNITUDE
   (MAGNITUDE, MAGNITUDE_UNIT_OF_MEASURE, MAGNITUDE_CONSTANT_QUANTITY, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   ('$/DMTU', '$', '0', TO_DATE('08/21/2023 04:41:31', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 
    TO_DATE('08/21/2023 04:41:31', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.MAGNITUDE
   (MAGNITUDE, MAGNITUDE_UNIT_OF_MEASURE, MAGNITUDE_CONSTANT_QUANTITY, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   ('$/dozen', '$', '0', TO_DATE('08/21/2023 04:41:31', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 
    TO_DATE('08/21/2023 04:41:31', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.MAGNITUDE
   (MAGNITUDE, MAGNITUDE_UNIT_OF_MEASURE, MAGNITUDE_CONSTANT_QUANTITY, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   ('$/drum', '$', '0', TO_DATE('08/21/2023 04:41:31', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 
    TO_DATE('08/21/2023 04:41:31', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.MAGNITUDE
   (MAGNITUDE, MAGNITUDE_UNIT_OF_MEASURE, MAGNITUDE_CONSTANT_QUANTITY, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   ('$/Dth', '$', '0', TO_DATE('08/21/2023 04:41:32', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 
    TO_DATE('08/21/2023 04:41:32', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.MAGNITUDE
   (MAGNITUDE, MAGNITUDE_UNIT_OF_MEASURE, MAGNITUDE_CONSTANT_QUANTITY, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   ('$/Dth/day', '$', '0', TO_DATE('08/21/2023 04:41:32', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 
    TO_DATE('08/21/2023 04:41:32', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.MAGNITUDE
   (MAGNITUDE, MAGNITUDE_UNIT_OF_MEASURE, MAGNITUDE_CONSTANT_QUANTITY, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   ('$/Dth/mile', '$', '0', TO_DATE('08/21/2023 04:41:32', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 
    TO_DATE('08/21/2023 04:41:32', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.MAGNITUDE
   (MAGNITUDE, MAGNITUDE_UNIT_OF_MEASURE, MAGNITUDE_CONSTANT_QUANTITY, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   ('$/Dth/mo', '$', '0', TO_DATE('08/21/2023 04:41:32', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 
    TO_DATE('08/21/2023 04:41:32', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.MAGNITUDE
   (MAGNITUDE, MAGNITUDE_UNIT_OF_MEASURE, MAGNITUDE_CONSTANT_QUANTITY, MAGNITUDE_DESCR, CREATE_DTTM, 
    CREATE_USER, UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   ('$/EUA', '$', '0', 'Cost per European Union Allowance (EUA)', TO_DATE('08/21/2023 04:41:33', 'MM/DD/YYYY HH24:MI:SS'), 
    'SURENDRA_AVULA', TO_DATE('08/21/2023 04:41:33', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.MAGNITUDE
   (MAGNITUDE, MAGNITUDE_UNIT_OF_MEASURE, MAGNITUDE_CONSTANT_QUANTITY, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   ('$/feu', '$', '0', TO_DATE('08/21/2023 04:41:33', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 
    TO_DATE('08/21/2023 04:41:33', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.MAGNITUDE
   (MAGNITUDE, MAGNITUDE_UNIT_OF_MEASURE, MAGNITUDE_CONSTANT_QUANTITY, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   ('$/g', '$', '0', TO_DATE('08/21/2023 04:41:33', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 
    TO_DATE('08/21/2023 04:41:33', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.MAGNITUDE
   (MAGNITUDE, MAGNITUDE_UNIT_OF_MEASURE, MAGNITUDE_CONSTANT_QUANTITY, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   ('$/gal', '$', '0', TO_DATE('08/21/2023 04:41:34', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 
    TO_DATE('08/21/2023 04:41:34', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.MAGNITUDE
   (MAGNITUDE, MAGNITUDE_UNIT_OF_MEASURE, MAGNITUDE_CONSTANT_QUANTITY, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   ('$/GJ', '$', '0', TO_DATE('08/21/2023 04:41:34', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 
    TO_DATE('08/21/2023 04:41:34', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.MAGNITUDE
   (MAGNITUDE, MAGNITUDE_UNIT_OF_MEASURE, MAGNITUDE_CONSTANT_QUANTITY, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   ('$/home', '$', '0', TO_DATE('08/21/2023 04:41:34', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 
    TO_DATE('08/21/2023 04:41:34', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.MAGNITUDE
   (MAGNITUDE, MAGNITUDE_UNIT_OF_MEASURE, MAGNITUDE_CONSTANT_QUANTITY, MAGNITUDE_DESCR, CREATE_DTTM, 
    CREATE_USER, UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   ('$/KCFE', '$', '0', 'Cost per Thousand Cubic Feet of Gas Equivalent', TO_DATE('08/21/2023 04:41:34', 'MM/DD/YYYY HH24:MI:SS'), 
    'SURENDRA_AVULA', TO_DATE('08/21/2023 04:41:34', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.MAGNITUDE
   (MAGNITUDE, MAGNITUDE_UNIT_OF_MEASURE, MAGNITUDE_CONSTANT_QUANTITY, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   ('$/kg', '$', '0', TO_DATE('08/21/2023 04:41:35', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 
    TO_DATE('08/21/2023 04:41:35', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.MAGNITUDE
   (MAGNITUDE, MAGNITUDE_UNIT_OF_MEASURE, MAGNITUDE_CONSTANT_QUANTITY, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   ('$/kl', '$', '0', TO_DATE('08/21/2023 04:41:35', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 
    TO_DATE('08/21/2023 04:41:35', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.MAGNITUDE
   (MAGNITUDE, MAGNITUDE_UNIT_OF_MEASURE, MAGNITUDE_CONSTANT_QUANTITY, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   ('$/kW', '$', '0', TO_DATE('08/21/2023 04:41:35', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 
    TO_DATE('08/21/2023 04:41:35', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.MAGNITUDE
   (MAGNITUDE, MAGNITUDE_UNIT_OF_MEASURE, MAGNITUDE_CONSTANT_QUANTITY, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   ('$/kW-mo', '$', '0', TO_DATE('08/21/2023 04:41:36', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 
    TO_DATE('08/21/2023 04:41:36', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.MAGNITUDE
   (MAGNITUDE, MAGNITUDE_UNIT_OF_MEASURE, MAGNITUDE_CONSTANT_QUANTITY, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   ('$/kW-year', '$', '0', TO_DATE('08/21/2023 04:41:36', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 
    TO_DATE('08/21/2023 04:41:36', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.MAGNITUDE
   (MAGNITUDE, MAGNITUDE_UNIT_OF_MEASURE, MAGNITUDE_CONSTANT_QUANTITY, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   ('$/kWh', '$', '0', TO_DATE('08/21/2023 04:41:36', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 
    TO_DATE('08/21/2023 04:41:36', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.MAGNITUDE
   (MAGNITUDE, MAGNITUDE_UNIT_OF_MEASURE, MAGNITUDE_CONSTANT_QUANTITY, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   ('$/lakhtnne', '$', '0', TO_DATE('08/21/2023 04:41:36', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 
    TO_DATE('08/21/2023 04:41:36', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.MAGNITUDE
   (MAGNITUDE, MAGNITUDE_UNIT_OF_MEASURE, MAGNITUDE_CONSTANT_QUANTITY, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   ('$/lb', '$', '0', TO_DATE('08/21/2023 04:41:37', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 
    TO_DATE('08/21/2023 04:41:37', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.MAGNITUDE
   (MAGNITUDE, MAGNITUDE_UNIT_OF_MEASURE, MAGNITUDE_CONSTANT_QUANTITY, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   ('$/LCE', '$', '0', TO_DATE('08/21/2023 04:41:37', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 
    TO_DATE('08/21/2023 04:41:37', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.MAGNITUDE
   (MAGNITUDE, MAGNITUDE_UNIT_OF_MEASURE, MAGNITUDE_CONSTANT_QUANTITY, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   ('$/litre', '$', '0', TO_DATE('08/21/2023 04:41:37', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 
    TO_DATE('08/21/2023 04:41:37', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.MAGNITUDE
   (MAGNITUDE, MAGNITUDE_UNIT_OF_MEASURE, MAGNITUDE_CONSTANT_QUANTITY, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   ('$/long ton', '$', '0', TO_DATE('08/21/2023 04:41:38', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 
    TO_DATE('08/21/2023 04:41:38', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.MAGNITUDE
   (MAGNITUDE, MAGNITUDE_UNIT_OF_MEASURE, MAGNITUDE_CONSTANT_QUANTITY, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   ('$/M tonnes', '$', '0', TO_DATE('08/21/2023 04:41:38', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 
    TO_DATE('08/21/2023 04:41:38', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.MAGNITUDE
   (MAGNITUDE, MAGNITUDE_UNIT_OF_MEASURE, MAGNITUDE_CONSTANT_QUANTITY, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   ('$/m³', '$', '0', TO_DATE('08/21/2023 04:41:38', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 
    TO_DATE('08/21/2023 04:41:38', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.MAGNITUDE
   (MAGNITUDE, MAGNITUDE_UNIT_OF_MEASURE, MAGNITUDE_CONSTANT_QUANTITY, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   ('$/mbf', '$', '0', TO_DATE('08/21/2023 04:41:39', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 
    TO_DATE('08/21/2023 04:41:39', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.MAGNITUDE
   (MAGNITUDE, MAGNITUDE_UNIT_OF_MEASURE, MAGNITUDE_CONSTANT_QUANTITY, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   ('$/Mcf', '$', '0', TO_DATE('08/21/2023 04:41:39', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 
    TO_DATE('08/21/2023 04:41:39', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.MAGNITUDE
   (MAGNITUDE, MAGNITUDE_UNIT_OF_MEASURE, MAGNITUDE_CONSTANT_QUANTITY, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   ('$/Mcfe', '$', '0', TO_DATE('08/21/2023 04:41:39', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 
    TO_DATE('08/21/2023 04:41:39', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.MAGNITUDE
   (MAGNITUDE, MAGNITUDE_UNIT_OF_MEASURE, MAGNITUDE_CONSTANT_QUANTITY, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   ('$/member', '$', '0', TO_DATE('08/21/2023 04:41:39', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 
    TO_DATE('08/21/2023 04:41:39', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.MAGNITUDE
   (MAGNITUDE, MAGNITUDE_UNIT_OF_MEASURE, MAGNITUDE_CONSTANT_QUANTITY, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   ('$/mile', '$', '0', TO_DATE('08/21/2023 04:41:40', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 
    TO_DATE('08/21/2023 04:41:40', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.MAGNITUDE
   (MAGNITUDE, MAGNITUDE_UNIT_OF_MEASURE, MAGNITUDE_CONSTANT_QUANTITY, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   ('$/MMBtu', '$', '0', TO_DATE('08/21/2023 04:41:40', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 
    TO_DATE('08/21/2023 04:41:40', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.MAGNITUDE
   (MAGNITUDE, MAGNITUDE_UNIT_OF_MEASURE, MAGNITUDE_CONSTANT_QUANTITY, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   ('$/month', '$', '0', TO_DATE('08/21/2023 04:41:40', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 
    TO_DATE('08/21/2023 04:41:40', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.MAGNITUDE
   (MAGNITUDE, MAGNITUDE_UNIT_OF_MEASURE, MAGNITUDE_CONSTANT_QUANTITY, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   ('$/MTU', '$', '0', TO_DATE('08/21/2023 04:41:41', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 
    TO_DATE('08/21/2023 04:41:41', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.MAGNITUDE
   (MAGNITUDE, MAGNITUDE_UNIT_OF_MEASURE, MAGNITUDE_CONSTANT_QUANTITY, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   ('$/MW-day', '$', '0', TO_DATE('08/21/2023 04:41:41', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 
    TO_DATE('08/21/2023 04:41:41', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.MAGNITUDE
   (MAGNITUDE, MAGNITUDE_UNIT_OF_MEASURE, MAGNITUDE_CONSTANT_QUANTITY, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   ('$/MWh', '$', '0', TO_DATE('08/21/2023 04:41:41', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 
    TO_DATE('08/21/2023 04:41:41', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.MAGNITUDE
   (MAGNITUDE, MAGNITUDE_UNIT_OF_MEASURE, MAGNITUDE_CONSTANT_QUANTITY, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   ('$/oz', '$', '0', TO_DATE('08/21/2023 04:41:41', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 
    TO_DATE('08/21/2023 04:41:41', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.MAGNITUDE
   (MAGNITUDE, MAGNITUDE_UNIT_OF_MEASURE, MAGNITUDE_CONSTANT_QUANTITY, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   ('$/person', '$', '0', TO_DATE('08/21/2023 04:41:42', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 
    TO_DATE('08/21/2023 04:41:42', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.MAGNITUDE
   (MAGNITUDE, MAGNITUDE_UNIT_OF_MEASURE, MAGNITUDE_CONSTANT_QUANTITY, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   ('$/point', '$', '0', TO_DATE('08/21/2023 04:41:42', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 
    TO_DATE('08/21/2023 04:41:42', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.MAGNITUDE
   (MAGNITUDE, MAGNITUDE_UNIT_OF_MEASURE, MAGNITUDE_CONSTANT_QUANTITY, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   ('$/quintal', '$', '0', TO_DATE('08/21/2023 04:41:42', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 
    TO_DATE('08/21/2023 04:41:42', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.MAGNITUDE
   (MAGNITUDE, MAGNITUDE_UNIT_OF_MEASURE, MAGNITUDE_CONSTANT_QUANTITY, MAGNITUDE_DESCR, CREATE_DTTM, 
    CREATE_USER, UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   ('$/RGGI', '$', '0', 'Cost per Regional Greenhouse Gas Initiative (RGGI) allowance', TO_DATE('08/21/2023 04:41:43', 'MM/DD/YYYY HH24:MI:SS'), 
    'SURENDRA_AVULA', TO_DATE('08/21/2023 04:41:43', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.MAGNITUDE
   (MAGNITUDE, MAGNITUDE_UNIT_OF_MEASURE, MAGNITUDE_CONSTANT_QUANTITY, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   ('$/sq ft', '$', '0', TO_DATE('08/21/2023 04:41:43', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 
    TO_DATE('08/21/2023 04:41:43', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.MAGNITUDE
   (MAGNITUDE, MAGNITUDE_UNIT_OF_MEASURE, MAGNITUDE_CONSTANT_QUANTITY, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   ('$/sq ft/mo', '$', '0', TO_DATE('08/21/2023 04:41:43', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 
    TO_DATE('08/21/2023 04:41:43', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.MAGNITUDE
   (MAGNITUDE, MAGNITUDE_UNIT_OF_MEASURE, MAGNITUDE_CONSTANT_QUANTITY, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   ('$/sq ft/yr', '$', '0', TO_DATE('08/21/2023 04:41:44', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 
    TO_DATE('08/21/2023 04:41:44', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.MAGNITUDE
   (MAGNITUDE, MAGNITUDE_UNIT_OF_MEASURE, MAGNITUDE_CONSTANT_QUANTITY, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   ('$/sq m', '$', '0', TO_DATE('08/21/2023 04:41:44', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 
    TO_DATE('08/21/2023 04:41:44', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.MAGNITUDE
   (MAGNITUDE, MAGNITUDE_UNIT_OF_MEASURE, MAGNITUDE_CONSTANT_QUANTITY, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   ('$/sq m/mo', '$', '0', TO_DATE('08/21/2023 04:41:44', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 
    TO_DATE('08/21/2023 04:41:44', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.MAGNITUDE
   (MAGNITUDE, MAGNITUDE_UNIT_OF_MEASURE, MAGNITUDE_CONSTANT_QUANTITY, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   ('$/sq m/yr', '$', '0', TO_DATE('08/21/2023 04:41:44', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 
    TO_DATE('08/21/2023 04:41:44', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.MAGNITUDE
   (MAGNITUDE, MAGNITUDE_UNIT_OF_MEASURE, MAGNITUDE_CONSTANT_QUANTITY, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   ('$/stone', '$', '0', TO_DATE('08/21/2023 04:41:45', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 
    TO_DATE('08/21/2023 04:41:45', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.MAGNITUDE
   (MAGNITUDE, MAGNITUDE_UNIT_OF_MEASURE, MAGNITUDE_CONSTANT_QUANTITY, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   ('$/sub', '$', '0', TO_DATE('08/21/2023 04:41:45', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 
    TO_DATE('08/21/2023 04:41:45', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.MAGNITUDE
   (MAGNITUDE, MAGNITUDE_UNIT_OF_MEASURE, MAGNITUDE_CONSTANT_QUANTITY, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   ('$/teu', '$', '0', TO_DATE('08/21/2023 04:41:45', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 
    TO_DATE('08/21/2023 04:41:45', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.MAGNITUDE
   (MAGNITUDE, MAGNITUDE_UNIT_OF_MEASURE, MAGNITUDE_CONSTANT_QUANTITY, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   ('$/ton', '$', '0', TO_DATE('08/21/2023 04:41:46', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 
    TO_DATE('08/21/2023 04:41:46', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.MAGNITUDE
   (MAGNITUDE, MAGNITUDE_UNIT_OF_MEASURE, MAGNITUDE_CONSTANT_QUANTITY, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   ('$/tonne', '$', '0', TO_DATE('08/21/2023 04:41:46', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 
    TO_DATE('08/21/2023 04:41:46', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.MAGNITUDE
   (MAGNITUDE, MAGNITUDE_UNIT_OF_MEASURE, MAGNITUDE_CONSTANT_QUANTITY, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   ('$/TVHH', '$', '0', TO_DATE('08/21/2023 04:41:46', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 
    TO_DATE('08/21/2023 04:41:46', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.MAGNITUDE
   (MAGNITUDE, MAGNITUDE_UNIT_OF_MEASURE, MAGNITUDE_CONSTANT_QUANTITY, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   ('$/unit', '$', '0', TO_DATE('08/21/2023 04:41:46', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 
    TO_DATE('08/21/2023 04:41:46', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.MAGNITUDE
   (MAGNITUDE, MAGNITUDE_UNIT_OF_MEASURE, MAGNITUDE_CONSTANT_QUANTITY, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   ('$/unit/mo', '$', '0', TO_DATE('08/21/2023 04:41:47', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 
    TO_DATE('08/21/2023 04:41:47', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.MAGNITUDE
   (MAGNITUDE, MAGNITUDE_UNIT_OF_MEASURE, MAGNITUDE_CONSTANT_QUANTITY, MAGNITUDE_DESCR, CREATE_DTTM, 
    CREATE_USER, UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   ('$/watt', '$', '0', 'Dollar cost per watt', TO_DATE('08/21/2023 04:41:47', 'MM/DD/YYYY HH24:MI:SS'), 
    'SURENDRA_AVULA', TO_DATE('08/21/2023 04:41:47', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.MAGNITUDE
   (MAGNITUDE, MAGNITUDE_UNIT_OF_MEASURE, MAGNITUDE_CONSTANT_QUANTITY, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   ('$/wmt', '$', '0', TO_DATE('08/21/2023 04:41:47', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 
    TO_DATE('08/21/2023 04:41:47', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.MAGNITUDE
   (MAGNITUDE, MAGNITUDE_UNIT_OF_MEASURE, MAGNITUDE_CONSTANT_QUANTITY, MAGNITUDE_DESCR, CREATE_DTTM, 
    CREATE_USER, UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   ('$/yard', '$', '0', 'Cost per yard', TO_DATE('08/21/2023 04:41:48', 'MM/DD/YYYY HH24:MI:SS'), 
    'SURENDRA_AVULA', TO_DATE('08/21/2023 04:41:48', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.MAGNITUDE
   (MAGNITUDE, MAGNITUDE_UNIT_OF_MEASURE, MAGNITUDE_CONSTANT_QUANTITY, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   ('$/year', '$', '0', TO_DATE('08/21/2023 04:41:48', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 
    TO_DATE('08/21/2023 04:41:48', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.MAGNITUDE
   (MAGNITUDE, MAGNITUDE_UNIT_OF_MEASURE, MAGNITUDE_CONSTANT_QUANTITY, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   ('$^3', '$', '0', TO_DATE('08/21/2023 04:41:48', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 
    TO_DATE('08/21/2023 04:41:48', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.MAGNITUDE
   (MAGNITUDE, MAGNITUDE_UNIT_OF_MEASURE, MAGNITUDE_CONSTANT_QUANTITY, MAGNITUDE_DESCR, CREATE_DTTM, 
    CREATE_USER, UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   ('$0', '$', '1', 'Tens', TO_DATE('08/21/2023 04:41:48', 'MM/DD/YYYY HH24:MI:SS'), 
    'SURENDRA_AVULA', TO_DATE('08/21/2023 04:41:48', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.MAGNITUDE
   (MAGNITUDE, MAGNITUDE_UNIT_OF_MEASURE, MAGNITUDE_CONSTANT_QUANTITY, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   ('$00', '$', '2', TO_DATE('08/21/2023 04:41:49', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 
    TO_DATE('08/21/2023 04:41:49', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.MAGNITUDE
   (MAGNITUDE, MAGNITUDE_UNIT_OF_MEASURE, MAGNITUDE_CONSTANT_QUANTITY, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   ('$000', '$', '3', TO_DATE('08/21/2023 04:41:49', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 
    TO_DATE('08/21/2023 04:41:49', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.MAGNITUDE
   (MAGNITUDE, MAGNITUDE_UNIT_OF_MEASURE, MAGNITUDE_CONSTANT_QUANTITY, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   ('$B', '$', '9', TO_DATE('08/21/2023 04:41:49', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 
    TO_DATE('08/21/2023 04:41:49', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.MAGNITUDE
   (MAGNITUDE, MAGNITUDE_UNIT_OF_MEASURE, MAGNITUDE_CONSTANT_QUANTITY, MAGNITUDE_DESCR, CREATE_DTTM, 
    CREATE_USER, UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   ('$C', '$', '7', 'Crores', TO_DATE('08/21/2023 04:41:50', 'MM/DD/YYYY HH24:MI:SS'), 
    'SURENDRA_AVULA', TO_DATE('08/21/2023 04:41:50', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.MAGNITUDE
   (MAGNITUDE, MAGNITUDE_UNIT_OF_MEASURE, MAGNITUDE_CONSTANT_QUANTITY, MAGNITUDE_DESCR, CREATE_DTTM, 
    CREATE_USER, UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   ('$HM', '$', '8', 'Hundred Millions', TO_DATE('08/21/2023 04:41:50', 'MM/DD/YYYY HH24:MI:SS'), 
    'SURENDRA_AVULA', TO_DATE('08/21/2023 04:41:50', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.MAGNITUDE
   (MAGNITUDE, MAGNITUDE_UNIT_OF_MEASURE, MAGNITUDE_CONSTANT_QUANTITY, MAGNITUDE_DESCR, CREATE_DTTM, 
    CREATE_USER, UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   ('$L', '$', '5', 'Lakh', TO_DATE('08/21/2023 04:41:50', 'MM/DD/YYYY HH24:MI:SS'), 
    'SURENDRA_AVULA', TO_DATE('08/21/2023 04:41:50', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.MAGNITUDE
   (MAGNITUDE, MAGNITUDE_UNIT_OF_MEASURE, MAGNITUDE_CONSTANT_QUANTITY, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   ('$M', '$', '6', TO_DATE('08/21/2023 04:41:50', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 
    TO_DATE('08/21/2023 04:41:50', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.MAGNITUDE
   (MAGNITUDE, MAGNITUDE_UNIT_OF_MEASURE, MAGNITUDE_CONSTANT_QUANTITY, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   ('$T', '$', '12', TO_DATE('08/21/2023 04:41:51', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 
    TO_DATE('08/21/2023 04:41:51', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.MAGNITUDE
   (MAGNITUDE, MAGNITUDE_UNIT_OF_MEASURE, MAGNITUDE_CONSTANT_QUANTITY, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   ('%', '%', '0', TO_DATE('08/21/2023 04:41:51', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 
    TO_DATE('08/21/2023 04:41:51', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.MAGNITUDE
   (MAGNITUDE, MAGNITUDE_UNIT_OF_MEASURE, MAGNITUDE_CONSTANT_QUANTITY, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   ('¢', '$', '-2', TO_DATE('08/21/2023 04:41:51', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 
    TO_DATE('08/21/2023 04:41:51', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.MAGNITUDE
   (MAGNITUDE, MAGNITUDE_UNIT_OF_MEASURE, MAGNITUDE_CONSTANT_QUANTITY, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   ('¢/BSH', '$', '-2', TO_DATE('08/21/2023 04:41:52', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 
    TO_DATE('08/21/2023 04:41:52', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.MAGNITUDE
   (MAGNITUDE, MAGNITUDE_UNIT_OF_MEASURE, MAGNITUDE_CONSTANT_QUANTITY, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   ('¢/day', '$', '-2', TO_DATE('08/21/2023 04:41:52', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 
    TO_DATE('08/21/2023 04:41:52', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.MAGNITUDE
   (MAGNITUDE, MAGNITUDE_UNIT_OF_MEASURE, MAGNITUDE_CONSTANT_QUANTITY, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   ('¢/dozen', '$', '-2', TO_DATE('08/21/2023 04:41:52', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 
    TO_DATE('08/21/2023 04:41:52', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
Insert into R360_USER_PREF.MAGNITUDE
   (MAGNITUDE, MAGNITUDE_UNIT_OF_MEASURE, MAGNITUDE_CONSTANT_QUANTITY, CREATE_DTTM, CREATE_USER, 
    UPDATE_DTTM, UPDATE_USER, ACTV_FLAG)
 Values
   ('¢/drum', '$', '-2', TO_DATE('08/21/2023 04:41:52', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 
    TO_DATE('08/21/2023 04:41:52', 'MM/DD/YYYY HH24:MI:SS'), 'SURENDRA_AVULA', 'Y');
COMMIT;


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\USER_PROFILE-LOOKUP_23.09\user_profile_lookup\DML\R360_APP_COUNTRY.sql

C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\USER_PROFILE-LOOKUP_23.09\user_profile_lookup\DML\R360_APP_CURRENCY.sql

﻿SET DEFINE OFF;
Insert into R360_USER_PREF.R360_APP_CURRENCY
   (CURRENCY_CD, CURRENCY_NAME, CURRENCY_SYMBOL, MAGNITUDE_MULTIPLIER_DISPLAY, RANK_ORDER_NUM, 
    ACTV_FLAG, CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   ('TMT', 'Manat', 'm', 0, 121, 
    'A', TO_DATE('07/18/2023 17:26:25', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', TO_DATE('07/18/2023 17:26:25', 'MM/DD/YYYY HH24:MI:SS'), 'silpa');
Insert into R360_USER_PREF.R360_APP_CURRENCY
   (CURRENCY_CD, CURRENCY_NAME, CURRENCY_SYMBOL, MAGNITUDE_MULTIPLIER_DISPLAY, RANK_ORDER_NUM, 
    ACTV_FLAG, CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   ('ZMW', 'Zambian Kwacha', 'ZK', 0, 128, 
    'A', TO_DATE('07/18/2023 17:26:25', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', TO_DATE('07/18/2023 17:26:25', 'MM/DD/YYYY HH24:MI:SS'), 'silpa');
Insert into R360_USER_PREF.R360_APP_CURRENCY
   (CURRENCY_CD, CURRENCY_NAME, MAGNITUDE_MULTIPLIER_DISPLAY, RANK_ORDER_NUM, ACTV_FLAG, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   ('BYN', 'Belarusian Ruble', 0, 129, 'A', 
    TO_DATE('07/18/2023 17:26:25', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', TO_DATE('07/18/2023 17:26:25', 'MM/DD/YYYY HH24:MI:SS'), 'silpa');
Insert into R360_USER_PREF.R360_APP_CURRENCY
   (CURRENCY_CD, CURRENCY_NAME, CURRENCY_SYMBOL, MAGNITUDE_MULTIPLIER_DISPLAY, RANK_ORDER_NUM, 
    ACTV_FLAG, CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   ('SLL', 'Leone', 'Le', 3, 130, 
    'A', TO_DATE('07/18/2023 17:26:25', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', TO_DATE('07/18/2023 17:26:25', 'MM/DD/YYYY HH24:MI:SS'), 'silpa');
Insert into R360_USER_PREF.R360_APP_CURRENCY
   (CURRENCY_CD, CURRENCY_NAME, CURRENCY_SYMBOL, MAGNITUDE_MULTIPLIER_DISPLAY, RANK_ORDER_NUM, 
    ACTV_FLAG, CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   ('SOS', 'Somali Shilling', 'Sh', 0, 131, 
    'A', TO_DATE('07/18/2023 17:26:25', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', TO_DATE('07/18/2023 17:26:25', 'MM/DD/YYYY HH24:MI:SS'), 'silpa');
Insert into R360_USER_PREF.R360_APP_CURRENCY
   (CURRENCY_CD, CURRENCY_NAME, CURRENCY_SYMBOL, MAGNITUDE_MULTIPLIER_DISPLAY, RANK_ORDER_NUM, 
    ACTV_FLAG, CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   ('STD', 'Dobra', 'Db', 0, 132, 
    'A', TO_DATE('07/18/2023 17:26:25', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', TO_DATE('07/18/2023 17:26:25', 'MM/DD/YYYY HH24:MI:SS'), 'silpa');
Insert into R360_USER_PREF.R360_APP_CURRENCY
   (CURRENCY_CD, CURRENCY_NAME, CURRENCY_SYMBOL, MAGNITUDE_MULTIPLIER_DISPLAY, RANK_ORDER_NUM, 
    ACTV_FLAG, CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   ('SVC', 'El Salvador Colon', '$', 0, 133, 
    'A', TO_DATE('07/18/2023 17:26:26', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', TO_DATE('07/18/2023 17:26:26', 'MM/DD/YYYY HH24:MI:SS'), 'silpa');
Insert into R360_USER_PREF.R360_APP_CURRENCY
   (CURRENCY_CD, CURRENCY_NAME, CURRENCY_SYMBOL, MAGNITUDE_MULTIPLIER_DISPLAY, RANK_ORDER_NUM, 
    ACTV_FLAG, CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   ('SYP', 'Syrian Pound', '£', 0, 134, 
    'A', TO_DATE('07/18/2023 17:26:26', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', TO_DATE('07/18/2023 17:26:26', 'MM/DD/YYYY HH24:MI:SS'), 'silpa');
Insert into R360_USER_PREF.R360_APP_CURRENCY
   (CURRENCY_CD, CURRENCY_NAME, CURRENCY_SYMBOL, MAGNITUDE_MULTIPLIER_DISPLAY, RANK_ORDER_NUM, 
    ACTV_FLAG, CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   ('THB', 'Baht', 'BHT', 0, 135, 
    'A', TO_DATE('07/18/2023 17:26:26', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', TO_DATE('07/18/2023 17:26:26', 'MM/DD/YYYY HH24:MI:SS'), 'silpa');
Insert into R360_USER_PREF.R360_APP_CURRENCY
   (CURRENCY_CD, CURRENCY_NAME, CURRENCY_SYMBOL, MAGNITUDE_MULTIPLIER_DISPLAY, RANK_ORDER_NUM, 
    ACTV_FLAG, CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   ('TOP', 'Pa''anga', 'T$', 0, 136, 
    'A', TO_DATE('07/18/2023 17:26:26', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', TO_DATE('07/18/2023 17:26:26', 'MM/DD/YYYY HH24:MI:SS'), 'silpa');
Insert into R360_USER_PREF.R360_APP_CURRENCY
   (CURRENCY_CD, CURRENCY_NAME, CURRENCY_SYMBOL, MAGNITUDE_MULTIPLIER_DISPLAY, RANK_ORDER_NUM, 
    ACTV_FLAG, CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   ('TWD', 'New Taiwan Dollar', '$', 0, 137, 
    'A', TO_DATE('07/18/2023 17:26:26', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', TO_DATE('07/18/2023 17:26:26', 'MM/DD/YYYY HH24:MI:SS'), 'silpa');
Insert into R360_USER_PREF.R360_APP_CURRENCY
   (CURRENCY_CD, CURRENCY_NAME, CURRENCY_SYMBOL, MAGNITUDE_MULTIPLIER_DISPLAY, RANK_ORDER_NUM, 
    ACTV_FLAG, CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   ('TZS', 'Tanzanian Shilling', 'Sh', 3, 138, 
    'A', TO_DATE('07/18/2023 17:26:26', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', TO_DATE('07/18/2023 17:26:26', 'MM/DD/YYYY HH24:MI:SS'), 'silpa');
Insert into R360_USER_PREF.R360_APP_CURRENCY
   (CURRENCY_CD, CURRENCY_NAME, CURRENCY_SYMBOL, MAGNITUDE_MULTIPLIER_DISPLAY, RANK_ORDER_NUM, 
    ACTV_FLAG, CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   ('UAH', 'Hryvnia', '₴', 0, 139, 
    'A', TO_DATE('07/18/2023 17:26:26', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', TO_DATE('07/18/2023 17:26:26', 'MM/DD/YYYY HH24:MI:SS'), 'silpa');
Insert into R360_USER_PREF.R360_APP_CURRENCY
   (CURRENCY_CD, CURRENCY_NAME, CURRENCY_SYMBOL, MAGNITUDE_MULTIPLIER_DISPLAY, RANK_ORDER_NUM, 
    ACTV_FLAG, CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   ('UYU', 'Peso Uruguayo', '$', 0, 140, 
    'A', TO_DATE('07/18/2023 17:26:26', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', TO_DATE('07/18/2023 17:26:26', 'MM/DD/YYYY HH24:MI:SS'), 'silpa');
Insert into R360_USER_PREF.R360_APP_CURRENCY
   (CURRENCY_CD, CURRENCY_NAME, CURRENCY_SYMBOL, MAGNITUDE_MULTIPLIER_DISPLAY, RANK_ORDER_NUM, 
    ACTV_FLAG, CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   ('UZS', 'Uzbekistan Sum', 'UZS', 3, 141, 
    'A', TO_DATE('07/18/2023 17:26:26', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', TO_DATE('07/18/2023 17:26:26', 'MM/DD/YYYY HH24:MI:SS'), 'silpa');
Insert into R360_USER_PREF.R360_APP_CURRENCY
   (CURRENCY_CD, CURRENCY_NAME, CURRENCY_SYMBOL, MAGNITUDE_MULTIPLIER_DISPLAY, RANK_ORDER_NUM, 
    ACTV_FLAG, CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   ('VUV', 'Vatu', 'Vt', 0, 142, 
    'A', TO_DATE('07/18/2023 17:26:26', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', TO_DATE('07/18/2023 17:26:26', 'MM/DD/YYYY HH24:MI:SS'), 'silpa');
Insert into R360_USER_PREF.R360_APP_CURRENCY
   (CURRENCY_CD, CURRENCY_NAME, CURRENCY_SYMBOL, MAGNITUDE_MULTIPLIER_DISPLAY, RANK_ORDER_NUM, 
    ACTV_FLAG, CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   ('WST', 'Tala', 'T', 0, 143, 
    'A', TO_DATE('07/18/2023 17:26:26', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', TO_DATE('07/18/2023 17:26:26', 'MM/DD/YYYY HH24:MI:SS'), 'silpa');
Insert into R360_USER_PREF.R360_APP_CURRENCY
   (CURRENCY_CD, CURRENCY_NAME, CURRENCY_SYMBOL, MAGNITUDE_MULTIPLIER_DISPLAY, RANK_ORDER_NUM, 
    ACTV_FLAG, CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   ('BBD', 'Barbados Dollar', '$', 0, 144, 
    'A', TO_DATE('07/18/2023 17:26:26', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', TO_DATE('07/18/2023 17:26:26', 'MM/DD/YYYY HH24:MI:SS'), 'silpa');
Insert into R360_USER_PREF.R360_APP_CURRENCY
   (CURRENCY_CD, CURRENCY_NAME, CURRENCY_SYMBOL, MAGNITUDE_MULTIPLIER_DISPLAY, RANK_ORDER_NUM, 
    ACTV_FLAG, CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   ('XPF', 'CFP Franc', 'Fr', 0, 145, 
    'A', TO_DATE('07/18/2023 17:26:26', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', TO_DATE('07/18/2023 17:26:26', 'MM/DD/YYYY HH24:MI:SS'), 'silpa');
Insert into R360_USER_PREF.R360_APP_CURRENCY
   (CURRENCY_CD, CURRENCY_NAME, CURRENCY_SYMBOL, MAGNITUDE_MULTIPLIER_DISPLAY, RANK_ORDER_NUM, 
    ACTV_FLAG, CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   ('YER', 'Yemeni Rial', '﷼', 0, 146, 
    'A', TO_DATE('07/18/2023 17:26:26', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', TO_DATE('07/18/2023 17:26:26', 'MM/DD/YYYY HH24:MI:SS'), 'silpa');
Insert into R360_USER_PREF.R360_APP_CURRENCY
   (CURRENCY_CD, CURRENCY_NAME, CURRENCY_SYMBOL, MAGNITUDE_MULTIPLIER_DISPLAY, RANK_ORDER_NUM, 
    ACTV_FLAG, CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   ('ZAR', 'Rand', 'R', 0, 147, 
    'A', TO_DATE('07/18/2023 17:26:26', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', TO_DATE('07/18/2023 17:26:26', 'MM/DD/YYYY HH24:MI:SS'), 'silpa');
Insert into R360_USER_PREF.R360_APP_CURRENCY
   (CURRENCY_CD, CURRENCY_NAME, CURRENCY_SYMBOL, MAGNITUDE_MULTIPLIER_DISPLAY, RANK_ORDER_NUM, 
    ACTV_FLAG, CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   ('ZWL', 'Zimbabwe Dollar', 'Z$', 0, 148, 
    'A', TO_DATE('07/18/2023 17:26:26', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', TO_DATE('07/18/2023 17:26:26', 'MM/DD/YYYY HH24:MI:SS'), 'silpa');
Insert into R360_USER_PREF.R360_APP_CURRENCY
   (CURRENCY_CD, CURRENCY_NAME, CURRENCY_SYMBOL, MAGNITUDE_MULTIPLIER_DISPLAY, RANK_ORDER_NUM, 
    ACTV_FLAG, CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   ('GHS', 'Cedi', '₵', 0, 149, 
    'A', TO_DATE('07/18/2023 17:26:26', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', TO_DATE('07/18/2023 17:26:26', 'MM/DD/YYYY HH24:MI:SS'), 'silpa');
Insert into R360_USER_PREF.R360_APP_CURRENCY
   (CURRENCY_CD, CURRENCY_NAME, CURRENCY_SYMBOL, MAGNITUDE_MULTIPLIER_DISPLAY, RANK_ORDER_NUM, 
    ACTV_FLAG, CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   ('VEF', 'Venezuela Bolivar', 'Bs F', 0, 150, 
    'A', TO_DATE('07/18/2023 17:26:26', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', TO_DATE('07/18/2023 17:26:26', 'MM/DD/YYYY HH24:MI:SS'), 'silpa');
Insert into R360_USER_PREF.R360_APP_CURRENCY
   (CURRENCY_CD, CURRENCY_NAME, CURRENCY_SYMBOL, MAGNITUDE_MULTIPLIER_DISPLAY, RANK_ORDER_NUM, 
    ACTV_FLAG, CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   ('RSD', 'Serbian Dinar', 'din', 0, 151, 
    'A', TO_DATE('07/18/2023 17:26:26', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', TO_DATE('07/18/2023 17:26:26', 'MM/DD/YYYY HH24:MI:SS'), 'silpa');
Insert into R360_USER_PREF.R360_APP_CURRENCY
   (CURRENCY_CD, CURRENCY_NAME, CURRENCY_SYMBOL, MAGNITUDE_MULTIPLIER_DISPLAY, RANK_ORDER_NUM, 
    ACTV_FLAG, CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   ('MZN', 'Metical', 'MT', 0, 152, 
    'A', TO_DATE('07/18/2023 17:26:26', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', TO_DATE('07/18/2023 17:26:26', 'MM/DD/YYYY HH24:MI:SS'), 'silpa');
Insert into R360_USER_PREF.R360_APP_CURRENCY
   (CURRENCY_CD, CURRENCY_NAME, CURRENCY_SYMBOL, MAGNITUDE_MULTIPLIER_DISPLAY, RANK_ORDER_NUM, 
    ACTV_FLAG, CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   ('HKD', 'Hong Kong Dollar', '$', 0, 153, 
    'A', TO_DATE('07/18/2023 17:26:26', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', TO_DATE('07/18/2023 17:26:26', 'MM/DD/YYYY HH24:MI:SS'), 'silpa');
Insert into R360_USER_PREF.R360_APP_CURRENCY
   (CURRENCY_CD, CURRENCY_NAME, CURRENCY_SYMBOL, MAGNITUDE_MULTIPLIER_DISPLAY, RANK_ORDER_NUM, 
    ACTV_FLAG, CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   ('HTG', 'Gourde', 'G', 0, 154, 
    'A', TO_DATE('07/18/2023 17:26:26', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', TO_DATE('07/18/2023 17:26:26', 'MM/DD/YYYY HH24:MI:SS'), 'silpa');
Insert into R360_USER_PREF.R360_APP_CURRENCY
   (CURRENCY_CD, CURRENCY_NAME, CURRENCY_SYMBOL, MAGNITUDE_MULTIPLIER_DISPLAY, RANK_ORDER_NUM, 
    ACTV_FLAG, CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   ('IRR', 'Iranian Rial', '﷼', 3, 155, 
    'A', TO_DATE('07/18/2023 17:26:26', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', TO_DATE('07/18/2023 17:26:26', 'MM/DD/YYYY HH24:MI:SS'), 'silpa');
Insert into R360_USER_PREF.R360_APP_CURRENCY
   (CURRENCY_CD, CURRENCY_NAME, CURRENCY_SYMBOL, MAGNITUDE_MULTIPLIER_DISPLAY, RANK_ORDER_NUM, 
    ACTV_FLAG, CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   ('JOD', 'Jordanian Dinar', 'د.ا', 0, 156, 
    'A', TO_DATE('07/18/2023 17:26:26', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', TO_DATE('07/18/2023 17:26:26', 'MM/DD/YYYY HH24:MI:SS'), 'silpa');
Insert into R360_USER_PREF.R360_APP_CURRENCY
   (CURRENCY_CD, CURRENCY_NAME, CURRENCY_SYMBOL, MAGNITUDE_MULTIPLIER_DISPLAY, RANK_ORDER_NUM, 
    ACTV_FLAG, CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   ('KMF', 'Comoro Franc', 'Fr', 0, 157, 
    'A', TO_DATE('07/18/2023 17:26:26', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', TO_DATE('07/18/2023 17:26:26', 'MM/DD/YYYY HH24:MI:SS'), 'silpa');
Insert into R360_USER_PREF.R360_APP_CURRENCY
   (CURRENCY_CD, CURRENCY_NAME, CURRENCY_SYMBOL, MAGNITUDE_MULTIPLIER_DISPLAY, RANK_ORDER_NUM, 
    ACTV_FLAG, CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   ('KYD', 'Cayman Islands Dollar', '$', 0, 158, 
    'A', TO_DATE('07/18/2023 17:26:26', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', TO_DATE('07/18/2023 17:26:26', 'MM/DD/YYYY HH24:MI:SS'), 'silpa');
Insert into R360_USER_PREF.R360_APP_CURRENCY
   (CURRENCY_CD, CURRENCY_NAME, CURRENCY_SYMBOL, MAGNITUDE_MULTIPLIER_DISPLAY, RANK_ORDER_NUM, 
    ACTV_FLAG, CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   ('LRD', 'Liberian Dollar', '$', 0, 159, 
    'A', TO_DATE('07/18/2023 17:26:26', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', TO_DATE('07/18/2023 17:26:26', 'MM/DD/YYYY HH24:MI:SS'), 'silpa');
Insert into R360_USER_PREF.R360_APP_CURRENCY
   (CURRENCY_CD, CURRENCY_NAME, CURRENCY_SYMBOL, MAGNITUDE_MULTIPLIER_DISPLAY, RANK_ORDER_NUM, 
    ACTV_FLAG, CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   ('MDL', 'Moldovan Leu', 'L', 0, 160, 
    'A', TO_DATE('07/18/2023 17:26:26', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', TO_DATE('07/18/2023 17:26:26', 'MM/DD/YYYY HH24:MI:SS'), 'silpa');
Insert into R360_USER_PREF.R360_APP_CURRENCY
   (CURRENCY_CD, CURRENCY_NAME, CURRENCY_SYMBOL, MAGNITUDE_MULTIPLIER_DISPLAY, RANK_ORDER_NUM, 
    ACTV_FLAG, CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   ('MRO', 'Ouguiya', 'UM', 0, 161, 
    'A', TO_DATE('07/18/2023 17:26:26', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', TO_DATE('07/18/2023 17:26:26', 'MM/DD/YYYY HH24:MI:SS'), 'silpa');
Insert into R360_USER_PREF.R360_APP_CURRENCY
   (CURRENCY_CD, CURRENCY_NAME, CURRENCY_SYMBOL, MAGNITUDE_MULTIPLIER_DISPLAY, RANK_ORDER_NUM, 
    ACTV_FLAG, CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   ('MVR', 'Rufiyaa', '.ރ', 0, 162, 
    'A', TO_DATE('07/18/2023 17:26:26', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', TO_DATE('07/18/2023 17:26:26', 'MM/DD/YYYY HH24:MI:SS'), 'silpa');
Insert into R360_USER_PREF.R360_APP_CURRENCY
   (CURRENCY_CD, CURRENCY_NAME, CURRENCY_SYMBOL, MAGNITUDE_MULTIPLIER_DISPLAY, RANK_ORDER_NUM, 
    ACTV_FLAG, CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   ('OMR', 'Rial Omani', 'ر.ع.', 0, 163, 
    'A', TO_DATE('07/18/2023 17:26:26', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', TO_DATE('07/18/2023 17:26:26', 'MM/DD/YYYY HH24:MI:SS'), 'silpa');
Insert into R360_USER_PREF.R360_APP_CURRENCY
   (CURRENCY_CD, CURRENCY_NAME, CURRENCY_SYMBOL, MAGNITUDE_MULTIPLIER_DISPLAY, RANK_ORDER_NUM, 
    ACTV_FLAG, CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   ('PGK', 'Kina', 'K', 0, 164, 
    'A', TO_DATE('07/18/2023 17:26:26', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', TO_DATE('07/18/2023 17:26:26', 'MM/DD/YYYY HH24:MI:SS'), 'silpa');
Insert into R360_USER_PREF.R360_APP_CURRENCY
   (CURRENCY_CD, CURRENCY_NAME, CURRENCY_SYMBOL, MAGNITUDE_MULTIPLIER_DISPLAY, RANK_ORDER_NUM, 
    ACTV_FLAG, CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   ('PHP', 'Philippine Peso', '₱', 0, 165, 
    'A', TO_DATE('07/18/2023 17:26:26', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', TO_DATE('07/18/2023 17:26:26', 'MM/DD/YYYY HH24:MI:SS'), 'silpa');
Insert into R360_USER_PREF.R360_APP_CURRENCY
   (CURRENCY_CD, CURRENCY_NAME, CURRENCY_SYMBOL, MAGNITUDE_MULTIPLIER_DISPLAY, RANK_ORDER_NUM, 
    ACTV_FLAG, CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   ('PYG', 'Guarani', '₲', 3, 166, 
    'A', TO_DATE('07/18/2023 17:26:26', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', TO_DATE('07/18/2023 17:26:26', 'MM/DD/YYYY HH24:MI:SS'), 'silpa');
Insert into R360_USER_PREF.R360_APP_CURRENCY
   (CURRENCY_CD, CURRENCY_NAME, CURRENCY_SYMBOL, MAGNITUDE_MULTIPLIER_DISPLAY, RANK_ORDER_NUM, 
    ACTV_FLAG, CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   ('QAR', 'Qatari Rial', 'ر.ق', 0, 167, 
    'A', TO_DATE('07/18/2023 17:26:26', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', TO_DATE('07/18/2023 17:26:26', 'MM/DD/YYYY HH24:MI:SS'), 'silpa');
Insert into R360_USER_PREF.R360_APP_CURRENCY
   (CURRENCY_CD, CURRENCY_NAME, CURRENCY_SYMBOL, MAGNITUDE_MULTIPLIER_DISPLAY, RANK_ORDER_NUM, 
    ACTV_FLAG, CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   ('RWF', 'Rwanda Franc', 'Fr', 0, 168, 
    'A', TO_DATE('07/18/2023 17:26:27', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', TO_DATE('07/18/2023 17:26:27', 'MM/DD/YYYY HH24:MI:SS'), 'silpa');
Insert into R360_USER_PREF.R360_APP_CURRENCY
   (CURRENCY_CD, CURRENCY_NAME, CURRENCY_SYMBOL, MAGNITUDE_MULTIPLIER_DISPLAY, RANK_ORDER_NUM, 
    ACTV_FLAG, CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   ('SCR', 'Seychelles Rupee', '₨', 0, 169, 
    'A', TO_DATE('07/18/2023 17:26:27', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', TO_DATE('07/18/2023 17:26:27', 'MM/DD/YYYY HH24:MI:SS'), 'silpa');
Insert into R360_USER_PREF.R360_APP_CURRENCY
   (CURRENCY_CD, CURRENCY_NAME, CURRENCY_SYMBOL, MAGNITUDE_MULTIPLIER_DISPLAY, RANK_ORDER_NUM, 
    ACTV_FLAG, CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   ('SEK', 'Swedish Krona', 'kr', 0, 170, 
    'A', TO_DATE('07/18/2023 17:26:27', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', TO_DATE('07/18/2023 17:26:27', 'MM/DD/YYYY HH24:MI:SS'), 'silpa');
Insert into R360_USER_PREF.R360_APP_CURRENCY
   (CURRENCY_CD, CURRENCY_NAME, CURRENCY_SYMBOL, MAGNITUDE_MULTIPLIER_DISPLAY, RANK_ORDER_NUM, 
    ACTV_FLAG, CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   ('XDR', 'SDR', 'SDR', 0, 171, 
    'A', TO_DATE('07/18/2023 17:26:27', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', TO_DATE('07/18/2023 17:26:27', 'MM/DD/YYYY HH24:MI:SS'), 'silpa');
Insert into R360_USER_PREF.R360_APP_CURRENCY
   (CURRENCY_CD, CURRENCY_NAME, CURRENCY_SYMBOL, MAGNITUDE_MULTIPLIER_DISPLAY, RANK_ORDER_NUM, 
    ACTV_FLAG, CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   ('FKP', 'Falkland Islands Pound', '£', 0, 175, 
    'A', TO_DATE('07/18/2023 17:26:27', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', TO_DATE('07/18/2023 17:26:27', 'MM/DD/YYYY HH24:MI:SS'), 'silpa');
Insert into R360_USER_PREF.R360_APP_CURRENCY
   (CURRENCY_CD, CURRENCY_NAME, CURRENCY_SYMBOL, MAGNITUDE_MULTIPLIER_DISPLAY, RANK_ORDER_NUM, 
    ACTV_FLAG, CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   ('GEL', 'Lari', 'ლ', 0, 176, 
    'A', TO_DATE('07/18/2023 17:26:27', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', TO_DATE('07/18/2023 17:26:27', 'MM/DD/YYYY HH24:MI:SS'), 'silpa');
Insert into R360_USER_PREF.R360_APP_CURRENCY
   (CURRENCY_CD, CURRENCY_NAME, CURRENCY_SYMBOL, MAGNITUDE_MULTIPLIER_DISPLAY, RANK_ORDER_NUM, 
    ACTV_FLAG, CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   ('GMD', 'Dalasi', 'D', 0, 177, 
    'A', TO_DATE('07/18/2023 17:26:27', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', TO_DATE('07/18/2023 17:26:27', 'MM/DD/YYYY HH24:MI:SS'), 'silpa');
Insert into R360_USER_PREF.R360_APP_CURRENCY
   (CURRENCY_CD, CURRENCY_NAME, CURRENCY_SYMBOL, MAGNITUDE_MULTIPLIER_DISPLAY, RANK_ORDER_NUM, 
    ACTV_FLAG, CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   ('AFN', 'Afghani', '؋', 0, 178, 
    'A', TO_DATE('07/18/2023 17:26:27', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', TO_DATE('07/18/2023 17:26:27', 'MM/DD/YYYY HH24:MI:SS'), 'silpa');
Insert into R360_USER_PREF.R360_APP_CURRENCY
   (CURRENCY_CD, CURRENCY_NAME, MAGNITUDE_MULTIPLIER_DISPLAY, RANK_ORDER_NUM, ACTV_FLAG, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   ('VES', 'Bolívar Soberano', 0, 182, 'A', 
    TO_DATE('07/18/2023 17:26:36', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', TO_DATE('07/18/2023 17:26:36', 'MM/DD/YYYY HH24:MI:SS'), 'silpa');
Insert into R360_USER_PREF.R360_APP_CURRENCY
   (CURRENCY_CD, CURRENCY_NAME, CURRENCY_SYMBOL, MAGNITUDE_MULTIPLIER_DISPLAY, RANK_ORDER_NUM, 
    ACTV_FLAG, CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   ('SGD', 'Singapore Dollar', '$', 0, 1, 
    'A', TO_DATE('07/18/2023 17:26:09', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', TO_DATE('07/18/2023 17:26:09', 'MM/DD/YYYY HH24:MI:SS'), 'silpa');
Insert into R360_USER_PREF.R360_APP_CURRENCY
   (CURRENCY_CD, CURRENCY_NAME, CURRENCY_SYMBOL, MAGNITUDE_MULTIPLIER_DISPLAY, RANK_ORDER_NUM, 
    ACTV_FLAG, CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   ('SZL', 'Lilangeni', 'L', 0, 2, 
    'A', TO_DATE('07/18/2023 17:26:22', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', TO_DATE('07/18/2023 17:26:22', 'MM/DD/YYYY HH24:MI:SS'), 'silpa');
Insert into R360_USER_PREF.R360_APP_CURRENCY
   (CURRENCY_CD, CURRENCY_NAME, CURRENCY_SYMBOL, MAGNITUDE_MULTIPLIER_DISPLAY, RANK_ORDER_NUM, 
    ACTV_FLAG, CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   ('TND', 'Tunisian Dinar', 'د.ت', 0, 3, 
    'A', TO_DATE('07/18/2023 17:26:22', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', TO_DATE('07/18/2023 17:26:22', 'MM/DD/YYYY HH24:MI:SS'), 'silpa');
Insert into R360_USER_PREF.R360_APP_CURRENCY
   (CURRENCY_CD, CURRENCY_NAME, CURRENCY_SYMBOL, MAGNITUDE_MULTIPLIER_DISPLAY, RANK_ORDER_NUM, 
    ACTV_FLAG, CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   ('TTD', 'Trinidad and Tobago Dollar', '$', 0, 4, 
    'A', TO_DATE('07/18/2023 17:26:22', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', TO_DATE('07/18/2023 17:26:22', 'MM/DD/YYYY HH24:MI:SS'), 'silpa');
Insert into R360_USER_PREF.R360_APP_CURRENCY
   (CURRENCY_CD, CURRENCY_NAME, CURRENCY_SYMBOL, MAGNITUDE_MULTIPLIER_DISPLAY, RANK_ORDER_NUM, 
    ACTV_FLAG, CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   ('UGX', 'Uganda Shilling', 'Sh', 3, 5, 
    'A', TO_DATE('07/18/2023 17:26:22', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', TO_DATE('07/18/2023 17:26:22', 'MM/DD/YYYY HH24:MI:SS'), 'silpa');
Insert into R360_USER_PREF.R360_APP_CURRENCY
   (CURRENCY_CD, CURRENCY_NAME, CURRENCY_SYMBOL, MAGNITUDE_MULTIPLIER_DISPLAY, RANK_ORDER_NUM, 
    ACTV_FLAG, CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   ('VND', 'Dong', '₫', 3, 6, 
    'A', TO_DATE('07/18/2023 17:26:22', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', TO_DATE('07/18/2023 17:26:22', 'MM/DD/YYYY HH24:MI:SS'), 'silpa');
Insert into R360_USER_PREF.R360_APP_CURRENCY
   (CURRENCY_CD, CURRENCY_NAME, CURRENCY_SYMBOL, MAGNITUDE_MULTIPLIER_DISPLAY, RANK_ORDER_NUM, 
    ACTV_FLAG, CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   ('XOF', 'CFA Franc BCEAO', 'Fr', 0, 7, 
    'A', TO_DATE('07/18/2023 17:26:22', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', TO_DATE('07/18/2023 17:26:22', 'MM/DD/YYYY HH24:MI:SS'), 'silpa');
Insert into R360_USER_PREF.R360_APP_CURRENCY
   (CURRENCY_CD, CURRENCY_NAME, CURRENCY_SYMBOL, MAGNITUDE_MULTIPLIER_DISPLAY, RANK_ORDER_NUM, 
    ACTV_FLAG, CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   ('AOA', 'Kwanza', 'Kz', 0, 9, 
    'A', TO_DATE('07/18/2023 17:26:22', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', TO_DATE('07/18/2023 17:26:22', 'MM/DD/YYYY HH24:MI:SS'), 'silpa');
Insert into R360_USER_PREF.R360_APP_CURRENCY
   (CURRENCY_CD, CURRENCY_NAME, CURRENCY_SYMBOL, MAGNITUDE_MULTIPLIER_DISPLAY, RANK_ORDER_NUM, 
    ACTV_FLAG, CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   ('BAM', 'Convertible Marks', 'KM', 0, 10, 
    'A', TO_DATE('07/18/2023 17:26:22', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', TO_DATE('07/18/2023 17:26:22', 'MM/DD/YYYY HH24:MI:SS'), 'silpa');
Insert into R360_USER_PREF.R360_APP_CURRENCY
   (CURRENCY_CD, CURRENCY_NAME, CURRENCY_SYMBOL, MAGNITUDE_MULTIPLIER_DISPLAY, RANK_ORDER_NUM, 
    ACTV_FLAG, CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   ('BGN', 'Bulgarian Lev', 'лв', 0, 11, 
    'A', TO_DATE('07/18/2023 17:26:22', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', TO_DATE('07/18/2023 17:26:22', 'MM/DD/YYYY HH24:MI:SS'), 'silpa');
Insert into R360_USER_PREF.R360_APP_CURRENCY
   (CURRENCY_CD, CURRENCY_NAME, CURRENCY_SYMBOL, MAGNITUDE_MULTIPLIER_DISPLAY, RANK_ORDER_NUM, 
    ACTV_FLAG, CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   ('SDG', 'Sudanese Pound', 'ج.س.', 0, 13, 
    'A', TO_DATE('07/18/2023 17:26:22', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', TO_DATE('07/18/2023 17:26:22', 'MM/DD/YYYY HH24:MI:SS'), 'silpa');
Insert into R360_USER_PREF.R360_APP_CURRENCY
   (CURRENCY_CD, CURRENCY_NAME, CURRENCY_SYMBOL, MAGNITUDE_MULTIPLIER_DISPLAY, RANK_ORDER_NUM, 
    ACTV_FLAG, CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   ('CNY', 'Chinese Yuan Renminbi', '¥', 0, 15, 
    'A', TO_DATE('07/18/2023 17:26:22', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', TO_DATE('07/18/2023 17:26:22', 'MM/DD/YYYY HH24:MI:SS'), 'silpa');
Insert into R360_USER_PREF.R360_APP_CURRENCY
   (CURRENCY_CD, CURRENCY_NAME, CURRENCY_SYMBOL, MAGNITUDE_MULTIPLIER_DISPLAY, RANK_ORDER_NUM, 
    ACTV_FLAG, CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   ('CRC', 'Costa Rican Colon', '₡', 0, 16, 
    'A', TO_DATE('07/18/2023 17:26:22', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', TO_DATE('07/18/2023 17:26:22', 'MM/DD/YYYY HH24:MI:SS'), 'silpa');
Insert into R360_USER_PREF.R360_APP_CURRENCY
   (CURRENCY_CD, CURRENCY_NAME, CURRENCY_SYMBOL, MAGNITUDE_MULTIPLIER_DISPLAY, RANK_ORDER_NUM, 
    ACTV_FLAG, CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   ('CUP', 'Cuban Peso', '$', 0, 17, 
    'A', TO_DATE('07/18/2023 17:26:22', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', TO_DATE('07/18/2023 17:26:22', 'MM/DD/YYYY HH24:MI:SS'), 'silpa');
Insert into R360_USER_PREF.R360_APP_CURRENCY
   (CURRENCY_CD, CURRENCY_NAME, CURRENCY_SYMBOL, MAGNITUDE_MULTIPLIER_DISPLAY, RANK_ORDER_NUM, 
    ACTV_FLAG, CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   ('CVE', 'Cape Verde Escudo', 'Esc or $', 0, 18, 
    'A', TO_DATE('07/18/2023 17:26:22', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', TO_DATE('07/18/2023 17:26:22', 'MM/DD/YYYY HH24:MI:SS'), 'silpa');
Insert into R360_USER_PREF.R360_APP_CURRENCY
   (CURRENCY_CD, CURRENCY_NAME, CURRENCY_SYMBOL, MAGNITUDE_MULTIPLIER_DISPLAY, RANK_ORDER_NUM, 
    ACTV_FLAG, CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   ('DJF', 'Djibouti Franc', 'Fr', 0, 19, 
    'A', TO_DATE('07/18/2023 17:26:22', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', TO_DATE('07/18/2023 17:26:22', 'MM/DD/YYYY HH24:MI:SS'), 'silpa');
Insert into R360_USER_PREF.R360_APP_CURRENCY
   (CURRENCY_CD, CURRENCY_NAME, CURRENCY_SYMBOL, MAGNITUDE_MULTIPLIER_DISPLAY, RANK_ORDER_NUM, 
    ACTV_FLAG, CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   ('DKK', 'Danish Krone', 'kr', 0, 20, 
    'A', TO_DATE('07/18/2023 17:26:22', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', TO_DATE('07/18/2023 17:26:22', 'MM/DD/YYYY HH24:MI:SS'), 'silpa');
Insert into R360_USER_PREF.R360_APP_CURRENCY
   (CURRENCY_CD, CURRENCY_NAME, CURRENCY_SYMBOL, MAGNITUDE_MULTIPLIER_DISPLAY, RANK_ORDER_NUM, 
    ACTV_FLAG, CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   ('DZD', 'Algerian Dinar', 'د.ج', 0, 21, 
    'A', TO_DATE('07/18/2023 17:26:22', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', TO_DATE('07/18/2023 17:26:22', 'MM/DD/YYYY HH24:MI:SS'), 'silpa');
Insert into R360_USER_PREF.R360_APP_CURRENCY
   (CURRENCY_CD, CURRENCY_NAME, CURRENCY_SYMBOL, MAGNITUDE_MULTIPLIER_DISPLAY, RANK_ORDER_NUM, 
    ACTV_FLAG, CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   ('ERN', 'Nakfa', 'Nfk', 0, 22, 
    'A', TO_DATE('07/18/2023 17:26:22', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', TO_DATE('07/18/2023 17:26:22', 'MM/DD/YYYY HH24:MI:SS'), 'silpa');
Insert into R360_USER_PREF.R360_APP_CURRENCY
   (CURRENCY_CD, CURRENCY_NAME, CURRENCY_SYMBOL, MAGNITUDE_MULTIPLIER_DISPLAY, RANK_ORDER_NUM, 
    ACTV_FLAG, CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   ('ETB', 'Ethiopian Birr', 'Br', 0, 23, 
    'A', TO_DATE('07/18/2023 17:26:22', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', TO_DATE('07/18/2023 17:26:22', 'MM/DD/YYYY HH24:MI:SS'), 'silpa');
Insert into R360_USER_PREF.R360_APP_CURRENCY
   (CURRENCY_CD, CURRENCY_NAME, CURRENCY_SYMBOL, MAGNITUDE_MULTIPLIER_DISPLAY, RANK_ORDER_NUM, 
    ACTV_FLAG, CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   ('FJD', 'Fiji Dollar', '$', 0, 24, 
    'A', TO_DATE('07/18/2023 17:26:22', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', TO_DATE('07/18/2023 17:26:22', 'MM/DD/YYYY HH24:MI:SS'), 'silpa');
Insert into R360_USER_PREF.R360_APP_CURRENCY
   (CURRENCY_CD, CURRENCY_NAME, CURRENCY_SYMBOL, MAGNITUDE_MULTIPLIER_DISPLAY, RANK_ORDER_NUM, 
    ACTV_FLAG, CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   ('GIP', 'Gibraltar Pound', '£', 0, 25, 
    'A', TO_DATE('07/18/2023 17:26:22', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', TO_DATE('07/18/2023 17:26:22', 'MM/DD/YYYY HH24:MI:SS'), 'silpa');
Insert into R360_USER_PREF.R360_APP_CURRENCY
   (CURRENCY_CD, CURRENCY_NAME, CURRENCY_SYMBOL, MAGNITUDE_MULTIPLIER_DISPLAY, RANK_ORDER_NUM, 
    ACTV_FLAG, CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   ('GNF', 'Guinea Franc', 'Fr', 3, 26, 
    'A', TO_DATE('07/18/2023 17:26:22', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', TO_DATE('07/18/2023 17:26:22', 'MM/DD/YYYY HH24:MI:SS'), 'silpa');
Insert into R360_USER_PREF.R360_APP_CURRENCY
   (CURRENCY_CD, CURRENCY_NAME, CURRENCY_SYMBOL, MAGNITUDE_MULTIPLIER_DISPLAY, RANK_ORDER_NUM, 
    ACTV_FLAG, CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   ('GTQ', 'Quetzal', 'Q', 0, 27, 
    'A', TO_DATE('07/18/2023 17:26:22', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', TO_DATE('07/18/2023 17:26:22', 'MM/DD/YYYY HH24:MI:SS'), 'silpa');
Insert into R360_USER_PREF.R360_APP_CURRENCY
   (CURRENCY_CD, CURRENCY_NAME, CURRENCY_SYMBOL, MAGNITUDE_MULTIPLIER_DISPLAY, RANK_ORDER_NUM, 
    ACTV_FLAG, CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   ('GYD', 'Guyana Dollar', '$', 0, 28, 
    'A', TO_DATE('07/18/2023 17:26:23', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', TO_DATE('07/18/2023 17:26:23', 'MM/DD/YYYY HH24:MI:SS'), 'silpa');
Insert into R360_USER_PREF.R360_APP_CURRENCY
   (CURRENCY_CD, CURRENCY_NAME, CURRENCY_SYMBOL, MAGNITUDE_MULTIPLIER_DISPLAY, RANK_ORDER_NUM, 
    ACTV_FLAG, CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   ('HNL', 'Lempira', 'L', 0, 29, 
    'A', TO_DATE('07/18/2023 17:26:23', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', TO_DATE('07/18/2023 17:26:23', 'MM/DD/YYYY HH24:MI:SS'), 'silpa');
Insert into R360_USER_PREF.R360_APP_CURRENCY
   (CURRENCY_CD, CURRENCY_NAME, CURRENCY_SYMBOL, MAGNITUDE_MULTIPLIER_DISPLAY, RANK_ORDER_NUM, 
    ACTV_FLAG, CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   ('HRK', 'Croatian Kuna', 'kn', 0, 30, 
    'A', TO_DATE('07/18/2023 17:26:23', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', TO_DATE('07/18/2023 17:26:23', 'MM/DD/YYYY HH24:MI:SS'), 'silpa');
Insert into R360_USER_PREF.R360_APP_CURRENCY
   (CURRENCY_CD, CURRENCY_NAME, CURRENCY_SYMBOL, MAGNITUDE_MULTIPLIER_DISPLAY, RANK_ORDER_NUM, 
    ACTV_FLAG, CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   ('HUF', 'Forint', 'Ft', 3, 31, 
    'A', TO_DATE('07/18/2023 17:26:23', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', TO_DATE('07/18/2023 17:26:23', 'MM/DD/YYYY HH24:MI:SS'), 'silpa');
Insert into R360_USER_PREF.R360_APP_CURRENCY
   (CURRENCY_CD, CURRENCY_NAME, CURRENCY_SYMBOL, MAGNITUDE_MULTIPLIER_DISPLAY, RANK_ORDER_NUM, 
    ACTV_FLAG, CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   ('IDR', 'Rupiah', 'Rp', 3, 32, 
    'A', TO_DATE('07/18/2023 17:26:23', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', TO_DATE('07/18/2023 17:26:23', 'MM/DD/YYYY HH24:MI:SS'), 'silpa');
Insert into R360_USER_PREF.R360_APP_CURRENCY
   (CURRENCY_CD, CURRENCY_NAME, CURRENCY_SYMBOL, MAGNITUDE_MULTIPLIER_DISPLAY, RANK_ORDER_NUM, 
    ACTV_FLAG, CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   ('XAF', 'CFA Franc BEAC', 'Fr', 3, 33, 
    'A', TO_DATE('07/18/2023 17:26:23', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', TO_DATE('07/18/2023 17:26:23', 'MM/DD/YYYY HH24:MI:SS'), 'silpa');
Insert into R360_USER_PREF.R360_APP_CURRENCY
   (CURRENCY_CD, CURRENCY_NAME, CURRENCY_SYMBOL, MAGNITUDE_MULTIPLIER_DISPLAY, RANK_ORDER_NUM, 
    ACTV_FLAG, CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   ('AUD', 'Australian Dollar', '$', 0, 34, 
    'A', TO_DATE('07/18/2023 17:26:23', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', TO_DATE('07/18/2023 17:26:23', 'MM/DD/YYYY HH24:MI:SS'), 'silpa');
Insert into R360_USER_PREF.R360_APP_CURRENCY
   (CURRENCY_CD, CURRENCY_NAME, CURRENCY_SYMBOL, MAGNITUDE_MULTIPLIER_DISPLAY, RANK_ORDER_NUM, 
    ACTV_FLAG, CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   ('EUR', 'Euro', '€', 0, 35, 
    'A', TO_DATE('07/18/2023 17:26:23', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', TO_DATE('07/18/2023 17:26:23', 'MM/DD/YYYY HH24:MI:SS'), 'silpa');
Insert into R360_USER_PREF.R360_APP_CURRENCY
   (CURRENCY_CD, CURRENCY_NAME, CURRENCY_SYMBOL, MAGNITUDE_MULTIPLIER_DISPLAY, RANK_ORDER_NUM, 
    ACTV_FLAG, CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   ('CAD', 'Canadian Dollar', 'C$', 0, 36, 
    'A', TO_DATE('07/18/2023 17:26:23', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', TO_DATE('07/18/2023 17:26:23', 'MM/DD/YYYY HH24:MI:SS'), 'silpa');
Insert into R360_USER_PREF.R360_APP_CURRENCY
   (CURRENCY_CD, CURRENCY_NAME, CURRENCY_SYMBOL, MAGNITUDE_MULTIPLIER_DISPLAY, RANK_ORDER_NUM, 
    ACTV_FLAG, CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   ('AWG', 'Aruban Guilder', 'ƒ', 0, 37, 
    'A', TO_DATE('07/18/2023 17:26:23', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', TO_DATE('07/18/2023 17:26:23', 'MM/DD/YYYY HH24:MI:SS'), 'silpa');
Insert into R360_USER_PREF.R360_APP_CURRENCY
   (CURRENCY_CD, CURRENCY_NAME, CURRENCY_SYMBOL, MAGNITUDE_MULTIPLIER_DISPLAY, RANK_ORDER_NUM, 
    ACTV_FLAG, CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   ('JPY', 'Yen', '¥', 3, 38, 
    'A', TO_DATE('07/18/2023 17:26:23', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', TO_DATE('07/18/2023 17:26:23', 'MM/DD/YYYY HH24:MI:SS'), 'silpa');
Insert into R360_USER_PREF.R360_APP_CURRENCY
   (CURRENCY_CD, CURRENCY_NAME, CURRENCY_SYMBOL, MAGNITUDE_MULTIPLIER_DISPLAY, RANK_ORDER_NUM, 
    ACTV_FLAG, CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   ('AED', 'UAE Dirham', 'د.إ', 0, 39, 
    'A', TO_DATE('07/18/2023 17:26:23', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', TO_DATE('07/18/2023 17:26:23', 'MM/DD/YYYY HH24:MI:SS'), 'silpa');
Insert into R360_USER_PREF.R360_APP_CURRENCY
   (CURRENCY_CD, CURRENCY_NAME, CURRENCY_SYMBOL, MAGNITUDE_MULTIPLIER_DISPLAY, RANK_ORDER_NUM, 
    ACTV_FLAG, CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   ('MYR', 'Malaysian Ringgit', 'RM', 0, 40, 
    'A', TO_DATE('07/18/2023 17:26:23', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', TO_DATE('07/18/2023 17:26:23', 'MM/DD/YYYY HH24:MI:SS'), 'silpa');
Insert into R360_USER_PREF.R360_APP_CURRENCY
   (CURRENCY_CD, CURRENCY_NAME, CURRENCY_SYMBOL, MAGNITUDE_MULTIPLIER_DISPLAY, RANK_ORDER_NUM, 
    ACTV_FLAG, CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   ('CZK', 'Czech Koruna', 'Kč', 0, 41, 
    'A', TO_DATE('07/18/2023 17:26:23', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', TO_DATE('07/18/2023 17:26:23', 'MM/DD/YYYY HH24:MI:SS'), 'silpa');
Insert into R360_USER_PREF.R360_APP_CURRENCY
   (CURRENCY_CD, CURRENCY_NAME, CURRENCY_SYMBOL, MAGNITUDE_MULTIPLIER_DISPLAY, RANK_ORDER_NUM, 
    ACTV_FLAG, CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   ('EGP', 'Egyptian Pound', '£', 0, 42, 
    'A', TO_DATE('07/18/2023 17:26:23', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', TO_DATE('07/18/2023 17:26:23', 'MM/DD/YYYY HH24:MI:SS'), 'silpa');
Insert into R360_USER_PREF.R360_APP_CURRENCY
   (CURRENCY_CD, CURRENCY_NAME, CURRENCY_SYMBOL, MAGNITUDE_MULTIPLIER_DISPLAY, RANK_ORDER_NUM, 
    ACTV_FLAG, CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   ('PLN', 'Zloty', 'zł', 0, 43, 
    'A', TO_DATE('07/18/2023 17:26:23', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', TO_DATE('07/18/2023 17:26:23', 'MM/DD/YYYY HH24:MI:SS'), 'silpa');
Insert into R360_USER_PREF.R360_APP_CURRENCY
   (CURRENCY_CD, CURRENCY_NAME, CURRENCY_SYMBOL, MAGNITUDE_MULTIPLIER_DISPLAY, RANK_ORDER_NUM, 
    ACTV_FLAG, CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   ('MXN', 'Mexican Peso', '$', 0, 44, 
    'A', TO_DATE('07/18/2023 17:26:23', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', TO_DATE('07/18/2023 17:26:23', 'MM/DD/YYYY HH24:MI:SS'), 'silpa');
Insert into R360_USER_PREF.R360_APP_CURRENCY
   (CURRENCY_CD, CURRENCY_NAME, CURRENCY_SYMBOL, MAGNITUDE_MULTIPLIER_DISPLAY, RANK_ORDER_NUM, 
    ACTV_FLAG, CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   ('MGA', 'Malagasy Ariary', 'Ar', 3, 45, 
    'A', TO_DATE('07/18/2023 17:26:23', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', TO_DATE('07/18/2023 17:26:23', 'MM/DD/YYYY HH24:MI:SS'), 'silpa');
Insert into R360_USER_PREF.R360_APP_CURRENCY
   (CURRENCY_CD, CURRENCY_NAME, CURRENCY_SYMBOL, MAGNITUDE_MULTIPLIER_DISPLAY, RANK_ORDER_NUM, 
    ACTV_FLAG, CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   ('TRY', 'Turkish Lira', 'YTL', 0, 46, 
    'A', TO_DATE('07/18/2023 17:26:23', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', TO_DATE('07/18/2023 17:26:23', 'MM/DD/YYYY HH24:MI:SS'), 'silpa');
Insert into R360_USER_PREF.R360_APP_CURRENCY
   (CURRENCY_CD, CURRENCY_NAME, MAGNITUDE_MULTIPLIER_DISPLAY, RANK_ORDER_NUM, ACTV_FLAG, 
    CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   ('CLF', 'Unidades de fomento', 0, 47, 'A', 
    TO_DATE('07/18/2023 17:26:23', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', TO_DATE('07/18/2023 17:26:23', 'MM/DD/YYYY HH24:MI:SS'), 'silpa');
Insert into R360_USER_PREF.R360_APP_CURRENCY
   (CURRENCY_CD, CURRENCY_NAME, CURRENCY_SYMBOL, MAGNITUDE_MULTIPLIER_DISPLAY, RANK_ORDER_NUM, 
    ACTV_FLAG, CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   ('NIO', 'Cordoba Oro', 'C$', 0, 49, 
    'A', TO_DATE('07/18/2023 17:26:23', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', TO_DATE('07/18/2023 17:26:23', 'MM/DD/YYYY HH24:MI:SS'), 'silpa');
Insert into R360_USER_PREF.R360_APP_CURRENCY
   (CURRENCY_CD, CURRENCY_NAME, CURRENCY_SYMBOL, MAGNITUDE_MULTIPLIER_DISPLAY, RANK_ORDER_NUM, 
    ACTV_FLAG, CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   ('TJS', 'Somoni', 'ЅМ', 0, 50, 
    'A', TO_DATE('07/18/2023 17:26:23', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', TO_DATE('07/18/2023 17:26:23', 'MM/DD/YYYY HH24:MI:SS'), 'silpa');
Insert into R360_USER_PREF.R360_APP_CURRENCY
   (CURRENCY_CD, CURRENCY_NAME, CURRENCY_SYMBOL, MAGNITUDE_MULTIPLIER_DISPLAY, RANK_ORDER_NUM, 
    ACTV_FLAG, CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   ('RON', 'New Leu', 'lei', 0, 51, 
    'A', TO_DATE('07/18/2023 17:26:23', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', TO_DATE('07/18/2023 17:26:23', 'MM/DD/YYYY HH24:MI:SS'), 'silpa');
Insert into R360_USER_PREF.R360_APP_CURRENCY
   (CURRENCY_CD, CURRENCY_NAME, CURRENCY_SYMBOL, MAGNITUDE_MULTIPLIER_DISPLAY, RANK_ORDER_NUM, 
    ACTV_FLAG, CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   ('ALL', 'Lek', 'L', 0, 52, 
    'A', TO_DATE('07/18/2023 17:26:23', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', TO_DATE('07/18/2023 17:26:23', 'MM/DD/YYYY HH24:MI:SS'), 'silpa');
Insert into R360_USER_PREF.R360_APP_CURRENCY
   (CURRENCY_CD, CURRENCY_NAME, CURRENCY_SYMBOL, MAGNITUDE_MULTIPLIER_DISPLAY, RANK_ORDER_NUM, 
    ACTV_FLAG, CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   ('ARS', 'Argentine Peso', '$', 0, 53, 
    'A', TO_DATE('07/18/2023 17:26:23', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', TO_DATE('07/18/2023 17:26:23', 'MM/DD/YYYY HH24:MI:SS'), 'silpa');
Insert into R360_USER_PREF.R360_APP_CURRENCY
   (CURRENCY_CD, CURRENCY_NAME, CURRENCY_SYMBOL, MAGNITUDE_MULTIPLIER_DISPLAY, RANK_ORDER_NUM, 
    ACTV_FLAG, CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   ('BHD', 'Bahraini Dinar', '.د.ب', 0, 61, 
    'A', TO_DATE('07/18/2023 17:26:23', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', TO_DATE('07/18/2023 17:26:23', 'MM/DD/YYYY HH24:MI:SS'), 'silpa');
Insert into R360_USER_PREF.R360_APP_CURRENCY
   (CURRENCY_CD, CURRENCY_NAME, CURRENCY_SYMBOL, MAGNITUDE_MULTIPLIER_DISPLAY, RANK_ORDER_NUM, 
    ACTV_FLAG, CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   ('BND', 'Brunei Dollar', '$', 0, 62, 
    'A', TO_DATE('07/18/2023 17:26:23', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', TO_DATE('07/18/2023 17:26:23', 'MM/DD/YYYY HH24:MI:SS'), 'silpa');
Insert into R360_USER_PREF.R360_APP_CURRENCY
   (CURRENCY_CD, CURRENCY_NAME, CURRENCY_SYMBOL, MAGNITUDE_MULTIPLIER_DISPLAY, RANK_ORDER_NUM, 
    ACTV_FLAG, CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   ('BSD', 'Bahamian Dollar', '$', 0, 63, 
    'A', TO_DATE('07/18/2023 17:26:23', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', TO_DATE('07/18/2023 17:26:23', 'MM/DD/YYYY HH24:MI:SS'), 'silpa');
Insert into R360_USER_PREF.R360_APP_CURRENCY
   (CURRENCY_CD, CURRENCY_NAME, CURRENCY_SYMBOL, MAGNITUDE_MULTIPLIER_DISPLAY, RANK_ORDER_NUM, 
    ACTV_FLAG, CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   ('BZD', 'Belize Dollar', '$', 0, 64, 
    'A', TO_DATE('07/18/2023 17:26:24', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', TO_DATE('07/18/2023 17:26:24', 'MM/DD/YYYY HH24:MI:SS'), 'silpa');
Insert into R360_USER_PREF.R360_APP_CURRENCY
   (CURRENCY_CD, CURRENCY_NAME, CURRENCY_SYMBOL, MAGNITUDE_MULTIPLIER_DISPLAY, RANK_ORDER_NUM, 
    ACTV_FLAG, CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   ('COP', 'Colombian Peso', '$', 3, 65, 
    'A', TO_DATE('07/18/2023 17:26:24', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', TO_DATE('07/18/2023 17:26:24', 'MM/DD/YYYY HH24:MI:SS'), 'silpa');
Insert into R360_USER_PREF.R360_APP_CURRENCY
   (CURRENCY_CD, CURRENCY_NAME, CURRENCY_SYMBOL, MAGNITUDE_MULTIPLIER_DISPLAY, RANK_ORDER_NUM, 
    ACTV_FLAG, CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   ('DOP', 'Dominican Peso', '$', 0, 66, 
    'A', TO_DATE('07/18/2023 17:26:24', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', TO_DATE('07/18/2023 17:26:24', 'MM/DD/YYYY HH24:MI:SS'), 'silpa');
Insert into R360_USER_PREF.R360_APP_CURRENCY
   (CURRENCY_CD, CURRENCY_NAME, CURRENCY_SYMBOL, MAGNITUDE_MULTIPLIER_DISPLAY, RANK_ORDER_NUM, 
    ACTV_FLAG, CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   ('SRD', 'Surinam Dollar', '$', 0, 67, 
    'A', TO_DATE('07/18/2023 17:26:24', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', TO_DATE('07/18/2023 17:26:24', 'MM/DD/YYYY HH24:MI:SS'), 'silpa');
Insert into R360_USER_PREF.R360_APP_CURRENCY
   (CURRENCY_CD, CURRENCY_NAME, CURRENCY_SYMBOL, MAGNITUDE_MULTIPLIER_DISPLAY, RANK_ORDER_NUM, 
    ACTV_FLAG, CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   ('BDT', 'Taka', '৳', 0, 68, 
    'A', TO_DATE('07/18/2023 17:26:24', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', TO_DATE('07/18/2023 17:26:24', 'MM/DD/YYYY HH24:MI:SS'), 'silpa');
Insert into R360_USER_PREF.R360_APP_CURRENCY
   (CURRENCY_CD, CURRENCY_NAME, CURRENCY_SYMBOL, MAGNITUDE_MULTIPLIER_DISPLAY, RANK_ORDER_NUM, 
    ACTV_FLAG, CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   ('BIF', 'Burundi Franc', 'Fr', 3, 69, 
    'A', TO_DATE('07/18/2023 17:26:24', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', TO_DATE('07/18/2023 17:26:24', 'MM/DD/YYYY HH24:MI:SS'), 'silpa');
Insert into R360_USER_PREF.R360_APP_CURRENCY
   (CURRENCY_CD, CURRENCY_NAME, CURRENCY_SYMBOL, MAGNITUDE_MULTIPLIER_DISPLAY, RANK_ORDER_NUM, 
    ACTV_FLAG, CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   ('BMD', 'Bermudian Dollar', '$', 0, 70, 
    'A', TO_DATE('07/18/2023 17:26:24', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', TO_DATE('07/18/2023 17:26:24', 'MM/DD/YYYY HH24:MI:SS'), 'silpa');
Insert into R360_USER_PREF.R360_APP_CURRENCY
   (CURRENCY_CD, CURRENCY_NAME, CURRENCY_SYMBOL, MAGNITUDE_MULTIPLIER_DISPLAY, RANK_ORDER_NUM, 
    ACTV_FLAG, CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   ('BOB', 'Boliviano', 'Bs.', 0, 71, 
    'A', TO_DATE('07/18/2023 17:26:24', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', TO_DATE('07/18/2023 17:26:24', 'MM/DD/YYYY HH24:MI:SS'), 'silpa');
Insert into R360_USER_PREF.R360_APP_CURRENCY
   (CURRENCY_CD, CURRENCY_NAME, CURRENCY_SYMBOL, MAGNITUDE_MULTIPLIER_DISPLAY, RANK_ORDER_NUM, 
    ACTV_FLAG, CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   ('BRL', 'Brazilian Real', 'R$', 0, 72, 
    'A', TO_DATE('07/18/2023 17:26:24', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', TO_DATE('07/18/2023 17:26:24', 'MM/DD/YYYY HH24:MI:SS'), 'silpa');
Insert into R360_USER_PREF.R360_APP_CURRENCY
   (CURRENCY_CD, CURRENCY_NAME, CURRENCY_SYMBOL, MAGNITUDE_MULTIPLIER_DISPLAY, RANK_ORDER_NUM, 
    ACTV_FLAG, CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   ('BTN', 'Ngultrum', 'Nu.', 0, 73, 
    'A', TO_DATE('07/18/2023 17:26:24', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', TO_DATE('07/18/2023 17:26:24', 'MM/DD/YYYY HH24:MI:SS'), 'silpa');
Insert into R360_USER_PREF.R360_APP_CURRENCY
   (CURRENCY_CD, CURRENCY_NAME, CURRENCY_SYMBOL, MAGNITUDE_MULTIPLIER_DISPLAY, RANK_ORDER_NUM, 
    ACTV_FLAG, CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   ('BWP', 'Pula', 'P', 0, 74, 
    'A', TO_DATE('07/18/2023 17:26:24', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', TO_DATE('07/18/2023 17:26:24', 'MM/DD/YYYY HH24:MI:SS'), 'silpa');
Insert into R360_USER_PREF.R360_APP_CURRENCY
   (CURRENCY_CD, CURRENCY_NAME, CURRENCY_SYMBOL, MAGNITUDE_MULTIPLIER_DISPLAY, RANK_ORDER_NUM, 
    ACTV_FLAG, CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   ('CDF', 'Congolese Franc', 'Fr', 3, 75, 
    'A', TO_DATE('07/18/2023 17:26:24', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', TO_DATE('07/18/2023 17:26:24', 'MM/DD/YYYY HH24:MI:SS'), 'silpa');
Insert into R360_USER_PREF.R360_APP_CURRENCY
   (CURRENCY_CD, CURRENCY_NAME, CURRENCY_SYMBOL, MAGNITUDE_MULTIPLIER_DISPLAY, RANK_ORDER_NUM, 
    ACTV_FLAG, CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   ('RUB', 'Russian Ruble', 'R', 0, 76, 
    'A', TO_DATE('07/18/2023 17:26:24', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', TO_DATE('07/18/2023 17:26:24', 'MM/DD/YYYY HH24:MI:SS'), 'silpa');
Insert into R360_USER_PREF.R360_APP_CURRENCY
   (CURRENCY_CD, CURRENCY_NAME, CURRENCY_SYMBOL, MAGNITUDE_MULTIPLIER_DISPLAY, RANK_ORDER_NUM, 
    ACTV_FLAG, CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   ('SAR', 'Saudi Riyal', 'ر.س', 0, 77, 
    'A', TO_DATE('07/18/2023 17:26:24', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', TO_DATE('07/18/2023 17:26:24', 'MM/DD/YYYY HH24:MI:SS'), 'silpa');
Insert into R360_USER_PREF.R360_APP_CURRENCY
   (CURRENCY_CD, CURRENCY_NAME, CURRENCY_SYMBOL, MAGNITUDE_MULTIPLIER_DISPLAY, RANK_ORDER_NUM, 
    ACTV_FLAG, CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   ('SBD', 'Solomon Islands Dollar', '$', 0, 78, 
    'A', TO_DATE('07/18/2023 17:26:24', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', TO_DATE('07/18/2023 17:26:24', 'MM/DD/YYYY HH24:MI:SS'), 'silpa');
Insert into R360_USER_PREF.R360_APP_CURRENCY
   (CURRENCY_CD, CURRENCY_NAME, CURRENCY_SYMBOL, MAGNITUDE_MULTIPLIER_DISPLAY, RANK_ORDER_NUM, 
    ACTV_FLAG, CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   ('SHP', 'Saint Helena Pound', '£', 0, 79, 
    'A', TO_DATE('07/18/2023 17:26:24', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', TO_DATE('07/18/2023 17:26:24', 'MM/DD/YYYY HH24:MI:SS'), 'silpa');
Insert into R360_USER_PREF.R360_APP_CURRENCY
   (CURRENCY_CD, CURRENCY_NAME, CURRENCY_SYMBOL, MAGNITUDE_MULTIPLIER_DISPLAY, RANK_ORDER_NUM, 
    ACTV_FLAG, CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   ('XCD', 'East Caribbean Dollar', '$', 0, 80, 
    'A', TO_DATE('07/18/2023 17:26:24', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', TO_DATE('07/18/2023 17:26:24', 'MM/DD/YYYY HH24:MI:SS'), 'silpa');
Insert into R360_USER_PREF.R360_APP_CURRENCY
   (CURRENCY_CD, CURRENCY_NAME, CURRENCY_SYMBOL, MAGNITUDE_MULTIPLIER_DISPLAY, RANK_ORDER_NUM, 
    ACTV_FLAG, CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   ('IQD', 'Iraqi Dinar', 'ع.د', 3, 81, 
    'A', TO_DATE('07/18/2023 17:26:24', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', TO_DATE('07/18/2023 17:26:24', 'MM/DD/YYYY HH24:MI:SS'), 'silpa');
Insert into R360_USER_PREF.R360_APP_CURRENCY
   (CURRENCY_CD, CURRENCY_NAME, CURRENCY_SYMBOL, MAGNITUDE_MULTIPLIER_DISPLAY, RANK_ORDER_NUM, 
    ACTV_FLAG, CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   ('ISK', 'Iceland Krona', 'kr', 3, 82, 
    'A', TO_DATE('07/18/2023 17:26:24', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', TO_DATE('07/18/2023 17:26:24', 'MM/DD/YYYY HH24:MI:SS'), 'silpa');
Insert into R360_USER_PREF.R360_APP_CURRENCY
   (CURRENCY_CD, CURRENCY_NAME, CURRENCY_SYMBOL, MAGNITUDE_MULTIPLIER_DISPLAY, RANK_ORDER_NUM, 
    ACTV_FLAG, CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   ('JMD', 'Jamaican Dollar', '$', 0, 83, 
    'A', TO_DATE('07/18/2023 17:26:24', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', TO_DATE('07/18/2023 17:26:24', 'MM/DD/YYYY HH24:MI:SS'), 'silpa');
Insert into R360_USER_PREF.R360_APP_CURRENCY
   (CURRENCY_CD, CURRENCY_NAME, CURRENCY_SYMBOL, MAGNITUDE_MULTIPLIER_DISPLAY, RANK_ORDER_NUM, 
    ACTV_FLAG, CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   ('KES', 'Kenyan Shilling', 'Sh', 0, 84, 
    'A', TO_DATE('07/18/2023 17:26:24', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', TO_DATE('07/18/2023 17:26:24', 'MM/DD/YYYY HH24:MI:SS'), 'silpa');
Insert into R360_USER_PREF.R360_APP_CURRENCY
   (CURRENCY_CD, CURRENCY_NAME, CURRENCY_SYMBOL, MAGNITUDE_MULTIPLIER_DISPLAY, RANK_ORDER_NUM, 
    ACTV_FLAG, CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   ('KGS', 'Som', 'лв', 0, 85, 
    'A', TO_DATE('07/18/2023 17:26:24', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', TO_DATE('07/18/2023 17:26:24', 'MM/DD/YYYY HH24:MI:SS'), 'silpa');
Insert into R360_USER_PREF.R360_APP_CURRENCY
   (CURRENCY_CD, CURRENCY_NAME, CURRENCY_SYMBOL, MAGNITUDE_MULTIPLIER_DISPLAY, RANK_ORDER_NUM, 
    ACTV_FLAG, CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   ('KHR', 'Riel', '៛', 3, 86, 
    'A', TO_DATE('07/18/2023 17:26:24', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', TO_DATE('07/18/2023 17:26:24', 'MM/DD/YYYY HH24:MI:SS'), 'silpa');
Insert into R360_USER_PREF.R360_APP_CURRENCY
   (CURRENCY_CD, CURRENCY_NAME, CURRENCY_SYMBOL, MAGNITUDE_MULTIPLIER_DISPLAY, RANK_ORDER_NUM, 
    ACTV_FLAG, CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   ('KPW', 'North Korean Won', '₩', 0, 87, 
    'A', TO_DATE('07/18/2023 17:26:24', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', TO_DATE('07/18/2023 17:26:24', 'MM/DD/YYYY HH24:MI:SS'), 'silpa');
Insert into R360_USER_PREF.R360_APP_CURRENCY
   (CURRENCY_CD, CURRENCY_NAME, CURRENCY_SYMBOL, MAGNITUDE_MULTIPLIER_DISPLAY, RANK_ORDER_NUM, 
    ACTV_FLAG, CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   ('KRW', 'Won', '₩', 3, 88, 
    'A', TO_DATE('07/18/2023 17:26:24', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', TO_DATE('07/18/2023 17:26:24', 'MM/DD/YYYY HH24:MI:SS'), 'silpa');
Insert into R360_USER_PREF.R360_APP_CURRENCY
   (CURRENCY_CD, CURRENCY_NAME, CURRENCY_SYMBOL, MAGNITUDE_MULTIPLIER_DISPLAY, RANK_ORDER_NUM, 
    ACTV_FLAG, CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   ('KWD', 'Kuwaiti Dinar', 'د.ك', 0, 89, 
    'A', TO_DATE('07/18/2023 17:26:24', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', TO_DATE('07/18/2023 17:26:24', 'MM/DD/YYYY HH24:MI:SS'), 'silpa');
Insert into R360_USER_PREF.R360_APP_CURRENCY
   (CURRENCY_CD, CURRENCY_NAME, CURRENCY_SYMBOL, MAGNITUDE_MULTIPLIER_DISPLAY, RANK_ORDER_NUM, 
    ACTV_FLAG, CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   ('KZT', 'Tenge', 'KZT', 0, 90, 
    'A', TO_DATE('07/18/2023 17:26:24', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', TO_DATE('07/18/2023 17:26:24', 'MM/DD/YYYY HH24:MI:SS'), 'silpa');
Insert into R360_USER_PREF.R360_APP_CURRENCY
   (CURRENCY_CD, CURRENCY_NAME, CURRENCY_SYMBOL, MAGNITUDE_MULTIPLIER_DISPLAY, RANK_ORDER_NUM, 
    ACTV_FLAG, CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   ('LAK', 'Kip', '₭', 3, 91, 
    'A', TO_DATE('07/18/2023 17:26:24', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', TO_DATE('07/18/2023 17:26:24', 'MM/DD/YYYY HH24:MI:SS'), 'silpa');
Insert into R360_USER_PREF.R360_APP_CURRENCY
   (CURRENCY_CD, CURRENCY_NAME, CURRENCY_SYMBOL, MAGNITUDE_MULTIPLIER_DISPLAY, RANK_ORDER_NUM, 
    ACTV_FLAG, CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   ('LBP', 'Lebanese Pound', 'ل.ل', 3, 92, 
    'A', TO_DATE('07/18/2023 17:26:24', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', TO_DATE('07/18/2023 17:26:24', 'MM/DD/YYYY HH24:MI:SS'), 'silpa');
Insert into R360_USER_PREF.R360_APP_CURRENCY
   (CURRENCY_CD, CURRENCY_NAME, CURRENCY_SYMBOL, MAGNITUDE_MULTIPLIER_DISPLAY, RANK_ORDER_NUM, 
    ACTV_FLAG, CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   ('LKR', 'Sri Lanka Rupee', 'Rs', 0, 93, 
    'A', TO_DATE('07/18/2023 17:26:24', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', TO_DATE('07/18/2023 17:26:24', 'MM/DD/YYYY HH24:MI:SS'), 'silpa');
Insert into R360_USER_PREF.R360_APP_CURRENCY
   (CURRENCY_CD, CURRENCY_NAME, CURRENCY_SYMBOL, MAGNITUDE_MULTIPLIER_DISPLAY, RANK_ORDER_NUM, 
    ACTV_FLAG, CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   ('LSL', 'Loti', 'L', 0, 94, 
    'A', TO_DATE('07/18/2023 17:26:24', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', TO_DATE('07/18/2023 17:26:24', 'MM/DD/YYYY HH24:MI:SS'), 'silpa');
Insert into R360_USER_PREF.R360_APP_CURRENCY
   (CURRENCY_CD, CURRENCY_NAME, CURRENCY_SYMBOL, MAGNITUDE_MULTIPLIER_DISPLAY, RANK_ORDER_NUM, 
    ACTV_FLAG, CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   ('LYD', 'Libyan Dinar', 'ل.د', 0, 95, 
    'A', TO_DATE('07/18/2023 17:26:24', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', TO_DATE('07/18/2023 17:26:24', 'MM/DD/YYYY HH24:MI:SS'), 'silpa');
Insert into R360_USER_PREF.R360_APP_CURRENCY
   (CURRENCY_CD, CURRENCY_NAME, CURRENCY_SYMBOL, MAGNITUDE_MULTIPLIER_DISPLAY, RANK_ORDER_NUM, 
    ACTV_FLAG, CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   ('MAD', 'Moroccan Dirham', 'د. م.', 0, 96, 
    'A', TO_DATE('07/18/2023 17:26:24', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', TO_DATE('07/18/2023 17:26:24', 'MM/DD/YYYY HH24:MI:SS'), 'silpa');
Insert into R360_USER_PREF.R360_APP_CURRENCY
   (CURRENCY_CD, CURRENCY_NAME, CURRENCY_SYMBOL, MAGNITUDE_MULTIPLIER_DISPLAY, RANK_ORDER_NUM, 
    ACTV_FLAG, CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   ('MKD', 'Denar', 'ден', 0, 97, 
    'A', TO_DATE('07/18/2023 17:26:24', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', TO_DATE('07/18/2023 17:26:24', 'MM/DD/YYYY HH24:MI:SS'), 'silpa');
Insert into R360_USER_PREF.R360_APP_CURRENCY
   (CURRENCY_CD, CURRENCY_NAME, CURRENCY_SYMBOL, MAGNITUDE_MULTIPLIER_DISPLAY, RANK_ORDER_NUM, 
    ACTV_FLAG, CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   ('MMK', 'Kyat', 'Ks', 3, 98, 
    'A', TO_DATE('07/18/2023 17:26:24', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', TO_DATE('07/18/2023 17:26:24', 'MM/DD/YYYY HH24:MI:SS'), 'silpa');
Insert into R360_USER_PREF.R360_APP_CURRENCY
   (CURRENCY_CD, CURRENCY_NAME, CURRENCY_SYMBOL, MAGNITUDE_MULTIPLIER_DISPLAY, RANK_ORDER_NUM, 
    ACTV_FLAG, CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   ('MNT', 'Tugrik', '₮', 3, 99, 
    'A', TO_DATE('07/18/2023 17:26:25', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', TO_DATE('07/18/2023 17:26:25', 'MM/DD/YYYY HH24:MI:SS'), 'silpa');
Insert into R360_USER_PREF.R360_APP_CURRENCY
   (CURRENCY_CD, CURRENCY_NAME, CURRENCY_SYMBOL, MAGNITUDE_MULTIPLIER_DISPLAY, RANK_ORDER_NUM, 
    ACTV_FLAG, CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   ('MOP', 'Pataca', 'P', 0, 100, 
    'A', TO_DATE('07/18/2023 17:26:25', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', TO_DATE('07/18/2023 17:26:25', 'MM/DD/YYYY HH24:MI:SS'), 'silpa');
Insert into R360_USER_PREF.R360_APP_CURRENCY
   (CURRENCY_CD, CURRENCY_NAME, CURRENCY_SYMBOL, MAGNITUDE_MULTIPLIER_DISPLAY, RANK_ORDER_NUM, 
    ACTV_FLAG, CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   ('MUR', 'Mauritius Rupee', '₨', 0, 101, 
    'A', TO_DATE('07/18/2023 17:26:25', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', TO_DATE('07/18/2023 17:26:25', 'MM/DD/YYYY HH24:MI:SS'), 'silpa');
Insert into R360_USER_PREF.R360_APP_CURRENCY
   (CURRENCY_CD, CURRENCY_NAME, CURRENCY_SYMBOL, MAGNITUDE_MULTIPLIER_DISPLAY, RANK_ORDER_NUM, 
    ACTV_FLAG, CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   ('MWK', 'Kwacha', 'MK', 0, 102, 
    'A', TO_DATE('07/18/2023 17:26:25', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', TO_DATE('07/18/2023 17:26:25', 'MM/DD/YYYY HH24:MI:SS'), 'silpa');
Insert into R360_USER_PREF.R360_APP_CURRENCY
   (CURRENCY_CD, CURRENCY_NAME, CURRENCY_SYMBOL, MAGNITUDE_MULTIPLIER_DISPLAY, RANK_ORDER_NUM, 
    ACTV_FLAG, CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   ('NAD', 'Namibia Dollar', '$', 0, 103, 
    'A', TO_DATE('07/18/2023 17:26:25', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', TO_DATE('07/18/2023 17:26:25', 'MM/DD/YYYY HH24:MI:SS'), 'silpa');
Insert into R360_USER_PREF.R360_APP_CURRENCY
   (CURRENCY_CD, CURRENCY_NAME, CURRENCY_SYMBOL, MAGNITUDE_MULTIPLIER_DISPLAY, RANK_ORDER_NUM, 
    ACTV_FLAG, CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   ('NGN', 'Naira', '₦', 0, 104, 
    'A', TO_DATE('07/18/2023 17:26:25', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', TO_DATE('07/18/2023 17:26:25', 'MM/DD/YYYY HH24:MI:SS'), 'silpa');
Insert into R360_USER_PREF.R360_APP_CURRENCY
   (CURRENCY_CD, CURRENCY_NAME, CURRENCY_SYMBOL, MAGNITUDE_MULTIPLIER_DISPLAY, RANK_ORDER_NUM, 
    ACTV_FLAG, CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   ('AZN', 'Azerbaijanian Manat', 'AZN', 0, 105, 
    'A', TO_DATE('07/18/2023 17:26:25', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', TO_DATE('07/18/2023 17:26:25', 'MM/DD/YYYY HH24:MI:SS'), 'silpa');
Insert into R360_USER_PREF.R360_APP_CURRENCY
   (CURRENCY_CD, CURRENCY_NAME, CURRENCY_SYMBOL, MAGNITUDE_MULTIPLIER_DISPLAY, RANK_ORDER_NUM, 
    ACTV_FLAG, CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   ('NOK', 'Norwegian Krone', 'kr', 0, 106, 
    'A', TO_DATE('07/18/2023 17:26:25', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', TO_DATE('07/18/2023 17:26:25', 'MM/DD/YYYY HH24:MI:SS'), 'silpa');
Insert into R360_USER_PREF.R360_APP_CURRENCY
   (CURRENCY_CD, CURRENCY_NAME, CURRENCY_SYMBOL, MAGNITUDE_MULTIPLIER_DISPLAY, RANK_ORDER_NUM, 
    ACTV_FLAG, CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   ('NPR', 'Nepalese Rupee', '₨', 0, 107, 
    'A', TO_DATE('07/18/2023 17:26:25', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', TO_DATE('07/18/2023 17:26:25', 'MM/DD/YYYY HH24:MI:SS'), 'silpa');
Insert into R360_USER_PREF.R360_APP_CURRENCY
   (CURRENCY_CD, CURRENCY_NAME, CURRENCY_SYMBOL, MAGNITUDE_MULTIPLIER_DISPLAY, RANK_ORDER_NUM, 
    ACTV_FLAG, CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   ('NZD', 'New Zealand Dollar', '$', 0, 108, 
    'A', TO_DATE('07/18/2023 17:26:25', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', TO_DATE('07/18/2023 17:26:25', 'MM/DD/YYYY HH24:MI:SS'), 'silpa');
Insert into R360_USER_PREF.R360_APP_CURRENCY
   (CURRENCY_CD, CURRENCY_NAME, CURRENCY_SYMBOL, MAGNITUDE_MULTIPLIER_DISPLAY, RANK_ORDER_NUM, 
    ACTV_FLAG, CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   ('PAB', 'Balboa', 'B/.', 0, 109, 
    'A', TO_DATE('07/18/2023 17:26:25', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', TO_DATE('07/18/2023 17:26:25', 'MM/DD/YYYY HH24:MI:SS'), 'silpa');
Insert into R360_USER_PREF.R360_APP_CURRENCY
   (CURRENCY_CD, CURRENCY_NAME, CURRENCY_SYMBOL, MAGNITUDE_MULTIPLIER_DISPLAY, RANK_ORDER_NUM, 
    ACTV_FLAG, CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   ('PEN', 'Nuevo Sol', 'S/.', 0, 110, 
    'A', TO_DATE('07/18/2023 17:26:25', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', TO_DATE('07/18/2023 17:26:25', 'MM/DD/YYYY HH24:MI:SS'), 'silpa');
Insert into R360_USER_PREF.R360_APP_CURRENCY
   (CURRENCY_CD, CURRENCY_NAME, CURRENCY_SYMBOL, MAGNITUDE_MULTIPLIER_DISPLAY, RANK_ORDER_NUM, 
    ACTV_FLAG, CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   ('PKR', 'Pakistan Rupee', '₨', 0, 111, 
    'A', TO_DATE('07/18/2023 17:26:25', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', TO_DATE('07/18/2023 17:26:25', 'MM/DD/YYYY HH24:MI:SS'), 'silpa');
Insert into R360_USER_PREF.R360_APP_CURRENCY
   (CURRENCY_CD, CURRENCY_NAME, CURRENCY_SYMBOL, MAGNITUDE_MULTIPLIER_DISPLAY, RANK_ORDER_NUM, 
    ACTV_FLAG, CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   ('CLP', 'Chilean Peso', '$', 3, 112, 
    'A', TO_DATE('07/18/2023 17:26:25', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', TO_DATE('07/18/2023 17:26:25', 'MM/DD/YYYY HH24:MI:SS'), 'silpa');
Insert into R360_USER_PREF.R360_APP_CURRENCY
   (CURRENCY_CD, CURRENCY_NAME, CURRENCY_SYMBOL, MAGNITUDE_MULTIPLIER_DISPLAY, RANK_ORDER_NUM, 
    ACTV_FLAG, CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   ('INR', 'Indian Rupee', '₹', 0, 113, 
    'A', TO_DATE('07/18/2023 17:26:25', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', TO_DATE('07/18/2023 17:26:25', 'MM/DD/YYYY HH24:MI:SS'), 'silpa');
Insert into R360_USER_PREF.R360_APP_CURRENCY
   (CURRENCY_CD, CURRENCY_NAME, CURRENCY_SYMBOL, MAGNITUDE_MULTIPLIER_DISPLAY, RANK_ORDER_NUM, 
    ACTV_FLAG, CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   ('ILS', 'New Israeli Sheqel', '₪', 0, 114, 
    'A', TO_DATE('07/18/2023 17:26:25', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', TO_DATE('07/18/2023 17:26:25', 'MM/DD/YYYY HH24:MI:SS'), 'silpa');
Insert into R360_USER_PREF.R360_APP_CURRENCY
   (CURRENCY_CD, CURRENCY_NAME, CURRENCY_SYMBOL, MAGNITUDE_MULTIPLIER_DISPLAY, RANK_ORDER_NUM, 
    ACTV_FLAG, CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   ('CHF', 'Swiss Franc', 'SFr.', 0, 115, 
    'A', TO_DATE('07/18/2023 17:26:25', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', TO_DATE('07/18/2023 17:26:25', 'MM/DD/YYYY HH24:MI:SS'), 'silpa');
Insert into R360_USER_PREF.R360_APP_CURRENCY
   (CURRENCY_CD, CURRENCY_NAME, CURRENCY_SYMBOL, MAGNITUDE_MULTIPLIER_DISPLAY, RANK_ORDER_NUM, 
    ACTV_FLAG, CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   ('GBP', 'Pound Sterling', '£', 0, 116, 
    'A', TO_DATE('07/18/2023 17:26:25', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', TO_DATE('07/18/2023 17:26:25', 'MM/DD/YYYY HH24:MI:SS'), 'silpa');
Insert into R360_USER_PREF.R360_APP_CURRENCY
   (CURRENCY_CD, CURRENCY_NAME, CURRENCY_SYMBOL, MAGNITUDE_MULTIPLIER_DISPLAY, RANK_ORDER_NUM, 
    ACTV_FLAG, CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   ('USD', 'US Dollar', '$', 0, 117, 
    'A', TO_DATE('07/18/2023 17:26:25', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', TO_DATE('07/18/2023 17:26:25', 'MM/DD/YYYY HH24:MI:SS'), 'silpa');
Insert into R360_USER_PREF.R360_APP_CURRENCY
   (CURRENCY_CD, CURRENCY_NAME, CURRENCY_SYMBOL, MAGNITUDE_MULTIPLIER_DISPLAY, RANK_ORDER_NUM, 
    ACTV_FLAG, CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   ('AMD', 'Armenian Dram', 'AMD', 0, 118, 
    'A', TO_DATE('07/18/2023 17:26:25', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', TO_DATE('07/18/2023 17:26:25', 'MM/DD/YYYY HH24:MI:SS'), 'silpa');
Insert into R360_USER_PREF.R360_APP_CURRENCY
   (CURRENCY_CD, CURRENCY_NAME, CURRENCY_SYMBOL, MAGNITUDE_MULTIPLIER_DISPLAY, RANK_ORDER_NUM, 
    ACTV_FLAG, CREATE_DTTM, CREATE_USER, UPDATE_DTTM, UPDATE_USER)
 Values
   ('ANG', 'Netherlands Antillian Guilder', 'ƒ', 0, 119, 
    'A', TO_DATE('07/18/2023 17:26:25', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', TO_DATE('07/18/2023 17:26:25', 'MM/DD/YYYY HH24:MI:SS'), 'silpa');
COMMIT;


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\USER_PROFILE-LOOKUP_23.09\user_profile_lookup\DML\R360_APP_LANGUAGE.sql

SET DEFINE OFF;
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, UPDATE_DTTM, 
    UPDATE_USER, RANK_ORDER_NUM, ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('zh-CN', 'Chinese (PRC)', TO_DATE('07/24/2023 16:58:02', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', TO_DATE('07/24/2023 16:58:13', 'MM/DD/YYYY HH24:MI:SS'), 
    'silpa', 2, 'Y', 'Chinese', 'ZN');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, UPDATE_DTTM, 
    UPDATE_USER, RANK_ORDER_NUM, ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('ja-JP', 'Japanese (Japan)', TO_DATE('07/24/2023 17:01:31', 'MM/DD/YYYY HH24:MI:SS'), 'slpa', TO_DATE('07/24/2023 17:01:36', 'MM/DD/YYYY HH24:MI:SS'), 
    'silpa', 3, 'Y', 'Japanese', 'JA');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, UPDATE_DTTM, 
    UPDATE_USER, RANK_ORDER_NUM, ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('es-HN', 'Spanish (Latin America)', TO_DATE('07/18/2023 16:46:30', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', TO_DATE('07/18/2023 16:46:30', 'MM/DD/YYYY HH24:MI:SS'), 
    'silpa', 4, 'Y', 'Spanish', 'ES');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, UPDATE_DTTM, 
    UPDATE_USER, RANK_ORDER_NUM, ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('pt-BR', 'Portuguese (Brazil)', TO_DATE('07/18/2023 16:46:32', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', TO_DATE('07/18/2023 16:46:32', 'MM/DD/YYYY HH24:MI:SS'), 
    'silpa', 5, 'Y', 'Portuguese', 'PT');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, RANK_ORDER_NUM, 
    ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('ar-SA', 'Arabic (Saudi Arabia)', TO_DATE('07/25/2023 15:18:23', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA_USER', 100, 
    'N', 'Arabic', 'AR');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, RANK_ORDER_NUM, 
    ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('bg-BG', 'Bulgarian (Bulgaria)', TO_DATE('07/25/2023 15:18:23', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA_USER', 100, 
    'N', 'Bulgarian', 'BG');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, RANK_ORDER_NUM, 
    ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('ca-ES', 'Catalan (Catalan)', TO_DATE('07/25/2023 15:18:23', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA_USER', 100, 
    'N', 'Catalan', 'CA');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, RANK_ORDER_NUM, 
    ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('zh-TW', 'Chinese (Taiwan)', TO_DATE('07/25/2023 15:18:24', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA_USER', 100, 
    'N', 'Chinese', 'ZH');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, RANK_ORDER_NUM, 
    ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('cs-CZ', 'Czech (Czech Republic)', TO_DATE('07/25/2023 15:18:24', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA_USER', 100, 
    'N', 'Czech', 'CS');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, RANK_ORDER_NUM, 
    ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('da-DK', 'Danish (Denmark)', TO_DATE('07/25/2023 15:18:24', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA_USER', 100, 
    'N', 'Danish', 'DA');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, RANK_ORDER_NUM, 
    ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('de-DE', 'German (Germany)', TO_DATE('07/25/2023 15:18:24', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA_USER', 100, 
    'N', 'German', 'DE');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, RANK_ORDER_NUM, 
    ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('el-GR', 'Greek (Greece)', TO_DATE('07/25/2023 15:18:24', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA_USER', 100, 
    'N', 'Greek', 'EL');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, RANK_ORDER_NUM, 
    ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('es-ES_tradnl', 'Spanish (Spain, Traditional Sort)', TO_DATE('07/25/2023 15:18:24', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA_USER', 100, 
    'N', 'Spanish', 'ES');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, RANK_ORDER_NUM, 
    ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('fi-FI', 'Finnish (Finland)', TO_DATE('07/25/2023 15:18:24', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA_USER', 100, 
    'N', 'Finnish', 'FI');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, RANK_ORDER_NUM, 
    ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('fr-FR', 'French (France)', TO_DATE('07/25/2023 15:18:25', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA_USER', 100, 
    'N', 'French', 'FR');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, RANK_ORDER_NUM, 
    ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('he-IL', 'Hebrew (Israel)', TO_DATE('07/25/2023 15:18:25', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA_USER', 100, 
    'N', 'Hebrew', 'HE');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, RANK_ORDER_NUM, 
    ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('hu-HU', 'Hungarian (Hungary)', TO_DATE('07/25/2023 15:18:25', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA_USER', 100, 
    'N', 'Hungarian', 'HU');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, RANK_ORDER_NUM, 
    ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('is-IS', 'Icelandic (Iceland)', TO_DATE('07/25/2023 15:18:25', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA_USER', 100, 
    'N', 'Icelandic', 'IS');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, RANK_ORDER_NUM, 
    ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('it-IT', 'Italian (Italy)', TO_DATE('07/25/2023 15:18:25', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA_USER', 100, 
    'N', 'Italian', 'IT');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, RANK_ORDER_NUM, 
    ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('ko-KR', 'Korean (Korea)', TO_DATE('07/25/2023 15:18:25', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA_USER', 100, 
    'N', 'Korean', 'KO');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, RANK_ORDER_NUM, 
    ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('nl-NL', 'Dutch (Netherlands)', TO_DATE('07/25/2023 15:18:25', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA_USER', 100, 
    'N', 'Dutch', 'NL');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, RANK_ORDER_NUM, 
    ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('nb-NO', 'Norwegian (Norway)', TO_DATE('07/25/2023 15:18:26', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA_USER', 100, 
    'N', 'Norwegian', 'NB');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, RANK_ORDER_NUM, 
    ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('pl-PL', 'Polish (Poland)', TO_DATE('07/25/2023 15:18:26', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA_USER', 100, 
    'N', 'Polish', 'PL');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, RANK_ORDER_NUM, 
    ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('rm-CH', 'Romansh (Switzerland)', TO_DATE('07/25/2023 15:18:26', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA_USER', 100, 
    'N', 'Romansh', 'RM');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, RANK_ORDER_NUM, 
    ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('ro-RO', 'Romanian (Romania)', TO_DATE('07/25/2023 15:18:26', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA_USER', 100, 
    'N', 'Romanian', 'RO');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, RANK_ORDER_NUM, 
    ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('ru-RU', 'Russian (Russia)', TO_DATE('07/25/2023 15:18:26', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA_USER', 100, 
    'N', 'Russian', 'RU');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, RANK_ORDER_NUM, 
    ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('hr-HR', 'Croatian (Croatia)', TO_DATE('07/25/2023 15:18:26', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA_USER', 100, 
    'N', 'Croatian', 'HR');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, RANK_ORDER_NUM, 
    ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('sk-SK', 'Slovak (Slovakia)', TO_DATE('07/25/2023 15:18:26', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA_USER', 100, 
    'N', 'Slovak', 'SK');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, RANK_ORDER_NUM, 
    ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('sq-AL', 'Albanian (Albania)', TO_DATE('07/25/2023 15:18:27', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA_USER', 100, 
    'N', 'Albanian', 'SQ');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, RANK_ORDER_NUM, 
    ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('sv-SE', 'Swedish (Sweden)', TO_DATE('07/25/2023 15:18:27', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA_USER', 100, 
    'N', 'Swedish', 'SV');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, RANK_ORDER_NUM, 
    ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('th-TH', 'Thai (Thailand)', TO_DATE('07/25/2023 15:18:27', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA_USER', 100, 
    'N', 'Thai', 'TH');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, RANK_ORDER_NUM, 
    ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('tr-TR', 'Turkish (Turkey)', TO_DATE('07/25/2023 15:18:27', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA_USER', 100, 
    'N', 'Turkish', 'TR');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, RANK_ORDER_NUM, 
    ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('ur-PK', 'Urdu (Pakistan)', TO_DATE('07/25/2023 15:18:27', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA_USER', 100, 
    'N', 'Urdu', 'UR');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, RANK_ORDER_NUM, 
    ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('id-ID', 'Indonesian (Indonesia)', TO_DATE('07/25/2023 15:18:27', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA_USER', 100, 
    'N', 'Indonesian', 'ID');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, RANK_ORDER_NUM, 
    ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('uk-UA', 'Ukrainian (Ukraine)', TO_DATE('07/25/2023 15:18:27', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA_USER', 100, 
    'N', 'Ukrainian', 'UK');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, RANK_ORDER_NUM, 
    ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('be-BY', 'Belarusian (Belarus)', TO_DATE('07/25/2023 15:18:28', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA_USER', 100, 
    'N', 'Belarusian', 'BE');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, RANK_ORDER_NUM, 
    ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('sl-SI', 'Slovenian (Slovenia)', TO_DATE('07/25/2023 15:18:28', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA_USER', 100, 
    'N', 'Slovenian', 'SL');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, RANK_ORDER_NUM, 
    ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('et-EE', 'Estonian (Estonia)', TO_DATE('07/25/2023 15:18:28', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA_USER', 100, 
    'N', 'Estonian', 'ET');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, RANK_ORDER_NUM, 
    ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('lv-LV', 'Latvian (Latvia)', TO_DATE('07/25/2023 15:18:28', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA_USER', 100, 
    'N', 'Latvian', 'LV');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, RANK_ORDER_NUM, 
    ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('lt-LT', 'Lithuanian (Lithuania)', TO_DATE('07/25/2023 15:18:28', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA_USER', 100, 
    'N', 'Lithuanian', 'LT');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, RANK_ORDER_NUM, 
    ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('tg-Cyrl-TJ', 'Tajik (Tajikistan)', TO_DATE('07/25/2023 15:18:28', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA_USER', 100, 
    'N', 'Tajik', 'TG');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, RANK_ORDER_NUM, 
    ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('fa-IR', 'Persian (Iran)', TO_DATE('07/25/2023 15:18:29', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA_USER', 100, 
    'N', 'Persian', 'FA');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, RANK_ORDER_NUM, 
    ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('vi-VN', 'Vietnamese (Vietnam)', TO_DATE('07/25/2023 15:18:29', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA_USER', 100, 
    'N', 'Vietnamese', 'VI');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, RANK_ORDER_NUM, 
    ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('hy-AM', 'Armenian (Armenia)', TO_DATE('07/25/2023 15:18:29', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA_USER', 100, 
    'N', 'Armenian', 'HY');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, RANK_ORDER_NUM, 
    ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('az-Latn-AZ', 'Azeri (Azerbaijan, Latin)', TO_DATE('07/25/2023 15:18:29', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA_USER', 100, 
    'N', 'Azeri', 'AZ');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, RANK_ORDER_NUM, 
    ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('eu-ES', 'Basque (Basque)', TO_DATE('07/25/2023 15:18:29', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA_USER', 100, 
    'N', 'Basque', 'EU');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, RANK_ORDER_NUM, 
    ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('wen-DE', 'Upper Sorbian (Germany)', TO_DATE('07/25/2023 15:18:29', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA_USER', 100, 
    'N', 'Upper Sorbian', 'WE');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, RANK_ORDER_NUM, 
    ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('mk-MK', 'Macedonian (Macedonia, FYROM)', TO_DATE('07/25/2023 15:18:29', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA_USER', 100, 
    'N', 'Macedonian', 'MK');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, RANK_ORDER_NUM, 
    ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('tn-ZA', 'Setswana/Tswana (South Africa)', TO_DATE('07/25/2023 15:18:30', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA_USER', 100, 
    'N', 'Setswana/Tswana', 'TN');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, RANK_ORDER_NUM, 
    ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('xh-ZA', 'Xhosa/isiXhosa (South Africa)', TO_DATE('07/25/2023 15:18:30', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA_USER', 100, 
    'N', 'Xhosa/isiXhosa', 'XH');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, RANK_ORDER_NUM, 
    ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('zu-ZA', 'Zulu/isiZulu (South Africa)', TO_DATE('07/25/2023 15:18:30', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA_USER', 100, 
    'N', 'Zulu/isiZulu', 'ZU');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, RANK_ORDER_NUM, 
    ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('af-ZA', 'Afrikaans (South Africa)', TO_DATE('07/25/2023 15:18:30', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA_USER', 100, 
    'N', 'Afrikaans', 'AF');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, RANK_ORDER_NUM, 
    ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('ka-GE', 'Georgian (Georgia)', TO_DATE('07/25/2023 15:18:30', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA_USER', 100, 
    'N', 'Georgian', 'KA');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, RANK_ORDER_NUM, 
    ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('fo-FO', 'Faroese (Faroe Islands)', TO_DATE('07/25/2023 15:18:30', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA_USER', 100, 
    'N', 'Faroese', 'FO');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, RANK_ORDER_NUM, 
    ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('hi-IN', 'Hindi (India)', TO_DATE('07/25/2023 15:18:30', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA_USER', 100, 
    'N', 'Hindi', 'HI');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, RANK_ORDER_NUM, 
    ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('mt-MT', 'Maltese (Malta)', TO_DATE('07/25/2023 15:18:31', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA_USER', 100, 
    'N', 'Maltese', 'MT');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, RANK_ORDER_NUM, 
    ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('se-NO', 'Sami (Northern, Norway)', TO_DATE('07/25/2023 15:18:31', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA_USER', 100, 
    'N', 'Sami', 'SE');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, RANK_ORDER_NUM, 
    ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('ms-MY', 'Malay (Malaysia)', TO_DATE('07/25/2023 15:18:31', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA_USER', 100, 
    'N', 'Malay', 'MS');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, RANK_ORDER_NUM, 
    ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('kk-KZ', 'Kazakh (Kazakhstan)', TO_DATE('07/25/2023 15:18:31', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA_USER', 100, 
    'N', 'Kazakh', 'KK');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, RANK_ORDER_NUM, 
    ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('ky-KG', 'Kyrgyz (Kyrgyzstan)', TO_DATE('07/25/2023 15:18:31', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA_USER', 100, 
    'N', 'Kyrgyz', 'KY');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, RANK_ORDER_NUM, 
    ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('sw-KE', 'Swahili (Kenya)', TO_DATE('07/25/2023 15:18:31', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA_USER', 100, 
    'N', 'Swahili', 'SW');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, RANK_ORDER_NUM, 
    ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('tk-TM', 'Turkmen (Turkmenistan)', TO_DATE('07/25/2023 15:18:31', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA_USER', 100, 
    'N', 'Turkmen', 'TK');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, RANK_ORDER_NUM, 
    ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('uz-Latn-UZ', 'Uzbek (Uzbekistan, Latin)', TO_DATE('07/25/2023 15:18:32', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA_USER', 100, 
    'N', 'Uzbek', 'UZ');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, RANK_ORDER_NUM, 
    ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('tt-RU', 'Tatar (Russia)', TO_DATE('07/25/2023 15:18:32', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA_USER', 100, 
    'N', 'Tatar', 'TT');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, RANK_ORDER_NUM, 
    ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('bn-IN', 'Bengali (India)', TO_DATE('07/25/2023 15:18:32', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA_USER', 100, 
    'N', 'Bengali', 'BN');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, RANK_ORDER_NUM, 
    ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('pa-IN', 'Punjabi (India)', TO_DATE('07/25/2023 15:18:32', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA_USER', 100, 
    'N', 'Punjabi', 'PA');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, RANK_ORDER_NUM, 
    ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('gu-IN', 'Gujarati (India)', TO_DATE('07/25/2023 15:18:32', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA_USER', 100, 
    'N', 'Gujarati', 'GU');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, RANK_ORDER_NUM, 
    ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('or-IN', 'Oriya (India)', TO_DATE('07/25/2023 15:18:32', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA_USER', 100, 
    'N', 'Oriya', 'OR');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, RANK_ORDER_NUM, 
    ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('ta-IN', 'Tamil (India)', TO_DATE('07/25/2023 15:18:32', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA_USER', 100, 
    'N', 'Tamil', 'TA');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, RANK_ORDER_NUM, 
    ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('te-IN', 'Telugu (India)', TO_DATE('07/25/2023 15:18:33', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA_USER', 100, 
    'N', 'Telugu', 'TE');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, RANK_ORDER_NUM, 
    ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('kn-IN', 'Kannada (India)', TO_DATE('07/25/2023 15:18:33', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA_USER', 100, 
    'N', 'Kannada', 'KN');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, RANK_ORDER_NUM, 
    ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('ml-IN', 'Malayalam (India)', TO_DATE('07/25/2023 15:18:33', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA_USER', 100, 
    'N', 'Malayalam', 'ML');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, RANK_ORDER_NUM, 
    ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('as-IN', 'Assamese (India)', TO_DATE('07/25/2023 15:18:33', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA_USER', 100, 
    'N', 'Assamese', 'AS');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, RANK_ORDER_NUM, 
    ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('mr-IN', 'Marathi (India)', TO_DATE('07/25/2023 15:18:33', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA_USER', 100, 
    'N', 'Marathi', 'MR');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, RANK_ORDER_NUM, 
    ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('sa-IN', 'Sanskrit (India)', TO_DATE('07/25/2023 15:18:33', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA_USER', 100, 
    'N', 'Sanskrit', 'SA');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, RANK_ORDER_NUM, 
    ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('mn-Cyrl-MN', 'Mongolian (Mongolia)', TO_DATE('07/25/2023 15:18:33', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA_USER', 100, 
    'N', 'Mongolian', 'MN');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, RANK_ORDER_NUM, 
    ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('bo-CN', 'Tibetan (PRC)', TO_DATE('07/25/2023 15:18:34', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA_USER', 100, 
    'N', 'Tibetan', 'BO');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, RANK_ORDER_NUM, 
    ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('cy-GB', 'Welsh (United Kingdom)', TO_DATE('07/25/2023 15:18:34', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA_USER', 100, 
    'N', 'Welsh', 'CY');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, RANK_ORDER_NUM, 
    ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('kh-KH', 'Khmer (Cambodia)', TO_DATE('07/25/2023 15:18:34', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA_USER', 100, 
    'N', 'Khmer', 'KH');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, RANK_ORDER_NUM, 
    ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('lo-LA', 'Lao (Lao PDR)', TO_DATE('07/25/2023 15:18:34', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA_USER', 100, 
    'N', 'Lao', 'LO');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, RANK_ORDER_NUM, 
    ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('gl-ES', 'Galician (Spain)', TO_DATE('07/25/2023 15:18:34', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA_USER', 100, 
    'N', 'Galician', 'GL');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, RANK_ORDER_NUM, 
    ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('kok-IN', 'Konkani (India)', TO_DATE('07/25/2023 15:18:34', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA_USER', 100, 
    'N', 'Konkani', 'KO');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, RANK_ORDER_NUM, 
    ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('syr-SY', 'Syriac (Syria)', TO_DATE('07/25/2023 15:18:34', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA_USER', 100, 
    'N', 'Syriac', 'SY');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, RANK_ORDER_NUM, 
    ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('si-LK', 'Sinhala (Sri Lanka)', TO_DATE('07/25/2023 15:18:35', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA_USER', 100, 
    'N', 'Sinhala', 'SI');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, RANK_ORDER_NUM, 
    ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('iu-Cans-CA', 'Inuktitut (Canada, Syllabics)', TO_DATE('07/25/2023 15:18:35', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA_USER', 100, 
    'N', 'Inuktitut', 'IU');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, RANK_ORDER_NUM, 
    ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('ne-NP', 'Nepali (Nepal)', TO_DATE('07/25/2023 15:18:35', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA_USER', 100, 
    'N', 'Nepali', 'NE');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, RANK_ORDER_NUM, 
    ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('fy-NL', 'Frisian (Netherlands)', TO_DATE('07/25/2023 15:18:35', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA_USER', 100, 
    'N', 'Frisian', 'FY');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, RANK_ORDER_NUM, 
    ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('ps-AF', 'Pashto (Afghanistan)', TO_DATE('07/25/2023 15:18:35', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA_USER', 100, 
    'N', 'Pashto', 'PS');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, RANK_ORDER_NUM, 
    ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('fil-PH', 'Filipino (Philippines)', TO_DATE('07/25/2023 15:18:35', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA_USER', 100, 
    'N', 'Filipino', 'FI');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, RANK_ORDER_NUM, 
    ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('dv-MV', 'Divehi (Maldives)', TO_DATE('07/25/2023 15:18:35', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA_USER', 100, 
    'N', 'Divehi', 'DV');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, RANK_ORDER_NUM, 
    ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('ha-Latn-NG', 'Hausa (Nigeria, Latin)', TO_DATE('07/25/2023 15:18:36', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA_USER', 100, 
    'N', 'Hausa', 'HA');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, RANK_ORDER_NUM, 
    ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('yo-NG', 'Yoruba (Nigeria)', TO_DATE('07/25/2023 15:18:36', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA_USER', 100, 
    'N', 'Yoruba', 'YO');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, RANK_ORDER_NUM, 
    ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('quz-BO', 'Quechua (Bolivia)', TO_DATE('07/25/2023 15:18:36', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA_USER', 100, 
    'N', 'Quechua', 'QU');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, RANK_ORDER_NUM, 
    ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('ns-ZA', 'Sesotho sa Leboa/Northern Sotho (South Africa)', TO_DATE('07/25/2023 15:18:36', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA_USER', 100, 
    'N', 'Sesotho sa Leboa/Northern Sotho', 'NS');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, RANK_ORDER_NUM, 
    ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('ba-RU', 'Bashkir (Russia)', TO_DATE('07/25/2023 15:18:36', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA_USER', 100, 
    'N', 'Bashkir', 'BA');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, RANK_ORDER_NUM, 
    ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('lb-LU', 'Luxembourgish (Luxembourg)', TO_DATE('07/25/2023 15:18:36', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA_USER', 100, 
    'N', 'Luxembourgish', 'LB');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, RANK_ORDER_NUM, 
    ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('kl-GL', 'Greenlandic (Greenland)', TO_DATE('07/25/2023 15:18:36', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA_USER', 100, 
    'N', 'Greenlandic', 'KL');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, RANK_ORDER_NUM, 
    ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('ig-NG', 'Igbo (Nigeria)', TO_DATE('07/25/2023 15:18:36', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA_USER', 100, 
    'N', 'Igbo', 'IG');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, RANK_ORDER_NUM, 
    ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('ii-CN', 'Yi (PRC)', TO_DATE('07/25/2023 15:18:37', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA_USER', 100, 
    'N', 'Yi', 'II');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, RANK_ORDER_NUM, 
    ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('arn-CL', 'Mapudungun (Chile)', TO_DATE('07/25/2023 15:18:37', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA_USER', 100, 
    'N', 'Mapudungun', 'AR');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, UPDATE_DTTM, 
    UPDATE_USER, RANK_ORDER_NUM, ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('en-US', 'English (Americas)', TO_DATE('07/18/2023 16:46:17', 'MM/DD/YYYY HH24:MI:SS'), 'silpa', TO_DATE('07/18/2023 16:46:17', 'MM/DD/YYYY HH24:MI:SS'), 
    'silpa', 1, 'Y', 'English', 'EN');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, RANK_ORDER_NUM, 
    ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('moh-CA', 'Mohawk (Canada)', TO_DATE('07/25/2023 15:18:37', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA_USER', 100, 
    'N', 'Mohawk', 'MO');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, RANK_ORDER_NUM, 
    ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('br-FR', 'Breton (France)', TO_DATE('07/25/2023 15:18:37', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA_USER', 100, 
    'N', 'Breton', 'BR');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, RANK_ORDER_NUM, 
    ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('ug-CN', 'Uighur (PRC)', TO_DATE('07/25/2023 15:18:37', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA_USER', 100, 
    'N', 'Uighur', 'UG');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, RANK_ORDER_NUM, 
    ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('mi-NZ', 'Maori (New Zealand)', TO_DATE('07/25/2023 15:18:37', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA_USER', 100, 
    'N', 'Maori', 'MI');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, RANK_ORDER_NUM, 
    ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('oc-FR', 'Occitan (France)', TO_DATE('07/25/2023 15:18:37', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA_USER', 100, 
    'N', 'Occitan', 'OC');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, RANK_ORDER_NUM, 
    ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('sah-RU', 'Yakut (Russia)', TO_DATE('07/25/2023 15:18:38', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA_USER', 100, 
    'N', 'Yakut', 'SA');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, RANK_ORDER_NUM, 
    ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('qut-GT', 'K''iche (Guatemala)', TO_DATE('07/25/2023 15:18:38', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA_USER', 100, 
    'N', 'K''iche', 'QU');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, RANK_ORDER_NUM, 
    ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('rw-RW', 'Kinyarwanda (Rwanda)', TO_DATE('07/25/2023 15:18:38', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA_USER', 100, 
    'N', 'Kinyarwanda', 'RW');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, RANK_ORDER_NUM, 
    ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('wo-SN', 'Wolof (Senegal)', TO_DATE('07/25/2023 15:18:38', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA_USER', 100, 
    'N', 'Wolof', 'WO');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, RANK_ORDER_NUM, 
    ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('prs-AF', 'Dari (Afghanistan)', TO_DATE('07/25/2023 15:18:38', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA_USER', 100, 
    'N', 'Dari', 'PR');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, RANK_ORDER_NUM, 
    ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('ar-IQ', 'Arabic (Iraq)', TO_DATE('07/25/2023 15:18:38', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA_USER', 100, 
    'N', 'Arabic', 'AR');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, RANK_ORDER_NUM, 
    ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('de-CH', 'German (Switzerland)', TO_DATE('07/25/2023 15:18:38', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA_USER', 100, 
    'N', 'German', 'DE');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, RANK_ORDER_NUM, 
    ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('en-GB', 'English (UK/Europe/Asia)', TO_DATE('07/25/2023 15:18:39', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA_USER', 100, 
    'N', 'English', 'EN');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, RANK_ORDER_NUM, 
    ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('es-MX', 'Spanish (Mexico)', TO_DATE('07/25/2023 15:18:39', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA_USER', 100, 
    'N', 'Spanish', 'ES');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, RANK_ORDER_NUM, 
    ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('fr-BE', 'French (Belgium)', TO_DATE('07/25/2023 15:18:39', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA_USER', 100, 
    'N', 'French', 'FR');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, RANK_ORDER_NUM, 
    ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('it-CH', 'Italian (Switzerland)', TO_DATE('07/25/2023 15:18:39', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA_USER', 100, 
    'N', 'Italian', 'IT');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, RANK_ORDER_NUM, 
    ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('nl-BE', 'Dutch (Belgium)', TO_DATE('07/25/2023 15:18:39', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA_USER', 100, 
    'N', 'Dutch', 'NL');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, RANK_ORDER_NUM, 
    ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('nn-NO', 'Norwegian (Nynorsk, Norway)', TO_DATE('07/25/2023 15:18:39', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA_USER', 100, 
    'N', 'Norwegian', 'NN');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, RANK_ORDER_NUM, 
    ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('pt-PT', 'Portuguese (Portugal)', TO_DATE('07/25/2023 15:18:39', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA_USER', 100, 
    'N', 'Portuguese', 'PT');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, RANK_ORDER_NUM, 
    ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('sr-Latn-CS', 'Serbian (Serbia, Latin)', TO_DATE('07/25/2023 15:18:39', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA_USER', 100, 
    'N', 'Serbian', 'SR');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, RANK_ORDER_NUM, 
    ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('sv-FI', 'Swedish (Finland)', TO_DATE('07/25/2023 15:18:40', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA_USER', 100, 
    'N', 'Swedish', 'SV');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, RANK_ORDER_NUM, 
    ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('tr-IN', 'Urdu (India)', TO_DATE('07/25/2023 15:18:40', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA_USER', 100, 
    'N', 'Urdu', 'TR');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, RANK_ORDER_NUM, 
    ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('az-Cyrl-AZ', 'Azeri (Azerbaijan, Cyrillic)', TO_DATE('07/25/2023 15:18:40', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA_USER', 100, 
    'N', 'Azeri', 'AZ');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, RANK_ORDER_NUM, 
    ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('dsb-DE', 'Lower Sorbian (Germany)', TO_DATE('07/25/2023 15:18:40', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA_USER', 100, 
    'N', 'Lower Sorbian', 'DS');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, RANK_ORDER_NUM, 
    ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('se-SE', 'Sami (Northern, Sweden)', TO_DATE('07/25/2023 15:18:40', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA_USER', 100, 
    'N', 'Sami', 'SE');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, RANK_ORDER_NUM, 
    ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('ga-IE', 'Irish (Ireland)', TO_DATE('07/25/2023 15:18:40', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA_USER', 100, 
    'N', 'Irish', 'GA');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, RANK_ORDER_NUM, 
    ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('ms-BN', 'Malay (Brunei Darussalam)', TO_DATE('07/25/2023 15:18:40', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA_USER', 100, 
    'N', 'Malay', 'MS');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, RANK_ORDER_NUM, 
    ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('uz-Cyrl-UZ', 'Uzbek (Uzbekistan, Cyrillic)', TO_DATE('07/25/2023 15:18:41', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA_USER', 100, 
    'N', 'Uzbek', 'UZ');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, RANK_ORDER_NUM, 
    ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('mn-Mong-CN', 'Mongolian (PRC)', TO_DATE('07/25/2023 15:18:41', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA_USER', 100, 
    'N', 'Mongolian', 'MN');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, RANK_ORDER_NUM, 
    ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('bo-BT', 'Tibetan (Bhutan)', TO_DATE('07/25/2023 15:18:41', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA_USER', 100, 
    'N', 'Tibetan', 'BO');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, RANK_ORDER_NUM, 
    ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('iu-Latn-CA', 'Inuktitut (Canada, Latin)', TO_DATE('07/25/2023 15:18:41', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA_USER', 100, 
    'N', 'Inuktitut', 'IU');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, RANK_ORDER_NUM, 
    ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('tzm-Latn-DZ', 'Tamazight (Algeria, Latin)', TO_DATE('07/25/2023 15:18:41', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA_USER', 100, 
    'N', 'Tamazight', 'TZ');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, RANK_ORDER_NUM, 
    ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('quz-EC', 'Quechua (Ecuador)', TO_DATE('07/25/2023 15:18:41', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA_USER', 100, 
    'N', 'Quechua', 'QU');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, RANK_ORDER_NUM, 
    ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('ar-EG', 'Arabic (Egypt)', TO_DATE('07/25/2023 15:18:41', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA_USER', 100, 
    'N', 'Arabic', 'AR');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, RANK_ORDER_NUM, 
    ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('zh-HK', 'Chinese (Hong Kong)', TO_DATE('07/25/2023 15:18:42', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA_USER', 100, 
    'N', 'Chinese', 'ZH');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, RANK_ORDER_NUM, 
    ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('de-AT', 'German (Austria)', TO_DATE('07/25/2023 15:18:42', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA_USER', 100, 
    'N', 'German', 'DE');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, RANK_ORDER_NUM, 
    ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('en-AU', 'English (Australia)', TO_DATE('07/25/2023 15:18:42', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA_USER', 100, 
    'N', 'English', 'EN');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, RANK_ORDER_NUM, 
    ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('es-ES', 'Spanish (Spain)', TO_DATE('07/25/2023 15:18:42', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA_USER', 100, 
    'N', 'Spanish', 'ES');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, RANK_ORDER_NUM, 
    ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('fr-CA', 'French (Canada)', TO_DATE('07/25/2023 15:18:42', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA_USER', 100, 
    'N', 'French', 'FR');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, RANK_ORDER_NUM, 
    ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('sr-Cyrl-CS', 'Serbian (Serbia, Cyrillic)', TO_DATE('07/25/2023 15:18:42', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA_USER', 100, 
    'N', 'Serbian', 'SR');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, RANK_ORDER_NUM, 
    ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('se-FI', 'Sami (Northern, Finland)', TO_DATE('07/25/2023 15:18:42', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA_USER', 100, 
    'N', 'Sami', 'SE');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, RANK_ORDER_NUM, 
    ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('quz-PE', 'Quechua (Peru)', TO_DATE('07/25/2023 15:18:43', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA_USER', 100, 
    'N', 'Quechua', 'QU');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, RANK_ORDER_NUM, 
    ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('ar-LY', 'Arabic (Libya)', TO_DATE('07/25/2023 15:18:43', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA_USER', 100, 
    'N', 'Arabic', 'AR');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, RANK_ORDER_NUM, 
    ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('zh-SG', 'Chinese (Singapore)', TO_DATE('07/25/2023 15:18:43', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA_USER', 100, 
    'N', 'Chinese', 'ZH');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, RANK_ORDER_NUM, 
    ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('de-LU', 'German (Luxembourg)', TO_DATE('07/25/2023 15:18:43', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA_USER', 100, 
    'N', 'German', 'DE');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, RANK_ORDER_NUM, 
    ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('en-CA', 'English (Canada)', TO_DATE('07/25/2023 15:18:43', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA_USER', 100, 
    'N', 'English', 'EN');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, RANK_ORDER_NUM, 
    ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('es-GT', 'Spanish (Guatemala)', TO_DATE('07/25/2023 15:18:43', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA_USER', 100, 
    'N', 'Spanish', 'ES');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, RANK_ORDER_NUM, 
    ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('fr-CH', 'French (Switzerland)', TO_DATE('07/25/2023 15:18:43', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA_USER', 100, 
    'N', 'French', 'FR');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, RANK_ORDER_NUM, 
    ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('hr-BA', 'Croatian (Bosnia and Herzegovina, Latin)', TO_DATE('07/25/2023 15:18:43', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA_USER', 100, 
    'N', 'Croatian', 'HR');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, RANK_ORDER_NUM, 
    ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('smj-NO', 'Sami (Lule, Norway)', TO_DATE('07/25/2023 15:18:44', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA_USER', 100, 
    'N', 'Sami', 'SM');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, RANK_ORDER_NUM, 
    ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('ar-DZ', 'Arabic (Algeria)', TO_DATE('07/25/2023 15:18:44', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA_USER', 100, 
    'N', 'Arabic', 'AR');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, RANK_ORDER_NUM, 
    ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('zh-MO', 'Chinese (Macao)', TO_DATE('07/25/2023 15:18:44', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA_USER', 100, 
    'N', 'Chinese', 'ZH');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, RANK_ORDER_NUM, 
    ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('de-LI', 'German (Liechtenstein)', TO_DATE('07/25/2023 15:18:44', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA_USER', 100, 
    'N', 'German', 'DE');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, RANK_ORDER_NUM, 
    ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('en-NZ', 'English (New Zealand)', TO_DATE('07/25/2023 15:18:44', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA_USER', 100, 
    'N', 'English', 'EN');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, RANK_ORDER_NUM, 
    ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('es-CR', 'Spanish (Costa Rica)', TO_DATE('07/25/2023 15:18:44', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA_USER', 100, 
    'N', 'Spanish', 'ES');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, RANK_ORDER_NUM, 
    ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('fr-LU', 'French (Luxembourg)', TO_DATE('07/25/2023 15:18:45', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA_USER', 100, 
    'N', 'French', 'FR');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, RANK_ORDER_NUM, 
    ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('bs-Latn-BA', 'Bosnian (Bosnia and Herzegovina, Latin)', TO_DATE('07/25/2023 15:18:45', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA_USER', 100, 
    'N', 'Bosnian', 'BS');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, RANK_ORDER_NUM, 
    ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('smj-SE', 'Sami (Lule, Sweden)', TO_DATE('07/25/2023 15:18:45', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA_USER', 100, 
    'N', 'Sami', 'SM');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, RANK_ORDER_NUM, 
    ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('ar-MA', 'Arabic (Morocco)', TO_DATE('07/25/2023 15:18:45', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA_USER', 100, 
    'N', 'Arabic', 'AR');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, RANK_ORDER_NUM, 
    ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('en-IE', 'English (Ireland)', TO_DATE('07/25/2023 15:18:45', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA_USER', 100, 
    'N', 'English', 'EN');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, RANK_ORDER_NUM, 
    ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('es-PA', 'Spanish (Panama)', TO_DATE('07/25/2023 15:18:45', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA_USER', 100, 
    'N', 'Spanish', 'ES');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, RANK_ORDER_NUM, 
    ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('fr-MC', 'French (Monaco)', TO_DATE('07/25/2023 15:18:45', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA_USER', 100, 
    'N', 'French', 'FR');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, RANK_ORDER_NUM, 
    ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('sr-Latn-BA', 'Serbian (Bosnia and Herzegovina, Latin)', TO_DATE('07/25/2023 15:18:46', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA_USER', 100, 
    'N', 'Serbian', 'SR');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, RANK_ORDER_NUM, 
    ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('sma-NO', 'Sami (Southern, Norway)', TO_DATE('07/25/2023 15:18:46', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA_USER', 100, 
    'N', 'Sami', 'SM');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, RANK_ORDER_NUM, 
    ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('ar-TN', 'Arabic (Tunisia)', TO_DATE('07/25/2023 15:18:46', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA_USER', 100, 
    'N', 'Arabic', 'AR');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, RANK_ORDER_NUM, 
    ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('en-ZA', 'English (South Africa)', TO_DATE('07/25/2023 15:18:46', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA_USER', 100, 
    'N', 'English', 'EN');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, RANK_ORDER_NUM, 
    ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('es-DO', 'Spanish (Dominican Republic)', TO_DATE('07/25/2023 15:18:46', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA_USER', 100, 
    'N', 'Spanish', 'ES');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, RANK_ORDER_NUM, 
    ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('sr-Cyrl-BA', 'Serbian (Bosnia and Herzegovina, Cyrillic)', TO_DATE('07/25/2023 15:18:46', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA_USER', 100, 
    'N', 'Serbian', 'SR');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, RANK_ORDER_NUM, 
    ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('sma-SE', 'Sami (Southern, Sweden)', TO_DATE('07/25/2023 15:18:46', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA_USER', 100, 
    'N', 'Sami', 'SM');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, RANK_ORDER_NUM, 
    ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('ar-OM', 'Arabic (Oman)', TO_DATE('07/25/2023 15:18:47', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA_USER', 100, 
    'N', 'Arabic', 'AR');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, RANK_ORDER_NUM, 
    ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('en-JM', 'English (Jamaica)', TO_DATE('07/25/2023 15:18:47', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA_USER', 100, 
    'N', 'English', 'EN');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, RANK_ORDER_NUM, 
    ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('es-VE', 'Spanish (Venezuela)', TO_DATE('07/25/2023 15:18:47', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA_USER', 100, 
    'N', 'Spanish', 'ES');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, RANK_ORDER_NUM, 
    ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('bs-Cyrl-BA', 'Bosnian (Bosnia and Herzegovina, Cyrillic)', TO_DATE('07/25/2023 15:18:47', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA_USER', 100, 
    'N', 'Bosnian', 'BS');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, RANK_ORDER_NUM, 
    ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('sms-FI', 'Sami (Skolt, Finland)', TO_DATE('07/25/2023 15:18:47', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA_USER', 100, 
    'N', 'Sami', 'SM');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, RANK_ORDER_NUM, 
    ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('ar-YE', 'Arabic (Yemen)', TO_DATE('07/25/2023 15:18:47', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA_USER', 100, 
    'N', 'Arabic', 'AR');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, RANK_ORDER_NUM, 
    ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('en-029', 'English (Caribbean)', TO_DATE('07/25/2023 15:18:47', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA_USER', 100, 
    'N', 'English', 'EN');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, RANK_ORDER_NUM, 
    ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('es-CO', 'Spanish (Colombia)', TO_DATE('07/25/2023 15:18:48', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA_USER', 100, 
    'N', 'Spanish', 'ES');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, RANK_ORDER_NUM, 
    ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('smn-FI', 'Sami (Inari, Finland)', TO_DATE('07/25/2023 15:18:48', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA_USER', 100, 
    'N', 'Sami', 'SM');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, RANK_ORDER_NUM, 
    ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('ar-SY', 'Arabic (Syria)', TO_DATE('07/25/2023 15:18:48', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA_USER', 100, 
    'N', 'Arabic', 'AR');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, RANK_ORDER_NUM, 
    ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('en-BZ', 'English (Belize)', TO_DATE('07/25/2023 15:18:48', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA_USER', 100, 
    'N', 'English', 'EN');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, RANK_ORDER_NUM, 
    ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('es-PE', 'Spanish (Peru)', TO_DATE('07/25/2023 15:18:48', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA_USER', 100, 
    'N', 'Spanish', 'ES');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, RANK_ORDER_NUM, 
    ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('ar-JO', 'Arabic (Jordan)', TO_DATE('07/25/2023 15:18:48', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA_USER', 100, 
    'N', 'Arabic', 'AR');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, RANK_ORDER_NUM, 
    ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('en-TT', 'English (Trinidad and Tobago)', TO_DATE('07/25/2023 15:18:48', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA_USER', 100, 
    'N', 'English', 'EN');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, RANK_ORDER_NUM, 
    ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('es-AR', 'Spanish (Argentina)', TO_DATE('07/25/2023 15:18:49', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA_USER', 100, 
    'N', 'Spanish', 'ES');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, RANK_ORDER_NUM, 
    ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('ar-LB', 'Arabic (Lebanon)', TO_DATE('07/25/2023 15:18:49', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA_USER', 100, 
    'N', 'Arabic', 'AR');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, RANK_ORDER_NUM, 
    ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('en-ZW', 'English (Zimbabwe)', TO_DATE('07/25/2023 15:18:49', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA_USER', 100, 
    'N', 'English', 'EN');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, RANK_ORDER_NUM, 
    ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('es-EC', 'Spanish (Ecuador)', TO_DATE('07/25/2023 15:18:49', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA_USER', 100, 
    'N', 'Spanish', 'ES');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, RANK_ORDER_NUM, 
    ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('ar-KW', 'Arabic (Kuwait)', TO_DATE('07/25/2023 15:18:49', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA_USER', 100, 
    'N', 'Arabic', 'AR');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, RANK_ORDER_NUM, 
    ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('en-PH', 'English (Philippines)', TO_DATE('07/25/2023 15:18:49', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA_USER', 100, 
    'N', 'English', 'EN');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, RANK_ORDER_NUM, 
    ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('es-CL', 'Spanish (Chile)', TO_DATE('07/25/2023 15:18:49', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA_USER', 100, 
    'N', 'Spanish', 'ES');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, RANK_ORDER_NUM, 
    ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('ar-AE', 'Arabic (U.A.E.)', TO_DATE('07/25/2023 15:18:50', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA_USER', 100, 
    'N', 'Arabic', 'AR');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, RANK_ORDER_NUM, 
    ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('es-UY', 'Spanish (Uruguay)', TO_DATE('07/25/2023 15:18:50', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA_USER', 100, 
    'N', 'Spanish', 'ES');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, RANK_ORDER_NUM, 
    ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('ar-BH', 'Arabic (Bahrain)', TO_DATE('07/25/2023 15:18:50', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA_USER', 100, 
    'N', 'Arabic', 'AR');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, RANK_ORDER_NUM, 
    ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('es-PY', 'Spanish (Paraguay)', TO_DATE('07/25/2023 15:18:50', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA_USER', 100, 
    'N', 'Spanish', 'ES');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, RANK_ORDER_NUM, 
    ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('ar-QA', 'Arabic (Qatar)', TO_DATE('07/25/2023 15:18:50', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA_USER', 100, 
    'N', 'Arabic', 'AR');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, RANK_ORDER_NUM, 
    ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('en-IN', 'English (India)', TO_DATE('07/25/2023 15:18:50', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA_USER', 100, 
    'N', 'English', 'EN');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, RANK_ORDER_NUM, 
    ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('es-BO', 'Spanish (Bolivia)', TO_DATE('07/25/2023 15:18:50', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA_USER', 100, 
    'N', 'Spanish', 'ES');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, RANK_ORDER_NUM, 
    ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('en-MY', 'English (Malaysia)', TO_DATE('07/25/2023 15:18:51', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA_USER', 100, 
    'N', 'English', 'EN');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, RANK_ORDER_NUM, 
    ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('es-SV', 'Spanish (El Salvador)', TO_DATE('07/25/2023 15:18:51', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA_USER', 100, 
    'N', 'Spanish', 'ES');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, RANK_ORDER_NUM, 
    ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('en-SG', 'English (Singapore)', TO_DATE('07/25/2023 15:18:51', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA_USER', 100, 
    'N', 'English', 'EN');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, RANK_ORDER_NUM, 
    ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('es-NI', 'Spanish (Nicaragua)', TO_DATE('07/25/2023 15:18:51', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA_USER', 100, 
    'N', 'Spanish', 'ES');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, RANK_ORDER_NUM, 
    ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('es-PR', 'Spanish (Puerto Rico)', TO_DATE('07/25/2023 15:18:51', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA_USER', 100, 
    'N', 'Spanish', 'ES');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, RANK_ORDER_NUM, 
    ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('es-US', 'Spanish (United States)', TO_DATE('07/25/2023 15:18:51', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA_USER', 100, 
    'N', 'Spanish', 'ES');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, RANK_ORDER_NUM, 
    ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('my-MM', 'Burmese (Burma)', TO_DATE('07/25/2023 15:18:51', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA_USER', 100, 
    'N', 'Burmese', 'MY');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, RANK_ORDER_NUM, 
    ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('ts-TS', 'Tsonga', TO_DATE('07/25/2023 15:18:52', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA_USER', 100, 
    'N', 'Tsonga', 'TS');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, RANK_ORDER_NUM, 
    ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('am-ET', 'Amharic', TO_DATE('07/25/2023 15:18:52', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA_USER', 100, 
    'N', 'Amharic', 'AM');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, RANK_ORDER_NUM, 
    ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('gug-PY', 'Gurani', TO_DATE('07/25/2023 15:18:52', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA_USER', 100, 
    'N', 'Gurani', 'GU');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, RANK_ORDER_NUM, 
    ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('pap-AW', 'Papiamentu', TO_DATE('07/25/2023 15:18:52', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA_USER', 100, 
    'N', 'Papiamentu', 'PA');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, RANK_ORDER_NUM, 
    ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('co-FR', 'Corsican (France)', TO_DATE('07/25/2023 15:18:52', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA_USER', 100, 
    'N', 'Corsican', 'CO');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, RANK_ORDER_NUM, 
    ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('ku-IQ', 'Kurdish (Iraq)', TO_DATE('07/25/2023 15:18:52', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA_USER', 100, 
    'N', 'Kurdish', 'KU');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, RANK_ORDER_NUM, 
    ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('ti-ER', 'Tigrinya (Eritrea)', TO_DATE('07/25/2023 15:18:52', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA_USER', 100, 
    'N', 'Tigrinya', 'TI');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, RANK_ORDER_NUM, 
    ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('dz-BT', 'Dzongkha (Bhutan)', TO_DATE('07/25/2023 15:18:52', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA_USER', 100, 
    'N', 'Dzongkha', 'DZ');
Insert into R360_USER_PREF.R360_APP_LANGUAGE
   (R360_APP_LANGUAGE_CD, R360_APP_LANGUAGE, CREATE_DTTM, CREATE_USER, RANK_ORDER_NUM, 
    ACTV_FLAG, R360_APP_LANGUAGE_SHORT, LANGUAGE_ISO_CODE)
 Values
   ('eo-001', 'Esperanto', TO_DATE('07/25/2023 15:18:53', 'MM/DD/YYYY HH24:MI:SS'), 'R360_APPDATA_USER', 100, 
    'N', 'Esperanto', 'EO');
COMMIT;


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\USER_PROFILE-LOOKUP_23.09\user_profile_lookup\DML\R360_APP_STATE.sql

SET DEFINE OFF;
Insert into R360_USER_PREF.R360_APP_STATE
   (STATE_CD, STATE_NAME, COUNTRY_CD, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER)
 Values
   ('AS', 'American Samoa', 'US', 'Y', TO_DATE('08/15/2023 12:51:14', 'MM/DD/YYYY HH24:MI:SS'), 
    'Anna');
Insert into R360_USER_PREF.R360_APP_STATE
   (STATE_CD, STATE_NAME, COUNTRY_CD, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER)
 Values
   ('PR', 'Puerto Rico', 'US', 'Y', TO_DATE('08/15/2023 12:51:14', 'MM/DD/YYYY HH24:MI:SS'), 
    'Anna');
Insert into R360_USER_PREF.R360_APP_STATE
   (STATE_CD, STATE_NAME, COUNTRY_CD, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER)
 Values
   ('VI', 'Virgin Islands (U.S.)', 'US', 'Y', TO_DATE('08/15/2023 12:51:14', 'MM/DD/YYYY HH24:MI:SS'), 
    'Anna');
Insert into R360_USER_PREF.R360_APP_STATE
   (STATE_CD, STATE_NAME, COUNTRY_CD, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER)
 Values
   ('OH', 'Ohio', 'US', 'Y', TO_DATE('08/15/2023 12:51:14', 'MM/DD/YYYY HH24:MI:SS'), 
    'Anna');
Insert into R360_USER_PREF.R360_APP_STATE
   (STATE_CD, STATE_NAME, COUNTRY_CD, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER)
 Values
   ('OK', 'Oklahoma', 'US', 'Y', TO_DATE('08/15/2023 12:51:14', 'MM/DD/YYYY HH24:MI:SS'), 
    'Anna');
Insert into R360_USER_PREF.R360_APP_STATE
   (STATE_CD, STATE_NAME, COUNTRY_CD, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER)
 Values
   ('OR', 'Oregon', 'US', 'Y', TO_DATE('08/15/2023 12:51:15', 'MM/DD/YYYY HH24:MI:SS'), 
    'Anna');
Insert into R360_USER_PREF.R360_APP_STATE
   (STATE_CD, STATE_NAME, COUNTRY_CD, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER)
 Values
   ('PA', 'Pennsylvania', 'US', 'Y', TO_DATE('08/15/2023 12:51:15', 'MM/DD/YYYY HH24:MI:SS'), 
    'Anna');
Insert into R360_USER_PREF.R360_APP_STATE
   (STATE_CD, STATE_NAME, COUNTRY_CD, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER)
 Values
   ('RI', 'Rhode Island', 'US', 'Y', TO_DATE('08/15/2023 12:51:15', 'MM/DD/YYYY HH24:MI:SS'), 
    'Anna');
Insert into R360_USER_PREF.R360_APP_STATE
   (STATE_CD, STATE_NAME, COUNTRY_CD, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER)
 Values
   ('SC', 'South Carolina', 'US', 'Y', TO_DATE('08/15/2023 12:51:15', 'MM/DD/YYYY HH24:MI:SS'), 
    'Anna');
Insert into R360_USER_PREF.R360_APP_STATE
   (STATE_CD, STATE_NAME, COUNTRY_CD, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER)
 Values
   ('SD', 'South Dakota', 'US', 'Y', TO_DATE('08/15/2023 12:51:15', 'MM/DD/YYYY HH24:MI:SS'), 
    'Anna');
Insert into R360_USER_PREF.R360_APP_STATE
   (STATE_CD, STATE_NAME, COUNTRY_CD, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER)
 Values
   ('NV', 'Nevada', 'US', 'Y', TO_DATE('08/15/2023 12:51:15', 'MM/DD/YYYY HH24:MI:SS'), 
    'Anna');
Insert into R360_USER_PREF.R360_APP_STATE
   (STATE_CD, STATE_NAME, COUNTRY_CD, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER)
 Values
   ('NY', 'New York', 'US', 'Y', TO_DATE('08/15/2023 12:51:15', 'MM/DD/YYYY HH24:MI:SS'), 
    'Anna');
Insert into R360_USER_PREF.R360_APP_STATE
   (STATE_CD, STATE_NAME, COUNTRY_CD, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER)
 Values
   ('GU', 'Guam', 'US', 'Y', TO_DATE('08/15/2023 12:51:15', 'MM/DD/YYYY HH24:MI:SS'), 
    'Anna');
Insert into R360_USER_PREF.R360_APP_STATE
   (STATE_CD, STATE_NAME, COUNTRY_CD, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER)
 Values
   ('TN', 'Tennessee', 'US', 'Y', TO_DATE('08/15/2023 12:51:15', 'MM/DD/YYYY HH24:MI:SS'), 
    'Anna');
Insert into R360_USER_PREF.R360_APP_STATE
   (STATE_CD, STATE_NAME, COUNTRY_CD, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER)
 Values
   ('UT', 'Utah', 'US', 'Y', TO_DATE('08/15/2023 12:51:15', 'MM/DD/YYYY HH24:MI:SS'), 
    'Anna');
Insert into R360_USER_PREF.R360_APP_STATE
   (STATE_CD, STATE_NAME, COUNTRY_CD, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER)
 Values
   ('VA', 'Virginia', 'US', 'Y', TO_DATE('08/15/2023 12:51:15', 'MM/DD/YYYY HH24:MI:SS'), 
    'Anna');
Insert into R360_USER_PREF.R360_APP_STATE
   (STATE_CD, STATE_NAME, COUNTRY_CD, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER)
 Values
   ('VT', 'Vermont', 'US', 'Y', TO_DATE('08/15/2023 12:51:15', 'MM/DD/YYYY HH24:MI:SS'), 
    'Anna');
Insert into R360_USER_PREF.R360_APP_STATE
   (STATE_CD, STATE_NAME, COUNTRY_CD, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER)
 Values
   ('WA', 'Washington', 'US', 'Y', TO_DATE('08/15/2023 12:51:15', 'MM/DD/YYYY HH24:MI:SS'), 
    'Anna');
Insert into R360_USER_PREF.R360_APP_STATE
   (STATE_CD, STATE_NAME, COUNTRY_CD, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER)
 Values
   ('WI', 'Wisconsin', 'US', 'Y', TO_DATE('08/15/2023 12:51:15', 'MM/DD/YYYY HH24:MI:SS'), 
    'Anna');
Insert into R360_USER_PREF.R360_APP_STATE
   (STATE_CD, STATE_NAME, COUNTRY_CD, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER)
 Values
   ('WV', 'West Virginia', 'US', 'Y', TO_DATE('08/15/2023 12:51:15', 'MM/DD/YYYY HH24:MI:SS'), 
    'Anna');
Insert into R360_USER_PREF.R360_APP_STATE
   (STATE_CD, STATE_NAME, COUNTRY_CD, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER)
 Values
   ('WY', 'Wyoming', 'US', 'Y', TO_DATE('08/15/2023 12:51:15', 'MM/DD/YYYY HH24:MI:SS'), 
    'Anna');
Insert into R360_USER_PREF.R360_APP_STATE
   (STATE_CD, STATE_NAME, COUNTRY_CD, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER)
 Values
   ('DC', 'District Of Columbia', 'US', 'Y', TO_DATE('08/15/2023 12:51:15', 'MM/DD/YYYY HH24:MI:SS'), 
    'Anna');
Insert into R360_USER_PREF.R360_APP_STATE
   (STATE_CD, STATE_NAME, COUNTRY_CD, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER)
 Values
   ('AK', 'Alaska', 'US', 'Y', TO_DATE('08/15/2023 12:51:15', 'MM/DD/YYYY HH24:MI:SS'), 
    'Anna');
Insert into R360_USER_PREF.R360_APP_STATE
   (STATE_CD, STATE_NAME, COUNTRY_CD, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER)
 Values
   ('AL', 'Alabama', 'US', 'Y', TO_DATE('08/15/2023 12:51:15', 'MM/DD/YYYY HH24:MI:SS'), 
    'Anna');
Insert into R360_USER_PREF.R360_APP_STATE
   (STATE_CD, STATE_NAME, COUNTRY_CD, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER)
 Values
   ('AR', 'Arkansas', 'US', 'Y', TO_DATE('08/15/2023 12:51:15', 'MM/DD/YYYY HH24:MI:SS'), 
    'Anna');
Insert into R360_USER_PREF.R360_APP_STATE
   (STATE_CD, STATE_NAME, COUNTRY_CD, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER)
 Values
   ('AZ', 'Arizona', 'US', 'Y', TO_DATE('08/15/2023 12:51:15', 'MM/DD/YYYY HH24:MI:SS'), 
    'Anna');
Insert into R360_USER_PREF.R360_APP_STATE
   (STATE_CD, STATE_NAME, COUNTRY_CD, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER)
 Values
   ('CA', 'California', 'US', 'Y', TO_DATE('08/15/2023 12:51:15', 'MM/DD/YYYY HH24:MI:SS'), 
    'Anna');
Insert into R360_USER_PREF.R360_APP_STATE
   (STATE_CD, STATE_NAME, COUNTRY_CD, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER)
 Values
   ('CO', 'Colorado', 'US', 'Y', TO_DATE('08/15/2023 12:51:15', 'MM/DD/YYYY HH24:MI:SS'), 
    'Anna');
Insert into R360_USER_PREF.R360_APP_STATE
   (STATE_CD, STATE_NAME, COUNTRY_CD, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER)
 Values
   ('CT', 'Connecticut', 'US', 'Y', TO_DATE('08/15/2023 12:51:15', 'MM/DD/YYYY HH24:MI:SS'), 
    'Anna');
Insert into R360_USER_PREF.R360_APP_STATE
   (STATE_CD, STATE_NAME, COUNTRY_CD, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER)
 Values
   ('DE', 'Delaware', 'US', 'Y', TO_DATE('08/15/2023 12:51:15', 'MM/DD/YYYY HH24:MI:SS'), 
    'Anna');
Insert into R360_USER_PREF.R360_APP_STATE
   (STATE_CD, STATE_NAME, COUNTRY_CD, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER)
 Values
   ('FL', 'Florida', 'US', 'Y', TO_DATE('08/15/2023 12:51:15', 'MM/DD/YYYY HH24:MI:SS'), 
    'Anna');
Insert into R360_USER_PREF.R360_APP_STATE
   (STATE_CD, STATE_NAME, COUNTRY_CD, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER)
 Values
   ('GA', 'Georgia', 'US', 'Y', TO_DATE('08/15/2023 12:51:15', 'MM/DD/YYYY HH24:MI:SS'), 
    'Anna');
Insert into R360_USER_PREF.R360_APP_STATE
   (STATE_CD, STATE_NAME, COUNTRY_CD, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER)
 Values
   ('HI', 'Hawaii', 'US', 'Y', TO_DATE('08/15/2023 12:51:15', 'MM/DD/YYYY HH24:MI:SS'), 
    'Anna');
Insert into R360_USER_PREF.R360_APP_STATE
   (STATE_CD, STATE_NAME, COUNTRY_CD, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER)
 Values
   ('IA', 'Iowa', 'US', 'Y', TO_DATE('08/15/2023 12:51:16', 'MM/DD/YYYY HH24:MI:SS'), 
    'Anna');
Insert into R360_USER_PREF.R360_APP_STATE
   (STATE_CD, STATE_NAME, COUNTRY_CD, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER)
 Values
   ('ID', 'Idaho', 'US', 'Y', TO_DATE('08/15/2023 12:51:16', 'MM/DD/YYYY HH24:MI:SS'), 
    'Anna');
Insert into R360_USER_PREF.R360_APP_STATE
   (STATE_CD, STATE_NAME, COUNTRY_CD, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER)
 Values
   ('IL', 'Illinois', 'US', 'Y', TO_DATE('08/15/2023 12:51:16', 'MM/DD/YYYY HH24:MI:SS'), 
    'Anna');
Insert into R360_USER_PREF.R360_APP_STATE
   (STATE_CD, STATE_NAME, COUNTRY_CD, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER)
 Values
   ('IN', 'Indiana', 'US', 'Y', TO_DATE('08/15/2023 12:51:16', 'MM/DD/YYYY HH24:MI:SS'), 
    'Anna');
Insert into R360_USER_PREF.R360_APP_STATE
   (STATE_CD, STATE_NAME, COUNTRY_CD, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER)
 Values
   ('KS', 'Kansas', 'US', 'Y', TO_DATE('08/15/2023 12:51:16', 'MM/DD/YYYY HH24:MI:SS'), 
    'Anna');
Insert into R360_USER_PREF.R360_APP_STATE
   (STATE_CD, STATE_NAME, COUNTRY_CD, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER)
 Values
   ('KY', 'Kentucky', 'US', 'Y', TO_DATE('08/15/2023 12:51:16', 'MM/DD/YYYY HH24:MI:SS'), 
    'Anna');
Insert into R360_USER_PREF.R360_APP_STATE
   (STATE_CD, STATE_NAME, COUNTRY_CD, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER)
 Values
   ('LA', 'Louisiana', 'US', 'Y', TO_DATE('08/15/2023 12:51:16', 'MM/DD/YYYY HH24:MI:SS'), 
    'Anna');
Insert into R360_USER_PREF.R360_APP_STATE
   (STATE_CD, STATE_NAME, COUNTRY_CD, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER)
 Values
   ('MA', 'Massachusetts', 'US', 'Y', TO_DATE('08/15/2023 12:51:16', 'MM/DD/YYYY HH24:MI:SS'), 
    'Anna');
Insert into R360_USER_PREF.R360_APP_STATE
   (STATE_CD, STATE_NAME, COUNTRY_CD, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER)
 Values
   ('MD', 'Maryland', 'US', 'Y', TO_DATE('08/15/2023 12:51:16', 'MM/DD/YYYY HH24:MI:SS'), 
    'Anna');
Insert into R360_USER_PREF.R360_APP_STATE
   (STATE_CD, STATE_NAME, COUNTRY_CD, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER)
 Values
   ('ME', 'Maine', 'US', 'Y', TO_DATE('08/15/2023 12:51:16', 'MM/DD/YYYY HH24:MI:SS'), 
    'Anna');
Insert into R360_USER_PREF.R360_APP_STATE
   (STATE_CD, STATE_NAME, COUNTRY_CD, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER)
 Values
   ('MI', 'Michigan', 'US', 'Y', TO_DATE('08/15/2023 12:51:16', 'MM/DD/YYYY HH24:MI:SS'), 
    'Anna');
Insert into R360_USER_PREF.R360_APP_STATE
   (STATE_CD, STATE_NAME, COUNTRY_CD, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER)
 Values
   ('MN', 'Minnesota', 'US', 'Y', TO_DATE('08/15/2023 12:51:16', 'MM/DD/YYYY HH24:MI:SS'), 
    'Anna');
Insert into R360_USER_PREF.R360_APP_STATE
   (STATE_CD, STATE_NAME, COUNTRY_CD, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER)
 Values
   ('MO', 'Missouri', 'US', 'Y', TO_DATE('08/15/2023 12:51:16', 'MM/DD/YYYY HH24:MI:SS'), 
    'Anna');
Insert into R360_USER_PREF.R360_APP_STATE
   (STATE_CD, STATE_NAME, COUNTRY_CD, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER)
 Values
   ('MS', 'Mississippi', 'US', 'Y', TO_DATE('08/15/2023 12:51:16', 'MM/DD/YYYY HH24:MI:SS'), 
    'Anna');
Insert into R360_USER_PREF.R360_APP_STATE
   (STATE_CD, STATE_NAME, COUNTRY_CD, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER)
 Values
   ('MT', 'Montana', 'US', 'Y', TO_DATE('08/15/2023 12:51:16', 'MM/DD/YYYY HH24:MI:SS'), 
    'Anna');
Insert into R360_USER_PREF.R360_APP_STATE
   (STATE_CD, STATE_NAME, COUNTRY_CD, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER)
 Values
   ('NC', 'North Carolina', 'US', 'Y', TO_DATE('08/15/2023 12:51:16', 'MM/DD/YYYY HH24:MI:SS'), 
    'Anna');
Insert into R360_USER_PREF.R360_APP_STATE
   (STATE_CD, STATE_NAME, COUNTRY_CD, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER)
 Values
   ('ND', 'North Dakota', 'US', 'Y', TO_DATE('08/15/2023 12:51:16', 'MM/DD/YYYY HH24:MI:SS'), 
    'Anna');
Insert into R360_USER_PREF.R360_APP_STATE
   (STATE_CD, STATE_NAME, COUNTRY_CD, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER)
 Values
   ('NE', 'Nebraska', 'US', 'Y', TO_DATE('08/15/2023 12:51:16', 'MM/DD/YYYY HH24:MI:SS'), 
    'Anna');
Insert into R360_USER_PREF.R360_APP_STATE
   (STATE_CD, STATE_NAME, COUNTRY_CD, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER)
 Values
   ('NH', 'New Hampshire', 'US', 'Y', TO_DATE('08/15/2023 12:51:16', 'MM/DD/YYYY HH24:MI:SS'), 
    'Anna');
Insert into R360_USER_PREF.R360_APP_STATE
   (STATE_CD, STATE_NAME, COUNTRY_CD, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER)
 Values
   ('NJ', 'New Jersey', 'US', 'Y', TO_DATE('08/15/2023 12:51:16', 'MM/DD/YYYY HH24:MI:SS'), 
    'Anna');
Insert into R360_USER_PREF.R360_APP_STATE
   (STATE_CD, STATE_NAME, COUNTRY_CD, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER)
 Values
   ('NM', 'New Mexico', 'US', 'Y', TO_DATE('08/15/2023 12:51:16', 'MM/DD/YYYY HH24:MI:SS'), 
    'Anna');
Insert into R360_USER_PREF.R360_APP_STATE
   (STATE_CD, STATE_NAME, COUNTRY_CD, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER)
 Values
   ('TX', 'Texas', 'US', 'Y', TO_DATE('08/15/2023 12:51:16', 'MM/DD/YYYY HH24:MI:SS'), 
    'Anna');
Insert into R360_USER_PREF.R360_APP_STATE
   (STATE_CD, STATE_NAME, COUNTRY_CD, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER)
 Values
   ('FM', 'Federated States Of Micronesia', 'US', 'Y', TO_DATE('08/15/2023 12:51:16', 'MM/DD/YYYY HH24:MI:SS'), 
    'Anna');
Insert into R360_USER_PREF.R360_APP_STATE
   (STATE_CD, STATE_NAME, COUNTRY_CD, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER)
 Values
   ('MH', 'MARSHALL ISLANDS', 'US', 'Y', TO_DATE('08/15/2023 12:51:16', 'MM/DD/YYYY HH24:MI:SS'), 
    'Anna');
Insert into R360_USER_PREF.R360_APP_STATE
   (STATE_CD, STATE_NAME, COUNTRY_CD, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER)
 Values
   ('MP', 'Northern Mariana Islands', 'US', 'Y', TO_DATE('08/15/2023 12:51:16', 'MM/DD/YYYY HH24:MI:SS'), 
    'Anna');
COMMIT;


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\USER_PROFILE-LOOKUP_23.09\user_profile_lookup\DML\R360_APP_TIME_ZONE.sql

SET DEFINE OFF;
Insert into R360_USER_PREF.R360_APP_TIME_ZONE
   (TIME_ZONE, TIME_ZONE_NAME, TIME_ZONE_DISPLAY_NAME, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER)
 Values
   ('ACST', 'Australian Central Standard Time', '(GMT+ 09:30) Australian Central Standard Time', 'Y', TO_DATE('08/15/2023 12:44:30', 'MM/DD/YYYY HH24:MI:SS'), 
    'Anna');
Insert into R360_USER_PREF.R360_APP_TIME_ZONE
   (TIME_ZONE, TIME_ZONE_NAME, TIME_ZONE_DISPLAY_NAME, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER)
 Values
   ('AZT', 'Azerbaijan Time', '(GMT+04:00) Azerbaijan Standard Time', 'Y', TO_DATE('08/15/2023 12:44:30', 'MM/DD/YYYY HH24:MI:SS'), 
    'Anna');
Insert into R360_USER_PREF.R360_APP_TIME_ZONE
   (TIME_ZONE, TIME_ZONE_NAME, TIME_ZONE_DISPLAY_NAME, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER)
 Values
   ('WET', 'Western European Time', '(GMT+00:00) Western European Time', 'Y', TO_DATE('08/15/2023 12:44:30', 'MM/DD/YYYY HH24:MI:SS'), 
    'Anna');
Insert into R360_USER_PREF.R360_APP_TIME_ZONE
   (TIME_ZONE, TIME_ZONE_NAME, TIME_ZONE_DISPLAY_NAME, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER)
 Values
   ('YEKT', 'Yekaterinburg Time', '(GMT+05:00) Yekaterinburg Standard Time', 'Y', TO_DATE('08/15/2023 12:44:30', 'MM/DD/YYYY HH24:MI:SS'), 
    'Anna');
Insert into R360_USER_PREF.R360_APP_TIME_ZONE
   (TIME_ZONE, TIME_ZONE_NAME, TIME_ZONE_DISPLAY_NAME, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER)
 Values
   ('MSK', 'Moscow Time', '(GMT+03:00) Moscow Time', 'Y', TO_DATE('08/15/2023 12:44:30', 'MM/DD/YYYY HH24:MI:SS'), 
    'Anna');
Insert into R360_USER_PREF.R360_APP_TIME_ZONE
   (TIME_ZONE, TIME_ZONE_NAME, TIME_ZONE_DISPLAY_NAME, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER)
 Values
   ('OMST', 'Omsk Time', '(GMT+06:00) Omsk Time', 'Y', TO_DATE('08/15/2023 12:44:30', 'MM/DD/YYYY HH24:MI:SS'), 
    'Anna');
Insert into R360_USER_PREF.R360_APP_TIME_ZONE
   (TIME_ZONE, TIME_ZONE_NAME, TIME_ZONE_DISPLAY_NAME, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER)
 Values
   ('SA/AST', 'Arabia Standard Time', '(GMT+03:00) Arabia Standard Time', 'Y', TO_DATE('08/15/2023 12:44:30', 'MM/DD/YYYY HH24:MI:SS'), 
    'Anna');
Insert into R360_USER_PREF.R360_APP_TIME_ZONE
   (TIME_ZONE, TIME_ZONE_NAME, TIME_ZONE_DISPLAY_NAME, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER)
 Values
   ('SAST', 'South African Standard Time', '(GMT+02:00) South African Standard Time', 'Y', TO_DATE('08/15/2023 12:44:30', 'MM/DD/YYYY HH24:MI:SS'), 
    'Anna');
Insert into R360_USER_PREF.R360_APP_TIME_ZONE
   (TIME_ZONE, TIME_ZONE_NAME, TIME_ZONE_DISPLAY_NAME, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER)
 Values
   ('EAT', 'East Africa Time', '(GMT+03:00) East Africa Time', 'Y', TO_DATE('08/15/2023 12:44:30', 'MM/DD/YYYY HH24:MI:SS'), 
    'Anna');
Insert into R360_USER_PREF.R360_APP_TIME_ZONE
   (TIME_ZONE, TIME_ZONE_NAME, TIME_ZONE_DISPLAY_NAME, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER)
 Values
   ('IL/IST', 'Israel Standard Time', '(GMT+02:00) Israel Standard Time', 'Y', TO_DATE('08/15/2023 12:44:30', 'MM/DD/YYYY HH24:MI:SS'), 
    'Anna');
Insert into R360_USER_PREF.R360_APP_TIME_ZONE
   (TIME_ZONE, TIME_ZONE_NAME, TIME_ZONE_DISPLAY_NAME, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER)
 Values
   ('ZM/CAT', 'Central Africa Time', '(GMT+02:00) Central Africa Time', 'Y', TO_DATE('08/15/2023 12:44:30', 'MM/DD/YYYY HH24:MI:SS'), 
    'Anna');
Insert into R360_USER_PREF.R360_APP_TIME_ZONE
   (TIME_ZONE, TIME_ZONE_NAME, TIME_ZONE_DISPLAY_NAME, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER)
 Values
   ('MZ/CAT', 'Central Africa Time', '(GMT+02:00) Central Africa Time', 'Y', TO_DATE('08/15/2023 12:44:30', 'MM/DD/YYYY HH24:MI:SS'), 
    'Anna');
Insert into R360_USER_PREF.R360_APP_TIME_ZONE
   (TIME_ZONE, TIME_ZONE_NAME, TIME_ZONE_DISPLAY_NAME, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER)
 Values
   ('BW/CAT', 'Central Africa Time', '(GMT+02:00) Central Africa Time', 'Y', TO_DATE('08/15/2023 12:44:30', 'MM/DD/YYYY HH24:MI:SS'), 
    'Anna');
Insert into R360_USER_PREF.R360_APP_TIME_ZONE
   (TIME_ZONE, TIME_ZONE_NAME, TIME_ZONE_DISPLAY_NAME, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER)
 Values
   ('FET', 'Further-Eastern European Time', '(GMT+03:00) Further-Eastern European Time', 'Y', TO_DATE('08/15/2023 12:44:31', 'MM/DD/YYYY HH24:MI:SS'), 
    'Anna');
Insert into R360_USER_PREF.R360_APP_TIME_ZONE
   (TIME_ZONE, TIME_ZONE_NAME, TIME_ZONE_DISPLAY_NAME, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER)
 Values
   ('UZT', 'Uzbekistan Time', '(GMT+05:00) Uzbekistan Standard Time', 'Y', TO_DATE('08/15/2023 12:44:31', 'MM/DD/YYYY HH24:MI:SS'), 
    'Anna');
Insert into R360_USER_PREF.R360_APP_TIME_ZONE
   (TIME_ZONE, TIME_ZONE_NAME, TIME_ZONE_DISPLAY_NAME, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER)
 Values
   ('PET', 'Peru Time', '(GMT-05:00) Peru Time', 'Y', TO_DATE('08/15/2023 12:44:31', 'MM/DD/YYYY HH24:MI:SS'), 
    'Anna');
Insert into R360_USER_PREF.R360_APP_TIME_ZONE
   (TIME_ZONE, TIME_ZONE_NAME, TIME_ZONE_DISPLAY_NAME, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER)
 Values
   ('AE/GST', 'Gulf Standard Time', '(GMT+04:00) Gulf Standard Time', 'Y', TO_DATE('08/15/2023 12:44:31', 'MM/DD/YYYY HH24:MI:SS'), 
    'Anna');
Insert into R360_USER_PREF.R360_APP_TIME_ZONE
   (TIME_ZONE, TIME_ZONE_NAME, TIME_ZONE_DISPLAY_NAME, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER)
 Values
   ('IE/IST', 'Irish Standard Time', '(GMT) Greenwich Mean Time : Dublin, Edinburgh, Lisbon, London', 'Y', TO_DATE('08/15/2023 12:44:31', 'MM/DD/YYYY HH24:MI:SS'), 
    'Anna');
Insert into R360_USER_PREF.R360_APP_TIME_ZONE
   (TIME_ZONE, TIME_ZONE_NAME, TIME_ZONE_DISPLAY_NAME, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER)
 Values
   ('BH/AST', 'Arabia Standard Time', '(GMT+03:00) Arabia Standard Time', 'Y', TO_DATE('08/15/2023 12:44:31', 'MM/DD/YYYY HH24:MI:SS'), 
    'Anna');
Insert into R360_USER_PREF.R360_APP_TIME_ZONE
   (TIME_ZONE, TIME_ZONE_NAME, TIME_ZONE_DISPLAY_NAME, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER)
 Values
   ('CVT', 'Cape Verde Time', '(GMT-01:00) Cabo Verde Is.', 'Y', TO_DATE('08/15/2023 12:44:31', 'MM/DD/YYYY HH24:MI:SS'), 
    'Anna');
Insert into R360_USER_PREF.R360_APP_TIME_ZONE
   (TIME_ZONE, TIME_ZONE_NAME, TIME_ZONE_DISPLAY_NAME, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER)
 Values
   ('GET', 'Georgia Standard Time', '(GMT+04:00) Georgia Standard Time', 'Y', TO_DATE('08/15/2023 12:44:31', 'MM/DD/YYYY HH24:MI:SS'), 
    'Anna');
Insert into R360_USER_PREF.R360_APP_TIME_ZONE
   (TIME_ZONE, TIME_ZONE_NAME, TIME_ZONE_DISPLAY_NAME, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER)
 Values
   ('IRKT', 'Irkutsk Time', '(GMT+08:00) Irkutsk Time', 'Y', TO_DATE('08/15/2023 12:44:31', 'MM/DD/YYYY HH24:MI:SS'), 
    'Anna');
Insert into R360_USER_PREF.R360_APP_TIME_ZONE
   (TIME_ZONE, TIME_ZONE_NAME, TIME_ZONE_DISPLAY_NAME, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER)
 Values
   ('KRAT', 'Krasnoyarsk Time', '(GMT+07:00) Krasnoyarsk Time', 'Y', TO_DATE('08/15/2023 12:44:31', 'MM/DD/YYYY HH24:MI:SS'), 
    'Anna');
Insert into R360_USER_PREF.R360_APP_TIME_ZONE
   (TIME_ZONE, TIME_ZONE_NAME, TIME_ZONE_DISPLAY_NAME, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER)
 Values
   ('YAKT', 'Yakutsk Time', '(GMT+09:00) Yakutsk Time', 'Y', TO_DATE('08/15/2023 12:44:31', 'MM/DD/YYYY HH24:MI:SS'), 
    'Anna');
Insert into R360_USER_PREF.R360_APP_TIME_ZONE
   (TIME_ZONE, TIME_ZONE_NAME, TIME_ZONE_DISPLAY_NAME, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER)
 Values
   ('RW/CAT', 'Central Africa Time', '(GMT+02:00) Central Africa Time', 'Y', TO_DATE('08/15/2023 12:44:31', 'MM/DD/YYYY HH24:MI:SS'), 
    'Anna');
Insert into R360_USER_PREF.R360_APP_TIME_ZONE
   (TIME_ZONE, TIME_ZONE_NAME, TIME_ZONE_DISPLAY_NAME, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER)
 Values
   ('ALMT', 'Alma-Ata Time', '(GMT+06:00) Alma-Ata Time', 'Y', TO_DATE('08/15/2023 12:44:31', 'MM/DD/YYYY HH24:MI:SS'), 
    'Anna');
Insert into R360_USER_PREF.R360_APP_TIME_ZONE
   (TIME_ZONE, TIME_ZONE_NAME, TIME_ZONE_DISPLAY_NAME, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER)
 Values
   ('BRT', 'Brasilia Time', '(GMT-03:00) Brasilia', 'Y', TO_DATE('08/15/2023 12:44:31', 'MM/DD/YYYY HH24:MI:SS'), 
    'Anna');
Insert into R360_USER_PREF.R360_APP_TIME_ZONE
   (TIME_ZONE, TIME_ZONE_NAME, TIME_ZONE_DISPLAY_NAME, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER)
 Values
   ('MUT', 'Mauritius Time', '(GMT+04:00) Mauritius Time', 'Y', TO_DATE('08/15/2023 12:44:31', 'MM/DD/YYYY HH24:MI:SS'), 
    'Anna');
Insert into R360_USER_PREF.R360_APP_TIME_ZONE
   (TIME_ZONE, TIME_ZONE_NAME, TIME_ZONE_DISPLAY_NAME, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER)
 Values
   ('KGT', 'Kyrgyzstan Time', '(GMT+06:00) Kyrgyzstan Time', 'Y', TO_DATE('08/15/2023 12:44:31', 'MM/DD/YYYY HH24:MI:SS'), 
    'Anna');
Insert into R360_USER_PREF.R360_APP_TIME_ZONE
   (TIME_ZONE, TIME_ZONE_NAME, TIME_ZONE_DISPLAY_NAME, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER)
 Values
   ('CT/CST', 'China Standard Time', '(GMT+08:00) China Standard Time', 'Y', TO_DATE('08/15/2023 12:44:31', 'MM/DD/YYYY HH24:MI:SS'), 
    'Anna');
Insert into R360_USER_PREF.R360_APP_TIME_ZONE
   (TIME_ZONE, TIME_ZONE_NAME, TIME_ZONE_DISPLAY_NAME, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER)
 Values
   ('ICT', 'Indochina Time', '(GMT+07:00) Indochina Time', 'Y', TO_DATE('08/15/2023 12:44:31', 'MM/DD/YYYY HH24:MI:SS'), 
    'Anna');
Insert into R360_USER_PREF.R360_APP_TIME_ZONE
   (TIME_ZONE, TIME_ZONE_NAME, TIME_ZONE_DISPLAY_NAME, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER)
 Values
   ('AEST', 'East Australian Standard', '(GMT+10:00) Australian Eastern Standard Time', 'Y', TO_DATE('08/15/2023 12:44:31', 'MM/DD/YYYY HH24:MI:SS'), 
    'Anna');
Insert into R360_USER_PREF.R360_APP_TIME_ZONE
   (TIME_ZONE, TIME_ZONE_NAME, TIME_ZONE_DISPLAY_NAME, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER)
 Values
   ('ART', 'Argentina Time', '(GMT-03:00) Argentina Standard Time', 'Y', TO_DATE('08/15/2023 12:44:31', 'MM/DD/YYYY HH24:MI:SS'), 
    'Anna');
Insert into R360_USER_PREF.R360_APP_TIME_ZONE
   (TIME_ZONE, TIME_ZONE_NAME, TIME_ZONE_DISPLAY_NAME, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER)
 Values
   ('CLT', 'Chile Standard Time', '(GMT-04:00) Chile Standard Time', 'Y', TO_DATE('08/15/2023 12:44:31', 'MM/DD/YYYY HH24:MI:SS'), 
    'Anna');
Insert into R360_USER_PREF.R360_APP_TIME_ZONE
   (TIME_ZONE, TIME_ZONE_NAME, TIME_ZONE_DISPLAY_NAME, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER)
 Values
   ('COT', 'Colombia Time', '(GMT-05:00) Colombia Time', 'Y', TO_DATE('08/15/2023 12:44:31', 'MM/DD/YYYY HH24:MI:SS'), 
    'Anna');
Insert into R360_USER_PREF.R360_APP_TIME_ZONE
   (TIME_ZONE, TIME_ZONE_NAME, TIME_ZONE_DISPLAY_NAME, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER)
 Values
   ('ABT', 'Amsterdam Basis Time', '(GMT+01:00) Central European Time', 'Y', TO_DATE('08/15/2023 12:44:31', 'MM/DD/YYYY HH24:MI:SS'), 
    'Anna');
Insert into R360_USER_PREF.R360_APP_TIME_ZONE
   (TIME_ZONE, TIME_ZONE_NAME, TIME_ZONE_DISPLAY_NAME, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER)
 Values
   ('AHST', 'Alaska-Hawaii Standard', '(GMT-10:00) Hawaii-Aleutian Standard Time', 'Y', TO_DATE('08/15/2023 12:44:31', 'MM/DD/YYYY HH24:MI:SS'), 
    'Anna');
Insert into R360_USER_PREF.R360_APP_TIME_ZONE
   (TIME_ZONE, TIME_ZONE_NAME, TIME_ZONE_DISPLAY_NAME, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER)
 Values
   ('AST', 'Atlantic Standard Time', '(GMT-04:00) Atlantic Time ', 'Y', TO_DATE('08/15/2023 12:44:31', 'MM/DD/YYYY HH24:MI:SS'), 
    'Anna');
Insert into R360_USER_PREF.R360_APP_TIME_ZONE
   (TIME_ZONE, TIME_ZONE_NAME, TIME_ZONE_DISPLAY_NAME, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER)
 Values
   ('AT', 'Azores Time', '(GMT-01:00) Azores Time', 'Y', TO_DATE('08/15/2023 12:44:31', 'MM/DD/YYYY HH24:MI:SS'), 
    'Anna');
Insert into R360_USER_PREF.R360_APP_TIME_ZONE
   (TIME_ZONE, TIME_ZONE_NAME, TIME_ZONE_DISPLAY_NAME, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER)
 Values
   ('BDT', 'Indian Standard Time', '(GMT+06:00) Bangladesh Standard Time', 'Y', TO_DATE('08/15/2023 12:44:31', 'MM/DD/YYYY HH24:MI:SS'), 
    'Anna');
Insert into R360_USER_PREF.R360_APP_TIME_ZONE
   (TIME_ZONE, TIME_ZONE_NAME, TIME_ZONE_DISPLAY_NAME, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER)
 Values
   ('BST', 'British Summer', '(GMT+01:00) British Summer', 'Y', TO_DATE('08/15/2023 12:44:31', 'MM/DD/YYYY HH24:MI:SS'), 
    'Anna');
Insert into R360_USER_PREF.R360_APP_TIME_ZONE
   (TIME_ZONE, TIME_ZONE_NAME, TIME_ZONE_DISPLAY_NAME, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER)
 Values
   ('BT', 'Baghdad Time', '(GMT+03:00) Arabian Standard Time', 'Y', TO_DATE('08/15/2023 12:44:32', 'MM/DD/YYYY HH24:MI:SS'), 
    'Anna');
Insert into R360_USER_PREF.R360_APP_TIME_ZONE
   (TIME_ZONE, TIME_ZONE_NAME, TIME_ZONE_DISPLAY_NAME, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER)
 Values
   ('CAT', 'Central Alaska Time', '(GMT-10:00) Hawaii-Aleutian Standard Time', 'Y', TO_DATE('08/15/2023 12:44:32', 'MM/DD/YYYY HH24:MI:SS'), 
    'Anna');
Insert into R360_USER_PREF.R360_APP_TIME_ZONE
   (TIME_ZONE, TIME_ZONE_NAME, TIME_ZONE_DISPLAY_NAME, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER)
 Values
   ('CCT', 'China Coast Time, Ussr Zone 7', '(GMT+08:00) China Coast Time', 'Y', TO_DATE('08/15/2023 12:44:32', 'MM/DD/YYYY HH24:MI:SS'), 
    'Anna');
Insert into R360_USER_PREF.R360_APP_TIME_ZONE
   (TIME_ZONE, TIME_ZONE_NAME, TIME_ZONE_DISPLAY_NAME, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER)
 Values
   ('CET', 'Central European', '(GMT+01:00) Central European Time', 'Y', TO_DATE('08/15/2023 12:44:32', 'MM/DD/YYYY HH24:MI:SS'), 
    'Anna');
Insert into R360_USER_PREF.R360_APP_TIME_ZONE
   (TIME_ZONE, TIME_ZONE_NAME, TIME_ZONE_DISPLAY_NAME, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER)
 Values
   ('CST', 'Central Standard Time', '(GMT-06:00) Central Standard Time', 'Y', TO_DATE('08/15/2023 12:44:32', 'MM/DD/YYYY HH24:MI:SS'), 
    'Anna');
Insert into R360_USER_PREF.R360_APP_TIME_ZONE
   (TIME_ZONE, TIME_ZONE_NAME, TIME_ZONE_DISPLAY_NAME, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER)
 Values
   ('DBT', 'Dubai Time', '(GMT+04:00) Gulf Standard Time', 'Y', TO_DATE('08/15/2023 12:44:32', 'MM/DD/YYYY HH24:MI:SS'), 
    'Anna');
Insert into R360_USER_PREF.R360_APP_TIME_ZONE
   (TIME_ZONE, TIME_ZONE_NAME, TIME_ZONE_DISPLAY_NAME, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER)
 Values
   ('EAST', 'Easter Island Standard Time', '(GMT-06:00) Easter Island Time', 'Y', TO_DATE('08/15/2023 12:44:32', 'MM/DD/YYYY HH24:MI:SS'), 
    'Anna');
Insert into R360_USER_PREF.R360_APP_TIME_ZONE
   (TIME_ZONE, TIME_ZONE_NAME, TIME_ZONE_DISPLAY_NAME, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER)
 Values
   ('EDT', 'Eastern Daylight Time', '(GMT-04:00) Eastern Daylight Time', 'Y', TO_DATE('08/15/2023 12:44:32', 'MM/DD/YYYY HH24:MI:SS'), 
    'Anna');
Insert into R360_USER_PREF.R360_APP_TIME_ZONE
   (TIME_ZONE, TIME_ZONE_NAME, TIME_ZONE_DISPLAY_NAME, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER)
 Values
   ('EET', 'Eastern European', '(GMT+02:00) Eastern European', 'Y', TO_DATE('08/15/2023 12:44:32', 'MM/DD/YYYY HH24:MI:SS'), 
    'Anna');
Insert into R360_USER_PREF.R360_APP_TIME_ZONE
   (TIME_ZONE, TIME_ZONE_NAME, TIME_ZONE_DISPLAY_NAME, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER)
 Values
   ('EST', 'Eastern Standard Time', '(GMT-05:00) Eastern Standard Time', 'Y', TO_DATE('08/15/2023 12:44:32', 'MM/DD/YYYY HH24:MI:SS'), 
    'Anna');
Insert into R360_USER_PREF.R360_APP_TIME_ZONE
   (TIME_ZONE, TIME_ZONE_NAME, TIME_ZONE_DISPLAY_NAME, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER)
 Values
   ('ET', 'Eastern Time', '(GMT-05:00) Eastern Time', 'Y', TO_DATE('08/15/2023 12:44:32', 'MM/DD/YYYY HH24:MI:SS'), 
    'Anna');
Insert into R360_USER_PREF.R360_APP_TIME_ZONE
   (TIME_ZONE, TIME_ZONE_NAME, TIME_ZONE_DISPLAY_NAME, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER)
 Values
   ('FST', 'French Summer Time', '(GMT+02:00) Central European Summer Time', 'Y', TO_DATE('08/15/2023 12:44:32', 'MM/DD/YYYY HH24:MI:SS'), 
    'Anna');
Insert into R360_USER_PREF.R360_APP_TIME_ZONE
   (TIME_ZONE, TIME_ZONE_NAME, TIME_ZONE_DISPLAY_NAME, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER)
 Values
   ('FWT', 'French Winter Time', '(GMT+01:00) Central European Time', 'Y', TO_DATE('08/15/2023 12:44:32', 'MM/DD/YYYY HH24:MI:SS'), 
    'Anna');
Insert into R360_USER_PREF.R360_APP_TIME_ZONE
   (TIME_ZONE, TIME_ZONE_NAME, TIME_ZONE_DISPLAY_NAME, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER)
 Values
   ('GMT', 'Greenwich Mean Time', '(GMT) Greenwich Mean Time ', 'Y', TO_DATE('08/15/2023 12:44:32', 'MM/DD/YYYY HH24:MI:SS'), 
    'Anna');
Insert into R360_USER_PREF.R360_APP_TIME_ZONE
   (TIME_ZONE, TIME_ZONE_NAME, TIME_ZONE_DISPLAY_NAME, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER)
 Values
   ('GMT1', 'Greenwich Mean Time Plus 1 Hour', '(GMT+01:00) Greenwich Mean Time Plus 1 Hour', 'Y', TO_DATE('08/15/2023 12:44:32', 'MM/DD/YYYY HH24:MI:SS'), 
    'Anna');
Insert into R360_USER_PREF.R360_APP_TIME_ZONE
   (TIME_ZONE, TIME_ZONE_NAME, TIME_ZONE_DISPLAY_NAME, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER)
 Values
   ('GST', 'Guam Standard, User Zone 9', '(GMT+10:00) Guam', 'Y', TO_DATE('08/15/2023 12:44:32', 'MM/DD/YYYY HH24:MI:SS'), 
    'Anna');
Insert into R360_USER_PREF.R360_APP_TIME_ZONE
   (TIME_ZONE, TIME_ZONE_NAME, TIME_ZONE_DISPLAY_NAME, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER)
 Values
   ('HDT', 'Hawaii Daylight Time', '(GMT-9:00) Hawaii-Aleutian Daylight Time', 'Y', TO_DATE('08/15/2023 12:44:32', 'MM/DD/YYYY HH24:MI:SS'), 
    'Anna');
Insert into R360_USER_PREF.R360_APP_TIME_ZONE
   (TIME_ZONE, TIME_ZONE_NAME, TIME_ZONE_DISPLAY_NAME, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER)
 Values
   ('HKT', 'Hong Kong Time', '(GMT+08:00) Hong Kong Time', 'Y', TO_DATE('08/15/2023 12:44:32', 'MM/DD/YYYY HH24:MI:SS'), 
    'Anna');
Insert into R360_USER_PREF.R360_APP_TIME_ZONE
   (TIME_ZONE, TIME_ZONE_NAME, TIME_ZONE_DISPLAY_NAME, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER)
 Values
   ('HST', 'Hawaii Standard Time', '(GMT-10:00) Hawaii Standard Time', 'Y', TO_DATE('08/15/2023 12:44:32', 'MM/DD/YYYY HH24:MI:SS'), 
    'Anna');
Insert into R360_USER_PREF.R360_APP_TIME_ZONE
   (TIME_ZONE, TIME_ZONE_NAME, TIME_ZONE_DISPLAY_NAME, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER)
 Values
   ('IDLE', 'International Date Line East', '(GMT+12:00) International Date Line East', 'Y', TO_DATE('08/15/2023 12:44:32', 'MM/DD/YYYY HH24:MI:SS'), 
    'Anna');
Insert into R360_USER_PREF.R360_APP_TIME_ZONE
   (TIME_ZONE, TIME_ZONE_NAME, TIME_ZONE_DISPLAY_NAME, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER)
 Values
   ('IDLW', 'International Date Line West', '(GMT-12:00) International Date Line West', 'Y', TO_DATE('08/15/2023 12:44:32', 'MM/DD/YYYY HH24:MI:SS'), 
    'Anna');
Insert into R360_USER_PREF.R360_APP_TIME_ZONE
   (TIME_ZONE, TIME_ZONE_NAME, TIME_ZONE_DISPLAY_NAME, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER)
 Values
   ('IDT', 'Indonesia Time', '(GMT+07:00) Indonesia Time', 'Y', TO_DATE('08/15/2023 12:44:32', 'MM/DD/YYYY HH24:MI:SS'), 
    'Anna');
Insert into R360_USER_PREF.R360_APP_TIME_ZONE
   (TIME_ZONE, TIME_ZONE_NAME, TIME_ZONE_DISPLAY_NAME, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER)
 Values
   ('IST', 'Indian Standard Time', '(GMT+05:30) Indian Standard Time', 'Y', TO_DATE('08/15/2023 12:44:32', 'MM/DD/YYYY HH24:MI:SS'), 
    'Anna');
Insert into R360_USER_PREF.R360_APP_TIME_ZONE
   (TIME_ZONE, TIME_ZONE_NAME, TIME_ZONE_DISPLAY_NAME, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER)
 Values
   ('JST', 'Japan Standard Time, Ussr Zone 8', '(GMT+09:00) Japan Standard Time', 'Y', TO_DATE('08/15/2023 12:44:32', 'MM/DD/YYYY HH24:MI:SS'), 
    'Anna');
Insert into R360_USER_PREF.R360_APP_TIME_ZONE
   (TIME_ZONE, TIME_ZONE_NAME, TIME_ZONE_DISPLAY_NAME, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER)
 Values
   ('KST', 'Korea Standard Time', '(GMT+09:00) Korea Standard Time', 'Y', TO_DATE('08/15/2023 12:44:32', 'MM/DD/YYYY HH24:MI:SS'), 
    'Anna');
Insert into R360_USER_PREF.R360_APP_TIME_ZONE
   (TIME_ZONE, TIME_ZONE_NAME, TIME_ZONE_DISPLAY_NAME, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER)
 Values
   ('MDT', 'Mountain Daylight Time', '(GMT-06:00) Mountain Daylight Time', 'Y', TO_DATE('08/15/2023 12:44:32', 'MM/DD/YYYY HH24:MI:SS'), 
    'Anna');
Insert into R360_USER_PREF.R360_APP_TIME_ZONE
   (TIME_ZONE, TIME_ZONE_NAME, TIME_ZONE_DISPLAY_NAME, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER)
 Values
   ('MEST', 'Middle European Summer', '(GMT+02:00) Central European Summer Time', 'Y', TO_DATE('08/15/2023 12:44:32', 'MM/DD/YYYY HH24:MI:SS'), 
    'Anna');
Insert into R360_USER_PREF.R360_APP_TIME_ZONE
   (TIME_ZONE, TIME_ZONE_NAME, TIME_ZONE_DISPLAY_NAME, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER)
 Values
   ('MET', 'Middle European Time', '(GMT+01:00) Central European Time', 'Y', TO_DATE('08/15/2023 12:44:32', 'MM/DD/YYYY HH24:MI:SS'), 
    'Anna');
Insert into R360_USER_PREF.R360_APP_TIME_ZONE
   (TIME_ZONE, TIME_ZONE_NAME, TIME_ZONE_DISPLAY_NAME, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER)
 Values
   ('MEWT', 'Middle European Winter Time', '(GMT+01:00) Central European Time', 'Y', TO_DATE('08/15/2023 12:44:32', 'MM/DD/YYYY HH24:MI:SS'), 
    'Anna');
Insert into R360_USER_PREF.R360_APP_TIME_ZONE
   (TIME_ZONE, TIME_ZONE_NAME, TIME_ZONE_DISPLAY_NAME, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER)
 Values
   ('MPTT02', 'Mountain Pacific Time 2', '(GMT-07:00) Mountain Pacific Time 2', 'Y', TO_DATE('08/15/2023 12:44:32', 'MM/DD/YYYY HH24:MI:SS'), 
    'Anna');
Insert into R360_USER_PREF.R360_APP_TIME_ZONE
   (TIME_ZONE, TIME_ZONE_NAME, TIME_ZONE_DISPLAY_NAME, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER)
 Values
   ('MST', 'Mountain Standard Time', '(GMT-07:00) Mountain Time ', 'Y', TO_DATE('08/15/2023 12:44:32', 'MM/DD/YYYY HH24:MI:SS'), 
    'Anna');
Insert into R360_USER_PREF.R360_APP_TIME_ZONE
   (TIME_ZONE, TIME_ZONE_NAME, TIME_ZONE_DISPLAY_NAME, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER)
 Values
   ('MYT', 'Malaysia Time', '(GMT+08:00) Malaysia Time', 'Y', TO_DATE('08/15/2023 12:44:32', 'MM/DD/YYYY HH24:MI:SS'), 
    'Anna');
Insert into R360_USER_PREF.R360_APP_TIME_ZONE
   (TIME_ZONE, TIME_ZONE_NAME, TIME_ZONE_DISPLAY_NAME, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER)
 Values
   ('NT', 'Nome Time', '(GMT-08:00) Nome Time', 'Y', TO_DATE('08/15/2023 12:44:32', 'MM/DD/YYYY HH24:MI:SS'), 
    'Anna');
Insert into R360_USER_PREF.R360_APP_TIME_ZONE
   (TIME_ZONE, TIME_ZONE_NAME, TIME_ZONE_DISPLAY_NAME, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER)
 Values
   ('NZDT', 'New Zealand Daylight Time', '(GMT+13:00) New Zealand Daylight Time', 'Y', TO_DATE('08/15/2023 12:44:32', 'MM/DD/YYYY HH24:MI:SS'), 
    'Anna');
Insert into R360_USER_PREF.R360_APP_TIME_ZONE
   (TIME_ZONE, TIME_ZONE_NAME, TIME_ZONE_DISPLAY_NAME, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER)
 Values
   ('NZST', 'New Zealand Standard', '(GMT+12:00) New Zealand Standard', 'Y', TO_DATE('08/15/2023 12:44:33', 'MM/DD/YYYY HH24:MI:SS'), 
    'Anna');
Insert into R360_USER_PREF.R360_APP_TIME_ZONE
   (TIME_ZONE, TIME_ZONE_NAME, TIME_ZONE_DISPLAY_NAME, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER)
 Values
   ('NZT', 'New Zealand Time', '(GMT+12:00) New Zealand Time', 'Y', TO_DATE('08/15/2023 12:44:33', 'MM/DD/YYYY HH24:MI:SS'), 
    'Anna');
Insert into R360_USER_PREF.R360_APP_TIME_ZONE
   (TIME_ZONE, TIME_ZONE_NAME, TIME_ZONE_DISPLAY_NAME, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER)
 Values
   ('PDT', 'Pacific Daylight Time', '(GMT-07:00) Pacific Daylight Time', 'Y', TO_DATE('08/15/2023 12:44:33', 'MM/DD/YYYY HH24:MI:SS'), 
    'Anna');
Insert into R360_USER_PREF.R360_APP_TIME_ZONE
   (TIME_ZONE, TIME_ZONE_NAME, TIME_ZONE_DISPLAY_NAME, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER)
 Values
   ('PHT', 'Philippines Time', '(GMT+08:00) Philippines Time', 'Y', TO_DATE('08/15/2023 12:44:33', 'MM/DD/YYYY HH24:MI:SS'), 
    'Anna');
Insert into R360_USER_PREF.R360_APP_TIME_ZONE
   (TIME_ZONE, TIME_ZONE_NAME, TIME_ZONE_DISPLAY_NAME, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER)
 Values
   ('PKST', 'Pakistan Summer Time', '(GMT+05:00) Pakistan Time', 'Y', TO_DATE('08/15/2023 12:44:33', 'MM/DD/YYYY HH24:MI:SS'), 
    'Anna');
Insert into R360_USER_PREF.R360_APP_TIME_ZONE
   (TIME_ZONE, TIME_ZONE_NAME, TIME_ZONE_DISPLAY_NAME, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER)
 Values
   ('PKT', 'Pakistan Time', '(GMT+05:00) Pakistan Time', 'Y', TO_DATE('08/15/2023 12:44:33', 'MM/DD/YYYY HH24:MI:SS'), 
    'Anna');
Insert into R360_USER_PREF.R360_APP_TIME_ZONE
   (TIME_ZONE, TIME_ZONE_NAME, TIME_ZONE_DISPLAY_NAME, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER)
 Values
   ('PST', 'Pacific Standard Time', '(GMT-08:00) Pacific Time ', 'Y', TO_DATE('08/15/2023 12:44:33', 'MM/DD/YYYY HH24:MI:SS'), 
    'Anna');
Insert into R360_USER_PREF.R360_APP_TIME_ZONE
   (TIME_ZONE, TIME_ZONE_NAME, TIME_ZONE_DISPLAY_NAME, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER)
 Values
   ('SGT', 'Singapore Time', '(GMT+08:00) Singapore Time', 'Y', TO_DATE('08/15/2023 12:44:33', 'MM/DD/YYYY HH24:MI:SS'), 
    'Anna');
Insert into R360_USER_PREF.R360_APP_TIME_ZONE
   (TIME_ZONE, TIME_ZONE_NAME, TIME_ZONE_DISPLAY_NAME, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER)
 Values
   ('SLKT', 'Sri Lanka Time', '(GMT+05:30) India Standard Time', 'Y', TO_DATE('08/15/2023 12:44:33', 'MM/DD/YYYY HH24:MI:SS'), 
    'Anna');
Insert into R360_USER_PREF.R360_APP_TIME_ZONE
   (TIME_ZONE, TIME_ZONE_NAME, TIME_ZONE_DISPLAY_NAME, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER)
 Values
   ('SST', 'Swedish Summer Time', '(GMT+02:00) Central European Summer Time', 'Y', TO_DATE('08/15/2023 12:44:33', 'MM/DD/YYYY HH24:MI:SS'), 
    'Anna');
Insert into R360_USER_PREF.R360_APP_TIME_ZONE
   (TIME_ZONE, TIME_ZONE_NAME, TIME_ZONE_DISPLAY_NAME, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER)
 Values
   ('SWT', 'Swedish Winter Time', '(GMT+01:00) Central European Time', 'Y', TO_DATE('08/15/2023 12:44:33', 'MM/DD/YYYY HH24:MI:SS'), 
    'Anna');
Insert into R360_USER_PREF.R360_APP_TIME_ZONE
   (TIME_ZONE, TIME_ZONE_NAME, TIME_ZONE_DISPLAY_NAME, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER)
 Values
   ('THLT', 'Thailand Time', '(GMT+07:00) Indochina Time', 'Y', TO_DATE('08/15/2023 12:44:33', 'MM/DD/YYYY HH24:MI:SS'), 
    'Anna');
Insert into R360_USER_PREF.R360_APP_TIME_ZONE
   (TIME_ZONE, TIME_ZONE_NAME, TIME_ZONE_DISPLAY_NAME, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER)
 Values
   ('TWT', 'Taiwan Time', '(GMT+08:00) China Standard Time', 'Y', TO_DATE('08/15/2023 12:44:33', 'MM/DD/YYYY HH24:MI:SS'), 
    'Anna');
Insert into R360_USER_PREF.R360_APP_TIME_ZONE
   (TIME_ZONE, TIME_ZONE_NAME, TIME_ZONE_DISPLAY_NAME, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER)
 Values
   ('VNT', 'Vietnam Time', '(GMT+07:00) Indochina Time', 'Y', TO_DATE('08/15/2023 12:44:33', 'MM/DD/YYYY HH24:MI:SS'), 
    'Anna');
Insert into R360_USER_PREF.R360_APP_TIME_ZONE
   (TIME_ZONE, TIME_ZONE_NAME, TIME_ZONE_DISPLAY_NAME, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER)
 Values
   ('WADT', 'West Australian Daylight', '(GMT+08:00) West Australian Standard', 'Y', TO_DATE('08/15/2023 12:44:33', 'MM/DD/YYYY HH24:MI:SS'), 
    'Anna');
Insert into R360_USER_PREF.R360_APP_TIME_ZONE
   (TIME_ZONE, TIME_ZONE_NAME, TIME_ZONE_DISPLAY_NAME, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER)
 Values
   ('WAST', 'West Australian Standard', '(GMT+08:00) West Australian Standard', 'Y', TO_DATE('08/15/2023 12:44:33', 'MM/DD/YYYY HH24:MI:SS'), 
    'Anna');
Insert into R360_USER_PREF.R360_APP_TIME_ZONE
   (TIME_ZONE, TIME_ZONE_NAME, TIME_ZONE_DISPLAY_NAME, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER)
 Values
   ('WAT', 'West Africa Time', '(GMT+01:00) West Africa Time', 'Y', TO_DATE('08/15/2023 12:44:33', 'MM/DD/YYYY HH24:MI:SS'), 
    'Anna');
Insert into R360_USER_PREF.R360_APP_TIME_ZONE
   (TIME_ZONE, TIME_ZONE_NAME, TIME_ZONE_DISPLAY_NAME, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER)
 Values
   ('YDT', 'Yukon Daylight Time', '(GMT-08:00) Alaska Daylight Time', 'Y', TO_DATE('08/15/2023 12:44:33', 'MM/DD/YYYY HH24:MI:SS'), 
    'Anna');
Insert into R360_USER_PREF.R360_APP_TIME_ZONE
   (TIME_ZONE, TIME_ZONE_NAME, TIME_ZONE_DISPLAY_NAME, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER)
 Values
   ('YST', 'Yukon Standard Time', '(GMT-09:00) Alaska Standard Time ', 'Y', TO_DATE('08/15/2023 12:44:33', 'MM/DD/YYYY HH24:MI:SS'), 
    'Anna');
Insert into R360_USER_PREF.R360_APP_TIME_ZONE
   (TIME_ZONE, TIME_ZONE_NAME, TIME_ZONE_DISPLAY_NAME, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER)
 Values
   ('ZP4', 'Ussr Zone 3', '(GMT+04:00) Russia TZ 3', 'Y', TO_DATE('08/15/2023 12:44:33', 'MM/DD/YYYY HH24:MI:SS'), 
    'Anna');
Insert into R360_USER_PREF.R360_APP_TIME_ZONE
   (TIME_ZONE, TIME_ZONE_NAME, TIME_ZONE_DISPLAY_NAME, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER)
 Values
   ('ZP5', 'Ussr Zone 4', '(GMT+05:00) Russia TZ 4', 'Y', TO_DATE('08/15/2023 12:44:33', 'MM/DD/YYYY HH24:MI:SS'), 
    'Anna');
Insert into R360_USER_PREF.R360_APP_TIME_ZONE
   (TIME_ZONE, TIME_ZONE_NAME, TIME_ZONE_DISPLAY_NAME, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER)
 Values
   ('ZP6', 'Ussr Zone 5', '(GMT+06:00) Russia TZ 5', 'Y', TO_DATE('08/15/2023 12:44:33', 'MM/DD/YYYY HH24:MI:SS'), 
    'Anna');
Insert into R360_USER_PREF.R360_APP_TIME_ZONE
   (TIME_ZONE, TIME_ZONE_NAME, TIME_ZONE_DISPLAY_NAME, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER)
 Values
   ('VLAT', 'Vladivostok Time', '(GMT+10:00) Vladivostok Time', 'Y', TO_DATE('08/15/2023 12:44:33', 'MM/DD/YYYY HH24:MI:SS'), 
    'Anna');
Insert into R360_USER_PREF.R360_APP_TIME_ZONE
   (TIME_ZONE, TIME_ZONE_NAME, TIME_ZONE_DISPLAY_NAME, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER)
 Values
   ('MAGT', 'Magadan Time', '(GMT+11:00) Magadan Time', 'Y', TO_DATE('08/15/2023 12:44:33', 'MM/DD/YYYY HH24:MI:SS'), 
    'Anna');
Insert into R360_USER_PREF.R360_APP_TIME_ZONE
   (TIME_ZONE, TIME_ZONE_NAME, TIME_ZONE_DISPLAY_NAME, ACTV_FLAG, CREATE_DTTM, 
    CREATE_USER)
 Values
   ('TJT', 'Tajikistan Time', '(GMT+05:00) Tajikistan Time', 'Y', TO_DATE('08/15/2023 12:44:33', 'MM/DD/YYYY HH24:MI:SS'), 
    'Anna');
COMMIT;


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\USER_PROFILE-LOOKUP_23.09\user_profile_lookup\DML\RATINGS_MI_TIMEZONE_MAP.sql

SET DEFINE OFF;

Insert into R360_USER_PREF.RATINGS_MI_TIMEZONE_MAP
   (RATINGS_MI_TIMEZONE_MAP_ID, TIME_ZONE, MI_REF_TIMEZONE, CREATE_DTTM, CREATE_USER)
 Values
   (1, 'AHST', 'Hawaiian Standard Time, Aleutian Standard Time', TO_DATE('08/15/2023 17:42:43', 'MM/DD/YYYY HH24:MI:SS'), 'Anna');
Insert into R360_USER_PREF.RATINGS_MI_TIMEZONE_MAP
   (RATINGS_MI_TIMEZONE_MAP_ID, TIME_ZONE, MI_REF_TIMEZONE, CREATE_DTTM, CREATE_USER)
 Values
   (2, 'ABT', 'W. Europe Standard Time', TO_DATE('08/15/2023 17:42:43', 'MM/DD/YYYY HH24:MI:SS'), 'Anna');
Insert into R360_USER_PREF.RATINGS_MI_TIMEZONE_MAP
   (RATINGS_MI_TIMEZONE_MAP_ID, TIME_ZONE, MI_REF_TIMEZONE, CREATE_DTTM, CREATE_USER)
 Values
   (3, 'SA/AST', 'Arab Standard Time', TO_DATE('08/15/2023 17:42:43', 'MM/DD/YYYY HH24:MI:SS'), 'Anna');
Insert into R360_USER_PREF.RATINGS_MI_TIMEZONE_MAP
   (RATINGS_MI_TIMEZONE_MAP_ID, TIME_ZONE, MI_REF_TIMEZONE, CREATE_DTTM, CREATE_USER)
 Values
   (4, 'BH/AST', 'Arab Standard Time', TO_DATE('08/15/2023 17:42:43', 'MM/DD/YYYY HH24:MI:SS'), 'Anna');
Insert into R360_USER_PREF.RATINGS_MI_TIMEZONE_MAP
   (RATINGS_MI_TIMEZONE_MAP_ID, TIME_ZONE, MI_REF_TIMEZONE, CREATE_DTTM, CREATE_USER)
 Values
   (5, 'ART', 'Argentina Standard Time', TO_DATE('08/15/2023 17:42:43', 'MM/DD/YYYY HH24:MI:SS'), 'Anna');
Insert into R360_USER_PREF.RATINGS_MI_TIMEZONE_MAP
   (RATINGS_MI_TIMEZONE_MAP_ID, TIME_ZONE, MI_REF_TIMEZONE, CREATE_DTTM, CREATE_USER)
 Values
   (6, 'AST', 'Atlantic Standard Time', TO_DATE('08/15/2023 17:42:43', 'MM/DD/YYYY HH24:MI:SS'), 'Anna');
Insert into R360_USER_PREF.RATINGS_MI_TIMEZONE_MAP
   (RATINGS_MI_TIMEZONE_MAP_ID, TIME_ZONE, MI_REF_TIMEZONE, CREATE_DTTM, CREATE_USER)
 Values
   (7, 'ACST', 'Cen. Australia Standard Time', TO_DATE('08/15/2023 17:42:43', 'MM/DD/YYYY HH24:MI:SS'), 'Anna');
Insert into R360_USER_PREF.RATINGS_MI_TIMEZONE_MAP
   (RATINGS_MI_TIMEZONE_MAP_ID, TIME_ZONE, MI_REF_TIMEZONE, CREATE_DTTM, CREATE_USER)
 Values
   (8, 'AZT', 'Azerbaijan Standard Time', TO_DATE('08/15/2023 17:42:43', 'MM/DD/YYYY HH24:MI:SS'), 'Anna');
Insert into R360_USER_PREF.RATINGS_MI_TIMEZONE_MAP
   (RATINGS_MI_TIMEZONE_MAP_ID, TIME_ZONE, MI_REF_TIMEZONE, CREATE_DTTM, CREATE_USER)
 Values
   (9, 'AT', 'Azores Standard Time', TO_DATE('08/15/2023 17:42:43', 'MM/DD/YYYY HH24:MI:SS'), 'Anna');
Insert into R360_USER_PREF.RATINGS_MI_TIMEZONE_MAP
   (RATINGS_MI_TIMEZONE_MAP_ID, TIME_ZONE, MI_REF_TIMEZONE, CREATE_DTTM, CREATE_USER)
 Values
   (10, 'BT', 'Arabic Standard Time', TO_DATE('08/15/2023 17:42:43', 'MM/DD/YYYY HH24:MI:SS'), 'Anna');
Insert into R360_USER_PREF.RATINGS_MI_TIMEZONE_MAP
   (RATINGS_MI_TIMEZONE_MAP_ID, TIME_ZONE, MI_REF_TIMEZONE, CREATE_DTTM, CREATE_USER)
 Values
   (11, 'BRT', 'E. South America Standard Time, Montevideo Standard Time', TO_DATE('08/15/2023 17:42:43', 'MM/DD/YYYY HH24:MI:SS'), 'Anna');
Insert into R360_USER_PREF.RATINGS_MI_TIMEZONE_MAP
   (RATINGS_MI_TIMEZONE_MAP_ID, TIME_ZONE, MI_REF_TIMEZONE, CREATE_DTTM, CREATE_USER)
 Values
   (12, 'CVT', 'Cape Verde Standard Time', TO_DATE('08/15/2023 17:42:43', 'MM/DD/YYYY HH24:MI:SS'), 'Anna');
Insert into R360_USER_PREF.RATINGS_MI_TIMEZONE_MAP
   (RATINGS_MI_TIMEZONE_MAP_ID, TIME_ZONE, MI_REF_TIMEZONE, CREATE_DTTM, CREATE_USER)
 Values
   (13, 'ZM/CAT', 'Central Africa Time', TO_DATE('08/15/2023 17:42:43', 'MM/DD/YYYY HH24:MI:SS'), 'Anna');
Insert into R360_USER_PREF.RATINGS_MI_TIMEZONE_MAP
   (RATINGS_MI_TIMEZONE_MAP_ID, TIME_ZONE, MI_REF_TIMEZONE, CREATE_DTTM, CREATE_USER)
 Values
   (14, 'MZ/CAT', 'Central Africa Time', TO_DATE('08/15/2023 17:42:43', 'MM/DD/YYYY HH24:MI:SS'), 'Anna');
Insert into R360_USER_PREF.RATINGS_MI_TIMEZONE_MAP
   (RATINGS_MI_TIMEZONE_MAP_ID, TIME_ZONE, MI_REF_TIMEZONE, CREATE_DTTM, CREATE_USER)
 Values
   (15, 'BW/CAT', 'Central Africa Time', TO_DATE('08/15/2023 17:42:43', 'MM/DD/YYYY HH24:MI:SS'), 'Anna');
Insert into R360_USER_PREF.RATINGS_MI_TIMEZONE_MAP
   (RATINGS_MI_TIMEZONE_MAP_ID, TIME_ZONE, MI_REF_TIMEZONE, CREATE_DTTM, CREATE_USER)
 Values
   (16, 'RW/CAT', 'Central Africa Time', TO_DATE('08/15/2023 17:42:43', 'MM/DD/YYYY HH24:MI:SS'), 'Anna');
Insert into R360_USER_PREF.RATINGS_MI_TIMEZONE_MAP
   (RATINGS_MI_TIMEZONE_MAP_ID, TIME_ZONE, MI_REF_TIMEZONE, CREATE_DTTM, CREATE_USER)
 Values
   (17, 'CAT', 'Hawaiian Standard Time, Aleutian Standard Time', TO_DATE('08/15/2023 17:42:43', 'MM/DD/YYYY HH24:MI:SS'), 'Anna');
Insert into R360_USER_PREF.RATINGS_MI_TIMEZONE_MAP
   (RATINGS_MI_TIMEZONE_MAP_ID, TIME_ZONE, MI_REF_TIMEZONE, CREATE_DTTM, CREATE_USER)
 Values
   (18, 'CET', 'Central Europe Standard Time', TO_DATE('08/15/2023 17:42:43', 'MM/DD/YYYY HH24:MI:SS'), 'Anna');
Insert into R360_USER_PREF.RATINGS_MI_TIMEZONE_MAP
   (RATINGS_MI_TIMEZONE_MAP_ID, TIME_ZONE, MI_REF_TIMEZONE, CREATE_DTTM, CREATE_USER)
 Values
   (19, 'CST', 'Central Standard Time, Central America Standard Time', TO_DATE('08/15/2023 17:42:43', 'MM/DD/YYYY HH24:MI:SS'), 'Anna');
Insert into R360_USER_PREF.RATINGS_MI_TIMEZONE_MAP
   (RATINGS_MI_TIMEZONE_MAP_ID, TIME_ZONE, MI_REF_TIMEZONE, CREATE_DTTM, CREATE_USER)
 Values
   (20, 'CLT', 'Pacific SA Standard Time', TO_DATE('08/15/2023 17:42:43', 'MM/DD/YYYY HH24:MI:SS'), 'Anna');
Insert into R360_USER_PREF.RATINGS_MI_TIMEZONE_MAP
   (RATINGS_MI_TIMEZONE_MAP_ID, TIME_ZONE, MI_REF_TIMEZONE, CREATE_DTTM, CREATE_USER)
 Values
   (21, 'CCT', 'China Standard Time, North Asia East Standard Time', TO_DATE('08/15/2023 17:42:43', 'MM/DD/YYYY HH24:MI:SS'), 'Anna');
Insert into R360_USER_PREF.RATINGS_MI_TIMEZONE_MAP
   (RATINGS_MI_TIMEZONE_MAP_ID, TIME_ZONE, MI_REF_TIMEZONE, CREATE_DTTM, CREATE_USER)
 Values
   (22, 'CT/CST', 'China Standard Time', TO_DATE('08/15/2023 17:42:43', 'MM/DD/YYYY HH24:MI:SS'), 'Anna');
Insert into R360_USER_PREF.RATINGS_MI_TIMEZONE_MAP
   (RATINGS_MI_TIMEZONE_MAP_ID, TIME_ZONE, MI_REF_TIMEZONE, CREATE_DTTM, CREATE_USER)
 Values
   (23, 'COT', 'SA Pacific Standard Time', TO_DATE('08/15/2023 17:42:43', 'MM/DD/YYYY HH24:MI:SS'), 'Anna');
Insert into R360_USER_PREF.RATINGS_MI_TIMEZONE_MAP
   (RATINGS_MI_TIMEZONE_MAP_ID, TIME_ZONE, MI_REF_TIMEZONE, CREATE_DTTM, CREATE_USER)
 Values
   (24, 'DBT', 'Arabian Standard Time', TO_DATE('08/15/2023 17:42:43', 'MM/DD/YYYY HH24:MI:SS'), 'Anna');
Insert into R360_USER_PREF.RATINGS_MI_TIMEZONE_MAP
   (RATINGS_MI_TIMEZONE_MAP_ID, TIME_ZONE, MI_REF_TIMEZONE, CREATE_DTTM, CREATE_USER)
 Values
   (25, 'EAT', 'E. Africa Standard Time', TO_DATE('08/15/2023 17:42:43', 'MM/DD/YYYY HH24:MI:SS'), 'Anna');
Insert into R360_USER_PREF.RATINGS_MI_TIMEZONE_MAP
   (RATINGS_MI_TIMEZONE_MAP_ID, TIME_ZONE, MI_REF_TIMEZONE, CREATE_DTTM, CREATE_USER)
 Values
   (26, 'AEST', 'E. Australia Standard Time, AUS Eastern Standard Time', TO_DATE('08/15/2023 17:42:43', 'MM/DD/YYYY HH24:MI:SS'), 'Anna');
Insert into R360_USER_PREF.RATINGS_MI_TIMEZONE_MAP
   (RATINGS_MI_TIMEZONE_MAP_ID, TIME_ZONE, MI_REF_TIMEZONE, CREATE_DTTM, CREATE_USER)
 Values
   (27, 'EAST', 'Easter Island Standard Time', TO_DATE('08/15/2023 17:42:43', 'MM/DD/YYYY HH24:MI:SS'), 'Anna');
Insert into R360_USER_PREF.RATINGS_MI_TIMEZONE_MAP
   (RATINGS_MI_TIMEZONE_MAP_ID, TIME_ZONE, MI_REF_TIMEZONE, CREATE_DTTM, CREATE_USER)
 Values
   (28, 'EET', 'E. Europe Standard Time', TO_DATE('08/15/2023 17:42:43', 'MM/DD/YYYY HH24:MI:SS'), 'Anna');
Insert into R360_USER_PREF.RATINGS_MI_TIMEZONE_MAP
   (RATINGS_MI_TIMEZONE_MAP_ID, TIME_ZONE, MI_REF_TIMEZONE, CREATE_DTTM, CREATE_USER)
 Values
   (29, 'EST', 'Eastern Standard Time', TO_DATE('08/15/2023 17:42:43', 'MM/DD/YYYY HH24:MI:SS'), 'Anna');
Insert into R360_USER_PREF.RATINGS_MI_TIMEZONE_MAP
   (RATINGS_MI_TIMEZONE_MAP_ID, TIME_ZONE, MI_REF_TIMEZONE, CREATE_DTTM, CREATE_USER)
 Values
   (30, 'ET', 'Eastern Standard Time', TO_DATE('08/15/2023 17:42:43', 'MM/DD/YYYY HH24:MI:SS'), 'Anna');
Insert into R360_USER_PREF.RATINGS_MI_TIMEZONE_MAP
   (RATINGS_MI_TIMEZONE_MAP_ID, TIME_ZONE, MI_REF_TIMEZONE, CREATE_DTTM, CREATE_USER)
 Values
   (31, 'FWT', 'Romance Standard Time', TO_DATE('08/15/2023 17:42:43', 'MM/DD/YYYY HH24:MI:SS'), 'Anna');
Insert into R360_USER_PREF.RATINGS_MI_TIMEZONE_MAP
   (RATINGS_MI_TIMEZONE_MAP_ID, TIME_ZONE, MI_REF_TIMEZONE, CREATE_DTTM, CREATE_USER)
 Values
   (32, 'FET', 'Turkey Standard Time', TO_DATE('08/15/2023 17:42:43', 'MM/DD/YYYY HH24:MI:SS'), 'Anna');
Insert into R360_USER_PREF.RATINGS_MI_TIMEZONE_MAP
   (RATINGS_MI_TIMEZONE_MAP_ID, TIME_ZONE, MI_REF_TIMEZONE, CREATE_DTTM, CREATE_USER)
 Values
   (33, 'GET', 'Georgian Standard Time', TO_DATE('08/15/2023 17:42:43', 'MM/DD/YYYY HH24:MI:SS'), 'Anna');
Insert into R360_USER_PREF.RATINGS_MI_TIMEZONE_MAP
   (RATINGS_MI_TIMEZONE_MAP_ID, TIME_ZONE, MI_REF_TIMEZONE, CREATE_DTTM, CREATE_USER)
 Values
   (34, 'GMT', 'GMT Standard Time', TO_DATE('08/15/2023 17:42:43', 'MM/DD/YYYY HH24:MI:SS'), 'Anna');
Insert into R360_USER_PREF.RATINGS_MI_TIMEZONE_MAP
   (RATINGS_MI_TIMEZONE_MAP_ID, TIME_ZONE, MI_REF_TIMEZONE, CREATE_DTTM, CREATE_USER)
 Values
   (35, 'GST', 'West Pacific Standard Time, Vladivostok Standard Time', TO_DATE('08/15/2023 17:42:44', 'MM/DD/YYYY HH24:MI:SS'), 'Anna');
Insert into R360_USER_PREF.RATINGS_MI_TIMEZONE_MAP
   (RATINGS_MI_TIMEZONE_MAP_ID, TIME_ZONE, MI_REF_TIMEZONE, CREATE_DTTM, CREATE_USER)
 Values
   (36, 'AE/GST', 'Arabian Standard Time', TO_DATE('08/15/2023 17:42:44', 'MM/DD/YYYY HH24:MI:SS'), 'Anna');
Insert into R360_USER_PREF.RATINGS_MI_TIMEZONE_MAP
   (RATINGS_MI_TIMEZONE_MAP_ID, TIME_ZONE, MI_REF_TIMEZONE, CREATE_DTTM, CREATE_USER)
 Values
   (37, 'HST', 'Hawaiian Standard Time', TO_DATE('08/15/2023 17:42:44', 'MM/DD/YYYY HH24:MI:SS'), 'Anna');
Insert into R360_USER_PREF.RATINGS_MI_TIMEZONE_MAP
   (RATINGS_MI_TIMEZONE_MAP_ID, TIME_ZONE, MI_REF_TIMEZONE, CREATE_DTTM, CREATE_USER)
 Values
   (38, 'HKT', 'China Standard Time', TO_DATE('08/15/2023 17:42:44', 'MM/DD/YYYY HH24:MI:SS'), 'Anna');
Insert into R360_USER_PREF.RATINGS_MI_TIMEZONE_MAP
   (RATINGS_MI_TIMEZONE_MAP_ID, TIME_ZONE, MI_REF_TIMEZONE, CREATE_DTTM, CREATE_USER)
 Values
   (39, 'BDT', 'Bangladesh Standard Time', TO_DATE('08/15/2023 17:42:44', 'MM/DD/YYYY HH24:MI:SS'), 'Anna');
Insert into R360_USER_PREF.RATINGS_MI_TIMEZONE_MAP
   (RATINGS_MI_TIMEZONE_MAP_ID, TIME_ZONE, MI_REF_TIMEZONE, CREATE_DTTM, CREATE_USER)
 Values
   (40, 'IST', 'India Standard Time', TO_DATE('08/15/2023 17:42:44', 'MM/DD/YYYY HH24:MI:SS'), 'Anna');
Insert into R360_USER_PREF.RATINGS_MI_TIMEZONE_MAP
   (RATINGS_MI_TIMEZONE_MAP_ID, TIME_ZONE, MI_REF_TIMEZONE, CREATE_DTTM, CREATE_USER)
 Values
   (41, 'ICT', 'SE Asia Standard Time', TO_DATE('08/15/2023 17:42:44', 'MM/DD/YYYY HH24:MI:SS'), 'Anna');
Insert into R360_USER_PREF.RATINGS_MI_TIMEZONE_MAP
   (RATINGS_MI_TIMEZONE_MAP_ID, TIME_ZONE, MI_REF_TIMEZONE, CREATE_DTTM, CREATE_USER)
 Values
   (42, 'IDT', 'SE Asia Standard Time', TO_DATE('08/15/2023 17:42:44', 'MM/DD/YYYY HH24:MI:SS'), 'Anna');
Insert into R360_USER_PREF.RATINGS_MI_TIMEZONE_MAP
   (RATINGS_MI_TIMEZONE_MAP_ID, TIME_ZONE, MI_REF_TIMEZONE, CREATE_DTTM, CREATE_USER)
 Values
   (43, 'IDLW', 'Dateline Standard Time', TO_DATE('08/15/2023 17:42:44', 'MM/DD/YYYY HH24:MI:SS'), 'Anna');
Insert into R360_USER_PREF.RATINGS_MI_TIMEZONE_MAP
   (RATINGS_MI_TIMEZONE_MAP_ID, TIME_ZONE, MI_REF_TIMEZONE, CREATE_DTTM, CREATE_USER)
 Values
   (44, 'IE/IST', 'GMT Standard Time', TO_DATE('08/15/2023 17:42:44', 'MM/DD/YYYY HH24:MI:SS'), 'Anna');
Insert into R360_USER_PREF.RATINGS_MI_TIMEZONE_MAP
   (RATINGS_MI_TIMEZONE_MAP_ID, TIME_ZONE, MI_REF_TIMEZONE, CREATE_DTTM, CREATE_USER)
 Values
   (45, 'IRKT', 'North Asia East Standard Time', TO_DATE('08/15/2023 17:42:44', 'MM/DD/YYYY HH24:MI:SS'), 'Anna');
Insert into R360_USER_PREF.RATINGS_MI_TIMEZONE_MAP
   (RATINGS_MI_TIMEZONE_MAP_ID, TIME_ZONE, MI_REF_TIMEZONE, CREATE_DTTM, CREATE_USER)
 Values
   (46, 'IL/IST', 'Israel Standard Time', TO_DATE('08/15/2023 17:42:44', 'MM/DD/YYYY HH24:MI:SS'), 'Anna');
Insert into R360_USER_PREF.RATINGS_MI_TIMEZONE_MAP
   (RATINGS_MI_TIMEZONE_MAP_ID, TIME_ZONE, MI_REF_TIMEZONE, CREATE_DTTM, CREATE_USER)
 Values
   (47, 'JST', 'Tokyo Standard Time', TO_DATE('08/15/2023 17:42:44', 'MM/DD/YYYY HH24:MI:SS'), 'Anna');
Insert into R360_USER_PREF.RATINGS_MI_TIMEZONE_MAP
   (RATINGS_MI_TIMEZONE_MAP_ID, TIME_ZONE, MI_REF_TIMEZONE, CREATE_DTTM, CREATE_USER)
 Values
   (48, 'KST', 'Korea Standard Time', TO_DATE('08/15/2023 17:42:44', 'MM/DD/YYYY HH24:MI:SS'), 'Anna');
Insert into R360_USER_PREF.RATINGS_MI_TIMEZONE_MAP
   (RATINGS_MI_TIMEZONE_MAP_ID, TIME_ZONE, MI_REF_TIMEZONE, CREATE_DTTM, CREATE_USER)
 Values
   (49, 'KRAT', 'North Asia Standard Time', TO_DATE('08/15/2023 17:42:44', 'MM/DD/YYYY HH24:MI:SS'), 'Anna');
Insert into R360_USER_PREF.RATINGS_MI_TIMEZONE_MAP
   (RATINGS_MI_TIMEZONE_MAP_ID, TIME_ZONE, MI_REF_TIMEZONE, CREATE_DTTM, CREATE_USER)
 Values
   (50, 'MAGT', 'Magadan Standard Time', TO_DATE('08/15/2023 17:42:44', 'MM/DD/YYYY HH24:MI:SS'), 'Anna');
Insert into R360_USER_PREF.RATINGS_MI_TIMEZONE_MAP
   (RATINGS_MI_TIMEZONE_MAP_ID, TIME_ZONE, MI_REF_TIMEZONE, CREATE_DTTM, CREATE_USER)
 Values
   (51, 'MYT', 'Singapore Standard Time', TO_DATE('08/15/2023 17:42:44', 'MM/DD/YYYY HH24:MI:SS'), 'Anna');
Insert into R360_USER_PREF.RATINGS_MI_TIMEZONE_MAP
   (RATINGS_MI_TIMEZONE_MAP_ID, TIME_ZONE, MI_REF_TIMEZONE, CREATE_DTTM, CREATE_USER)
 Values
   (52, 'MUT', 'Mauritius Standard Time', TO_DATE('08/15/2023 17:42:44', 'MM/DD/YYYY HH24:MI:SS'), 'Anna');
Insert into R360_USER_PREF.RATINGS_MI_TIMEZONE_MAP
   (RATINGS_MI_TIMEZONE_MAP_ID, TIME_ZONE, MI_REF_TIMEZONE, CREATE_DTTM, CREATE_USER)
 Values
   (53, 'MET', 'Central European Standard Time', TO_DATE('08/15/2023 17:42:44', 'MM/DD/YYYY HH24:MI:SS'), 'Anna');
Insert into R360_USER_PREF.RATINGS_MI_TIMEZONE_MAP
   (RATINGS_MI_TIMEZONE_MAP_ID, TIME_ZONE, MI_REF_TIMEZONE, CREATE_DTTM, CREATE_USER)
 Values
   (54, 'MEWT', 'Central European Standard Time', TO_DATE('08/15/2023 17:42:44', 'MM/DD/YYYY HH24:MI:SS'), 'Anna');
Insert into R360_USER_PREF.RATINGS_MI_TIMEZONE_MAP
   (RATINGS_MI_TIMEZONE_MAP_ID, TIME_ZONE, MI_REF_TIMEZONE, CREATE_DTTM, CREATE_USER)
 Values
   (55, 'MSK', 'Russian Standard Time', TO_DATE('08/15/2023 17:42:44', 'MM/DD/YYYY HH24:MI:SS'), 'Anna');
Insert into R360_USER_PREF.RATINGS_MI_TIMEZONE_MAP
   (RATINGS_MI_TIMEZONE_MAP_ID, TIME_ZONE, MI_REF_TIMEZONE, CREATE_DTTM, CREATE_USER)
 Values
   (56, 'MST', 'Mountain Standard Time', TO_DATE('08/15/2023 17:42:44', 'MM/DD/YYYY HH24:MI:SS'), 'Anna');
Insert into R360_USER_PREF.RATINGS_MI_TIMEZONE_MAP
   (RATINGS_MI_TIMEZONE_MAP_ID, TIME_ZONE, MI_REF_TIMEZONE, CREATE_DTTM, CREATE_USER)
 Values
   (57, 'NZST', 'New Zealand Standard Time', TO_DATE('08/15/2023 17:42:44', 'MM/DD/YYYY HH24:MI:SS'), 'Anna');
Insert into R360_USER_PREF.RATINGS_MI_TIMEZONE_MAP
   (RATINGS_MI_TIMEZONE_MAP_ID, TIME_ZONE, MI_REF_TIMEZONE, CREATE_DTTM, CREATE_USER)
 Values
   (58, 'NZT', 'New Zealand Standard Time', TO_DATE('08/15/2023 17:42:44', 'MM/DD/YYYY HH24:MI:SS'), 'Anna');
Insert into R360_USER_PREF.RATINGS_MI_TIMEZONE_MAP
   (RATINGS_MI_TIMEZONE_MAP_ID, TIME_ZONE, MI_REF_TIMEZONE, CREATE_DTTM, CREATE_USER)
 Values
   (59, 'OMST', 'Omsk Standard Time', TO_DATE('08/15/2023 17:42:44', 'MM/DD/YYYY HH24:MI:SS'), 'Anna');
Insert into R360_USER_PREF.RATINGS_MI_TIMEZONE_MAP
   (RATINGS_MI_TIMEZONE_MAP_ID, TIME_ZONE, MI_REF_TIMEZONE, CREATE_DTTM, CREATE_USER)
 Values
   (60, 'PST', 'Pacific Standard Time', TO_DATE('08/15/2023 17:42:44', 'MM/DD/YYYY HH24:MI:SS'), 'Anna');
Insert into R360_USER_PREF.RATINGS_MI_TIMEZONE_MAP
   (RATINGS_MI_TIMEZONE_MAP_ID, TIME_ZONE, MI_REF_TIMEZONE, CREATE_DTTM, CREATE_USER)
 Values
   (61, 'PKST', 'Pakistan Standard Time', TO_DATE('08/15/2023 17:42:44', 'MM/DD/YYYY HH24:MI:SS'), 'Anna');
Insert into R360_USER_PREF.RATINGS_MI_TIMEZONE_MAP
   (RATINGS_MI_TIMEZONE_MAP_ID, TIME_ZONE, MI_REF_TIMEZONE, CREATE_DTTM, CREATE_USER)
 Values
   (62, 'PKT', 'Pakistan Standard Time', TO_DATE('08/15/2023 17:42:44', 'MM/DD/YYYY HH24:MI:SS'), 'Anna');
Insert into R360_USER_PREF.RATINGS_MI_TIMEZONE_MAP
   (RATINGS_MI_TIMEZONE_MAP_ID, TIME_ZONE, MI_REF_TIMEZONE, CREATE_DTTM, CREATE_USER)
 Values
   (63, 'PET', 'SA Pacific Standard Time', TO_DATE('08/15/2023 17:42:44', 'MM/DD/YYYY HH24:MI:SS'), 'Anna');
Insert into R360_USER_PREF.RATINGS_MI_TIMEZONE_MAP
   (RATINGS_MI_TIMEZONE_MAP_ID, TIME_ZONE, MI_REF_TIMEZONE, CREATE_DTTM, CREATE_USER)
 Values
   (64, 'SGT', 'Singapore Standard Time', TO_DATE('08/15/2023 17:42:44', 'MM/DD/YYYY HH24:MI:SS'), 'Anna');
Insert into R360_USER_PREF.RATINGS_MI_TIMEZONE_MAP
   (RATINGS_MI_TIMEZONE_MAP_ID, TIME_ZONE, MI_REF_TIMEZONE, CREATE_DTTM, CREATE_USER)
 Values
   (65, 'SAST', 'South Africa Standard Time', TO_DATE('08/15/2023 17:42:44', 'MM/DD/YYYY HH24:MI:SS'), 'Anna');
Insert into R360_USER_PREF.RATINGS_MI_TIMEZONE_MAP
   (RATINGS_MI_TIMEZONE_MAP_ID, TIME_ZONE, MI_REF_TIMEZONE, CREATE_DTTM, CREATE_USER)
 Values
   (66, 'SLKT', 'Sri Lanka Standard Time', TO_DATE('08/15/2023 17:42:44', 'MM/DD/YYYY HH24:MI:SS'), 'Anna');
Insert into R360_USER_PREF.RATINGS_MI_TIMEZONE_MAP
   (RATINGS_MI_TIMEZONE_MAP_ID, TIME_ZONE, MI_REF_TIMEZONE, CREATE_DTTM, CREATE_USER)
 Values
   (67, 'SWT', 'W. Europe Standard Time', TO_DATE('08/15/2023 17:42:44', 'MM/DD/YYYY HH24:MI:SS'), 'Anna');
Insert into R360_USER_PREF.RATINGS_MI_TIMEZONE_MAP
   (RATINGS_MI_TIMEZONE_MAP_ID, TIME_ZONE, MI_REF_TIMEZONE, CREATE_DTTM, CREATE_USER)
 Values
   (68, 'TWT', 'Taipei Standard Time', TO_DATE('08/15/2023 17:42:44', 'MM/DD/YYYY HH24:MI:SS'), 'Anna');
Insert into R360_USER_PREF.RATINGS_MI_TIMEZONE_MAP
   (RATINGS_MI_TIMEZONE_MAP_ID, TIME_ZONE, MI_REF_TIMEZONE, CREATE_DTTM, CREATE_USER)
 Values
   (69, 'TJT', 'Central Asia Standard Time', TO_DATE('08/15/2023 17:42:45', 'MM/DD/YYYY HH24:MI:SS'), 'Anna');
Insert into R360_USER_PREF.RATINGS_MI_TIMEZONE_MAP
   (RATINGS_MI_TIMEZONE_MAP_ID, TIME_ZONE, MI_REF_TIMEZONE, CREATE_DTTM, CREATE_USER)
 Values
   (70, 'THLT', 'SE Asia Standard Time', TO_DATE('08/15/2023 17:42:45', 'MM/DD/YYYY HH24:MI:SS'), 'Anna');
Insert into R360_USER_PREF.RATINGS_MI_TIMEZONE_MAP
   (RATINGS_MI_TIMEZONE_MAP_ID, TIME_ZONE, MI_REF_TIMEZONE, CREATE_DTTM, CREATE_USER)
 Values
   (71, 'ZP4', 'Russia Time Zone 3', TO_DATE('08/15/2023 17:42:45', 'MM/DD/YYYY HH24:MI:SS'), 'Anna');
Insert into R360_USER_PREF.RATINGS_MI_TIMEZONE_MAP
   (RATINGS_MI_TIMEZONE_MAP_ID, TIME_ZONE, MI_REF_TIMEZONE, CREATE_DTTM, CREATE_USER)
 Values
   (72, 'ZP5', 'Ekaterinburg Standard Time', TO_DATE('08/15/2023 17:42:45', 'MM/DD/YYYY HH24:MI:SS'), 'Anna');
Insert into R360_USER_PREF.RATINGS_MI_TIMEZONE_MAP
   (RATINGS_MI_TIMEZONE_MAP_ID, TIME_ZONE, MI_REF_TIMEZONE, CREATE_DTTM, CREATE_USER)
 Values
   (73, 'ZP6', 'Omsk Standard Time', TO_DATE('08/15/2023 17:42:45', 'MM/DD/YYYY HH24:MI:SS'), 'Anna');
Insert into R360_USER_PREF.RATINGS_MI_TIMEZONE_MAP
   (RATINGS_MI_TIMEZONE_MAP_ID, TIME_ZONE, MI_REF_TIMEZONE, CREATE_DTTM, CREATE_USER)
 Values
   (74, 'UZT', 'West Asia Standard Time', TO_DATE('08/15/2023 17:42:45', 'MM/DD/YYYY HH24:MI:SS'), 'Anna');
Insert into R360_USER_PREF.RATINGS_MI_TIMEZONE_MAP
   (RATINGS_MI_TIMEZONE_MAP_ID, TIME_ZONE, MI_REF_TIMEZONE, CREATE_DTTM, CREATE_USER)
 Values
   (75, 'VNT', 'SE Asia Standard Time', TO_DATE('08/15/2023 17:42:45', 'MM/DD/YYYY HH24:MI:SS'), 'Anna');
Insert into R360_USER_PREF.RATINGS_MI_TIMEZONE_MAP
   (RATINGS_MI_TIMEZONE_MAP_ID, TIME_ZONE, MI_REF_TIMEZONE, CREATE_DTTM, CREATE_USER)
 Values
   (76, 'VLAT', 'Vladivostok Standard Time', TO_DATE('08/15/2023 17:42:45', 'MM/DD/YYYY HH24:MI:SS'), 'Anna');
Insert into R360_USER_PREF.RATINGS_MI_TIMEZONE_MAP
   (RATINGS_MI_TIMEZONE_MAP_ID, TIME_ZONE, MI_REF_TIMEZONE, CREATE_DTTM, CREATE_USER)
 Values
   (77, 'WAT', 'W. Central Africa Standard Time', TO_DATE('08/15/2023 17:42:45', 'MM/DD/YYYY HH24:MI:SS'), 'Anna');
Insert into R360_USER_PREF.RATINGS_MI_TIMEZONE_MAP
   (RATINGS_MI_TIMEZONE_MAP_ID, TIME_ZONE, MI_REF_TIMEZONE, CREATE_DTTM, CREATE_USER)
 Values
   (78, 'WADT', 'W. Australia Standard Time', TO_DATE('08/15/2023 17:42:45', 'MM/DD/YYYY HH24:MI:SS'), 'Anna');
Insert into R360_USER_PREF.RATINGS_MI_TIMEZONE_MAP
   (RATINGS_MI_TIMEZONE_MAP_ID, TIME_ZONE, MI_REF_TIMEZONE, CREATE_DTTM, CREATE_USER)
 Values
   (79, 'WAST', 'W. Australia Standard Time', TO_DATE('08/15/2023 17:42:45', 'MM/DD/YYYY HH24:MI:SS'), 'Anna');
Insert into R360_USER_PREF.RATINGS_MI_TIMEZONE_MAP
   (RATINGS_MI_TIMEZONE_MAP_ID, TIME_ZONE, MI_REF_TIMEZONE, CREATE_DTTM, CREATE_USER)
 Values
   (80, 'WET', 'W. Europe Standard Time', TO_DATE('08/15/2023 17:42:45', 'MM/DD/YYYY HH24:MI:SS'), 'Anna');
Insert into R360_USER_PREF.RATINGS_MI_TIMEZONE_MAP
   (RATINGS_MI_TIMEZONE_MAP_ID, TIME_ZONE, MI_REF_TIMEZONE, CREATE_DTTM, CREATE_USER)
 Values
   (81, 'YAKT', 'Yakutsk Standard Time', TO_DATE('08/15/2023 17:42:45', 'MM/DD/YYYY HH24:MI:SS'), 'Anna');
Insert into R360_USER_PREF.RATINGS_MI_TIMEZONE_MAP
   (RATINGS_MI_TIMEZONE_MAP_ID, TIME_ZONE, MI_REF_TIMEZONE, CREATE_DTTM, CREATE_USER)
 Values
   (82, 'YEKT', 'Ekaterinburg Standard Time', TO_DATE('08/15/2023 17:42:45', 'MM/DD/YYYY HH24:MI:SS'), 'Anna');
Insert into R360_USER_PREF.RATINGS_MI_TIMEZONE_MAP
   (RATINGS_MI_TIMEZONE_MAP_ID, TIME_ZONE, MI_REF_TIMEZONE, CREATE_DTTM, CREATE_USER)
 Values
   (83, 'YST', 'Alaskan Standard Time', TO_DATE('08/15/2023 17:42:45', 'MM/DD/YYYY HH24:MI:SS'), 'Anna');
COMMIT;


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\USER_PROFILE-LOOKUP_23.09\user_profile_lookup\Rollback\rollback.sql

DROP TABLE R360_USER_PREF.FOREIGN_LANGUAGE_TRANS;
DROP TABLE R360_USER_PREF.R360_APP_LANGUAGE ;
DROP TABLE R360_USER_PREF.R360_APP_STATE;
DROP TABLE R360_USER_PREF.R360_APP_COUNTRY;
DROP TABLE R360_USER_PREF.R360_APP_CURRENCY;
DROP TABLE R360_USER_PREF.RATINGS_MI_TIMEZONE_MAP;
DROP TABLE R360_USER_PREF.R360_APP_TIME_ZONE;
DROP TABLE R360_USER_PREF.MAGNITUDE;

DROP SEQUENCE   R360_USER_PREF.RATINGS_MI_TIMEZONE_MAP_SEQ;
DROP SEQUENCE R360_USER_PREF.FOREIGN_LANGUAGE_TRANS_SEQ;


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\USER_PROFILE-LOOKUP_23.09\user_profile_lookup\Tables\tables.sql

CREATE TABLE R360_USER_PREF.R360_APP_LANGUAGE
(
    R360_APP_LANGUAGE_CD varchar2(15) NOT NULL ,
    R360_APP_LANGUAGE    VARCHAR2(50)  NULL ,
    CREATE_DTTM          DATE  DEFAULT SYSDATE  NOT NULL ,
    CREATE_USER          VARCHAR2(20)  NOT NULL ,
    UPDATE_DTTM          DATE  NULL ,
    UPDATE_USER          VARCHAR2(20)  NULL ,
    RANK_ORDER_NUM       INTEGER  NULL ,
    ACTV_FLAG            VARCHAR2(1)  DEFAULT 'Y'  NOT NULL ,
       R360_APP_LANGUAGE_SHORT VARCHAR2(50)  NULL ,
    LANGUAGE_ISO_code VARCHAR2(5)  NULL 
);

CREATE UNIQUE INDEX R360_USER_PREF.LANGUAGE_PK ON R360_USER_PREF.R360_APP_LANGUAGE
(R360_APP_LANGUAGE_CD   ASC);

ALTER TABLE R360_USER_PREF.R360_APP_LANGUAGE
    ADD CONSTRAINT  LANGUAGE_PK PRIMARY KEY (R360_APP_LANGUAGE_CD);

CREATE UNIQUE INDEX R360_USER_PREF.LANGUAGE_AK ON R360_USER_PREF.R360_APP_LANGUAGE
(R360_APP_LANGUAGE   ASC);

ALTER TABLE R360_USER_PREF.R360_APP_LANGUAGE
ADD 
CONSTRAINT LANGUAGE_AK UNIQUE (R360_APP_LANGUAGE);

COMMENT ON COLUMN R360_USER_PREF.R360_APP_LANGUAGE.R360_APP_LANGUAGE_SHORT IS 'Short name of language';

COMMENT ON COLUMN R360_USER_PREF.R360_APP_LANGUAGE.LANGUAGE_ISO_code IS 'Code used to identify language';

COMMENT ON TABLE R360_USER_PREF.R360_APP_LANGUAGE IS 'This table includes the R360 display language';

COMMENT ON COLUMN R360_USER_PREF.R360_APP_LANGUAGE.R360_APP_LANGUAGE_CD IS 'PK unique code for R360 language';

COMMENT ON COLUMN R360_USER_PREF.R360_APP_LANGUAGE.R360_APP_LANGUAGE IS 'R360 display language';

COMMENT ON COLUMN R360_USER_PREF.R360_APP_LANGUAGE.CREATE_DTTM IS 'The date and time that this record was created. This column usually appears if there is no start and end dates defined for the record.';

COMMENT ON COLUMN R360_USER_PREF.R360_APP_LANGUAGE.CREATE_USER IS 'The ID (usually LDAP Text or login used by the process) of the user that created this record.';

COMMENT ON COLUMN R360_USER_PREF.R360_APP_LANGUAGE.UPDATE_DTTM IS 'The date and time that this record was last updated.  This column usually appears if there is no start and end dates defined for the record.';

COMMENT ON COLUMN R360_USER_PREF.R360_APP_LANGUAGE.UPDATE_USER IS 'The ID (usually LDAP Text or login used by the process) of the user that last updated this record.';

COMMENT ON COLUMN R360_USER_PREF.R360_APP_LANGUAGE.RANK_ORDER_NUM IS 'This column will define the sort order';

COMMENT ON COLUMN R360_USER_PREF.R360_APP_LANGUAGE.ACTV_FLAG IS 'Y/N that specifies whether the record is active';

GRANT SELECT ON R360_USER_PREF.R360_APP_LANGUAGE  TO R360_USER_PREF_READER;

GRANT SELECT,INSERT,UPDATE,DELETE ON R360_USER_PREF.R360_APP_LANGUAGE  TO R360_USER_PREF_WRITER;

CREATE TABLE R360_USER_PREF.R360_APP_TIME_ZONE
(
    TIME_ZONE            VARCHAR2(20)  NOT NULL ,
    TIME_ZONE_NAME       VARCHAR2(50)  NOT NULL  ,
    TIME_ZONE_DISPLAY_NAME VARCHAR2(100)  NOT NULL  ,
     RANK_ORDER_NUM       INTEGER  NULL ,
    ACTV_FLAG            VARCHAR2(1)  DEFAULT 'Y'  NOT NULL ,
     CREATE_DTTM          DATE  DEFAULT SYSDATE  NOT NULL ,
    CREATE_USER          VARCHAR2(20)  NOT NULL ,
    UPDATE_DTTM          DATE  NULL ,
    UPDATE_USER          VARCHAR2(20)  NULL 
);

COMMENT ON TABLE R360_USER_PREF.R360_APP_TIME_ZONE IS 'This table captures the timezone info for R360 UI. And should be in sync with CMP reference master data.';

COMMENT ON COLUMN R360_USER_PREF.R360_APP_TIME_ZONE.TIME_ZONE IS 'timezone abbreviation';

COMMENT ON COLUMN R360_USER_PREF.R360_APP_TIME_ZONE.TIME_ZONE_NAME IS ' time zone name';

COMMENT ON COLUMN R360_USER_PREF.R360_APP_TIME_ZONE.CREATE_DTTM IS 'The date and time that this record was created. This column usually appears if there is no start and end dates defined for the record.';

COMMENT ON COLUMN R360_USER_PREF.R360_APP_TIME_ZONE.CREATE_USER IS 'The ID (usually LDAP Text or login used by the process) of the user that created this record.';

COMMENT ON COLUMN R360_USER_PREF.R360_APP_TIME_ZONE.UPDATE_DTTM IS 'The date and time that this record was last updated.  This column usually appears if there is no start and end dates defined for the record.';

COMMENT ON COLUMN R360_USER_PREF.R360_APP_TIME_ZONE.UPDATE_USER IS 'The ID (usually LDAP Text or login used by the process) of the user that last updated this record.';

COMMENT ON COLUMN R360_USER_PREF.R360_APP_TIME_ZONE.RANK_ORDER_NUM IS 'This column will define the sort order';

COMMENT ON COLUMN R360_USER_PREF.R360_APP_TIME_ZONE.ACTV_FLAG IS 'Y/N that specifies whether the record is active';

COMMENT ON COLUMN R360_USER_PREF.R360_APP_TIME_ZONE.TIME_ZONE_DISPLAY_NAME IS 'The display name of the time zone';

CREATE UNIQUE INDEX TIME_ZONE_PK ON R360_USER_PREF.R360_APP_TIME_ZONE
(TIME_ZONE   ASC);

ALTER TABLE R360_USER_PREF.R360_APP_TIME_ZONE
    ADD CONSTRAINT  TIME_ZONE_PK PRIMARY KEY (TIME_ZONE);

CREATE TABLE R360_USER_PREF.R360_APP_COUNTRY
(
    COUNTRY_CD           VARCHAR2(20)  NOT NULL ,
    COUNTRY_NAME         VARCHAR2(50)  NOT NULL  ,
    COUNTRY_ISO3         VARCHAR2(3)  NOT NULL  ,
    RANK_ORDER_NUM       INTEGER  NULL ,
    ACTV_FLAG            VARCHAR2(1)  DEFAULT 'Y'  NOT NULL ,
     CREATE_DTTM          DATE  DEFAULT SYSDATE  NOT NULL ,
    CREATE_USER          VARCHAR2(20)  NOT NULL ,
    UPDATE_DTTM          DATE  NULL ,
    UPDATE_USER          VARCHAR2(20)  NULL
);

COMMENT ON TABLE R360_USER_PREF.R360_APP_COUNTRY IS 'This table captures the country info for R360 UI. And should be in sync with CMP reference master data.';

COMMENT ON COLUMN R360_USER_PREF.R360_APP_COUNTRY.COUNTRY_CD IS 'COUNTRY ISO2';

COMMENT ON COLUMN R360_USER_PREF.R360_APP_COUNTRY.COUNTRY_NAME IS 'R360 display language';

COMMENT ON COLUMN R360_USER_PREF.R360_APP_COUNTRY.CREATE_DTTM IS 'The date and time that this record was created. This column usually appears if there is no start and end dates defined for the record.';

COMMENT ON COLUMN R360_USER_PREF.R360_APP_COUNTRY.CREATE_USER IS 'The ID (usually LDAP Text or login used by the process) of the user that created this record.';

COMMENT ON COLUMN R360_USER_PREF.R360_APP_COUNTRY.UPDATE_DTTM IS 'The date and time that this record was last updated.  This column usually appears if there is no start and end dates defined for the record.';

COMMENT ON COLUMN R360_USER_PREF.R360_APP_COUNTRY.UPDATE_USER IS 'The ID (usually LDAP Text or login used by the process) of the user that last updated this record.';

COMMENT ON COLUMN R360_USER_PREF.R360_APP_COUNTRY.RANK_ORDER_NUM IS 'This column will define the sort order';

COMMENT ON COLUMN R360_USER_PREF.R360_APP_COUNTRY.ACTV_FLAG IS 'Y/N that specifies whether the record is active';

COMMENT ON COLUMN R360_USER_PREF.R360_APP_COUNTRY.COUNTRY_ISO3 IS 'COUNTRY ISO3';

CREATE UNIQUE INDEX COUNTRY_PK ON R360_USER_PREF.R360_APP_COUNTRY
(COUNTRY_CD   ASC);

ALTER TABLE R360_USER_PREF.R360_APP_COUNTRY
    ADD CONSTRAINT  COUNTRY_PK PRIMARY KEY (COUNTRY_CD);

CREATE UNIQUE INDEX COUNTRY_AK ON R360_USER_PREF.R360_APP_COUNTRY
(COUNTRY_NAME   ASC);

ALTER TABLE R360_USER_PREF.R360_APP_COUNTRY
ADD 
CONSTRAINT  COUNTRY_AK UNIQUE (COUNTRY_NAME);

CREATE TABLE R360_USER_PREF.R360_APP_CURRENCY
(
    CURRENCY_CD          VARCHAR2(20)  NOT NULL ,
    CURRENCY_NAME        VARCHAR2(50)  NOT NULL ,
     CURRENCY_SYMBOL      VARCHAR2(20)  NULL ,
    MAGNITUDE_MULTIPLIER_DISPLAY INTEGER  NULL ,
    RANK_ORDER_NUM       INTEGER  NULL ,
    ACTV_FLAG            VARCHAR2(1)  DEFAULT 'Y'  NOT NULL ,
    CREATE_DTTM          DATE  DEFAULT SYSDATE  NOT NULL ,
    CREATE_USER          VARCHAR2(20)  NOT NULL ,
    UPDATE_DTTM          DATE  NULL ,
    UPDATE_USER          VARCHAR2(20)  NULL
);

COMMENT ON TABLE R360_USER_PREF.R360_APP_CURRENCY IS 'This table captures the currency info for R360 UI. And should be in sync with CMP reference master data.';

COMMENT ON COLUMN R360_USER_PREF.R360_APP_CURRENCY.CURRENCY_CD IS 'currency code';

COMMENT ON COLUMN R360_USER_PREF.R360_APP_CURRENCY.CURRENCY_NAME IS 'currency name';

COMMENT ON COLUMN R360_USER_PREF.R360_APP_CURRENCY.CREATE_DTTM IS 'The date and time that this record was created. This column usually appears if there is no start and end dates defined for the record.';

COMMENT ON COLUMN R360_USER_PREF.R360_APP_CURRENCY.CREATE_USER IS 'The ID (usually LDAP Text or login used by the process) of the user that created this record.';

COMMENT ON COLUMN R360_USER_PREF.R360_APP_CURRENCY.UPDATE_DTTM IS 'The date and time that this record was last updated.  This column usually appears if there is no start and end dates defined for the record.';

COMMENT ON COLUMN R360_USER_PREF.R360_APP_CURRENCY.UPDATE_USER IS 'The ID (usually LDAP Text or login used by the process) of the user that last updated this record.';

COMMENT ON COLUMN R360_USER_PREF.R360_APP_CURRENCY.RANK_ORDER_NUM IS 'This column will define the sort order';

COMMENT ON COLUMN R360_USER_PREF.R360_APP_CURRENCY.ACTV_FLAG IS 'Y/N that specifies whether the record is active';

COMMENT ON COLUMN R360_USER_PREF.R360_APP_CURRENCY.CURRENCY_SYMBOL IS 'A symbol used to identify a currency';

COMMENT ON COLUMN R360_USER_PREF.R360_APP_CURRENCY.MAGNITUDE_MULTIPLIER_DISPLAY IS 'Power of 10 to multiply the magnitude by for display purposes. Does not apply when the magnitude is in actual dollars (or whatever currency is being referenced).';

CREATE UNIQUE INDEX CURRENCY_PK ON R360_USER_PREF.R360_APP_CURRENCY
(CURRENCY_CD   ASC);

ALTER TABLE R360_USER_PREF.R360_APP_CURRENCY
    ADD CONSTRAINT  CURRENCY_PK PRIMARY KEY (CURRENCY_CD);


CREATE TABLE R360_USER_PREF.R360_APP_STATE
(
    STATE_CD             VARCHAR2(20)  NOT NULL ,
    STATE_NAME           VARCHAR2(50)  NOT NULL  ,
    COUNTRY_CD           VARCHAR2(20)  NOT NULL  ,
    RANK_ORDER_NUM       INTEGER  NULL ,
    ACTV_FLAG            VARCHAR2(1)  DEFAULT 'Y'  NOT NULL ,
    CREATE_DTTM          DATE  DEFAULT SYSDATE  NOT NULL ,
    CREATE_USER          VARCHAR2(20)  NOT NULL ,
    UPDATE_DTTM          DATE  NULL ,
    UPDATE_USER          VARCHAR2(20)  NULL 
);

COMMENT ON TABLE R360_USER_PREF.R360_APP_STATE IS 'This table captures the state info for R360 UI. And should be in sync with CMP reference master data.';

COMMENT ON COLUMN R360_USER_PREF.R360_APP_STATE.STATE_NAME IS 'state name';

COMMENT ON COLUMN R360_USER_PREF.R360_APP_STATE.CREATE_DTTM IS 'The date and time that this record was created. This column usually appears if there is no start and end dates defined for the record.';

COMMENT ON COLUMN R360_USER_PREF.R360_APP_STATE.CREATE_USER IS 'The ID (usually LDAP Text or login used by the process) of the user that created this record.';

COMMENT ON COLUMN R360_USER_PREF.R360_APP_STATE.UPDATE_DTTM IS 'The date and time that this record was last updated.  This column usually appears if there is no start and end dates defined for the record.';

COMMENT ON COLUMN R360_USER_PREF.R360_APP_STATE.UPDATE_USER IS 'The ID (usually LDAP Text or login used by the process) of the user that last updated this record.';

COMMENT ON COLUMN R360_USER_PREF.R360_APP_STATE.RANK_ORDER_NUM IS 'This column will define the sort order';

COMMENT ON COLUMN R360_USER_PREF.R360_APP_STATE.ACTV_FLAG IS 'Y/N that specifies whether the record is active';

COMMENT ON COLUMN R360_USER_PREF.R360_APP_STATE.COUNTRY_CD IS 'FK from Country table';

CREATE UNIQUE INDEX STATE_PK ON R360_USER_PREF.R360_APP_STATE
(STATE_CD   ASC);

ALTER TABLE R360_USER_PREF.R360_APP_STATE
    ADD CONSTRAINT  STATE_PK PRIMARY KEY (STATE_CD);

CREATE UNIQUE INDEX STATE_AK ON R360_USER_PREF.R360_APP_STATE
(COUNTRY_CD   ASC, STATE_NAME ASC);

ALTER TABLE R360_APP_STATE
ADD 
CONSTRAINT  STATE_AK UNIQUE (COUNTRY_CD,STATE_NAME);


ALTER TABLE R360_USER_PREF.R360_APP_STATE
    ADD (
CONSTRAINT STATE_COUNTRY_CD_FK FOREIGN KEY (COUNTRY_CD) REFERENCES R360_USER_PREF.R360_APP_COUNTRY (COUNTRY_CD) ON DELETE SET NULL);


GRANT SELECT ON R360_USER_PREF.R360_APP_COUNTRY  TO R360_USER_PREF_READER;

GRANT SELECT,INSERT,UPDATE,DELETE ON R360_USER_PREF.R360_APP_COUNTRY  TO R360_USER_PREF_WRITER;
 
GRANT SELECT ON R360_USER_PREF.R360_APP_CURRENCY  TO R360_USER_PREF_READER;

GRANT SELECT,INSERT,UPDATE,DELETE ON R360_USER_PREF.R360_APP_CURRENCY  TO R360_USER_PREF_WRITER;
 
GRANT SELECT ON R360_USER_PREF.R360_APP_STATE  TO R360_USER_PREF_READER;

GRANT SELECT,INSERT,UPDATE,DELETE ON R360_USER_PREF.R360_APP_STATE  TO R360_USER_PREF_WRITER;
 
GRANT SELECT ON R360_USER_PREF.R360_APP_TIME_ZONE  TO R360_USER_PREF_READER;

GRANT SELECT,INSERT,UPDATE,DELETE ON R360_USER_PREF.R360_APP_TIME_ZONE  TO R360_USER_PREF_WRITER;
 

CREATE TABLE R360_USER_PREF.FOREIGN_LANGUAGE_TRANS
(
    FOREIGN_LANGUAGE_TRANS_ID INTEGER  NOT NULL ,
    R360_APP_LANGUAGE_CD VARCHAR2(15)  NULL ,
    ITEM_VALUE           VARCHAR(255)  NULL ,
    ITEM_TYPE            VARCHAR2(100)  NULL ,
     FOREIGN_LANGUAGE_VALUE VARCHAR2(2500)  NULL ,
    CREATE_DTTM          DATE  DEFAULT SYSDATE  NOT NULL ,
    CREATE_USER          VARCHAR2(20)  NOT NULL ,
    UPDATE_DTTM          DATE  NULL ,
    UPDATE_USER          VARCHAR2(20)  NULL ,
    ACTV_FLAG            VARCHAR2(1)  DEFAULT 'Y'  NOT NULL 
    );

COMMENT ON TABLE R360_USER_PREF.FOREIGN_LANGUAGE_TRANS IS 'Foreign-language support for lookups';

COMMENT ON COLUMN R360_USER_PREF.FOREIGN_LANGUAGE_TRANS.R360_APP_LANGUAGE_CD IS 'FK of R360_App_language_cd table';

COMMENT ON COLUMN R360_USER_PREF.FOREIGN_LANGUAGE_TRANS.FOREIGN_LANGUAGE_TRANS_ID IS 'PK sequence generator';

COMMENT ON COLUMN R360_USER_PREF.FOREIGN_LANGUAGE_TRANS.FOREIGN_LANGUAGE_VALUE IS 'The translation of the lookup item value for corresponding item type';

COMMENT ON COLUMN R360_USER_PREF.FOREIGN_LANGUAGE_TRANS.CREATE_DTTM IS 'The date and time that this record was created. This column usually appears if there is no start and end dates defined for the record.';

COMMENT ON COLUMN R360_USER_PREF.FOREIGN_LANGUAGE_TRANS.CREATE_USER IS 'The ID (usually LDAP Text or login used by the process) of the user that created this record.';

COMMENT ON COLUMN R360_USER_PREF.FOREIGN_LANGUAGE_TRANS.UPDATE_DTTM IS 'The date and time that this record was last updated.  This column usually appears if there is no start and end dates defined for the record.';

COMMENT ON COLUMN R360_USER_PREF.FOREIGN_LANGUAGE_TRANS.UPDATE_USER IS 'The ID (usually LDAP Text or login used by the process) of the user that last updated this record.';

COMMENT ON COLUMN R360_USER_PREF.FOREIGN_LANGUAGE_TRANS.ACTV_FLAG IS 'Y/N that specifies whether the record is active';

COMMENT ON COLUMN R360_USER_PREF.FOREIGN_LANGUAGE_TRANS.ITEM_VALUE IS 'Item value corresposning to item type. Like Currency value';

COMMENT ON COLUMN R360_USER_PREF.FOREIGN_LANGUAGE_TRANS.ITEM_TYPE IS 'The type for the item that can refer to any lookup.  Like Currency ';

CREATE UNIQUE INDEX XPKR360_APP_FOREIGN_LANGUAGE ON R360_USER_PREF.FOREIGN_LANGUAGE_TRANS
(FOREIGN_LANGUAGE_TRANS_ID   ASC);

ALTER TABLE R360_USER_PREF.FOREIGN_LANGUAGE_TRANS
    ADD CONSTRAINT  XPKR360_APP_FOREIGN_LANGUAGE PRIMARY KEY (FOREIGN_LANGUAGE_TRANS_ID);

CREATE UNIQUE INDEX R360_APP_FOREIGN_LANGUAGE_AK ON R360_USER_PREF.FOREIGN_LANGUAGE_TRANS
(ITEM_TYPE   ASC,ITEM_VALUE   ASC,R360_APP_LANGUAGE_CD   ASC);

ALTER TABLE R360_USER_PREF.FOREIGN_LANGUAGE_TRANS
ADD 
CONSTRAINT  R360_APP_FOREIGN_LANGUAGE_AK UNIQUE (ITEM_TYPE,ITEM_VALUE,R360_APP_LANGUAGE_CD);

ALTER TABLE R360_USER_PREF.FOREIGN_LANGUAGE_TRANS
    ADD (
CONSTRAINT FOREIGN_TRANS_APP_LANG_FK FOREIGN KEY (R360_APP_LANGUAGE_CD) REFERENCES R360_USER_PREF.R360_APP_LANGUAGE (R360_APP_LANGUAGE_CD) ON DELETE SET NULL);


GRANT SELECT ON     R360_USER_PREF.FOREIGN_LANGUAGE_TRANS     TO R360_USER_PREF_READER; 
        
GRANT SELECT,
      INSERT,
      UPDATE,
      DELETE
   ON    R360_USER_PREF.FOREIGN_LANGUAGE_TRANS     TO R360_USER_PREF_WRITER;
   
   
CREATE    SEQUENCE    R360_USER_PREF.FOREIGN_LANGUAGE_TRANS_SEQ        START WITH 10001 INCREMENT BY 1 NOCACHE NOCYCLE;

GRANT SELECT ON             R360_USER_PREF.FOREIGN_LANGUAGE_TRANS_SEQ        TO R360_USER_PREF_READER;
 
CREATE TABLE R360_USER_PREF.MAGNITUDE
(
    MAGNITUDE            VARCHAR2(15)  NOT NULL ,
    MAGNITUDE_UNIT_OF_MEASURE VARCHAR2(10)  NULL ,
    MAGNITUDE_CONSTANT_QUANTITY VARCHAR2(2)  NULL ,
    MAGNITUDE_DESCR      VARCHAR2(100)  NULL ,
    CREATE_DTTM          DATE  DEFAULT SYSDATE  NOT NULL ,
    CREATE_USER          VARCHAR2(20)  NOT NULL ,
    UPDATE_DTTM          DATE  NULL ,
    UPDATE_USER          VARCHAR2(20)  NULL ,
    ACTV_FLAG            VARCHAR2(1)  DEFAULT 'Y'  NOT NULL ,
    MAGNITUDE_UNIT_OF_MEASURE_TYPE VARCHAR2(15)  NULL 
);

COMMENT ON TABLE R360_USER_PREF.MAGNITUDE IS 'Units in which the measurement is made';

COMMENT ON COLUMN R360_USER_PREF.MAGNITUDE.MAGNITUDE IS 'Units in which the measurement is made';

COMMENT ON COLUMN R360_USER_PREF.MAGNITUDE.MAGNITUDE_UNIT_OF_MEASURE IS 'unit of measure curresponding to unit of measure type';

COMMENT ON COLUMN R360_USER_PREF.MAGNITUDE.MAGNITUDE_CONSTANT_QUANTITY IS 'Quantity of units used in the the measurement is made as a power of 10';

COMMENT ON COLUMN R360_USER_PREF.MAGNITUDE.MAGNITUDE_DESCR IS 'Magnitude description';

COMMENT ON COLUMN R360_USER_PREF.MAGNITUDE.CREATE_DTTM IS 'The date and time that this record was created. This column usually appears if there is no start and end dates defined for the record.';

COMMENT ON COLUMN R360_USER_PREF.MAGNITUDE.CREATE_USER IS 'The ID (usually LDAP Text or login used by the process) of the user that created this record.';

COMMENT ON COLUMN R360_USER_PREF.MAGNITUDE.UPDATE_DTTM IS 'The date and time that this record was last updated.  This column usually appears if there is no start and end dates defined for the record.';

COMMENT ON COLUMN R360_USER_PREF.MAGNITUDE.UPDATE_USER IS 'The ID (usually LDAP Text or login used by the process) of the user that last updated this record.';

COMMENT ON COLUMN R360_USER_PREF.MAGNITUDE.ACTV_FLAG IS 'Y/N that specifies whether the record is active';

COMMENT ON COLUMN R360_USER_PREF.MAGNITUDE.MAGNITUDE_UNIT_OF_MEASURE_TYPE IS 'unit of measure type 
Currency
Energy
Mass
Volume
Distance';

CREATE UNIQUE INDEX MAGNITUDE_PK ON R360_USER_PREF.MAGNITUDE
(MAGNITUDE   ASC);

ALTER TABLE R360_USER_PREF.MAGNITUDE
    ADD CONSTRAINT  MAGNITUDE_PK PRIMARY KEY (MAGNITUDE);

CREATE UNIQUE INDEX MAGNITUDE_AK ON R360_USER_PREF.MAGNITUDE
(MAGNITUDE_UNIT_OF_MEASURE   ASC,MAGNITUDE_UNIT_OF_MEASURE_TYPE   ASC,MAGNITUDE   ASC);

ALTER TABLE R360_USER_PREF.MAGNITUDE
ADD 
CONSTRAINT  MAGNITUDE_AK UNIQUE (MAGNITUDE_UNIT_OF_MEASURE,MAGNITUDE_UNIT_OF_MEASURE_TYPE,MAGNITUDE);

GRANT SELECT ON R360_USER_PREF.MAGNITUDE TO R360_USER_PREF_READER;

GRANT SELECT,INSERT,UPDATE,DELETE ON R360_USER_PREF.MAGNITUDE  TO R360_USER_PREF_WRITER;

CREATE TABLE R360_USER_PREF.RATINGS_MI_TIMEZONE_MAP
(
    RATINGS_MI_TIMEZONE_MAP_ID INTEGER  NOT NULL ,
    TIME_ZONE            VARCHAR2(20)  NULL ,
    MI_REF_TIMEZONE      VARCHAR2(100)  NULL ,
    CREATE_DTTM          DATE  DEFAULT SYSDATE  NOT NULL ,
    CREATE_USER          VARCHAR2(20)  NOT NULL ,
    UPDATE_DTTM          DATE  NULL ,
    UPDATE_USER          VARCHAR2(20)  NULL 
);


COMMENT ON TABLE R360_USER_PREF.RATINGS_MI_TIMEZONE_MAP IS 'ratings to MI map for reference as multiple codes on MI can be mapped to one code on ratings. Till its migrated to ratings fully. For backward compatability.';

COMMENT ON COLUMN R360_USER_PREF.RATINGS_MI_TIMEZONE_MAP.RATINGS_MI_TIMEZONE_MAP_ID IS 'primary unique surrogate id';

COMMENT ON COLUMN R360_USER_PREF.RATINGS_MI_TIMEZONE_MAP.TIME_ZONE IS 'FK from timezone ';

COMMENT ON COLUMN R360_USER_PREF.RATINGS_MI_TIMEZONE_MAP.MI_REF_TIMEZONE IS 'MI ref timezone';

COMMENT ON COLUMN R360_USER_PREF.RATINGS_MI_TIMEZONE_MAP.CREATE_DTTM IS 'The date and time that this record was created. This column usually appears if there is no start and end dates defined for the record.';

COMMENT ON COLUMN R360_USER_PREF.RATINGS_MI_TIMEZONE_MAP.CREATE_USER IS 'The ID (usually LDAP Text or login used by the process) of the user that created this record.';

COMMENT ON COLUMN R360_USER_PREF.RATINGS_MI_TIMEZONE_MAP.UPDATE_DTTM IS 'The date and time that this record was last updated.  This column usually appears if there is no start and end dates defined for the record.';

COMMENT ON COLUMN R360_USER_PREF.RATINGS_MI_TIMEZONE_MAP.UPDATE_USER IS 'The ID (usually LDAP Text or login used by the process) of the user that last updated this record.';

CREATE UNIQUE INDEX RATINGS_MI_MAP_PK ON R360_USER_PREF.RATINGS_MI_TIMEZONE_MAP
(RATINGS_MI_TIMEZONE_MAP_ID   ASC);

CREATE UNIQUE INDEX RATINGS_MI_MAP_AK ON R360_USER_PREF.RATINGS_MI_TIMEZONE_MAP
(MI_REF_TIMEZONE   ASC,TIME_ZONE   ASC);

ALTER TABLE R360_USER_PREF.RATINGS_MI_TIMEZONE_MAP
ADD CONSTRAINT  RATINGS_MI_MAP_PK PRIMARY KEY (RATINGS_MI_TIMEZONE_MAP_ID);

ALTER TABLE R360_USER_PREF.RATINGS_MI_TIMEZONE_MAP
ADD 
CONSTRAINT  RATINGS_MI_MAP_AK UNIQUE (MI_REF_TIMEZONE,TIME_ZONE);

ALTER TABLE R360_USER_PREF.RATINGS_MI_TIMEZONE_MAP
ADD 
CONSTRAINT RATINGS_MI_MAP_FK FOREIGN KEY (TIME_ZONE) REFERENCES R360_USER_PREF.R360_APP_TIME_ZONE (TIME_ZONE) ON DELETE SET NULL;

CREATE SEQUENCE  R360_USER_PREF.RATINGS_MI_TIMEZONE_MAP_SEQ START WITH 1 INCREMENT BY 1 NOCACHE NOCYCLE;

GRANT SELECT ON R360_USER_PREF.RATINGS_MI_TIMEZONE_MAP_SEQ  TO R360_USER_PREF_READER;

GRANT SELECT ON R360_USER_PREF.RATINGS_MI_TIMEZONE_MAP TO R360_USER_PREF_READER;

GRANT SELECT,INSERT,UPDATE,DELETE ON R360_USER_PREF.RATINGS_MI_TIMEZONE_MAP  TO R360_USER_PREF_WRITER;


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\USER_PROFILE-LOOKUP_23.09\user_profile_lookup_Rollback_Calling.sql

spool user_profile_lookup_Rollback_Calling.log 

@user_profile_lookup/Rollback/rollback.sql; 

spool off


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\USER_PROFILE-LOOKUP_23.09\user_profile_lookup_Tables_Calling.sql

spool user_profile_lookup_Tables_Calling.log 

@user_profile_lookup/Tables/tables.sql;

@user_profile_lookup/DML/R360_APP_TIME_ZONE.sql;

@user_profile_lookup/DML/R360_APP_COUNTRY.sql;

@user_profile_lookup/DML/R360_APP_LANGUAGE.sql;

@user_profile_lookup/DML/RATINGS_MI_TIMEZONE_MAP.sql;

@user_profile_lookup/DML/R360_APP_CURRENCY.sql;

@user_profile_lookup/DML/R360_APP_STATE.sql;

@user_profile_lookup/DML/MAGNITUDE.sql;

@user_profile_lookup/DML/FOREIGN_LANGUAGE_TRANS.sql;

spool off


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\USPF_NIB_views\uspf_nib_views_calling.sql

spool r360_uspf_nib_views_calling.log 

@uspf_nib_views_scripts/views/vw_uspf_nib_ratings.sql;
@uspf_nib_views_scripts/views/vw_uspf_nib_ratings_issue_name.sql;
@uspf_nib_views_scripts/views/vw_uspf_nib_ratings_history.sql;

spool off


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\USPF_NIB_views\uspf_nib_views_rollback.sql

spool r360_uspf_nib_views_rollback.log 

@uspf_nib_views_scripts/rollback/vw_uspf_nib_ratings_rollback.sql;
@uspf_nib_views_scripts/rollback/vw_uspf_nib_ratings_issue_name_rollback.sql;
@uspf_nib_views_scripts/rollback/vw_uspf_nib_ratings_history_rollback.sql;

spool off


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\USPF_NIB_views\uspf_nib_views_scripts\rollback\vw_uspf_nib_ratings_history_rollback.sql

DROP VIEW r360_appdata.vw_uspf_nib_ratings_history;


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\USPF_NIB_views\uspf_nib_views_scripts\rollback\vw_uspf_nib_ratings_issue_name_rollback.sql

DROP VIEW r360_appdata.vw_uspf_nib_ratings_issue_name;


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\USPF_NIB_views\uspf_nib_views_scripts\rollback\vw_uspf_nib_ratings_rollback.sql

DROP VIEW r360_appdata.vw_uspf_nib_ratings;


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\USPF_NIB_views\uspf_nib_views_scripts\views\vw_uspf_nib_ratings.sql

SET DEFINE OFF;
	 
/* This view provides data for USPF Non Issuer based ratings screen */ 		 
CREATE OR REPLACE VIEW r360_appdata.vw_uspf_nib_ratings AS 
WITH u_entity_instruments AS 
    (SELECT entity_id, instrument_id, role_code
     FROM   fgr.entity_instruments 
     WHERE  status_ind = 'A' AND role_code = 'ISSUER' AND ciq_rep_ind = 1
     UNION ALL
     SELECT entity_id, instrument_id, role_code 
     FROM   fgr.instrument_participants 
     WHERE  status_ind = 'A' AND role_code = 'OBLIGOR' AND ciq_rep_ind = 1),
	insurance_providers AS 
    (SELECT idce.instrument_detail_id, 
			LISTAGG(DISTINCT en.entity_short_name, ',') WITHIN GROUP (ORDER BY en.entity_short_name ASC) AS insurance_provider 
     FROM   fgr.instr_dtl_credit_enh idce
     INNER JOIN fgr.instrument_participants ip ON idce.instrument_participant_id = ip.instrument_participant_id 
     INNER JOIN fgr.entity_names en ON idce.entity_id = en.entity_id 
	 WHERE ip.status_ind = 'A' AND ip.ciq_rep_ind = 1 AND ip.coverage_code = 'BOND' AND ip.role_code = 'INSPRO' 
	   AND en.curr_ind = 'Y' 
     GROUP BY idce.instrument_detail_id),
    ins_ind AS 
	(SELECT instrument_id, 
            CASE WHEN MAX(CASE WHEN role_code = 'INSPRO' THEN 'Y' ELSE 'N' END) = 'Y' 
                  AND MAX(CASE WHEN coverage_code = 'BOND' THEN 'Y' ELSE 'N' END) = 'Y' THEN 'Y' 			
            ELSE 'N' 
			END AS insured_ind   
     FROM   fgr.instrument_participants 
     WHERE  status_ind = 'A' AND ciq_rep_ind = 1
     GROUP BY instrument_id),	 
    lrd AS 
	(SELECT rating_detail_id, 
	        MAX(last_review_date) AS last_review_date
     FROM   fgr.review_history
	 WHERE  ack_status = 'Y' 
        AND source_active_ind = 'Y' 
	    AND ciq_rep_ind = 1 
	 GROUP BY rating_detail_id),
	security_active_rating AS
	(SELECT          
	   i.instrument_id, 
       i.source_instrument_id,
       rd.detail_id AS instrument_detail_id,
       rd.rating_detail_id,
       rtc.description AS rating_type,
       rd.rating_type_code,
       rd.rating_date,
       rd.regulatory_indicator,
       rd.current_rating_symbol AS rating,
       rd.non_affirm_rating_id,
       i.instrument_name,
       id.maturity_date,
	   i.municipal_category_code,
	   i.municipal_security_code,
       COALESCE(id.cusip9, 'No CUSIP Available') AS cusip,    
       CASE WHEN (id.coupon_rate IS NOT NULL) THEN 
	     TO_CHAR(id.coupon_rate, '90.99') || '%'
	   ELSE 
	     NULL 
	   END AS coupon_rate,
       id.refunded_ind,
       CASE WHEN SUBSTR(i.series, 1, 4) >= '1900' AND SUBSTR(i.series, 1, 4) <= '9999' THEN 
	     SUBSTR(i.series, 1, 4)
        ELSE 
		  NULL
        END AS datebegun,
		i.series,
        MAX(CASE WHEN (rd.rating_code NOT IN('NR', 'NR/NR') AND NOT REGEXP_LIKE(rd.rating_code, '.[^/]NR')  
		               AND COALESCE(id.source_status_ind, i.source_status_ind) <> 'Y')
                      OR                         
                      TRUNC(SYSDATE) - TRUNC(rd.data_admin_date) <= 90 THEN
          'Y'
        ELSE
          'N'
        END) OVER (PARTITION BY i.instrument_id, id.instrument_detail_id) AS active_rating_ind,
        rd.data_admin_date
     FROM fgr.instruments i
     INNER JOIN fgr_prime.rating_details rd ON i.instrument_id = rd.rating_id
     INNER JOIN spapp.rating_type_codes rtc ON rd.rating_type_code = rtc.rating_type_code	 
     LEFT JOIN  fgr_prime.instrument_details id ON i.instrument_id = id.instrument_id
	        AND rd.rating_id = id.instrument_id AND rd.detail_id = id.instrument_detail_id
     WHERE rd.srd_curr_ind = 'Y' AND rd.ack_status = 'Y' AND rd.ciq_rep_ind = 1 
	   AND rd.rating_ind = 'I' AND rd.debt_type_code NOT IN ('FER', 'FINPROG', 'FSR', 'RC') 
	   AND rtc.active_ind = 'Y' AND rtc.rd_process_ind = 'Y')  
  SELECT DISTINCT 
    ei.entity_id,
	ei.role_code,
	sar.instrument_name AS issue_name, 
	sar.cusip, 
	CASE 
	   WHEN sar.municipal_category_code IN('PFSTRUCT', 'PFSCNDDERV') THEN 'Structured' 
	   WHEN ii.insured_ind = 'Y' THEN 'Insured' 
	   ELSE 'Refunded Or Other' 
    END AS category,
	sar.maturity_date, 
	sar.rating_type, 
	sar.rating, 
	sar.rating_date, 
    lrd.last_review_date, 
	sar.regulatory_indicator,
    CASE
       WHEN rdna.rating_action_word <> 'Affirmed' AND rdna.current_cw_ol_action_word IS NOT NULL THEN 
	        rdna.rating_action_word || ' | ' || rdna.current_cw_ol_action_word
       WHEN rdna.rating_action_word = 'Affirmed'  AND rdna.current_cw_ol_action_word IS NOT NULL THEN 
		    rdna.current_cw_ol_action_word
       WHEN rdna.rating_action_word IS NULL THEN 
		    rdna.current_cw_ol_action_word
       WHEN rdna.rating_action_word <> 'Affirmed' AND rdna.current_cw_ol_action_word IS NULL THEN 
		    rdna.rating_action_word
       WHEN rdna.rating_action_word = 'Affirmed' AND rdna.current_cw_ol_action_word IS NULL THEN
  		    rdna.rating_action_word
    END AS action,
    rdna.current_cw_ol AS creditwatch_outlook, 
	rdna.current_cw_ol_date AS creditwatch_outlook_date, 
	sar.coupon_rate,
    sar.refunded_ind, 
	ip.insurance_provider,
	CASE WHEN (ms.municipal_security_code = 'APPROP') THEN 'Appropriations - Alternate'
    ELSE ms.description
    END AS municipal_security, 
	sar.datebegun, 
	sar.series, 
    sar.instrument_id, 	   	
    sar.instrument_detail_id, 
	sar.rating_detail_id, 
	sar.rating_type_code,
    CASE 
	   WHEN sar.municipal_category_code = 'PFSTRUCT' THEN 1 
	   WHEN sar.municipal_category_code = 'PFSCNDDERV' THEN 2 
	   WHEN ii.insured_ind = 'Y' THEN 3 
	   ELSE 4 
	END AS sort_criteria1,
	CASE 
	   WHEN sar.municipal_category_code = 'PFSTRUCT' THEN sar.municipal_security_code 
       ELSE NULL 
    END AS sort_criteria2,	   
	CASE 
	   WHEN SUBSTR(sar.series, 1, 4) >= '1900' AND SUBSTR(sar.series, 1, 4) <= '9999' THEN '1' 
	   WHEN sar.series IS NOT NULL THEN '2' 
	   ELSE sar.instrument_name 
    END AS sort_criteria3
  FROM u_entity_instruments ei 
  INNER JOIN security_active_rating sar ON ei.instrument_id = sar.instrument_id 
  INNER JOIN fgr_prime.rating_details rdna ON rdna.source_rating_id = sar.non_affirm_rating_id
  INNER JOIN spapp.municipal_category_codes mc ON mc.municipal_category_code = sar.municipal_category_code 
         AND mc.active_ind = 'Y'
  INNER JOIN spapp.municipal_security_codes ms ON ms.municipal_security_code = sar.municipal_security_code 
         AND ms.active_ind = 'Y'  
  LEFT JOIN insurance_providers ip ON sar.instrument_detail_id = ip.instrument_detail_id
  LEFT JOIN ins_ind ii ON sar.instrument_id = ii.instrument_id
  LEFT JOIN lrd ON sar.rating_detail_id = lrd.rating_detail_id
  WHERE sar.active_rating_ind = 'Y' 
    AND sar.maturity_date IS NOT NULL			
    AND sar.source_instrument_id NOT IN (SELECT linked_object_id 
		                                 FROM   fgr.analytic_sec_links 
										 WHERE  linked_object_type = 'issue' 
										    AND active_ind = 'A') 
ORDER BY sort_criteria1, 
         sort_criteria2, 
		 sort_criteria3, 
		 sar.datebegun DESC, 
		 sar.series,
		 sar.instrument_name, 
		 sar.maturity_date DESC, 
		 sar.rating_date DESC,
		 ei.role_code;
		 
GRANT SELECT ON r360_appdata.vw_uspf_nib_ratings TO r360_appdata_reader;


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\USPF_NIB_views\uspf_nib_views_scripts\views\vw_uspf_nib_ratings_history.sql

SET DEFINE OFF;

CREATE OR REPLACE VIEW r360_appdata.vw_uspf_nib_ratings_history AS  
WITH ratings_history AS (
   SELECT rd.rating_id AS instrument_id,
          rd.detail_id AS instrument_detail_id,       
		  rd.rating_detail_id,
          rd.rating_type_code,
          rtc.description AS rating_type,
          rd.current_rating_symbol AS rating,
          rd.rating_date,
          rd.regulatory_indicator,  
          CASE WHEN rd.rating_action_word <> 'Affirmed' AND rd.current_cw_ol_action_word is not null THEN
                 rd.rating_action_word || ' | ' || rd.current_cw_ol_action_word
               WHEN rd.rating_action_word = 'Affirmed' AND rd.current_cw_ol_action_word is not null THEN
                 rd.current_cw_ol_action_word 
               WHEN rd.rating_action_word is null  THEN 
                 rd.current_cw_ol_action_word 
               WHEN rd.rating_action_word <> 'Affirmed' AND rd.current_cw_ol_action_word is null THEN 
                 rd.rating_action_word 
               WHEN rd.rating_action_word = 'Affirmed' AND rd.current_cw_ol_action_word is null THEN 
                 rd.rating_action_word 
               ELSE NULL 
          END AS action,           
          rd.current_cw_ol AS creditwatch_outlook, 
		  rd.current_cw_ol_date AS creditwatch_outlook_date,
          rd.data_admin_date		  
   FROM   fgr_prime.rating_details rd
   INNER JOIN spapp.rating_type_codes rtc ON rd.rating_type_code =  rtc.rating_type_code	 
   WHERE rd.ack_status = 'Y' AND rd.ciq_rep_ind = 1 AND rd.rating_ind = 'I' 
	   AND rtc.active_ind = 'Y' AND rtc.rd_process_ind = 'Y' 
       AND rd.rating_action_type <> 'Affirmed' 
       AND ((rd.rating_code NOT IN ('NR', 'NR') AND NOT (regexp_like(rd.rating_code, '.[^/]NR'))) 
	         OR (TRUNC(SYSDATE) - TRUNC(rd.data_admin_date)) <= 90))
SELECT *
FROM   ratings_history
WHERE  NVL(action, 'Valid') <> 'Affirmed'
ORDER BY data_admin_date DESC, 
         rating_date     DESC;     
  
GRANT SELECT ON r360_appdata.vw_uspf_nib_ratings_history TO r360_appdata_reader;  



C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\USPF_NIB_views\uspf_nib_views_scripts\views\vw_uspf_nib_ratings_issue_name.sql

SET DEFINE OFF;
	 
/* This view provides data for USPF Non Issuer based ratings screen */ 		 
CREATE OR REPLACE VIEW r360_appdata.vw_uspf_nib_ratings_issue_name AS 
WITH u_entity_instruments AS 
    (SELECT entity_id, instrument_id, role_code
     FROM   fgr.entity_instruments 
     WHERE  status_ind = 'A' AND role_code = 'ISSUER' AND ciq_rep_ind = 1
     UNION ALL
     SELECT entity_id, instrument_id, role_code 
     FROM   fgr.instrument_participants 
     WHERE  status_ind = 'A' AND role_code = 'OBLIGOR' AND ciq_rep_ind = 1),
    ins_ind AS 
	(SELECT instrument_id, 
            CASE WHEN MAX(CASE WHEN role_code = 'INSPRO' THEN 'Y' ELSE 'N' END) = 'Y' 
                  AND MAX(CASE WHEN coverage_code = 'BOND' THEN 'Y' ELSE 'N' END) = 'Y' THEN 'Y' 			
            ELSE 'N' 
			END AS insured_ind   
     FROM   fgr.instrument_participants 
     WHERE  status_ind = 'A' AND ciq_rep_ind = 1
     GROUP BY instrument_id),	 
	security_active_rating AS
	(SELECT          
	   i.instrument_id, 
       i.source_instrument_id,
       i.instrument_name,
	   i.municipal_category_code,
	   i.municipal_security_code,
       CASE WHEN SUBSTR(i.series, 1, 4) >= '1900' AND SUBSTR(i.series, 1, 4) <= '9999' THEN 
	     SUBSTR(i.series, 1, 4)
        ELSE 
		  NULL
        END AS datebegun,
		i.series,
        MAX(CASE WHEN (rd.rating_code NOT IN('NR', 'NR/NR') AND NOT REGEXP_LIKE(rd.rating_code, '.[^/]NR')  
		               AND COALESCE(id.source_status_ind, i.source_status_ind) <> 'Y')
                      OR                         
                      TRUNC(SYSDATE) - TRUNC(rd.data_admin_date) <= 90 THEN
          'Y'
        ELSE
          'N'
        END) OVER (PARTITION BY i.instrument_id, id.instrument_detail_id) AS active_rating_ind
     FROM fgr.instruments i
     INNER JOIN fgr_prime.rating_details rd ON i.instrument_id = rd.rating_id
     INNER JOIN spapp.rating_type_codes rtc ON rd.rating_type_code = rtc.rating_type_code	 
     LEFT JOIN  fgr_prime.instrument_details id ON i.instrument_id = id.instrument_id
	        AND rd.rating_id = id.instrument_id AND rd.detail_id = id.instrument_detail_id
     WHERE rd.srd_curr_ind = 'Y' AND rd.ack_status = 'Y' AND rd.ciq_rep_ind = 1 
	   AND rd.rating_ind = 'I' AND rd.debt_type_code NOT IN ('FER', 'FINPROG', 'FSR', 'RC') 
	   AND rtc.active_ind = 'Y' AND rtc.rd_process_ind = 'Y')  
  SELECT DISTINCT 
    ei.entity_id,
	ei.role_code,
	sar.instrument_name AS issue_name, 
	CASE 
	   WHEN sar.municipal_category_code IN('PFSTRUCT', 'PFSCNDDERV') THEN 'Structured' 
	   WHEN ii.insured_ind = 'Y' THEN 'Insured' 
	   ELSE 'Refunded Or Other' 
    END AS category,
	sar.series, 
	sar.datebegun, 
    sar.instrument_id, 	   	
    CASE 
	   WHEN sar.municipal_category_code = 'PFSTRUCT' THEN 1 
	   WHEN sar.municipal_category_code = 'PFSCNDDERV' THEN 2 
	   WHEN ii.insured_ind = 'Y' THEN 3 
	   ELSE 4 
	END AS sort_criteria1,
	CASE 
	   WHEN sar.municipal_category_code = 'PFSTRUCT' THEN sar.municipal_security_code 
       ELSE NULL 
    END AS sort_criteria2,	   
	CASE 
	   WHEN SUBSTR(sar.series, 1, 4) >= '1900' AND SUBSTR(sar.series, 1, 4) <= '9999' THEN '1' 
	   WHEN sar.series IS NOT NULL THEN '2' 
	   ELSE sar.instrument_name 
    END AS sort_criteria3 
  FROM u_entity_instruments ei 
  INNER JOIN security_active_rating sar ON ei.instrument_id = sar.instrument_id 
  INNER JOIN spapp.municipal_category_codes mc ON mc.municipal_category_code = sar.municipal_category_code 
         AND mc.active_ind = 'Y'
  INNER JOIN spapp.municipal_security_codes ms ON ms.municipal_security_code = sar.municipal_security_code 
         AND ms.active_ind = 'Y'  
  LEFT JOIN ins_ind ii ON ei.instrument_id = ii.instrument_id
  WHERE sar.active_rating_ind = 'Y' 
    AND sar.source_instrument_id NOT IN (SELECT linked_object_id 
		                                 FROM   fgr.analytic_sec_links 
										 WHERE  linked_object_type = 'issue' 
										    AND active_ind = 'A')   
ORDER BY sort_criteria1, 
         sort_criteria2, 
		 sort_criteria3, 
		 sar.datebegun DESC, 
		 sar.series,
		 sar.instrument_name,
		 ei.role_code;
		 
GRANT SELECT ON r360_appdata.vw_uspf_nib_ratings_issue_name TO r360_appdata_reader;


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\USPF_Peers_Portfolio-10_May_2024\r360_uspf_peers_calling.sql

spool r360_uspf_peers_calling.log 

@scripts/views/vw_uspf_peers_portfolio_contents.sql;

spool off


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\USPF_Peers_Portfolio-10_May_2024\r360_uspf_peers_rollback.sql

spool r360_uspf_peers_rollback.log 

@scripts/rollback/vw_uspf_peers_portfolio_contents_rollback.sql;

spool off


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\USPF_Peers_Portfolio-10_May_2024\scripts\rollback\vw_uspf_peers_portfolio_contents_rollback.sql

DROP VIEW r360_appdata.vw_uspf_peers_portfolio_contents;


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\sql\USPF_Peers_Portfolio-10_May_2024\scripts\views\vw_uspf_peers_portfolio_contents.sql

SET DEFINE OFF;

CREATE OR REPLACE VIEW r360_appdata.vw_uspf_peers_portfolio_contents AS 
WITH issuer_role AS 
  (SELECT entity_id, 
          instrument_id, 
          role_code 
   FROM   fgr.entity_instruments 
   WHERE  role_code = 'ISSUER' 
      AND status_ind = 'A' 
      AND ciq_rep_ind = 1),
obligor_role AS    
  (SELECT entity_id, 
          instrument_id, 
          role_code 
   FROM   fgr.instrument_participants 
   WHERE  role_code = 'OBLIGOR' 
      AND status_ind = 'A' 
      AND ciq_rep_ind = 1),
ef_data_period AS 
  (SELECT ea.ao_core_id AS as_id,
          MIN(p.period_id) AS period_id
   FROM   uspf_apr.entity_asid ea,
          uspf_apr.period p
   WHERE  ea.entity_id = p.entity_id
      AND p.period_type_cd = 'A'
   GROUP BY ea.ao_core_id)   
SELECT  
  	   LISTAGG(DISTINCT obn.entity_short_name, '\n') WITHIN GROUP (ORDER BY obn.entity_short_name) AS obligor,	   
	   LISTAGG(DISTINCT obn.entity_id, ',') WITHIN GROUP (ORDER BY obn.entity_short_name) AS obligor_entity_id,	   
   	   LISTAGG(DISTINCT isn.entity_short_name, '\n') WITHIN GROUP (ORDER BY isn.entity_short_name) AS issuer,
   	   LISTAGG(DISTINCT isn.entity_id, ',') WITHIN GROUP (ORDER BY isn.entity_short_name) AS issuer_entity_id,
       a.analytic_security_id     AS as_id, 	   
	   a.instrument_id     AS as_instrument_id, 
       a.display_name             AS as_name,	   
       a.portfolio_sector         AS sector_code, 
       s.sector_description       AS sector, 	   
       a.portfolio_sub_sector     AS sub_sector_code,        
       ss.sub_sector_description  AS sub_sector, 	   	   
	   a.state_code,
	   rd.rating_type_code,
       rtc.description            AS rating_type, 
       rd.current_rating_symbol   AS rating, 
       rd.rating_date,       
	   lrd.last_review_date,
       CASE WHEN rdna.current_cw_ol = 'NM' THEN 'Not Meaningful'
        	ELSE rdna.current_cw_ol
       END AS creditwatch_outlook,
       rdna.current_cw_ol_date AS creditwatch_outlook_date,
       MAX(CASE WHEN dp.period_id IS NOT NULL THEN 'Y'
           ELSE 'N'
           END) AS financials_available,	   
       rd.rating_detail_id 
FROM   fgr.analytic_securities a,
       uspf_apr.sector s,
       uspf_apr.sub_sector ss,	   
       fgr_prime.rating_details rd, 
	   r360_appdata.vw_review_history_lrd lrd, 
       spapp.rating_type_codes rtc,
       r360_appdata.rating_type_code_map rtcm,
       fgr_prime.rating_details rdna,
       fgr.analytic_sec_links asl,
       fgr.instruments i,
	   obligor_role o,
       issuer_role ir,
	   fgr.entity_names obn,
	   fgr.entity_names isn,
       ef_data_period dp	   
WHERE  a.analytic_security_id = asl.analytic_security_id
   AND a.portfolio_sector = s.sector_code        
   AND a.portfolio_sub_sector = ss.sub_sector_code     
   AND a.instrument_id = rd.rating_id
   AND rd.rating_type_code = rtc.rating_type_code 
   AND rd.rating_detail_id = lrd.rating_detail_id(+)    
   AND rtc.rating_type_code = rtcm.rating_type_code
   AND rd.non_affirm_rating_id = rdna.source_rating_id
   AND asl.linked_object_id = i.source_instrument_id   
   AND i.instrument_id = o.instrument_id
   AND o.entity_id = obn.entity_id    
   AND i.instrument_id = ir.instrument_id
   AND ir.entity_id = isn.entity_id 
   AND a.analytic_security_id = dp.as_id(+)   
   AND asl.active_ind = 'A'   
   AND asl.linked_object_type = 'issue'
   AND i.dept_code = 204
   AND i.source_instrument_ind = 'I'  
   AND rd.srd_curr_ind = 'Y' 
   AND rd.rating_ind = 'A'
   AND rd.ack_status = 'Y'
   AND rd.ciq_rep_ind = 1   
   AND rd.rating_type_code IN ('STDLONG', 'STDSHORT')
   AND rtcm.process_ind = 'Y'
   AND rtcm.actv_flag = 'Y'
   AND rdna.rating_ind = 'A'
   AND rdna.ack_status = 'Y'
   AND rdna.ciq_rep_ind = 1
   AND obn.curr_ind = 'Y'
   AND isn.curr_ind = 'Y'    
GROUP BY 
       a.portfolio_sector,
       a.portfolio_sub_sector,
       s.sector_description, 
	   ss.sub_sector_description,
       a.analytic_security_id, 
       a.instrument_id,
       a.display_name,
	   a.state_code,
	   rd.rating_type_code,	   
       rtc.description, 
       rd.current_rating_symbol, 
       rd.rating_date,       
	   lrd.last_review_date,
       rdna.current_cw_ol,
       rdna.current_cw_ol_date,
	   rd.rating_detail_id;	   
	   
GRANT SELECT ON r360_appdata.vw_uspf_peers_portfolio_contents TO r360_appdata_reader;


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\test\java\com\spglobal\ratings\ratingsdata\controller\ArticlePDFControllerTest.java

package com.spglobal.ratings.ratingsdata.controller;

import com.spglobal.ratings.ratingsdata.service.ArticlePDFService;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.MediaType;
import org.springframework.test.context.junit.jupiter.SpringExtension;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;
import org.springframework.test.web.servlet.result.MockMvcResultMatchers;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;

import static org.mockito.Mockito.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;

@ExtendWith({ SpringExtension.class, MockitoExtension.class })
@WebMvcTest(value = ArticlePDFController.class)
public class ArticlePDFControllerTest {

    @Autowired
    private MockMvc mockMvc;

    @MockBean
    private ArticlePDFService articlePDFService;

    @InjectMocks
    private ArticlePDFController controller;

    @BeforeEach
    public void init() {
        MockitoAnnotations.initMocks(this);
        mockMvc = MockMvcBuilders.standaloneSetup(controller).build();
    }

    @Test
    public void getArticlePDFTestSuccess() throws Exception{
        Long articleId = 1l;
        byte[] pdf = new byte[10];
        when(articlePDFService.getArticlePDFByArticleId(articleId)).thenReturn(pdf);

        mockMvc.perform(MockMvcRequestBuilders.get("/ratingsData/api/getArticlepdf")
                        .param("articleId", String.valueOf(articleId)))
                .andExpect(MockMvcResultMatchers.status().isOk())
                .andExpect(MockMvcResultMatchers.content().contentType(MediaType.APPLICATION_PDF));

        verify(articlePDFService,times(1)).getArticlePDFByArticleId(articleId);

    }

    @Test
    public void getArticlePDFTestFileNotFound() throws Exception{
        Long articleId = 1l;
        byte[] pdf = null;
        when(articlePDFService.getArticlePDFByArticleId(articleId)).thenReturn(pdf);

        mockMvc.perform(MockMvcRequestBuilders.get("/ratingsData/api/getArticlepdf")
                        .param("articleId", String.valueOf(articleId)))
                .andExpect(MockMvcResultMatchers.status().isNotFound());

        verify(articlePDFService,times(1)).getArticlePDFByArticleId(articleId);

    }
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\test\java\com\spglobal\ratings\ratingsdata\controller\CommonFeaturesControllerTest.java

package com.spglobal.ratings.ratingsdata.controller;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

import com.spglobal.ratings.ratingsdata.entity.*;
import com.spglobal.ratings.ratingsdata.model.EntitiesPayload;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mockito;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.MediaType;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit.jupiter.SpringExtension;
import org.springframework.test.web.servlet.ResultActions;
import org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;
import org.springframework.test.web.servlet.result.MockMvcResultMatchers;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;
import org.springframework.util.LinkedMultiValueMap;
import org.springframework.util.MultiValueMap;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.spglobal.ratings.ratingsdata.model.InstnNamesRequest;
import com.spglobal.ratings.ratingsdata.service.CommonFeaturesService;

@ContextConfiguration(classes = { CommonFeaturesController.class })
@ExtendWith(SpringExtension.class)
public class CommonFeaturesControllerTest {
	@Autowired
	private CommonFeaturesController commonFeaturesController;

	@MockBean
	private CommonFeaturesService commonFeaturesService;

	@Test
	void testGetRelatedEntitiesByEntityId404() throws Exception {
		when(commonFeaturesService.getRelatedEntitiesByEntityId(any(), any())).thenReturn(Collections.emptyList());
		MockHttpServletRequestBuilder requestBuilder = MockMvcRequestBuilders.get("/ratingsData/api/relatedEntity/entity/123");
		ResultActions actualPerformResult = MockMvcBuilders.standaloneSetup(this.commonFeaturesController).build().perform(requestBuilder);
		actualPerformResult.andExpect(MockMvcResultMatchers.status().is4xxClientError());
	}
	
	@Test
	void testGetRelatedEntitiesByEntityId200() throws Exception {
		List<RelatedEntities> entityResponse = new ArrayList<RelatedEntities>();
		RelatedEntities entity = new RelatedEntities();
		entityResponse.add(entity);
		when(commonFeaturesService.getRelatedEntitiesByEntityId(any(), any())).thenReturn(entityResponse);
		MockHttpServletRequestBuilder requestBuilder = MockMvcRequestBuilders.get("/ratingsData/api/relatedEntity/entity/123");
		ResultActions actualPerformResult = MockMvcBuilders.standaloneSetup(this.commonFeaturesController).build().perform(requestBuilder);
		actualPerformResult.andExpect(MockMvcResultMatchers.status().isOk());
	}
	
	@Test
	void testGetRelatedEntitiesBySNLID404() throws Exception {
		MockHttpServletRequestBuilder requestBuilder = MockMvcRequestBuilders.get("/ratingsData/api/relatedEntity/snlid/2");
		ResultActions actualPerformResult = MockMvcBuilders.standaloneSetup(this.commonFeaturesController).build().perform(requestBuilder);
		actualPerformResult.andExpect(MockMvcResultMatchers.status().is4xxClientError());
	}

	@Test
	void testGetRelatedEntitiesBySNLID200() throws Exception {
		List<RelatedEntities> entityResponse = new ArrayList<RelatedEntities>();
		RelatedEntities entity = new RelatedEntities();
		entityResponse.add(entity);
		when(commonFeaturesService.getRelatedEntitiesByType(any(), any(), any())).thenReturn(entityResponse);
		MockHttpServletRequestBuilder requestBuilder = MockMvcRequestBuilders.get("/ratingsData/api/relatedEntity/snl/2");
		ResultActions actualPerformResult = MockMvcBuilders.standaloneSetup(this.commonFeaturesController).build().perform(requestBuilder);
		actualPerformResult.andExpect(MockMvcResultMatchers.status().isOk());
	}

	@Test
	void testGetOrgAndTickerDetailsByEntityId404() throws Exception {
		MockHttpServletRequestBuilder requestBuilder = MockMvcRequestBuilders.get("/ratingsData/api/orgTicker/entity/121");
		ResultActions actualPerformResult = MockMvcBuilders.standaloneSetup(this.commonFeaturesController).build().perform(requestBuilder);
		actualPerformResult.andExpect(MockMvcResultMatchers.status().is4xxClientError());
	}
	
	@Test
	void testGetOrgAndTickerDetailsByEntityId200() throws Exception {
		List<EntityDetails> entityResponse = new ArrayList<EntityDetails>();
		EntityDetails entity = new EntityDetails();
		entityResponse.add(entity);
		when(commonFeaturesService.getOrgAndTickerDetailsByEntityId(any())).thenReturn(entityResponse);
		MockHttpServletRequestBuilder requestBuilder = MockMvcRequestBuilders.get("/ratingsData/api/orgTicker/entity/121");
		ResultActions actualPerformResult = MockMvcBuilders.standaloneSetup(this.commonFeaturesController).build().perform(requestBuilder);
		actualPerformResult.andExpect(MockMvcResultMatchers.status().isOk());
	}

	@Test
	void testGetOrgAndTickerDetailsBySnlId404() throws Exception {
		MockHttpServletRequestBuilder requestBuilder = MockMvcRequestBuilders.get("/ratingsData/api/orgTicker/snlId/121");
		ResultActions actualPerformResult = MockMvcBuilders.standaloneSetup(this.commonFeaturesController).build().perform(requestBuilder);
		actualPerformResult.andExpect(MockMvcResultMatchers.status().is4xxClientError());
	}
	
	@Test
	void testGetOrgAndTickerDetailsBySnlId200() throws Exception {
		List<EntityDetails> entityResponse = new ArrayList<EntityDetails>();
		EntityDetails entity = new EntityDetails();
		entityResponse.add(entity);
		when(commonFeaturesService.getOrgAndTickerDetailsByType(any(),any())).thenReturn(entityResponse);
		MockHttpServletRequestBuilder requestBuilder = MockMvcRequestBuilders.get("/ratingsData/api/orgTicker/snl/121");
		ResultActions actualPerformResult = MockMvcBuilders.standaloneSetup(this.commonFeaturesController).build().perform(requestBuilder);
		actualPerformResult.andExpect(MockMvcResultMatchers.status().isOk());
	}
	
	@Test
	void testGetOrgAndTickerDetailForEntityIds() throws Exception {
		EntitiesPayload payload = new EntitiesPayload();
		payload.setKeyInstns(List.of("131323","6456456"));
		MockHttpServletRequestBuilder requestBuilder = MockMvcRequestBuilders.post("/ratingsData/api/orgTicker/getEntityDetails");
		ResultActions actualPerformResult = MockMvcBuilders.standaloneSetup(this.commonFeaturesController).build().perform(
				requestBuilder.content(asJsonString(payload))
                .contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON));
		actualPerformResult.andExpect(MockMvcResultMatchers.status().isOk());
	}

	@Test
	void testGetOrgAndTickerDetailForNullEntityIds() throws Exception {
		String response = null;
		MockHttpServletRequestBuilder requestBuilder = MockMvcRequestBuilders.post("/ratingsData/api/orgTicker/getEntityDetails");
		ResultActions actualPerformResult = MockMvcBuilders.standaloneSetup(this.commonFeaturesController).build().perform(
				requestBuilder
                .contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON));
		actualPerformResult.andExpect(MockMvcResultMatchers.status().is4xxClientError());
	}

	@Test
	void testGetOrgAndTickerDetailForCapiqIds() throws Exception {
		EntitiesPayload payload = new EntitiesPayload();
		payload.setCapiqIds(List.of("131323","6456456"));
		MockHttpServletRequestBuilder requestBuilder = MockMvcRequestBuilders.post("/ratingsData/api/orgTicker/getEntityDetails");
		ResultActions actualPerformResult = MockMvcBuilders.standaloneSetup(this.commonFeaturesController).build().perform(
				requestBuilder.content(asJsonString(payload))
						.contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON));
		actualPerformResult.andExpect(MockMvcResultMatchers.status().isOk());
	}

	@Test
	void testGetOrgAndTickerDetailForCapiqIds_Nullparam() throws Exception {
		EntitiesPayload payload = new EntitiesPayload();
		MockHttpServletRequestBuilder requestBuilder = MockMvcRequestBuilders.post("/ratingsData/api/orgTicker/getEntityDetails");
		ResultActions actualPerformResult = MockMvcBuilders.standaloneSetup(this.commonFeaturesController).build().perform(
				requestBuilder.content(asJsonString(payload))
						.contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON));
		actualPerformResult.andExpect(MockMvcResultMatchers.status().isBadRequest());
	}


	 @Test
	    void testGetCLOABSContacts() throws Exception {
	        MultiValueMap<String, String> queryParams = new LinkedMultiValueMap<>();
	        queryParams.add("entityId", "112354");
	        queryParams.add("subSectorCode", "ABS");
	        queryParams.add("contactType", "Analytical");
	        MockHttpServletRequestBuilder requestBuilder = MockMvcRequestBuilders.get("/ratingsData/api/getCLOABSContacts").queryParams(queryParams);
	        ResultActions actualPerformResult = MockMvcBuilders.standaloneSetup(this.commonFeaturesController).build().perform(requestBuilder);
	       // actualPerformResult.andExpect(MockMvcResultMatchers.status().isOk());
	    }
	

		@Test
		void testGetInstitutionNameInList() throws Exception {
			InstnNamesRequest request = new InstnNamesRequest();
			List<String> instnNames = new ArrayList<>();
			instnNames.add("Apple Inc.");
			request.setInstnNames(instnNames);

			List<SnlEntityDetailsUnrated> entityResponse = new ArrayList<>();
			SnlEntityDetailsUnrated entity = new SnlEntityDetailsUnrated();
			entityResponse.add(entity);

			when(commonFeaturesService.getInstitutionDetails(any())).thenReturn(entityResponse);

			MockHttpServletRequestBuilder requestBuilder = MockMvcRequestBuilders
					.post("/ratingsData/api/getInstnDetails").content(asJsonString(request))
					.contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON);

			ResultActions actualPerformResult = MockMvcBuilders.standaloneSetup(this.commonFeaturesController).build()
					.perform(requestBuilder);

			actualPerformResult.andExpect(MockMvcResultMatchers.status().isOk());
		}

		private String asJsonString(final Object request) {
			try {
				final ObjectMapper mapper = new ObjectMapper();
				return mapper.writeValueAsString(request);
			} catch (JsonProcessingException e) {
				throw new RuntimeException(e);
			}
		}

	@Test
	void testGetOrgAndTickerDetailsBycapiqId404() throws Exception {
		MockHttpServletRequestBuilder requestBuilder = MockMvcRequestBuilders.get("/ratingsData/api/orgTicker//121");
		ResultActions actualPerformResult = MockMvcBuilders.standaloneSetup(this.commonFeaturesController).build().perform(requestBuilder);
		actualPerformResult.andExpect(MockMvcResultMatchers.status().is4xxClientError());
	}


	@Test
	void testGetOrgAndTickerDetailsBycapiqId200() throws Exception {
		List<EntityDetails> entityResponse = new ArrayList<EntityDetails>();
		EntityDetails entity = new EntityDetails();
		entityResponse.add(entity);
		when(commonFeaturesService.getOrgAndTickerDetailsByType(any(),any())).thenReturn(entityResponse);
		MockHttpServletRequestBuilder requestBuilder = MockMvcRequestBuilders.get("/ratingsData/api/orgTicker/capiq/121");
		ResultActions actualPerformResult = MockMvcBuilders.standaloneSetup(this.commonFeaturesController).build().perform(requestBuilder);
		actualPerformResult.andExpect(MockMvcResultMatchers.status().isOk());
	}

	@Test
	void testGetCommercialContacts() throws Exception {
		Contacts contacts = new Contacts();
		contacts.setEntityId(112354L);
		contacts.setContactType("Commercial");
		contacts.setEmail("test@gmail.com");
		contacts.setRole("Business");
		contacts.setFullName("Test");
		List<Contacts> list = new ArrayList<>();
		list.add(contacts);

		when(commonFeaturesService.getContacts(any(),any(),any())).thenReturn(list);
		MockHttpServletRequestBuilder requestBuilder = MockMvcRequestBuilders.get("/ratingsData/api//commercial/contacts")
				.queryParam("entityId", "5039").queryParam("contactType", "commercial");
		ResultActions actualPerformResult = MockMvcBuilders.standaloneSetup(this.commonFeaturesController).build().perform(requestBuilder);
		actualPerformResult.andExpect(MockMvcResultMatchers.status().isOk());
	}

	@Test
	void testGetCommercialContacts_NullResult() throws Exception {
		when(commonFeaturesService.getContacts(any(),any(),any())).thenReturn(null);
		MockHttpServletRequestBuilder requestBuilder = MockMvcRequestBuilders.get("/ratingsData/api//commercial/contacts")
				.queryParam("capiq", "5039").queryParam("contactType", "commercial");
		ResultActions actualPerformResult = MockMvcBuilders.standaloneSetup(this.commonFeaturesController).build().perform(requestBuilder);
		actualPerformResult.andExpect(MockMvcResultMatchers.status().isNotFound());
	}

	@Test
	void testGetCommercialContacts_emptyParams() throws Exception {
		when(commonFeaturesService.getContacts(any(),any(),any())).thenReturn(null);
		MockHttpServletRequestBuilder requestBuilder = MockMvcRequestBuilders.get("/ratingsData/api//commercial/contacts")
				.queryParam("contactType", "commercial");
		ResultActions actualPerformResult = MockMvcBuilders.standaloneSetup(this.commonFeaturesController).build().perform(requestBuilder);
		actualPerformResult.andExpect(MockMvcResultMatchers.status().is4xxClientError());
	}

	@Test
	void testGetTimeZone() throws Exception {
		TimeZone timeZone = new TimeZone();
		timeZone.setTimeZone("EST");
		timeZone.setTimeZoneDisplayName("EST");
		timeZone.setTimeZoneName("Eastren Time");
		List<TimeZone> list = new ArrayList<>();
		list.add(timeZone);
		when(commonFeaturesService.getTimeZone(any())).thenReturn(list);
		MockHttpServletRequestBuilder requestBuilder = MockMvcRequestBuilders.get("/ratingsData/api/getTimeZone").queryParam("timeZone", "EST");
		ResultActions actualPerformResult = MockMvcBuilders.standaloneSetup(this.commonFeaturesController).build().perform(requestBuilder);
		actualPerformResult.andExpect(MockMvcResultMatchers.status().isOk());
	}

	@Test
	void testGetTimeZone_nullResult() throws Exception {
		when(commonFeaturesService.getTimeZone(any())).thenReturn(null);
		MockHttpServletRequestBuilder requestBuilder = MockMvcRequestBuilders.get("/ratingsData/api/getTimeZone").queryParam("timeZone", "EST");
		ResultActions actualPerformResult = MockMvcBuilders.standaloneSetup(this.commonFeaturesController).build().perform(requestBuilder);
		actualPerformResult.andExpect(MockMvcResultMatchers.status().isNoContent());
	}
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\test\java\com\spglobal\ratings\ratingsdata\controller\ConfigControllerTest.java

package com.spglobal.ratings.ratingsdata.controller;

import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.MediaType;
import org.springframework.test.context.junit.jupiter.SpringExtension;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.ResultActions;
import org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;
import org.springframework.test.web.servlet.result.MockMvcResultMatchers;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;
import org.springframework.util.LinkedMultiValueMap;
import org.springframework.util.MultiValueMap;

import com.spglobal.ratings.ratingsdata.entity.ConfigDetails;
import com.spglobal.ratings.ratingsdata.service.ConfigDetailsServiceImpl;

@ExtendWith({ SpringExtension.class, MockitoExtension.class })
@WebMvcTest(value = ConfigController.class)
public class ConfigControllerTest {

	@Autowired
	private MockMvc mockMvc;

	@InjectMocks
	private ConfigController controller;

	@MockBean
	private ConfigDetailsServiceImpl configDetailsService;

	@Test
	public void getConfigDetailsTest() throws Exception {
		ConfigDetails configDetail = new ConfigDetails();
		configDetail.setConfigKey("NON_PUBLIC_OPN_SWITCH");
		configDetail.setConfigValue(1);
		String configKey = "NON_PUBLIC_OPN_SWITCH";
		Mockito.when(configDetailsService.getConfigDetails(configKey)).thenReturn(configDetail);

		MockHttpServletRequestBuilder builder = MockMvcRequestBuilders
				.get("/configData/api/getConfigDetails?configKey=NON_PUBLIC_OPN_SWITCH");

		ResultActions actualPerformResult = MockMvcBuilders.standaloneSetup(this.controller).build().perform(builder);
		actualPerformResult.andExpect(MockMvcResultMatchers.status().isOk());
	}

	@Test
	public void getConfigDetailTest() throws Exception {				
		List<String> configKey = new ArrayList<String>();
		configKey.add("NON_PUBLIC_OPN_SWITCH");
		String response = "[]";
        
//		mockMvc.perform(MockMvcRequestBuilders.post("/configData/api/getConfigDetail").content("NON_PUBLIC_OPN_SWITCH")
//				.contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON)).andExpect(status().isOk());

		Mockito.when(configDetailsService.getConfigDetail(configKey)).thenReturn(Collections.emptyList());
		MockHttpServletRequestBuilder requestBuilder = MockMvcRequestBuilders.post("/configData/api/getConfigDetail");		
        ResultActions actualPerformResult = MockMvcBuilders.standaloneSetup(this.controller).build().perform(
                requestBuilder.content(response)
                        .contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON));
        actualPerformResult.andExpect(MockMvcResultMatchers.status().isOk());
	}

}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\test\java\com\spglobal\ratings\ratingsdata\controller\ControllerTest.java

package com.spglobal.ratings.ratingsdata.controller;

import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

import java.sql.Date;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Map;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.test.context.junit.jupiter.SpringExtension;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.ResultActions;
import org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;
import org.springframework.test.web.servlet.result.MockMvcResultMatchers;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;
import org.springframework.util.LinkedMultiValueMap;
import org.springframework.util.MultiValueMap;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.spglobal.ratings.ratingsdata.entity.DashBoardMyRating;
import com.spglobal.ratings.ratingsdata.entity.EntityCurrentRating;
import com.spglobal.ratings.ratingsdata.entity.EntityRatings;
import com.spglobal.ratings.ratingsdata.entity.EntityRatingsHistory;
import com.spglobal.ratings.ratingsdata.entity.EntityRatingsHistoryPublic;
import com.spglobal.ratings.ratingsdata.entity.EntityRatingsPublic;
import com.spglobal.ratings.ratingsdata.entity.IssuesAndMaturities;
import com.spglobal.ratings.ratingsdata.entity.IssuesAndMaturitiesHistory;
import com.spglobal.ratings.ratingsdata.entity.IssuesAndMaturitiesHistoryPublic;
import com.spglobal.ratings.ratingsdata.entity.IssuesAndMaturitiesPublic;
import com.spglobal.ratings.ratingsdata.entity.ScoresAndModifiers;
import com.spglobal.ratings.ratingsdata.entity.ScoresAndModifiersPublic;
import com.spglobal.ratings.ratingsdata.model.DebtTypes;
import com.spglobal.ratings.ratingsdata.model.EntityTypeIdsRequest;
import com.spglobal.ratings.ratingsdata.model.EntityTypeIdsResponse;
import com.spglobal.ratings.ratingsdata.model.IssuesAndMaturitiesData;
import com.spglobal.ratings.ratingsdata.model.RatingHistoryData;
import com.spglobal.ratings.ratingsdata.model.RatingsData;
import com.spglobal.ratings.ratingsdata.service.CoreOrgIdService;
import com.spglobal.ratings.ratingsdata.service.DashboardMyRatingService;
import com.spglobal.ratings.ratingsdata.service.EntityCurrentRatingService;
import com.spglobal.ratings.ratingsdata.service.EntityRatingsHistoryPublicService;
import com.spglobal.ratings.ratingsdata.service.EntityRatingsHistoryService;
import com.spglobal.ratings.ratingsdata.service.EntityRatingsPublicService;
import com.spglobal.ratings.ratingsdata.service.EntityRatingsService;
import com.spglobal.ratings.ratingsdata.service.IssuesAndMaturitiesHistoryPublicService;
import com.spglobal.ratings.ratingsdata.service.IssuesAndMaturitiesHistoryService;
import com.spglobal.ratings.ratingsdata.service.IssuesAndMaturitiesPublicService;
import com.spglobal.ratings.ratingsdata.service.IssuesAndMaturitiesService;
import com.spglobal.ratings.ratingsdata.service.PeersEntityRatingsService;
import com.spglobal.ratings.ratingsdata.service.RatingHistoryLastTenYrsService;
import com.spglobal.ratings.ratingsdata.service.ScoresAndModifiersPublicService;
import com.spglobal.ratings.ratingsdata.service.ScoresAndModifiersService;

import jakarta.servlet.http.HttpServletRequest;


@ExtendWith({SpringExtension.class, MockitoExtension.class})
@WebMvcTest(value = Controller.class)
public class ControllerTest {

    @Autowired
    private MockMvc mockMvc;
    
    @InjectMocks
    private Controller controller;
    
    @MockBean
    private EntityRatingsHistoryPublicService ratingsHistoryPublicService;

    @MockBean
    private ScoresAndModifiersPublicService scoresAndModifiersPublicService;
    
    @MockBean
    private EntityRatingsPublicService entityRatingsPublicService;
    
    @MockBean
    private EntityCurrentRatingService entityCurrentRatingService;
    
    @MockBean
    private RatingHistoryLastTenYrsService ratingHistoryRDService;
    
    @MockBean
    private EntityRatingsService entityRatingsService;
    
    @MockBean
    private EntityRatingsHistoryService entityRatingsHistoryService;
    
    @MockBean
    private IssuesAndMaturitiesPublicService issuesAndMaturitiesPublicService;
    
    @MockBean
    private IssuesAndMaturitiesService issuesAndMaturitiesService;
    
    @MockBean
    private IssuesAndMaturitiesHistoryPublicService issuesAndMaturitiesHistoryPublicService;
    
    @MockBean
    private IssuesAndMaturitiesHistoryService issuesAndMaturitiesHistoryService;
    
    @MockBean
    private DashboardMyRatingService dashboardMyRatingService;
    
    @MockBean
    private CoreOrgIdService coreOrgIdService;
    
    @MockBean
    private PeersEntityRatingsService peersEntityRatingsService;
    
    @MockBean
    private ScoresAndModifiersService scoresAndModifiersService;
    
    @Mock
    HttpServletRequest request;

    HttpHeaders httpHeaders;

    @BeforeEach
    public void init() {
        MockitoAnnotations.initMocks(this);
        mockMvc = MockMvcBuilders.standaloneSetup(controller).build();
        httpHeaders = new HttpHeaders();
    }
    
    @Test
    public void getPublicEntityRatingsTest() throws Exception {
        System.out.println("@Controller: In getPublicEntityRatingsTest method");
        
        List<EntityRatingsPublic> entityRatings = new ArrayList<EntityRatingsPublic>();
        EntityRatingsPublic er = new EntityRatingsPublic();
        er.setEntityId(Long.valueOf(100751));
        er.setDebtTypeCode("ICR");
        er.setDebtTypeDesc("Issuer Credit Rating");
        er.setRatingTypeCode("FCLONG");
        er.setRatingTypeDesc("Foreign Currency LT");
        er.setCurrentRatingSymbol("BBB-");
        er.setRatingDate(new Date(04/28/2023));
        er.setLastReviewDate(new Date(04/28/2023));
        er.setRegulatoryIndicator("EE|UKE");
        er.setAction("Upgrade | CreditWatch/Outlook");
        er.setLatestNonAffirmCWOL("Stable");
        er.setLatestNonAffirmCWOLDate(new Date(04/28/2023));
        er.setSrdCurrInd("Y");
        er.setRatingDetailId(Long.valueOf(42370608));
        er.setDataAdminDate(new Date(04/28/2023));
        er.setDebtTypeSortOrder(3);
        er.setDerivedDebtTypeSortOrder(3);
        er.setLongShortInd("L");
        er.setRatingTypeSortOrder(Long.valueOf(1));
        er.setRating_id(Long.valueOf(100751));
        er.setPrimarySectorCode("GLOBISS");
        er.setPrimarySubSectorCode("CORP");
        entityRatings.add(er);
        
        Long entityId = Long.valueOf(100751);
        
        Mockito.when(entityRatingsPublicService.getPublicEntityRatings(entityId)).thenReturn(entityRatings);
        
        MockHttpServletRequestBuilder builder = MockMvcRequestBuilders.get("/ratingsData/api/publicratings/100751");
        mockMvc.perform(builder).andExpect(status().isOk());
    }

    @Test
    public void getPublicScoresAndModifiersTest() throws Exception {
    	List<ScoresAndModifiersPublic> sm = new ArrayList<ScoresAndModifiersPublic>();
        
        String entityId = String.valueOf(100751);
        String subsector = String.valueOf(42370608);
        
        Mockito.when(scoresAndModifiersPublicService.getScoresAndModifiers(entityId, subsector)).thenReturn(sm);
        
        MockHttpServletRequestBuilder builder = MockMvcRequestBuilders.get("/ratingsData/api/scoresmodifiers/100751/42370608");
        mockMvc.perform(builder).andExpect(status().isOk());
    }

    @Test
    public void getPublicEntityRatingDetailsTest() throws Exception {
        System.out.println("@Controller: In getPublicEntityRatingDetailsTest method");
        
        EntityRatingsPublic er = new EntityRatingsPublic();
        er.setEntityId(Long.valueOf(100751));
        er.setDebtTypeCode("ICR");
        er.setDebtTypeDesc("Issuer Credit Rating");
        er.setRatingTypeCode("FCLONG");
        er.setRatingTypeDesc("Foreign Currency LT");
        er.setCurrentRatingSymbol("BBB-");
        er.setRatingDate(new Date(04/28/2023));
        er.setLastReviewDate(new Date(04/28/2023));
        er.setRegulatoryIndicator("EE|UKE");
        er.setAction("Upgrade | CreditWatch/Outlook");
        er.setLatestNonAffirmCWOL("Stable");
        er.setLatestNonAffirmCWOLDate(new Date(04/28/2023));
        er.setSrdCurrInd("Y");
        er.setRatingDetailId(Long.valueOf(42370608));
        er.setDataAdminDate(new Date(04/28/2023));
        er.setDebtTypeSortOrder(3);
        er.setDerivedDebtTypeSortOrder(3);
        er.setLongShortInd("L");
        er.setRatingTypeSortOrder(Long.valueOf(1));
        er.setRating_id(Long.valueOf(100751));
        er.setPrimarySectorCode("GLOBISS");
        er.setPrimarySubSectorCode("CORP");
        
        Long entityId = Long.valueOf(100751);
        Long ratingDetailId = Long.valueOf(42370608);
        
        Mockito.when(entityRatingsPublicService.getPublicEntityRatingDetails(entityId, ratingDetailId)).thenReturn(er);
        
        MockHttpServletRequestBuilder builder = MockMvcRequestBuilders.get("/ratingsData/api/publicratings/100751/42370608");
        mockMvc.perform(builder).andExpect(status().isOk());
    }
    
    @Test
    public void getEntityCurrentRatingTest() throws Exception {
        System.out.println("@Controller: In getEntityCurrentRatingTest method");
        
        EntityCurrentRating ecr = new EntityCurrentRating();
        ecr.setEntityId(Long.valueOf(111719));
        ecr.setDebtTypeDesc("Issuer Credit Rating");
        ecr.setRatingTypeDesc("Foreign Currency LT");
        ecr.setCurrentRatingSymbol("BBB-");
        
        Long entityId = Long.valueOf(111719);
        
        Mockito.when(entityCurrentRatingService.getEntityCurrentRating(entityId)).thenReturn(ecr);
        
        MockHttpServletRequestBuilder builder = MockMvcRequestBuilders.get("/ratingsData/api/entityCurrentRating?entityId=112354");
        mockMvc.perform(builder).andExpect(status().isOk());
    }   
    
    @Test
    public void getRatingHistoryLastTenYrsTest() throws Exception {

        String entityId = "111719,112354,126844";
        Integer pcFlag=1;
        RatingHistoryData ratingData = new RatingHistoryData();
        ratingData.setCommaSepOrgIds(entityId);
        ratingData.setPcFlag(pcFlag);
        
        MockHttpServletRequestBuilder builder = MockMvcRequestBuilders.post("/ratingsData/api/getRatingHistoryLastTenYrs")
                .content(asJsonString(ratingData)).contentType(MediaType.APPLICATION_JSON).header("Authorization", "Authorization");
        mockMvc.perform(builder).andExpect(status().isOk());
    }   
    
    
    @Test
    public void getPeersEntityRatingsTest() throws Exception {

        String entityId = "111719,112354,126844";
        Integer pcFlag=1;
        RatingHistoryData ratingData = new RatingHistoryData();
        ratingData.setCommaSepOrgIds(entityId);
        ratingData.setPcFlag(pcFlag);
        
        MockHttpServletRequestBuilder builder = MockMvcRequestBuilders.post("/ratingsData/api/getPeersEntityRatings")
                .content(asJsonString(ratingData)).contentType(MediaType.APPLICATION_JSON).header("Authorization", "Authorization");
        mockMvc.perform(builder).andExpect(status().isOk());
    }   
    @Test
    public void getPeersCurrentRatingTest() throws Exception {
        String entityId = "111719,112354,126844";
        MockHttpServletRequestBuilder builder = MockMvcRequestBuilders.post("/ratingsData/api/getPeersCurrentRatings").content(entityId).contentType(MediaType.APPLICATION_JSON);
        mockMvc.perform(builder).andExpect(status().isOk());
    }
    
    public static String asJsonString(final Object obj) {
        try {
            return new ObjectMapper().writeValueAsString(obj);
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }
    
    @Test
    public void getEntityRatingsTest() throws Exception {
        System.out.println("@Controller: In getEntityRatingsTest method");
        
        RatingsData e = new RatingsData();
        
        List<EntityRatings> entityRatings = new ArrayList<EntityRatings>();
        EntityRatings er = new EntityRatings();
        er.setEntityId(Long.valueOf(100751));
        er.setDebtTypeCode("ICR");
        er.setDebtTypeDesc("Issuer Credit Rating");
        er.setRatingTypeCode("FCLONG");
        er.setRatingTypeDesc("Foreign Currency LT");
        er.setCurrentRatingSymbol("BBB-");
        er.setRatingDate(new Date(04/28/2023));
        er.setLastReviewDate(new Date(04/28/2023));
        er.setRegulatoryIndicator("EE|UKE");
        er.setAction("Upgrade | CreditWatch/Outlook");
        er.setLatestNonAffirmCWOL("Stable");
        er.setLatestNonAffirmCWOLDate(new Date(04/28/2023));
        er.setSrdCurrInd("Y");
        er.setRatingDetailId(Long.valueOf(42370608));
        er.setDataAdminDate(new Date(04/28/2023));
        er.setDebtTypeSortOrder(3);
        er.setDerivedDebtTypeSortOrder(3);
        er.setLongShortInd("L");
        er.setRatingTypeSortOrder(Long.valueOf(1));
        er.setRating_id(Long.valueOf(100751));
        er.setPrimarySectorCode("GLOBISS");
        er.setPrimarySubSectorCode("CORP");
        er.setConfidentialityInd("N");
        er.setConfidentialCategoryCode("Public");
        entityRatings.add(er);
        e.setEntityRatings(entityRatings);
        
        Long entityId = Long.valueOf(100751);
        Long snlId = Long.valueOf(4004341);
        
        Mockito.when(entityRatingsService.getEntityRatings(entityId, snlId, "authHeader")).thenReturn(e);
        
        MockHttpServletRequestBuilder builder = MockMvcRequestBuilders.get("/ratingsData/api/ratings/100751/4004341").header("Authorization", "authHeader");
        mockMvc.perform(builder).andExpect(status().isOk());
    }
    
    @Test
    public void getEntityRatingsTest2() throws Exception {
        System.out.println("@Controller: In getEntityRatingsTest method");
        
        RatingsData e = new RatingsData();
        e.setMessage("The User is not entitiled to view ratings for entity");
        
        Long entityId = Long.valueOf(100751);
        Long snlId = Long.valueOf(4004341);
        
        Mockito.when(entityRatingsService.getEntityRatings(entityId, snlId, "authHeader")).thenReturn(e);
        
        MockHttpServletRequestBuilder builder = MockMvcRequestBuilders.get("/ratingsData/api/ratings/100751/4004341").header("Authorization", "authHeader");
        mockMvc.perform(builder).andExpect(status().isUnauthorized());
    }
    
    @Test
    public void getEntityRatingsTest3() throws Exception {
        System.out.println("@Controller: In getEntityRatingsTest method");
        
        RatingsData e = new RatingsData();
        
        List<EntityRatings> entityRatings = new ArrayList<EntityRatings>();
        e.setEntityRatings(entityRatings);
        
        Long entityId = Long.valueOf(100751);
        Long snlId = Long.valueOf(4004341);
        
        Mockito.when(entityRatingsService.getEntityRatings(entityId, snlId, "authHeader")).thenReturn(e);
        
        MockHttpServletRequestBuilder builder = MockMvcRequestBuilders.get("/ratingsData/api/ratings/100751/4004341").header("Authorization", "authHeader");
        mockMvc.perform(builder).andExpect(status().isNoContent());
    }    
    @Test
    public void getEntityRatingDetailsTest() throws Exception {
        System.out.println("@Controller: In getEntityRatingDetailsTest method");
        
        EntityRatings er = new EntityRatings();
        er.setEntityId(Long.valueOf(100751));
        er.setDebtTypeCode("ICR");
        er.setDebtTypeDesc("Issuer Credit Rating");
        er.setRatingTypeCode("FCLONG");
        er.setRatingTypeDesc("Foreign Currency LT");
        er.setCurrentRatingSymbol("BBB-");
        er.setRatingDate(new Date(04/28/2023));
        er.setLastReviewDate(new Date(04/28/2023));
        er.setRegulatoryIndicator("EE|UKE");
        er.setAction("Upgrade | CreditWatch/Outlook");
        er.setLatestNonAffirmCWOL("Stable");
        er.setLatestNonAffirmCWOLDate(new Date(04/28/2023));
        er.setSrdCurrInd("Y");
        er.setRatingDetailId(Long.valueOf(42370608));
        er.setDataAdminDate(new Date(04/28/2023));
        er.setDebtTypeSortOrder(3);
        er.setDerivedDebtTypeSortOrder(3);
        er.setLongShortInd("L");
        er.setRatingTypeSortOrder(Long.valueOf(1));
        er.setRating_id(Long.valueOf(100751));
        er.setPrimarySectorCode("GLOBISS");
        er.setPrimarySubSectorCode("CORP");
        er.setConfidentialityInd("N");
        er.setConfidentialCategoryCode("Public");
        
        Long entityId = Long.valueOf(100751);
        Long ratingDetailId = Long.valueOf(42370608);
        Long snlId = Long.valueOf(4004341);
        
        Mockito.when(entityRatingsService.getEntityRatingDetails(entityId, ratingDetailId, snlId, "authHeader")).thenReturn(er);
        
        MockHttpServletRequestBuilder builder = MockMvcRequestBuilders.get("/ratingsData/api/ratings/100751/42370608/4004341").header("Authorization", "authHeader");
        mockMvc.perform(builder).andExpect(status().isOk());
    }
    
    @Test
    public void getEntityRatingDetailsTestError() throws Exception {
        Long entityId = Long.valueOf(100751);
        Long ratingDetailId = Long.valueOf(42370608);
        Long snlId = Long.valueOf(4004341);
        
        Mockito.when(entityRatingsService.getEntityRatingDetails(entityId, ratingDetailId, snlId, "authHeader")).thenReturn(null);
        
        MockHttpServletRequestBuilder builder = MockMvcRequestBuilders.get("/ratingsData/api/ratings/100751/42370608/4004341").header("Authorization", "authHeader");
        mockMvc.perform(builder).andExpect(status().isNotFound());
    }
    
    @Test
    public void getPublicEntityRatingsHistoryTest() throws Exception {
        System.out.println("@Controller: In getPublicEntityRatingsHistoryTest method");
        
        List<EntityRatingsHistoryPublic> publicRatingsHistory = new ArrayList<EntityRatingsHistoryPublic>();
        EntityRatingsHistoryPublic publicHistory = new EntityRatingsHistoryPublic();
        publicHistory.setEntityId(Long.valueOf(100751));
        publicHistory.setDebtTypeCode("ICR");
        publicHistory.setRatingTypeCode("FCLONG");
        publicHistory.setRatingTypeDescription("Foreign Currency LT");
        publicHistory.setRating("BBB-");
        publicHistory.setRatingDate(new Date(05/11/2023));
        publicHistory.setAction("Upgrade | CreditWatch/Outlook");
        publicHistory.setCreditwatchOutlook("Stable");
        publicHistory.setCreditwatchOutlookDate(new Date(05/11/2023));
        publicHistory.setRatingDetailId(Long.valueOf(42370608));
        publicHistory.setDataAdminDate(new Date(05/11/2023));
        publicRatingsHistory.add(publicHistory);
        
        Long entityId = Long.valueOf(100751);
        String debtTypeCode = "ICR";
        String ratingTypeCode = "FCLONG";
        
        Mockito.when(ratingsHistoryPublicService.getPublicEntityRatingsHistory(entityId, debtTypeCode, ratingTypeCode)).thenReturn(publicRatingsHistory);
        
        MockHttpServletRequestBuilder builder = MockMvcRequestBuilders.get("/ratingsData/api/publicratingsHistory/100751/ICR/FCLONG");
        mockMvc.perform(builder).andExpect(status().isOk());
    }
    
    @Test
    public void getEntityRatingsHistoryTest() throws Exception {
        System.out.println("@Controller: In getEntityRatingsHistoryTest method");
        
        List<EntityRatingsHistory> ratingsHistory = new ArrayList<EntityRatingsHistory>();
        EntityRatingsHistory history = new EntityRatingsHistory();
        history.setEntityId(Long.valueOf(100751));
        history.setDebtTypeCode("ICR");
        history.setRatingTypeCode("FCLONG");
        history.setRatingTypeDescription("Foreign Currency LT");
        history.setRating("BBB-");
        history.setRatingDate(new Date(05/11/2023));
        history.setAction("Upgrade | CreditWatch/Outlook");
        history.setCreditwatchOutlook("Stable");
        history.setCreditwatchOutlookDate(new Date(05/11/2023));
        history.setRatingDetailId(Long.valueOf(42370608));
        history.setDataAdminDate(new Date(05/11/2023));
        history.setConfidentialityInd("N");
        history.setConfidentialCategoryCode("Public");
        ratingsHistory.add(history);
        
        Long entityId = Long.valueOf(100751);
        String debtTypeCode = "ICR";
        String ratingTypeCode = "FCLONG";
        Long snlId = Long.valueOf(4004341);
        
        Mockito.when(entityRatingsHistoryService.getEntityRatingsHistory(entityId, debtTypeCode, ratingTypeCode, snlId, "authHeader")).thenReturn(ratingsHistory);
        
        MockHttpServletRequestBuilder builder = MockMvcRequestBuilders.get("/ratingsData/api/ratingsHistory/100751/ICR/FCLONG/4004341").header("Authorization", "authHeader");
        mockMvc.perform(builder).andExpect(status().isOk());
    }
    
    @Test
    public void getPublicIssuesAndMaturitiesTest() throws Exception {
        System.out.println("@Controller: In getPublicIssuesAndMaturitiesTest method");
        
        List<IssuesAndMaturitiesPublic> issuesAndMaturities = new ArrayList<IssuesAndMaturitiesPublic>();
        IssuesAndMaturitiesPublic entity = new IssuesAndMaturitiesPublic();
        entity.setEntityId(Long.valueOf(121242));
        entity.setInstrumentId(Long.valueOf(1301099));
        entity.setInstrumentDetailId(Long.valueOf(4421612));
        entity.setInstrumentName("US$1.5 bil 5.10% nts due 09/28/2048");
        entity.setDebtTypeCode("SRUNSEC");
        entity.setDescription("Senior Unsecured");
        entity.setMaturityDate(new Date(05/23/2023));
        entity.setMaturityDateDerived(new Timestamp(05/23/2023));
        entity.setCusip("902494BH5");
        entity.setIsin("US902494BH59");
        entity.setRatingTypeCode("STDLONG");
        entity.setRatingTypeDescription("Local Currency LT");
        entity.setCurrentRatingSymbol("BBB+");
        entity.setRatingDate(new Date(05/23/2023));
        entity.setDataAdminDate(new Date(05/23/2023));
        entity.setLastReviewDate(new Date(05/23/2023));
        entity.setRegulatoryIndicator("EE|UKE");
        entity.setIssueProgramType("Notes");
        entity.setCouponRate("5.1%");
        entity.setOriginalPrincipalBalance("USD 1,500,000,000");
        entity.setCurrency("USD");
        entity.setSortOrder(15);
        entity.setPrecedenceNum(1);
        entity.setRatingDetailId(Long.valueOf(39898462));
        issuesAndMaturities.add(entity);
        
        Long entityId = Long.valueOf(121242);
        
        Mockito.when(issuesAndMaturitiesPublicService.getPublicIssuesAndMaturities(entityId)).thenReturn(issuesAndMaturities);
        
        MockHttpServletRequestBuilder builder = MockMvcRequestBuilders.get("/ratingsData/api/publicissuesandmaturities/121242");
        mockMvc.perform(builder).andExpect(status().isOk());
    }
    
    @Test
    public void getPublicIssuesAndMaturitiesDebtTypeCodeTest() throws Exception {
        System.out.println("@Controller: In getPublicIssuesAndMaturitiesDebtTypeCodeTest method");
        
        List<IssuesAndMaturitiesPublic> issuesAndMaturities = new ArrayList<IssuesAndMaturitiesPublic>();
        IssuesAndMaturitiesPublic entity = new IssuesAndMaturitiesPublic();
        entity.setEntityId(Long.valueOf(121242));
        entity.setInstrumentId(Long.valueOf(1301099));
        entity.setInstrumentDetailId(Long.valueOf(4421612));
        entity.setInstrumentName("US$1.5 bil 5.10% nts due 09/28/2048");
        entity.setDebtTypeCode("SRUNSEC");
        entity.setDescription("Senior Unsecured");
        entity.setMaturityDate(new Date(05/23/2023));
        entity.setMaturityDateDerived(new Timestamp(05/23/2023));
        entity.setCusip("902494BH5");
        entity.setIsin("US902494BH59");
        entity.setRatingTypeCode("STDLONG");
        entity.setRatingTypeDescription("Local Currency LT");
        entity.setCurrentRatingSymbol("BBB+");
        entity.setRatingDate(new Date(05/23/2023));
        entity.setDataAdminDate(new Date(05/23/2023));
        entity.setLastReviewDate(new Date(05/23/2023));
        entity.setRegulatoryIndicator("EE|UKE");
        entity.setIssueProgramType("Notes");
        entity.setCouponRate("5.1%");
        entity.setOriginalPrincipalBalance("USD 1,500,000,000");
        entity.setCurrency("USD");
        entity.setSortOrder(15);
        entity.setPrecedenceNum(1);
        entity.setRatingDetailId(Long.valueOf(39898462));
        issuesAndMaturities.add(entity);
        
        Long entityId = Long.valueOf(121242);
        String debtTypeCode = "SRUNSEC";
        
        Mockito.when(issuesAndMaturitiesPublicService.getPublicIssuesAndMaturitiesByDebtTypeCode(entityId, debtTypeCode)).thenReturn(issuesAndMaturities);
        
        MockHttpServletRequestBuilder builder = MockMvcRequestBuilders.get("/ratingsData/api/publicissuesandmaturities/121242/SRUNSEC");
        mockMvc.perform(builder).andExpect(status().isOk());
    }
    
    @Test
    public void getPublicIssuesAndMaturitiesDetailsTest() throws Exception {
        System.out.println("@Controller: In getPublicIssuesAndMaturitiesDetailsTest method");
        
        IssuesAndMaturitiesPublic entity = new IssuesAndMaturitiesPublic();
        entity.setEntityId(Long.valueOf(121242));
        entity.setInstrumentId(Long.valueOf(1301099));
        entity.setInstrumentDetailId(Long.valueOf(4421612));
        entity.setInstrumentName("US$1.5 bil 5.10% nts due 09/28/2048");
        entity.setDebtTypeCode("SRUNSEC");
        entity.setDescription("Senior Unsecured");
        entity.setMaturityDate(new Date(05/23/2023));
        entity.setMaturityDateDerived(new Timestamp(05/23/2023));
        entity.setCusip("902494BH5");
        entity.setIsin("US902494BH59");
        entity.setRatingTypeCode("STDLONG");
        entity.setRatingTypeDescription("Local Currency LT");
        entity.setCurrentRatingSymbol("BBB+");
        entity.setRatingDate(new Date(05/23/2023));
        entity.setDataAdminDate(new Date(05/23/2023));
        entity.setLastReviewDate(new Date(05/23/2023));
        entity.setRegulatoryIndicator("EE|UKE");
        entity.setIssueProgramType("Notes");
        entity.setCouponRate("5.1%");
        entity.setOriginalPrincipalBalance("USD 1,500,000,000");
        entity.setCurrency("USD");
        entity.setSortOrder(15);
        entity.setPrecedenceNum(1);
        entity.setRatingDetailId(Long.valueOf(39898462));
        
        Long entityId = Long.valueOf(121242);
        Long ratingDetailId = Long.valueOf(39898462);
        
        Mockito.when(issuesAndMaturitiesPublicService.getPublicIssuesAndMaturitiesDetails(entityId, ratingDetailId)).thenReturn(entity);
        
        MockHttpServletRequestBuilder builder = MockMvcRequestBuilders.get("/ratingsData/api/publicissuesandmaturities?entityId=121242&ratingDetailId=39898462");
        mockMvc.perform(builder).andExpect(status().isOk());
    }
    
    @Test
    public void getIssuesAndMaturitiesTest() throws Exception {
        System.out.println("@Controller: In getIssuesAndMaturitiesTest method");
        
        IssuesAndMaturitiesData e = new IssuesAndMaturitiesData();
        
        List<IssuesAndMaturities> issuesAndMaturities = new ArrayList<IssuesAndMaturities>();
        IssuesAndMaturities entity = new IssuesAndMaturities();
        entity.setEntityId(Long.valueOf(100751));
        entity.setInstrumentId(Long.valueOf(1301099));
        entity.setInstrumentDetailId(Long.valueOf(4421612));
        entity.setInstrumentName("US$1.5 bil 5.10% nts due 09/28/2048");
        entity.setDebtTypeCode("SRUNSEC");
        entity.setDescription("Senior Unsecured");
        entity.setMaturityDate(new Date(05/23/2023));
        entity.setMaturityDateDerived(new Timestamp(05/23/2023));
        entity.setCusip("902494BH5");
        entity.setIsin("US902494BH59");
        entity.setRatingTypeCode("STDLONG");
        entity.setRatingTypeDescription("Local Currency LT");
        entity.setCurrentRatingSymbol("BBB+");
        entity.setRatingDate(new Date(05/23/2023));
        entity.setDataAdminDate(new Date(05/23/2023));
        entity.setLastReviewDate(new Date(05/23/2023));
        entity.setRegulatoryIndicator("EE|UKE");
        entity.setIssueProgramType("Notes");
        entity.setCouponRate("5.1%");
        entity.setOriginalPrincipalBalance("USD 1,500,000,000");
        entity.setCurrency("USD");
        entity.setSortOrder(15);
        entity.setPrecedenceNum(1);
        entity.setRatingDetailId(Long.valueOf(39898462));
        entity.setConfidentialityInd("N");
        entity.setConfidentialCategoryCode("Public");
        issuesAndMaturities.add(entity);
        e.setIssuesAndMaturities(issuesAndMaturities);
        
        Long entityId = Long.valueOf(100751);
        Long snlId = Long.valueOf(4004341);
        
        Mockito.when(issuesAndMaturitiesService.getIssuesAndMaturities(entityId, snlId, "authHeader")).thenReturn(e);
        
        MockHttpServletRequestBuilder builder = MockMvcRequestBuilders.get("/ratingsData/api/issuesandmaturities/100751/4004341").header("Authorization", "authHeader");
        mockMvc.perform(builder).andExpect(status().isOk());
    }
    
    @Test
    public void getIssuesAndMaturitiesDebtTypeCodeTest() throws Exception {
        System.out.println("@Controller: In getIssuesAndMaturitiesDebtTypeCodeTest method");
        
        IssuesAndMaturitiesData e = new IssuesAndMaturitiesData();
        
        List<IssuesAndMaturities> issuesAndMaturities = new ArrayList<IssuesAndMaturities>();
        IssuesAndMaturities entity = new IssuesAndMaturities();
        entity.setEntityId(Long.valueOf(100751));
        entity.setInstrumentId(Long.valueOf(1301099));
        entity.setInstrumentDetailId(Long.valueOf(4421612));
        entity.setInstrumentName("US$1.5 bil 5.10% nts due 09/28/2048");
        entity.setDebtTypeCode("SRUNSEC");
        entity.setDescription("Senior Unsecured");
        entity.setMaturityDate(new Date(05/23/2023));
        entity.setMaturityDateDerived(new Timestamp(05/23/2023));
        entity.setCusip("902494BH5");
        entity.setIsin("US902494BH59");
        entity.setRatingTypeCode("STDLONG");
        entity.setRatingTypeDescription("Local Currency LT");
        entity.setCurrentRatingSymbol("BBB+");
        entity.setRatingDate(new Date(05/23/2023));
        entity.setDataAdminDate(new Date(05/23/2023));
        entity.setLastReviewDate(new Date(05/23/2023));
        entity.setRegulatoryIndicator("EE|UKE");
        entity.setIssueProgramType("Notes");
        entity.setCouponRate("5.1%");
        entity.setOriginalPrincipalBalance("USD 1,500,000,000");
        entity.setCurrency("USD");
        entity.setSortOrder(15);
        entity.setPrecedenceNum(1);
        entity.setRatingDetailId(Long.valueOf(39898462));
        entity.setConfidentialityInd("N");
        entity.setConfidentialCategoryCode("Public");
        issuesAndMaturities.add(entity);
        e.setIssuesAndMaturities(issuesAndMaturities);
        
        Long entityId = Long.valueOf(100751);
        String debtTypeCode = "SRUNSEC";
        Long snlId = Long.valueOf(4004341);
        
        Mockito.when(issuesAndMaturitiesService.getIssuesAndMaturitiesByDebtTypeCode(entityId, debtTypeCode, snlId, "authHeader")).thenReturn(e);
        
        MockHttpServletRequestBuilder builder = MockMvcRequestBuilders.get("/ratingsData/api/issuesandmaturities/100751/SRUNSEC/4004341").header("Authorization", "authHeader");
        mockMvc.perform(builder).andExpect(status().isOk());
    }
    
    @Test
    public void getIssuesAndMaturitiesDebtTypeCodeTest2() throws Exception {
        System.out.println("@Controller: In getIssuesAndMaturitiesDebtTypeCodeTest method");
        
        IssuesAndMaturitiesData e = new IssuesAndMaturitiesData();
        e.setMessage("The User is not entitiled to view issues and maturities for entity");
        
        Long entityId = Long.valueOf(100751);
        String debtTypeCode = "SRUNSEC";
        Long snlId = Long.valueOf(4004341);
        
        Mockito.when(issuesAndMaturitiesService.getIssuesAndMaturitiesByDebtTypeCode(entityId, debtTypeCode, snlId, "authHeader")).thenReturn(e);
        
        MockHttpServletRequestBuilder builder = MockMvcRequestBuilders.get("/ratingsData/api/issuesandmaturities/100751/SRUNSEC/4004341").header("Authorization", "authHeader");
        mockMvc.perform(builder).andExpect(status().isUnauthorized());
    }
    
    @Test
    public void getIssuesAndMaturitiesDebtTypeCodeTest3() throws Exception {
        System.out.println("@Controller: In getIssuesAndMaturitiesDebtTypeCodeTest method");
        
        IssuesAndMaturitiesData e = new IssuesAndMaturitiesData();
        
        List<IssuesAndMaturities> issuesAndMaturities = new ArrayList<IssuesAndMaturities>();
        e.setIssuesAndMaturities(issuesAndMaturities);
        
        Long entityId = Long.valueOf(100751);
        String debtTypeCode = "SRUNSEC";
        Long snlId = Long.valueOf(4004341);
        
        Mockito.when(issuesAndMaturitiesService.getIssuesAndMaturitiesByDebtTypeCode(entityId, debtTypeCode, snlId, "authHeader")).thenReturn(e);
        
        MockHttpServletRequestBuilder builder = MockMvcRequestBuilders.get("/ratingsData/api/issuesandmaturities/100751/SRUNSEC/4004341").header("Authorization", "authHeader");
        mockMvc.perform(builder).andExpect(status().isNoContent());
    }
    
    @Test
    public void getIssuesAndMaturitiesTest2() throws Exception {
        System.out.println("@Controller: In getIssuesAndMaturitiesTest method");
        
        IssuesAndMaturitiesData e = new IssuesAndMaturitiesData();
        e.setMessage("The User is not entitiled to view issues and maturities for entity");
        List<IssuesAndMaturities> issuesAndMaturities = new ArrayList<IssuesAndMaturities>();
        IssuesAndMaturities entity = new IssuesAndMaturities();
       
        issuesAndMaturities.add(entity);
        e.setIssuesAndMaturities(issuesAndMaturities);
        
        Long entityId = Long.valueOf(100751);
        Long snlId = Long.valueOf(4004341);
        
        Mockito.when(issuesAndMaturitiesService.getIssuesAndMaturities(entityId, snlId, "authHeader")).thenReturn(e);
        
        MockHttpServletRequestBuilder builder = MockMvcRequestBuilders.get("/ratingsData/api/issuesandmaturities/100751/4004341").header("Authorization", "authHeader");
        mockMvc.perform(builder).andExpect(status().isUnauthorized());
    }
    
    @Test
    public void getIssuesAndMaturitiesTest3() throws Exception {
        System.out.println("@Controller: In getIssuesAndMaturitiesTest method");
        
        IssuesAndMaturitiesData e = new IssuesAndMaturitiesData();
        List<IssuesAndMaturities> issuesAndMaturities = new ArrayList<IssuesAndMaturities>();
        e.setIssuesAndMaturities(issuesAndMaturities);
        
        Long entityId = Long.valueOf(100751);
        Long snlId = Long.valueOf(4004341);
        
        Mockito.when(issuesAndMaturitiesService.getIssuesAndMaturities(entityId, snlId, "authHeader")).thenReturn(e);
        
        MockHttpServletRequestBuilder builder = MockMvcRequestBuilders.get("/ratingsData/api/issuesandmaturities/100751/4004341").header("Authorization", "authHeader");
        mockMvc.perform(builder).andExpect(status().isNoContent());
    }
    
    @Test
    public void getIssuesAndMaturitiesDetailsTest() throws Exception {
        System.out.println("@Controller: In getIssuesAndMaturitiesDetailsTest method");
        
        IssuesAndMaturities entity = new IssuesAndMaturities();
        entity.setEntityId(Long.valueOf(100751));
        entity.setInstrumentId(Long.valueOf(1301099));
        entity.setInstrumentDetailId(Long.valueOf(4421612));
        entity.setInstrumentName("US$1.5 bil 5.10% nts due 09/28/2048");
        entity.setDebtTypeCode("SRUNSEC");
        entity.setDescription("Senior Unsecured");
        entity.setMaturityDate(new Date(05/23/2023));
        entity.setMaturityDateDerived(new Timestamp(05/23/2023));
        entity.setCusip("902494BH5");
        entity.setIsin("US902494BH59");
        entity.setRatingTypeCode("STDLONG");
        entity.setRatingTypeDescription("Local Currency LT");
        entity.setCurrentRatingSymbol("BBB+");
        entity.setRatingDate(new Date(05/23/2023));
        entity.setDataAdminDate(new Date(05/23/2023));
        entity.setLastReviewDate(new Date(05/23/2023));
        entity.setRegulatoryIndicator("EE|UKE");
        entity.setIssueProgramType("Notes");
        entity.setCouponRate("5.1%");
        entity.setOriginalPrincipalBalance("USD 1,500,000,000");
        entity.setCurrency("USD");
        entity.setSortOrder(15);
        entity.setPrecedenceNum(1);
        entity.setRatingDetailId(Long.valueOf(39898462));
        entity.setConfidentialityInd("N");
        entity.setConfidentialCategoryCode("Public");
        
        Long entityId = Long.valueOf(100751);
        Long ratingDetailId = Long.valueOf(39898462);
        Long snlId = Long.valueOf(4004341);
        
        Mockito.when(issuesAndMaturitiesService.getIssuesAndMaturitiesDetails(entityId, ratingDetailId, snlId, "authHeader")).thenReturn(entity);
        
        MockHttpServletRequestBuilder builder = MockMvcRequestBuilders.get("/ratingsData/api/issuesandmaturities?entityId=100751&ratingDetailId=39898462&capiq=4004341").header("Authorization", "authHeader");
        mockMvc.perform(builder).andExpect(status().isOk());
    }
    
    @Test
    public void getIssuesAndMaturitiesDetailsTestError() throws Exception {
        Long entityId = Long.valueOf(100751);
        Long ratingDetailId = Long.valueOf(39898462);
        Long snlId = Long.valueOf(4004341);
        
        Mockito.when(issuesAndMaturitiesService.getIssuesAndMaturitiesDetails(entityId, ratingDetailId, snlId, "authHeader")).thenReturn(null);
        
        MockHttpServletRequestBuilder builder = MockMvcRequestBuilders.get("/ratingsData/api/issuesandmaturities?entityId=100751&ratingDetailId=39898462&capiq=4004341").header("Authorization", "authHeader");
        mockMvc.perform(builder).andExpect(status().isNotFound());
    }
    
    @Test
    public void getDropdownDebtTypesTest() throws Exception {
        System.out.println("@Controller: In getDropdownDebtTypesTest method");
        
        List<DebtTypes> debtTypes = new ArrayList<DebtTypes>();
        DebtTypes types = new DebtTypes();
        types.setDebtTypeCode("SRUNSEC");
        types.setDebtTypeDescription("Senior Unsecured");
        types.setEntityId(Long.valueOf(100751));
        debtTypes.add(types);
        
        Long entityId = Long.valueOf(100751);
        Long snlId = Long.valueOf(4004341);
        
        Mockito.when(issuesAndMaturitiesService.getDropdownDebtTypes(entityId, snlId, "authHeader")).thenReturn(debtTypes);
        
        MockHttpServletRequestBuilder builder = MockMvcRequestBuilders.get("/ratingsData/api/debtTypeDetails/100751/4004341").header("Authorization", "authHeader");
        mockMvc.perform(builder).andExpect(status().isOk());
    }
    
    @Test
    public void getDropdownDebtTypesPublicTest() throws Exception {
        System.out.println("@Controller: In getDropdownDebtTypesPublicTest method");
        
        List<DebtTypes> debtTypes = new ArrayList<DebtTypes>();
        DebtTypes types = new DebtTypes();
        types.setDebtTypeCode("SRUNSEC");
        types.setDebtTypeDescription("Senior Unsecured");
        types.setEntityId(Long.valueOf(100751));
        debtTypes.add(types);
        
        Long entityId = Long.valueOf(100751);
        
        Mockito.when(issuesAndMaturitiesPublicService.getDropdownDebtTypesPublic(entityId)).thenReturn(debtTypes);
        
        MockHttpServletRequestBuilder builder = MockMvcRequestBuilders.get("/ratingsData/api/debtTypeDetailsPublic?entityId=112354");
        mockMvc.perform(builder).andExpect(status().isOk());
    }
    
    @Test
    public void getPublicIssuesAndMaturitiesHistoryTest() throws Exception {
        System.out.println("@Controller: In getPublicIssuesAndMaturitiesHistoryTest method");
        
        List<IssuesAndMaturitiesHistoryPublic> issuesAndMaturitiesHistory = new ArrayList<IssuesAndMaturitiesHistoryPublic>();
        IssuesAndMaturitiesHistoryPublic history = new IssuesAndMaturitiesHistoryPublic();
        history.setInstrumentId(Long.valueOf(1429537));
        history.setInstrumentDetailId(Long.valueOf(4750402));
        history.setRatingTypeCode("STDLONG");
        history.setRatingTypeDescription("Local Currency LT");
        history.setRating("BB");
        history.setRatingDate(new Date(06/06/2023));
        history.setAction("New Rating | CreditWatch/Outlook");
        history.setCreditwatchOutlook("Watch Pos");
        history.setCreditwatchOutlookDate(new Date(06/06/2023));
        history.setDebtTypeCode("SRUNSEC");
        history.setRatingDetailId(Long.valueOf(41412790));
        history.setDataAdminDate(new Date(06/06/2023));
        issuesAndMaturitiesHistory.add(history);
        
        Long instrumentId = Long.valueOf(1429537);
        String ratingTypeCode = "STDLONG";
        Long instrumentDetailId = Long.valueOf(4750402);
        
        Mockito.when(issuesAndMaturitiesHistoryPublicService.getPublicIssuesAndMaturitiesHistory(instrumentId, ratingTypeCode, instrumentDetailId)).thenReturn(issuesAndMaturitiesHistory);
        
        MockHttpServletRequestBuilder builder = MockMvcRequestBuilders.get("/ratingsData/api/publicissuesandmaturitiesHistory/1429537/STDLONG/4750402");
        mockMvc.perform(builder).andExpect(status().isOk());
    }
    
    @Test
    public void getIssuesAndMaturitiesHistoryTest() throws Exception {
        System.out.println("@Controller: In getIssuesAndMaturitiesHistoryTest method");
        
        List<IssuesAndMaturitiesHistory> issuesAndMaturitiesHistory = new ArrayList<IssuesAndMaturitiesHistory>();
        IssuesAndMaturitiesHistory history = new IssuesAndMaturitiesHistory();
        history = new IssuesAndMaturitiesHistory();
        history.setInstrumentId(Long.valueOf(1429537));
        history.setInstrumentDetailId(Long.valueOf(4750402));
        history.setRatingTypeCode("STDLONG");
        history.setRatingTypeDescription("Local Currency LT");
        history.setRating("BB");
        history.setRatingDate(new Date(06/06/2023));
        history.setAction("New Rating | CreditWatch/Outlook");
        history.setCreditwatchOutlook("Watch Pos");
        history.setCreditwatchOutlookDate(new Date(06/06/2023));
        history.setDebtTypeCode("SRUNSEC");
        history.setRatingDetailId(Long.valueOf(41412790));
        history.setDataAdminDate(new Date(06/06/2023));
        history.setConfidentialityInd("N");
        history.setConfidentialCategoryCode("Public");
        issuesAndMaturitiesHistory.add(history);
        
        Long instrumentId = Long.valueOf(1429537);
        String ratingTypeCode = "STDLONG";
        Long instrumentDetailId = Long.valueOf(4750402);
        Long snlId = Long.valueOf(4004341);
        
        Mockito.when(issuesAndMaturitiesHistoryService.getIssuesAndMaturitiesHistory(instrumentId, ratingTypeCode, instrumentDetailId, snlId, "authHeader")).thenReturn(issuesAndMaturitiesHistory);
        
        MockHttpServletRequestBuilder builder = MockMvcRequestBuilders.get("/ratingsData/api/issuesandmaturitiesHistory/1429537/STDLONG/4750402/4004341").header("Authorization", "authHeader");
        mockMvc.perform(builder).andExpect(status().isOk());
    }
    
    @Test
    public void getScoresAndModifiersTest() throws Exception {
    	System.out.println("@Controller: In getScoresAndModifiersTest method");
    	
    	List<ScoresAndModifiers> sm = new ArrayList<ScoresAndModifiers>();
        ScoresAndModifiers scores = new ScoresAndModifiers();
        scores.setEntityId("100751");
        scores.setAnalyticCaseType("corp");
        scores.setScoreName("Anchor");
        scores.setScoreValue("bbb");
        scores.setScoreValueDesc("bbb");
        scores.setScoreGroup("Scores");
        scores.setHighlightFlag("Y");
        scores.setConfidentialInd("N");
        scores.setConfidentialCategoryCode("Public");
        sm.add(scores);
    	
        String entityId = String.valueOf(100751);
        String subsector = "corp";
        Long snlId = Long.valueOf(4004341);
        
        Mockito.when(scoresAndModifiersService.getScoresAndModifiers(entityId, subsector, snlId, "authHeader")).thenReturn(sm);
        
        MockHttpServletRequestBuilder builder = MockMvcRequestBuilders.get("/ratingsData/api/scoresandmodifiers/corp/100751/4004341").header("Authorization", "authHeader");
        mockMvc.perform(builder).andExpect(status().isOk());
    }
    
    
    @Test
    public void getScoresAndModifiersTest2() throws Exception {
    	System.out.println("@Controller: In getScoresAndModifiersTest method");
    	
    	List<ScoresAndModifiers> sm = new ArrayList<ScoresAndModifiers>();
    	
        String entityId = String.valueOf(100751);
        String subsector = "corp";
        Long snlId = Long.valueOf(4004341);
        
        Mockito.when(scoresAndModifiersService.getScoresAndModifiers(entityId, subsector, snlId, "authHeader")).thenReturn(sm);
        
        MockHttpServletRequestBuilder builder = MockMvcRequestBuilders.get("/ratingsData/api/scoresandmodifiers/corp/100751/4004341").header("Authorization", "authHeader");
        mockMvc.perform(builder).andExpect(status().isNoContent());
    }
    
    @Test
    public void getDashboardMyRatingTest() throws Exception {
        System.out.println("@Controller: In getDashboardMyRatingTest method");
        
        DashBoardMyRating myRating = new DashBoardMyRating();
        myRating.setEntityId(Long.valueOf(100007));
        myRating.setDebtType("Issuer Credit Rating");
        myRating.setRatingType("Foreign Currency LT");
        myRating.setRating("BB-");
        myRating.setCreditwatchOutlook("Stable");
        myRating.setEntityRatingInd("Y");
        
        Long entityId = Long.valueOf(111719);
        
        Mockito.when(dashboardMyRatingService.getDashboardMyRatingsDetails(entityId)).thenReturn(myRating);
        
        MockHttpServletRequestBuilder builder = MockMvcRequestBuilders.get("/ratingsData/api/myRating?entityId=100007");
        mockMvc.perform(builder).andExpect(status().isOk());
    }
    @Test
    public void getCoreOrgIdsTest() throws Exception {
        String entityId = "111719,112354,126844";
        MockHttpServletRequestBuilder builder = MockMvcRequestBuilders.post("/ratingsData/api/getCoreOrgIds").content(entityId).contentType(MediaType.APPLICATION_JSON);
        mockMvc.perform(builder).andExpect(status().isOk());
    }
    @Test
    public void getCoreOrgIdsByTypeTest() throws Exception {
        httpHeaders.set("type","snl");
        httpHeaders.set("values","111719,112354,126844");
        MockHttpServletRequestBuilder builder = MockMvcRequestBuilders.get("/ratingsData/api/getCoreOrgIdsByType")
                .contentType(MediaType.APPLICATION_JSON).headers(httpHeaders);
        ResultActions actualPerformResult = MockMvcBuilders.standaloneSetup(this.controller).build()
                .perform(builder.headers(httpHeaders));
        mockMvc.perform(builder).andExpect(status().isOk());
    }


    @Test
    void testGetEntityIssuersRating() throws Exception {
        MultiValueMap<String, String> queryParams = new LinkedMultiValueMap<>();
        queryParams.add("entityId", "1234");
        MockHttpServletRequestBuilder requestBuilder = MockMvcRequestBuilders.get("/ratingsData/api/getEntityIssuersRating").queryParams(queryParams);
        ResultActions actualPerformResult = MockMvcBuilders.standaloneSetup(this.controller).build().perform(requestBuilder);
        actualPerformResult.andExpect(MockMvcResultMatchers.status().isOk());
    }
    
    @Test
    void testGetEntityIssuesMaturities() throws Exception {
        MultiValueMap<String, String> queryParams = new LinkedMultiValueMap<>();
        queryParams.add("entityId", "1234");
        MockHttpServletRequestBuilder requestBuilder = MockMvcRequestBuilders.get("/ratingsData/api/entityIssuesMaturities").queryParams(queryParams);
        ResultActions actualPerformResult = MockMvcBuilders.standaloneSetup(this.controller).build().perform(requestBuilder);
        actualPerformResult.andExpect(MockMvcResultMatchers.status().isOk());
    }
    
    @Test
    void testGetEntityCurrentRatings() throws Exception {
        MultiValueMap<String, String> queryParams = new LinkedMultiValueMap<>();
        queryParams.add("entityId", "1234");
        queryParams.add("capiq", "1234");
        queryParams.add("pcFlag", "1234");
        MockHttpServletRequestBuilder requestBuilder = MockMvcRequestBuilders.get("/ratingsData/api/entityCurrentRatings").queryParams(queryParams).header("Authorization", "Authorization");
        ResultActions actualPerformResult = MockMvcBuilders.standaloneSetup(this.controller).build().perform(requestBuilder);
        actualPerformResult.andExpect(MockMvcResultMatchers.status().isOk());
    }
    
    @Test
    void testGetEntityRatingsTAC() throws Exception {
        MultiValueMap<String, String> queryParams = new LinkedMultiValueMap<>();
        queryParams.add("entityId", "1");
        queryParams.add("capiq", "2");
        queryParams.add("pcFlag", "0");
        queryParams.add("capiq", "1231232");
        MockHttpServletRequestBuilder requestBuilder = MockMvcRequestBuilders.get("/ratingsData/api/entityRatingsTAC").queryParams(queryParams).header("Authorization", "Authorization");
        ResultActions actualPerformResult = MockMvcBuilders.standaloneSetup(this.controller).build().perform(requestBuilder);
        actualPerformResult.andExpect(MockMvcResultMatchers.status().isOk());
    }
    
    @Test
    void testGetRatingsHistoryTAC() throws Exception {
        MultiValueMap<String, String> queryParams = new LinkedMultiValueMap<>();
        queryParams.add("entityId", "1");
        queryParams.add("capiq", "2");
        queryParams.add("pcFlag", "0");
        queryParams.add("debtTypeCode", "TACASSESS");
        queryParams.add("ratingTypeCode", "TACASSESS");
        MockHttpServletRequestBuilder requestBuilder = MockMvcRequestBuilders.get("/ratingsData/api/ratingsHistoryTAC").queryParams(queryParams).header("Authorization", "Authorization");
        ResultActions actualPerformResult = MockMvcBuilders.standaloneSetup(this.controller).build().perform(requestBuilder);
        actualPerformResult.andExpect(MockMvcResultMatchers.status().isOk());
    }
/*
    @Test
    void testGetIssuesMaturitiesUSPFPub() throws Exception {
        MultiValueMap<String, String> queryParams = new LinkedMultiValueMap<>();
       // queryParams.add("entityId", "1");
        queryParams.add("asId", "2");
        queryParams.add("ratingDetailId", "0");
        queryParams.add("instrumentId", "2");
        queryParams.add("instrusOnly", "false");
        
        MockHttpServletRequestBuilder requestBuilder = MockMvcRequestBuilders.get("/ratingsData/api/getIssuesMaturitiesUSPFPub").queryParams(queryParams).header("Authorization", "Authorization");
        ResultActions actualPerformResult = MockMvcBuilders.standaloneSetup(this.controller).build().perform(requestBuilder);
        actualPerformResult.andExpect(MockMvcResultMatchers.status().isOk());
    }
    
    @Test
    void testGetInMUSPFPubMinMaxDates() throws Exception {
        MultiValueMap<String, String> queryParams = new LinkedMultiValueMap<>();
       // queryParams.add("entityId", "1");
        queryParams.add("asId", "2");
        
        MockHttpServletRequestBuilder requestBuilder = MockMvcRequestBuilders.get("/ratingsData/api/getInMUSPFPubMinMaxDates").queryParams(queryParams).header("Authorization", "Authorization");
        ResultActions actualPerformResult = MockMvcBuilders.standaloneSetup(this.controller).build().perform(requestBuilder);
        actualPerformResult.andExpect(MockMvcResultMatchers.status().isOk());
    }*/

    @Test
    public void getCapiqIdsbyCoreSnlSpIdsTest_Success() throws Exception {
        EntityTypeIdsRequest request = new EntityTypeIdsRequest();
        request.setEntityType("COREID");
        request.setEntityIds(List.of("1001", "1002"));

        EntityTypeIdsResponse response = new EntityTypeIdsResponse();
        response.setEntityIdCapIQIdMap(Map.of("1001", "CAPIQ1", "1002", "CAPIQ2"));

        Mockito.when(coreOrgIdService.getCapiqIdsbyCoreSnlSpIds(request)).thenReturn(response);

        MockHttpServletRequestBuilder builder = MockMvcRequestBuilders.post("/ratingsData/api/getCapiqIdsByType")
                .content(asJsonString(request))
                .contentType(MediaType.APPLICATION_JSON);

        mockMvc.perform(builder)
                .andExpect(status().isOk());
    }

    @Test
    public void getCapiqIdsbyCoreSnlSpIdsTest_NotFound() throws Exception {
        EntityTypeIdsRequest request = new EntityTypeIdsRequest();
        request.setEntityType("COREID");
        request.setEntityIds(List.of("1001", "1002"));

        EntityTypeIdsResponse response = new EntityTypeIdsResponse();
        response.setEntityIdCapIQIdMap(Collections.emptyMap());

        Mockito.when(coreOrgIdService.getCapiqIdsbyCoreSnlSpIds(request)).thenReturn(response);

        MockHttpServletRequestBuilder builder = MockMvcRequestBuilders.post("/ratingsData/api/getCapiqIdsByType")
                .content(asJsonString(request))
                .contentType(MediaType.APPLICATION_JSON);

        mockMvc.perform(builder)
                .andExpect(status().isNotFound());
    }

    @Test
    public void getCapiqIdsbyCoreSnlSpIdsTest_BadRequest() throws Exception {
        EntityTypeIdsRequest request = new EntityTypeIdsRequest();
        request.setEntityType("INVALID_TYPE");
        request.setEntityIds(List.of("1001", "1002"));

        MockHttpServletRequestBuilder builder = MockMvcRequestBuilders.post("/ratingsData/api/getCapiqIdsByType")
                .content(asJsonString(request))
                .contentType(MediaType.APPLICATION_JSON);

        mockMvc.perform(builder)
                .andExpect(status().isBadRequest());
    }    
}




C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\test\java\com\spglobal\ratings\ratingsdata\controller\CriteriaArticleControllerTest.java

package com.spglobal.ratings.ratingsdata.controller;

import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

import java.util.ArrayList;
import java.util.List;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.spglobal.ratings.ratingsdata.entity.CriteriaArticlesByTypes;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.MediaType;
import org.springframework.test.context.junit.jupiter.SpringExtension;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;

import com.spglobal.ratings.ratingsdata.entity.CriteriaTypeLookupEntity;
import com.spglobal.ratings.ratingsdata.service.CriteriaArticleService;

@ExtendWith({ SpringExtension.class, MockitoExtension.class })
@WebMvcTest(value = CriteriaArticleController.class)
public class CriteriaArticleControllerTest {
	@Autowired
	private MockMvc mockMvc;

	@InjectMocks
	CriteriaArticleController criteriaArticleController;

	@MockBean
	CriteriaArticleService criteriaArticleService;

	@Autowired
	private ObjectMapper mapper;

	@BeforeEach
	public void init() {
		mockMvc = MockMvcBuilders.standaloneSetup(criteriaArticleController).build();
	}

	@Test
	void testGetCriteriaTypes() throws Exception {
		CriteriaTypeLookupEntity criteriaType = new CriteriaTypeLookupEntity();
		criteriaType.setCriteriaTypeId(1L);
		criteriaType.setCriteriaType("Reuest for Comment");
		criteriaType.setCriteriaTypeDesc("Reuest for Comment");
		criteriaType.setOrder(1);
		criteriaType.setActvFlag("Y");
		List<CriteriaTypeLookupEntity> criteriaTypeList = new ArrayList<CriteriaTypeLookupEntity>();
		criteriaTypeList.add(criteriaType);

		Mockito.when(criteriaArticleService.getCriteriaTypes()).thenAnswer(x -> criteriaTypeList);
		MockHttpServletRequestBuilder builder = MockMvcRequestBuilders.get("/ratingsData/api/getCriteriaType");
		mockMvc.perform(builder).andExpect(status().isOk());

	}
	
	@Test
	void testGetCriteriaTypesException() throws Exception {
		Mockito.when(criteriaArticleService.getCriteriaTypes()).thenThrow(new RuntimeException("NullPointer Exception"));
		MockHttpServletRequestBuilder builder = MockMvcRequestBuilders.get("/ratingsData/api/getCriteriaType");
		mockMvc.perform(builder).andExpect(status().isInternalServerError());
	}


	@Test
	void testGetCriteriaArticlesByTypes() throws Exception {

		CriteriaArticlesByTypes criteriaArticlesByTypes = null;
		String criteriaArticlesByTypesBody = "{\"criteriaTypeId\":\"1\",\"archiveInd\":\"Y\"}";
		criteriaArticlesByTypes = mapper.readValue(criteriaArticlesByTypesBody, CriteriaArticlesByTypes.class);
		List<CriteriaArticlesByTypes> criteriaArticles = new ArrayList<CriteriaArticlesByTypes>();
		CriteriaArticlesByTypes criteriaArticlesByType = new CriteriaArticlesByTypes();
		criteriaArticles.add(criteriaArticlesByType);
		Mockito.when(criteriaArticleService.getCriteriaArticlesByTypes(criteriaArticlesByTypes.getCriteriaTypeId(),criteriaArticlesByTypes.getArchiveInd())).thenReturn(criteriaArticles);
		MockHttpServletRequestBuilder builder = MockMvcRequestBuilders.post("/ratingsData/api/getCriteriaArticlesByTypes")
				.contentType(MediaType.APPLICATION_JSON)
				.content(this.mapper.writeValueAsBytes(criteriaArticlesByTypes))
				.accept(MediaType.APPLICATION_JSON).characterEncoding("UTF-8");
		mockMvc.perform(builder).andExpect(status().isOk()).andDo(print());
	}

	@Test
	void testGetCriteriaArticlesByTypesNull() throws Exception {

		CriteriaArticlesByTypes criteriaArticlesByTypes = null;
		String criteriaArticlesByTypesBody = "{\"criteriaTypeId\":\"1\",\"archiveInd\":\"Y\"}";
		criteriaArticlesByTypes = mapper.readValue(criteriaArticlesByTypesBody, CriteriaArticlesByTypes.class);
		List<CriteriaArticlesByTypes> criteriaArticles = new ArrayList<CriteriaArticlesByTypes>();
		CriteriaArticlesByTypes criteriaArticlesByType = new CriteriaArticlesByTypes();
		criteriaArticles.add(criteriaArticlesByType);
		Mockito.when(criteriaArticleService.getCriteriaArticlesByTypes(criteriaArticlesByTypes.getCriteriaTypeId(),criteriaArticlesByTypes.getArchiveInd())).thenReturn(null);
		MockHttpServletRequestBuilder builder = MockMvcRequestBuilders.post("/ratingsData/api/getCriteriaArticlesByTypes")
				.contentType(MediaType.APPLICATION_JSON)
				.content(this.mapper.writeValueAsBytes(criteriaArticlesByTypes))
				.accept(MediaType.APPLICATION_JSON).characterEncoding("UTF-8");
		mockMvc.perform(builder).andExpect(status().is4xxClientError()).andDo(print());
	}


}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\test\java\com\spglobal\ratings\ratingsdata\controller\CyberRiskAssessmentControllerTest.java

package com.spglobal.ratings.ratingsdata.controller;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.test.context.junit.jupiter.SpringExtension;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.ResultActions;
import org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;
import org.springframework.test.web.servlet.result.MockMvcResultMatchers;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;
import org.springframework.util.LinkedMultiValueMap;
import org.springframework.util.MultiValueMap;

import com.spglobal.ratings.ratingsdata.service.CyberRiskAssessmentPublicService;


@ExtendWith({SpringExtension.class, MockitoExtension.class})
@WebMvcTest(value = CyberRiskAssessmentController.class)
public class CyberRiskAssessmentControllerTest {
	
	@Autowired
    private MockMvc mockMvc;
    @InjectMocks
    private CyberRiskAssessmentController cyberRiskAssessmentController;
    
    @MockBean
    private CyberRiskAssessmentPublicService  cyberRiskAssessmentPublicService;
    
	@Test
    void getCyberPeersPortfolioContentsWhenReturnData() throws Exception {
    	MultiValueMap<String, String> params = new LinkedMultiValueMap<>();
  	    params.add("keyInstnIds", "123456");
  	    List<String> dummyList = new ArrayList<String>(123456);
    	Mockito.when(cyberRiskAssessmentPublicService.getCyberPeersPortfolioContents(dummyList,"")).thenReturn(Collections.emptyList());
        MockHttpServletRequestBuilder requestBuilder = MockMvcRequestBuilders.get("/ratingsData/api/cyberPeersPortfolioContents").params(params);
        ResultActions actualPerformResult = MockMvcBuilders.standaloneSetup(this.cyberRiskAssessmentController).build().perform(requestBuilder);
        actualPerformResult.andExpect(MockMvcResultMatchers.status().isOk());
    }
    
    @Test
    void getCyberPeersPortfolioContentsWhenThrowsException() throws Exception {
    	MultiValueMap<String, String> params = new LinkedMultiValueMap<>();
  	  	params.add("keyInstnIds", "123456");
  	    List<String> dummyList = new ArrayList<String>(123456);
    	Mockito.when(cyberRiskAssessmentPublicService.getCyberPeersPortfolioContents(dummyList,"")).thenThrow(new RuntimeException("NullPointer Exception"));
        MockHttpServletRequestBuilder requestBuilder = MockMvcRequestBuilders.get("/ratingsData/api/cyberPeersPortfolioContents").params(params);
        ResultActions actualPerformResult = MockMvcBuilders.standaloneSetup(this.cyberRiskAssessmentController).build().perform(requestBuilder);
        actualPerformResult.andExpect(MockMvcResultMatchers.status().isOk());
    }
    

}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\test\java\com\spglobal\ratings\ratingsdata\controller\DefinitionsControllerTest.java

package com.spglobal.ratings.ratingsdata.controller;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.anyList;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit.jupiter.SpringExtension;
import org.springframework.test.web.servlet.ResultActions;
import org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;
import org.springframework.test.web.servlet.result.MockMvcResultMatchers;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;
import org.springframework.util.LinkedMultiValueMap;
import org.springframework.util.MultiValueMap;

import com.spglobal.ratings.ratingsdata.entity.DefinitionsConfig;
import com.spglobal.ratings.ratingsdata.service.DefinitionsConfigService;

@ContextConfiguration(classes = { DefinitionsController.class })
@ExtendWith(SpringExtension.class)

public class DefinitionsControllerTest {

	@Autowired
	private DefinitionsController definitionsController;

	@MockBean
	private DefinitionsConfigService definitionsConfigService;

	@Test
	void testGetDefinitionsByType404() throws Exception {

		List<String> elementTypes = new ArrayList<String>();
		List<String> elementGroups = new ArrayList<String>();
		elementTypes.add("Reconciliation");
		elementGroups.add("DIVIDENDS");
		MultiValueMap<String, String> queryParams = new LinkedMultiValueMap<>();
		queryParams.add("type", "CORP");

		MockHttpServletRequestBuilder requestBuilder = MockMvcRequestBuilders.get("/ratingsData/api/definitionsByType")
				.queryParams(queryParams);
		ResultActions actualPerformResult = MockMvcBuilders.standaloneSetup(this.definitionsController).build()
				.perform(requestBuilder);
		actualPerformResult.andExpect(MockMvcResultMatchers.status().is4xxClientError());
	}

	@Test
	void testGetDefinitionsByType200() throws Exception {
		String type = "CORP";
		List<String> elementTypes = new ArrayList<String>();
		List<String> elementGroups = new ArrayList<String>();
		
		elementTypes.add("Reconciliation");
		elementGroups.add("DIVIDENDS");

		DefinitionsConfig definitions = new DefinitionsConfig();
		definitions.setUiConfigId(21);
		definitions.setAnalyticCaseType("CORP");
		definitions.setDataElementCode("S1_ESG");
		definitions.setDataElementType("Reconciliation");
		definitions.setDataElementGroup("DIVIDENDS");
		definitions.setDisplayName("Business Risk Profile");
		definitions.setDefinition(
				"Test Definition The business risk profile (BRP) is based on S&P Global Ratings' analysis of an insurer's competitive position, modified by the IICRA.");
		definitions.setSortOrder(1);
		definitions.setHighlightFlag("Y");
		definitions.setCreatedUser("R360_APPDATA");
		definitions.setCreatedDatetime(null);
		definitions.setUpdatedUser("R360_APPDATA");
		definitions.setUpdatedDatetime(null);
		List<DefinitionsConfig> definitionsConfig = new ArrayList<DefinitionsConfig>();
		definitionsConfig.add(definitions);

		MultiValueMap<String, String> queryParams = new LinkedMultiValueMap<>();
		queryParams.add("type", "CORP");
		queryParams.add("elementType", "Reconciliation");
		queryParams.add("elementGroup", "DIVIDENDS");
		when(definitionsConfigService.getDefinitionDetails(type, elementTypes, elementGroups))
				.thenReturn(definitionsConfig);
		MockHttpServletRequestBuilder requestBuilder = MockMvcRequestBuilders.get("/ratingsData/api/definitionsByType")
				.queryParams(queryParams);
		ResultActions actualPerformResult = MockMvcBuilders.standaloneSetup(this.definitionsController).build()
				.perform(requestBuilder);
		actualPerformResult.andExpect(MockMvcResultMatchers.status().isOk());
	}
	
	@Test
	void testGetDefinitionsByType500() throws Exception {
		String type = "CORP";
		List<String> elementTypes = new ArrayList<String>();
		List<String> elementGroups = new ArrayList<String>();
		
		elementTypes.add("Reconciliation");
		elementGroups.add("DIVIDENDS");
		MultiValueMap<String, String> queryParams = new LinkedMultiValueMap<>();
		queryParams.add("type", "CORP");
		queryParams.add("elementType", "Reconciliation");
		queryParams.add("elementGroup", "DIVIDENDS");
		when(definitionsConfigService.getDefinitionDetails(type, elementTypes, elementGroups))
				.thenThrow(new IllegalArgumentException("test"));
		MockHttpServletRequestBuilder requestBuilder = MockMvcRequestBuilders.get("/ratingsData/api/definitionsByType")
				.queryParams(queryParams);
		ResultActions actualPerformResult = MockMvcBuilders.standaloneSetup(this.definitionsController).build()
				.perform(requestBuilder);
		actualPerformResult.andExpect(MockMvcResultMatchers.status().is5xxServerError());
	}
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\test\java\com\spglobal\ratings\ratingsdata\controller\FinancialAndReconControllerTest.java

package com.spglobal.ratings.ratingsdata.controller;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.MediaType;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit.jupiter.SpringExtension;
import org.springframework.test.web.servlet.ResultActions;
import org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;
import org.springframework.test.web.servlet.result.MockMvcResultMatchers;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;
import org.springframework.util.LinkedMultiValueMap;
import org.springframework.util.MultiValueMap;

import com.spglobal.ratings.ratingsdata.service.CurrencyExchangeRateService;
import com.spglobal.ratings.ratingsdata.service.FinancialRatingService;
import com.spglobal.ratings.ratingsdata.service.ReconciliationRatingService;


@ContextConfiguration(classes = { FinancialAndReconController.class })
@ExtendWith(SpringExtension.class)
public class FinancialAndReconControllerTest {
	@Autowired
	private FinancialAndReconController financialAndReconController;

	@MockBean
	private FinancialRatingService financialRatingService;

	@MockBean
	private CurrencyExchangeRateService currencyExchangeRateService;

	@MockBean
	private ReconciliationRatingService reconciliationRatingService;

	@Test
	void testGetFinancialRatingDetails() throws Exception {
		MultiValueMap<String, String> queryParams = new LinkedMultiValueMap<>();
		queryParams.add("coreId", "1234");
		queryParams.add("periodType", "annual");
		queryParams.add("template", "corporate.adjusted");
		queryParams.add("trgCurrency", "USD");
		when(currencyExchangeRateService.isValidCurrencyCode(any())).thenReturn(true);
		MockHttpServletRequestBuilder requestBuilder = MockMvcRequestBuilders.get("/ratingsData/api/financial").queryParams(queryParams);
		ResultActions actualPerformResult = MockMvcBuilders.standaloneSetup(this.financialAndReconController).build().perform(requestBuilder);
		actualPerformResult.andExpect(MockMvcResultMatchers.status().isOk());
	}
	
	@Test
	void testGetFinancialRatingDetailsWithInvalidCurrency() throws Exception {
		MultiValueMap<String, String> queryParams = new LinkedMultiValueMap<>();
		queryParams.add("coreId", "1234");
		queryParams.add("periodType", "annual");
		queryParams.add("template", "corporate.adjusted");
		queryParams.add("trgCurrency", "USD1");
		when(currencyExchangeRateService.isValidCurrencyCode(any())).thenReturn(false);
		MockHttpServletRequestBuilder requestBuilder = MockMvcRequestBuilders.get("/ratingsData/api/financial").queryParams(queryParams);
		ResultActions actualPerformResult = MockMvcBuilders.standaloneSetup(this.financialAndReconController).build().perform(requestBuilder);
		actualPerformResult.andExpect(MockMvcResultMatchers.status().is4xxClientError());
	}

	@Test
	void testGetFinancialRatingDetailsError() throws Exception {
		MultiValueMap<String, String> queryParams = new LinkedMultiValueMap<>();
		queryParams.add("coreId", "1234");
		queryParams.add("periodType", "annuall");
		queryParams.add("template", "corporate.adjusted");
		queryParams.add("trgCurrency", "USD");
		MockHttpServletRequestBuilder requestBuilder = MockMvcRequestBuilders.get("/ratingsData/api/financial").queryParams(queryParams);
		ResultActions actualPerformResult = MockMvcBuilders.standaloneSetup(this.financialAndReconController).build().perform(requestBuilder);
		actualPerformResult.andExpect(MockMvcResultMatchers.status().is4xxClientError());
	}

	@Test
	void testGetFinancialRatingQuarterlyDetails() throws Exception {
		MultiValueMap<String, String> queryParams = new LinkedMultiValueMap<>();
		queryParams.add("coreId", "1234");
		queryParams.add("periodType", "quarterly");
		queryParams.add("template", "corporate.adjusted");
		queryParams.add("trgCurrency", "USD");
		when(currencyExchangeRateService.isValidCurrencyCode(any())).thenReturn(true);
		MockHttpServletRequestBuilder requestBuilder = MockMvcRequestBuilders.get("/ratingsData/api/financial").queryParams(queryParams);
		ResultActions actualPerformResult = MockMvcBuilders.standaloneSetup(this.financialAndReconController).build().perform(requestBuilder);
		actualPerformResult.andExpect(MockMvcResultMatchers.status().isOk());
	}

	@Test
	void testGetFinancialRatingAnnualDetails() throws Exception {
		MultiValueMap<String, String> queryParams = new LinkedMultiValueMap<>();
		queryParams.add("coreId", "1234");
		queryParams.add("template", "corporate.adjusted");
		queryParams.add("trgCurrency", "USD");
		when(currencyExchangeRateService.isValidCurrencyCode(any())).thenReturn(true);
		MockHttpServletRequestBuilder requestBuilder = MockMvcRequestBuilders.get("/ratingsData/api/financial").queryParams(queryParams);
		ResultActions actualPerformResult = MockMvcBuilders.standaloneSetup(this.financialAndReconController).build().perform(requestBuilder);
		actualPerformResult.andExpect(MockMvcResultMatchers.status().isOk());
	}

	@Test
	void testGetCustomFinancialRatingDetailsWithInvalidCurrency() throws Exception {
		List<String> periods = new ArrayList<String>();
		MultiValueMap<String, String> queryParams = new LinkedMultiValueMap<>();
		queryParams.add("coreId", "1234");
		queryParams.add("finPeriodIdList", periods.toString());
		queryParams.add("template", "corporate.adjusted");
		queryParams.add("trgCurrency", "USD1");
		when(currencyExchangeRateService.isValidCurrencyCode(any())).thenReturn(false);
		MockHttpServletRequestBuilder requestBuilder = MockMvcRequestBuilders.get("/ratingsData/api/financial/custom").queryParams(queryParams);
		ResultActions actualPerformResult = MockMvcBuilders.standaloneSetup(this.financialAndReconController).build().perform(requestBuilder);
		actualPerformResult.andExpect(MockMvcResultMatchers.status().is4xxClientError());
	}
	
	@Test
	void testGetCustomFinancialRatingDetails() throws Exception {
		List<String> periods = new ArrayList<String>();
		MultiValueMap<String, String> queryParams = new LinkedMultiValueMap<>();
		queryParams.add("coreId", "1234");
		queryParams.add("finPeriodIdList", periods.toString());
		queryParams.add("template", "corporate.adjusted");
		queryParams.add("trgCurrency", "USD");
		when(currencyExchangeRateService.isValidCurrencyCode(any())).thenReturn(true);
		MockHttpServletRequestBuilder requestBuilder = MockMvcRequestBuilders.get("/ratingsData/api/financial/custom").queryParams(queryParams);
		ResultActions actualPerformResult = MockMvcBuilders.standaloneSetup(this.financialAndReconController).build().perform(requestBuilder);
		actualPerformResult.andExpect(MockMvcResultMatchers.status().isOk());
	}

	@Test
	void testGetFinancialPeriods() throws Exception {
		List<String> periods = new ArrayList<String>();
		MultiValueMap<String, String> queryParams = new LinkedMultiValueMap<>();
		queryParams.add("coreId", "1234");
		queryParams.add("periodList", periods.toString());
		MockHttpServletRequestBuilder requestBuilder = MockMvcRequestBuilders.get("/ratingsData/api/financial/periods").queryParams(queryParams);
		ResultActions actualPerformResult = MockMvcBuilders.standaloneSetup(this.financialAndReconController).build().perform(requestBuilder);
		actualPerformResult.andExpect(MockMvcResultMatchers.status().isOk());
	}

	@Test
	void testGetMNemonic() throws Exception {
		MultiValueMap<String, String> queryParams = new LinkedMultiValueMap<>();
		queryParams.add("template", "corporate.adjusted");
		queryParams.add("trgCurrency", "EUR");
		when(currencyExchangeRateService.isValidCurrencyCode(any())).thenReturn(true);
		MockHttpServletRequestBuilder requestBuilder = MockMvcRequestBuilders.get("/ratingsData/api/financial/mnemonic").queryParams(queryParams);
		ResultActions actualPerformResult = MockMvcBuilders.standaloneSetup(this.financialAndReconController).build().perform(requestBuilder);
		actualPerformResult.andExpect(MockMvcResultMatchers.status().isOk());
	}

	@Test
	void testGetCurrencyExchangeRates() throws Exception {
		MultiValueMap<String, String> queryParams = new LinkedMultiValueMap<>();
		queryParams.add("trgCurrency", "USD");
		queryParams.add("asOfDates", "20200101");
		when(currencyExchangeRateService.isValidCurrencyCode(any())).thenReturn(true);
		MockHttpServletRequestBuilder requestBuilder = MockMvcRequestBuilders.get("/ratingsData/api/financial/exchangeRates").queryParams(queryParams);
		ResultActions actualPerformResult = MockMvcBuilders.standaloneSetup(this.financialAndReconController).build().perform(requestBuilder);
		actualPerformResult.andExpect(MockMvcResultMatchers.status().isOk());
	}
	
	@Test
	void testGetCurrencyExchangeRatesWithInvalidCurrency() throws Exception {
		MultiValueMap<String, String> queryParams = new LinkedMultiValueMap<>();
		queryParams.add("trgCurrency", "USD1");
		queryParams.add("asOfDates", "20200101");
		when(currencyExchangeRateService.isValidCurrencyCode(any())).thenReturn(false);
		MockHttpServletRequestBuilder requestBuilder = MockMvcRequestBuilders.get("/ratingsData/api/financial/exchangeRates").queryParams(queryParams);
		ResultActions actualPerformResult = MockMvcBuilders.standaloneSetup(this.financialAndReconController).build().perform(requestBuilder);
		actualPerformResult.andExpect(MockMvcResultMatchers.status().is4xxClientError());
	}
	
	@Test
	void testGetCurrencyLookup() throws Exception {
		MockHttpServletRequestBuilder requestBuilder = MockMvcRequestBuilders.get("/ratingsData/api/currencyLookup");
		ResultActions actualPerformResult = MockMvcBuilders.standaloneSetup(this.financialAndReconController).build().perform(requestBuilder);
		actualPerformResult.andExpect(MockMvcResultMatchers.status().isOk());
	}

	@Test
	void testGetFinancialPeers() throws Exception {
		String response = "{\r\n"
				+ "    \"entityIds\": [\"384391\",\"384019\"],\r\n"
				+ "    \"template\": \"Corporate.pre-adjusted\"\r\n"
				+ "}";
		MockHttpServletRequestBuilder requestBuilder = MockMvcRequestBuilders.post("/ratingsData/api/financial/getPeersFinancial");
		ResultActions actualPerformResult = MockMvcBuilders.standaloneSetup(this.financialAndReconController).build().perform(
				requestBuilder.content(response)
                .contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON));
		actualPerformResult.andExpect(MockMvcResultMatchers.status().isOk());
	}
	
	@Test
	void testGetFinancialPeersEmpty() throws Exception {
		String response = "{\r\n"
				+ "    \"entityIds\": [],\r\n"
				+ "    \"template\": \"Corporate.pre-adjusted\"\r\n"
				+ "}";
		MockHttpServletRequestBuilder requestBuilder = MockMvcRequestBuilders.post("/ratingsData/api/financial/getPeersFinancial");
		ResultActions actualPerformResult = MockMvcBuilders.standaloneSetup(this.financialAndReconController).build().perform(
				requestBuilder.content(response)
				.contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON));
		actualPerformResult.andExpect(MockMvcResultMatchers.status().is4xxClientError());
	}
	
	@Test
	void testGetFinancialPeersEmpty1() throws Exception {
		String response = "{\r\n"
				+ "    \"entityIds\": [\"384391\"],\r\n"
				+ "    \"template\": \"\"\r\n"
				+ "}";
		MockHttpServletRequestBuilder requestBuilder = MockMvcRequestBuilders.post("/ratingsData/api/financial/getPeersFinancial");
		ResultActions actualPerformResult = MockMvcBuilders.standaloneSetup(this.financialAndReconController).build().perform(
				requestBuilder.content(response)
				.contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON));
		actualPerformResult.andExpect(MockMvcResultMatchers.status().is4xxClientError());
	}
	
	@Test
	void testGetReconciliationRatingDetails() throws Exception {
		MultiValueMap<String, String> queryParams = new LinkedMultiValueMap<>();
		queryParams.add("coreId", "1234");
		queryParams.add("periodType", "annual");
		queryParams.add("trgCurrency", "USD");
		when(currencyExchangeRateService.isValidCurrencyCode(any())).thenReturn(true);
		MockHttpServletRequestBuilder requestBuilder = MockMvcRequestBuilders.get("/ratingsData/api/reconciliation").queryParams(queryParams);
		ResultActions actualPerformResult = MockMvcBuilders.standaloneSetup(this.financialAndReconController).build().perform(requestBuilder);
		actualPerformResult.andExpect(MockMvcResultMatchers.status().isOk());
	}

	@Test
	void testGetReconciliationRatingDetailsWithInvalidCurrency() throws Exception {
		MultiValueMap<String, String> queryParams = new LinkedMultiValueMap<>();
		queryParams.add("coreId", "1234");
		queryParams.add("periodType", "annual");
		queryParams.add("trgCurrency", "USD1");
		when(currencyExchangeRateService.isValidCurrencyCode(any())).thenReturn(false);
		MockHttpServletRequestBuilder requestBuilder = MockMvcRequestBuilders.get("/ratingsData/api/reconciliation").queryParams(queryParams);
		ResultActions actualPerformResult = MockMvcBuilders.standaloneSetup(this.financialAndReconController).build().perform(requestBuilder);
		actualPerformResult.andExpect(MockMvcResultMatchers.status().is4xxClientError());
	}
	
	@Test
	void testGetReconciliationRatingDetails1() throws Exception {
		MultiValueMap<String, String> queryParams = new LinkedMultiValueMap<>();
		queryParams.add("coreId", "1234");
		queryParams.add("periodType", "");
		queryParams.add("trgCurrency", "USD");
		when(currencyExchangeRateService.isValidCurrencyCode(any())).thenReturn(true);
		MockHttpServletRequestBuilder requestBuilder = MockMvcRequestBuilders.get("/ratingsData/api/reconciliation").queryParams(queryParams);
		ResultActions actualPerformResult = MockMvcBuilders.standaloneSetup(this.financialAndReconController).build().perform(requestBuilder);
		actualPerformResult.andExpect(MockMvcResultMatchers.status().isOk());
	}
	
	@Test
	void testGetReconciliationRatingDetails2() throws Exception {
		MultiValueMap<String, String> queryParams = new LinkedMultiValueMap<>();
		queryParams.add("coreId", "1234");
		queryParams.add("periodType", "quarterly");
		queryParams.add("trgCurrency", "USD");
		when(currencyExchangeRateService.isValidCurrencyCode(any())).thenReturn(true);
		MockHttpServletRequestBuilder requestBuilder = MockMvcRequestBuilders.get("/ratingsData/api/reconciliation").queryParams(queryParams);
		ResultActions actualPerformResult = MockMvcBuilders.standaloneSetup(this.financialAndReconController).build().perform(requestBuilder);
		actualPerformResult.andExpect(MockMvcResultMatchers.status().isOk());
	}

	@Test
	void testGetReconciliationRatingDetailsError() throws Exception {
		MultiValueMap<String, String> queryParams = new LinkedMultiValueMap<>();
		queryParams.add("coreId", "1234");
		queryParams.add("periodType", "annuall");
		queryParams.add("trgCurrency", "USD");
		when(currencyExchangeRateService.isValidCurrencyCode(any())).thenReturn(true);
		MockHttpServletRequestBuilder requestBuilder = MockMvcRequestBuilders.get("/ratingsData/api/reconciliation").queryParams(queryParams);
		ResultActions actualPerformResult = MockMvcBuilders.standaloneSetup(this.financialAndReconController).build().perform(requestBuilder);
		actualPerformResult.andExpect(MockMvcResultMatchers.status().is4xxClientError());
	}

	@Test
	void testGetCustomReconciliationRatingDetailsWithInvalidCurrency() throws Exception {
		List<String> periods = new ArrayList<String>();
		MultiValueMap<String, String> queryParams = new LinkedMultiValueMap<>();
		queryParams.add("coreId", "1234");
		queryParams.add("periodIdList", periods.toString());
		queryParams.add("trgCurrency", "USD1");
		when(currencyExchangeRateService.isValidCurrencyCode(any())).thenReturn(false);
		MockHttpServletRequestBuilder requestBuilder = MockMvcRequestBuilders.get("/ratingsData/api/reconciliation/custom").queryParams(queryParams);
		ResultActions actualPerformResult = MockMvcBuilders.standaloneSetup(this.financialAndReconController).build().perform(requestBuilder);
		actualPerformResult.andExpect(MockMvcResultMatchers.status().is4xxClientError());
	}
	
	@Test
	void testGetCustomReconciliationRatingDetails() throws Exception {
		List<String> periods = new ArrayList<String>();
		MultiValueMap<String, String> queryParams = new LinkedMultiValueMap<>();
		queryParams.add("coreId", "1234");
		queryParams.add("periodIdList", periods.toString());
		queryParams.add("trgCurrency", "USD");
		when(currencyExchangeRateService.isValidCurrencyCode(any())).thenReturn(true);
		MockHttpServletRequestBuilder requestBuilder = MockMvcRequestBuilders.get("/ratingsData/api/reconciliation/custom").queryParams(queryParams);
		ResultActions actualPerformResult = MockMvcBuilders.standaloneSetup(this.financialAndReconController).build().perform(requestBuilder);
		actualPerformResult.andExpect(MockMvcResultMatchers.status().isOk());
	}	
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\test\java\com\spglobal\ratings\ratingsdata\controller\InvestorSentimentControllerTest.java

package com.spglobal.ratings.ratingsdata.controller;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.spglobal.ratings.ratingsdata.entity.InvestorSentimentCommentry;
import com.spglobal.ratings.ratingsdata.entity.InvestorSentimentIndustry;
import com.spglobal.ratings.ratingsdata.entity.InvestorSentimentNumbersRecentStudies;
import com.spglobal.ratings.ratingsdata.entity.InvestorSentimentSectors;
import com.spglobal.ratings.ratingsdata.model.InvestorSentimentSectorResponse;
import com.spglobal.ratings.ratingsdata.service.InvestorSentimentSectorService;
import com.spglobal.ratings.ratingsdata.service.InvestorSentimentServiceImpl;
import com.spglobal.ratings.ratingsdata.util.RatingsDataUtil;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.MediaType;
import org.springframework.test.context.junit.jupiter.SpringExtension;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.ResultActions;
import org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;
import org.springframework.test.web.servlet.result.MockMvcResultMatchers;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;
import org.springframework.util.LinkedMultiValueMap;
import org.springframework.util.MultiValueMap;

import java.util.ArrayList;
import java.util.List;

import static org.mockito.ArgumentMatchers.anyLong;
import static org.mockito.ArgumentMatchers.anyString;

@ExtendWith({ SpringExtension.class, MockitoExtension.class })
@WebMvcTest(value = InvestorSentimentController.class)
public class InvestorSentimentControllerTest {


	@InjectMocks
	InvestorSentimentController investorSentimentController;

	@MockBean
	InvestorSentimentSectorService invesSectorService;

	@MockBean
	InvestorSentimentServiceImpl investorSentimentService;

	@Autowired
	private MockMvc mockMvc;

	@MockBean
	RatingsDataUtil ratingsDataUtil;

	List<InvestorSentimentSectors> sectorsList = new ArrayList<InvestorSentimentSectors>();

	@BeforeEach
	public void init() {
		InvestorSentimentSectors sectors = new InvestorSentimentSectors();
		sectors.setIndustryId(243);
		sectors.setSectorId(0);
		sectors.setParentSectorId(null);
		sectors.setSectorName("Corporates");
		sectors.setParentSectorName(null);
		sectorsList.add(sectors);
	}

	@Test
	public void test_getSectorsList() throws Exception {
		InvestorSentimentSectorResponse response = new InvestorSentimentSectorResponse();
		response.setSectorsList(sectorsList);
		InvestorSentimentIndustry deafualtIndustry = new InvestorSentimentIndustry();
		deafualtIndustry.setIndustryId(243);
		deafualtIndustry.setSectorId(0);
		deafualtIndustry.setSectorName("Corporates");
		response.setSectorDropdwnSelect(deafualtIndustry);
		MultiValueMap<String, String> queryParams = new LinkedMultiValueMap<>();
		queryParams.add("profileSpecialization", "1");
		queryParams.add("entityId", "12312312");

		Mockito.when(invesSectorService.getSectorsAndDefaultIndustry(anyString(), anyLong()))
				.thenAnswer(x -> response);
		MockHttpServletRequestBuilder requestBuilder = MockMvcRequestBuilders
				.get("/ratingsData/api/investorsentiment/sectors").queryParams(queryParams);
		ResultActions actualPerformResult = MockMvcBuilders.standaloneSetup(this.investorSentimentController).build()
				.perform(requestBuilder);
		actualPerformResult.andExpect(MockMvcResultMatchers.status().isOk());

	}

	@Test
	public void test_getSectorsList_exception() {

		MultiValueMap<String, String> queryParams = new LinkedMultiValueMap<>();
		queryParams.add("profileSpecialization", "1");
		queryParams.add("entityId", "12312312");

		try {
			Mockito.when(invesSectorService.getSectorsAndDefaultIndustry(anyString(), anyLong()))
					.thenThrow(Exception.class);
			MockHttpServletRequestBuilder requestBuilder = MockMvcRequestBuilders
					.get("/ratingsData/api/investorsentiment/sectors").queryParams(queryParams);
			ResultActions actualPerformResult = MockMvcBuilders.standaloneSetup(this.investorSentimentController).build()
					.perform(requestBuilder);
			actualPerformResult.andExpect(MockMvcResultMatchers.status().is2xxSuccessful());
		} catch (Exception e) {
			// TODO Auto-generated catch block
			//e.printStackTrace();
		}


	}

	public static String asJsonString(final Object obj) {
		try {
			return new ObjectMapper().writeValueAsString(obj);
		} catch (Exception e) {
			throw new RuntimeException(e);
		}
	}

	@Test
	public void testGetInvestorSentimentCommentryByIndustryId() throws Exception {
		Long industryId = 1L;
		List<InvestorSentimentCommentry> expectedInvestorSentimentCommentryList = new ArrayList<>();

		Mockito.when(investorSentimentService.getInvestorSentimentCommentryByIndustryId(industryId)).thenReturn(expectedInvestorSentimentCommentryList);
		MockHttpServletRequestBuilder builder = MockMvcRequestBuilders.get("/ratingsData/api/investorsentiment/getCommentry")
				.param("industryId", String.valueOf(industryId))
				.contentType(MediaType.APPLICATION_JSON);//.header("Authorization", "Authorization");
		ResultActions actualPerformResult = MockMvcBuilders.standaloneSetup(this.investorSentimentController).build()
				.perform(builder);
		actualPerformResult.andExpect(MockMvcResultMatchers.status().isOk());
	}


	@Test
	public void testGetNumbersByIndustryAndType() throws Exception {
		Long industryId = 1L;
		String type = "NUMBERS";
		List<InvestorSentimentNumbersRecentStudies> expectedInvestorSentimentNumbersRecentStudiesList = new ArrayList<>();
		InvestorSentimentNumbersRecentStudies investorSentimentNumbersRecentStudies = new InvestorSentimentNumbersRecentStudies();
		investorSentimentNumbersRecentStudies.setIndustryId(industryId);
		investorSentimentNumbersRecentStudies.setType(type);

		Mockito.when(investorSentimentService.getInvestorSentimentNumbersByIndustryIdAndType(industryId, type)).thenReturn(expectedInvestorSentimentNumbersRecentStudiesList);

		MockHttpServletRequestBuilder builder = MockMvcRequestBuilders.post("/ratingsData/api/investorsentiment/getNumbersByIndustryAndType")
				.content(asJsonString(investorSentimentNumbersRecentStudies)).contentType(MediaType.APPLICATION_JSON);//.header("Authorization", "Authorization");
		ResultActions actualPerformResult = MockMvcBuilders.standaloneSetup(this.investorSentimentController).build()
				.perform(builder);
		actualPerformResult.andExpect(MockMvcResultMatchers.status().isOk());
	}

	@Test
	void test_getSectorsListByApp() throws Exception {
		InvestorSentimentSectorResponse response = new InvestorSentimentSectorResponse();
		response.setSectorsList(sectorsList);
		InvestorSentimentIndustry deafualtIndustry = new InvestorSentimentIndustry();
		deafualtIndustry.setIndustryId(243);
		deafualtIndustry.setSectorId(0);
		deafualtIndustry.setSectorName("Corporates");
		response.setSectorDropdwnSelect(deafualtIndustry);
		MultiValueMap<String, String> queryParams = new LinkedMultiValueMap<>();
		queryParams.add("application", "7");
		queryParams.add("entityId", "12312312");

		Mockito.when(invesSectorService.getSectorsAndDefaultIndustrByApp(anyString(), anyLong()))
				.thenAnswer(x -> response);
		MockHttpServletRequestBuilder requestBuilder = MockMvcRequestBuilders
				.get("/ratingsData/api/investorsentiment/sectorsByApp").queryParams(queryParams);
		ResultActions actualPerformResult = MockMvcBuilders.standaloneSetup(this.investorSentimentController).build()
				.perform(requestBuilder);
		actualPerformResult.andExpect(MockMvcResultMatchers.status().isOk());

	}

	@Test
	void test_getSectorsListByApp_exception() throws Exception{

		MultiValueMap<String, String> queryParams = new LinkedMultiValueMap<>();
		queryParams.add("application", "1");
		queryParams.add("entityId", "12312312");
			Mockito.when(invesSectorService.getSectorsAndDefaultIndustry(anyString(), anyLong()))
					.thenThrow(Exception.class);
			MockHttpServletRequestBuilder requestBuilder = MockMvcRequestBuilders
					.get("/ratingsData/api/investorsentiment/sectorsByApp").queryParams(queryParams);
			ResultActions actualPerformResult = MockMvcBuilders.standaloneSetup(this.investorSentimentController).build()
					.perform(requestBuilder);
			actualPerformResult.andExpect(MockMvcResultMatchers.status().is2xxSuccessful());

	}

}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\test\java\com\spglobal\ratings\ratingsdata\controller\MultimediaControllerTest.java

package com.spglobal.ratings.ratingsdata.controller;

import java.util.ArrayList;
import java.util.List;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.test.context.junit.jupiter.SpringExtension;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.ResultActions;
import org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;
import org.springframework.test.web.servlet.result.MockMvcResultMatchers;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;
import org.springframework.util.LinkedMultiValueMap;
import org.springframework.util.MultiValueMap;

import com.spglobal.ratings.ratingsdata.entity.MultimediaPodcasts;
import com.spglobal.ratings.ratingsdata.entity.MultimediaSector;
import com.spglobal.ratings.ratingsdata.exception.ApplicationRuntimeException;
import com.spglobal.ratings.ratingsdata.service.MultimediaService;

@ExtendWith({ SpringExtension.class, MockitoExtension.class })
@WebMvcTest(value = MultimediaController.class)
public class MultimediaControllerTest {

	@Autowired
	private MockMvc mockMvc;

	@InjectMocks
	MultimediaController multiMediaController;

	@MockBean
	MultimediaService multimediaService;

	private MultiValueMap<String, String> queryParams = new LinkedMultiValueMap<>();

	@BeforeEach
	public void init() {
		mockMvc = MockMvcBuilders.standaloneSetup(multiMediaController).build();
		queryParams.add("fileType", "video");
	}

	@Test
	public void test_sectorlist() {

		MultimediaSector mmSector = new MultimediaSector();
		mmSector.setSectorTreeKey(1);
		mmSector.setSectorSubSectorName("Corporates");
		mmSector.setParentTreeKey(null);
		List<MultimediaSector> list = new ArrayList<MultimediaSector>();
		list.add(mmSector);

		try {
			Mockito.when(multiMediaController.getSectorSubSectorTree()).thenAnswer(x -> list);
			MockHttpServletRequestBuilder requestBuilder = MockMvcRequestBuilders
					.get("/ratingsData/api/multimedia/sectorlist");
			ResultActions actualPerformResult = MockMvcBuilders.standaloneSetup(this.multiMediaController).build()
					.perform(requestBuilder);
			actualPerformResult.andExpect(MockMvcResultMatchers.status().isOk());
		} catch (Exception e) {
			e.printStackTrace();
		}

	}

	@Test
	public void test_sectorlist_exception() {

		try {
			Mockito.when(multiMediaController.getSectorSubSectorTree()).thenThrow(Exception.class);
			MockHttpServletRequestBuilder requestBuilder = MockMvcRequestBuilders
					.get("/ratingsData/api/multimedia/sectorlist");
			ResultActions actualPerformResult = MockMvcBuilders.standaloneSetup(this.multiMediaController).build()
					.perform(requestBuilder);
			actualPerformResult.andExpect(MockMvcResultMatchers.status().is5xxServerError());
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	
	@Test
	public void test_getVideosAndPodCasts() {

		MultimediaPodcasts podcasts = new MultimediaPodcasts();
		podcasts.setGuId("1604416");
		podcasts.setPublishDate("9/4/2020 12:00:00 PM");
		podcasts.setDescription("Ep11: US-China relationship special with Invesco ");
		podcasts.setUrlLink("http://cdn.vidyard.com/videos/6jhNb86h52JAzppmX0_99Q/source.mp4?QkF0hcEG8ZTuW-7mjPRFiAlh9npQqW4wn33c-vGCAoHNJnThXbAzgXMhuDSj8ngS9O5nj0xxotidPkcDv50DdGLH-yREwiM-Z-88rOTell9z9w");
		podcasts.setBatchCount(0);
		podcasts.setCreateDate("2/22/2022 8:09:40 AM");
		podcasts.setTitle("Ep11: US-China relationship special with Invesco ");
		podcasts.setFileType("audio");
		podcasts.setPodcastId(172641L);
		podcasts.setAuthor("Joseph Cass,Paul Gruenwald");
		podcasts.setDuration("00:13:44");
		podcasts.setContextVideoUrl("https://www.spglobal.com/ratings/en/research-insights/podcasts/2020-09-04-fixed-income-in-15-episode-11");
		podcasts.setRegion("EMEA");
		podcasts.setSector("Corporates");
		podcasts.setSubSector(null);
		podcasts.setSummary("Kristina Hooper, Chief Market Strategist at Invesco and Shaun Roache, S&P Global Ratings Chief Economist for APAC joined Joe Cass on this edition of Fixed Income in 15. Discussion focused on ESG in fixed income, the relationship between the US and China and how Asia-Pacific as a region has reacted to the Coronavirus pandemic. There was also time to talk about Kristina’s experience of working from home, the resurrection of Shaun’s rugby career and who Kristina thinks should be the next guest on the show.");
		podcasts.setLanguage("English");
		podcasts.setThumbNail("http://play.vidyard.com/4sjNGp42Laju1wAJys8bYF.jpg");

		List<MultimediaPodcasts> list = new ArrayList<MultimediaPodcasts>();
		list.add(podcasts);

		try {
			MockHttpServletRequestBuilder requestBuilder = MockMvcRequestBuilders
					.get("/ratingsData/api/multimedia/podcasts").params(queryParams);
			ResultActions actualPerformResult = MockMvcBuilders.standaloneSetup(this.multiMediaController).build()
					.perform(requestBuilder);
			actualPerformResult.andExpect(MockMvcResultMatchers.status().isOk());
		} catch (Exception e) {
			e.printStackTrace();
		}

	}

	@Test
	public void test_getVideosAndPodCasts_exception() throws Exception{

			Mockito.when(multimediaService.getVideosAndPodCasts(Mockito.anyString(),Mockito.any())).thenThrow(Exception.class);
			MockHttpServletRequestBuilder requestBuilder = MockMvcRequestBuilders
					.get("/ratingsData/api/multimedia/podcasts").params(queryParams);
			ResultActions actualPerformResult = MockMvcBuilders.standaloneSetup(this.multiMediaController).build()
					.perform(requestBuilder);
			actualPerformResult.andExpect(MockMvcResultMatchers.status().isInternalServerError());
		
	}

}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\test\java\com\spglobal\ratings\ratingsdata\controller\PeersManagementControllerTest.java

package com.spglobal.ratings.ratingsdata.controller;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.never;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.MediaType;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.junit.jupiter.SpringExtension;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;
import org.springframework.test.web.servlet.result.MockMvcResultMatchers;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;

import com.spglobal.ratings.ratingsdata.entity.UspfPeerPortfolioData;
import com.spglobal.ratings.ratingsdata.model.AnalystPeerVo;
import com.spglobal.ratings.ratingsdata.model.Response;
import com.spglobal.ratings.ratingsdata.service.PeersManagementService;

@ExtendWith({ SpringExtension.class, MockitoExtension.class })
@WebMvcTest( PeersManagementController.class)
public class PeersManagementControllerTest {
	
	@Autowired
	private MockMvc mockMvc;
	
	@InjectMocks
	private PeersManagementController peerManagementController;
	
	@MockBean
	private PeersManagementService peersConfigService;
	
	@BeforeEach
	public void init() {
		MockitoAnnotations.initMocks(this);
		mockMvc = MockMvcBuilders.standaloneSetup(peerManagementController).build();
	}
	
	@Test 
	void testGetPeerConfigByIdSuccess() throws Exception {
		String keyInstnId = "123";
		Long coreId = 2L;
		
		List<AnalystPeerVo> peersDataList = new ArrayList<>();
		Response<List<AnalystPeerVo>> expectedResponse = new Response<>();
		expectedResponse.setStatus(Response.Status.SUCCESS);
		expectedResponse.setMessage("Sucessfully retrieved the Peers Config Data");
		expectedResponse.setValue(peersDataList);
		
		when(peersConfigService.getPeersById(any(),any(),any())).thenReturn(peersDataList);
		
		mockMvc.perform(MockMvcRequestBuilders.get("/ratingsData/api/getAnalystPeers")
				.param("keyInstn", keyInstnId)
				.param("coreId", coreId.toString()).param("capiq", "1222")
				.contentType(MediaType.APPLICATION_JSON))
				.andExpect(MockMvcResultMatchers.status().isOk())
				.andExpect(MockMvcResultMatchers.content().contentType(MediaType.APPLICATION_JSON));
		verify(peersConfigService,times(1)).getPeersById(coreId, keyInstnId,"1222");
	}
	
	@Test 
	void testGetPeerConfigByIdFailure() throws Exception {
		
		mockMvc.perform(MockMvcRequestBuilders.get("/ratingsData/api/getAnalystPeers")
				.contentType(MediaType.APPLICATION_JSON))
				.andExpect(MockMvcResultMatchers.status().isOk())
				.andExpect(MockMvcResultMatchers.content().contentType(MediaType.APPLICATION_JSON));
		verify(peersConfigService,never()).getPeersById(any(), any(),any());
	}
	
	@Test 
	void testGetPeerConfigByIdException() throws Exception {
		
		when(peersConfigService.getPeersById(any(), any(),any())).thenThrow(new RuntimeException("Test Exception"));
		
		mockMvc.perform(MockMvcRequestBuilders.get("/ratingsData/api/getAnalystPeers")
				.param("capiq", "123")
				.contentType(MediaType.APPLICATION_JSON))
				.andExpect(MockMvcResultMatchers.status().isOk())
				.andExpect(MockMvcResultMatchers.content().contentType(MediaType.APPLICATION_JSON));
		
		verify(peersConfigService,times(1)).getPeersById(null, null,"123");
	}
	
	@Test 
	void testGetUspfPortfolioContentsSuccess() throws Exception {
	
		Map<String, Map<String, Map<String, List<UspfPeerPortfolioData>>>> peersDataList = new HashMap<String, Map<String, Map<String, List<UspfPeerPortfolioData>>>>();
		Response<Map<String, Map<String, Map<String, List<UspfPeerPortfolioData>>>>> expectedResponse = new Response<>();
		expectedResponse.setStatus(Response.Status.SUCCESS);
		expectedResponse.setMessage("Sucessfully retrieved the Peers Config Data");
		expectedResponse.setValue(peersDataList);
		
		when(peersConfigService.getUspfPeerPortfolioContents(Mockito.anyList())).thenReturn(peersDataList);
		
		mockMvc.perform(MockMvcRequestBuilders.get("/ratingsData/api/getAnalystPeers")
				.param("asIds", "1593,1444")
				.contentType(MediaType.APPLICATION_JSON))
				.andExpect(MockMvcResultMatchers.status().isOk())
				.andExpect(MockMvcResultMatchers.content().contentType(MediaType.APPLICATION_JSON));
	}

	@Test
	void testGetUspfPortfolioContentsFailure() throws Exception {
		mockMvc.perform(
				MockMvcRequestBuilders.get("/ratingsData/api/getUspfPortfolioContents").contentType(MediaType.APPLICATION_JSON))
				.andExpect(MockMvcResultMatchers.status().is4xxClientError());
	}

	@Test 
	void testGetUspfPortfolioContentsException() throws Exception {
		
		when(peersConfigService.getPeersById(any(), any(),any())).thenThrow(new RuntimeException("Test Exception"));
		
		mockMvc.perform(MockMvcRequestBuilders.get("/ratingsData/api/getUspfPortfolioContents")
				.param("asIds", "1593,1444")
				.contentType(MediaType.APPLICATION_JSON))
				.andExpect(MockMvcResultMatchers.status().isOk())
				.andExpect(MockMvcResultMatchers.content().contentType(MediaType.APPLICATION_JSON));
		
		verify(peersConfigService,times(1)).getUspfPeerPortfolioContents(any());
	}
	
	
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\test\java\com\spglobal\ratings\ratingsdata\controller\RatingArticlesControllerTest.java

package com.spglobal.ratings.ratingsdata.controller;

import static org.hamcrest.CoreMatchers.is;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.eq;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

import java.sql.Timestamp;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.spglobal.ratings.ratingsdata.model.*;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.MediaType;
import org.springframework.test.context.junit.jupiter.SpringExtension;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;

import com.spglobal.ratings.ratingsdata.entity.RatingArticleTypes;
import com.spglobal.ratings.ratingsdata.entity.RatingArticles;
import com.spglobal.ratings.ratingsdata.entity.RatingArticlesPeer;
import com.spglobal.ratings.ratingsdata.entity.RatingArticlesPublicPvt;
import com.spglobal.ratings.ratingsdata.entity.RatingCriteriaArticles;
import com.spglobal.ratings.ratingsdata.entity.RatingCriteriaArticlesPrivate;
import com.spglobal.ratings.ratingsdata.entity.RatingCriteriaArticlesPublic;
import com.spglobal.ratings.ratingsdata.service.RatingArticlesPublicPvtService;
import com.spglobal.ratings.ratingsdata.service.RatingArticlesService;
import com.spglobal.ratings.ratingsdata.service.RatingCriteriaArticlesService;
import com.spglobal.ratings.ratingsdata.util.RatingsDataConstant;

@ExtendWith({ SpringExtension.class, MockitoExtension.class })
@WebMvcTest(value = RatingArticlesController.class)
public class RatingArticlesControllerTest {

	@Autowired
	private MockMvc mockMvc;

	@InjectMocks
	private RatingArticlesController controller;

	@MockBean
	private RatingCriteriaArticlesService ratingCriteriaArticlesService;

	@MockBean
	private RatingArticlesService ratingArticlesService;

	@MockBean
	private RatingArticlesPublicPvtService ratingArticlesPublicPvtService;

	private DateTimeFormatter CUSTOM_DATE_TIME_FORMATTER = DateTimeFormatter
			.ofPattern(RatingsDataConstant.CUSTOM_DATE_TIME_FORMAT);

	@BeforeEach
	public void init() {
		MockitoAnnotations.initMocks(this);
		mockMvc = MockMvcBuilders.standaloneSetup(controller).build();
	}

	@Test
	public void getRatingCriteriaArticlesSuccessTest1() throws Exception {

		RatingCriteriaArticlesPublic articles1 = new RatingCriteriaArticlesPublic();
		articles1.setRatingDetailId(43379480L);
		articles1.setSourceRatingId(926181518L);
		articles1.setPcrRegion("US");
		articles1.setCriteriaArticleId(2803123L);
		articles1.setArticleDate(new Timestamp(1646195262000L));
		articles1.setPreferredTitle("General Criteria: Hybrid Capital: Methodology And Assumptions");
		articles1.setLastName("Lemos-Stein, CFA");
		articles1.setFirstName("Gregg");
		articles1.setFullName("Gregg Lemos-Stein, CFA");

		List<RatingCriteriaArticles> ratingCriteriaArticles = new ArrayList<RatingCriteriaArticles>();
		ratingCriteriaArticles.add(articles1);

		Mockito.when(ratingCriteriaArticlesService.getRatingCriteriaArticles(eq(6330608L), eq(43379480L), eq(false), any()))
				.thenAnswer(x -> ratingCriteriaArticles);

		MockHttpServletRequestBuilder builder = MockMvcRequestBuilders.get(
						"/ratingsData/api/getRatingCriteriaArticles?ratingDetailId=43379480&capiq=6330608&confidential=false")
				.header("Authorization", "");

		mockMvc.perform(builder).andExpect(status().isOk()).andExpect(content().contentType(MediaType.APPLICATION_JSON))
				.andExpect(jsonPath("$.status").value("SUCCESS"))
				.andExpect(jsonPath("$.elements.length()", is(1)));
	}

	@Test
	public void getRatingCriteriaArticlesSuccessTest2() throws Exception {

		RatingCriteriaArticlesPrivate articles1 = new RatingCriteriaArticlesPrivate();
		articles1.setRatingDetailId(43379480L);
		articles1.setSourceRatingId(926181518L);
		articles1.setPcrRegion("US");
		articles1.setCriteriaArticleId(2803123L);
		articles1.setArticleDate(new Timestamp(1646195262000L));
		articles1.setPreferredTitle("General Criteria: Hybrid Capital: Methodology And Assumptions");
		articles1.setLastName("Lemos-Stein, CFA");
		articles1.setFirstName("Gregg");
		articles1.setFullName("Gregg Lemos-Stein, CFA");

		List<RatingCriteriaArticles> ratingCriteriaArticles = new ArrayList<RatingCriteriaArticles>();
		ratingCriteriaArticles.add(articles1);

		Mockito.when(ratingCriteriaArticlesService.getRatingCriteriaArticles(eq(6330608L), eq(43379480L), eq(true), any()))
				.thenAnswer(x -> ratingCriteriaArticles);

		MockHttpServletRequestBuilder builder = MockMvcRequestBuilders.get(
				"/ratingsData/api/getRatingCriteriaArticles?ratingDetailId=43379480&capiq=6330608&confidential=true");

		mockMvc.perform(builder).andExpect(status().isOk()).andExpect(content().contentType(MediaType.APPLICATION_JSON))
				.andExpect(jsonPath("$.status").value("SUCCESS"))
				.andExpect(jsonPath("$.elements.length()", is(1)));
	}

	@Test
	public void getRatingArticleTypesSuccessTest3() throws Exception {
		List<Long> articletypeIds = new ArrayList<Long>();
		articletypeIds.add(1L);
		articletypeIds.add(3L);

		List<RatingArticleTypes> ratingArticleTypes = new ArrayList<RatingArticleTypes>();
		ratingArticleTypes.add(new RatingArticleTypes(Long.valueOf(1L), "Bulletin"));
		ratingArticleTypes.add(new RatingArticleTypes(Long.valueOf(3L), "Commentary"));

		Mockito.when(ratingArticlesService.getRatingArticlesTypes(articletypeIds)).thenReturn(ratingArticleTypes);

		MockHttpServletRequestBuilder builder = MockMvcRequestBuilders.get(
				"/ratingsData/api/getRatingArticleTypes?articleTypeIds=1,3").header("Authorization", "");

		mockMvc.perform(builder).andExpect(status().isOk()).andExpect(content().contentType(MediaType.APPLICATION_JSON))
				.andExpect(jsonPath("$.status").value("SUCCESS"))
				.andExpect(jsonPath("$.elements.length()", is(2)));
	}

	@Test
	public void getRatingArticlesSuccessTest4() throws Exception {
		List<Long> articletypeIds = new ArrayList<Long>();
		articletypeIds.add(1L);
		articletypeIds.add(3L);

		RatingArticlesDetailSearch ratingArticlesSearch = new RatingArticlesDetailSearch();
		ratingArticlesSearch.setEntityId(Arrays.asList(100751L));
		ratingArticlesSearch.setArticleTypeIds(articletypeIds);
		ratingArticlesSearch.setCount(500);
		ratingArticlesSearch.setCountryCode("US");

		String requestBody = "{\"entityId\":[100751],\"articleTypeIds\":[1,3],\"count\":500,\"countryCode\":\"US\"}";

		List<RatingArticles> ratingArticles = new ArrayList<RatingArticles>();

		RatingArticles articles1 = new RatingArticles();
		articles1.setArticleId(2975957L);
		articles1.setEntityId(100751L);
		articles1.setFullName("Simon Redmond");
		articles1.setArticleTitle("Report Explains How Commodity Price Assumptions Are Formulated And Used; Oil And Gas Price Deck Revised");
		articles1.setArticleType("News");
		articles1.setArticleTypeId(10L);
		articles1.setArticleDate(Timestamp.valueOf(LocalDateTime.parse("2023-04-20T14:11:36")));
		articles1.setAbstract_data("shshha");
		ratingArticles.add(articles1);

		Mockito.when(ratingArticlesService.getRatingArticles(ratingArticlesSearch)).thenAnswer(x -> ratingArticles);

		MockHttpServletRequestBuilder builder = MockMvcRequestBuilders.post("/ratingsData/api/getRatingArticles")
				.contentType(MediaType.APPLICATION_JSON)
				.content(requestBody)
				.header("Authorization", "");
		mockMvc.perform(builder).andExpect(status().isOk()).andExpect(content().contentType(MediaType.APPLICATION_JSON))
				.andExpect(jsonPath("$.status").value("SUCCESS"))
				.andExpect(jsonPath("$.elements.length()", is(1)));
	}

	@Test
	public void getPublicPvtRatingArticlesSuccessTest5() throws Exception {
		RatingArticlesData articles = new RatingArticlesData();

		List<Long> articletypeIds = new ArrayList<Long>();
		articletypeIds.add(14L);

		RatingArticlesSearch ratingArticlesSearch = new RatingArticlesSearch();
		ratingArticlesSearch.setEntityId(100751L);
		ratingArticlesSearch.setArticleTypeIds(articletypeIds);
		ratingArticlesSearch.setCount(500);
		ratingArticlesSearch.setStartArticleDate(
				Timestamp.valueOf(LocalDateTime.parse("2000-01-01 00:00:00", CUSTOM_DATE_TIME_FORMATTER)));
		ratingArticlesSearch.setEndArticleDate(
				Timestamp.valueOf(LocalDateTime.parse("2024-04-01 23:59:59", CUSTOM_DATE_TIME_FORMATTER)));
		ratingArticlesSearch.setCountryCode("US");

		String requestBody = "{\"entityId\":100751,\"articleTypeIds\":[14],\"startArticleDate\":\"2000-01-01 00:00:00\",\"endArticleDate\":\"2024-04-01 23:59:59\",\"count\":500,\"countryCode\":\"US\"}";

		List<RatingArticlesPublicPvt> ratingArticles = new ArrayList<RatingArticlesPublicPvt>();

		RatingArticlesPublicPvt articles1 = new RatingArticlesPublicPvt();
		articles1.setArticleId("2968780");
		articles1.setEntityId("100751");
		articles1.setFullName("David Lagasse");
		articles1.setArticleTitle("Research Update: EQT Corp. 'BBB-' Ratings Affirmed On Oil And Natural Gas Price Assumptions; Outlook Stable");
		articles1.setArticleType("News");
		articles1.setArticleTypeId(14L);
		articles1.setArticleDate(Timestamp.valueOf(LocalDateTime.parse("2023-04-04T16:49:12")));
		ratingArticles.add(articles1);

		articles.setRatingArticles(ratingArticles);

		Mockito.when(ratingArticlesPublicPvtService.getRatingArticles(ratingArticlesSearch, 4004341L, "authHeader")).thenReturn(articles);

		MockHttpServletRequestBuilder builder = MockMvcRequestBuilders.post("/ratingsData/api/getRatingArticlesPublicPvt/4004341")
				.contentType(MediaType.APPLICATION_JSON)
				.content(requestBody)
				.header("Authorization", "authHeader");
		mockMvc.perform(builder).andExpect(status().isNotFound());
	}

	@Test
	public void getDashboardPublicPvtRatingArticlesSuccessTest6() throws Exception {
		String entityId = "100751";
		String countryCode = "US";
		Long capiqId = 4004341L;

		RatingArticlesData articles = new RatingArticlesData();

		List<RatingArticlesPublicPvt> ratingArticles = new ArrayList<RatingArticlesPublicPvt>();
		RatingArticlesPublicPvt articles1 = new RatingArticlesPublicPvt();
		articles1.setArticleId("092010fc97f4ef7f");
		articles1.setEntityId("100751");
		articles1.setFullName("S&P Global Ratings");
		articles1.setArticleTitle("TEST DDY678");
		articles1.setArticleType("Research Update");
		articles1.setArticleTypeId(14L);
		articles1.setArticleDate(Timestamp.valueOf(LocalDateTime.parse("2024-03-04T10:00")));
		ratingArticles.add(articles1);

		articles.setRatingArticles(ratingArticles);
		articles.setMessage("success");

		Mockito.when(ratingArticlesPublicPvtService.getDashboardRatingArticles(entityId, countryCode, capiqId, "authHeader")).thenReturn(articles);

		MockHttpServletRequestBuilder builder = MockMvcRequestBuilders.get(
				"/ratingsData/api/getDashboardRatingArticles?entityId=100751&countryCode=US&capiq=4004341").header("Authorization", "authHeader");

		mockMvc.perform(builder).andExpect(status().isOk());
	}

	@Test
	public void getRatingArticlesSuccessTest5() throws Exception {
		List<Long> articletypeIds = new ArrayList<Long>();
		articletypeIds.add(1L);
		articletypeIds.add(3L);

		RatingArticlesDetailSearch ratingArticlesSearch = new RatingArticlesDetailSearch();
		ratingArticlesSearch.setEntityId(Arrays.asList(100751L));
		ratingArticlesSearch.setArticleTypeIds(articletypeIds);
		ratingArticlesSearch.setCount(500);
		ratingArticlesSearch.setCountryCode("CN");

		String requestBody = "{\"entityId\":[100751],\"articleTypeIds\":[1,3],\"count\":500,\"countryCode\":\"CN\"}";

		List<RatingArticles> ratingArticles = new ArrayList<RatingArticles>();

		RatingArticles articles1 = new RatingArticles();
		articles1.setArticleId(2975957L);
		articles1.setEntityId(100751L);
		articles1.setFullName("Simon Redmond");
		articles1.setArticleTitle("Report Explains How Commodity Price Assumptions Are Formulated And Used; Oil And Gas Price Deck Revised");
		articles1.setArticleType("News");
		articles1.setArticleTypeId(10L);
		articles1.setAbstract_data("shshha");
		articles1.setArticleDate(Timestamp.valueOf(LocalDateTime.parse("2023-04-20T14:11:36")));
		ratingArticles.add(articles1);

		Mockito.when(ratingArticlesService.getRatingArticles(ratingArticlesSearch)).thenAnswer(x -> ratingArticles);

		MockHttpServletRequestBuilder builder = MockMvcRequestBuilders.post("/ratingsData/api/getRatingArticles")
				.contentType(MediaType.APPLICATION_JSON)
				.content(requestBody)
				.header("Authorization", "");
		mockMvc.perform(builder).andExpect(status().isOk()).andExpect(content().contentType(MediaType.APPLICATION_JSON))
				.andExpect(jsonPath("$.status").value("SUCCESS"))
				.andExpect(jsonPath("$.elements.length()", is(1)));
	}

	@Test
	public void getRatingCriteriaArticlesFailureTest1() throws Exception {
		Mockito.when(ratingCriteriaArticlesService.getRatingCriteriaArticles(eq(6330608L), eq(43379480L), eq(false), any()))
				.thenThrow(new Exception("NullPointer Exception"));

		MockHttpServletRequestBuilder builder = MockMvcRequestBuilders.get(
						"/ratingsData/api/getRatingCriteriaArticles?ratingDetailId=43379480&capiq=6330608&confidential=false")
				.header("Authorization", "");
		mockMvc.perform(builder).andExpect(status().isOk()).andExpect(content().contentType(MediaType.APPLICATION_JSON))
				.andExpect(jsonPath("$.status").value("FAILURE"));
	}

	@Test
	public void getRatingCriteriaArticlesFailureTest2() throws Exception {
		Mockito.when(ratingCriteriaArticlesService.getRatingCriteriaArticles(eq(6330608L), eq(43379480L), eq(true), any()))
				.thenThrow(new Exception("NullPointer Exception"));

		MockHttpServletRequestBuilder builder = MockMvcRequestBuilders.get(
						"/ratingsData/api/getRatingCriteriaArticles?ratingDetailId=43379480&capiq=6330608&confidential=true")
				.header("Authorization", "");
		mockMvc.perform(builder).andExpect(status().isOk()).andExpect(content().contentType(MediaType.APPLICATION_JSON))
				.andExpect(jsonPath("$.status").value("FAILURE"));
	}

	@Test
	public void getRatingArticleTypesFailureTest3() throws Exception {
		List<Long> articletypeIds = new ArrayList<Long>();
		articletypeIds.add(1L);
		articletypeIds.add(3L);

		Mockito.when(ratingArticlesService.getRatingArticlesTypes(articletypeIds))
				.thenThrow(new Exception("NullPointer Exception"));

		MockHttpServletRequestBuilder builder = MockMvcRequestBuilders.get(
						"/ratingsData/api/getRatingArticleTypes?articleTypeIds=1,3")
				.header("Authorization", "");
		mockMvc.perform(builder).andExpect(status().isOk()).andExpect(content().contentType(MediaType.APPLICATION_JSON))
				.andExpect(jsonPath("$.status").value("FAILURE"));
	}

	@Test
	public void getRatingArticlesFailureTest4() throws Exception {
		List<Long> articletypeIds = new ArrayList<Long>();
		articletypeIds.add(1L);
		articletypeIds.add(3L);

		RatingArticlesDetailSearch ratingArticlesSearch = new RatingArticlesDetailSearch();
		ratingArticlesSearch.setEntityId(Arrays.asList(100751L));
		ratingArticlesSearch.setArticleTypeIds(articletypeIds);
		ratingArticlesSearch.setCount(500);
		ratingArticlesSearch.setCountryCode("US");

		String requestBody = "{\"entityId\":[100751],\"articleTypeIds\":[1,3],\"count\":500,\"countryCode\":\"US\"}";

		Mockito.when(ratingArticlesService.getRatingArticles(ratingArticlesSearch))
				.thenThrow(new Exception("NullPointer Exception"));

		MockHttpServletRequestBuilder builder = MockMvcRequestBuilders.post("/ratingsData/api/getRatingArticles")
				.contentType(MediaType.APPLICATION_JSON)
				.content(requestBody)
				.header("Authorization", "");
		mockMvc.perform(builder).andExpect(status().isOk()).andExpect(content().contentType(MediaType.APPLICATION_JSON))
				.andExpect(jsonPath("$.status").value("FAILURE"));
	}

	@Test
	public void getRatingArticlesFailureTest5() throws Exception {
		List<Long> articletypeIds = new ArrayList<Long>();
		articletypeIds.add(1L);
		articletypeIds.add(3L);

		RatingArticlesDetailSearch ratingArticlesSearch = new RatingArticlesDetailSearch();
		ratingArticlesSearch.setEntityId(Arrays.asList(100751L));
		ratingArticlesSearch.setArticleTypeIds(articletypeIds);
		ratingArticlesSearch.setCount(500);
		ratingArticlesSearch.setCountryCode("CN");

		String requestBody = "{\"entityId\":[100751],\"articleTypeIds\":[1,3],\"count\":500,\"countryCode\":\"CN\"}";

		Mockito.when(ratingArticlesService.getRatingArticles(ratingArticlesSearch))
				.thenThrow(new Exception("NullPointer Exception"));

		MockHttpServletRequestBuilder builder = MockMvcRequestBuilders.post("/ratingsData/api/getRatingArticles")
				.contentType(MediaType.APPLICATION_JSON)
				.content(requestBody)
				.header("Authorization", "");
		mockMvc.perform(builder).andExpect(status().isOk()).andExpect(content().contentType(MediaType.APPLICATION_JSON))
				.andExpect(jsonPath("$.status").value("FAILURE"));
	}

	@Test
	public void getRatingArticlesFailureTest6() throws Exception {
		String requestBody = "{\"entityId\":100751,\"articleTypeIds\":[1,3],\"startArticleDate\":\"2000-01-01T00:00:00\",\"endArticleDate\":\"2023-08-02 23:59:59\",\"count\":500,\"countryCode\":\"US\"}";

		MockHttpServletRequestBuilder builder = MockMvcRequestBuilders.post("/ratingsData/api/getRatingArticles")
				.contentType(MediaType.APPLICATION_JSON)
				.content(requestBody)
				.header("Authorization", "");
		mockMvc.perform(builder).andExpect(status().is4xxClientError());
	}

	@Test
	public void getRatingArticlesFailureTest7() throws Exception {
		String requestBody = "{\"entityId\":100751,\"articleTypeIds\":[1,3],\"startArticleDate\":\"2000-01-01T00:00:00\",\"endArticleDate\":\"2023-08-02 23:59:59\",\"count\":500,\"countryCode\":\"CN\"}";

		MockHttpServletRequestBuilder builder = MockMvcRequestBuilders.post("/ratingsData/api/getRatingArticles")
				.contentType(MediaType.APPLICATION_JSON)
				.content(requestBody)
				.header("Authorization", "");
		mockMvc.perform(builder).andExpect(status().is4xxClientError());
	}


	@Test
	public void getRatingArticlesSSPSuccessTest() throws Exception {
		List<Long> articletypeIds = new ArrayList<Long>();
		articletypeIds.add(1L);
		articletypeIds.add(3L);
		articletypeIds.add(7L);
		articletypeIds.add(10L);
		articletypeIds.add(11L);
		articletypeIds.add(13L);
		articletypeIds.add(14L);
		articletypeIds.add(15L);

		List<Long> entityIds = new ArrayList<Long>();
		entityIds.add(112354L);
		entityIds.add(111779L);

		RatingArticlesSearchSSP ratingArticlesSearch = new RatingArticlesSearchSSP();
		ratingArticlesSearch.setEntityIds(entityIds);
		ratingArticlesSearch.setArticleTypeIds(articletypeIds);
		ratingArticlesSearch.setCount(5);
		ratingArticlesSearch.setPageNumber(0);
		ratingArticlesSearch.setStartArticleDate(
				Timestamp.valueOf(LocalDateTime.parse("2000-01-01 00:00:00", CUSTOM_DATE_TIME_FORMATTER)));
		ratingArticlesSearch.setEndArticleDate(
				Timestamp.valueOf(LocalDateTime.parse("2023-08-02 23:59:59", CUSTOM_DATE_TIME_FORMATTER)));
		ratingArticlesSearch.setCountryCode("US");

		String requestBody = "{\"entityIds\":[112354,111779],\"articleTypeIds\":[1,3,7,10,11,13,14,15],\"startArticleDate\":\"2000-01-01 00:00:00\",\"endArticleDate\":\"2023-08-02 23:59:59\",\"count\":500,\"countryCode\":\"US\",\"pageNumber\":0, \"sortBy\":\"title\",\"sortOrder\":\"ASC\",\"searchText\": \"\"}";

		List<RatingArticlesPeer> ratingArticles = new ArrayList<RatingArticlesPeer>();

		RatingArticlesPeer articles1 = new RatingArticlesPeer();
		articles1.setArticleId(550558L);
		articles1.setEntityId(111779L);
		articles1.setFullName("Moritz Kraemer");
		articles1.setArticleTitle("Sovereign Risk Indicators: Medians By Rating Category\\\" Now Available, To Be Published Monthly");
		articles1.setArticleType("News");
		articles1.setEntityName("TEST LNO550");
		articles1.setArticleTypeId(10L);
		articles1.setArticleDate(Timestamp.valueOf(LocalDateTime.parse("2006-12-11T09:47:57")));
		ratingArticles.add(articles1);

		Mockito.when(ratingArticlesService.getRatingArticlesSSP(ratingArticlesSearch)).thenAnswer(x -> ratingArticles);

		MockHttpServletRequestBuilder builder = MockMvcRequestBuilders.post("/ratingsData/api/getRatingArticlesSSP")
				.contentType(MediaType.APPLICATION_JSON)
				.content(requestBody)
				.header("Authorization", "");
		mockMvc.perform(builder).andExpect(status().isOk()).andExpect(content().contentType(MediaType.APPLICATION_JSON))
				.andExpect(jsonPath("$.status").value("SUCCESS"))
				.andExpect(jsonPath("$.elements.length()", is(0)));
	}

	@Test
	void test_getPeersRatingArticles() throws Exception {
		String requestBody = "{\"entityIds\":[112354,111779],\"articleTypeIds\":[1,3,7,10,11,13,14,15],\"startArticleDate\":\"2000-01-01 00:00:00\",\"endArticleDate\":\"2023-08-02 23:59:59\",\"count\":500,\"countryCode\":\"US\",\"pageNumber\":0, \"sortBy\":\"title\",\"sortOrder\":\"ASC\",\"searchText\": \"\"}";

		Mockito.when(ratingArticlesPublicPvtService.getPeersRatingArticles(any(),any(),any(),any())).thenThrow(Exception.class);
		MockHttpServletRequestBuilder builder = MockMvcRequestBuilders.post(
				"/ratingsData/api/getPeersRatingArticles/100751/4004341").contentType(MediaType.APPLICATION_JSON)
				.content(requestBody)
				.header("Authorization", "authHeader");

		mockMvc.perform(builder).andExpect(status().is4xxClientError());

	}
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\test\java\com\spglobal\ratings\ratingsdata\controller\RatingHistoryLastTenYrsDaoTest.java

package com.spglobal.ratings.ratingsdata.controller;

import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.test.context.junit.jupiter.SpringExtension;

import com.spglobal.ratings.ratingsdata.dao.RatingHistoryLastTenYrsDao;
import com.spglobal.ratings.ratingsdata.entity.RatingHistoryLastTenYrs;
import com.spglobal.ratings.ratingsdata.entity.RatingHistoryLastTenYrsPublic;
import com.spglobal.ratings.ratingsdata.repository.RatingHistoryLastTenYrsPubRepository;
import com.spglobal.ratings.ratingsdata.repository.RatingHistoryLastTenYrsRepository;
import com.spglobal.ratings.ratingsdata.service.UserEntitlementCheckImpl;
import com.spglobal.ratings.ratingsdata.util.RatingsDataUtil;

@ExtendWith({SpringExtension.class, MockitoExtension.class})
public class RatingHistoryLastTenYrsDaoTest {
	
	@InjectMocks
	RatingHistoryLastTenYrsDao ratingHistoryLastTenYrsDao;
	
	@Mock
	RatingsDataUtil ratingsUtil;
	
	@Mock
	RatingHistoryLastTenYrsPubRepository ratingHistoryLastTenYrsPubRepo;
	
	@Mock
	RatingHistoryLastTenYrsRepository ratingHistoryLastTenYrsRepo;
	
	@Mock
	UserEntitlementCheckImpl userEntitlementCheck;

	List<RatingHistoryLastTenYrsPublic> ratingHistoryLastTenYrsPubList = null;
	List<RatingHistoryLastTenYrs> ratingHistoryLastTenYrsList = null;
	
	RatingHistoryLastTenYrsPublic ratingHistoryLastTenYrsPub = null;
	RatingHistoryLastTenYrs ratingHistoryLastTenYrs = null; 
	
	@BeforeEach
	public void init() throws Exception {
		
		MockitoAnnotations.initMocks(this);
		
		ratingHistoryLastTenYrsPubList = new ArrayList();
		
		ratingHistoryLastTenYrsPub = new RatingHistoryLastTenYrsPublic();
		ratingHistoryLastTenYrsPub.setEntityId(Long.valueOf(111719));
		ratingHistoryLastTenYrsPub.setDebtTypeDesc("Issuer Credit Rating");
		ratingHistoryLastTenYrsPub.setRatingTypeDesc("Foreign Currency LT");
		ratingHistoryLastTenYrsPub.setCurrentRatingSymbol("AAA-");
		
		ratingHistoryLastTenYrsPubList.add(ratingHistoryLastTenYrsPub);
		
		ratingHistoryLastTenYrsList = new ArrayList();
		
		ratingHistoryLastTenYrs = new RatingHistoryLastTenYrs();
		ratingHistoryLastTenYrs.setEntityId(Long.valueOf(111719));
		ratingHistoryLastTenYrs.setDebtTypeDesc("Issuer Credit Rating");
		ratingHistoryLastTenYrs.setRatingTypeDesc("Foreign Currency LT");
		ratingHistoryLastTenYrs.setCurrentRatingSymbol("AAA-");
		
		ratingHistoryLastTenYrsList.add(ratingHistoryLastTenYrs);
		
	}
	
	@Test
	public void getRatingHistLastTenYrsPubOrPrivTest(){
		Long entityId = 112354L;
		when(ratingHistoryLastTenYrsRepo.findByEntityId(entityId)).thenReturn(ratingHistoryLastTenYrsList);
		List<RatingHistoryLastTenYrs> list = ratingHistoryLastTenYrsDao.getRatingHistLastTenYrsPubOrPriv(entityId);
		assertNotNull(list);
		
	}
	
	@Test
	public void getRatingHistLastTenYrsPublicTest() {
		List<Long> entityList = new ArrayList<Long>(2);
		entityList.add(1111719L);
		entityList.add(112354L);
		when(ratingHistoryLastTenYrsPubRepo.findByEntityId(entityList)).thenReturn(ratingHistoryLastTenYrsPubList);
		List<RatingHistoryLastTenYrsPublic> list = ratingHistoryLastTenYrsDao.getRatingHistLastTenYrsPublic(entityList);
		assertNotNull(list);
	}
	
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\test\java\com\spglobal\ratings\ratingsdata\controller\ScoresControllerTest.java

package com.spglobal.ratings.ratingsdata.controller;

import static org.mockito.ArgumentMatchers.any;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.MediaType;
import org.springframework.test.context.junit.jupiter.SpringExtension;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.ResultActions;
import org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;
import org.springframework.test.web.servlet.result.MockMvcResultMatchers;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;
import org.springframework.util.LinkedMultiValueMap;
import org.springframework.util.MultiValueMap;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectWriter;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.spglobal.ratings.ratingsdata.entity.DefinitionsConfig;
import com.spglobal.ratings.ratingsdata.model.EntitiesPayload;
import com.spglobal.ratings.ratingsdata.model.StateAndProvince;
import com.spglobal.ratings.ratingsdata.model.UspfFilterData;
import com.spglobal.ratings.ratingsdata.model.UspfFilterDropdownData;
import com.spglobal.ratings.ratingsdata.service.DefinitionsConfigService;
import com.spglobal.ratings.ratingsdata.service.ScoresAndModifiersPublicService;

@ExtendWith({SpringExtension.class, MockitoExtension.class})
@WebMvcTest(value = ScoresController.class)
public class ScoresControllerTest {
    @Autowired
    private MockMvc mockMvc;
    @InjectMocks
    private ScoresController scoresController;
    @MockBean
    private DefinitionsConfigService definitionsConfigService ;
    @MockBean
    private ScoresAndModifiersPublicService  scoresAndModifiersPublicService;

    //@Test
    public void getDefinitionsFailureTest() throws Exception {
        Mockito.when(definitionsConfigService.getDefinitionDetails()).thenThrow(new RuntimeException("NullPointer Exception"));
        MockHttpServletRequestBuilder builder = MockMvcRequestBuilders.get("/ratingsData/api/scoresModifiersDefinitions");
        mockMvc.perform(builder)
                .andExpect(status().isOk())
                .andExpect(content().contentType(MediaType.APPLICATION_JSON))
                .andExpect(jsonPath("$.status").value("FAILURE"));
    }

    //@Test
    public void getDefinitionsSuccessTest() throws Exception {

        DefinitionsConfig definitions= new DefinitionsConfig();
        definitions.setUiConfigId(21);
        definitions.setAnalyticCaseType("IST");
        definitions.setDataElementCode("SP_NR_BRP_ANCH");
        definitions.setDataElementType("SCORES & MODIFIERS");
        definitions.setDataElementGroup("Scores");
        definitions.setDisplayName("Business Risk Profile");
        definitions.setDefinition("Test Definition The business risk profile (BRP) is based on S&P Global Ratings' analysis of an insurer's competitive position, modified by the IICRA.");
        definitions.setSortOrder(1);
        definitions.setHighlightFlag("Y");
        definitions.setCreatedUser("R360_APPDATA");
        definitions.setCreatedDatetime(null);
        definitions.setUpdatedUser("R360_APPDATA");
        definitions.setUpdatedDatetime(null);
        List<DefinitionsConfig> definitionsConfig = new ArrayList<DefinitionsConfig>();
        definitionsConfig.add(definitions);

        Mockito.when(definitionsConfigService.getDefinitionDetails()).thenReturn(definitionsConfig);

        MockHttpServletRequestBuilder builder = MockMvcRequestBuilders.get("/ratingsData/api/scoresModifiersDefinitions");
        mockMvc.perform(builder)
                .andExpect(status().isOk())
                .andExpect(content().contentType(MediaType.APPLICATION_JSON))
                .andExpect(jsonPath("$.status").value("SUCCESS"));
    }

    //@Test
    public void getDefinitionsExceptionTest() throws Exception {
        Mockito.when(definitionsConfigService.getDefinitionDetails()).thenThrow(new IllegalArgumentException());

        MockHttpServletRequestBuilder builder = MockMvcRequestBuilders.get("/ratingsData/api/scoresModifiersDefinitions");
        mockMvc.perform(builder).andExpect(status().isOk());
    }
    
    @Test
	void testGetPublicPeerScoresAndModifiers() throws Exception {
		String response = "{ \"keyInstns\" : [\"112354\", \"100004\",\"100079\",\"100227\",\"100094\",\"100339\"] }";
		MockHttpServletRequestBuilder requestBuilder = MockMvcRequestBuilders.post("/ratingsData/api/peerScoresModifiers");
		ResultActions actualPerformResult = MockMvcBuilders.standaloneSetup(this.scoresController).build().perform(
				requestBuilder.content(response)
                .contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON));
		actualPerformResult.andExpect(MockMvcResultMatchers.status().isOk());	
	}

    @Test
    void getPublicPeerScoresAndModifiersSuccessTestForNullEntityIds() throws Exception {
        String response = "{\"keyInstns\" : []}";
        MockHttpServletRequestBuilder requestBuilder = MockMvcRequestBuilders.post("/ratingsData/api/peerScoresModifiers");
        ResultActions actualPerformResult = MockMvcBuilders.standaloneSetup(this.scoresController).build().perform(
                requestBuilder.content(response)
                        .contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON));
        actualPerformResult.andExpect(MockMvcResultMatchers.status().isOk());

    }
    
    @Test
    void getPublicPeerScoresAndModifiersSuccessTestForNullEntityIds1() throws Exception {
        String response = "{\"keyInstns\" : null}";
        MockHttpServletRequestBuilder requestBuilder = MockMvcRequestBuilders.post("/ratingsData/api/peerScoresModifiers");
        ResultActions actualPerformResult = MockMvcBuilders.standaloneSetup(this.scoresController).build().perform(
                requestBuilder.content(response)
                        .contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON));
        actualPerformResult.andExpect(MockMvcResultMatchers.status().isOk());
    }

    @Test
    void getPublicPeerScoresAndModifiersSuccessTestForNullEntityIdsError() throws Exception {
        EntitiesPayload s = new EntitiesPayload();
        s.setPcFlag(0);
        s.setSubSector("CORP");
        s.setHomeEntity("100369");
        String response = "{ \"keyInstns\" : [\"112354\", \"100004\",\"100079\",\"100227\",\"100094\",\"100339\"] ,\"pcFlag\": \"0\"}";
    	Mockito.when(scoresAndModifiersPublicService.getPeerScoresAndModifiers(s)).thenThrow(new RuntimeException("NullPointer Exception"));
        MockHttpServletRequestBuilder requestBuilder = MockMvcRequestBuilders.post("/ratingsData/api/peerScoresModifiers");
        ResultActions actualPerformResult = MockMvcBuilders.standaloneSetup(this.scoresController).build().perform(
                requestBuilder.content(response)
                        .contentType(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON));
        actualPerformResult.andExpect(MockMvcResultMatchers.status().isOk());
    }

    @Test
    void testGetDefinitionsError() throws Exception {
    	Mockito.when(definitionsConfigService.getDefinitionDetails()).thenThrow(new RuntimeException("NullPointer Exception"));
        MockHttpServletRequestBuilder requestBuilder = MockMvcRequestBuilders.get("/ratingsData/api/scoresModifiersDefinitions");
        ResultActions actualPerformResult = MockMvcBuilders.standaloneSetup(this.scoresController).build().perform(requestBuilder);
        actualPerformResult.andExpect(MockMvcResultMatchers.status().isOk());
    }

    @Test
    void testGetDefinitions() throws Exception {
    	Mockito.when(definitionsConfigService.getDefinitionDetails()).thenReturn(Collections.emptyList());
        MockHttpServletRequestBuilder requestBuilder = MockMvcRequestBuilders.get("/ratingsData/api/scoresModifiersDefinitions");
        ResultActions actualPerformResult = MockMvcBuilders.standaloneSetup(this.scoresController).build().perform(requestBuilder);
        actualPerformResult.andExpect(MockMvcResultMatchers.status().isOk());
    }

    @Test
    public void getPublicPeerScoresAndModifiersFailureTest() throws Exception {
        List<String> entites= Arrays.asList();

        EntitiesPayload s = new EntitiesPayload();
        s.setKeyInstns(entites);
        s.setPcFlag(0);
        s.setSubSector("CORP");

        Mockito.when(scoresAndModifiersPublicService.getPeerScoresAndModifiers(s)).thenThrow(new RuntimeException("NullPointer Exception"));
        MockHttpServletRequestBuilder builder = MockMvcRequestBuilders.post("/ratingsData/api/peerScoresModifiers");
        mockMvc.perform(builder)
                .andExpect(status().is4xxClientError());

    }
    
    @Test
    void getPeerSuppliersPortfolioContentsWhenReturnData() throws Exception {
    	MultiValueMap<String, String> params = new LinkedMultiValueMap<>();
  	  params.add("keyInstnIds", "123456");
    	Mockito.when(scoresAndModifiersPublicService.getPeerSuppliersPortfolioContents(any(),any(),any())).thenReturn(Collections.emptyList());
        MockHttpServletRequestBuilder requestBuilder = MockMvcRequestBuilders.get("/ratingsData/api/peerSuppliersPortfolioContents").params(params);
        ResultActions actualPerformResult = MockMvcBuilders.standaloneSetup(this.scoresController).build().perform(requestBuilder);
        actualPerformResult.andExpect(MockMvcResultMatchers.status().isOk());
    }

    @Test
    void getPeerSuppliersPortfolioContents_emptyParams() throws Exception {
        Mockito.when(scoresAndModifiersPublicService.getPeerSuppliersPortfolioContents(any(),any(),any())).thenReturn(Collections.emptyList());
        MockHttpServletRequestBuilder requestBuilder = MockMvcRequestBuilders.get("/ratingsData/api/peerSuppliersPortfolioContents");
        ResultActions actualPerformResult = MockMvcBuilders.standaloneSetup(this.scoresController).build().perform(requestBuilder);
        actualPerformResult.andExpect(MockMvcResultMatchers.status().isOk());
    }
    
    @Test
    void getPeerPortfolioContentsDataWhenReturnData() throws Exception {
    	MultiValueMap<String, String> params = new LinkedMultiValueMap<>();
    	params.add("asIds", "22685,29229,3629");
    	List<Long> asIds = new ArrayList<>();
    	asIds.add(22685L);
    	asIds.add(29229L);
    	Mockito.when(scoresAndModifiersPublicService.getUspfPeersPortfolioData(asIds)).thenReturn(Collections.emptyList());
    	MockHttpServletRequestBuilder requestBuilder = MockMvcRequestBuilders.get("/ratingsData/api/getUspfPeersPortfolioData").params(params);
    	ResultActions actualPerformResult = MockMvcBuilders.standaloneSetup(this.scoresController).build().perform(requestBuilder);
    	actualPerformResult.andExpect(MockMvcResultMatchers.status().isOk());
    }
    @Test
    void getPeerPortfolioContentsDataWhenReturnDataWhenThrowsException() throws Exception {
    	MultiValueMap<String, String> params = new LinkedMultiValueMap<>();
    	params.add("asIds", "22685,29229,3629");
    	List<Long> asIds = new ArrayList<>();
    	asIds.add(22685L);
    	asIds.add(29229L);
    	Mockito.when(scoresAndModifiersPublicService.getUspfPeersPortfolioData(asIds)).thenThrow(new RuntimeException("NullPointer Exception"));
    	MockHttpServletRequestBuilder requestBuilder = MockMvcRequestBuilders.get("/ratingsData/api/getUspfPeersPortfolioData").params(params);
    	ResultActions actualPerformResult = MockMvcBuilders.standaloneSetup(this.scoresController).build().perform(requestBuilder);
    	actualPerformResult.andExpect(MockMvcResultMatchers.status().isOk());
    }
    @Test
    void getStateAndProvinceDataWhenReturnData() throws Exception {
    	Mockito.when(scoresAndModifiersPublicService.getStateAndProvinceData()).thenReturn(new StateAndProvince());
    	MockHttpServletRequestBuilder requestBuilder = MockMvcRequestBuilders.get("/ratingsData/api/getStateAndProvinceData");
    	ResultActions actualPerformResult = MockMvcBuilders.standaloneSetup(this.scoresController).build().perform(requestBuilder);
    	actualPerformResult.andExpect(MockMvcResultMatchers.status().isOk());
    }
    @Test
    void getStateAndProvinceDataWhenReturnDataWhenThrowsException() throws Exception {
    	Mockito.when(scoresAndModifiersPublicService.getStateAndProvinceData()).thenThrow(new RuntimeException("NullPointer Exception"));
    	MockHttpServletRequestBuilder requestBuilder = MockMvcRequestBuilders.get("/ratingsData/api/getStateAndProvinceData");
    	ResultActions actualPerformResult = MockMvcBuilders.standaloneSetup(this.scoresController).build().perform(requestBuilder);
    	actualPerformResult.andExpect(MockMvcResultMatchers.status().isOk());
    }
    
    @Test
    void getPeerSuppliersPortfolioContentsWhenThrowsException() throws Exception {
    	MultiValueMap<String, String> params = new LinkedMultiValueMap<>();
  	    params.add("keyInstnIds", "123456");
    	Mockito.when(scoresAndModifiersPublicService.getPeerSuppliersPortfolioContents(any(),any(),any())).thenThrow(new RuntimeException("NullPointer Exception"));
        MockHttpServletRequestBuilder requestBuilder = MockMvcRequestBuilders.get("/ratingsData/api/peerSuppliersPortfolioContents").params(params);
        ResultActions actualPerformResult = MockMvcBuilders.standaloneSetup(this.scoresController).build().perform(requestBuilder);
        actualPerformResult.andExpect(MockMvcResultMatchers.status().isOk());
    }
    
	@Test
	void getUspfPeerSuppliersPortfolioContentsWhenReturnData() throws Exception {
		MultiValueMap<String, String> params = new LinkedMultiValueMap<>();
		params.add("keyInstnIds", "123456");
		UspfFilterData uspfFilterData = new UspfFilterData();
		uspfFilterData.setSector("POOLED");
		uspfFilterData.setSubSector("Transporation");
		uspfFilterData.setGeography(Arrays.asList("AZ", "AL"));
		uspfFilterData.setRatingType("STDLONG");
		uspfFilterData.setRatingScale(Arrays.asList("A+", "A--"));
		Mockito.when(scoresAndModifiersPublicService.getUspfPeerSuppliersPortfolioContents(uspfFilterData))
				.thenReturn(Collections.emptyList());
		ObjectMapper mapper = new ObjectMapper();
		mapper.configure(SerializationFeature.WRAP_ROOT_VALUE, false);
		ObjectWriter ow = mapper.writer().withDefaultPrettyPrinter();
		String requestJson = ow.writeValueAsString(uspfFilterData);
		MockHttpServletRequestBuilder requestBuilder = MockMvcRequestBuilders
				.post("/ratingsData/api/uspfPeerPortfolioContents").content(requestJson).accept(MediaType.APPLICATION_JSON)
				.contentType(MediaType.APPLICATION_JSON);
		ResultActions actualPerformResult = MockMvcBuilders.standaloneSetup(this.scoresController).build()
				.perform(requestBuilder);
		actualPerformResult.andExpect(MockMvcResultMatchers.status().isOk());
	}
    
	@Test
	void getUspfPeerSuppliersPortfolioContentsWhenThrowsException() throws Exception {
		MultiValueMap<String, String> params = new LinkedMultiValueMap<>();
		params.add("keyInstnIds", "123456");
		UspfFilterData uspfFilterData = new UspfFilterData();
		uspfFilterData.setSector("POOLED");
		uspfFilterData.setSubSector("Transporation");
		uspfFilterData.setGeography(Arrays.asList("AZ", "AL"));
		uspfFilterData.setRatingType("STDLONG");
		uspfFilterData.setRatingScale(Arrays.asList("A+", "A--"));
		Mockito.when(scoresAndModifiersPublicService.getUspfPeerSuppliersPortfolioContents(uspfFilterData))
				.thenThrow(new RuntimeException("NullPointer Exception"));
		ObjectMapper mapper = new ObjectMapper();
		mapper.configure(SerializationFeature.WRAP_ROOT_VALUE, false);
		ObjectWriter ow = mapper.writer().withDefaultPrettyPrinter();
		String requestJson = ow.writeValueAsString(uspfFilterData);
		MockHttpServletRequestBuilder requestBuilder = MockMvcRequestBuilders
				.post("/ratingsData/api/uspfPeerPortfolioContents").content(requestJson)
				.accept(MediaType.APPLICATION_JSON).contentType(MediaType.APPLICATION_JSON);
		ResultActions actualPerformResult = MockMvcBuilders.standaloneSetup(this.scoresController).build()
				.perform(requestBuilder);
		actualPerformResult.andExpect(MockMvcResultMatchers.status().isOk());
	}
	
	@Test
	void getuspfPeersFiltersDataWhenReturnData() throws Exception {
		UspfFilterDropdownData uspfFilterDropdownData = new UspfFilterDropdownData();
		Mockito.when(scoresAndModifiersPublicService.getuspfPeersFiltersData()).thenReturn(uspfFilterDropdownData);
		MockHttpServletRequestBuilder requestBuilder = MockMvcRequestBuilders
				.get("/ratingsData/api/uspfPeersFiltersData");
		ResultActions actualPerformResult = MockMvcBuilders.standaloneSetup(this.scoresController).build()
				.perform(requestBuilder);
		actualPerformResult.andExpect(MockMvcResultMatchers.status().isOk());
	}

	@Test
	void getuspfPeersFiltersDataWhenThrowsException() throws Exception {
		Mockito.when(scoresAndModifiersPublicService.getuspfPeersFiltersData())
				.thenThrow(new RuntimeException("NullPointer Exception"));
		MockHttpServletRequestBuilder requestBuilder = MockMvcRequestBuilders
				.get("/ratingsData/api/uspfPeersFiltersData");
		ResultActions actualPerformResult = MockMvcBuilders.standaloneSetup(this.scoresController).build()
				.perform(requestBuilder);
		actualPerformResult.andExpect(MockMvcResultMatchers.status().isOk());
	}

}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\test\java\com\spglobal\ratings\ratingsdata\controller\SectorResearchControllerTest.java

package com.spglobal.ratings.ratingsdata.controller;

import com.spglobal.ratings.ratingsdata.service.SectorResearchService;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.test.context.junit.jupiter.SpringExtension;
import org.springframework.test.web.servlet.ResultActions;
import org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;
import org.springframework.test.web.servlet.result.MockMvcResultMatchers;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;

@ExtendWith({SpringExtension.class, MockitoExtension.class})
@WebMvcTest(value = SectorResearchController.class)
public class SectorResearchControllerTest {

    @InjectMocks
    SectorResearchController sectorResearchController;

    @MockBean
    SectorResearchService sectorResearchService;

    @Test
    public void getDashboardSectorResearch() throws Exception {
        MockHttpServletRequestBuilder requestBuilder = MockMvcRequestBuilders.get("/ratingsData/api/dashboard/sectorResearch")
                .param("subSectorCode", "CORP");
        ResultActions actualPerformResult = MockMvcBuilders.standaloneSetup(this.sectorResearchController).build()
                .perform(requestBuilder);
        actualPerformResult.andExpect(MockMvcResultMatchers.status().isOk());
    }

    @Test
    public void getDashboardSectorResearch_exception() throws Exception {
        Mockito.when(sectorResearchService.getDashboardSectorResearchArticles(Mockito.any(), Mockito.any())).thenThrow(new RuntimeException("NullPointer Exception"));
        MockHttpServletRequestBuilder requestBuilder = MockMvcRequestBuilders.get("/ratingsData/api/dashboard/sectorResearch")
                .param("subSectorCode", "CORP");
        ResultActions actualPerformResult = MockMvcBuilders.standaloneSetup(this.sectorResearchController).build()
                .perform(requestBuilder);
        actualPerformResult.andExpect(MockMvcResultMatchers.status().isInternalServerError());
    }
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\test\java\com\spglobal\ratings\ratingsdata\controller\SovereignResearchControllerTest.java

package com.spglobal.ratings.ratingsdata.controller;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.test.context.junit.jupiter.SpringExtension;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.ResultActions;
import org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;
import org.springframework.test.web.servlet.result.MockMvcResultMatchers;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;
import org.springframework.util.LinkedMultiValueMap;
import org.springframework.util.MultiValueMap;

import com.spglobal.ratings.ratingsdata.entity.SovereignBICRAScores;
import com.spglobal.ratings.ratingsdata.entity.SovereignCountryEntity;
import com.spglobal.ratings.ratingsdata.entity.SovereignCountrySummary;
import com.spglobal.ratings.ratingsdata.entity.SovereignDashboard;
import com.spglobal.ratings.ratingsdata.entity.SovereignFSIICRA;
import com.spglobal.ratings.ratingsdata.entity.SovereignFSMajorFactors;
import com.spglobal.ratings.ratingsdata.entity.SovereignPeerBICRAScores;
import com.spglobal.ratings.ratingsdata.entity.SovereignRiskEntity;
import com.spglobal.ratings.ratingsdata.entity.SovereignTopFiveFinInst;
import com.spglobal.ratings.ratingsdata.service.SovereignResearchService;

@ExtendWith({ SpringExtension.class, MockitoExtension.class })
@WebMvcTest(value = SovereignResearchController.class)
public class SovereignResearchControllerTest {

	@Autowired
	private MockMvc mockMvc;

	@InjectMocks
	SovereignResearchController sovereignController;

	@MockBean
	SovereignResearchService sovereignService;

	private MultiValueMap<String, String> queryParams = new LinkedMultiValueMap<>();

	@BeforeEach
	public void init() {
		mockMvc = MockMvcBuilders.standaloneSetup(sovereignController).build();
		queryParams.add("country", "US");
	}

	@Test
	public void test_sovereign_summary() {

		SovereignCountrySummary summary = new SovereignCountrySummary();
		summary.setCountryCode("US");
		summary.setDisplayOrder(0);
		summary.setSummaryText("TEST TEST");
		summary.setTitle("Regional Spotlight");
		List<SovereignCountrySummary> summaryList = new ArrayList<SovereignCountrySummary>();
		summaryList.add(summary);

		try {
			Mockito.when(sovereignService.getSovereignCountrySummary("US")).thenAnswer(x -> summaryList);
			MockHttpServletRequestBuilder requestBuilder = MockMvcRequestBuilders
					.get("/ratingsData/api/sovereign/summary").queryParams(queryParams);
			ResultActions actualPerformResult = MockMvcBuilders.standaloneSetup(this.sovereignController).build()
					.perform(requestBuilder);
			actualPerformResult.andExpect(MockMvcResultMatchers.status().isOk());
		} catch (Exception e) {
			e.printStackTrace();
		}

	}

	@Test
	public void test_sovereign_countryList() {

		SovereignCountryEntity country = new SovereignCountryEntity();
		country.setCountryCode("US");
		country.setCountryName("USA");
		country.setEntityId(110170L);
		List<SovereignCountryEntity> countryList = new ArrayList<SovereignCountryEntity>();
		countryList.add(country);

		try {
			Mockito.when(sovereignService.getSovereignCountries()).thenAnswer(x -> countryList);
			MockHttpServletRequestBuilder requestBuilder = MockMvcRequestBuilders
					.get("/ratingsData/api/sovereign/countrylist");
			ResultActions actualPerformResult = MockMvcBuilders.standaloneSetup(this.sovereignController).build()
					.perform(requestBuilder);
			actualPerformResult.andExpect(MockMvcResultMatchers.status().isOk());
		} catch (Exception e) {
			e.printStackTrace();
		}

	}

	@Test
	public void test_sovereign_countryList_exception() {

		try {
			Mockito.when(sovereignService.getSovereignCountries()).thenThrow(Exception.class);
			MockHttpServletRequestBuilder requestBuilder = MockMvcRequestBuilders
					.get("/ratingsData/api/sovereign/countrylist");
			ResultActions actualPerformResult = MockMvcBuilders.standaloneSetup(this.sovereignController).build()
					.perform(requestBuilder);
			actualPerformResult.andExpect(MockMvcResultMatchers.status().is5xxServerError());
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	@Test
	public void test_sovereign_summary_exception() {

		try {
			Mockito.when(sovereignService.getSovereignCountrySummary("US")).thenThrow(Exception.class);
			MockHttpServletRequestBuilder requestBuilder = MockMvcRequestBuilders
					.get("/ratingsData/api/sovereign/summary").queryParams(queryParams);
			ResultActions actualPerformResult = MockMvcBuilders.standaloneSetup(this.sovereignController).build()
					.perform(requestBuilder);
			actualPerformResult.andExpect(MockMvcResultMatchers.status().is5xxServerError());
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	@Test
	public void test_sovereign_riskData() {

		SovereignRiskEntity risk = new SovereignRiskEntity();
		risk.setCountryCode("US");
		risk.setDisplayOrder(0);
		risk.setDataGroup("SRI");
		risk.setGridName("Economic Data");
		risk.setScoreName("Nominal GDP (bil. US$)");
		risk.setScoreValue("3568.47");
		risk.setFinancialYear("2023F");
		List<SovereignRiskEntity> riskList = new ArrayList<SovereignRiskEntity>();
		riskList.add(risk);

		try {
			Mockito.when(sovereignService.getSovereignRiskIndicatorsData("US")).thenAnswer(x -> riskList);
			MockHttpServletRequestBuilder requestBuilder = MockMvcRequestBuilders
					.get("/ratingsData/api/sovereign/riskindicators").queryParams(queryParams);
			ResultActions actualPerformResult = MockMvcBuilders.standaloneSetup(this.sovereignController).build()
					.perform(requestBuilder);
			actualPerformResult.andExpect(MockMvcResultMatchers.status().isOk());
		} catch (Exception e) {
			e.printStackTrace();
		}

	}

	@Test
	public void test_sovereign_risk_exception() {

		try {
			Mockito.when(sovereignService.getSovereignRiskIndicatorsData("US")).thenThrow(Exception.class);
			MockHttpServletRequestBuilder requestBuilder = MockMvcRequestBuilders
					.get("/ratingsData/api/sovereign/riskindicators").queryParams(queryParams);
			ResultActions actualPerformResult = MockMvcBuilders.standaloneSetup(this.sovereignController).build()
					.perform(requestBuilder);
			actualPerformResult.andExpect(MockMvcResultMatchers.status().is5xxServerError());
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	@Test
	public void test_sovereign_topfive_bicra() {
		SovereignTopFiveFinInst topFiveBicra = new SovereignTopFiveFinInst();
		topFiveBicra.setCountryCode("US");
		topFiveBicra.setDisplayOrder(0);
		topFiveBicra.setAssetsCurrency("USD");
		topFiveBicra.setAssets(13234332L);
		topFiveBicra.setCreditRating("");
		topFiveBicra.setSysImp("High");
		topFiveBicra.setFinancialInsName("JPMorgan Chase & Co.");
		List<SovereignTopFiveFinInst> topFiveList = new ArrayList<SovereignTopFiveFinInst>();
		topFiveList.add(topFiveBicra);

		try {
			Mockito.when(sovereignService.getTopFiveFinInsData("US")).thenAnswer(x -> topFiveList);
			MockHttpServletRequestBuilder requestBuilder = MockMvcRequestBuilders
					.get("/ratingsData/api/sovereign/topfive_fi").queryParams(queryParams);
			ResultActions actualPerformResult = MockMvcBuilders.standaloneSetup(this.sovereignController).build()
					.perform(requestBuilder);
			actualPerformResult.andExpect(MockMvcResultMatchers.status().isOk());
		} catch (Exception e) {
			e.printStackTrace();
		}

	}

	@Test
	public void test_sovereign_topfive_bicra_exception() {

		try {
			Mockito.when(sovereignService.getTopFiveFinInsData("US")).thenThrow(Exception.class);
			MockHttpServletRequestBuilder requestBuilder = MockMvcRequestBuilders
					.get("/ratingsData/api/sovereign/topfive_fi").queryParams(queryParams);
			ResultActions actualPerformResult = MockMvcBuilders.standaloneSetup(this.sovereignController).build()
					.perform(requestBuilder);
			actualPerformResult.andExpect(MockMvcResultMatchers.status().is5xxServerError());
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	@Test
	public void test_sovereign_bicrascores() {
		SovereignBICRAScores bicraScores = new SovereignBICRAScores();
		bicraScores.setCountryCode("US");
		bicraScores.setScoreName("BICRA Group");
		bicraScores.setScoreValue("3");
		bicraScores.setHierarchyLevel(0);

		List<SovereignBICRAScores> scoreList = new ArrayList<SovereignBICRAScores>();
		scoreList.add(bicraScores);

		try {
			Mockito.when(sovereignService.getBICRAScores("US")).thenAnswer(x -> scoreList);
			MockHttpServletRequestBuilder requestBuilder = MockMvcRequestBuilders
					.get("/ratingsData/api/sovereign/bicrascores").queryParams(queryParams);
			ResultActions actualPerformResult = MockMvcBuilders.standaloneSetup(this.sovereignController).build()
					.perform(requestBuilder);
			actualPerformResult.andExpect(MockMvcResultMatchers.status().isOk());
		} catch (Exception e) {
			e.printStackTrace();
		}

	}

	@Test
	public void test_sovereign_bicrascores_exception() {

		try {
			Mockito.when(sovereignService.getBICRAScores("US")).thenThrow(Exception.class);
			MockHttpServletRequestBuilder requestBuilder = MockMvcRequestBuilders
					.get("/ratingsData/api/sovereign/bicrascores").queryParams(queryParams);
			ResultActions actualPerformResult = MockMvcBuilders.standaloneSetup(this.sovereignController).build()
					.perform(requestBuilder);
			actualPerformResult.andExpect(MockMvcResultMatchers.status().is5xxServerError());
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	@Test
	public void test_sovereign_peerbicrascores() {
		SovereignPeerBICRAScores peerbicraScores = new SovereignPeerBICRAScores();
		peerbicraScores.setCountryCode("US");
		peerbicraScores.setScoreName("BICRA Group");
		peerbicraScores.setScoreValue("3");
		peerbicraScores.setPeerCountryName("IN");
		peerbicraScores.setAssessmentDate("2023-09-10 12:22:33");

		List<SovereignPeerBICRAScores> scoreList = new ArrayList<SovereignPeerBICRAScores>();
		scoreList.add(peerbicraScores);

		try {
			Mockito.when(sovereignService.getPeerBICRAScores("US","")).thenAnswer(x -> scoreList);
			MockHttpServletRequestBuilder requestBuilder = MockMvcRequestBuilders
					.get("/ratingsData/api/sovereign/peer_bicrascores").queryParams(queryParams);
			ResultActions actualPerformResult = MockMvcBuilders.standaloneSetup(this.sovereignController).build()
					.perform(requestBuilder);
			actualPerformResult.andExpect(MockMvcResultMatchers.status().isOk());
		} catch (Exception e) {
			e.printStackTrace();
		}

	}

	@Test
	public void test_sovereign_peerbicrascores_exception() {
		try {
			Mockito.when(sovereignService.getPeerBICRAScores("US","")).thenThrow(Exception.class);
			MockHttpServletRequestBuilder requestBuilder = MockMvcRequestBuilders
					.get("/ratingsData/api/sovereign/peer_bicrascores").queryParams(queryParams);
			ResultActions actualPerformResult = MockMvcBuilders.standaloneSetup(this.sovereignController).build()
					.perform(requestBuilder);
			actualPerformResult.andExpect(MockMvcResultMatchers.status().is5xxServerError());
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	
	@Test
	public void test_sovereign_fs_majorfacors() {
		SovereignFSMajorFactors majorFactors = new SovereignFSMajorFactors();
		List<SovereignFSMajorFactors> list = new ArrayList<SovereignFSMajorFactors>();
		majorFactors.setCountryCode("US");
		majorFactors.setGridName("Major Factors");
		majorFactors.setDataElementName("Strengths");		
		majorFactors.setDataValue("Banks' sound funding profiles with stable core customer deposits.");
		majorFactors.setDisplayOrder(1);		
		list.add(majorFactors);		
		majorFactors.setCountryCode("US");
		majorFactors.setGridName("Major Factors");
		majorFactors.setDataElementName("Weaknesses");		
		majorFactors.setDataValue("Banks face very high credit risks.");
		majorFactors.setDisplayOrder(1);
		list.add(majorFactors);	

		try {
			Mockito.when(sovereignService.getMajorFactors("US")).thenAnswer(x -> list);
			MockHttpServletRequestBuilder requestBuilder = MockMvcRequestBuilders
					.get("/ratingsData/api/sovereign/fs_majorfactors").queryParams(queryParams);
			ResultActions actualPerformResult = MockMvcBuilders.standaloneSetup(this.sovereignController).build()
					.perform(requestBuilder);
			actualPerformResult.andExpect(MockMvcResultMatchers.status().isOk());
		} catch (Exception e) {
			e.printStackTrace();
		}

	}
	
	@Test
	public void test_sovereign_fs_majorfacors_exception() {
		try {
			Mockito.when(sovereignService.getMajorFactors("US")).thenThrow(Exception.class);
			MockHttpServletRequestBuilder requestBuilder = MockMvcRequestBuilders
					.get("/ratingsData/api/sovereign/fs_majorfactors").queryParams(queryParams);
			ResultActions actualPerformResult = MockMvcBuilders.standaloneSetup(this.sovereignController).build()
					.perform(requestBuilder);
			actualPerformResult.andExpect(MockMvcResultMatchers.status().is5xxServerError());
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	
	@Test
	public void test_sovereign_fs_iicra() {
		SovereignFSIICRA iicra = new SovereignFSIICRA();
		List<SovereignFSIICRA> list = new ArrayList<SovereignFSIICRA>();
		iicra.setCountryCode("US");
		iicra.setTitle("LIFE INSURANCE");		
		iicra.setIndicator("Country Risk");
		iicra.setIndicatorValue("Very Low Risk");		
		iicra.setIndicatorOrder(1);
		iicra.setSortOrder(1);
		list.add(iicra);		
		iicra.setCountryCode("US");
		iicra.setTitle("HEALTH INSURANCE");		
		iicra.setIndicator("Industry Risk");
		iicra.setIndicatorValue("Very Low");		
		iicra.setIndicatorOrder(2);
		iicra.setSortOrder(3);
		list.add(iicra);	

		try {
			Mockito.when(sovereignService.getIICRAIndicators("US")).thenAnswer(x -> list);
			MockHttpServletRequestBuilder requestBuilder = MockMvcRequestBuilders
					.get("/ratingsData/api/sovereign/fs_iicra").queryParams(queryParams);
			ResultActions actualPerformResult = MockMvcBuilders.standaloneSetup(this.sovereignController).build()
					.perform(requestBuilder);
			actualPerformResult.andExpect(MockMvcResultMatchers.status().isOk());
		} catch (Exception e) {
			e.printStackTrace();
		}

	}
	
	@Test
	public void test_sovereign_fs_iicra_exception() {
		try {
			Mockito.when(sovereignService.getIICRAIndicators("US")).thenThrow(Exception.class);
			MockHttpServletRequestBuilder requestBuilder = MockMvcRequestBuilders
					.get("/ratingsData/api/sovereign/fs_iicra").queryParams(queryParams);
			ResultActions actualPerformResult = MockMvcBuilders.standaloneSetup(this.sovereignController).build()
					.perform(requestBuilder);
			actualPerformResult.andExpect(MockMvcResultMatchers.status().is5xxServerError());
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	@Test
	public void test_sovereign_dashboard() {
		SovereignDashboard dashboard = new SovereignDashboard();
		List<SovereignDashboard> list = new ArrayList<SovereignDashboard>();
		dashboard.setCountryName("Australia");
		dashboard.setTitle("Summary");		
		dashboard.setScoreName("Test Test");
		dashboard.setScoreValue(null);		
		list.add(dashboard);		
		try {
			Mockito.when(sovereignService.getSovDashboardData("AUS",null)).thenAnswer(x -> list);
			MockHttpServletRequestBuilder requestBuilder = MockMvcRequestBuilders
					.get("/ratingsData/api/sovereign/dashboard").queryParam("country", "AUS").queryParam("entityId", "5039");
			ResultActions actualPerformResult = MockMvcBuilders.standaloneSetup(this.sovereignController).build()
					.perform(requestBuilder);
			actualPerformResult.andExpect(MockMvcResultMatchers.status().isOk());
		} catch (Exception e) {
			e.printStackTrace();
		}

	}
	
	@Test
	public void test_sovereign_dashboard_exception() {
		try {
			Mockito.when(sovereignService.getSovDashboardData("AUS",Optional.of(null))).thenThrow(Exception.class);
			MockHttpServletRequestBuilder requestBuilder = MockMvcRequestBuilders
					.get("/ratingsData/api/sovereign/dashboard").queryParam("country", "AUS");
			ResultActions actualPerformResult = MockMvcBuilders.standaloneSetup(this.sovereignController).build()
					.perform(requestBuilder);
			actualPerformResult.andExpect(MockMvcResultMatchers.status().is5xxServerError());
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\test\java\com\spglobal\ratings\ratingsdata\controller\UspfRatingsControllerTest.java

package com.spglobal.ratings.ratingsdata.controller;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Optional;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.MediaType;
import org.springframework.test.context.junit.jupiter.SpringExtension;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.ResultActions;
import org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;
import org.springframework.test.web.servlet.result.MockMvcResultMatchers;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;
import org.springframework.util.LinkedMultiValueMap;
import org.springframework.util.MultiValueMap;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.spglobal.ratings.ratingsdata.entity.UspfAnalyticalContacts;
import com.spglobal.ratings.ratingsdata.entity.UspfCurrentRatings;
import com.spglobal.ratings.ratingsdata.entity.UspfDashboardRatings;
import com.spglobal.ratings.ratingsdata.entity.UspfNonIssuerBasedRatingHisotry;
import com.spglobal.ratings.ratingsdata.entity.UspfNonIssuerBasedRatings;
import com.spglobal.ratings.ratingsdata.entity.UspfRatingsRoles;
import com.spglobal.ratings.ratingsdata.entity.UspfRelatedArticles;
import com.spglobal.ratings.ratingsdata.entity.UspfRelatedCriteria;
import com.spglobal.ratings.ratingsdata.model.USPFMinMaxDates;
import com.spglobal.ratings.ratingsdata.model.UspfNonIssuerBasedFilterData;
import com.spglobal.ratings.ratingsdata.service.UspfRatingsService;

@ExtendWith({ SpringExtension.class, MockitoExtension.class })
@WebMvcTest(value = UspfRatingsController.class)
public class UspfRatingsControllerTest {

	@Autowired
	private MockMvc mockMvc;

	@InjectMocks
	UspfRatingsController uspfController;

	@MockBean
	UspfRatingsService uspfRatingService;

    private MultiValueMap<String, String> queryParams = new LinkedMultiValueMap<>();

	
	@BeforeEach
	public void init() {
		mockMvc = MockMvcBuilders.standaloneSetup(uspfController).build();
		queryParams.add("entityId", "5039");
	}
	
	public static String asJsonString(final Object obj) {
        try {
            return new ObjectMapper().writeValueAsString(obj);
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }

	@Test
	public void test_uspf_currentRatings() {

		UspfCurrentRatings uspfCR = new UspfCurrentRatings();
		uspfCR.setEntityId(5039L);
		uspfCR.setSector("Local Government");
		uspfCR.setSubSector("GO Municipalities & Counties");
		uspfCR.setSecurityId(61588L);
		uspfCR.setSecurityName("Rochester MN Unlimited TAx Appropriation");
		uspfCR.setSecurityInstrumentId(1395115L);
		uspfCR.setRatingType("Local Currency LT");
		uspfCR.setRatingDetailId(43260503L);
		uspfCR.setRating("AA+");
		uspfCR.setRatingDate("2020-02-26 00:00:00");
		uspfCR.setLastReviewDate("2023-04-19 09:43:55");
		uspfCR.setAction("New Rating | CreditWatch/Outlook");
		uspfCR.setCreditWatchOutlook("Stable");
		uspfCR.setCreditWatchOutlookDate("2023-04-19 09:43:55");
		uspfCR.setLatestArticleDate("2023-04-19 09:43:55");
		uspfCR.setArticleId(2969165L);
		//uspfCR.setRoleCode("ISSUER");
		List<UspfCurrentRatings> ratingData = new ArrayList<UspfCurrentRatings>();
		ratingData.add(uspfCR);
		

		try {
			Mockito.when(uspfController.getCurrentRatings(5039L,Optional.empty(),61588L,"STDLONG")).thenAnswer(x -> ratingData);
			MockHttpServletRequestBuilder requestBuilder = MockMvcRequestBuilders
					.get("/ratingsData/api/uspf/currentratings").queryParam("entityId", "5039").queryParam("roleCode", "ISSUER").
					queryParam("asId", "34545").queryParam("ratingTypeCode", "STDLONG");
			ResultActions actualPerformResult = MockMvcBuilders.standaloneSetup(this.uspfController).build()
					.perform(requestBuilder);
			actualPerformResult.andExpect(MockMvcResultMatchers.status().isOk());
		} catch (Exception e) {
			e.printStackTrace();
		}

	}

	@Test
	public void test_uspf_currentRatings_exception() {

		try {
			Mockito.when(uspfRatingService.getCurrentRatings(5039L,Optional.empty(), Mockito.anyLong(), Mockito.any())).thenThrow(Exception.class);
			MockHttpServletRequestBuilder requestBuilder = MockMvcRequestBuilders
					.get("/ratingsData/api/uspf/currentratings").queryParam("entityId", "5039").queryParam("roleCode", "ISSUER");
			ResultActions actualPerformResult = MockMvcBuilders.standaloneSetup(this.uspfController).build()
					.perform(requestBuilder);
			actualPerformResult.andExpect(MockMvcResultMatchers.status().is5xxServerError());
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	@Test
	public void test_uspf_dashboardRatings() {

		UspfDashboardRatings uspfDR = new UspfDashboardRatings();
		uspfDR.setEntityId(5039L);
		uspfDR.setSector("Local Government");
		uspfDR.setSubSector("GO Municipalities & Counties");
		uspfDR.setSecurityId(61588L);
		uspfDR.setSecurityName("Rochester MN Unlimited TAx Appropriation");
		uspfDR.setSecurityInstrumentId(1395115L);
		uspfDR.setRatingType("Local Currency LT");
		uspfDR.setRatingDetailId(43260503L);
		uspfDR.setRating("AA+");
		uspfDR.setCreditWatchOutlook("Stable");
		uspfDR.setRatingTypeInd("L");

		List<UspfDashboardRatings> ratingData = new ArrayList<UspfDashboardRatings>();
		ratingData.add(uspfDR);
				try {
			Mockito.when(uspfController.getUspfDashboardRating(5039L)).thenAnswer(x -> ratingData);
			MockHttpServletRequestBuilder requestBuilder = MockMvcRequestBuilders.get("/ratingsData/api/uspf/dashboard")
					.params(queryParams);
			ResultActions actualPerformResult = MockMvcBuilders.standaloneSetup(this.uspfController).build()
					.perform(requestBuilder);
			actualPerformResult.andExpect(MockMvcResultMatchers.status().isOk());
		} catch (Exception e) {
			e.printStackTrace();
		}

	}
	
	@Test
	public void test_uspf_dashboardRatings_exception() {
		try {
			Mockito.when(uspfRatingService.getDashBoardRatings(5039L)).thenThrow(Exception.class);
			MockHttpServletRequestBuilder requestBuilder = MockMvcRequestBuilders
					.get("/ratingsData/api/uspf/dashboard").params(queryParams);
			ResultActions actualPerformResult = MockMvcBuilders.standaloneSetup(this.uspfController).build()
					.perform(requestBuilder);
			actualPerformResult.andExpect(MockMvcResultMatchers.status().is5xxServerError());
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	@Test
	public void test_uspf_ratingroles() {
		UspfRatingsRoles role = new UspfRatingsRoles();
		role.setRoleCode("ISSUER");
		role.setRoleDesc("Issuer");
		List<UspfRatingsRoles> rolesList = new ArrayList<UspfRatingsRoles>();
		rolesList.add(role);
		try {
			Mockito.when(uspfController.getUspfRatingRoles()).thenAnswer(x -> rolesList);
			MockHttpServletRequestBuilder requestBuilder = MockMvcRequestBuilders.get("/ratingsData/api/uspf/ratingRoles");
			ResultActions actualPerformResult = MockMvcBuilders.standaloneSetup(this.uspfController).build()
					.perform(requestBuilder);
			actualPerformResult.andExpect(MockMvcResultMatchers.status().isOk());
		} catch (Exception e) {
			e.printStackTrace();
		}

	}
	
	@Test
	public void test_uspf_ratingrole_exception() {
		try {
			Mockito.when(uspfRatingService.getRoles()).thenThrow(Exception.class);
			MockHttpServletRequestBuilder requestBuilder = MockMvcRequestBuilders
					.get("/ratingsData/api/uspf/ratingRoles");
			ResultActions actualPerformResult = MockMvcBuilders.standaloneSetup(this.uspfController).build()
					.perform(requestBuilder);
			actualPerformResult.andExpect(MockMvcResultMatchers.status().is5xxServerError());
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	@Test
	public void test_uspf_RelatedArticles() {
		UspfRelatedArticles articles = new UspfRelatedArticles();
		articles.setRelateId(1305646L);
		articles.setArticleId(2974886L);
		articles.setArticleType("Full Analysis");
		articles.setAuthor("S&P GLobal Ratings");
		articles.setTitle("Summary: Mayo Clinic, Minnesota; CP; Hospital; System");
		List<UspfRelatedArticles> articleLt = new ArrayList<UspfRelatedArticles>();
		articleLt.add(articles);
		try {
			Mockito.when(uspfController.getUspfReleatedArticles(Mockito.anyLong(),Mockito.anyList(),Mockito.anyString(),Mockito.anyString())).thenAnswer(x -> articleLt);
			MockHttpServletRequestBuilder requestBuilder = MockMvcRequestBuilders.get("/ratingsData/api/uspf/releatedArticles")
					.queryParam("instrumentId", "1305646").queryParam("articleTypeId", "7")
					.queryParam("fromDate", "1305646").queryParam("toDate", "1305646");
			ResultActions actualPerformResult = MockMvcBuilders.standaloneSetup(this.uspfController).build()
					.perform(requestBuilder);
			actualPerformResult.andExpect(MockMvcResultMatchers.status().isOk());
		} catch (Exception e) {
			e.printStackTrace();
		}

	}
	
	@Test
	public void test_uspf_RelatedArticles_exception() {
		try {
			Mockito.when(uspfRatingService.getRelatedArticles(Mockito.anyLong(),Mockito.anyList(),Mockito.anyString(),Mockito.anyString())).thenThrow(Exception.class);
			MockHttpServletRequestBuilder requestBuilder = MockMvcRequestBuilders
					.get("/ratingsData/api/uspf/releatedArticles").queryParam("instrumentId", "1305646").queryParam("articleTypeId", "1305646")
					.queryParam("fromDate", "1305646").queryParam("toDate", "1305646");
			ResultActions actualPerformResult = MockMvcBuilders.standaloneSetup(this.uspfController).build()
					.perform(requestBuilder);
			actualPerformResult.andExpect(MockMvcResultMatchers.status().is5xxServerError());
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	@Test
	public void test_dashboardRatingArticles() {
		UspfRelatedArticles articles = new UspfRelatedArticles();
		articles.setRelateId(1305646L);
		articles.setArticleId(2974886L);
		articles.setArticleType("Full Analysis");
		articles.setAuthor("S&P GLobal Ratings");
		articles.setTitle("Summary: Mayo Clinic, Minnesota; CP; Hospital; System");
		List<UspfRelatedArticles> articleLt = new ArrayList<UspfRelatedArticles>();
		articleLt.add(articles);
		try {
			Mockito.when(uspfController.getUspfDashboardRatingArticles(1305646L)).thenAnswer(x -> articleLt);
			MockHttpServletRequestBuilder requestBuilder = MockMvcRequestBuilders.get("/ratingsData/api/uspf-dashboard/ratingarticles").queryParam("instrumentId", "1305646");
			ResultActions actualPerformResult = MockMvcBuilders.standaloneSetup(this.uspfController).build()
					.perform(requestBuilder);
			actualPerformResult.andExpect(MockMvcResultMatchers.status().isOk());
		} catch (Exception e) {
			e.printStackTrace();
		}

	}
	
	@Test
	public void test_dashboardRatingArticlestest_exception() {
		try {
			Mockito.when(uspfRatingService.getDashboardArticles(1305646L)).thenThrow(Exception.class);
			MockHttpServletRequestBuilder requestBuilder = MockMvcRequestBuilders
					.get("/ratingsData/api/uspf-dashboard/ratingarticles").queryParam("instrumentId", "1305646");;
			ResultActions actualPerformResult = MockMvcBuilders.standaloneSetup(this.uspfController).build()
					.perform(requestBuilder);
			actualPerformResult.andExpect(MockMvcResultMatchers.status().is5xxServerError());
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	
	@Test
	public void test_dashboard_peerRatingArticles() {
		UspfRelatedArticles articles = new UspfRelatedArticles();
		List<Long> securityIds = Arrays.asList(2303L,5197L);
		articles.setRelateId(1305646L);
		articles.setArticleId(2974886L);
		articles.setArticleType("Full Analysis");
		articles.setAuthor("S&P GLobal Ratings");
		articles.setTitle("Summary: Mayo Clinic, Minnesota; CP; Hospital; System");
		List<UspfRelatedArticles> articleLt = new ArrayList<UspfRelatedArticles>();
		articleLt.add(articles);
		try {
			Mockito.when(uspfController.getUspfDashboardPeerRatingArticles(securityIds)).thenAnswer(x -> articleLt);
			MockHttpServletRequestBuilder requestBuilder = MockMvcRequestBuilders.get("/ratingsData/api/uspf-dashboard/peerRatingArticles").queryParam("securityIds", "2303");
			ResultActions actualPerformResult = MockMvcBuilders.standaloneSetup(this.uspfController).build()
					.perform(requestBuilder);
			actualPerformResult.andExpect(MockMvcResultMatchers.status().isOk());
		} catch (Exception e) {
			e.printStackTrace();
		}

	}
	
	@Test
	public void test_peerRatingArticles_exception() {
		List<Long> securityIds = Arrays.asList();
		try {
			Mockito.when(uspfRatingService.getDashboardPeerArticles(securityIds)).thenThrow(Exception.class);
			MockHttpServletRequestBuilder requestBuilder = MockMvcRequestBuilders
					.get("/ratingsData/api/uspf-dashboard/peerRatingArticles").queryParam("securityIds", "");
			ResultActions actualPerformResult = MockMvcBuilders.standaloneSetup(this.uspfController).build()
					.perform(requestBuilder);
			actualPerformResult.andExpect(MockMvcResultMatchers.status().is5xxServerError());
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	@Test
	public void test_nonIssuerBased_ratingsHistory() {
		UspfNonIssuerBasedRatingHisotry ratingHistory = new UspfNonIssuerBasedRatingHisotry();
		Optional<Long> instDetailId = Optional.empty();
		ratingHistory.setInstrumentId(28078L);
		ratingHistory.setInstrDetailId(42422L);
		ratingHistory.setRatingDetailId(494501L);
		ratingHistory.setRatingTypeCode("STDLONG");
		ratingHistory.setRatingType("Local Currency LT");
		ratingHistory.setRating("AAA");
		ratingHistory.setAction("New Rating");
		List<UspfNonIssuerBasedRatingHisotry> list = new ArrayList<UspfNonIssuerBasedRatingHisotry>();
		list.add(ratingHistory);
		try {
			Mockito.when(uspfController.getUspfNonIssuerbasedRatingHistory(28078L,instDetailId,"STDLONG")).thenAnswer(x -> list);
			MockHttpServletRequestBuilder requestBuilder = MockMvcRequestBuilders.get("/ratingsData/api/uspf/nibRatingsHistory").
					queryParam("instrumentId", "28078").
					queryParam("instrDetailId", "").
					queryParam("ratingTypeCode", "STDLONG");
			ResultActions actualPerformResult = MockMvcBuilders.standaloneSetup(this.uspfController).build()
					.perform(requestBuilder);
			actualPerformResult.andExpect(MockMvcResultMatchers.status().isOk());
		} catch (Exception e) {
			e.printStackTrace();
		}

	}
	
	@Test
	public void test_nonIssuerBased_ratings() {
		UspfNonIssuerBasedRatings ratings = new UspfNonIssuerBasedRatings();
		ratings.setEntityId(5039L);
		//ratings.setRoleCode("ISSUER");
		ratings.setIssueName("US$15.0 mil var rate dem multifam hsg rev bnds (Village Capital Corporation) (Bella Grove Apts) ser 2019A dtd 05/08/2019 due 05/01/2061");
		ratings.setCusip("771594AX6");
		ratings.setCategory("Structured");
		ratings.setMaturityDate("5/1/2061");
		ratings.setInstrumentId(28078L);
		ratings.setInstrDetailId(42422L);
		ratings.setRatingDetailId(494501L);
		ratings.setRatingTypeCode("STDLONG");
		ratings.setRatingType("Local Currency LT");
		ratings.setRating("AA+/A-1+");
		ratings.setAction("New Rating");
		ratings.setCreditWatchOutlook("NM");
		ratings.setRefundedInd("N");
		ratings.setMuncipalSecurity("Letter Of Credit");
		ratings.setSeries("2019A");
		List<UspfNonIssuerBasedRatings> list = new ArrayList<UspfNonIssuerBasedRatings>();
		list.add(ratings);
		try {
			Mockito.when(uspfController.getUspfNonIssuerbasedRatings(5039L)).thenAnswer(x -> list);
			MockHttpServletRequestBuilder requestBuilder = MockMvcRequestBuilders.get("/ratingsData/api/uspf/nibRatings").
					params(queryParams);
			ResultActions actualPerformResult = MockMvcBuilders.standaloneSetup(this.uspfController).build()
					.perform(requestBuilder);
			actualPerformResult.andExpect(MockMvcResultMatchers.status().isOk());
		} catch (Exception e) {
			e.printStackTrace();
		}

	}
	
	@Test
	public void test_nonIssuerBased_ratings_exception() {
		try {
			Mockito.when(uspfRatingService.getNonIssuerBasedRatings(5039L)).thenThrow(Exception.class);
			MockHttpServletRequestBuilder requestBuilder = MockMvcRequestBuilders
					.get("/ratingsData/api/uspf/nibRatings").params(queryParams);
			ResultActions actualPerformResult = MockMvcBuilders.standaloneSetup(this.uspfController).build()
					.perform(requestBuilder);
			actualPerformResult.andExpect(MockMvcResultMatchers.status().is5xxServerError());
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	@Test
	public void test_nonIssuerBased_ratings_filter() {
		UspfNonIssuerBasedFilterData filterData = new UspfNonIssuerBasedFilterData();
		filterData.setEntityId(5039L);
		filterData.setIssueNameOnly(false);
		filterData.setKeyword("US$15.0 mil var rate ");
		filterData.setMaturityYearFrom(2023);
		filterData.setMaturityYearTo(2063);
		filterData.setRole(Arrays.asList("ISSUER","OBLIGOR"));
		filterData.setCategory(Arrays.asList("Structured"));
		UspfNonIssuerBasedRatings ratings = new UspfNonIssuerBasedRatings();
		ratings.setEntityId(5039L);
		//ratings.setRoleCode("ISSUER");
		ratings.setIssueName("US$15.0 mil var rate dem multifam hsg rev bnds (Village Capital Corporation) (Bella Grove Apts) ser 2019A dtd 05/08/2019 due 05/01/2061");
		ratings.setCusip("771594AX6");
		ratings.setCategory("Structured");
		ratings.setMaturityDate("5/1/2061");
		ratings.setInstrumentId(28078L);
		ratings.setInstrDetailId(42422L);
		ratings.setRatingDetailId(494501L);
		ratings.setRatingTypeCode("STDLONG");
		ratings.setRatingType("Local Currency LT");
		ratings.setRating("AA+/A-1+");
		ratings.setAction("New Rating");
		ratings.setCreditWatchOutlook("NM");
		ratings.setRefundedInd("N");
		ratings.setMuncipalSecurity("Letter Of Credit");
		ratings.setSeries("2019A");
		List<UspfNonIssuerBasedRatings> list = new ArrayList<UspfNonIssuerBasedRatings>();
		list.add(ratings);
		try {
			Mockito.when(uspfController.getUspfNonIssuerbasedRatingsFilter(filterData)).thenAnswer(x -> list);
			MockHttpServletRequestBuilder requestBuilder = MockMvcRequestBuilders.post("/ratingsData/api/uspf/nibRatings_filter")
					.content(asJsonString(filterData)).contentType(MediaType.APPLICATION_JSON);
			ResultActions actualPerformResult = MockMvcBuilders.standaloneSetup(this.uspfController).build()
					.perform(requestBuilder);
			actualPerformResult.andExpect(MockMvcResultMatchers.status().isOk());
		} catch (Exception e) {
			e.printStackTrace();
		}

	}
	
	@Test
	public void test_nonIssuerBased_ratings_filter_exception() {
		UspfNonIssuerBasedFilterData filterData = new UspfNonIssuerBasedFilterData();
		filterData.setEntityId(5039L);
		filterData.setIssueNameOnly(false);
		filterData.setKeyword("US$15.0 mil var rate ");
		filterData.setMaturityYearFrom(2023);
		filterData.setMaturityYearTo(2063);
		filterData.setRole(Arrays.asList("ISSUER","OBLIGOR"));
		filterData.setCategory(Arrays.asList("Structured"));
		try {
			Mockito.when(uspfRatingService.getNIBRatingsFilterData(filterData)).thenThrow(Exception.class);
			MockHttpServletRequestBuilder requestBuilder = MockMvcRequestBuilders
					.post("/ratingsData/api/uspf/nibRatings_filter").content(asJsonString(filterData)).contentType(MediaType.APPLICATION_JSON);
			ResultActions actualPerformResult = MockMvcBuilders.standaloneSetup(this.uspfController).build()
					.perform(requestBuilder);
			actualPerformResult.andExpect(MockMvcResultMatchers.status().is5xxServerError());
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	@Test
	public void test_relatedcriteria() {
		UspfRelatedCriteria relatedCriteria = new UspfRelatedCriteria();
		relatedCriteria.setRatingDetailId(42996978L);
		relatedCriteria.setArticleId(2932338L);
		relatedCriteria.setTitle("General Criteria: Environmental, Social, And Governance Principles In Credit Ratings");
		relatedCriteria.setArticleDate("10/10/2021 11:55:32 AM");
		relatedCriteria.setAuthor("Gregg Lemos-Stein");
		List<UspfRelatedCriteria> list = new ArrayList<UspfRelatedCriteria>();
		list.add(relatedCriteria);
		try {
			Mockito.when(uspfRatingService.getRelatedCriteriaArticles(42996978L)).thenAnswer(x -> list);
			MockHttpServletRequestBuilder requestBuilder = MockMvcRequestBuilders
					.get("/ratingsData/api/uspf/relatedcriteria").queryParam("ratingDetialId", "42996978");
			ResultActions actualPerformResult = MockMvcBuilders.standaloneSetup(this.uspfController).build()
					.perform(requestBuilder);
			actualPerformResult.andExpect(MockMvcResultMatchers.status().isOk());
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	@Test
	public void test_relatedcriteria_exception() {
		try {
			Mockito.when(uspfRatingService.getRelatedCriteriaArticles(42996978L)).thenThrow(Exception.class);
			MockHttpServletRequestBuilder requestBuilder = MockMvcRequestBuilders
					.get("/ratingsData/api/uspf/relatedcriteria").queryParam("ratingDetialId", "42996978");
			ResultActions actualPerformResult = MockMvcBuilders.standaloneSetup(this.uspfController).build()
					.perform(requestBuilder);
			actualPerformResult.andExpect(MockMvcResultMatchers.status().is5xxServerError());
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	
	@Test
	public void test_nib_issuerMaturityDetails() {
		UspfNonIssuerBasedRatings ratings = new UspfNonIssuerBasedRatings();
		ratings.setEntityId(5039L);
		//ratings.setRoleCode("ISSUER");
		ratings.setIssueName("US$15.0 mil var rate dem multifam hsg rev bnds (Village Capital Corporation) (Bella Grove Apts) ser 2019A dtd 05/08/2019 due 05/01/2061");
		ratings.setCusip("771594AX6");
		ratings.setCategory("Structured");
		ratings.setMaturityDate("5/1/2061");
		ratings.setInstrumentId(28078L);
		ratings.setInstrDetailId(42422L);
		ratings.setRatingDetailId(494501L);
		ratings.setRatingTypeCode("STDLONG");
		ratings.setRatingType("Local Currency LT");
		ratings.setRating("AA+/A-1+");
		ratings.setAction("New Rating");
		ratings.setCreditWatchOutlook("NM");
		ratings.setRefundedInd("N");
		ratings.setMuncipalSecurity("Letter Of Credit");
		ratings.setSeries("2019A");
		List<UspfNonIssuerBasedRatings> list = new ArrayList<UspfNonIssuerBasedRatings>();
		list.add(ratings);
		try {
			Mockito.when(uspfController.getNIBIssuerMaturityDetails(5039L,28078L)).thenAnswer(x -> list);
			MockHttpServletRequestBuilder requestBuilder = MockMvcRequestBuilders.get("/ratingsData/api/uspf/maturitydetails")
					.queryParam("entityId", "5039").queryParam("instrumentId", "28078");
			ResultActions actualPerformResult = MockMvcBuilders.standaloneSetup(this.uspfController).build()
					.perform(requestBuilder);
			actualPerformResult.andExpect(MockMvcResultMatchers.status().isOk());
		} catch (Exception e) {
			e.printStackTrace();
		}

	}
	
	@Test
	public void test_nib_issuerMaturityDetails_exception() {
		try {
			Mockito.when(uspfRatingService.getIssuerMaturityDetails(5039L,28078L)).thenThrow(Exception.class);
			MockHttpServletRequestBuilder requestBuilder = MockMvcRequestBuilders
					.get("/ratingsData/api/uspf/maturitydetails").queryParam("entityId", "5039").queryParam("instrumentId", "28078");
			ResultActions actualPerformResult = MockMvcBuilders.standaloneSetup(this.uspfController).build()
					.perform(requestBuilder);
			actualPerformResult.andExpect(MockMvcResultMatchers.status().is5xxServerError());
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	@Test
	public void test_nib_ratingsHistory_exception() {
		try {
			Mockito.when(uspfRatingService.getNonIssuerBasedRatingHistory(28078L, null, "STDLONG")).thenThrow(Exception.class);
			MockHttpServletRequestBuilder requestBuilder = MockMvcRequestBuilders.get("/ratingsData/api/uspf/nibRatingsHistory").
					queryParam("instrumentId", "28078").
					queryParam("instrDetailId", "").
					queryParam("ratingTypeCode", "STDLONG");
			ResultActions actualPerformResult = MockMvcBuilders.standaloneSetup(this.uspfController).build()
					.perform(requestBuilder);
			actualPerformResult.andExpect(MockMvcResultMatchers.status().is5xxServerError());
		} catch (Exception e) {
			e.printStackTrace();
		}
	}


	@Test
	public void test_analytical_contacts() {
		UspfAnalyticalContacts contacts = new UspfAnalyticalContacts();
		contacts.setAnalyticalSecId(10378L);
		contacts.setEmployeeId("P1000012371");
		contacts.setName("Blake E Yocom");
		contacts.setEmail("blake.yocom@spglobal.com");
		contacts.setPhone("+  1 (312) 233 7056");
		contacts.setRole("Analytical Manager");
		contacts.setDisplayOrder(2);
		List<UspfAnalyticalContacts> list = new ArrayList<UspfAnalyticalContacts>();
		list.add(contacts);
		try {			
			Mockito.when(uspfController.getUspfAnalyticalContacts(10378L)).thenAnswer(x -> list);
			MockHttpServletRequestBuilder requestBuilder = MockMvcRequestBuilders.get("/ratingsData/api/uspf/analyticalContacts")
					.queryParam("securityId", "10378");
			ResultActions actualPerformResult = MockMvcBuilders.standaloneSetup(this.uspfController).build()
					.perform(requestBuilder);
			actualPerformResult.andExpect(MockMvcResultMatchers.status().isOk());
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	@Test
	public void test_analytical_contacts_exception() {
		try {
			Mockito.when(uspfRatingService.getUspfAnalyticalContacts(10378L)).thenThrow(Exception.class);
			MockHttpServletRequestBuilder requestBuilder = MockMvcRequestBuilders
					.get("/ratingsData/api/uspf/analyticalContacts").queryParam("securityId", "10378");
			ResultActions actualPerformResult = MockMvcBuilders.standaloneSetup(this.uspfController).build()
					.perform(requestBuilder);
			actualPerformResult.andExpect(MockMvcResultMatchers.status().is5xxServerError());
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	@Test
	void test_issueAndMaturies() {
		try {
			Mockito.when(uspfRatingService.getUspfIssuesMaturities(Mockito.anyLong(),Mockito.anyLong(),Mockito.anyLong(),Mockito.any())).thenReturn(new ArrayList<>());
			MockHttpServletRequestBuilder requestBuilder = MockMvcRequestBuilders
					.get("/ratingsData/api/getIssuesMaturitiesUSPFPub").queryParam("asId", "2030")
					.queryParam("instrumentId", "28078").queryParam("ratingDetailId", "").queryParam("issueNameOnly", "false");
			ResultActions actualPerformResult = MockMvcBuilders.standaloneSetup(this.uspfController).build()
					.perform(requestBuilder);
			actualPerformResult.andExpect(MockMvcResultMatchers.status().isOk());
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	@Test
	void test_issueAndMaturiesExp() {
		try {
			Mockito.when(uspfRatingService.getUspfIssuesMaturities(Mockito.anyLong(),Mockito.anyLong(),
					Mockito.anyLong(),Mockito.any())).thenThrow(Exception.class);
			MockHttpServletRequestBuilder requestBuilder = MockMvcRequestBuilders
					.get("/ratingsData/api/getIssuesMaturitiesUSPFPub").queryParam("asId", "2030")
					.queryParam("instrumentId", "28078").queryParam("ratingDetailId", "").queryParam("issueNameOnly", "false");
			ResultActions actualPerformResult = MockMvcBuilders.standaloneSetup(this.uspfController).build()
					.perform(requestBuilder);
			actualPerformResult.andExpect(MockMvcResultMatchers.status().is5xxServerError());
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	
	@Test
	void getIssueAndMaturies_MinMaxDates() {
		try {
			Mockito.when(uspfRatingService.getIsseAndMaturitesMinMaxDates(Mockito.anyLong())).thenReturn(new USPFMinMaxDates());
			MockHttpServletRequestBuilder requestBuilder = MockMvcRequestBuilders
					.get("/ratingsData/api/getInMUSPFPubMinMaxDates").queryParam("asId", "2030");
			ResultActions actualPerformResult = MockMvcBuilders.standaloneSetup(this.uspfController).build()
					.perform(requestBuilder);
			actualPerformResult.andExpect(MockMvcResultMatchers.status().isOk());
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	@Test
	void getIssueAndMaturies_MinMaxDatesExp() {
		try {
			Mockito.when(uspfRatingService.getIsseAndMaturitesMinMaxDates(Mockito.anyLong())).thenThrow(Exception.class);
			MockHttpServletRequestBuilder requestBuilder = MockMvcRequestBuilders
					.get("/ratingsData/api/getInMUSPFPubMinMaxDates").queryParam("asId", "10378");
			ResultActions actualPerformResult = MockMvcBuilders.standaloneSetup(this.uspfController).build()
					.perform(requestBuilder);
			actualPerformResult.andExpect(MockMvcResultMatchers.status().is5xxServerError());
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\test\java\com\spglobal\ratings\ratingsdata\dao\ArticlePDFDaoTest.java

package com.spglobal.ratings.ratingsdata.dao;

import com.spglobal.ratings.ratingsdata.entity.ArticlePDFDetails;
import com.spglobal.ratings.ratingsdata.repository.ArticlePDFRepository;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.test.context.ContextConfiguration;

import java.util.Optional;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.mockito.Mockito.when;

@ContextConfiguration(classes = { ArticlePDFDao.class })
@ExtendWith(MockitoExtension.class)
public class ArticlePDFDaoTest {

    @InjectMocks
    private ArticlePDFDao articlePDFDao;

    @Mock
    private ArticlePDFRepository articlePDFRepository;

    @BeforeEach
    public void setup() {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    void testGetArticlePDFByArticleIdSuccess() {
        Long articleId = 1l;
        ArticlePDFDetails articlePDFDetails = new ArticlePDFDetails();
        when(articlePDFRepository.findByArticleId(articleId)).thenReturn(Optional.of(articlePDFDetails));
        byte[] result = articlePDFDao.getArticlePDFByArticleId(articleId);
        assertEquals(articlePDFDetails.getPdf(), result);
    }

    @Test
    void testGetArticlePDFByArticleIdException() {
        Long articleId = 1l ;
        when(articlePDFRepository.findByArticleId(articleId)).thenThrow(new IllegalArgumentException("--Illegal Argument Exception From Repo"));
        assertThrows(IllegalArgumentException.class, ()->{articlePDFDao.getArticlePDFByArticleId(articleId);});
    }

    @Test
    void testGetArticlePDFByArticleIdExceptionSecond() {
        Long articleId = 1l ;
        when(articlePDFRepository.findByArticleId(articleId)).thenThrow(new RuntimeException("--Illegal Argument Exception From Repo"));
        assertThrows(RuntimeException.class, ()->{articlePDFDao.getArticlePDFByArticleId(articleId);});
    }

}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\test\java\com\spglobal\ratings\ratingsdata\dao\CommonFeaturesDAOTest.java

package com.spglobal.ratings.ratingsdata.dao;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.web.client.HttpClientErrorException;

import com.spglobal.ratings.ratingsdata.entity.CLOABSContacts;
import com.spglobal.ratings.ratingsdata.entity.EntityDetails;
import com.spglobal.ratings.ratingsdata.entity.RelatedEntities;
import com.spglobal.ratings.ratingsdata.entity.SnlEntityDetailsUnrated;
import com.spglobal.ratings.ratingsdata.repository.CLOABSContactsRepository;
import com.spglobal.ratings.ratingsdata.repository.SnlEntityDetailsUnratedRepository;
import com.spglobal.ratings.ratingsdata.repository.ViewEntityDetailsRepository;
import com.spglobal.ratings.ratingsdata.repository.ViewRelatedEntitiesRepository;
import com.spglobal.ratings.ratingsdata.util.RatingsDataUtil;

@ContextConfiguration(classes = { CommonFeaturesDAO.class })
@ExtendWith(MockitoExtension.class)
public class CommonFeaturesDAOTest {
	@InjectMocks
	private CommonFeaturesDAO commonFeaturesDAO;

	@Mock
	private RatingsDataUtil ratingsUtil;

	@Mock
	ViewEntityDetailsRepository viewEntityDetailsRepository;

	@Mock
	ViewRelatedEntitiesRepository viewRelatedEntitiesRepository;

	@Mock
	SnlEntityDetailsUnratedRepository snlEntityDetailsUnratedRepository;
	
	@Mock
	CLOABSContactsRepository contactsRepositoryCLOABS;
	
	@Test
	void testGetOrgAndTickerDetailsByEntityId() throws Exception {
		List<EntityDetails> resp = commonFeaturesDAO.getOrgAndTickerDetailsByEntityId(123l);
		assertNotNull(resp);
	}
	
	@Test
	void testGetOrgAndTickerDetailsByEntityIdIllegalException() throws Exception {
		when(viewEntityDetailsRepository.findByEntityId(any())).thenThrow(new IllegalArgumentException());
		List<EntityDetails> resp = commonFeaturesDAO.getOrgAndTickerDetailsByEntityId(123l);
		assertEquals(resp.size(), 0);
	}

	@Test
	void testGetOrgAndTickerDetailsByEntityIdException() throws Exception {
		when(viewEntityDetailsRepository.findByEntityId(any())).thenThrow(new HttpClientErrorException(HttpStatus.NOT_FOUND));
		List<EntityDetails> resp = commonFeaturesDAO.getOrgAndTickerDetailsByEntityId(123l);
		assertEquals(resp.size(), 0);
	}
	
	@Test
	void testGetRelatedEntitiesByEntityId() throws Exception {
		List<RelatedEntities> resp = commonFeaturesDAO.getRelatedEntitiesByEntityId(123l, new HttpHeaders());
		assertNotNull(resp);
	}
	
	@Test
	void testGetRelatedEntitiesByEntityIdIllegalException() throws Exception {
		when(viewRelatedEntitiesRepository.findByEntityId(any())).thenThrow(new IllegalArgumentException());
		List<RelatedEntities> resp = commonFeaturesDAO.getRelatedEntitiesByEntityId(123l, new HttpHeaders());
		assertEquals(resp.size(), 0);
	}

	@Test
	void testGetRelatedEntitiesByEntityIdException() throws Exception {
		when(viewRelatedEntitiesRepository.findByEntityId(any())).thenThrow(new HttpClientErrorException(HttpStatus.NOT_FOUND));
		List<RelatedEntities> resp = commonFeaturesDAO.getRelatedEntitiesByEntityId(123l, new HttpHeaders());
		assertEquals(resp.size(), 0);
	}
	
	@Test
	void testGetRelatedEntitiesBySNLID() throws Exception {
		List<RelatedEntities> resp = commonFeaturesDAO.getRelatedEntitiesBySNLID("123l", new HttpHeaders());
		assertNotNull(resp);
	}
	
	@Test
	void testGetRelatedEntitiesBySNLIDIllegalException() throws Exception {
		when(viewRelatedEntitiesRepository.findByKeyInstId(any())).thenThrow(new IllegalArgumentException());
		List<RelatedEntities> resp = commonFeaturesDAO.getRelatedEntitiesBySNLID("123l", new HttpHeaders());
		assertEquals(resp.size(), 0);
	}

	@Test
	void testGetRelatedEntitiesBySNLIDException() throws Exception {
		when(viewRelatedEntitiesRepository.findByKeyInstId(any())).thenThrow(new HttpClientErrorException(HttpStatus.NOT_FOUND));
		List<RelatedEntities> resp = commonFeaturesDAO.getRelatedEntitiesBySNLID("123l", new HttpHeaders());
		assertEquals(resp.size(), 0);
	}
	@Test
	void testGetOrgAndTickerDetailsForsnlIds() throws Exception {
		List<String> entitys = Arrays.asList("384762", "384019");
		EntityDetails exmp1 = new EntityDetails();
		exmp1.setSnlId("384762");
		exmp1.setEntityId(11111L);
		List<EntityDetails> exmps = new ArrayList<EntityDetails>();
		when(viewEntityDetailsRepository.findOrgAndTickerDetailsForSnlIds(entitys)).thenReturn(exmps);
		List<EntityDetails> resp = commonFeaturesDAO.getOrgAndTickerDetailsForsnlIds(entitys);
		assertEquals(resp.size(), 0);
	}

	@Test
	void testGetOrgAndTickerDetailsForcapIds() throws Exception {
		List<String> entitys = Arrays.asList("384762", "384019");
		EntityDetails exmp1 = new EntityDetails();
		exmp1.setSnlId("384762");
		exmp1.setCapiqId("1244324");
		exmp1.setEntityId(11111L);
		List<EntityDetails> exmps = new ArrayList<EntityDetails>();
		when(viewEntityDetailsRepository.findOrgAndTickerDetailsForCapiqIds(entitys)).thenReturn(exmps);
		List<EntityDetails> resp = commonFeaturesDAO.getOrgAndTickerDetailsForCapiqIds(entitys);
		assertEquals(resp.size(), 0);
	}

	@Test
	void testGetOrgAndTickerDetailsForErrorEntityIds() throws Exception {
		List<String> entitys = Arrays.asList("q1", "q2");
		List<EntityDetails> resp = commonFeaturesDAO.getOrgAndTickerDetailsForsnlIds(entitys);
		assertEquals(resp.size(), 0);
	}
	
	@Test
	void testGetOrgAndTickerDetailsForEntityIdsException() throws Exception {
		List<String> entitys = Arrays.asList();
		when(viewEntityDetailsRepository.findOrgAndTickerDetailsForSnlIds(any())).thenThrow(new HttpClientErrorException(HttpStatus.NOT_FOUND));
		List<EntityDetails> resp = commonFeaturesDAO.getOrgAndTickerDetailsForsnlIds(entitys);
		assertEquals(resp.size(), 0);
	}
	
	@Test
	void testGetOrgAndTickerDetailsForEntityIdsError() throws Exception {
		List<String> entitys = Arrays.asList();
		when(viewEntityDetailsRepository.findOrgAndTickerDetailsForSnlIds(any())).thenThrow(new IllegalArgumentException());
		List<EntityDetails> resp = commonFeaturesDAO.getOrgAndTickerDetailsForsnlIds(entitys);
		assertEquals(resp.size(), 0);
	}
	
	@Test
	void testGetOrgAndTickerDetailsForSnlId() throws Exception {
		List<EntityDetails> details= new ArrayList<EntityDetails>();
		details.add(new EntityDetails());
		details.add(new EntityDetails());
		when(viewEntityDetailsRepository.findBySnlId(any())).thenReturn(details);
		List<EntityDetails> resp = commonFeaturesDAO.getOrgAndTickerDetailsForSnlId(384762l);
		assertEquals(resp.size(), 2);
		when(viewEntityDetailsRepository.findBySnlId(any())).thenReturn(null);
		when(snlEntityDetailsUnratedRepository.findBySnlId(any())).thenReturn(null);
		List<EntityDetails> resp1 = commonFeaturesDAO.getOrgAndTickerDetailsForSnlId(384762l);
		assertEquals(resp1, null);
	}
	
	@Test
	void testGetOrgAndTickerDetailsForSnlIdException() throws Exception {
		List<String> entitys = Arrays.asList();
		when(viewEntityDetailsRepository.findBySnlId(any())).thenThrow(new HttpClientErrorException(HttpStatus.NOT_FOUND));
		List<EntityDetails> resp = commonFeaturesDAO.getOrgAndTickerDetailsForSnlId(384762l);
		assertEquals(resp.size(), 0);
	}
	
	@Test
	void testGetOrgAndTickerDetailsForSnlIdError() throws Exception {
		List<String> entitys = Arrays.asList();
		when(viewEntityDetailsRepository.findBySnlId(any())).thenThrow(new IllegalArgumentException());
		List<EntityDetails> resp = commonFeaturesDAO.getOrgAndTickerDetailsForSnlId(384762l);
		assertEquals(resp.size(), 0);
	}


	@Test
	void testGetCLOABSContacts1() throws Exception {
		when(contactsRepositoryCLOABS.findByEntityIdAndSubSectorCodeAndContactType(689059L,"CDO","Analytical")).thenReturn(new ArrayList<>());
		List<CLOABSContacts> resp = commonFeaturesDAO.getCLOABSContacts(689059L,"CDO","Analytical");
		assertNotNull(resp);
	}
	
	
	@Test
	void testGetCLOABSContacts2() throws Exception {
		when(contactsRepositoryCLOABS.findByEntityIdAndSubSectorCode(689059L,"CDO")).thenReturn(new ArrayList<>());
		List<CLOABSContacts> resp = commonFeaturesDAO.getCLOABSContacts(689059L,"CDO",null);
		assertNotNull(resp);
	}

	@Test
	void testFindByInstitutionNameInList() {
		List<String> entityNames = new ArrayList<>();
		entityNames.add("APPLE INC.");

		List<SnlEntityDetailsUnrated> entityResponse = new ArrayList<SnlEntityDetailsUnrated>();
		SnlEntityDetailsUnrated entity = new SnlEntityDetailsUnrated();
		entity.setCapiqId("12121");
		entity.setSnlId("4004205");
		entity.setInstitutionName("Apple Inc.");
		entityResponse.add(entity);

		when(snlEntityDetailsUnratedRepository.findByInstitutionNameInList(entityNames)).thenReturn(entityResponse);
		List<SnlEntityDetailsUnrated> findByInstitutionNameInList = commonFeaturesDAO
				.findByInstitutionNameInList(entityNames);
		assertEquals(findByInstitutionNameInList, entityResponse);
	}

	@Test
	void testGetOrgAndTickerDetailsForCapiqd() throws Exception {
		when(viewEntityDetailsRepository.findByCapiqId(any())).thenReturn(new ArrayList<>());
		List<EntityDetails> resp = commonFeaturesDAO.getOrgAndTickerDetailsForCapiqId("12312");
		assertNotNull(resp);
	}

	@Test
	void testGetOrgAndTickerDetailsForCapiqds() throws Exception {
		when(viewEntityDetailsRepository.findOrgAndTickerDetailsForCapiqIds(any())).thenReturn(new ArrayList<>());
		List<EntityDetails> resp = commonFeaturesDAO.getOrgAndTickerDetailsForCapiqIds(Arrays.asList("1323"));
		assertNotNull(resp);
	}
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\test\java\com\spglobal\ratings\ratingsdata\dao\ConfigDetailsDaoTest.java

package com.spglobal.ratings.ratingsdata.dao;

import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.http.HttpStatus;
import org.springframework.test.context.junit.jupiter.SpringExtension;
import org.springframework.web.client.HttpClientErrorException;

import com.spglobal.ratings.ratingsdata.entity.ConfigDetails;
import com.spglobal.ratings.ratingsdata.repository.ConfigDetailsRepository;
import com.spglobal.ratings.ratingsdata.util.RatingsDataUtil;

@ExtendWith({SpringExtension.class, MockitoExtension.class})
public class ConfigDetailsDaoTest {
	
	@InjectMocks
	ConfigDetailsDao configDetailsDao;
	
	@Mock
	RatingsDataUtil ratingsUtil;
	
	@Mock
	ConfigDetailsRepository configDetailsRepository;

	List<ConfigDetails> configDetailsList = null; 
	ConfigDetails configDetail = null;
	
	@BeforeEach
	public void init() throws Exception {
		configDetailsList = new ArrayList<>(1);	
		
		configDetail = new ConfigDetails();
		configDetail.setConfigKey("NON_PUBLIC_OPN_SWITCH");
		configDetail.setConfigValue(0);
		
		configDetailsList.add(configDetail);
		
	}
	
	@Test
	public void getConfigDetailsTest() {
		List<String> commaSepKeys = new ArrayList<String>();
		commaSepKeys.add("NON_PUBLIC_OPN_SWITCH");
//		List<String> keysArrayList = new ArrayList<String>(1);
//		keysArrayList.add("NON_PUBLIC_OPN_SWITCH");
		when(configDetailsRepository.findByConfigKeys(commaSepKeys)).thenReturn(configDetailsList);
		List<ConfigDetails> list = configDetailsDao.getConfigDetails(commaSepKeys);
		assertNotNull(list);
	}
	
	@Test
	public void getConfigDetailsError1Test() {
		List<String> commaSepKeys = new ArrayList<String>();
		commaSepKeys.add("NON_PUBLIC_OPN_SWITCH");
//		List<String> keysArrayList = new ArrayList<String>(1);
//		keysArrayList.add(commaSepKeys);
		when(configDetailsRepository.findByConfigKeys(commaSepKeys)).thenThrow(new IllegalArgumentException("--Illegal Argument Exception From Repo"));
		List<ConfigDetails> list = configDetailsDao.getConfigDetails(commaSepKeys);
		assertNull(list);
	}

	@Test
	public void getConfigDetailsError2Test() {
		List<String> commaSepKeys = new ArrayList<String>();
		commaSepKeys.add("NON_PUBLIC_OPN_SWITCH");
//		List<String> keysArrayList = new ArrayList<String>(1);
//		keysArrayList.add(commaSepKeys);
		when(configDetailsRepository.findByConfigKeys(commaSepKeys)).thenThrow(new HttpClientErrorException(HttpStatus.NOT_FOUND));
		List<ConfigDetails> list = configDetailsDao.getConfigDetails(commaSepKeys);
		assertNull(list);
	}

}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\test\java\com\spglobal\ratings\ratingsdata\dao\CoreOrgIdKeyInstnMapDaoTest.java

package com.spglobal.ratings.ratingsdata.dao;

import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.http.HttpStatus;
import org.springframework.test.context.junit.jupiter.SpringExtension;
import org.springframework.web.client.HttpClientErrorException;

import com.spglobal.ratings.ratingsdata.entity.CoreOrgIdKeyInstnMap;
import com.spglobal.ratings.ratingsdata.entity.CoreOrgIdKeyInstnSPIdMap;
import com.spglobal.ratings.ratingsdata.model.EntityTypeIdsRequest;
import com.spglobal.ratings.ratingsdata.repository.CoreOrgIdKeyInstnMapRepository;
import com.spglobal.ratings.ratingsdata.repository.CoreOrgIdKeyInstnSPIdMapRepository;
import com.spglobal.ratings.ratingsdata.util.RatingsDataConstant;
import com.spglobal.ratings.ratingsdata.util.RatingsDataUtil;

@ExtendWith({SpringExtension.class, MockitoExtension.class})
public class CoreOrgIdKeyInstnMapDaoTest {
	
	@InjectMocks
	CoreOrgIdKeyInstnMapDao coreOrgIdKeyInstnMapDao;
	
	@Mock
	RatingsDataUtil ratingsUtil;
	
	@Mock
	CoreOrgIdKeyInstnMapRepository coreOrgIdKeyInstnMapRepo;
	
	@Mock
	CoreOrgIdKeyInstnSPIdMapRepository coreOrgIdKeyInstnSPIdMapRepository;
	
	
	List<CoreOrgIdKeyInstnMap> coreOrgIdKeyInstnList = null;
	
	CoreOrgIdKeyInstnMap coreOrgIdKeyInstnMap = null; 
	
	@BeforeEach
	public void init() throws Exception {
		coreOrgIdKeyInstnList = new ArrayList<>();
		
		coreOrgIdKeyInstnMap = new CoreOrgIdKeyInstnMap();
		
		coreOrgIdKeyInstnList.add(coreOrgIdKeyInstnMap);
		
	}
	
	@Test
	public void getCoreOrgIdsTest() {
		String commaSep = "4004205";
		
		List<String> keyInstns = new ArrayList<String>();
		keyInstns.add(commaSep);
		
		List<CoreOrgIdKeyInstnMap> list = null;
		
		when(coreOrgIdKeyInstnMapRepo.findByFinsIdentifier(keyInstns)).thenReturn(coreOrgIdKeyInstnList);
		
		list = coreOrgIdKeyInstnMapDao.getCoreOrgIds(keyInstns);
		//assertEquals(list, null);
		assertNotNull(list);
	}
	
	@Test
	public void getCoreOrgIdsTestError() {
		String commaSep = "4004205";
		List<String> keyInstns = new ArrayList<String>();
		keyInstns.add(commaSep);
		List<CoreOrgIdKeyInstnMap> list = null;
		when(coreOrgIdKeyInstnMapRepo.findByFinsIdentifier(keyInstns)).thenThrow(new IllegalArgumentException("--Illegal Argument Exception From Repo"));
		list = coreOrgIdKeyInstnMapDao.getCoreOrgIds(keyInstns);
		assertNull(list);
	}
	
	@Test
	public void getCoreOrgIdsTestError1() {
		String commaSep = "4004205";
		List<String> keyInstns = new ArrayList<String>();
		keyInstns.add(commaSep);
		List<CoreOrgIdKeyInstnMap> list = null;
		when(coreOrgIdKeyInstnMapRepo.findByFinsIdentifier(keyInstns)).thenThrow(new HttpClientErrorException(HttpStatus.NOT_FOUND));
		list = coreOrgIdKeyInstnMapDao.getCoreOrgIds(keyInstns);
		assertNull(list);
	}

	@Test
	void getCoreOrgIdsByCapiqId() {
		List<String> listparam = new ArrayList<>();
		listparam.add("13241555");
		when(coreOrgIdKeyInstnMapRepo.getOrgIdByCapiqIds(any())).thenReturn(new ArrayList<>());
		List<CoreOrgIdKeyInstnMap> list = coreOrgIdKeyInstnMapDao.getCoreOrgIdsByCapiqId(listparam);
		assertNotNull(list);
	}

	@Test
	void getCoreOrgIdsByCapiqId400() {
		when(coreOrgIdKeyInstnMapRepo.getOrgIdByCapiqIds(any())).thenThrow(new HttpClientErrorException(HttpStatus.NOT_FOUND));
		List<CoreOrgIdKeyInstnMap> list = coreOrgIdKeyInstnMapDao.getCoreOrgIdsByCapiqId(Arrays.asList("424234","551333"));
		assertNull(list);
	}

	@Test
	void getCoreOrgIdsByType() throws Exception {
		List<String> listparam = new ArrayList<>();
		listparam.add("13241555");
		when(coreOrgIdKeyInstnMapRepo.getOrgIdByCapiqIds(any())).thenReturn(new ArrayList<>());
		List<CoreOrgIdKeyInstnMap> list = coreOrgIdKeyInstnMapDao.getCoreOrgIdsByTypeandList("CAPIQ",listparam);
		assertNotNull(list);
	}

	@Test
	void getCapiqIdsbyCoreSnlSpIdsCoreId() {
		EntityTypeIdsRequest request = new EntityTypeIdsRequest();
		request.setEntityType(RatingsDataConstant.COREID_STR);
		request.setEntityIds(Arrays.asList("12345", "67890"));

		when(coreOrgIdKeyInstnSPIdMapRepository.getCapIQIdsByCoreIds(any())).thenReturn(new ArrayList<>());

		List<CoreOrgIdKeyInstnSPIdMap> result = coreOrgIdKeyInstnMapDao.getCapiqIdsbyCoreSnlSpIds(request);
		assertNotNull(result);
	}

	@Test
	void getCapiqIdsbyCoreSnlSpIdsSpId() {
		EntityTypeIdsRequest request = new EntityTypeIdsRequest();
		request.setEntityType(RatingsDataConstant.SPID_STR);
		request.setEntityIds(Arrays.asList("12345", "67890"));

		when(coreOrgIdKeyInstnSPIdMapRepository.getCapIQIdsBySpIds(any())).thenReturn(new ArrayList<>());

		List<CoreOrgIdKeyInstnSPIdMap> result = coreOrgIdKeyInstnMapDao.getCapiqIdsbyCoreSnlSpIds(request);
		assertNotNull(result);
	}

	@Test
	void getCapiqIdsbyCoreSnlSpIdsSnlId() {
		EntityTypeIdsRequest request = new EntityTypeIdsRequest();
		request.setEntityType(RatingsDataConstant.SNLID_STR);
		request.setEntityIds(Arrays.asList("12345", "67890"));

		when(coreOrgIdKeyInstnSPIdMapRepository.getCapIQIdsBySnlIds(any())).thenReturn(new ArrayList<>());

		List<CoreOrgIdKeyInstnSPIdMap> result = coreOrgIdKeyInstnMapDao.getCapiqIdsbyCoreSnlSpIds(request);
		assertNotNull(result);
	}
}


	


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\test\java\com\spglobal\ratings\ratingsdata\dao\CurrencyExchangeRateDaoTest.java

package com.spglobal.ratings.ratingsdata.dao;

import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertNull;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.test.context.junit.jupiter.SpringExtension;

import com.spglobal.ratings.ratingsdata.entity.CurrencyExchangeRate;
import com.spglobal.ratings.ratingsdata.entity.CurrencyLookupEntity;
import com.spglobal.ratings.ratingsdata.repository.CurrencyExchangeRateRepository;
import com.spglobal.ratings.ratingsdata.repository.CurrencyLookupRepository;

@ExtendWith({ SpringExtension.class, MockitoExtension.class })
public class CurrencyExchangeRateDaoTest {

	@InjectMocks
	CurrencyExchangeRateDao currencyExchangeRateDao;

	@Mock
	CurrencyExchangeRateRepository currencyExchangeRateRepository;

	@Mock
	private CurrencyLookupRepository currencyLookupRepository;

	@Test
	public void getMajorCurrencyExchangeRatesTest() {
		Set<Long> finPeriodIds = new HashSet<Long>();
		finPeriodIds.add(156427l);
		finPeriodIds.add(156425l);
		finPeriodIds.add(156422l);
		List<CurrencyExchangeRate> response = currencyExchangeRateDao.getMajorCurrencyExchangeRates(finPeriodIds,
				"USD");
		assertNotNull(response);
	}

	@Test
	public void getMinorCurrencyExchangeRatesTest() {
		Set<Long> finPeriodIds = new HashSet<Long>();
		finPeriodIds.add(156427l);
		finPeriodIds.add(156425l);
		finPeriodIds.add(156422l);
		List<CurrencyExchangeRate> response = currencyExchangeRateDao.getMinorCurrencyExchangeRates(finPeriodIds,
				"INR");
		assertNotNull(response);
	}

	@Test
	public void getFindByCurrencyLookupTest() {
		List<CurrencyLookupEntity> response = currencyExchangeRateDao.findByCurrencyLookup();
		assertNotNull(response);
	}
	
	@Test
	public void getFindByCurrencyLookupCodeTest() {
		CurrencyLookupEntity response = currencyExchangeRateDao.getCurrencyByCurrencyCode("USD");
		assertNull(response);
	}
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\test\java\com\spglobal\ratings\ratingsdata\dao\CyberRiskAssessmentDaoTest.java

package com.spglobal.ratings.ratingsdata.dao;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;


import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import org.springframework.test.context.junit.jupiter.SpringExtension;

import com.spglobal.ratings.ratingsdata.entity.PeerSuppliersPortfolioContents;
import com.spglobal.ratings.ratingsdata.entity.SnlEntityDetailsUnrated;
import com.spglobal.ratings.ratingsdata.repository.PortfolioContentsRepository;
import com.spglobal.ratings.ratingsdata.repository.SnlEntityDetailsUnratedRepository;
import com.spglobal.ratings.ratingsdata.util.RatingsDataUtil;


@ExtendWith({SpringExtension.class, MockitoExtension.class})
public class CyberRiskAssessmentDaoTest {
    
    @InjectMocks
    CyberRiskAssessmentPublicDao cyberRiskAssessmentDao;
	
	@Mock
	PortfolioContentsRepository portfolioContentsRepository;
	
	@Mock
	SnlEntityDetailsUnratedRepository snlEntityDetailsUnratedRepository;
	
	@Mock
	RatingsDataUtil ratingsUtil;
	
	
	@Test
	public void getPeerSuppliersPortfolioContentsTestwithValidResponse() {
		List<String> dummyList = new ArrayList<String>(123456);
		List<PeerSuppliersPortfolioContents> data = new ArrayList<PeerSuppliersPortfolioContents>();
		
		when(portfolioContentsRepository.findByKeyInstnIds(dummyList)).thenReturn(data);
		when(ratingsUtil.sanitizeString(dummyList.toString())).thenReturn("");
		List<PeerSuppliersPortfolioContents> plist = cyberRiskAssessmentDao.getCyberPeersPortfolioContents(dummyList,"");
		assertEquals(plist, data);
	}
	
	@Test
	public void getPeerSuppliersPortfolioContentsTestwithThrowingException() {
		List<String> dummyList = new ArrayList<String>(123456);
		List<PeerSuppliersPortfolioContents> list = new ArrayList<PeerSuppliersPortfolioContents>();
		when(portfolioContentsRepository.findByKeyInstnIds(dummyList)).thenThrow(new IllegalArgumentException("--Illegal Argument Exception From Repo"));
		when(ratingsUtil.sanitizeString(dummyList.toString())).thenReturn("");
		
		try {
			list = cyberRiskAssessmentDao.getCyberPeersPortfolioContents(dummyList,"");
		}catch(Exception e){
				assertEquals(IllegalArgumentException.class,e.getClass());
		}
	}
	
	@Test
	public void getPeerSuppliersPortfolioContentsTestwithCNDomain() {
		List<String> dummyList = new ArrayList<String>(123456);
		List<PeerSuppliersPortfolioContents> data = new ArrayList<PeerSuppliersPortfolioContents>();
		
		when(portfolioContentsRepository.findByKeyInstnIdsForCNDomain(dummyList)).thenReturn(data);
		when(ratingsUtil.sanitizeString(dummyList.toString())).thenReturn("");
		List<PeerSuppliersPortfolioContents> plist = cyberRiskAssessmentDao.getCyberPeersPortfolioContents(dummyList,"CN");
		assertEquals(plist, data);
	}
    
	@Test
	public void getUnratedEntityDetailsTestwithValidResponse() {
		List<String> dummyList = new ArrayList<>();
		dummyList.add("123");
		dummyList.add("456");
		List<PeerSuppliersPortfolioContents> data = new ArrayList<>();
		PeerSuppliersPortfolioContents psp = new PeerSuppliersPortfolioContents();
		psp.setKeyInstnId("123");
		data.add(psp);
		
		List<SnlEntityDetailsUnrated>  unratedSnlEntityDetails = new ArrayList<>();
		SnlEntityDetailsUnrated  e = new SnlEntityDetailsUnrated();
		e.setSnlId("456");
		unratedSnlEntityDetails.add(e);
		
		List<PeerSuppliersPortfolioContents> finalList = new ArrayList<>();
		finalList.addAll(data);
		
		PeerSuppliersPortfolioContents unrated = new PeerSuppliersPortfolioContents();
		psp.setKeyInstnId("456");
		finalList.add(unrated);
		
		when(portfolioContentsRepository.findByKeyInstnIds(dummyList)).thenReturn(data);
		when(snlEntityDetailsUnratedRepository.findBySnlIds(dummyList)).thenReturn(unratedSnlEntityDetails);
		when(ratingsUtil.sanitizeString(dummyList.toString())).thenReturn("");
		List<PeerSuppliersPortfolioContents> plist = cyberRiskAssessmentDao.getCyberPeersPortfolioContents(dummyList,"");
		assertEquals(plist, data);
	}
	
	@Test
	public void getUnratedEntityDetailsTestwithThrowingException() {
		List<PeerSuppliersPortfolioContents> list = new ArrayList<PeerSuppliersPortfolioContents>();
		List<String> dummyList = new ArrayList<>();
		dummyList.add("123");
		dummyList.add("456");
		List<PeerSuppliersPortfolioContents> data = new ArrayList<>();
		PeerSuppliersPortfolioContents psp = new PeerSuppliersPortfolioContents();
		psp.setKeyInstnId("123");
		data.add(psp);
	
		when(portfolioContentsRepository.findByKeyInstnIds(dummyList)).thenReturn(data);
		when(snlEntityDetailsUnratedRepository.findBySnlIds(dummyList)).thenThrow(new IllegalArgumentException("--Illegal Argument Exception From Repo"));
		when(ratingsUtil.sanitizeString(dummyList.toString())).thenReturn("");
		
		try {
			list = cyberRiskAssessmentDao.getCyberPeersPortfolioContents(dummyList,"");
		}catch(Exception e){
				assertEquals(IllegalArgumentException.class,e.getClass());
		}
	}
	
	@Test
	public void getUnratedEntityDetailsTestwithCNDomain() {
		List<String> dummyList = new ArrayList<>();
		dummyList.add("123");
		dummyList.add("456");
		List<PeerSuppliersPortfolioContents> data = new ArrayList<>();
		PeerSuppliersPortfolioContents psp = new PeerSuppliersPortfolioContents();
		psp.setKeyInstnId("123");
		data.add(psp);
		
		List<SnlEntityDetailsUnrated>  unratedSnlEntityDetails = new ArrayList<>();
		SnlEntityDetailsUnrated  e = new SnlEntityDetailsUnrated();
		e.setSnlId("456");
		unratedSnlEntityDetails.add(e);
		
		List<PeerSuppliersPortfolioContents> finalList = new ArrayList<>();
		finalList.addAll(data);
		
		PeerSuppliersPortfolioContents unrated = new PeerSuppliersPortfolioContents();
		psp.setKeyInstnId("456");
		finalList.add(unrated);
		
		when(portfolioContentsRepository.findByKeyInstnIdsForCNDomain(dummyList)).thenReturn(data);
		when(snlEntityDetailsUnratedRepository.findBySnlIdsForCNDomain(dummyList)).thenReturn(unratedSnlEntityDetails);
		when(ratingsUtil.sanitizeString(dummyList.toString())).thenReturn("");
		List<PeerSuppliersPortfolioContents> plist = cyberRiskAssessmentDao.getCyberPeersPortfolioContents(dummyList,"CN");
		assertEquals(plist, data);
	}
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\test\java\com\spglobal\ratings\ratingsdata\dao\DashboardMyRatingDaoTest.java

package com.spglobal.ratings.ratingsdata.dao;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.when;

import java.util.Collections;
import java.util.List;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.http.HttpStatus;
import org.springframework.test.context.junit.jupiter.SpringExtension;
import org.springframework.web.client.HttpClientErrorException;

import com.spglobal.ratings.ratingsdata.entity.DashBoardMyRating;
import com.spglobal.ratings.ratingsdata.entity.FinancialCustomRatingEntity;
import com.spglobal.ratings.ratingsdata.repository.DashboardMyRatingRepository;
import com.spglobal.ratings.ratingsdata.util.RatingsDataUtil;

@ExtendWith({SpringExtension.class, MockitoExtension.class})
public class DashboardMyRatingDaoTest {
	
	@InjectMocks
	DashboardMyRatingDao dashboardMyRatingDao;
	
	@Mock
	RatingsDataUtil ratingsUtil;
	
	@Mock
	DashboardMyRatingRepository myRatingRepository;
	
	DashBoardMyRating myRating;
	
	@BeforeEach
	public void init() throws Exception {		
		myRating = new DashBoardMyRating();
		myRating.setEntityId(Long.valueOf(100007));
		myRating.setDebtType("Issuer Credit Rating");
		myRating.setRatingType("Foreign Currency LT");
		myRating.setRating("BB-");
		myRating.setCreditwatchOutlook("Stable");
		myRating.setEntityRatingInd("Y");
	}

	
	@Test
	public void getDashboardMyRatingTest() {
		System.out.println("@DashboardMyRatingDaoTest: In getDashboardMyRatingTest method");
		Long entityId = Long.valueOf(100007);
		System.out.println("@DashboardMyRatingDaoTest: In getDashboardMyRatingTest method"+entityId);
		DashBoardMyRating rating = new DashBoardMyRating();
		when(myRatingRepository.findByEntityId(entityId)).thenReturn(myRating);
		rating = dashboardMyRatingDao.getDashBoardMyRatingDetails(entityId);
		assertEquals(rating, myRating);
	}
	

	@Test
	public void getDashboardMyRatingTest1() {
		Long entityId = Long.valueOf(43255666);
		when(myRatingRepository.findByEntityId(entityId)).thenThrow(new IllegalArgumentException("--Illegal Argument Exception From Repo"));
		DashBoardMyRating resp = dashboardMyRatingDao.getDashBoardMyRatingDetails(entityId);
		assertNull(resp);
	}
	
	@Test
	public void getDashboardMyRatingFailureTest() {
		Long entityId = Long.valueOf(43255666);
		when(myRatingRepository.findByEntityId(entityId)).thenThrow(new HttpClientErrorException(HttpStatus.NOT_FOUND));
		DashBoardMyRating resp = dashboardMyRatingDao.getDashBoardMyRatingDetails(entityId);
		assertNull(resp);
	}
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\test\java\com\spglobal\ratings\ratingsdata\dao\DefinitionsConfigDaoTest.java

package com.spglobal.ratings.ratingsdata.dao;

import static org.junit.jupiter.api.Assertions.assertNull;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.http.HttpStatus;
import org.springframework.test.context.junit.jupiter.SpringExtension;
import org.springframework.web.client.HttpClientErrorException;

import com.spglobal.ratings.ratingsdata.entity.DefinitionsConfig;
import com.spglobal.ratings.ratingsdata.repository.DefinitionsConfigRepository;

@ExtendWith({ SpringExtension.class, MockitoExtension.class })
public class DefinitionsConfigDaoTest {

	@InjectMocks
	DefinitionsConfigDAO definitionsConfigDAO;

	@Mock
	DefinitionsConfigRepository definitionsConfigRepository;

	@Test
	public void getDefinitionConfigDetailsSuccessCountTest() throws Exception {
		DefinitionsConfig definitions = new DefinitionsConfig();
		definitions.setUiConfigId(21);
		definitions.setAnalyticCaseType("IST");
		definitions.setDefinition(
				"Test Definition The business risk profile (BRP) is based on S&P Global Ratings' analysis of an insurer's competitive position, modified by the IICRA.");
		definitions.setDataElementCode("SP_NR_BRP_ANCH");
		definitions.setDataElementGroup("Scores");
		definitions.setDataElementType("");
		definitions.setElementId(1);
		definitions.setDisplayName("Business Risk Profile");
		definitions.setHighlightFlag("1");
		definitions.setCreatedUser("TestUser");
		definitions.setCreatedDatetime(null);
		definitions.setSortOrder(1);
		List<DefinitionsConfig> definitionsConfig = new ArrayList<DefinitionsConfig>();
		definitionsConfig.add(definitions);
		Mockito.when(definitionsConfigRepository.getDefinitions()).thenReturn(definitionsConfig);

		List<DefinitionsConfig> response = definitionsConfigDAO.getDefinitionConfigDetails();
		Assertions.assertEquals(1, response.size());
	}

	@Test
	public void getRatingCriteriaArticlesFailureTest1() {
		when(definitionsConfigRepository.getDefinitions())
				.thenThrow(new IllegalArgumentException("--Illegal Argument Exception From Repo"));
		List<DefinitionsConfig> response = definitionsConfigDAO.getDefinitionConfigDetails();
		assertNull(response);
	}

	@Test
	public void getRatingCriteriaArticlesFailureTest2() {
		when(definitionsConfigRepository.getDefinitions())
				.thenThrow(new HttpClientErrorException(HttpStatus.NOT_FOUND));
		List<DefinitionsConfig> response = definitionsConfigDAO.getDefinitionConfigDetails();
		assertNull(response);
	}

	@Test
	public void getDefinitionConfigDetailsByTypeSuccessCountTest() throws Exception {
		String type = "CORP";
		List<String> elementTypes = new ArrayList<String>();
		List<String> elementGroups = new ArrayList<String>();
		List<String> elementTypesLower = new ArrayList<String>();
		List<String> elementGroupsLower = new ArrayList<String>();

		elementTypes.add("Reconciliation");
		elementGroups.add("DIVIDENDS");
		elementTypesLower.add("reconciliation");
		elementGroupsLower.add("dividends");

		DefinitionsConfig definitions = new DefinitionsConfig();
		definitions.setUiConfigId(21);
		definitions.setAnalyticCaseType("CORP");
		definitions.setDataElementCode("S1_ESG");
		definitions.setDataElementType("Reconciliation");
		definitions.setDataElementGroup("DIVIDENDS");
		definitions.setDisplayName("Business Risk Profile");
		definitions.setDefinition(
				"Test Definition The business risk profile (BRP) is based on S&P Global Ratings' analysis of an insurer's competitive position, modified by the IICRA.");
		definitions.setSortOrder(1);
		definitions.setHighlightFlag("Y");
		definitions.setCreatedUser("R360_APPDATA");
		definitions.setCreatedDatetime(null);
		definitions.setUpdatedUser("R360_APPDATA");
		definitions.setUpdatedDatetime(null);
		List<DefinitionsConfig> definitionsConfig = new ArrayList<DefinitionsConfig>();
		definitionsConfig.add(definitions);

		Mockito.when(
				definitionsConfigRepository.getDefinitions(type.toLowerCase(), elementTypesLower, elementGroupsLower))
				.thenReturn(definitionsConfig);

		List<DefinitionsConfig> response = definitionsConfigDAO.getDefinitionConfigDetails(type, elementTypes,
				elementGroups);
		Assertions.assertEquals(1, response.size());
	}
	
	@Test
	public void getDefinitionConfigDetailsByTypeSuccessCountTest1() throws Exception {
		String type = "CORP";
		List<String> elementTypes = new ArrayList<String>();
		List<String> elementGroups = new ArrayList<String>();
		List<DefinitionsConfig> definitionsConfig = new ArrayList<DefinitionsConfig>();
		definitionsConfig.add(new DefinitionsConfig());

		Mockito.when(
				definitionsConfigRepository.getDefinitions(type.toLowerCase(), elementTypes, elementGroups))
				.thenReturn(definitionsConfig);

		List<DefinitionsConfig> response = definitionsConfigDAO.getDefinitionConfigDetails(type, elementTypes,
				elementGroups);
		Assertions.assertEquals(1, response.size());
	}

	@Test
	public void getDefinationConfigWithParamsError1() {
		String type = "CORP";
		List<String> elementTypes = new ArrayList<String>();
		List<String> elementGroups = new ArrayList<String>();
		List<String> elementTypesLower = new ArrayList<String>();
		List<String> elementGroupsLower = new ArrayList<String>();

		elementTypes.add("Reconciliation");
		elementGroups.add("DIVIDENDS");
		elementTypesLower.add("reconciliation");
		elementGroupsLower.add("dividends");
		when(definitionsConfigRepository.getDefinitions(type.toLowerCase(), elementTypesLower, elementGroupsLower))
				.thenThrow(new IllegalArgumentException("--Illegal Argument Exception From Repo"));
		Assertions.assertThrows(IllegalArgumentException.class, () -> {
			definitionsConfigDAO.getDefinitionConfigDetails(type, elementTypes, elementGroups);
		});
	}

	@Test
	public void getDefinationConfigWithParamsError2() {
		String type = "CORP";
		List<String> elementTypes = new ArrayList<String>();
		List<String> elementGroups = new ArrayList<String>();
		List<String> elementTypesLower = new ArrayList<String>();
		List<String> elementGroupsLower = new ArrayList<String>();

		elementTypes.add("Reconciliation");
		elementGroups.add("DIVIDENDS");
		elementTypesLower.add("reconciliation");
		elementGroupsLower.add("dividends");
		when(definitionsConfigRepository.getDefinitions(type.toLowerCase(), elementTypesLower, elementGroupsLower))
				.thenThrow(new HttpClientErrorException(HttpStatus.NOT_FOUND));
		Assertions.assertThrows(Exception.class, () -> {
			definitionsConfigDAO.getDefinitionConfigDetails(type, elementTypes, elementGroups);
		});
	}

}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\test\java\com\spglobal\ratings\ratingsdata\dao\DeriveRatingDaoTest.java

package com.spglobal.ratings.ratingsdata.dao;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.test.context.junit.jupiter.SpringExtension;

import com.spglobal.ratings.ratingsdata.entity.DeriveRating;
import com.spglobal.ratings.ratingsdata.repository.DeriveRatingRepository;

@ExtendWith({SpringExtension.class, MockitoExtension.class})
public class DeriveRatingDaoTest {

	@InjectMocks
	DeriveRatingDao deriveRatingDao;
	
	@Mock
	DeriveRatingRepository deriveRatingRepository;
	
	@Test
	public void getRatingCriteriaArticlesSuccessTest1() throws Exception {
		DeriveRating deriveRating = new DeriveRating();
		deriveRating.setWorkObjectId("W-78009");
		
		Long ratingDetailId = Long.valueOf(43374052);
		Mockito.when(deriveRatingRepository.getDeriveRatingByRatingDetailId(ratingDetailId)).thenReturn(deriveRating);
		Assertions.assertEquals(deriveRating, deriveRatingDao.getDeriveRatingByRatingDetailId(ratingDetailId));
	}
	
	@Test()
	public void getRatingCriteriaArticlesFailureTest1() throws Exception {
		Long ratingDetailId = Long.valueOf(43374052);
		Mockito.when(deriveRatingRepository.getDeriveRatingByRatingDetailId(ratingDetailId)).thenThrow(new RuntimeException("NullPointer Exception"));
		Assertions.assertThrows(Exception.class, ()->{ deriveRatingDao.getDeriveRatingByRatingDetailId(ratingDetailId); });
	}
	
	@Test()
	public void getRatingCriteriaArticlesFailureTest2() throws Exception {
		Assertions.assertThrows(Exception.class, ()->{ deriveRatingDao.getDeriveRatingByRatingDetailId(null); });
	}
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\test\java\com\spglobal\ratings\ratingsdata\dao\EntityCurrentRatingDaoTest.java

package com.spglobal.ratings.ratingsdata.dao;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.http.HttpStatus;
import org.springframework.test.context.junit.jupiter.SpringExtension;
import org.springframework.web.client.HttpClientErrorException;

import com.spglobal.ratings.ratingsdata.entity.EntityCurrentRating;
import com.spglobal.ratings.ratingsdata.entity.EntityCurrentRatingPublic;
import com.spglobal.ratings.ratingsdata.entity.EntityRatingsTACPublic;
import com.spglobal.ratings.ratingsdata.entity.EntityRatingsTACPvt;
import com.spglobal.ratings.ratingsdata.repository.EntityCurrentRatingPublicRepo;
import com.spglobal.ratings.ratingsdata.repository.EntityCurrentRatingRepository;
import com.spglobal.ratings.ratingsdata.repository.EntityRatingsTACPublicRepo;
import com.spglobal.ratings.ratingsdata.repository.EntityRatingsTACPvtRepo;
import com.spglobal.ratings.ratingsdata.util.RatingsDataUtil;

@ExtendWith({SpringExtension.class, MockitoExtension.class})
public class EntityCurrentRatingDaoTest {
	
	@InjectMocks
	EntityCurrentRatingDao entityCurrentRatingsDao;
	
	@Mock
	RatingsDataUtil ratingsUtil;
	
	@Mock
	EntityCurrentRatingRepository entityRatingsRepo;
	
	@Mock
	EntityCurrentRatingPublicRepo entityRatingsPublicRepo;
	
	@Mock
	EntityRatingsTACPublicRepo entityRatingsTACPublicRepo;
	
	@Mock
	EntityRatingsTACPvtRepo entityRatingsTACPvtRepo;
	
	EntityCurrentRating entityCurrentRating = null;
	EntityCurrentRatingPublic entityCurrentRatingPub = null;
	
	
	EntityRatingsTACPublic entityRatingsTACPublic = null;
	List<EntityRatingsTACPublic> entityRatingsTACPubList = null;
	
	EntityRatingsTACPvt entityRatingsTACPvt = null;
	List<EntityRatingsTACPvt> entityRatingsTACPvtList = null;
	
	@BeforeEach
	public void init() throws Exception {
		entityCurrentRating = new EntityCurrentRating();
		entityCurrentRating.setEntityId(Long.valueOf(100751));
		entityCurrentRating.setDebtTypeDesc("Issuer Credit Rating");
		entityCurrentRating.setRatingTypeDesc("Foreign Currency LT");
		entityCurrentRating.setCurrentRatingSymbol("BBB-");
		
		
		entityCurrentRatingPub = new EntityCurrentRatingPublic();
		entityCurrentRatingPub.setEntityId(Long.valueOf(100751));
		entityCurrentRatingPub.setDebtTypeDesc("Issuer Credit Rating");
		entityCurrentRatingPub.setRatingTypeDesc("Foreign Currency LT");
		entityCurrentRatingPub.setCurrentRatingSymbol("AAA");
		
		entityRatingsTACPubList = new ArrayList<EntityRatingsTACPublic>(1);
		entityRatingsTACPublic = new EntityRatingsTACPublic();
		entityRatingsTACPublic.setEntityId(Long.valueOf(100751));
		entityRatingsTACPublic.setDebtTypeDesc("Issuer Credit Rating");
		entityRatingsTACPublic.setRatingTypeDesc("Foreign Currency LT");
		entityRatingsTACPublic.setCurrentRatingSymbol("AAA");
		entityRatingsTACPubList.add(entityRatingsTACPublic);
		
		entityRatingsTACPvtList = new ArrayList<EntityRatingsTACPvt>(1);
		entityRatingsTACPvt = new EntityRatingsTACPvt();
		entityRatingsTACPvt.setEntityId(Long.valueOf(100751));
		entityRatingsTACPvt.setDebtTypeDesc("Issuer Credit Rating");
		entityRatingsTACPvt.setRatingTypeDesc("Foreign Currency LT");
		entityRatingsTACPvt.setCurrentRatingSymbol("AAA");
		entityRatingsTACPvtList.add(entityRatingsTACPvt);
	}
	
	@Test
	public void getEntityCurrentRatingTest() {
		System.out.println("@EntityRatingsDaoTest: In getEntityRatingsTest method");
		Long entityId = Long.valueOf(100751);
		
		EntityCurrentRating e = new EntityCurrentRating();
		when(entityRatingsRepo.findByEntityId(entityId)).thenReturn(entityCurrentRating);
		e = entityCurrentRatingsDao.getEntityCurrentRating(entityId);
		assertEquals(e, entityCurrentRating);
	}
	
	@Test
	public void getEntityCurrentRatingTestError() {
		System.out.println("@EntityRatingsDaoTest: In getEntityRatingsTest method");
		Long entityId = Long.valueOf(100751);
		when(entityRatingsRepo.findByEntityId(entityId)).thenThrow(new HttpClientErrorException(HttpStatus.NOT_FOUND));
		EntityCurrentRating e = entityCurrentRatingsDao.getEntityCurrentRating(entityId);
		assertNull(e);
	}
	
	@Test
	public void getEntityCurrentRatingTestError1() {
		System.out.println("@EntityRatingsDaoTest: In getEntityRatingsTest method");
		Long entityId = Long.valueOf(100751);
		when(entityRatingsRepo.findByEntityId(entityId)).thenThrow(new IllegalArgumentException());
		EntityCurrentRating e = entityCurrentRatingsDao.getEntityCurrentRating(entityId);
		assertNull(e);
	}
	
	@Test
	public void getEntityCurrentRatingPublicTestError() {
		System.out.println("@EntityRatingsDaoTest: In getEntityCurrentRatingPublic method");
		Long entityId = Long.valueOf(100751);
		when(entityRatingsPublicRepo.findByEntityId(entityId)).thenThrow(new HttpClientErrorException(HttpStatus.NOT_FOUND));
		EntityCurrentRatingPublic e = entityCurrentRatingsDao.getEntityCurrentRatingPublic(entityId);
		assertNull(e);
	}
	
	@Test
	public void getEntityCurrentRatingPublicTestError1() {
		System.out.println("@EntityRatingsDaoTest: In getEntityCurrentRatingPublic method");
		Long entityId = Long.valueOf(100751);
		when(entityRatingsPublicRepo.findByEntityId(entityId)).thenThrow(new IllegalArgumentException());
		EntityCurrentRatingPublic e = entityCurrentRatingsDao.getEntityCurrentRatingPublic(entityId);
		assertNull(e);
	}
	
	@Test
	public void getEntityCurrentRatingPublicTest() {
		System.out.println("@EntityRatingsDaoTest: In getEntityCurrentRatingPublic method");
		Long entityId = Long.valueOf(100751);
		
		EntityCurrentRatingPublic e = new EntityCurrentRatingPublic();
		when(entityRatingsPublicRepo.findByEntityId(entityId)).thenReturn(entityCurrentRatingPub);
		e = entityCurrentRatingsDao.getEntityCurrentRatingPublic(entityId);
		//assertEquals(e, entityCurrentRating);
		assertNotNull(e);
	}
	
	
	@Test
	public void getEntityRatingsTACPublicTestError() {
		System.out.println("@EntityRatingsDaoTest: In getEntityRatingsTACPublic method");
		Long entityId = Long.valueOf(100751);
		when(entityRatingsTACPublicRepo.findByEntityId(entityId)).thenThrow(new HttpClientErrorException(HttpStatus.NOT_FOUND));
		List<EntityRatingsTACPublic> e = entityCurrentRatingsDao.getEntityRatingsTACPublic(entityId);
		assertNull(e);
	}
	
	@Test
	public void getEntityRatingsTACPublicTestError1() {
		System.out.println("@EntityRatingsDaoTest: In getEntityRatingsTACPublic method");
		Long entityId = Long.valueOf(100751);
		when(entityRatingsTACPublicRepo.findByEntityId(entityId)).thenThrow(new IllegalArgumentException());
		List<EntityRatingsTACPublic> e = entityCurrentRatingsDao.getEntityRatingsTACPublic(entityId);
		assertNull(e);
	}
	
	@Test
	public void getEntityRatingsTACPublicTest() {
		System.out.println("@EntityRatingsDaoTest: In getEntityRatingsTACPublic method");
		Long entityId = Long.valueOf(100751);
		
		List<EntityRatingsTACPublic> e = new ArrayList<EntityRatingsTACPublic>();
		List<EntityRatingsTACPublic> list = new ArrayList<EntityRatingsTACPublic>(1);
		list.add(entityRatingsTACPublic);
		when(entityRatingsTACPublicRepo.findByEntityId(entityId)).thenReturn(list);
		e = entityCurrentRatingsDao.getEntityRatingsTACPublic(entityId);
		//assertEquals(e, entityCurrentRating);
		assertNotNull(e);
	}
	
	@Test
	public void getEntityRatingsTACPvtTestError() {
		System.out.println("@EntityRatingsDaoTest: In getEntityRatingsTACPvt method");
		Long entityId = Long.valueOf(100751);
		when(entityRatingsTACPvtRepo.findByEntityId(entityId)).thenThrow(new HttpClientErrorException(HttpStatus.NOT_FOUND));
		List<EntityRatingsTACPvt> e = entityCurrentRatingsDao.getEntityRatingsTACPvt(entityId);
		assertNull(e);
	}
	
	@Test
	public void getEntityRatingsTACPPvtTestError1() {
		System.out.println("@EntityRatingsDaoTest: In getEntityRatingsTACPublic method");
		Long entityId = Long.valueOf(100751);
		when(entityRatingsTACPvtRepo.findByEntityId(entityId)).thenThrow(new IllegalArgumentException());
		List<EntityRatingsTACPvt> e = entityCurrentRatingsDao.getEntityRatingsTACPvt(entityId);
		assertNull(e);
	}
	
	@Test
	public void getEntityRatingsTACPPvtTest() {
		System.out.println("@EntityRatingsDaoTest: In getEntityRatingsTACPPvtTest method");
		Long entityId = Long.valueOf(100751);
		
		List<EntityRatingsTACPvt> e = new ArrayList<EntityRatingsTACPvt>();
		List<EntityRatingsTACPvt> list = new ArrayList<EntityRatingsTACPvt>(1);
		list.add(entityRatingsTACPvt);

		when(entityRatingsTACPvtRepo.findByEntityId(entityId)).thenReturn(list);
		e = entityCurrentRatingsDao.getEntityRatingsTACPvt(entityId);
		//assertEquals(e, entityCurrentRating);
		assertNotNull(e);
	}

}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\test\java\com\spglobal\ratings\ratingsdata\dao\EntityRatingsDaoTest.java

package com.spglobal.ratings.ratingsdata.dao;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.mockito.Mockito.when;

import java.sql.Date;
import java.util.ArrayList;
import java.util.List;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.http.HttpStatus;
import org.springframework.test.context.junit.jupiter.SpringExtension;
import org.springframework.web.client.HttpClientErrorException;

import com.spglobal.ratings.ratingsdata.entity.EntityRatings;
import com.spglobal.ratings.ratingsdata.repository.EntityRatingsRepository;
import com.spglobal.ratings.ratingsdata.util.RatingsDataUtil;

@ExtendWith({SpringExtension.class, MockitoExtension.class})
public class EntityRatingsDaoTest {
	
	@InjectMocks
	EntityRatingsDao entityRatingsDao;
	
	@Mock
	RatingsDataUtil ratingsUtil;
	
	@Mock
	EntityRatingsRepository entityRatingsRepo;
	
	List<EntityRatings> entityRatings = null;
	EntityRatings er;
	
	@BeforeEach
	public void init() throws Exception {
		entityRatings = new ArrayList<EntityRatings>();
		er = new EntityRatings();
		er.setEntityId(Long.valueOf(100751));
		er.setDebtTypeCode("ICR");
		er.setDebtTypeDesc("Issuer Credit Rating");
		er.setRatingTypeCode("FCLONG");
		er.setRatingTypeDesc("Foreign Currency LT");
		er.setCurrentRatingSymbol("BBB-");
		er.setRatingDate(new Date(04/28/2023));
		er.setLastReviewDate(new Date(04/28/2023));
		er.setRegulatoryIndicator("EE|UKE");
		er.setAction("Upgrade | CreditWatch/Outlook");
		er.setLatestNonAffirmCWOL("Stable");
		er.setLatestNonAffirmCWOLDate(new Date(04/28/2023));
		er.setSrdCurrInd("Y");
		er.setRatingDetailId(Long.valueOf(42370608));
		er.setDataAdminDate(new Date(04/28/2023));
		er.setDebtTypeSortOrder(3);
		er.setDerivedDebtTypeSortOrder(3);
		er.setLongShortInd("L");
		er.setRatingTypeSortOrder(Long.valueOf(1));
		er.setRating_id(Long.valueOf(100751));
		er.setPrimarySectorCode("GLOBISS");
		er.setPrimarySubSectorCode("CORP");
		er.setConfidentialityInd("N");
		er.setConfidentialCategoryCode(null);
		entityRatings.add(er);
	}
	
	@Test
	public void getEntityRatingsTest() {
		System.out.println("@EntityRatingsDaoTest: In getEntityRatingsTest method");
		Long entityId = Long.valueOf(100751);
		
		List<EntityRatings> e = new ArrayList<EntityRatings>();
		when(entityRatingsRepo.findByEntityId(entityId)).thenReturn(entityRatings);
		e = entityRatingsDao.getEntityRatings(entityId);
		assertEquals(e, entityRatings);
	}
	
	@Test
	public void getEntityRatingsillegalArgumentTest() {
		System.out.println("@EntityRatingsDaoTest: In getEntityRatingsillegalArgumentTest method");
		
		List<EntityRatings> er =null;
		Long entityId = Long.valueOf(100751);
		when(entityRatingsRepo.findByEntityId(entityId)).thenThrow(new IllegalArgumentException("--Illegal Argument Exception From Repo"));
		
		try {
		   er = entityRatingsDao.getEntityRatings(entityId);
		}catch(Exception e){
				assertEquals(IllegalArgumentException.class,e.getClass());
				assertNull(er);	
		}
	}
	
	@Test
	public void getEntityRatingsillegalArgumentTest1() {
		System.out.println("@EntityRatingsDaoTest: In getEntityRatingsillegalArgumentTest method");
		
		List<EntityRatings> er =null;
		Long entityId = Long.valueOf(100751);
		when(entityRatingsRepo.findByEntityId(entityId)).thenThrow(new HttpClientErrorException(HttpStatus.NOT_FOUND));
		
		try {
		   er = entityRatingsDao.getEntityRatings(entityId);
		}catch(Exception e){
				assertEquals(IllegalArgumentException.class,e.getClass());
				assertNull(er);	
		}
	}
	
	@Test
	public void getEntityRatingDetailsTest() {
		System.out.println("@EntityRatingsDaoTest: In getEntityRatingDetailsTest method");
		Long entityId = Long.valueOf(100751);
		Long ratingDetailId = Long.valueOf(42370608);
		
		EntityRatings e = new EntityRatings();
		when(entityRatingsRepo.findByEntityIdAndRatingDetailId(entityId, ratingDetailId)).thenReturn(er);
		e = entityRatingsDao.getEntityRatingDetails(entityId, ratingDetailId);
		assertEquals(e, er);
	}
	
	@Test
	public void getEntityRatingDetailsillegalArgumentTest() {
		System.out.println("@EntityRatingsDaoTest: In getEntityRatingDetailsillegalArgumentTest method");
		
		EntityRatings r =null;
		Long entityId = Long.valueOf(100751);
		Long ratingDetailId = Long.valueOf(42370608);
		when(entityRatingsRepo.findByEntityIdAndRatingDetailId(entityId, ratingDetailId)).thenThrow(new IllegalArgumentException("--Illegal Argument Exception From Repo"));
		
		try {
		   r = entityRatingsDao.getEntityRatingDetails(entityId, ratingDetailId);
		}catch(Exception e){
				assertEquals(IllegalArgumentException.class,e.getClass());
				assertNull(r);	
		}
	}

	@Test
	public void getEntityRatingDetailsillegalArgumentTest2() {
		System.out.println("@EntityRatingsDaoTest: In getEntityRatingDetailsillegalArgumentTest method");
		
		EntityRatings r =null;
		Long entityId = Long.valueOf(100751);
		Long ratingDetailId = Long.valueOf(42370608);
		when(entityRatingsRepo.findByEntityIdAndRatingDetailId(entityId, ratingDetailId)).thenThrow(new HttpClientErrorException(HttpStatus.NOT_FOUND));
		
		try {
		   r = entityRatingsDao.getEntityRatingDetails(entityId, ratingDetailId);
		}catch(Exception e){
				assertEquals(IllegalArgumentException.class,e.getClass());
				assertNull(r);	
		}
	}

}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\test\java\com\spglobal\ratings\ratingsdata\dao\EntityRatingsHistoryDaoTest.java

package com.spglobal.ratings.ratingsdata.dao;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.mockito.Mockito.when;

import java.sql.Date;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.http.HttpStatus;
import org.springframework.test.context.junit.jupiter.SpringExtension;
import org.springframework.web.client.HttpClientErrorException;

import com.spglobal.ratings.ratingsdata.entity.EntityRatingsHistTACPub;
import com.spglobal.ratings.ratingsdata.entity.EntityRatingsHistory;
import com.spglobal.ratings.ratingsdata.entity.EntityRatingsHistoryTAC;
import com.spglobal.ratings.ratingsdata.repository.EntityRatingsHistTACPubRepo;
import com.spglobal.ratings.ratingsdata.repository.EntityRatingsHistoryRepository;
import com.spglobal.ratings.ratingsdata.repository.EntityRatingsHistoryTACRepo;
import com.spglobal.ratings.ratingsdata.util.RatingsDataUtil;

@ExtendWith({SpringExtension.class, MockitoExtension.class})
public class EntityRatingsHistoryDaoTest {
	
	@InjectMocks
	EntityRatingsHistoryDao entityRatingsHistoryDao;
	
	@Mock
	RatingsDataUtil ratingsUtil;
	
	@Mock
	EntityRatingsHistoryRepository entityRatingsHistoryRepo;
	
	@Mock
	EntityRatingsHistoryTACRepo entityRatingsHistoryTACRepo;
	
	@Mock
	EntityRatingsHistTACPubRepo entityRatingsHistTACPubRepo;

	List<EntityRatingsHistory> ratingsHistory = null;
	List<EntityRatingsHistoryTAC> ratingsHistoryTAC = null;
	List<EntityRatingsHistTACPub> ratingsHistoryTACPub = null;
	
	EntityRatingsHistoryTAC historyTAC;
	EntityRatingsHistTACPub historyTACPub;
	
	EntityRatingsHistory history;
	
	@BeforeEach
	public void init() throws Exception {
		ratingsHistory = new ArrayList<EntityRatingsHistory>();
		history = new EntityRatingsHistory();
		history.setEntityId(Long.valueOf(100751));
		history.setDebtTypeCode("ICR");
		history.setRatingTypeCode("FCLONG");
		history.setRatingTypeDescription("Foreign Currency LT");
		history.setRating("BBB-");
		history.setRatingDate(new Date(05/11/2023));
		history.setAction("Upgrade | CreditWatch/Outlook");
		history.setCreditwatchOutlook("Stable");
		history.setCreditwatchOutlookDate(new Date(05/11/2023));
		history.setRatingDetailId(Long.valueOf(42370608));
		history.setDataAdminDate(new Date(05/11/2023));
		history.setConfidentialityInd("N");
		history.setConfidentialCategoryCode(null);
		ratingsHistory.add(history);
		
		
		ratingsHistoryTAC = new ArrayList<EntityRatingsHistoryTAC>();
		historyTAC = new EntityRatingsHistoryTAC();
		historyTAC.setEntityId(Long.valueOf(100751));
		historyTAC.setDebtTypeCode("ICR");
		historyTAC.setRatingTypeCode("FCLONG");
		historyTAC.setRatingTypeDescription("Foreign Currency LT");
		historyTAC.setRating("BBB-");
		historyTAC.setRatingDate(new Date(05/11/2023));
		historyTAC.setAction("Upgrade | CreditWatch/Outlook");
		historyTAC.setCreditwatchOutlook("Stable");
		historyTAC.setCreditwatchOutlookDate(new Date(05/11/2023));
		historyTAC.setRatingDetailId(Long.valueOf(42370608));
		historyTAC.setDataAdminDate(new Date(05/11/2023));
		historyTAC.setConfidentialityInd("N");
		historyTAC.setConfidentialCategoryCode(null);
		ratingsHistoryTAC.add(historyTAC);
		
		ratingsHistoryTACPub = new ArrayList<EntityRatingsHistTACPub>();
		historyTACPub = new EntityRatingsHistTACPub();
		historyTACPub.setEntityId(Long.valueOf(100751));
		historyTACPub.setDebtTypeCode("ICR");
		historyTACPub.setRatingTypeCode("FCLONG");
		historyTACPub.setRatingTypeDescription("Foreign Currency LT");
		historyTACPub.setRating("BBB-");
		historyTACPub.setRatingDate(new Date(05/11/2023));
		historyTACPub.setAction("Upgrade | CreditWatch/Outlook");
		historyTACPub.setCreditwatchOutlook("Stable");
		historyTACPub.setCreditwatchOutlookDate(new Date(05/11/2023));
		historyTACPub.setRatingDetailId(Long.valueOf(42370608));
		historyTACPub.setDataAdminDate(new Date(05/11/2023));
		ratingsHistoryTACPub.add(historyTACPub);
	
	}
	
	@Test
	public void getEntityRatingsHistoryTest() {
		System.out.println("@EntityRatingsHistoryDaoTest: In getEntityRatingsHistoryTest method");
		Long entityId = Long.valueOf(100751);
		String debtTypeCode = "ICR";
		String ratingTypeCode = "FCLONG";
		
		List<EntityRatingsHistory> r = new ArrayList<EntityRatingsHistory>();
		when(entityRatingsHistoryRepo.findByEntityIdAndDebtTypeCodeAndRatingTypeCode(entityId, debtTypeCode, ratingTypeCode)).thenReturn(ratingsHistory);
		r = entityRatingsHistoryDao.getEntityRatingsHistory(entityId, debtTypeCode, ratingTypeCode);
		assertEquals(r, ratingsHistory);
	}
	
	@Test
	public void getEntityRatingsHistoryillegalArgumentTest() {
		System.out.println("@EntityRatingsHistoryDaoTest: In getEntityRatingsHistoryillegalArgumentTest method");
		
		List<EntityRatingsHistory> rh = null;
		Long entityId = Long.valueOf(100751);
		String debtTypeCode = "ICR";
		String ratingTypeCode = "FCLONG";
		when(entityRatingsHistoryRepo.findByEntityIdAndDebtTypeCodeAndRatingTypeCode(entityId, debtTypeCode, ratingTypeCode)).thenThrow(new IllegalArgumentException("--Illegal Argument Exception From Repo"));
		
		try {
			rh = entityRatingsHistoryDao.getEntityRatingsHistory(entityId, debtTypeCode, ratingTypeCode);
		}catch(Exception e){
			assertEquals(IllegalArgumentException.class,e.getClass());
			assertNull(rh);	
		}
	}

	@Test
	public void getEntityRatingsHistoryillegalArgumentTest1() {
		System.out.println("@EntityRatingsHistoryDaoTest: In getEntityRatingsHistoryillegalArgumentTest method");
		
		List<EntityRatingsHistory> rh = null;
		Long entityId = Long.valueOf(100751);
		String debtTypeCode = "ICR";
		String ratingTypeCode = "FCLONG";
		when(entityRatingsHistoryRepo.findByEntityIdAndDebtTypeCodeAndRatingTypeCode(entityId, debtTypeCode, ratingTypeCode)).thenThrow(new HttpClientErrorException(HttpStatus.NOT_FOUND));
		
		try {
			rh = entityRatingsHistoryDao.getEntityRatingsHistory(entityId, debtTypeCode, ratingTypeCode);
		}catch(Exception e){
			assertEquals(IllegalArgumentException.class,e.getClass());
			assertNull(rh);	
		}
	}
	
	//===================================================================
	
	@Test
	public void getEntityRatingsHistoryTACTest() {
		System.out.println("@EntityRatingsHistoryDaoTest: In getEntityRatingsHistoryTACTest method");
		Long entityId = Long.valueOf(100751);
		String debtTypeCode = "ICR";
		String ratingTypeCode = "FCLONG";
		
		List<EntityRatingsHistoryTAC> r = null;
		when(entityRatingsHistoryTACRepo.findByEntityIdAndDebtTypeCodeAndRatingTypeCode(entityId, debtTypeCode, ratingTypeCode)).thenReturn(ratingsHistoryTAC);
		r = entityRatingsHistoryDao.getEntityRatingsHistoryTAC(entityId, debtTypeCode, ratingTypeCode);
		assertEquals(r, ratingsHistoryTAC);
	}
	
	@Test
	public void getEntityRatingsHistoryTACillegalArgumentTest() {
		System.out.println("@EntityRatingsHistoryDaoTest: In getEntityRatingsHistoryTACillegalArgumentTest method");
		
		List<EntityRatingsHistoryTAC> rh = null;
		Long entityId = Long.valueOf(100751);
		String debtTypeCode = "ICR";
		String ratingTypeCode = "FCLONG";
		when(entityRatingsHistoryTACRepo.findByEntityIdAndDebtTypeCodeAndRatingTypeCode(entityId, debtTypeCode, ratingTypeCode)).thenThrow(new IllegalArgumentException("--Illegal Argument Exception From Repo"));
		
		try {
			rh = entityRatingsHistoryDao.getEntityRatingsHistoryTAC(entityId, debtTypeCode, ratingTypeCode);
		}catch(Exception e){
			assertEquals(IllegalArgumentException.class,e.getClass());
			assertNull(rh);	
		}
	}

	@Test
	public void getEntityRatingsHistoryTACillegalArgumentTest1() {
		System.out.println("@EntityRatingsHistoryDaoTest: In getEntityRatingsHistoryTACillegalArgumentTest method");
		
		List<EntityRatingsHistoryTAC> rh = null;
		Long entityId = Long.valueOf(100751);
		String debtTypeCode = "ICR";
		String ratingTypeCode = "FCLONG";
		when(entityRatingsHistoryTACRepo.findByEntityIdAndDebtTypeCodeAndRatingTypeCode(entityId, debtTypeCode, ratingTypeCode)).thenThrow(new HttpClientErrorException(HttpStatus.NOT_FOUND));
		
		try {
			rh = entityRatingsHistoryDao.getEntityRatingsHistoryTAC(entityId, debtTypeCode, ratingTypeCode);
		}catch(Exception e){
			assertEquals(IllegalArgumentException.class,e.getClass());
			assertNull(rh);	
		}
	}
	
	//===================================================================

	@Test
	public void getEntityRatingsHistTACPubTest() {
		System.out.println("@EntityRatingsHistoryDaoTest: In getEntityRatingsHistTACPubTest method");
		Long entityId = Long.valueOf(100751);
		String debtTypeCode = "ICR";
		String ratingTypeCode = "FCLONG";
		
		List<EntityRatingsHistTACPub> r = null;
		when(entityRatingsHistTACPubRepo.findByEntityIdAndDebtTypeCodeAndRatingTypeCode(entityId, debtTypeCode, ratingTypeCode)).thenReturn(ratingsHistoryTACPub);
		r = entityRatingsHistoryDao.getEntityRatingsHistTACPub(entityId, debtTypeCode, ratingTypeCode);
		assertEquals(r, ratingsHistoryTACPub);
	}
	
	@Test
	public void getEntityRatingsHistTACPubillegalArgumentTest() {
		System.out.println("@EntityRatingsHistoryDaoTest: In getEntityRatingsHistTACPubillegalArgumentTest method");
		
		List<EntityRatingsHistTACPub> rh = null;
		Long entityId = Long.valueOf(100751);
		String debtTypeCode = "ICR";
		String ratingTypeCode = "FCLONG";
		when(entityRatingsHistTACPubRepo.findByEntityIdAndDebtTypeCodeAndRatingTypeCode(entityId, debtTypeCode, ratingTypeCode)).thenThrow(new IllegalArgumentException("--Illegal Argument Exception From Repo"));
		
		try {
			rh = entityRatingsHistoryDao.getEntityRatingsHistTACPub(entityId, debtTypeCode, ratingTypeCode);
		}catch(Exception e){
			assertEquals(IllegalArgumentException.class,e.getClass());
			assertNull(rh);	
		}
	}

	@Test
	public void getEntityRatingsHistTACPubillegalArgumentTest1() {
		System.out.println("@EntityRatingsHistoryDaoTest: In getEntityRatingsHistTACPubillegalArgumentTest method");
		
		List<EntityRatingsHistTACPub> rh = null;
		Long entityId = Long.valueOf(100751);
		String debtTypeCode = "ICR";
		String ratingTypeCode = "FCLONG";
		when(entityRatingsHistTACPubRepo.findByEntityIdAndDebtTypeCodeAndRatingTypeCode(entityId, debtTypeCode, ratingTypeCode)).thenThrow(new HttpClientErrorException(HttpStatus.NOT_FOUND));
		
		try {
			rh = entityRatingsHistoryDao.getEntityRatingsHistTACPub(entityId, debtTypeCode, ratingTypeCode);
		}catch(Exception e){
			assertEquals(IllegalArgumentException.class,e.getClass());
			assertNull(rh);	
		}
	}
	
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\test\java\com\spglobal\ratings\ratingsdata\dao\EntityRatingsHistoryPublicDaoTest.java

package com.spglobal.ratings.ratingsdata.dao;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.mockito.Mockito.when;

import java.sql.Date;
import java.util.ArrayList;
import java.util.List;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.http.HttpStatus;
import org.springframework.test.context.junit.jupiter.SpringExtension;
import org.springframework.web.client.HttpClientErrorException;

import com.spglobal.ratings.ratingsdata.entity.EntityRatingsHistoryPublic;
import com.spglobal.ratings.ratingsdata.repository.EntityRatingsHistoryPublicRepository;
import com.spglobal.ratings.ratingsdata.util.RatingsDataUtil;

@ExtendWith({SpringExtension.class, MockitoExtension.class})
public class EntityRatingsHistoryPublicDaoTest {
	
	@InjectMocks
	EntityRatingsHistoryPublicDao ratingsHistoryDao;
	
	@Mock
	RatingsDataUtil ratingsUtil;
	
	@Mock
	EntityRatingsHistoryPublicRepository ratingsHistoryRepo;
	
	List<EntityRatingsHistoryPublic> ratingsHistory = null;
	EntityRatingsHistoryPublic history;
	
	@BeforeEach
	public void init() throws Exception {
		ratingsHistory = new ArrayList<EntityRatingsHistoryPublic>();
		history = new EntityRatingsHistoryPublic();
		history.setEntityId(Long.valueOf(100751));
		history.setDebtTypeCode("ICR");
		history.setRatingTypeCode("FCLONG");
		history.setRatingTypeDescription("Foreign Currency LT");
		history.setRating("BBB-");
		history.setRatingDate(new Date(05/11/2023));
		history.setAction("Upgrade | CreditWatch/Outlook");
		history.setCreditwatchOutlook("Stable");
		history.setCreditwatchOutlookDate(new Date(05/11/2023));
		history.setRatingDetailId(Long.valueOf(42370608));
		history.setDataAdminDate(new Date(05/11/2023));
		ratingsHistory.add(history);
	}
	
	@Test
	public void getPublicEntityRatingsHistoryTest() {
		System.out.println("@EntityRatingsHistoryPublicDaoTest: In getPublicEntityRatingsHistoryTest method");
		Long entityId = Long.valueOf(100751);
		String debtTypeCode = "ICR";
		String ratingTypeCode = "FCLONG";
		
		List<EntityRatingsHistoryPublic> r = new ArrayList<EntityRatingsHistoryPublic>();
		when(ratingsHistoryRepo.findByEntityIdAndDebtTypeCodeAndRatingTypeCode(entityId, debtTypeCode, ratingTypeCode)).thenReturn(ratingsHistory);
		r = ratingsHistoryDao.getPublicEntityRatingsHistory(entityId, debtTypeCode, ratingTypeCode);
		assertEquals(r, ratingsHistory);
	}
	
	@Test
	public void getPublicEntityRatingsHistoryillegalArgumentTest() {
		System.out.println("@EntityRatingsHistoryPublicDaoTest: In getPublicEntityRatingsHistoryillegalArgumentTest method");
		
		List<EntityRatingsHistoryPublic> rh = null;
		Long entityId = Long.valueOf(100751);
		String debtTypeCode = "ICR";
		String ratingTypeCode = "FCLONG";
		when(ratingsHistoryRepo.findByEntityIdAndDebtTypeCodeAndRatingTypeCode(entityId, debtTypeCode, ratingTypeCode)).thenThrow(new IllegalArgumentException("--Illegal Argument Exception From Repo"));
		
		try {
			rh = ratingsHistoryDao.getPublicEntityRatingsHistory(entityId, debtTypeCode, ratingTypeCode);
		}catch(Exception e){
			assertEquals(IllegalArgumentException.class,e.getClass());
			assertNull(rh);	
		}
	}
	
	@Test
	public void getPublicEntityRatingsHistoryillegalArgumentTest1() {
		System.out.println("@EntityRatingsHistoryPublicDaoTest: In getPublicEntityRatingsHistoryillegalArgumentTest method");
		
		List<EntityRatingsHistoryPublic> rh = null;
		Long entityId = Long.valueOf(100751);
		String debtTypeCode = "ICR";
		String ratingTypeCode = "FCLONG";
		when(ratingsHistoryRepo.findByEntityIdAndDebtTypeCodeAndRatingTypeCode(entityId, debtTypeCode, ratingTypeCode)).thenThrow(new HttpClientErrorException(HttpStatus.NOT_FOUND));
		
		try {
			rh = ratingsHistoryDao.getPublicEntityRatingsHistory(entityId, debtTypeCode, ratingTypeCode);
		}catch(Exception e){
			assertEquals(IllegalArgumentException.class,e.getClass());
			assertNull(rh);	
		}
	}

}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\test\java\com\spglobal\ratings\ratingsdata\dao\EntityRatingsPublicDaoTest.java

package com.spglobal.ratings.ratingsdata.dao;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.mockito.Mockito.when;

import java.sql.Date;
import java.util.ArrayList;
import java.util.List;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.http.HttpStatus;
import org.springframework.test.context.junit.jupiter.SpringExtension;
import org.springframework.web.client.HttpClientErrorException;

import com.spglobal.ratings.ratingsdata.entity.EntityRatingsPublic;
import com.spglobal.ratings.ratingsdata.repository.EntityRatingsPublicRepository;
import com.spglobal.ratings.ratingsdata.util.RatingsDataUtil;

@ExtendWith({SpringExtension.class, MockitoExtension.class})
public class EntityRatingsPublicDaoTest {
	
	@InjectMocks
	EntityRatingsPublicDao entityRatingsDao;
	
	@Mock
	RatingsDataUtil ratingsUtil;
	
	@Mock
	EntityRatingsPublicRepository entityRatingsRepo;
	
	List<EntityRatingsPublic> entityRatings = null;
	EntityRatingsPublic er;
	
	@BeforeEach
	public void init() throws Exception {
		entityRatings = new ArrayList<EntityRatingsPublic>();
		er = new EntityRatingsPublic();
		er.setEntityId(Long.valueOf(100751));
		er.setDebtTypeCode("ICR");
		er.setDebtTypeDesc("Issuer Credit Rating");
		er.setRatingTypeCode("FCLONG");
		er.setRatingTypeDesc("Foreign Currency LT");
		er.setCurrentRatingSymbol("BBB-");
		er.setRatingDate(new Date(04/28/2023));
		er.setLastReviewDate(new Date(04/28/2023));
		er.setRegulatoryIndicator("EE|UKE");
		er.setAction("Upgrade | CreditWatch/Outlook");
		er.setLatestNonAffirmCWOL("Stable");
		er.setLatestNonAffirmCWOLDate(new Date(04/28/2023));
		er.setSrdCurrInd("Y");
		er.setRatingDetailId(Long.valueOf(42370608));
		er.setDataAdminDate(new Date(04/28/2023));
		er.setDebtTypeSortOrder(3);
		er.setDerivedDebtTypeSortOrder(3);
		er.setLongShortInd("L");
		er.setRatingTypeSortOrder(Long.valueOf(1));
		er.setRating_id(Long.valueOf(100751));
		er.setPrimarySectorCode("GLOBISS");
		er.setPrimarySubSectorCode("CORP");
		entityRatings.add(er);
	}
	
	@Test
	public void getPublicEntityRatingsTest() {
		System.out.println("@EntityRatingsPublicDaoTest: In getPublicEntityRatingsTest method");
		Long entityId = Long.valueOf(100751);
		
		List<EntityRatingsPublic> e = new ArrayList<EntityRatingsPublic>();
		when(entityRatingsRepo.findByEntityId(entityId)).thenReturn(entityRatings);
		e = entityRatingsDao.getPublicEntityRatings(entityId);
		assertEquals(e, entityRatings);
	}
	
	@Test
	public void getPublicEntityRatingsillegalArgumentTest() {
		System.out.println("@EntityRatingsPublicDaoTest: In getPublicEntityRatingsillegalArgumentTest method");
		
		List<EntityRatingsPublic> er =null;
		Long entityId = Long.valueOf(100751);
		when(entityRatingsRepo.findByEntityId(entityId)).thenThrow(new IllegalArgumentException("--Illegal Argument Exception From Repo"));
		
		try {
		   er = entityRatingsDao.getPublicEntityRatings(entityId);
		}catch(Exception e){
				assertEquals(IllegalArgumentException.class,e.getClass());
				assertNull(er);	
		}
	}
	
	@Test
	public void getPublicEntityRatingsillegalArgumentTest1() {
		System.out.println("@EntityRatingsPublicDaoTest: In getPublicEntityRatingsillegalArgumentTest method");
		
		List<EntityRatingsPublic> er =null;
		Long entityId = Long.valueOf(100751);
		when(entityRatingsRepo.findByEntityId(entityId)).thenThrow(new HttpClientErrorException(HttpStatus.NOT_FOUND));
		
		try {
		   er = entityRatingsDao.getPublicEntityRatings(entityId);
		}catch(Exception e){
				assertEquals(IllegalArgumentException.class,e.getClass());
				assertNull(er);	
		}
	}
	
	@Test
	public void getPublicEntityRatingDetailsTest() {
		System.out.println("@EntityRatingsPublicDaoTest: In getPublicEntityRatingDetailsTest method");
		Long entityId = Long.valueOf(100751);
		Long ratingDetailId = Long.valueOf(42370608);
		
		EntityRatingsPublic e = new EntityRatingsPublic();
		when(entityRatingsRepo.findByEntityIdAndRatingDetailId(entityId, ratingDetailId)).thenReturn(er);
		e = entityRatingsDao.getPublicEntityRatingDetails(entityId, ratingDetailId);
		assertEquals(e, er);
	}
	
	@Test
	public void getPublicEntityRatingDetailsillegalArgumentTest() {
		System.out.println("@EntityRatingsPublicDaoTest: In getPublicEntityRatingDetailsillegalArgumentTest method");
		
		EntityRatingsPublic r =null;
		Long entityId = Long.valueOf(100751);
		Long ratingDetailId = Long.valueOf(42370608);
		when(entityRatingsRepo.findByEntityIdAndRatingDetailId(entityId, ratingDetailId)).thenThrow(new IllegalArgumentException("--Illegal Argument Exception From Repo"));
		
		try {
		   r = entityRatingsDao.getPublicEntityRatingDetails(entityId, ratingDetailId);
		}catch(Exception e){
				assertEquals(IllegalArgumentException.class,e.getClass());
				assertNull(r);	
		}
	}
	
	@Test
	public void getPublicEntityRatingDetailsillegalArgumentTest2() {
		System.out.println("@EntityRatingsPublicDaoTest: In getPublicEntityRatingDetailsillegalArgumentTest method");
		
		EntityRatingsPublic r =null;
		Long entityId = Long.valueOf(100751);
		Long ratingDetailId = Long.valueOf(42370608);
		when(entityRatingsRepo.findByEntityIdAndRatingDetailId(entityId, ratingDetailId)).thenThrow(new HttpClientErrorException(HttpStatus.NOT_FOUND));
		
		try {
		   r = entityRatingsDao.getPublicEntityRatingDetails(entityId, ratingDetailId);
		}catch(Exception e){
				assertEquals(IllegalArgumentException.class,e.getClass());
				assertNull(r);	
		}
	}

}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\test\java\com\spglobal\ratings\ratingsdata\dao\FinancialRatingDaoTest.java

package com.spglobal.ratings.ratingsdata.dao;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.when;

import java.util.Arrays;
import java.util.Collections;
import java.util.List;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.http.HttpStatus;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.web.client.HttpClientErrorException;

import com.spglobal.ratings.ratingsdata.entity.FinancialPeers;
import com.spglobal.ratings.ratingsdata.entity.MNemonicDetailsEntity;
import com.spglobal.ratings.ratingsdata.entity.PeriodDetailsEntity;
import com.spglobal.ratings.ratingsdata.model.FinancialData;
import com.spglobal.ratings.ratingsdata.repository.ElementMasterRepository;
import com.spglobal.ratings.ratingsdata.repository.FinancialCustomRatingRepository;
import com.spglobal.ratings.ratingsdata.repository.FinancialLTMRatingRepository;
import com.spglobal.ratings.ratingsdata.repository.FinancialPeersRepository;
import com.spglobal.ratings.ratingsdata.repository.FinancialQuarterlyRatingRepository;
import com.spglobal.ratings.ratingsdata.repository.RatingPeriodRepository;
import com.spglobal.ratings.ratingsdata.util.RatingsDataUtil;

@ContextConfiguration(classes = { FinancialRatingDao.class })
@ExtendWith(MockitoExtension.class)
public class FinancialRatingDaoTest {
	@InjectMocks
	private FinancialRatingDao financialRatingDao;

	@Mock
	private RatingsDataUtil ratingsUtil;

	@Mock
	private FinancialQuarterlyRatingRepository financialQuartRatingsRepo;

	@Mock
	private FinancialLTMRatingRepository financialLTMRatingsRepo;

	@Mock
	private RatingPeriodRepository ratingPeriodRepository;

	@Mock
	private ElementMasterRepository elementMasterRepository;

	@Mock
	private FinancialCustomRatingRepository financialCustomRatingRepository;
	
	@Mock
	private FinancialPeersRepository financialPeersRepository;
	
	@Test
	void testGetFinancialRatingDetails() throws Exception {
		List<FinancialData> resp = financialRatingDao.getFinancialRatingDetails(123l, "Corporate.adjusted");
		assertNotNull(resp);
	}
	
	@Test
	void testGetFinancialRatingDetailsIllegalException() throws Exception {
		when(financialLTMRatingsRepo.findByCoreIdAndTemplateName(any(), any())).thenThrow(new IllegalArgumentException());
		List<FinancialData> resp = financialRatingDao.getFinancialRatingDetails(123l, "Corporate.adjusted");
		assertTrue(resp.isEmpty());
	}

	@Test
	void testGetFinancialRatingDetailsException() throws Exception {
		when(financialLTMRatingsRepo.findByCoreIdAndTemplateName(any(), any())).thenThrow(new HttpClientErrorException(HttpStatus.NOT_FOUND));
		List<FinancialData> resp = financialRatingDao.getFinancialRatingDetails(123l, "Corporate.adjusted");
		assertTrue(resp.isEmpty());
	}
	
	@Test
	void testGetFinancialQuartelyRatingDetails() throws Exception {
		List<FinancialData> resp = financialRatingDao.getFinancialQuartelyRatingDetails(123l, "Corporate.adjusted");
		assertNotNull(resp);
	}
	
	@Test
	void testGetFinancialQuartelyRatingDetailsIllegalException() throws Exception {
		when(financialQuartRatingsRepo.findByCoreIdAndTemplateName(any(), any())).thenThrow(new IllegalArgumentException());
		List<FinancialData> resp = financialRatingDao.getFinancialQuartelyRatingDetails(123l, "Corporate.adjusted");
		assertTrue(resp.isEmpty());
	}

	@Test
	void testGetFinancialQuartelyRatingDetailsException() throws Exception {
		when(financialQuartRatingsRepo.findByCoreIdAndTemplateName(any(), any())).thenThrow(new HttpClientErrorException(HttpStatus.NOT_FOUND));
		List<FinancialData> resp = financialRatingDao.getFinancialQuartelyRatingDetails(123l, "Corporate.adjusted");
		assertTrue(resp.isEmpty());
	}
	
	@Test
	void testGetCustomFinancialRatingDetails() throws Exception {
		List<FinancialData> resp = financialRatingDao.getCustomFinancialRatingDetails(123l, "Corporate.adjusted", Collections.emptyList());
		assertNotNull(resp);
	}
	
	@Test
	void testGetCustomFinancialRatingDetailsIllegalException() throws Exception {
		when(financialCustomRatingRepository.findByCoreIdAndTemplateNameAndFinPeriodId(any(), any(), any())).thenThrow(new IllegalArgumentException());
		List<FinancialData> resp = financialRatingDao.getCustomFinancialRatingDetails(123l, "Corporate.adjusted", Collections.emptyList());
		assertTrue(resp.isEmpty());
	}

	@Test
	void testGetCustomFinancialRatingDetailsException() throws Exception {
		when(financialCustomRatingRepository.findByCoreIdAndTemplateNameAndFinPeriodId(any(), any(), any())).thenThrow(new HttpClientErrorException(HttpStatus.NOT_FOUND));
		List<FinancialData> resp = financialRatingDao.getCustomFinancialRatingDetails(123l, "Corporate.adjusted", Collections.emptyList());
		assertTrue(resp.isEmpty());
	}
	
	@Test
	void testGetFinancialPeriods() throws Exception {
		List<PeriodDetailsEntity> resp = financialRatingDao.getFinancialPeriods(123l, Collections.emptyList());
		assertNotNull(resp);
	}
	
	@Test
	void testGetFinancialPeriodsIllegalException() throws Exception {
		when(ratingPeriodRepository.findByCoreIdAndPeriodTypeNamed(any(), any())).thenThrow(new IllegalArgumentException());
		List<PeriodDetailsEntity> resp = financialRatingDao.getFinancialPeriods(123l, Collections.emptyList());
		assertNull(resp);
	}

	@Test
	void testGetFinancialPeriodsException() throws Exception {
		when(ratingPeriodRepository.findByCoreIdAndPeriodTypeNamed(any(), any())).thenThrow(new HttpClientErrorException(HttpStatus.NOT_FOUND));
		List<PeriodDetailsEntity> resp = financialRatingDao.getFinancialPeriods(123l, Collections.emptyList());
		assertNull(resp);
	}
	
	@Test
	void testGetMNemonic() throws Exception {
		List<MNemonicDetailsEntity> resp = financialRatingDao.getMNemonic("Corporate.adjusted","EUR");
		assertNotNull(resp);
	}
	
	@Test
	void testGetMNemonicIllegalException() throws Exception {
		when(elementMasterRepository.findByTemplateName(any())).thenThrow(new IllegalArgumentException());
		List<MNemonicDetailsEntity> resp = financialRatingDao.getMNemonic("Corporate.adjusted","EUR");
		assertNull(resp);
	}

	@Test
	void testGetMNemonicException() throws Exception {
		when(elementMasterRepository.findByTemplateName(any())).thenThrow(new HttpClientErrorException(HttpStatus.NOT_FOUND));
		List<MNemonicDetailsEntity> resp = financialRatingDao.getMNemonic("Corporate.adjusted","EUR");
		assertNull(resp);
	}

	@Test
	void testGetFinancialPeers() throws Exception {
		List<String> entitys = Arrays.asList("379507", "384019");
		String template = "Financial.all";
		List<FinancialPeers> resp = financialRatingDao.getFinancialPeers(entitys, template);
		assertEquals(resp.size(), 0);
	}

	@Test
	void testGetFinancialPeersError() throws Exception {
		List<String> entitys = Arrays.asList("q1", "q2");
		String template = "Financial.all";
		List<FinancialPeers> resp = financialRatingDao.getFinancialPeers(entitys, template);
		assertEquals(resp.size(), 0);
	}
	
	@Test
	void testGetFinancialPeersException() throws Exception {
		List<String> entitys = Arrays.asList();
		String template = "";
		when(financialPeersRepository.findByCoreIdAndTemplateName(any(), any())).thenThrow(new HttpClientErrorException(HttpStatus.NOT_FOUND));
		List<FinancialPeers> resp = financialRatingDao.getFinancialPeers(entitys, template);
		assertEquals(resp.size(), 0);
	}
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\test\java\com\spglobal\ratings\ratingsdata\dao\InvestorSentimentDAOTest.java

package com.spglobal.ratings.ratingsdata.dao;

import com.spglobal.ratings.ratingsdata.entity.AnalystPeerInfo;
import com.spglobal.ratings.ratingsdata.entity.InvestorSentimentCommentry;
import com.spglobal.ratings.ratingsdata.entity.InvestorSentimentNumbersRecentStudies;
import com.spglobal.ratings.ratingsdata.repository.InvestorSentimentCommentryRepository;
import com.spglobal.ratings.ratingsdata.repository.InvestorSentimentNumbersRepository;
import com.spglobal.ratings.ratingsdata.util.RatingsDataUtil;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import java.util.ArrayList;
import java.util.List;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.when;

class InvestorSentimentDAOTest {

    @InjectMocks
    private InvestorSentimentDAO investorSentimentDAO;

    @Mock
    private InvestorSentimentNumbersRepository investorSentimentNumbersRepository;

    @Mock
    private InvestorSentimentCommentryRepository investorSentimentCommentryRepository;

    @Mock
    private RatingsDataUtil ratingsDataUtil;

    @BeforeEach
    public void setup() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    void getInvestorSentimentNumbersByIndustryIdAndType() {
    }

    @Test
    void testGetInvestorSentimentNumbersByIndustryIdAndType() {
        Long industryId = 1L;
        String type = "";
        List<InvestorSentimentNumbersRecentStudies> expectedInvestorSentimentNumbersRecentStudiesList = new ArrayList<>();
        when(investorSentimentNumbersRepository.findByIndustryIdAndType(industryId,type)).thenReturn(expectedInvestorSentimentNumbersRecentStudiesList);
        List<InvestorSentimentNumbersRecentStudies> result = investorSentimentDAO.getInvestorSentimentNumbersByIndustryIdAndType(industryId,type);
        assertEquals(expectedInvestorSentimentNumbersRecentStudiesList, result);
    }

    @Test
    public void testGetInvestorSentimentNumbersByIndustryIdAndTypeException() {
        Long industryId = 1L;
        String type = "";
        when(investorSentimentNumbersRepository.findByIndustryIdAndType(industryId,type)).thenThrow(new RuntimeException("--Exception From Repo"));
        assertThrows(RuntimeException.class, ()->{investorSentimentDAO.getInvestorSentimentNumbersByIndustryIdAndType(industryId,type);});
    }

    @Test
    void testGetInvestorSentimentCommentryByIndustryId() {
        Long industryId = 1L;
        List<InvestorSentimentCommentry> expectedInvestorSentimentCommentryList = new ArrayList<>();
        when(investorSentimentCommentryRepository.getInvestorSentimentCommentryByIndustryId(industryId)).thenReturn(expectedInvestorSentimentCommentryList);
        List<InvestorSentimentCommentry> result = investorSentimentDAO.getInvestorSentimentCommentryByIndustryId(industryId);
        assertEquals(expectedInvestorSentimentCommentryList, result);
    }

    @Test
    public void testGetInvestorSentimentCommentryByIndustryIdException() {
        Long industryId = 1L;
        when(investorSentimentCommentryRepository.getInvestorSentimentCommentryByIndustryId(industryId)).thenThrow(new RuntimeException("--Exception From Repo"));
        assertThrows(RuntimeException.class, ()->{investorSentimentDAO.getInvestorSentimentCommentryByIndustryId(industryId);});
    }


}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\test\java\com\spglobal\ratings\ratingsdata\dao\IssuesAndMaturitiesDaoTest.java

package com.spglobal.ratings.ratingsdata.dao;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.mockito.Mockito.when;

import java.sql.Date;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.List;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.http.HttpStatus;
import org.springframework.test.context.junit.jupiter.SpringExtension;
import org.springframework.web.client.HttpClientErrorException;

import com.spglobal.ratings.ratingsdata.entity.IssuesAndMaturities;
import com.spglobal.ratings.ratingsdata.model.DebtTypes;
import com.spglobal.ratings.ratingsdata.repository.IssuesAndMaturitiesRepository;
import com.spglobal.ratings.ratingsdata.util.RatingsDataUtil;

@ExtendWith({SpringExtension.class, MockitoExtension.class})
public class IssuesAndMaturitiesDaoTest {
	
	@InjectMocks
	IssuesAndMaturitiesDao issuesAndMaturitiesDao;
	
	@Mock
	RatingsDataUtil ratingsUtil;
	
	@Mock
	IssuesAndMaturitiesRepository issuesAndMaturitiesRepo;
	
	List<IssuesAndMaturities> issuesAndMaturities = null;
	IssuesAndMaturities im;
	
	List<DebtTypes> debtTypes = null;
	
	@BeforeEach
	public void init() throws Exception {
		issuesAndMaturities = new ArrayList<IssuesAndMaturities>();
		im = new IssuesAndMaturities();
		im.setEntityId(Long.valueOf(100751));
		im.setInstrumentId(Long.valueOf(1301099));
		im.setInstrumentDetailId(Long.valueOf(4421612));
		im.setInstrumentName("US$1.5 bil 5.10% nts due 09/28/2048");
		im.setDebtTypeCode("SRUNSEC");
		im.setDescription("Senior Unsecured");
		im.setMaturityDate(new Date(05/23/2023));
		im.setMaturityDateDerived(new Timestamp(05/23/2023));
		im.setCusip("902494BH5");
		im.setIsin("US902494BH59");
		im.setRatingTypeCode("STDLONG");
		im.setRatingTypeDescription("Local Currency LT");
		im.setCurrentRatingSymbol("BBB+");
		im.setRatingDate(new Date(05/23/2023));
		im.setDataAdminDate(new Date(05/23/2023));
		im.setLastReviewDate(new Date(05/23/2023));
		im.setRegulatoryIndicator("EE|UKE");
		im.setIssueProgramType("Notes");
		im.setCouponRate("5.1%");
		im.setOriginalPrincipalBalance("USD 1,500,000,000");
		im.setCurrency("USD");
		im.setSortOrder(15);
		im.setPrecedenceNum(1);
		im.setRatingDetailId(Long.valueOf(39898462));
		im.setConfidentialityInd("N");
		im.setConfidentialCategoryCode(null);
		issuesAndMaturities.add(im);
		
		debtTypes = new ArrayList<DebtTypes>();
		DebtTypes types = new DebtTypes();
		types.setDebtTypeCode("SRUNSEC");
		types.setDebtTypeDescription("Senior Unsecured");
		types.setEntityId(Long.valueOf(100751));
		debtTypes.add(types);
	}
	
	@Test
	public void getIssuesAndMaturitiesByEntityIdTest() {
		System.out.println("IssuesAndMaturitiesDaoTest: In getIssuesAndMaturitiesByEntityIdTest method");
		Long entityId = Long.valueOf(100751);
		
		List<IssuesAndMaturities> e = new ArrayList<IssuesAndMaturities>();
		when(issuesAndMaturitiesRepo.findByEntityId(entityId)).thenReturn(issuesAndMaturities);
		e = issuesAndMaturitiesDao.getIssuesAndMaturitiesByEntityId(entityId);
		assertEquals(e, issuesAndMaturities);
	}
	
	@Test
	public void getIssuesAndMaturitiesByEntityIdillegalArgumentTest1() {
		System.out.println("@IssuesAndMaturitiesDaoTest: In getEntityRatingsillegalArgumentTest method");
		
		List<IssuesAndMaturities> m =null;
		Long entityId = Long.valueOf(100751);
		when(issuesAndMaturitiesRepo.findByEntityId(entityId)).thenThrow(new HttpClientErrorException(HttpStatus.NOT_FOUND));
		
		try {
		   m = issuesAndMaturitiesDao.getIssuesAndMaturitiesByEntityId(entityId);
		}catch(Exception e){
				assertEquals(IllegalArgumentException.class,e.getClass());
				assertNull(m);	
		}
	}
	
	@Test
	public void getIssuesAndMaturitiesByEntityIdillegalArgumentTest() {
		System.out.println("@IssuesAndMaturitiesDaoTest: In getEntityRatingsillegalArgumentTest method");
		
		List<IssuesAndMaturities> m =null;
		Long entityId = Long.valueOf(100751);
		when(issuesAndMaturitiesRepo.findByEntityId(entityId)).thenThrow(new IllegalArgumentException("--Illegal Argument Exception From Repo"));
		
		try {
		   m = issuesAndMaturitiesDao.getIssuesAndMaturitiesByEntityId(entityId);
		}catch(Exception e){
				assertEquals(IllegalArgumentException.class,e.getClass());
				assertNull(m);	
		}
	}
	
	@Test
	public void getIssuesAndMaturitiesByEntityIdAndDebtTypeCodeTest() {
		System.out.println("IssuesAndMaturitiesDaoTest: In getIssuesAndMaturitiesByEntityIdAndDebtTypeCodeTest method");
		
		Long entityId = Long.valueOf(121242);
		String debtTypeCode = "SRUNSEC";
		
		List<IssuesAndMaturities> e = new ArrayList<IssuesAndMaturities>();
		when(issuesAndMaturitiesRepo.findByEntityIdAndDebtTypeCode(entityId, debtTypeCode)).thenReturn(issuesAndMaturities);
		e = issuesAndMaturitiesDao.getIssuesAndMaturitiesByEntityIdAndDebtTypeCode(entityId, debtTypeCode);
		assertEquals(e, issuesAndMaturities);
	}
	
	@Test
	public void getIssuesAndMaturitiesByEntityIdAndDebtTypeCodeillegalArgumentTest() {
		System.out.println("@IssuesAndMaturitiesDaoTest: In getIssuesAndMaturitiesByEntityIdAndDebtTypeCodeillegalArgumentTest");
		
		List<IssuesAndMaturities> m =null;
		Long entityId = Long.valueOf(100751);
		String debtTypeCode = "SRUNSEC";
		when(issuesAndMaturitiesRepo.findByEntityIdAndDebtTypeCode(entityId, debtTypeCode)).thenThrow(new IllegalArgumentException("--Illegal Argument Exception From Repo"));
		
		try {
		   m = issuesAndMaturitiesDao.getIssuesAndMaturitiesByEntityIdAndDebtTypeCode(entityId, debtTypeCode);
		}catch(Exception e){
				assertEquals(IllegalArgumentException.class,e.getClass());
				assertNull(m);	
		}
	}
	
	@Test
	public void getIssuesAndMaturitiesByEntityIdAndDebtTypeCodeillegalArgumentTest1() {
		System.out.println("@IssuesAndMaturitiesDaoTest: In getIssuesAndMaturitiesByEntityIdAndDebtTypeCodeillegalArgumentTest");
		
		List<IssuesAndMaturities> m =null;
		Long entityId = Long.valueOf(100751);
		String debtTypeCode = "SRUNSEC";
		when(issuesAndMaturitiesRepo.findByEntityIdAndDebtTypeCode(entityId, debtTypeCode)).thenThrow(new HttpClientErrorException(HttpStatus.NOT_FOUND));
		
		try {
		   m = issuesAndMaturitiesDao.getIssuesAndMaturitiesByEntityIdAndDebtTypeCode(entityId, debtTypeCode);
		}catch(Exception e){
				assertEquals(IllegalArgumentException.class,e.getClass());
				assertNull(m);	
		}
	}
	
	@Test
	public void getIssuesAndMaturitiesDetailsTest() {
		System.out.println("@IssuesAndMaturitiesDaoTest: In getIssuesAndMaturitiesDetailsTest method");
		Long entityId = Long.valueOf(121242);
		Long ratingDetailId = Long.valueOf(39898462);
		
		IssuesAndMaturities e = new IssuesAndMaturities();
		when(issuesAndMaturitiesRepo.findByEntityIdAndRatingDetailId(entityId, ratingDetailId)).thenReturn(im);
		e = issuesAndMaturitiesDao.getIssuesAndMaturitiesDetails(entityId, ratingDetailId);
		assertEquals(e, im);
	}
	
	@Test
	public void getIssuesAndMaturitiesDetailsillegalArgumentTest() {
		System.out.println("@IssuesAndMaturitiesDaoTest: In getIssuesAndMaturitiesDetailsillegalArgumentTest method");
		
		IssuesAndMaturities m =null;
		Long entityId = Long.valueOf(100751);
		Long ratingDetailId = Long.valueOf(39898462);
		when(issuesAndMaturitiesRepo.findByEntityIdAndRatingDetailId(entityId, ratingDetailId)).thenThrow(new IllegalArgumentException("--Illegal Argument Exception From Repo"));
		
		try {
		   m = issuesAndMaturitiesDao.getIssuesAndMaturitiesDetails(entityId, ratingDetailId);
		}catch(Exception e){
				assertEquals(IllegalArgumentException.class,e.getClass());
				assertNull(m);	
		}
	}
	@Test
	public void getIssuesAndMaturitiesDetailsillegalArgumentTest1() {
		System.out.println("@IssuesAndMaturitiesDaoTest: In getIssuesAndMaturitiesDetailsillegalArgumentTest method");
		
		IssuesAndMaturities m =null;
		Long entityId = Long.valueOf(100751);
		Long ratingDetailId = Long.valueOf(39898462);
		when(issuesAndMaturitiesRepo.findByEntityIdAndRatingDetailId(entityId, ratingDetailId)).thenThrow(new HttpClientErrorException(HttpStatus.NOT_FOUND));
		
		try {
		   m = issuesAndMaturitiesDao.getIssuesAndMaturitiesDetails(entityId, ratingDetailId);
		}catch(Exception e){
				assertEquals(IllegalArgumentException.class,e.getClass());
				assertNull(m);	
		}
	}
	
	@Test
	public void getDropdownDebtTypesTest() {
		System.out.println("IssuesAndMaturitiesDaoTest: In getDropdownDebtTypesTest method");
		
		Long entityId = Long.valueOf(100751);
		
		List<DebtTypes> e = new ArrayList<DebtTypes>();
		when(issuesAndMaturitiesRepo.findDistinctDebtTypeCodeAndDescriptionByEntityId(entityId)).thenReturn(debtTypes);
		e = issuesAndMaturitiesDao.getDropdownDebtTypes(entityId);
		assertEquals(e, debtTypes);
	}
	
	@Test
	public void getDropdownDebtTypesillegalArgumentTest() {
		System.out.println("@IssuesAndMaturitiesDaoTest: In getDropdownDebtTypesillegalArgumentTest");
		
		List<DebtTypes> m =null;
		Long entityId = Long.valueOf(100751);
		
		when(issuesAndMaturitiesRepo.findDistinctDebtTypeCodeAndDescriptionByEntityId(entityId)).thenThrow(new IllegalArgumentException("--Illegal Argument Exception From Repo"));
		
		try {
		   m = issuesAndMaturitiesDao.getDropdownDebtTypes(entityId);
		}catch(Exception e){
				assertEquals(IllegalArgumentException.class,e.getClass());
				assertNull(m);	
		}
	}
	
	@Test
	public void getDropdownDebtTypesillegalArgumentTest1() {
		System.out.println("@IssuesAndMaturitiesDaoTest: In getDropdownDebtTypesillegalArgumentTest");
		
		List<DebtTypes> m =null;
		Long entityId = Long.valueOf(100751);
		
		when(issuesAndMaturitiesRepo.findDistinctDebtTypeCodeAndDescriptionByEntityId(entityId)).thenThrow(new HttpClientErrorException(HttpStatus.NOT_FOUND));
		
		try {
		   m = issuesAndMaturitiesDao.getDropdownDebtTypes(entityId);
		}catch(Exception e){
				assertEquals(IllegalArgumentException.class,e.getClass());
				assertNull(m);	
		}
	}
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\test\java\com\spglobal\ratings\ratingsdata\dao\IssuesAndMaturitiesHistoryDaoTest.java

package com.spglobal.ratings.ratingsdata.dao;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.mockito.Mockito.when;

import java.sql.Date;
import java.util.ArrayList;
import java.util.List;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.http.HttpStatus;
import org.springframework.test.context.junit.jupiter.SpringExtension;
import org.springframework.web.client.HttpClientErrorException;

import com.spglobal.ratings.ratingsdata.entity.IssuesAndMaturitiesHistory;
import com.spglobal.ratings.ratingsdata.repository.IssuesAndMaturitiesHistoryRepository;
import com.spglobal.ratings.ratingsdata.util.RatingsDataUtil;

@ExtendWith({SpringExtension.class, MockitoExtension.class})
public class IssuesAndMaturitiesHistoryDaoTest {
	
	@InjectMocks
	IssuesAndMaturitiesHistoryDao issuesAndMaturitiesHistoryDao;
	
	@Mock
	RatingsDataUtil ratingsUtil;
	
	@Mock
	IssuesAndMaturitiesHistoryRepository issuesAndMaturitiesRepo;
	
	List<IssuesAndMaturitiesHistory> issuesAndMaturitiesHistory = null;
	IssuesAndMaturitiesHistory history;
	
	@BeforeEach
	public void init() throws Exception {
		issuesAndMaturitiesHistory = new ArrayList<IssuesAndMaturitiesHistory>();
		history = new IssuesAndMaturitiesHistory();
		history.setInstrumentId(Long.valueOf(1429537));
		history.setInstrumentDetailId(Long.valueOf(4750402));
		history.setRatingTypeCode("STDLONG");
		history.setRatingTypeDescription("Local Currency LT");
		history.setRating("BB");
		history.setRatingDate(new Date(06/06/2023));
		history.setAction("New Rating | CreditWatch/Outlook");
		history.setCreditwatchOutlook("Watch Pos");
		history.setCreditwatchOutlookDate(new Date(06/06/2023));
		history.setDebtTypeCode("SRUNSEC");
		history.setRatingDetailId(Long.valueOf(41412790));
		history.setDataAdminDate(new Date(06/06/2023));
		history.setConfidentialityInd("N");
		history.setConfidentialCategoryCode(null);
		issuesAndMaturitiesHistory.add(history);
	}
	
	@Test
	public void getIssuesAndMaturitiesHistoryTest() {
		System.out.println("@IssuesAndMaturitiesHistoryDaoTest: In getIssuesAndMaturitiesHistoryTest method");
		Long instrumentId = Long.valueOf(1429537);
		String ratingTypeCode = "STDLONG";
		Long instrumentDetailId = Long.valueOf(4750402);
		
		List<IssuesAndMaturitiesHistory> im = new ArrayList<IssuesAndMaturitiesHistory>();
		when(issuesAndMaturitiesRepo.findByInstrumentIdAndRatingTypeCodeAndInstrumentDetailId(instrumentId, ratingTypeCode, instrumentDetailId)).thenReturn(issuesAndMaturitiesHistory);
		im = issuesAndMaturitiesHistoryDao.getIssuesAndMaturitiesHistory(instrumentId, ratingTypeCode, instrumentDetailId);
		assertEquals(im, issuesAndMaturitiesHistory);
	}
	
	@Test
	public void getIssuesAndMaturitiesHistoryillegalArgumentTest() {
		System.out.println("@IssuesAndMaturitiesHistoryDaoTest: In getIssuesAndMaturitiesHistoryillegalArgumentTest method");
		
		List<IssuesAndMaturitiesHistory> im = null;
		Long instrumentId = Long.valueOf(1429537);
		String ratingTypeCode = "STDLONG";
		Long instrumentDetailId = Long.valueOf(4750402);
		when(issuesAndMaturitiesRepo.findByInstrumentIdAndRatingTypeCodeAndInstrumentDetailId(instrumentId, ratingTypeCode, instrumentDetailId)).thenThrow(new IllegalArgumentException("--Illegal Argument Exception From Repo"));
		
		try {
			im = issuesAndMaturitiesHistoryDao.getIssuesAndMaturitiesHistory(instrumentId, ratingTypeCode, instrumentDetailId);
		} catch(Exception e) {
			assertEquals(IllegalArgumentException.class,e.getClass());
			assertNull(im);
		}
	}

	@Test
	public void getIssuesAndMaturitiesHistoryillegalArgumentTest1() {
		System.out.println("@IssuesAndMaturitiesHistoryDaoTest: In getIssuesAndMaturitiesHistoryillegalArgumentTest method");
		
		List<IssuesAndMaturitiesHistory> im = null;
		Long instrumentId = Long.valueOf(1429537);
		String ratingTypeCode = "STDLONG";
		Long instrumentDetailId = Long.valueOf(4750402);
		when(issuesAndMaturitiesRepo.findByInstrumentIdAndRatingTypeCodeAndInstrumentDetailId(instrumentId, ratingTypeCode, instrumentDetailId)).thenThrow(new HttpClientErrorException(HttpStatus.NOT_FOUND));
		
		try {
			im = issuesAndMaturitiesHistoryDao.getIssuesAndMaturitiesHistory(instrumentId, ratingTypeCode, instrumentDetailId);
		} catch(Exception e) {
			assertEquals(IllegalArgumentException.class,e.getClass());
			assertNull(im);
		}
	}
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\test\java\com\spglobal\ratings\ratingsdata\dao\IssuesAndMaturitiesHistoryPublicDaoTest.java

package com.spglobal.ratings.ratingsdata.dao;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.mockito.Mockito.when;

import java.sql.Date;
import java.util.ArrayList;
import java.util.List;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.http.HttpStatus;
import org.springframework.test.context.junit.jupiter.SpringExtension;
import org.springframework.web.client.HttpClientErrorException;

import com.spglobal.ratings.ratingsdata.entity.IssuesAndMaturitiesHistoryPublic;
import com.spglobal.ratings.ratingsdata.repository.IssuesAndMaturitiesHistoryPublicRepository;
import com.spglobal.ratings.ratingsdata.util.RatingsDataUtil;

@ExtendWith({SpringExtension.class, MockitoExtension.class})
public class IssuesAndMaturitiesHistoryPublicDaoTest {
	
	@InjectMocks
	IssuesAndMaturitiesHistoryPublicDao issuesAndMaturitiesHistoryPublicDao;
	
	@Mock
	RatingsDataUtil ratingsUtil;
	
	@Mock
	IssuesAndMaturitiesHistoryPublicRepository issuesAndMaturitiesHistoryPublicRepo;
	
	List<IssuesAndMaturitiesHistoryPublic> issuesAndMaturitiesHistory = null;
	IssuesAndMaturitiesHistoryPublic history;
	
	@BeforeEach
	public void init() throws Exception {
		
		MockitoAnnotations.initMocks(this);
		
		issuesAndMaturitiesHistory = new ArrayList<IssuesAndMaturitiesHistoryPublic>();
		history = new IssuesAndMaturitiesHistoryPublic();
		history.setInstrumentId(Long.valueOf(1429537));
		history.setInstrumentDetailId(Long.valueOf(4750402));
		history.setRatingTypeCode("STDLONG");
		history.setRatingTypeDescription("Local Currency LT");
		history.setRating("BB");
		history.setRatingDate(new Date(06/06/2023));
		history.setAction("New Rating | CreditWatch/Outlook");
		history.setCreditwatchOutlook("Watch Pos");
		history.setCreditwatchOutlookDate(new Date(06/06/2023));
		history.setDebtTypeCode("SRUNSEC");
		history.setRatingDetailId(Long.valueOf(41412790));
		history.setDataAdminDate(new Date(06/06/2023));
		issuesAndMaturitiesHistory.add(history);
	}
	
	@Test
	public void getPublicIssuesAndMaturitiesHistoryTest() {
		System.out.println("@IssuesAndMaturitiesHistoryPublicDaoTest: In getPublicIssuesAndMaturitiesHistoryTest method");
		Long instrumentId = Long.valueOf(1429537);
		String ratingTypeCode = "STDLONG";
		Long instrumentDetailId = Long.valueOf(4750402);
		
		List<IssuesAndMaturitiesHistoryPublic> im = new ArrayList<IssuesAndMaturitiesHistoryPublic>();
		when(issuesAndMaturitiesHistoryPublicRepo.findByInstrumentIdAndRatingTypeCodeAndInstrumentDetailId(instrumentId, ratingTypeCode, instrumentDetailId)).thenReturn(issuesAndMaturitiesHistory);
		im = issuesAndMaturitiesHistoryPublicDao.getPublicIssuesAndMaturitiesHistory(instrumentId, ratingTypeCode, instrumentDetailId);
		assertEquals(im, issuesAndMaturitiesHistory);
	}
	
	@Test
	public void getPublicIssuesAndMaturitiesHistoryillegalArgumentTest() {
		System.out.println("@IssuesAndMaturitiesHistoryPublicDaoTest: In getPublicIssuesAndMaturitiesHistoryillegalArgumentTest method");
		
		List<IssuesAndMaturitiesHistoryPublic> im = null;
		Long instrumentId = Long.valueOf(1429537);
		String ratingTypeCode = "STDLONG";
		Long instrumentDetailId = Long.valueOf(4750402);
		when(issuesAndMaturitiesHistoryPublicRepo.findByInstrumentIdAndRatingTypeCodeAndInstrumentDetailId(instrumentId, ratingTypeCode, instrumentDetailId)).thenThrow(new IllegalArgumentException("--Illegal Argument Exception From Repo"));
		
		try {
			im = issuesAndMaturitiesHistoryPublicDao.getPublicIssuesAndMaturitiesHistory(instrumentId, ratingTypeCode, instrumentDetailId);
		} catch(Exception e) {
			assertEquals(IllegalArgumentException.class,e.getClass());
			assertNull(im);
		}
	}
	
	@Test
	public void getPublicIssuesAndMaturitiesHistoryillegalArgumentTest1() {
		System.out.println("@IssuesAndMaturitiesHistoryPublicDaoTest: In getPublicIssuesAndMaturitiesHistoryillegalArgumentTest method");
		
		List<IssuesAndMaturitiesHistoryPublic> im = null;
		Long instrumentId = Long.valueOf(1429537);
		String ratingTypeCode = "STDLONG";
		Long instrumentDetailId = Long.valueOf(4750402);
		when(issuesAndMaturitiesHistoryPublicRepo.findByInstrumentIdAndRatingTypeCodeAndInstrumentDetailId(instrumentId, ratingTypeCode, instrumentDetailId)).thenThrow(new HttpClientErrorException(HttpStatus.NOT_FOUND));
		
		try {
			im = issuesAndMaturitiesHistoryPublicDao.getPublicIssuesAndMaturitiesHistory(instrumentId, ratingTypeCode, instrumentDetailId);
		} catch(Exception e) {
			assertEquals(IllegalArgumentException.class,e.getClass());
			assertNull(im);
		}
	}

}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\test\java\com\spglobal\ratings\ratingsdata\dao\IssuesAndMaturitiesPublicDaoTest.java

package com.spglobal.ratings.ratingsdata.dao;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.mockito.Mockito.when;

import java.sql.Date;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.List;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.http.HttpStatus;
import org.springframework.test.context.junit.jupiter.SpringExtension;
import org.springframework.web.client.HttpClientErrorException;

import com.spglobal.ratings.ratingsdata.entity.IssuesAndMaturitiesPublic;
import com.spglobal.ratings.ratingsdata.repository.IssuesAndMaturitiesPublicRepository;
import com.spglobal.ratings.ratingsdata.util.RatingsDataUtil;

@ExtendWith({SpringExtension.class, MockitoExtension.class})
public class IssuesAndMaturitiesPublicDaoTest {
	
	@InjectMocks
	IssuesAndMaturitiesPublicDao issuesAndMaturitiesDao;
	
	@Mock
	RatingsDataUtil ratingsUtil;
	
	@Mock
	IssuesAndMaturitiesPublicRepository issuesAndMaturitiesRepo;
	
	List<IssuesAndMaturitiesPublic> issuesAndMaturities = null;
	IssuesAndMaturitiesPublic entity;
	
	@BeforeEach
	public void init() throws Exception {
		issuesAndMaturities = new ArrayList<IssuesAndMaturitiesPublic>();
		entity = new IssuesAndMaturitiesPublic();
		entity.setEntityId(Long.valueOf(121242));
		entity.setInstrumentId(Long.valueOf(1301099));
		entity.setInstrumentDetailId(Long.valueOf(4421612));
		entity.setInstrumentName("US$1.5 bil 5.10% nts due 09/28/2048");
		entity.setDebtTypeCode("SRUNSEC");
		entity.setDescription("Senior Unsecured");
		entity.setMaturityDate(new Date(05/23/2023));
		entity.setMaturityDateDerived(new Timestamp(05/23/2023));
		entity.setCusip("902494BH5");
		entity.setIsin("US902494BH59");
		entity.setRatingTypeCode("STDLONG");
		entity.setRatingTypeDescription("Local Currency LT");
		entity.setCurrentRatingSymbol("BBB+");
		entity.setRatingDate(new Date(05/23/2023));
		entity.setDataAdminDate(new Date(05/23/2023));
		entity.setLastReviewDate(new Date(05/23/2023));
		entity.setRegulatoryIndicator("EE|UKE");
		entity.setIssueProgramType("Notes");
		entity.setCouponRate("5.1%");
		entity.setOriginalPrincipalBalance("USD 1,500,000,000");
		entity.setCurrency("USD");
		entity.setSortOrder(15);
		entity.setPrecedenceNum(1);
		entity.setRatingDetailId(Long.valueOf(39898462));
		issuesAndMaturities.add(entity);
	}
	
	@Test
	public void getIssuesAndMaturitiesByEntityIdTest() {
		System.out.println("@IssuesAndMaturitiesPublicDaoTest: In getIssuesAndMaturitiesByEntityIdTest method");
		Long entityId = Long.valueOf(121242);
		
		List<IssuesAndMaturitiesPublic> e = new ArrayList<IssuesAndMaturitiesPublic>();
		when(issuesAndMaturitiesRepo.findByEntityId(entityId)).thenReturn(issuesAndMaturities);
		e = issuesAndMaturitiesDao.getIssuesAndMaturitiesByEntityId(entityId);
		assertEquals(e, issuesAndMaturities);
	}
	
	@Test
	public void getIssuesAndMaturitiesByEntityIdillegalArgumentTest() {
		System.out.println("@IssuesAndMaturitiesPublicDaoTest: In getIssuesAndMaturitiesByEntityIdillegalArgumentTest method");
		
		List<IssuesAndMaturitiesPublic> m =null;
		Long entityId = Long.valueOf(100751);
		when(issuesAndMaturitiesRepo.findByEntityId(entityId)).thenThrow(new IllegalArgumentException("--Illegal Argument Exception From Repo"));
		
		try {
		   m = issuesAndMaturitiesDao.getIssuesAndMaturitiesByEntityId(entityId);
		}catch(Exception e){
				assertEquals(IllegalArgumentException.class,e.getClass());
				assertNull(m);	
		}
	}
	
	@Test
	public void getIssuesAndMaturitiesByEntityIdillegalArgumentTest1() {
		System.out.println("@IssuesAndMaturitiesPublicDaoTest: In getIssuesAndMaturitiesByEntityIdillegalArgumentTest method");
		
		List<IssuesAndMaturitiesPublic> m =null;
		Long entityId = Long.valueOf(100751);
		when(issuesAndMaturitiesRepo.findByEntityId(entityId)).thenThrow(new HttpClientErrorException(HttpStatus.NOT_FOUND));
		
		try {
		   m = issuesAndMaturitiesDao.getIssuesAndMaturitiesByEntityId(entityId);
		}catch(Exception e){
				assertEquals(IllegalArgumentException.class,e.getClass());
				assertNull(m);	
		}
	}
	
	@Test
	public void getIssuesAndMaturitiesByEntityIdAndDebtTypeCodeTest() {
		System.out.println("@IssuesAndMaturitiesPublicDaoTest: In getIssuesAndMaturitiesByEntityIdAndDebtTypeCodeTest method");
		Long entityId = Long.valueOf(121242);
		String debtTypeCode = "SRUNSEC";
		
		List<IssuesAndMaturitiesPublic> e = new ArrayList<IssuesAndMaturitiesPublic>();
		when(issuesAndMaturitiesRepo.findByEntityIdAndDebtTypeCode(entityId, debtTypeCode)).thenReturn(issuesAndMaturities);
		e = issuesAndMaturitiesDao.getIssuesAndMaturitiesByEntityIdAndDebtTypeCode(entityId, debtTypeCode);
		assertEquals(e, issuesAndMaturities);
	}
	
	@Test
	public void getIssuesAndMaturitiesByEntityIdAndDebtTypeCodeillegalArgumentTest() {
		System.out.println("@IssuesAndMaturitiesPublicDaoTest: In getIssuesAndMaturitiesByEntityIdAndDebtTypeCodeillegalArgumentTest method");
		
		List<IssuesAndMaturitiesPublic> m =null;
		Long entityId = Long.valueOf(100751);
		String debtTypeCode = "SRUNSEC";
		when(issuesAndMaturitiesRepo.findByEntityIdAndDebtTypeCode(entityId, debtTypeCode)).thenThrow(new IllegalArgumentException("--Illegal Argument Exception From Repo"));
		
		try {
		   m = issuesAndMaturitiesDao.getIssuesAndMaturitiesByEntityIdAndDebtTypeCode(entityId, debtTypeCode);
		}catch(Exception e){
				assertEquals(IllegalArgumentException.class,e.getClass());
				assertNull(m);	
		}
	}
	
	@Test
	public void getIssuesAndMaturitiesByEntityIdAndDebtTypeCodeillegalArgumentTest1() {
		System.out.println("@IssuesAndMaturitiesPublicDaoTest: In getIssuesAndMaturitiesByEntityIdAndDebtTypeCodeillegalArgumentTest method");
		
		List<IssuesAndMaturitiesPublic> m =null;
		Long entityId = Long.valueOf(100751);
		String debtTypeCode = "SRUNSEC";
		when(issuesAndMaturitiesRepo.findByEntityIdAndDebtTypeCode(entityId, debtTypeCode)).thenThrow(new HttpClientErrorException(HttpStatus.NOT_FOUND));
		
		try {
		   m = issuesAndMaturitiesDao.getIssuesAndMaturitiesByEntityIdAndDebtTypeCode(entityId, debtTypeCode);
		}catch(Exception e){
				assertEquals(IllegalArgumentException.class,e.getClass());
				assertNull(m);	
		}
	}
	
	@Test
	public void getIssuesAndMaturitiesDetailsTest() {
		System.out.println("@IssuesAndMaturitiesPublicDaoTest: In getIssuesAndMaturitiesDetailsTest method");
		Long entityId = Long.valueOf(121242);
		Long ratingDetailId = Long.valueOf(39898462);
		
		IssuesAndMaturitiesPublic e = new IssuesAndMaturitiesPublic();
		when(issuesAndMaturitiesRepo.findByEntityIdAndRatingDetailId(entityId, ratingDetailId)).thenReturn(entity);
		e = issuesAndMaturitiesDao.getIssuesAndMaturitiesDetails(entityId, ratingDetailId);
		assertEquals(e, entity);
	}
	
	@Test
	public void getIssuesAndMaturitiesDetailsillegalArgumentTest() {
		System.out.println("@IssuesAndMaturitiesPublicDaoTest: In getIssuesAndMaturitiesDetailsillegalArgumentTest method");
		
		IssuesAndMaturitiesPublic m =null;
		Long entityId = Long.valueOf(100751);
		Long ratingDetailId = Long.valueOf(39898462);
		when(issuesAndMaturitiesRepo.findByEntityIdAndRatingDetailId(entityId, ratingDetailId)).thenThrow(new IllegalArgumentException("--Illegal Argument Exception From Repo"));
		
		try {
		   m = issuesAndMaturitiesDao.getIssuesAndMaturitiesDetails(entityId, ratingDetailId);
		}catch(Exception e){
				assertEquals(IllegalArgumentException.class,e.getClass());
				assertNull(m);	
		}
	}
	@Test
	public void getIssuesAndMaturitiesDetailsillegalArgumentTest1() {
		System.out.println("@IssuesAndMaturitiesPublicDaoTest: In getIssuesAndMaturitiesDetailsillegalArgumentTest method");
		
		IssuesAndMaturitiesPublic m =null;
		Long entityId = Long.valueOf(100751);
		Long ratingDetailId = Long.valueOf(39898462);
		when(issuesAndMaturitiesRepo.findByEntityIdAndRatingDetailId(entityId, ratingDetailId)).thenThrow(new HttpClientErrorException(HttpStatus.NOT_FOUND));
		
		try {
		   m = issuesAndMaturitiesDao.getIssuesAndMaturitiesDetails(entityId, ratingDetailId);
		}catch(Exception e){
				assertEquals(IllegalArgumentException.class,e.getClass());
				assertNull(m);	
		}
	}

}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\test\java\com\spglobal\ratings\ratingsdata\dao\IssuesMaturitiesUSPFPubDaoTest.java

package com.spglobal.ratings.ratingsdata.dao;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.mockito.Mockito.when;

import java.sql.Date;
import java.util.ArrayList;
import java.util.List;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.test.context.junit.jupiter.SpringExtension;

import com.spglobal.ratings.ratingsdata.entity.IssuesMaturitiesUSPFPub;
import com.spglobal.ratings.ratingsdata.model.InstrumentsData;
import com.spglobal.ratings.ratingsdata.model.USPFMinMaxDates;
import com.spglobal.ratings.ratingsdata.repository.IssuesMaturitiesUSPFPubRepository;
import com.spglobal.ratings.ratingsdata.util.RatingsDataUtil;

@ExtendWith({ SpringExtension.class, MockitoExtension.class })
public class IssuesMaturitiesUSPFPubDaoTest {

	@InjectMocks
	IssuesMaturitiesUSPFPubDao issuesAndMaturitiesDao;

	@Mock
	RatingsDataUtil ratingsUtil;

	@Mock
	IssuesMaturitiesUSPFPubRepository issuesAndMaturitiesRepo;


	List<IssuesMaturitiesUSPFPub> detailsListExp = null;
	IssuesMaturitiesUSPFPub issuesMaturitiesUSPFPub = null;

	List<InstrumentsData> instrusDataList = null;

	@BeforeEach
	public void init() throws Exception {

		detailsListExp = new ArrayList<IssuesMaturitiesUSPFPub>(1);
		issuesMaturitiesUSPFPub = new IssuesMaturitiesUSPFPub();

		issuesMaturitiesUSPFPub.setRatingDetailId(43111215L);
		issuesMaturitiesUSPFPub.setInstrumentDetailId(3694016L);
		issuesMaturitiesUSPFPub.setIssueName(
				"US$141.445 mil 2nd lien rev rfdg bnds (Chicago Midway Intl Arpt) (Non-amt)  ser 2013B due 01/01/2036");
		issuesMaturitiesUSPFPub.setInstrumentId(1037363L);
		issuesMaturitiesUSPFPub.setRatingDetailId(43111215L);
		issuesMaturitiesUSPFPub.setInstrumentDetailId(3694016L);
		issuesMaturitiesUSPFPub.setInsuranceProvider(null);
		// issuesMaturitiesUSPFPub.setDebtType("Municipal Debt");
		issuesMaturitiesUSPFPub.setMaturityDate(new Date(05 / 23 / 2023));
		issuesMaturitiesUSPFPub.setCusip("167562NE3");
		issuesMaturitiesUSPFPub.setRatingTypeCode("STDLONG");
		issuesMaturitiesUSPFPub.setRatingType("Local Currency LT");
		issuesMaturitiesUSPFPub.setRating("A");
		issuesMaturitiesUSPFPub.setRatingDate(new Date(05 / 23 / 2023));
		issuesMaturitiesUSPFPub.setDataAdminDate(new Date(05 / 23 / 2023));
		issuesMaturitiesUSPFPub.setLastReviewDate(new Date(05 / 23 / 2023));
		issuesMaturitiesUSPFPub.setCouponRate("5.25%");
		// issuesMaturitiesUSPFPub.setCreditwatchOutlook("Stable");
		// issuesMaturitiesUSPFPub.setCreditwatchOutlookDate("1675356721000");
		issuesMaturitiesUSPFPub.setRefunded("N");
		issuesMaturitiesUSPFPub.setRegulatoryIdentifier(null);
		issuesMaturitiesUSPFPub.setAction("Upgrade | CreditWatch/Outlook");
		issuesMaturitiesUSPFPub.setSeries("2013B");
		issuesMaturitiesUSPFPub.setAsId(2857L);

		detailsListExp.add(issuesMaturitiesUSPFPub);

		instrusDataList = new ArrayList<InstrumentsData>(1);
		InstrumentsData instrumentData = new InstrumentsData(
				"US$141.445 mil 2nd lien rev rfdg bnds (Chicago Midway Intl Arpt) (Non-amt)  ser 2013B due 01/01/2036",
				1037363L, "2013B","2016");
		instrusDataList.add(instrumentData);
	}

	@Test
	public void getIssuesAndMaturitiesDetailsTest() {
		System.out.println("@IssuesAndMaturitiesPublicDaoTest: In getIssuesAndMaturitiesDetailsTest method");

		Long securityId = Long.valueOf(121242);
		Long ratingDetailId = Long.valueOf(121242);
		Long instrumentId = Long.valueOf(121242);
		Boolean instrusOnly = true;

		when(issuesAndMaturitiesRepo.findDistinctIssueName(securityId))
				.thenReturn(instrusDataList);
		List<IssuesMaturitiesUSPFPub> e = issuesAndMaturitiesDao.getIssuesAndMaturitiesDetails( securityId,
				ratingDetailId, instrumentId, instrusOnly);

		assertNotNull(e);
	}

	@Test
	public void getIssuesAndMaturitiesDetailsTest2() {
		System.out.println("@IssuesAndMaturitiesPublicDaoTest: In getIssuesAndMaturitiesDetailsTest method");

		Long securityId = Long.valueOf(121242);
		Long ratingDetailId = Long.valueOf(121242);
		Long instrumentId = Long.valueOf(121242);
		Boolean instrusOnly = false;

		when(issuesAndMaturitiesRepo.findBySecurityIdAndInstrumentId(securityId, instrumentId))
				.thenReturn(detailsListExp);
		List<IssuesMaturitiesUSPFPub> e = issuesAndMaturitiesDao.getIssuesAndMaturitiesDetails( securityId,
				ratingDetailId, instrumentId, instrusOnly);

		assertEquals(e, detailsListExp);
	}

	@Test
	public void getIssuesAndMaturitiesDetailsTest3() {
		System.out.println("@IssuesAndMaturitiesPublicDaoTest: In getIssuesAndMaturitiesDetailsTest method");

		Long securityId = Long.valueOf(121242);
		Long ratingDetailId = Long.valueOf(121242);
		Long instrumentId = null;
		Boolean instrusOnly = false;

		when(issuesAndMaturitiesRepo.findBySecurityIdAndRatingDetailId(securityId, ratingDetailId))
				.thenReturn(detailsListExp);
		List<IssuesMaturitiesUSPFPub> e = issuesAndMaturitiesDao.getIssuesAndMaturitiesDetails( securityId,
				ratingDetailId, instrumentId, instrusOnly);
		assertEquals(e, detailsListExp);
	}

	@Test
	public void getIssuesAndMaturitiesDetailsTest4() {
		System.out.println("@IssuesAndMaturitiesPublicDaoTest: In getIssuesAndMaturitiesDetailsTest method");

		Long securityId = Long.valueOf(121242);
		Long ratingDetailId = null;
		Long instrumentId = null;
		Boolean instrusOnly = false;

		when(issuesAndMaturitiesRepo.findBySecurityId(securityId)).thenReturn(detailsListExp);
		List<IssuesMaturitiesUSPFPub> e = issuesAndMaturitiesDao.getIssuesAndMaturitiesDetails( securityId,
				ratingDetailId, instrumentId, instrusOnly);

		assertEquals(e, detailsListExp);
	}

	@Test
	public void getIssuesAndMaturitiesDetailsTest6() {
		System.out.println("@IssuesAndMaturitiesPublicDaoTest: In getIssuesAndMaturitiesDetailsTest method");

		Long securityId = Long.valueOf(121242);
		Long ratingDetailId = null;
		Long instrumentId = null;
		Boolean instrusOnly = false;

		when(issuesAndMaturitiesRepo.findBySecurityId( securityId))
				.thenThrow(new IllegalArgumentException("NullPointer Exception"));
		
		List<IssuesMaturitiesUSPFPub> e = issuesAndMaturitiesDao.getIssuesAndMaturitiesDetails( securityId,
				ratingDetailId, instrumentId, instrusOnly);

		assertNull(e);
	}


}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\test\java\com\spglobal\ratings\ratingsdata\dao\PeersCurrentRatingDaoTest.java

package com.spglobal.ratings.ratingsdata.dao;

import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.test.context.junit.jupiter.SpringExtension;

import com.spglobal.ratings.ratingsdata.entity.PeerCurrentRatings;
import com.spglobal.ratings.ratingsdata.entity.PeersCurrentRatings;
import com.spglobal.ratings.ratingsdata.repository.PeerCurrentRatingsRepository;
import com.spglobal.ratings.ratingsdata.repository.PeersCurrentRatingsRepository;
import com.spglobal.ratings.ratingsdata.service.UserEntitlementCheckImpl;
import com.spglobal.ratings.ratingsdata.util.RatingsDataUtil;

@ExtendWith({SpringExtension.class, MockitoExtension.class})
public class PeersCurrentRatingDaoTest {
	
	@InjectMocks
	PeersCurrentRatingsDao peersCurrentRatingDao;
	
	@Mock
	RatingsDataUtil ratingsUtil;
	
	@Mock
	PeersCurrentRatingsRepository peersCurrentRatingsRepo;
	
	@Mock
	PeerCurrentRatingsRepository peerCurrentRatingsRepo;
	
	@Mock
	UserEntitlementCheckImpl userEntitlementCheck;

	PeersCurrentRatings peersCurRating = null;
	PeerCurrentRatings peerCurRating = null;
	List<PeersCurrentRatings> peersCurRatingList = null;
	
	@BeforeEach
	public void init() throws Exception {
		
		MockitoAnnotations.initMocks(this);
		
		peersCurRatingList = new ArrayList<PeersCurrentRatings>();
		
		peersCurRating = new PeersCurrentRatings();
		peersCurRating.setEntityId(Long.valueOf(111719));
	
		peersCurRating.setActionSTDLong("New Rating | CreditWatch/Outlook");
		peersCurRating.setActionSTDLong("CreditWatch/Outlook");
		peersCurRating.setConfidentialFCLong("Public");
		peersCurRating.setConfidentialSTDLong("Public"); 
		peersCurRating.setCwOLDateFCLong("2023-03-31 17:08:19"); 
		peersCurRating.setCwOLDdateSTDLong("2023-03-31 17:08:19"); 
		peersCurRating.setCwOLDfclong("Stable"); 
		peersCurRating.setCwOLSTDLong("Stable"); 
		peersCurRating.setLastReviewDateFCLong("2015-12-02 18:51:13"); 
		peersCurRating.setLastReviewDateSTDLong("2015-12-02 18:51:13");
		peersCurRating.setRatingDateFCLong("2015-12-02 18:51:13"); 
		peersCurRating.setRatingDateSTDLong("2015-12-02 18:51:13"); 
		peersCurRating.setRatingFCLong("A-") ;
		peersCurRating.setRatingSTDLong("A-");
		peersCurRating.setRatingTypeCodeFCLong("FCLONG");
		peersCurRating.setRatingTypeCodeSTDLong("FCLONG");
		peersCurRating.setEntityLegalName("TEST AHY505");

		peersCurRatingList.add(peersCurRating);
		
		
		
		peerCurRating = new PeerCurrentRatings();
		peerCurRating.setEntityId(Long.valueOf(111719));
	
		peerCurRating.setActionSTDLong("New Rating | CreditWatch/Outlook");
		peerCurRating.setActionSTDLong("CreditWatch/Outlook");
		peerCurRating.setConfidentialFCLong("Public");
		peerCurRating.setConfidentialSTDLong("Public"); 
		peerCurRating.setCwOLDateFCLong("2023-03-31 17:08:19"); 
		peerCurRating.setCwOLDdateSTDLong("2023-03-31 17:08:19"); 
		peerCurRating.setCwOLDfclong("Stable"); 
		peerCurRating.setCwOLSTDLong("Stable"); 
		peerCurRating.setLastReviewDateFCLong("2015-12-02 18:51:13"); 
		peerCurRating.setLastReviewDateSTDLong("2015-12-02 18:51:13");
		peerCurRating.setRatingDateFCLong("2015-12-02 18:51:13"); 
		peerCurRating.setRatingDateSTDLong("2015-12-02 18:51:13"); 
		peerCurRating.setRatingFCLong("A-") ;
		peerCurRating.setRatingSTDLong("A-");
		peerCurRating.setRatingTypeCodeFCLong("FCLONG");
		peerCurRating.setRatingTypeCodeSTDLong("FCLONG");
		peerCurRating.setEntityLegalName("TEST AHY505");
	}
	
	@Test
	public void getPeersCurrentRatingsTest(){
		String commaSepOrgIds = "112354,111719";
		Long entityId = 112354L;
		List<Long> orgIdsLngArrayList = new ArrayList<Long>(2);
		orgIdsLngArrayList.add(111719L);
		when(peerCurrentRatingsRepo.findByEntityId(entityId)).thenReturn(peerCurRating);
		when(peersCurrentRatingsRepo.findByEntityId(orgIdsLngArrayList)).thenReturn(peersCurRatingList);
		List<PeersCurrentRatings> list = peersCurrentRatingDao.getPeersCurrentRatings(commaSepOrgIds);
		assertNotNull(list);
		
	}
	
	@Test
	public void getPeersCurrentRatingsTestExcep(){
		String commaSepOrgIds = "112354,111719";
		Long entityId = 112354L;
		when(peerCurrentRatingsRepo.findByEntityId(entityId)).thenThrow(new IllegalArgumentException());
		List<PeersCurrentRatings> list = peersCurrentRatingDao.getPeersCurrentRatings(commaSepOrgIds);
		assertNull(list);
		
	}
	
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\test\java\com\spglobal\ratings\ratingsdata\dao\PeersCurrentRatingsDaoTest.java

package com.spglobal.ratings.ratingsdata.dao;

import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.when;

import java.util.List;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.http.HttpStatus;
import org.springframework.test.context.junit.jupiter.SpringExtension;
import org.springframework.web.client.HttpClientErrorException;

import com.spglobal.ratings.ratingsdata.entity.PeersCurrentRatings;
import com.spglobal.ratings.ratingsdata.repository.PeerCurrentRatingsRepository;
import com.spglobal.ratings.ratingsdata.repository.PeersCurrentRatingsRepository;
import com.spglobal.ratings.ratingsdata.util.RatingsDataUtil;


@ExtendWith({SpringExtension.class, MockitoExtension.class})
public class PeersCurrentRatingsDaoTest {

    @InjectMocks
    PeersCurrentRatingsDao peersCurrentRatingsDao;

    @Mock
	private RatingsDataUtil ratingsUtil;
	
    @Mock
	private PeersCurrentRatingsRepository peersCurrentRatingsRepo;
	
	@Mock
	private PeerCurrentRatingsRepository peerCurrentRatingsRepo;
	 
	@Test
	public void getPeersCurrentRatingsTest() {
		List<PeersCurrentRatings> response = peersCurrentRatingsDao.getPeersCurrentRatings("123,123");
        assertNotNull(response);
	}
	
	@Test
	public void getPeersCurrentRatingsTestError() {
		when(peerCurrentRatingsRepo.findByEntityId(any())).thenThrow(new IllegalArgumentException());
		List<PeersCurrentRatings> response = peersCurrentRatingsDao.getPeersCurrentRatings("123,123");
        assertNull(response);
	}
	
	@Test
	public void getPeersCurrentRatingsTestException() {
		when(peerCurrentRatingsRepo.findByEntityId(any())).thenThrow(new HttpClientErrorException(HttpStatus.NOT_FOUND));
		List<PeersCurrentRatings> response = peersCurrentRatingsDao.getPeersCurrentRatings("123,123");
        assertNull(response);
	}
	
//	@Test
//	public void getRatingCriteriaArticlesFailureTest2() {
//		List<CurrencyExchangeRate> response = currencyExchangeRateDao.getMinorCurrencyExchangeRates("JPY","INR","20230516,20220520,20201205,20210630,20220807");
//        assertNotNull(response);
//	}

}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\test\java\com\spglobal\ratings\ratingsdata\dao\PeersEntityRatingsDaoTest.java

package com.spglobal.ratings.ratingsdata.dao;

import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.test.context.junit.jupiter.SpringExtension;

import com.spglobal.ratings.ratingsdata.entity.PeersEntityRatings;
import com.spglobal.ratings.ratingsdata.entity.PeersEntityRatingsPublic;
import com.spglobal.ratings.ratingsdata.entity.RatingHistoryLastTenYrs;
import com.spglobal.ratings.ratingsdata.entity.RatingHistoryLastTenYrsPublic;
import com.spglobal.ratings.ratingsdata.repository.PeersEntityRatingsPubRepository;
import com.spglobal.ratings.ratingsdata.repository.PeersEntityRatingsRepository;
import com.spglobal.ratings.ratingsdata.service.UserEntitlementCheckImpl;
import com.spglobal.ratings.ratingsdata.util.RatingsDataUtil;

@ExtendWith({SpringExtension.class, MockitoExtension.class})
public class PeersEntityRatingsDaoTest {
	
	@InjectMocks
	PeersEntityRatingsDao peersEntityRatingDao;
	
	@Mock
	RatingsDataUtil ratingsUtil;
	
	@Mock
	PeersEntityRatingsPubRepository peersEntityRatingsPubRepo;
	
	@Mock
	PeersEntityRatingsRepository peersEntityRatingRepo;
	
	@Mock
	UserEntitlementCheckImpl userEntitlementCheck;

	List<PeersEntityRatingsPublic> peersEntityRatingsPubList = null;
	List<PeersEntityRatings> peersEntityRatingsList = null;
	
	PeersEntityRatingsPublic peersEntityRatingsPub = null;
	PeersEntityRatings peersEntityRatings = null; 
	
	@BeforeEach
	public void init() throws Exception {
		
		MockitoAnnotations.initMocks(this);
		
		peersEntityRatingsPubList = new ArrayList();
		
		peersEntityRatingsPub = new PeersEntityRatingsPublic();
		peersEntityRatingsPub.setEntityId(Long.valueOf(111719));
		//peersEntityRatingsPub.setDebtTypeCode("Issuer Credit Rating");
		peersEntityRatingsPub.setCurrentRatingSymbol("AAA-");
		
		peersEntityRatingsPubList.add(peersEntityRatingsPub);
		
		peersEntityRatingsList = new ArrayList<>();
		
		peersEntityRatings = new PeersEntityRatings();
		peersEntityRatings.setEntityId(Long.valueOf(111719));
		//peersEntityRatings.setDebtTypeCode("Issuer Credit Rating");
		peersEntityRatings.setCurrentRatingSymbol("AAA-");
		
		peersEntityRatingsList.add(peersEntityRatings);
		
	}
	
	@Test
	public void getPeersEntityRatingsPubOrPrivTest(){
		Long entityId = 112354L;
		when(peersEntityRatingRepo.findByEntityId(entityId)).thenReturn(peersEntityRatingsList);
		List<PeersEntityRatings> list = peersEntityRatingDao.getPeersEntityRatingsPubOrPriv(entityId);
		assertNotNull(list);
		
	}
	
	@Test
	public void getPeersEntityRatingsPublicTest() {
		List<Long> entityList = new ArrayList<Long>(2);
		entityList.add(1111719L);
		entityList.add(112354L);
		when(peersEntityRatingsPubRepo.findByEntityId(entityList)).thenReturn(peersEntityRatingsPubList);
		List<PeersEntityRatingsPublic> list = peersEntityRatingDao.getPeersEntityRatingsPublic(entityList);
		assertNotNull(list);
	}
	
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\test\java\com\spglobal\ratings\ratingsdata\dao\PeersManagementDaoTest.java

package com.spglobal.ratings.ratingsdata.dao;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.test.context.junit.jupiter.SpringExtension;

import com.spglobal.ratings.ratingsdata.entity.AnalystPeerInfo;
import com.spglobal.ratings.ratingsdata.entity.UspfPeerPortfolioData;
import com.spglobal.ratings.ratingsdata.repository.AnalystPeerRepository;
import com.spglobal.ratings.ratingsdata.repository.USPFPortfolioContentDataRepository;

@ExtendWith({SpringExtension.class, MockitoExtension.class})
public class PeersManagementDaoTest {
	
	@InjectMocks
	private PeersManagementDao peerManagementDao;
	
	@Mock
	private AnalystPeerRepository analystPeersRepository;
	
	@Mock
	USPFPortfolioContentDataRepository uspfPortfolioContentDataRepository;

	@BeforeEach
	public void setup() {
		MockitoAnnotations.initMocks(this);
	}
	
	
	
	@Test
	void testGetPeerByCapIqId() {
		AnalystPeerInfo analystPeerInfo = new AnalystPeerInfo();
		analystPeerInfo.setApKeyInstnId("1233");
		analystPeerInfo.setApCapiqId("1231");
		analystPeerInfo.setApFormOrder(1L);
		analystPeerInfo.setApOidVendor(1111L);
		analystPeerInfo.setCoreId(111L);
		analystPeerInfo.setCapiqId("123213");
		analystPeerInfo.setKeyInstnId("2321");
		List<AnalystPeerInfo> expectedPeers = new ArrayList<>();
		expectedPeers.add(analystPeerInfo);
		when(analystPeersRepository.findByCapiqId(Mockito.any())).thenReturn(expectedPeers);
		List<AnalystPeerInfo> result = peerManagementDao.getPeersById(null,"","123");
		assertEquals(expectedPeers, result);
	}
	
	@Test
	void testGetPeerByKeyInstnIdAndCoreIdIsNull() {
		Long coreId= null;
		String keyInstnId = "123";
		List<AnalystPeerInfo> expectedPeers = new ArrayList<>();
		when(analystPeersRepository.findByKeyInstnId(keyInstnId)).thenReturn(expectedPeers);
		List<AnalystPeerInfo> result = peerManagementDao.getPeersById(coreId,keyInstnId,null);
		assertEquals(expectedPeers, result);
	}
	
	@Test
	void testGetPeerByKeyInstnIdIsNullAndCoreId() {
		Long coreId= 1l;
		String keyInstnId = "";
		List<AnalystPeerInfo> expectedPeers = new ArrayList<>();
		when(analystPeersRepository.findByCoreId(coreId)).thenReturn(expectedPeers);
		List<AnalystPeerInfo> result = peerManagementDao.getPeersById(coreId,keyInstnId,"");
		assertEquals(expectedPeers, result);
	}
	
	@Test
	public void testGetPeerByKeyInstnIdAndCoreIdException() {
		Long coreId= 1l;
		when(analystPeersRepository.findByCoreId(Mockito.anyLong())).thenThrow(new RuntimeException("--Illegal Argument Exception From Repo"));
		assertThrows(RuntimeException.class, ()->{peerManagementDao.getPeersById(coreId, "","");});
	}
	
	@Test
	public void testGetUspfPortfolioData() {
		List<Long> asIds= new ArrayList<Long>(Arrays.asList(5963L, 1246L));
		List<UspfPeerPortfolioData> expectedPeers = new ArrayList<>();
		when(uspfPortfolioContentDataRepository.findAllByAsId(asIds)).thenReturn(expectedPeers);
		List<UspfPeerPortfolioData> result = peerManagementDao.getUspfPortfolioData(asIds);
		assertEquals(expectedPeers, result);
	}
	
	@Test
	public void testGetUspfPortfolioDataException() {
		List<Long> asIds= new ArrayList<Long>(Arrays.asList(5963L, 1246L));
		when(uspfPortfolioContentDataRepository.findAllByAsId(asIds)).thenThrow(new IllegalArgumentException("--Illegal Argument Exception From Repo"));
		List<UspfPeerPortfolioData> result = peerManagementDao.getUspfPortfolioData(asIds);
		assertNotNull(result);
	}
	
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\test\java\com\spglobal\ratings\ratingsdata\dao\RatingArticlesDaoTest.java

package com.spglobal.ratings.ratingsdata.dao;

import static org.mockito.ArgumentMatchers.anyList;

import java.sql.Timestamp;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.spglobal.ratings.ratingsdata.model.RatingArticlesDetailSearch;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.PageRequest;
import org.springframework.test.context.junit.jupiter.SpringExtension;

import com.spglobal.ratings.ratingsdata.entity.RatingArticleTypes;
import com.spglobal.ratings.ratingsdata.entity.RatingArticles;
import com.spglobal.ratings.ratingsdata.model.RatingArticlesSearch;
import com.spglobal.ratings.ratingsdata.repository.RatingArticleTypesRepository;
import com.spglobal.ratings.ratingsdata.repository.RatingArticlesCNPublicRepository;
import com.spglobal.ratings.ratingsdata.repository.RatingArticlesPublicRepository;
import com.spglobal.ratings.ratingsdata.util.RatingsDataConstant;
import com.spglobal.ratings.ratingsdata.util.RatingsDataUtil;

@ExtendWith({SpringExtension.class, MockitoExtension.class})
public class RatingArticlesDaoTest {

	@InjectMocks
	private RatingArticlesDao ratingArticlesDao;

	@Mock
	RatingsDataUtil ratingsUtil;

	@Mock
	private RatingArticlesPublicRepository ratingArticlesPublicRepository;

	@Mock
	private RatingArticlesCNPublicRepository ratingArticlesCNPublicRepository;

	@Mock
	private RatingArticleTypesRepository ratingArticleTypesRepository;

	private DateTimeFormatter CUSTOM_DATE_TIME_FORMATTER = DateTimeFormatter
			.ofPattern(RatingsDataConstant.CUSTOM_DATE_TIME_FORMAT);

	@Test
	public void getRatingArticlesTypesSuccessTest1() throws Exception {
		List<Long> articletypeIds = new ArrayList<Long>();
		articletypeIds.add(1L);
		articletypeIds.add(3L);

		List<RatingArticleTypes> ratingArticleTypes = new ArrayList<RatingArticleTypes>();
		ratingArticleTypes.add(new RatingArticleTypes(Long.valueOf(1L), "Bulletin"));
		ratingArticleTypes.add(new RatingArticleTypes(Long.valueOf(3L), "Commentary"));

		Mockito.when(ratingArticleTypesRepository.getRatingArticleTypes(articletypeIds)).thenReturn(ratingArticleTypes);
		Assertions.assertEquals(ratingArticleTypes, ratingArticlesDao.getRatingArticlesTypes(articletypeIds));
	}

	@Test
	public void getRatingArticlesSuccessTest2() throws Exception {
		List<Long> entity = new ArrayList();
		entity.add(100751L);
		List<Long> articletypeIds = new ArrayList<Long>();
		articletypeIds.add(1L);
		articletypeIds.add(3L);

		RatingArticlesDetailSearch ratingArticlesSearch = new RatingArticlesDetailSearch();
		ratingArticlesSearch.setEntityId(Arrays.asList(100751L));
		ratingArticlesSearch.setArticleTypeIds(articletypeIds);
		ratingArticlesSearch.setCount(500);
		ratingArticlesSearch.setCountryCode("US");

		List<RatingArticles> ratingArticles = new ArrayList<RatingArticles>();
		RatingArticles articles1 = new RatingArticles();
		articles1.setArticleId(2975957L);
		articles1.setEntityId(100751L);
		articles1.setFullName("Simon Redmond");
		articles1.setArticleTitle("Report Explains How Commodity Price Assumptions Are Formulated And Used; Oil And Gas Price Deck Revised");
		articles1.setArticleType("News");
		articles1.setArticleTypeId(10L);
		articles1.setArticleDate(Timestamp.valueOf(LocalDateTime.parse("2023-04-20T14:11:36")));
		ratingArticles.add(articles1);

		Mockito.when(ratingArticlesPublicRepository.getRatingArticles(ratingArticlesSearch.getEntityId(),
				ratingArticlesSearch.getArticleTypeIds(), PageRequest.of(0, ratingArticlesSearch.getCount()))).thenAnswer(x -> ratingArticles);
		Assertions.assertEquals(ratingArticles, ratingArticlesDao.getPublicRatingArticles(ratingArticlesSearch));
	}

	@Test
	public void getRatingArticlesSuccessTest3() throws Exception {
		List<Long> articletypeIds = new ArrayList<Long>();
		articletypeIds.add(1L);
		articletypeIds.add(3L);

		RatingArticlesDetailSearch ratingArticlesSearch = new RatingArticlesDetailSearch();
		ratingArticlesSearch.setEntityId(Arrays.asList(100751L));
		ratingArticlesSearch.setArticleTypeIds(articletypeIds);
		ratingArticlesSearch.setCount(500);
		ratingArticlesSearch.setCountryCode("CN");

		List<RatingArticles> ratingArticles = new ArrayList<RatingArticles>();
		RatingArticles articles1 = new RatingArticles();
		articles1.setArticleId(2975957L);
		articles1.setEntityId(100751L);
		articles1.setFullName("Simon Redmond");
		articles1.setArticleTitle("Report Explains How Commodity Price Assumptions Are Formulated And Used; Oil And Gas Price Deck Revised");
		articles1.setArticleType("News");
		articles1.setArticleTypeId(10L);
		articles1.setArticleDate(Timestamp.valueOf(LocalDateTime.parse("2023-04-20T14:11:36")));
		ratingArticles.add(articles1);

		Mockito.when(ratingArticlesCNPublicRepository.getRatingArticles(ratingArticlesSearch.getEntityId(),
				ratingArticlesSearch.getArticleTypeIds(), PageRequest.of(0, ratingArticlesSearch.getCount()))).thenAnswer(x -> ratingArticles);
		Assertions.assertEquals(ratingArticles, ratingArticlesDao.getPublicRatingArticles(ratingArticlesSearch));
	}

	@Test
	public void getRatingArticlesTypesFailureTest1() throws Exception {
		List<Long> articletypeIds = new ArrayList<Long>();
		articletypeIds.add(1L);
		articletypeIds.add(3L);

		Mockito.when(ratingArticleTypesRepository.getRatingArticleTypes(articletypeIds)).thenThrow(new RuntimeException("NullPointer Exception"));
		Assertions.assertThrows(Exception.class, ()->{ ratingArticlesDao.getRatingArticlesTypes(articletypeIds); });
	}

	@Test
	public void getRatingArticlesFailureTest2() throws Exception {
		List<Long> articletypeIds = new ArrayList<Long>();
		articletypeIds.add(1L);
		articletypeIds.add(3L);

		RatingArticlesDetailSearch ratingArticlesSearch = new RatingArticlesDetailSearch();
		ratingArticlesSearch.setEntityId(Arrays.asList(100751L));
		ratingArticlesSearch.setArticleTypeIds(articletypeIds);
		ratingArticlesSearch.setCount(500);

		Mockito.when(ratingArticlesPublicRepository.getRatingArticles(ratingArticlesSearch.getEntityId(),
				ratingArticlesSearch.getArticleTypeIds(),PageRequest.of(0, ratingArticlesSearch.getCount()))).thenThrow(new RuntimeException("NullPointer Exception"));
		Assertions.assertThrows(Exception.class, ()->{ ratingArticlesDao.getPublicRatingArticles(ratingArticlesSearch); });
	}

	@Test
	public void getRatingArticlesFailureTest3() throws Exception {
		List<Long> articletypeIds = new ArrayList<Long>();
		articletypeIds.add(1L);
		articletypeIds.add(3L);

		RatingArticlesDetailSearch ratingArticlesSearch = new RatingArticlesDetailSearch();
		ratingArticlesSearch.setEntityId(Arrays.asList(100751L));
		ratingArticlesSearch.setArticleTypeIds(articletypeIds);
		ratingArticlesSearch.setCount(500);
		ratingArticlesSearch.setCountryCode("CN");

		Mockito.when(ratingArticlesCNPublicRepository.getRatingArticles(ratingArticlesSearch.getEntityId(),
				ratingArticlesSearch.getArticleTypeIds(), PageRequest.of(0, ratingArticlesSearch.getCount()))).thenThrow(new RuntimeException("NullPointer Exception"));
		Assertions.assertThrows(Exception.class, ()->{ ratingArticlesDao.getPublicRatingArticles(ratingArticlesSearch); });
	}

}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\test\java\com\spglobal\ratings\ratingsdata\dao\RatingCriteriaArticlesDaoTest.java

package com.spglobal.ratings.ratingsdata.dao;

import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.test.context.junit.jupiter.SpringExtension;

import com.spglobal.ratings.ratingsdata.entity.RatingCriteriaArticles;
import com.spglobal.ratings.ratingsdata.entity.RatingCriteriaArticlesPrivate;
import com.spglobal.ratings.ratingsdata.entity.RatingCriteriaArticlesPublic;
import com.spglobal.ratings.ratingsdata.repository.RatingCriteriaArticlesPrivateRepository;
import com.spglobal.ratings.ratingsdata.repository.RatingCriteriaArticlesPublicRepository;
import com.spglobal.ratings.ratingsdata.util.RatingsDataUtil;

@ExtendWith({SpringExtension.class, MockitoExtension.class})
public class RatingCriteriaArticlesDaoTest {

	@InjectMocks
	RatingCriteriaArticlesDao ratingCriteriaArticlesDao;
	
	@Mock
	RatingsDataUtil ratingsUtil;
	
	@Mock
	private RatingCriteriaArticlesPublicRepository rcaPublicRepository;
	
	@Mock
	private RatingCriteriaArticlesPrivateRepository rcaPrivateRepository;
	
	@Test
	public void getRatingCriteriaArticlesSuccessTest1() throws Exception {
		RatingCriteriaArticlesPublic articles1 = new RatingCriteriaArticlesPublic();
		articles1.setRatingDetailId(43248054L);
		articles1.setSourceRatingId(926181518L);
		articles1.setPcrRegion("US");
		articles1.setCriteriaArticleId(2803123L);
		articles1.setArticleDate(new Timestamp(1646195262000L)); 
		articles1.setPreferredTitle("General Criteria: Hybrid Capital: Methodology And Assumptions");
		articles1.setLastName("Lemos-Stein, CFA");
		articles1.setFirstName("Gregg");
		articles1.setFullName("Gregg Lemos-Stein, CFA");
		
		List<RatingCriteriaArticles> ratingCriteriaArticles1 = new ArrayList<RatingCriteriaArticles>();
		ratingCriteriaArticles1.add(articles1);
		
		Long ratingDetailId = Long.valueOf(43374052);
		
		Mockito.when(rcaPublicRepository.findRatingCriteriaArticlesByRatingDetailId(ratingDetailId)).thenAnswer(x -> ratingCriteriaArticles1);
		Assertions.assertEquals(ratingCriteriaArticles1, ratingCriteriaArticlesDao.getArticlesByRatingDetailId(ratingDetailId));
	}
	
	@Test
	public void getRatingCriteriaArticlesSuccessTest2() throws Exception {
		RatingCriteriaArticlesPrivate articles1 = new RatingCriteriaArticlesPrivate();
		articles1.setRatingDetailId(43248054L);
		articles1.setSourceRatingId(926181518L);
		articles1.setPcrRegion("US");
		articles1.setCriteriaArticleId(2803123L);
		articles1.setArticleDate(new Timestamp(1646195262000L)); 
		articles1.setPreferredTitle("General Criteria: Hybrid Capital: Methodology And Assumptions");
		articles1.setLastName("Lemos-Stein, CFA");
		articles1.setFirstName("Gregg");
		articles1.setFullName("Gregg Lemos-Stein, CFA");
		
		List<RatingCriteriaArticles> ratingCriteriaArticles1 = new ArrayList<RatingCriteriaArticles>();
		ratingCriteriaArticles1.add(articles1);
		
		List<Long> sourceObjectIds = Arrays.asList(Long.valueOf(7554329), Long.valueOf(100892753), Long.valueOf(11798296));
		Mockito.when(rcaPrivateRepository.findRatingCriteriaArticlesBySourceObjectIds(sourceObjectIds)).thenAnswer(x -> ratingCriteriaArticles1);
		Assertions.assertEquals(ratingCriteriaArticles1, ratingCriteriaArticlesDao.getArticlesBySourceObjectIds(sourceObjectIds));
	}
	
	@Test
	public void getRatingCriteriaArticlesFailureTest1() throws Exception {
		Long ratingDetailId = Long.valueOf(43374052);
		Mockito.when(rcaPublicRepository.findRatingCriteriaArticlesByRatingDetailId(ratingDetailId)).thenThrow(new RuntimeException("NullPointer Exception"));
		Assertions.assertThrows(Exception.class, ()->{ ratingCriteriaArticlesDao.getArticlesByRatingDetailId(ratingDetailId); });
	}
	
	@Test
	public void getRatingCriteriaArticlesFailureTest2() throws Exception {
		Assertions.assertThrows(Exception.class, ()->{ ratingCriteriaArticlesDao.getArticlesByRatingDetailId(null); });
	}
	
	@Test
	public void getRatingCriteriaArticlesFailureTest3() throws Exception {
		List<Long> sourceObjectIds = Arrays.asList(Long.valueOf(7554329), Long.valueOf(100892753), Long.valueOf(11798296));
		Mockito.when(rcaPrivateRepository.findRatingCriteriaArticlesBySourceObjectIds(sourceObjectIds)).thenThrow(new RuntimeException("NullPointer Exception"));
		Assertions.assertThrows(Exception.class, ()->{ ratingCriteriaArticlesDao.getArticlesBySourceObjectIds(sourceObjectIds); });
	}
	
	@Test
	public void getRatingCriteriaArticlesFailureTest4() throws Exception {
		Assertions.assertThrows(Exception.class, ()->{ ratingCriteriaArticlesDao.getArticlesBySourceObjectIds(null); });
	}
	
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\test\java\com\spglobal\ratings\ratingsdata\dao\RatingHistoryLastTenYrsDaoTest.java

package com.spglobal.ratings.ratingsdata.dao;

import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.test.context.junit.jupiter.SpringExtension;

import com.spglobal.ratings.ratingsdata.entity.RatingHistoryLastTenYrs;
import com.spglobal.ratings.ratingsdata.entity.RatingHistoryLastTenYrsPublic;
import com.spglobal.ratings.ratingsdata.repository.RatingHistoryLastTenYrsPubRepository;
import com.spglobal.ratings.ratingsdata.repository.RatingHistoryLastTenYrsRepository;
import com.spglobal.ratings.ratingsdata.service.UserEntitlementCheckImpl;
import com.spglobal.ratings.ratingsdata.util.RatingsDataUtil;

@ExtendWith({SpringExtension.class, MockitoExtension.class})
public class RatingHistoryLastTenYrsDaoTest {
	
	@InjectMocks
	RatingHistoryLastTenYrsDao ratingHistoryLastTenYrsDao;
	
	@Mock
	RatingsDataUtil ratingsUtil;
	
	@Mock
	RatingHistoryLastTenYrsPubRepository ratingHistoryLastTenYrsPubRepo;
	
	@Mock
	RatingHistoryLastTenYrsRepository ratingHistoryLastTenYrsRepo;
	
	@Mock
	UserEntitlementCheckImpl userEntitlementCheck;

	List<RatingHistoryLastTenYrsPublic> ratingHistoryLastTenYrsPubList = null;
	List<RatingHistoryLastTenYrs> ratingHistoryLastTenYrsList = null;
	
	RatingHistoryLastTenYrsPublic ratingHistoryLastTenYrsPub = null;
	RatingHistoryLastTenYrs ratingHistoryLastTenYrs = null; 
	
	@BeforeEach
	public void init() throws Exception {
		
		ratingHistoryLastTenYrsPubList = new ArrayList<>();
		
		ratingHistoryLastTenYrsPub = new RatingHistoryLastTenYrsPublic();
		ratingHistoryLastTenYrsPub.setEntityId(Long.valueOf(111719));
		ratingHistoryLastTenYrsPub.setDebtTypeDesc("Issuer Credit Rating");
		ratingHistoryLastTenYrsPub.setRatingTypeDesc("Foreign Currency LT");
		ratingHistoryLastTenYrsPub.setCurrentRatingSymbol("AAA-");
		
		ratingHistoryLastTenYrsPubList.add(ratingHistoryLastTenYrsPub);
		
		ratingHistoryLastTenYrsList = new ArrayList<>();
		
		ratingHistoryLastTenYrs = new RatingHistoryLastTenYrs();
		ratingHistoryLastTenYrs.setEntityId(Long.valueOf(111719));
		ratingHistoryLastTenYrs.setDebtTypeDesc("Issuer Credit Rating");
		ratingHistoryLastTenYrs.setRatingTypeDesc("Foreign Currency LT");
		ratingHistoryLastTenYrs.setCurrentRatingSymbol("AAA-");
		
		ratingHistoryLastTenYrsList.add(ratingHistoryLastTenYrs);
		
	}
	
	@Test
	public void getRatingHistLastTenYrsPubOrPrivTest(){
		Long entityId = 112354L;
		when(ratingHistoryLastTenYrsRepo.findByEntityId(entityId)).thenReturn(ratingHistoryLastTenYrsList);
		List<RatingHistoryLastTenYrs> list = ratingHistoryLastTenYrsDao.getRatingHistLastTenYrsPubOrPriv(entityId);
		assertNotNull(list);
		
	}
	
	@Test
	public void getRatingHistLastTenYrsPublicTest() {
		List<Long> entityList = new ArrayList<Long>(2);
		entityList.add(1111719L);
		entityList.add(112354L);
		when(ratingHistoryLastTenYrsPubRepo.findByEntityId(entityList)).thenReturn(ratingHistoryLastTenYrsPubList);
		List<RatingHistoryLastTenYrsPublic> list = ratingHistoryLastTenYrsDao.getRatingHistLastTenYrsPublic(entityList);
		assertNotNull(list);
	}
	
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\test\java\com\spglobal\ratings\ratingsdata\dao\ReconciliationRatingDaoTest.java

package com.spglobal.ratings.ratingsdata.dao;

import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.when;

import java.util.Collections;
import java.util.List;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.http.HttpStatus;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.web.client.HttpClientErrorException;

import com.spglobal.ratings.ratingsdata.model.ReconciliationData;
import com.spglobal.ratings.ratingsdata.repository.ReconciliationCustomRatingRepository;
import com.spglobal.ratings.ratingsdata.repository.ReconciliationQuarterlyRatingRepository;
import com.spglobal.ratings.ratingsdata.repository.ReconciliationYearlyRatingRepository;

@ContextConfiguration(classes = { FinancialRatingDao.class })
@ExtendWith(MockitoExtension.class)
public class ReconciliationRatingDaoTest {
	@InjectMocks
	private ReconciliationRatingDao reconciliationRatingDao;

	@Mock
	private ReconciliationQuarterlyRatingRepository reconciliationQuarterlyRatingRepo;

	@Mock
	private ReconciliationYearlyRatingRepository reconciliationYearlyRatingRepo;

	@Mock
	private ReconciliationCustomRatingRepository reconciliationCustomRatingRepository;

	@Test
	void testGetFinancialRatingDetails() throws Exception {
		when(reconciliationQuarterlyRatingRepo.findByCoreId(any())).thenReturn(Collections.emptyList());
		List<ReconciliationData> resp = reconciliationRatingDao.getReconciliationQuartelyRatingDetails(123l);
		assertNotNull(resp);
	}
	
	@Test
	void testGetFinancialRatingDetailsError() throws Exception {
		when(reconciliationQuarterlyRatingRepo.findByCoreId(any())).thenThrow(new IllegalArgumentException());
		List<ReconciliationData> resp = reconciliationRatingDao.getReconciliationQuartelyRatingDetails(123l);
		assertNull(resp);
	}
	
	@Test
	void testGetFinancialRatingDetailsErrorException() throws Exception {
		when(reconciliationQuarterlyRatingRepo.findByCoreId(any())).thenThrow(new HttpClientErrorException(HttpStatus.NOT_FOUND));
		List<ReconciliationData> resp = reconciliationRatingDao.getReconciliationQuartelyRatingDetails(123l);
		assertNull(resp);
	}
	

	@Test
	void testGetReconciliationYearlyRatingDetails() throws Exception {
		when(reconciliationYearlyRatingRepo.findByCoreId(any())).thenReturn(Collections.emptyList());
		List<ReconciliationData> resp = reconciliationRatingDao.getReconciliationYearlyRatingDetails(123l);
		assertNotNull(resp);
	}
	
	@Test
	void testGetReconciliationYearlyRatingDetailsError() throws Exception {
		when(reconciliationYearlyRatingRepo.findByCoreId(any())).thenThrow(new IllegalArgumentException());
		List<ReconciliationData> resp = reconciliationRatingDao.getReconciliationYearlyRatingDetails(123l);
		assertNull(resp);
	}
	
	@Test
	void testGetReconciliationYearlyRatingDetailsErrorException() throws Exception {
		when(reconciliationYearlyRatingRepo.findByCoreId(any())).thenThrow(new HttpClientErrorException(HttpStatus.NOT_FOUND));
		List<ReconciliationData> resp = reconciliationRatingDao.getReconciliationYearlyRatingDetails(123l);
		assertNull(resp);
	}
	
	@Test
	void testGetCustomReconciliationRatingDetails() throws Exception {
		when(reconciliationCustomRatingRepository.findByCoreIdAndFinPeriodId(any(), any())).thenReturn(Collections.emptyList());
		List<ReconciliationData> resp = reconciliationRatingDao.getCustomReconciliationRatingDetails(123l, Collections.emptyList());
		assertNotNull(resp);
	}
	
	@Test
	void testGetCustomReconciliationRatingDetailsError() throws Exception {
		when(reconciliationCustomRatingRepository.findByCoreIdAndFinPeriodId(any(), any())).thenThrow(new IllegalArgumentException());
		List<ReconciliationData> resp = reconciliationRatingDao.getCustomReconciliationRatingDetails(123l, Collections.emptyList());
		assertNull(resp);
	}
	
	@Test
	void testGetCustomReconciliationRatingDetailsErrorException() throws Exception {
		when(reconciliationCustomRatingRepository.findByCoreIdAndFinPeriodId(any(), any())).thenThrow(new HttpClientErrorException(HttpStatus.NOT_FOUND));
		List<ReconciliationData> resp = reconciliationRatingDao.getCustomReconciliationRatingDetails(123l, Collections.emptyList());
		assertNull(resp);
	}
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\test\java\com\spglobal\ratings\ratingsdata\dao\ScoresAndModifiersDaoTest.java

package com.spglobal.ratings.ratingsdata.dao;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.test.context.junit.jupiter.SpringExtension;

import com.spglobal.ratings.ratingsdata.entity.ScoresAndModifiers;
import com.spglobal.ratings.ratingsdata.repository.ScoresAndModifiersRepository;
import com.spglobal.ratings.ratingsdata.util.RatingsDataUtil;

@ExtendWith({SpringExtension.class, MockitoExtension.class})
public class ScoresAndModifiersDaoTest {
	
	@InjectMocks
	ScoresAndModifiersDao scoresAndModifiersDao;
	
	@Mock
	RatingsDataUtil ratingsUtil;
	
	@Mock
	ScoresAndModifiersRepository scoresAndModifiersRepo;
	
	List<ScoresAndModifiers> scoresAndModifiers = null;
	ScoresAndModifiers scores;
	
	@BeforeEach
	public void init() throws Exception {
		
		MockitoAnnotations.initMocks(this);
		
		scoresAndModifiers = new ArrayList<ScoresAndModifiers>();
		scores = new ScoresAndModifiers();
        scores.setEntityId("100751");
        scores.setAnalyticCaseType("corp");
        scores.setScoreName("Anchor");
        scores.setScoreValue("bbb");
        scores.setScoreValueDesc("bbb");
        scores.setScoreGroup("Scores");
        scores.setHighlightFlag("Y");
        scores.setConfidentialInd("N");
        scores.setConfidentialCategoryCode(null);
        scoresAndModifiers.add(scores);
	}
	
	@Test
	public void getScoresAndModifiersTest() {
		System.out.println("@ScoresAndModifiersDaoTest: In getScoresAndModifiersTest method");
		
		String entityId = "100751";
		String subSector = "corp";
		
		List<ScoresAndModifiers> sm = new ArrayList<ScoresAndModifiers>();
		when(scoresAndModifiersRepo.findByEntityIdAndAnalyticCaseType(entityId, subSector)).thenReturn(scoresAndModifiers);
		sm = scoresAndModifiersDao.getScoresAndModifiers(entityId, subSector);
		assertEquals(sm, scoresAndModifiers);
	}
	
	@Test
	public void getScoresAndModifiersIllegalArgumentTest() {
		System.out.println("@ScoresAndModifiersDaoTest: In getScoresAndModifiersIllegalArgumentTest method");
		
		List<ScoresAndModifiers> sm = null;
		String entityId = "100751";
		String subSector = "corp";
		when(scoresAndModifiersRepo.findByEntityIdAndAnalyticCaseType(entityId, subSector)).thenThrow(new IllegalArgumentException("--Illegal Argument Exception From Repo"));
		
		try {
		   sm = scoresAndModifiersDao.getScoresAndModifiers(entityId, subSector);
		}catch(Exception e){
				assertEquals(IllegalArgumentException.class,e.getClass());
				assertNull(sm);	
		}
	}

}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\test\java\com\spglobal\ratings\ratingsdata\dao\ScoresAndModifiersPublicDaoTest.java

	package com.spglobal.ratings.ratingsdata.dao;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.http.HttpStatus;
import org.springframework.test.context.junit.jupiter.SpringExtension;
import org.springframework.web.client.HttpClientErrorException;

import com.spglobal.ratings.ratingsdata.entity.GeographicUnit;
import com.spglobal.ratings.ratingsdata.entity.PeerSuppliersPortfolioContents;
import com.spglobal.ratings.ratingsdata.entity.ScoresAndModifiersPublic;
import com.spglobal.ratings.ratingsdata.entity.UspfPeerSuppliersPortfolioContents;
import com.spglobal.ratings.ratingsdata.entity.UspfRatingCodes;
import com.spglobal.ratings.ratingsdata.entity.UspfStateLookup;
import com.spglobal.ratings.ratingsdata.model.UspfFilterData;
import com.spglobal.ratings.ratingsdata.model.UspfFilterDropdownData;
import com.spglobal.ratings.ratingsdata.repository.GeographicUnitRepository;
import com.spglobal.ratings.ratingsdata.repository.PortfolioContentsRepository;
import com.spglobal.ratings.ratingsdata.repository.ScoresAndModifiersPublicRepository;
import com.spglobal.ratings.ratingsdata.repository.SectorSubsectorEntityRepository;
import com.spglobal.ratings.ratingsdata.repository.UspfPortfolioContentsRepository;
import com.spglobal.ratings.ratingsdata.repository.UspfRatingCodesRepository;
import com.spglobal.ratings.ratingsdata.repository.UspfStateLookupRepository;
import com.spglobal.ratings.ratingsdata.util.RatingsDataUtil;

@ExtendWith({SpringExtension.class, MockitoExtension.class})
public class ScoresAndModifiersPublicDaoTest {
    
    @InjectMocks
	ScoresAndModifiersPublicDao scoresAndModifiersDao;
	
	@Mock
	RatingsDataUtil ratingsUtil;
	
	@Mock
	ScoresAndModifiersPublicRepository scoresAndModifiersRepo;
	
	@Mock
	PortfolioContentsRepository portfolioContentsRepository;
	
	@Mock
	UspfPortfolioContentsRepository uspfPortfolioContentsRepository;
	
	@Mock
    UspfStateLookupRepository uspfStateLookupRepository;
    
	@Mock
    SectorSubsectorEntityRepository sectorSubsectorEntityRepository;

	@Mock
    UspfRatingCodesRepository uspfRatingCodesRepository;
	
	@Mock
	private GeographicUnitRepository geographicUnitRepository;
	
	List<ScoresAndModifiersPublic> scoresAndModifiers = null;
	ScoresAndModifiersPublic er;
	
	@BeforeEach
	public void init() throws Exception {
		scoresAndModifiers = new ArrayList<ScoresAndModifiersPublic>();
		er = new ScoresAndModifiersPublic();
		er.setAnalyticCaseType("CORP");
		er.setScoreName("Business Risk Profile");
		er.setScoreValue("Fair");
		er.setScoreValueDesc("");
		er.setScoreGroup("Scores");
		er.setHighlightFlag("Y");
        er.setEntityId(String.valueOf(100751));
		scoresAndModifiers.add(er);
	}
	
	@Test
	public void getScoresAndModifiersTest() {
		System.out.println("@ScoresAndModifiersPublicDaoTest: In getScoresAndModifiersTest method");
		String entityId = String.valueOf(100751);
        String subsector = "corp";
		
		List<ScoresAndModifiersPublic> e = new ArrayList<ScoresAndModifiersPublic>();
		when(scoresAndModifiersRepo.findByEntityId(entityId, subsector)).thenReturn(scoresAndModifiers);
		e = scoresAndModifiersDao.getScoresAndModifiers(entityId, subsector);
		assertEquals(e, scoresAndModifiers);
	}
	
	@Test
	public void getScoresAndModifiersillegalArgumentTest() {
		System.out.println("@ScoresAndModifiersPublicDaoTest: In getScoresAndModifiersillegalArgumentTest method");
		
		List<ScoresAndModifiersPublic> er =null;
		String entityId = String.valueOf(100751);
        String subsector = "corp";
		when(scoresAndModifiersRepo.findByEntityId(entityId, subsector)).thenThrow(new IllegalArgumentException("--Illegal Argument Exception From Repo"));
		
		try {
		   er = scoresAndModifiersDao.getScoresAndModifiers(entityId, subsector);
		}catch(Exception e){
				assertEquals(IllegalArgumentException.class,e.getClass());
				assertNull(er);	
		}
	}
	
	@Test
	public void getScoresAndModifiersillegalArgumentTest1() {
		System.out.println("@ScoresAndModifiersPublicDaoTest: In getScoresAndModifiersillegalArgumentTest1 method");
		
		List<ScoresAndModifiersPublic> er =null;
		String entityId = String.valueOf(100751);
        String subsector = "corp";
		when(scoresAndModifiersRepo.findByEntityId(entityId, subsector)).thenThrow(new HttpClientErrorException(HttpStatus.NOT_FOUND));
		
		try {
		   er = scoresAndModifiersDao.getScoresAndModifiers(entityId, subsector);
		}catch(Exception e){
				assertEquals(IllegalArgumentException.class,e.getClass());
				assertNull(er);	
		}
	}
	
	@Test
	public void getPeerScoresAndModifiersTest() {
		System.out.println("@ScoresAndModifiersPublicDaoTest: In getPeerScoresAndModifiersTest method");
        List<String> entityIds = new ArrayList<String>();
        entityIds.add("100751");
		String subsector = "corp";
        List<ScoresAndModifiersPublic> err = new ArrayList<ScoresAndModifiersPublic>();
		
		List<ScoresAndModifiersPublic> e = new ArrayList<ScoresAndModifiersPublic>();
		when(scoresAndModifiersRepo.findByEntityIds(entityIds,subsector)).thenReturn(err);
		e = scoresAndModifiersDao.getPeerScoresAndModifiers(entityIds,subsector);
		assertEquals(e, err);
	}
	
	@Test
	public void getPeerScoresAndModifiersTestillegalArgumentTest() {
		System.out.println("@ScoresAndModifiersPublicDaoTest: In getPeerScoresAndModifiersTestillegalArgumentTest method");
		
		List<ScoresAndModifiersPublic> r =null;
		String subsector = "corp";
        List<String> entityIds = new ArrayList<String>();
        entityIds.add("100751");
		when(scoresAndModifiersRepo.findByEntityIds(entityIds,subsector)).thenThrow(new IllegalArgumentException("--Illegal Argument Exception From Repo"));
		
		try {
		   r = scoresAndModifiersDao.getPeerScoresAndModifiers(entityIds,subsector);
		}catch(Exception e){
				assertEquals(IllegalArgumentException.class,e.getClass());
				assertNull(r);	
		}
	}

	@Test
	public void getPeerScoresAndModifiersTestillegalArgumentTest2() {
		System.out.println("@ScoresAndModifiersPublicDaoTest: In getPeerScoresAndModifiersTestillegalArgumentTest2 method");
		
		List<ScoresAndModifiersPublic> r =null;
		String subsector = "corp";
        List<String> entityIds = new ArrayList<String>();
        entityIds.add("100751");
		when(scoresAndModifiersRepo.findByEntityIds(entityIds,subsector)).thenThrow(new HttpClientErrorException(HttpStatus.NOT_FOUND));
		
		try {
		   r = scoresAndModifiersDao.getPeerScoresAndModifiers(entityIds,subsector);
		}catch(Exception e){
				assertEquals(IllegalArgumentException.class,e.getClass());
				assertNull(r);	
		}
	}
	
	@Test
	public void getPeerSuppliersPortfolioContentsTestwithValidResponse() {
		List<String> dummyList = new ArrayList<String>(123456);
		List<PeerSuppliersPortfolioContents> data = new ArrayList<PeerSuppliersPortfolioContents>();
		List<ScoresAndModifiersPublic> e = new ArrayList<ScoresAndModifiersPublic>();
		when(portfolioContentsRepository.findByKeyInstnIds(dummyList)).thenReturn(data);
		List<PeerSuppliersPortfolioContents> plist = scoresAndModifiersDao.getPeerSuppliersPortfolioContents("snl",dummyList);
		assertEquals(plist, data);
	}
	
	@Test
	public void getPeerSuppliersPortfolioContentsTestwithThrowingException() {
		List<String> dummyList = new ArrayList<String>(123456);
		List<PeerSuppliersPortfolioContents> list = new ArrayList<PeerSuppliersPortfolioContents>();
		when(portfolioContentsRepository.findByKeyInstnIds(dummyList)).thenThrow(new IllegalArgumentException("--Illegal Argument Exception From Repo"));
		
		try {
			list = scoresAndModifiersDao.getPeerSuppliersPortfolioContents("snl",dummyList);
		}catch(Exception e){
				assertEquals(IllegalArgumentException.class,e.getClass());
				assertNull(er);	
		}
	}
	
	@Test
	public void getUspfPeerSuppliersPortfolioContentsTestwithValidResponse() {
		UspfFilterData uspfFilterData = new UspfFilterData();
		uspfFilterData.setSector("POOLED");
		uspfFilterData.setSubSector("Transporation");
		uspfFilterData.setGeography(Arrays.asList("AZ", "AL"));
		uspfFilterData.setRatingType("STDLONG");
		uspfFilterData.setRatingScale(Arrays.asList("A+", "A--"));
		List<UspfPeerSuppliersPortfolioContents> data = new ArrayList<UspfPeerSuppliersPortfolioContents>();
		when(uspfPortfolioContentsRepository.findByFilteredData(uspfFilterData.getSector(),
				uspfFilterData.getSubSector(), uspfFilterData.getGeography(), uspfFilterData.getRatingType(),
				uspfFilterData.getRatingScale())).thenReturn(data);
		List<UspfPeerSuppliersPortfolioContents> plist = scoresAndModifiersDao
				.getUspfPeerSuppliersPortfolioContents(uspfFilterData);
		assertEquals(plist, data);
	}

	@Test
	public void getUspfPeerSuppliersPortfolioContentsTestwithThrowingException() {
		UspfFilterData uspfFilterData = new UspfFilterData();
		uspfFilterData.setSector("POOLED");
		uspfFilterData.setSubSector("Transporation");
		uspfFilterData.setGeography(Arrays.asList("AZ", "AL"));
		uspfFilterData.setRatingType("STDLONG");
		uspfFilterData.setRatingScale(Arrays.asList("A+", "A--"));
		List<UspfPeerSuppliersPortfolioContents> list = new ArrayList<UspfPeerSuppliersPortfolioContents>();
		when(uspfPortfolioContentsRepository.findByFilteredData(uspfFilterData.getSector(),
				uspfFilterData.getSubSector(), uspfFilterData.getGeography(), uspfFilterData.getRatingType(),
				uspfFilterData.getRatingScale()))
				.thenThrow(new IllegalArgumentException("--Illegal Argument Exception From Repo"));

		try {
			list = scoresAndModifiersDao.getUspfPeerSuppliersPortfolioContents(uspfFilterData);
		} catch (Exception e) {
			assertEquals(IllegalArgumentException.class, e.getClass());
			assertNull(er);
		}
	}
	@Test
	public void getUspfPeersPortfolioDataTestwithValidResponse() {
		List<Long> keyRatingInstIds = new ArrayList<>();
    	keyRatingInstIds.add(22685L);
    	keyRatingInstIds.add(29229L);
		List<UspfPeerSuppliersPortfolioContents> data = new ArrayList<UspfPeerSuppliersPortfolioContents>();
		when(uspfPortfolioContentsRepository.findByAsIds(keyRatingInstIds)).thenReturn(data);
		List<UspfPeerSuppliersPortfolioContents> plist = scoresAndModifiersDao
				.getUspfPeersPortfolioData(keyRatingInstIds);
		assertEquals(plist, data);
	}
	
	@Test
	public void getUspfPeersPortfolioDataTestwithThrowingException() {
		List<Long> keyRatingInstIds = new ArrayList<>();
    	keyRatingInstIds.add(22685L);
    	keyRatingInstIds.add(29229L);
		when(uspfPortfolioContentsRepository.findByAsIds(keyRatingInstIds))
		.thenThrow(new IllegalArgumentException("--Illegal Argument Exception From Repo"));
		
		try {
			scoresAndModifiersDao.getUspfPeersPortfolioData(keyRatingInstIds);
		} catch (Exception e) {
			assertEquals(IllegalArgumentException.class, e.getClass());
			assertNull(er);
		}
	}
	
	@Test
	public void getuspfPeersFiltersDataTestwithValidResponse() {
		UspfFilterDropdownData uspfFilterDropdownData = new UspfFilterDropdownData();
		uspfFilterDropdownData.setSectorSubSector(Collections.EMPTY_LIST);
		uspfFilterDropdownData.setUspfStatesData(Collections.EMPTY_LIST);
		uspfFilterDropdownData.setRatingTypes(Arrays.asList("STDLONG","STDSHORT"));
		uspfFilterDropdownData.setLongRatingData(Collections.EMPTY_LIST);
		uspfFilterDropdownData.setShortRatingData(Collections.EMPTY_LIST);
		List<UspfStateLookup> stateList = new ArrayList<>();
		List<UspfRatingCodes> codesList = new ArrayList<>();
		when(uspfStateLookupRepository.findAllStates()).thenReturn(stateList);
		when(sectorSubsectorEntityRepository.findSectorSubSectorDetails()).thenReturn(new ArrayList<Object>());
		when(uspfRatingCodesRepository.findLongRatingData()).thenReturn(codesList);
		when(uspfRatingCodesRepository.findShortRatingData()).thenReturn(codesList);
		UspfFilterDropdownData plist = scoresAndModifiersDao.getuspfPeersFiltersData();
		assertEquals(plist, uspfFilterDropdownData);
	}

	@Test
	public void getuspfPeersFiltersDataTestwithThrowingException() {
		when(uspfStateLookupRepository.findAllStates())
				.thenThrow(new IllegalArgumentException("--Illegal Argument Exception From Repo"));
		try {
			UspfFilterDropdownData plist = scoresAndModifiersDao.getuspfPeersFiltersData();
		} catch (Exception e) {
			assertEquals(IllegalArgumentException.class, e.getClass());
			assertNull(er);
		}
	}
	@Test
	public void getStateAndProvinceDataTestwithValidResponse() {
		List<UspfStateLookup> uspfStateLookupData = new ArrayList<>();
		when(uspfStateLookupRepository.findAllStates()).thenReturn(uspfStateLookupData);
		List<UspfStateLookup> uspfStateLookupDataList = uspfStateLookupRepository.findAllStates();
		assertEquals(uspfStateLookupDataList, uspfStateLookupData);
		List<GeographicUnit> geoGraphicUnit = new ArrayList<>();
		when(geographicUnitRepository.findAllgeographicUnitNamesByCountryCode()).thenReturn(geoGraphicUnit);
		List<GeographicUnit> geoGraphicUnitList = geographicUnitRepository.findAllgeographicUnitNamesByCountryCode();
		assertEquals(geoGraphicUnit, geoGraphicUnitList);
	}
	
	@Test
	public void getStateAndProvinceDataThrowingException() {
		when(geographicUnitRepository.findAllgeographicUnitNamesByCountryCode())
		.thenThrow(new IllegalArgumentException("--Illegal Argument Exception From Repo"));
		try {
			scoresAndModifiersDao.getStateAndProvinceData();
		} catch (Exception e) {
			assertEquals(IllegalArgumentException.class, e.getClass());
			assertNull(er);
		}
	}

}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\test\java\com\spglobal\ratings\ratingsdata\exception\ApiErrorTest.java

package com.spglobal.ratings.ratingsdata.exception;

import static org.junit.jupiter.api.Assertions.assertEquals;

import java.time.LocalDateTime;

import org.junit.jupiter.api.Test;
import org.springframework.http.HttpStatus;

public class ApiErrorTest {

	@Test
	void testValues() throws Exception {
		ApiError error = new ApiError();
		ApiError error1 = new ApiError(HttpStatus.OK);
		ApiError error2 = new ApiError(HttpStatus.OK, new Exception("testerror"));
		ApiError error3 = new ApiError(HttpStatus.OK, "testerror", new Exception());
		ApiError error4 = new ApiError(HttpStatus.OK, "testerror");
		LocalDateTime local = LocalDateTime.now();
		error.setDebugMessage("testerror");
		error.setMessage("testerror");
		error.setStatus(HttpStatus.OK);
		error.setTimestamp(local);
		assertEquals(error.getTimestamp(), local);
		assertEquals(error1.getStatus(), HttpStatus.OK);
		assertEquals(error2.getDebugMessage(), "testerror");
		assertEquals(error3.getMessage(), "testerror");
		assertEquals(error4.getMessage(), "testerror");
	}
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\test\java\com\spglobal\ratings\ratingsdata\exception\ApplicationRuntimeExceptionTest.java

package com.spglobal.ratings.ratingsdata.exception;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;

import org.junit.jupiter.api.Test;
import org.springframework.http.HttpStatus;

public class ApplicationRuntimeExceptionTest {

	@Test
	void testValues() throws Exception {
		ApplicationRuntimeException error = new ApplicationRuntimeException();
		ApplicationRuntimeException error1 = new ApplicationRuntimeException("200");
		ApplicationRuntimeException error2 = new ApplicationRuntimeException(HttpStatus.OK, "test");
		ApplicationRuntimeException error3 = new ApplicationRuntimeException(HttpStatus.OK, 200, "200","test");

		assertEquals(error1.getErrorCode(), "200");
		assertEquals(error3.getStatus(), 200);
		assertEquals(HttpStatus.OK, error2.getHttpStatus());
		assertNull(error.getMessage());
	}
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\test\java\com\spglobal\ratings\ratingsdata\exception\AuthorizationExceptionTest.java

package com.spglobal.ratings.ratingsdata.exception;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;

import org.junit.jupiter.api.Test;
import org.springframework.http.HttpStatus;

public class AuthorizationExceptionTest {
	@Test
	void testValues() throws Exception {
		AuthorizationException error = new AuthorizationException();
		AuthorizationException error1 = new AuthorizationException("200");
		AuthorizationException error2 = new AuthorizationException(HttpStatus.OK, "testerror");
		assertNull(error.getMessage());
		assertEquals("200", error1.getErrorCode());
		assertEquals(HttpStatus.OK, error2.getHttpStatus());
	}
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\test\java\com\spglobal\ratings\ratingsdata\exception\GlobalExceptionHandlerTest.java

package com.spglobal.ratings.ratingsdata.exception;

import static org.junit.jupiter.api.Assertions.assertNotNull;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit.jupiter.SpringExtension;
import org.springframework.web.client.HttpClientErrorException;
import org.springframework.web.client.HttpServerErrorException;

@ContextConfiguration(classes = { GlobalExceptionHandler.class })
@ExtendWith(SpringExtension.class)
@SpringBootTest
@AutoConfigureMockMvc
public class GlobalExceptionHandlerTest {

	GlobalExceptionHandler handle = new GlobalExceptionHandler();
	@Test
	void handleAuthorizationException() throws Exception {
		ResponseEntity<Object> object = handle.handleAuthorizationException(new AuthorizationException());
		assertNotNull(object);
	}
	@Test
	void handleHttpClientErrorException() throws Exception {
		ResponseEntity<Object> object = handle.handleHttpClientErrorException(new HttpClientErrorException(HttpStatus.NOT_FOUND));
		assertNotNull(object);
	}
	@Test
	void handleHttpServerErrorException() throws Exception {
		ResponseEntity<Object> object = handle.handleHttpServerErrorException(new HttpServerErrorException(HttpStatus.BAD_GATEWAY));
		assertNotNull(object);
	}
	@Test
	void handleApplicationRuntimeException() throws Exception {
		ResponseEntity<Object> object = handle.handleApplicationRuntimeException(new ApplicationRuntimeException(HttpStatus.NOT_FOUND, "tsst"));
		assertNotNull(object);
	}
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\test\java\com\spglobal\ratings\ratingsdata\r360\generic\wrapper\exception\SanitizeExceptionTest.java

package com.spglobal.ratings.ratingsdata.r360.generic.wrapper.exception;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;

import org.junit.jupiter.api.Test;
import org.springframework.http.HttpStatus;

public class SanitizeExceptionTest {

	@Test
	void testValues() throws Exception {
		SanitizeException error = new SanitizeException();
		SanitizeException error1 = new SanitizeException("200");
		SanitizeException error2 = new SanitizeException(HttpStatus.OK, "test");
		assertEquals(error1.getErrorCode(), "200");
		assertEquals(HttpStatus.OK, error2.getHttpStatus());
		assertNull(error.getMessage());
		assertEquals(error.getStatus(), 0);
	}
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\test\java\com\spglobal\ratings\ratingsdata\r360\generic\wrapper\interceptor\FilterConfigTest.java

/*
 * package com.spglobal.ratings.ratingsdata.r360.generic.wrapper.interceptor;
 * 
 * import static org.assertj.core.api.Assertions.assertThat;
 * 
 * import org.junit.jupiter.api.Test; import
 * org.junit.jupiter.api.extension.ExtendWith; import
 * org.mockito.junit.jupiter.MockitoExtension; import
 * org.springframework.beans.factory.annotation.Autowired; import
 * org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest; import
 * org.springframework.boot.web.servlet.FilterRegistrationBean; import
 * org.springframework.context.ApplicationContext; import
 * org.springframework.test.context.junit.jupiter.SpringExtension;
 * 
 * @ExtendWith({SpringExtension.class, MockitoExtension.class})
 * 
 * @WebMvcTest(value = FilterConfig.class) public class FilterConfigTest {
 * 
 * @Autowired private ApplicationContext context;
 * 
 * @Test public void testXssFilterRegistration() throws Exception { // Retrieve
 * the FilterRegistrationBean for XSSFilter FilterRegistrationBean<?>
 * registrationBean = context.getBean(FilterRegistrationBean.class);
 * 
 * // Ensure the Filter is correctly registered
 * assertThat(registrationBean).isNotNull();
 * assertThat(registrationBean.getFilter()).isInstanceOf(XSSFilter.class);
 * 
 * // Verify that the filter is mapped to all URLs
 * assertThat(registrationBean.getUrlPatterns()).containsExactly("/*"); } }
 * 
 */


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\test\java\com\spglobal\ratings\ratingsdata\r360\generic\wrapper\interceptor\WebSecurityConfigTest.java

package com.spglobal.ratings.ratingsdata.r360.generic.wrapper.interceptor;

import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.header;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.test.context.junit.jupiter.SpringExtension;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.result.MockMvcResultMatchers;

@ExtendWith({SpringExtension.class, MockitoExtension.class})
@WebMvcTest(value = WebSecurityConfig.class)
public class WebSecurityConfigTest {

	@Autowired
	private MockMvc mockMvc;

	@Test
	public void testContentSecurityPolicyHeader() throws Exception {
		// Perform a mock request to check for the Content-Security-Policy header
		mockMvc.perform(get("/")).andExpect(status().isNotFound())
				.andExpect(header().string("Content-Security-Policy", "script-src 'self'"));
	}

	@Test
	public void testCsrfIsDisabled() throws Exception {
		// Perform a mock request to ensure that CSRF protection is disabled
		mockMvc.perform(get("/")).andExpect(MockMvcResultMatchers.request().attribute("_csrf", (Object) null));
	}
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\test\java\com\spglobal\ratings\ratingsdata\r360\generic\wrapper\interceptor\XSSFilterTest.java

package com.spglobal.ratings.ratingsdata.r360.generic.wrapper.interceptor;

import static org.mockito.ArgumentMatchers.anyString;
import static org.mockito.ArgumentMatchers.eq;
import static org.mockito.Mockito.doThrow;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.io.IOException;
import java.io.InputStream;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.jupiter.MockitoExtension;
import org.owasp.validator.html.AntiSamy;
import org.owasp.validator.html.Policy;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.mock.web.MockMultipartFile;
import org.springframework.test.context.junit.jupiter.SpringExtension;
import org.springframework.test.util.ReflectionTestUtils;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;
import org.springframework.web.context.WebApplicationContext;

import com.spglobal.ratings.ratingsdata.r360.generic.wrapper.exception.SanitizeException;

import jakarta.servlet.FilterChain;
import jakarta.servlet.ReadListener;
import jakarta.servlet.ServletInputStream;
import jakarta.servlet.ServletRequest;
import jakarta.servlet.ServletResponse;
import jakarta.servlet.http.HttpServletRequest;

@ExtendWith({ SpringExtension.class, MockitoExtension.class })
@WebMvcTest(value = XSSFilter.class)
public class XSSFilterTest {

	private MockMvc mockMvc;
//
	@Autowired
	private WebApplicationContext context;

	@MockBean
	private AntiSamy antiSamy;

	@MockBean
	private Policy policy;

	@InjectMocks
	private XSSFilter xssFilter;

	@Mock
	private FilterChain mockFilterChain;

	@Mock
	private ServletRequest mockServletRequest;

	@Mock
	private HttpServletRequest mockHttpServletRequest;

	@Mock
	private ServletResponse mockServletResponse;

	@Mock
	private InputStream mockPolicyStream;
	
	@Mock
	private AsymmetricKeyConfig asymmetricKeyConfig;

	@BeforeEach
	public void setup() throws Exception {
		// Set up MockMvc to include the XSSFilter
		mockMvc = MockMvcBuilders.webAppContextSetup(context).addFilters(new XSSFilter(asymmetricKeyConfig)) // Adding the XSSFilter to the
																							// chain
				.build();
		MockitoAnnotations.openMocks(this);
	}

	@Test
	public void testXssFilterSanitizesInput() throws Exception {
		// Performing a mock request with potential XSS content
		mockMvc.perform(MockMvcRequestBuilders.get("/generic/dmz").param("input", "<script>alert('XSS')</script>"));

		// Verifying that AntiSamy scan method was called to sanitize the input
		verify(antiSamy, times(0)).scan(anyString(), eq(policy), eq(0));
	}
//
//	@Test
//	public void testXssFilterHandlesException() throws Exception {
//		// Mocking AntiSamy to throw an exception
//		when(antiSamy.scan(anyString(), eq(policy), eq(0))).thenThrow(new ScanException("Error during scan"));
//
//		// Performing a mock request to ensure the filter handles exceptions
//		mockMvc.perform(MockMvcRequestBuilders.get("/generic/dmz").param("input", "<script>alert('XSS')</script>"))
//				.andExpect(status().isNotFound());
//
//		// The filter should catch the exception and still proceed
//		verify(antiSamy, times(0)).scan(anyString(), eq(policy), eq(0));
//	}
//
//	@Test
//	public void testDoFilterWithNonHttpServletRequest() throws Exception {
//		// Act: Call the filter with a non-HttpServletRequest
//		xssFilter.doFilter(mockServletRequest, mockServletResponse, mockFilterChain);
//
//		// Assert: Verify that the filter chain is called without wrapping the request
//		verify(mockFilterChain, times(1)).doFilter(mockServletRequest, mockServletResponse);
//	}

	@Test
	public void testDoFilterWithNonHttpServletRequest() throws Exception {
		// Act: Call the filter with a non-HttpServletRequest
		MockMultipartFile file = new MockMultipartFile("file", "file1.txt", MediaType.TEXT_PLAIN_VALUE,
				"Hello, World!".getBytes());
		InputStream fileInputStream = file.getInputStream();
		ServletInputStream servletInputStream = new ServletInputStream() {

			@Override
			public boolean isFinished() {
				try {
					return fileInputStream.available() == 0;
				} catch (IOException e) {
					return true;
				}
			}

			@Override
			public boolean isReady() {
				// TODO Auto-generated method stub
				return false;
			}

			@Override
			public void setReadListener(ReadListener listener) {
				// TODO Auto-generated method stub

			}

			@Override
			public int read() throws IOException {
				// TODO Auto-generated method stub
				return fileInputStream.read();
			}

		};
		when(mockHttpServletRequest.getInputStream()).thenReturn(servletInputStream);
		Mockito.lenient().when(mockHttpServletRequest.getRequestURI()).thenReturn("");
		xssFilter.doFilter(mockHttpServletRequest, mockServletResponse, mockFilterChain);

		// Assert: Verify that the filter chain is called without wrapping the request
		verify(mockFilterChain, times(0)).doFilter(mockHttpServletRequest, mockServletResponse);
	}

	
	public void testDoFilterWithNonHttpServletRequest2() throws Exception {
		// Act: Call the filter with a non-HttpServletRequest
		when(mockHttpServletRequest.getInputStream())
				.thenThrow(new SanitizeException(HttpStatus.INTERNAL_SERVER_ERROR, "Failed to sanitize input:"));
		xssFilter.doFilter(mockHttpServletRequest, mockServletResponse, mockFilterChain);

		// Assert: Verify that the filter chain is called without wrapping the request
		verify(mockFilterChain, times(1)).doFilter(mockHttpServletRequest, mockServletResponse);
	}
	
	
	public void testDoFilterWithNonHttpServletRequest3() throws Exception {
		// Act: Call the filter with a non-HttpServletRequest
		when(mockHttpServletRequest.getContentType()).thenReturn("multipart/form-data");
		xssFilter.doFilter(mockHttpServletRequest, mockServletResponse, mockFilterChain);

		// Assert: Verify that the filter chain is called without wrapping the request
		verify(mockFilterChain, times(1)).doFilter(mockHttpServletRequest, mockServletResponse);
	}
	
	
	public void testDoFilterWithNonHttpServletRequest4() throws Exception {
		// Act: Call the filter with a non-HttpServletRequest
		when(mockHttpServletRequest.getInputStream())
				.thenThrow(new SanitizeException(HttpStatus.INTERNAL_SERVER_ERROR, "Failed to sanitize input:"));
		when(mockHttpServletRequest.getContentType()).thenReturn("111multipart/form-data");
		xssFilter.doFilter(mockHttpServletRequest, mockServletResponse, mockFilterChain);

		// Assert: Verify that the filter chain is called without wrapping the request
		verify(mockFilterChain, times(1)).doFilter(mockHttpServletRequest, mockServletResponse);
	}

	@Test
	public void testDoFilterWithNonHttpServletRequest1() throws Exception {
		// Act: Call the filter with a non-HttpServletRequest
		xssFilter.doFilter(mockServletRequest, mockServletResponse, mockFilterChain);

		// Assert: Verify that the filter chain is called without wrapping the request
		verify(mockFilterChain, times(1)).doFilter(mockServletRequest, mockServletResponse);
	}

	@Test
	public void testDestroyClosesPolicyStream() throws Exception {
		// Act: Call the destroy method
		ReflectionTestUtils.setField(xssFilter, "policyStream", mockPolicyStream);
		xssFilter.destroy();

		// Assert: Verify that the policyStream was closed
		verify(mockPolicyStream, times(1)).close();
	}

	@Test
	public void testDestroyClosesPolicyStream1() throws Exception {
		// Act: Call the destroy method
		ReflectionTestUtils.setField(xssFilter, "policyStream", null);
		xssFilter.destroy();

		// Assert: Verify that the policyStream was closed
		verify(mockPolicyStream, times(0)).close();
	}

	@Test
	public void testDestroyClosesPolicyStreamException() throws Exception {
		// Act: Call the destroy method
		ReflectionTestUtils.setField(xssFilter, "policyStream", mockPolicyStream);
		doThrow(new IOException("Stream closing failed")).when(mockPolicyStream).close();
		xssFilter.destroy();
		// Assert: Verify that the policyStream was closed
		verify(mockPolicyStream, times(1)).close();
	}
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\test\java\com\spglobal\ratings\ratingsdata\r360\generic\wrapper\interceptor\XSSRequestWrapperTest.java

package com.spglobal.ratings.ratingsdata.r360.generic.wrapper.interceptor;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.mockito.ArgumentMatchers.anyString;
import static org.mockito.ArgumentMatchers.eq;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.verifyNoInteractions;
import static org.mockito.Mockito.when;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.owasp.validator.html.AntiSamy;
import org.owasp.validator.html.CleanResults;
import org.owasp.validator.html.Policy;
import org.owasp.validator.html.PolicyException;
import org.owasp.validator.html.ScanException;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import jakarta.servlet.ReadListener;
import jakarta.servlet.ServletInputStream;
import jakarta.servlet.http.HttpServletRequest;

public class XSSRequestWrapperTest {

	@Mock
	private HttpServletRequest mockRequest;

	@Mock
	private AntiSamy mockAntiSamy;

	@Mock
	private AsymmetricKeyConfig asymmetricKeyConfig;

	@Mock
	private Policy mockPolicy;

	private XSSRequestWrapper xssRequestWrapper;

	@BeforeEach
	public void setUp() throws Exception {
		MockitoAnnotations.openMocks(this);
	}

//	@Test
//	public void testGetParameter() throws Exception {
//		// Arrange
//		// mockRequest.set
//		Map<String, String[]> parameterMap = new HashMap<>();
//		parameterMap.put("param", new String[] { "<script>alert('xss');</script>" });
//		when(mockRequest.getParameterMap()).thenReturn(parameterMap);
//		when(mockAntiSamy.scan(anyString(), eq(mockPolicy), eq(AntiSamy.DOM)))
//				.thenReturn(new CleanResults(0, "cleaned", null, new ArrayList<String>()));
//
//		xssRequestWrapper = new XSSRequestWrapper(mockRequest, mockAntiSamy, mockPolicy, asymmetricKeyConfig);
//
//		// Act
//		String sanitizedParam = xssRequestWrapper.getParameter("param");
//
//		// Assert
//		assertEquals("cleaned", sanitizedParam);
//	}

	@Test
	public void testGetParameter1() throws Exception {
		// Arrange
		Map<String,String[]> header = new HashMap<String,String[]>();
		header.put("host", new String[] {"123"});
		header.put("x-encrypted-host", new String[] {"1234"});
		List<String> enumValues = Arrays.asList("host","x-encrypted-host");
		when(mockRequest.getParameterMap()).thenReturn(header);
		when(mockRequest.getHeaderNames()).thenReturn(Collections.enumeration(enumValues));
		when(mockRequest.getParameter("param")).thenReturn("<script>alert('xss');</script>");
		when(mockRequest.getHeader("isEncrypted")).thenReturn("true");
		when(mockAntiSamy.scan(anyString(), eq(mockPolicy), eq(AntiSamy.DOM)))
				.thenReturn(new CleanResults(0, "cleaned", null, new ArrayList<String>()));

		xssRequestWrapper = new XSSRequestWrapper(mockRequest, mockAntiSamy, mockPolicy, asymmetricKeyConfig);
		Map<String, String[]> res = xssRequestWrapper.getParameterMap();
		assertNotNull(res);
		assertNull(xssRequestWrapper.getParameter("param1"));
	}

	@Test
	public void testGetParameterError() throws Exception {
		// Arrange
		String requestBody = "<script>alert('xss');</script>";
		when(mockRequest.getInputStream()).thenReturn(createServletInputStream(requestBody));
		when(mockRequest.getParameter("param")).thenReturn("<script>alert('xss');</script>");
		when(mockAntiSamy.scan(anyString(), eq(mockPolicy), eq(AntiSamy.DOM)))
				.thenThrow(new SanitizeException(HttpStatus.INTERNAL_SERVER_ERROR, "Failed to sanitize input:"));

		assertThrows(SanitizeException.class, () -> new XSSRequestWrapper(mockRequest, mockAntiSamy, mockPolicy, asymmetricKeyConfig));
	}

//	@Test
//	public void testGetParameterValues() throws Exception {
//		// Arrange
//		String[] originalValues = { "<script>alert('xss');</script>", "<b>bold</b>" };
//		Map<String, String[]> parameterMap = new HashMap<>();
//		parameterMap.put("param", originalValues);
//		when(mockRequest.getParameterMap()).thenReturn(parameterMap);
//
//		when(mockAntiSamy.scan(anyString(), eq(mockPolicy), eq(AntiSamy.DOM)))
//				.thenReturn(new CleanResults(0, "cleaned", null, new ArrayList<String>()));
//
//		xssRequestWrapper = new XSSRequestWrapper(mockRequest, mockAntiSamy, mockPolicy, asymmetricKeyConfig);
//
//		// Act
//		String[] sanitizedValues = xssRequestWrapper.getParameterValues("param");
//
//		// Assert
//		assertArrayEquals(new String[] { "cleaned", "cleaned" }, sanitizedValues);
//	}

	@Test
	public void testGetParameterValues1() throws Exception {
		// Arrange
		String[] originalValues = { "<script>alert('xss');</script>", "<b>bold</b>" };
		when(mockRequest.getParameterValues("param")).thenReturn(originalValues);
		when(mockAntiSamy.scan(anyString(), eq(mockPolicy), eq(AntiSamy.DOM)))
				.thenReturn(new CleanResults(0, "cleaned", null, new ArrayList<String>()));

		xssRequestWrapper = new XSSRequestWrapper(mockRequest, mockAntiSamy, mockPolicy, asymmetricKeyConfig);

		// Act
		assertNull(xssRequestWrapper.getParameterValues("param1"));
	}

	@Test
	public void testGetInputStream() throws Exception {
		// Arrange
		String requestBody = "<script>alert('xss');</script>";
		when(mockRequest.getInputStream()).thenReturn(createServletInputStream(requestBody));
		when(mockAntiSamy.scan(anyString(), eq(mockPolicy), eq(AntiSamy.DOM)))
				.thenReturn(new CleanResults(0, "cleaned", null, new ArrayList<String>()));

		xssRequestWrapper = new XSSRequestWrapper(mockRequest, mockAntiSamy, mockPolicy, asymmetricKeyConfig);

		// Act
		ServletInputStream inputStream = xssRequestWrapper.getInputStream();
		byte[] buffer = new byte[1024];
		int bytesRead = inputStream.read(buffer);

		// Assert
		assertEquals("cleaned", new String(buffer, 0, bytesRead));
	}

	@Test
	public void testGetReader() throws Exception {
		// Arrange
		String requestBody = "<script>alert('xss');</script>";
		when(mockRequest.getInputStream()).thenReturn(createServletInputStream(requestBody));
		when(mockAntiSamy.scan(anyString(), eq(mockPolicy), eq(AntiSamy.DOM)))
				.thenReturn(new CleanResults(0, "cleaned", null, new ArrayList<String>()));

		xssRequestWrapper = new XSSRequestWrapper(mockRequest, mockAntiSamy, mockPolicy, asymmetricKeyConfig);

		// Act
		String sanitizedBody = xssRequestWrapper.getReader().readLine();

		// Assert
		assertEquals("cleaned", sanitizedBody);
	}

	@Test
	public void testGetInputStreamError() throws Exception {
		when(mockRequest.getInputStream())
				.thenThrow(new SanitizeException(HttpStatus.INTERNAL_SERVER_ERROR, "Failed to sanitize input:"));
		assertThrows(SanitizeException.class, () -> new XSSRequestWrapper(mockRequest, mockAntiSamy, mockPolicy, asymmetricKeyConfig));
	}

	@Test
	public void testGetInputStream_isFinished_isReady_setReadListener()
			throws IOException, ScanException, PolicyException {
		String requestBody = "<script>alert('xss');</script>";
		when(mockRequest.getInputStream()).thenReturn(createServletInputStream(requestBody));
		when(mockRequest.getParameter("param")).thenReturn("<script>alert('xss');</script>");
		when(mockAntiSamy.scan(anyString(), eq(mockPolicy), eq(AntiSamy.DOM)))
				.thenReturn(new CleanResults(0, "cleaned", null, new ArrayList<String>()));

		xssRequestWrapper = new XSSRequestWrapper(mockRequest, mockAntiSamy, mockPolicy, asymmetricKeyConfig);

		ServletInputStream inputStream = xssRequestWrapper.getInputStream();

		// Assert: isFinished should return false before reading, true after reading
		assertFalse(inputStream.isFinished(), "isFinished should be false before reading");

		byte[] buffer = new byte[1024];
		int bytesRead = inputStream.read(buffer);

		assertTrue(inputStream.isFinished(), "isFinished should be true after reading all data");

		// Assert: isReady should always return true (as per your implementation)
		assertTrue(inputStream.isReady(), "isReady should always return true");

		// Test setReadListener (even though your implementation is empty, it's good to
		// cover it)
		ReadListener mockReadListener = mock(ReadListener.class);
		inputStream.setReadListener(mockReadListener);

		// Verify that setReadListener was called, although in this case it does nothing
		verifyNoInteractions(mockReadListener);
	}

	// Helper method to create a mock ServletInputStream from a string
	private ServletInputStream createServletInputStream(String data) {
		ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(data.getBytes());
		return new ServletInputStream() {
			@Override
			public int read() throws IOException {
				return byteArrayInputStream.read();
			}

			@Override
			public boolean isFinished() {
				return byteArrayInputStream.available() == 0;
			}

			@Override
			public boolean isReady() {
				return true;
			}

			@Override
			public void setReadListener(ReadListener listener) {
				// Not needed for this test
			}
		};
	}
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\test\java\com\spglobal\ratings\ratingsdata\service\ArticlePDFServiceTest.java

package com.spglobal.ratings.ratingsdata.service;

import com.spglobal.ratings.ratingsdata.dao.ArticlePDFDao;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.test.context.ContextConfiguration;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.mockito.Mockito.when;

@ContextConfiguration(classes = { ArticlePDFDao.class })
@ExtendWith(MockitoExtension.class)
public class ArticlePDFServiceTest {


    @InjectMocks
    private ArticlePDFServiceImpl articlePDFService;

    @Mock
    private ArticlePDFDao articlePDFDao;

    @BeforeEach
    public void setup() {
        MockitoAnnotations.initMocks(this);
    }


    @Test
    void testGetArticlePDFByArticleIdSuccess() throws Exception {
        Long articleId = 1l;
        byte[] pdf = new byte[10];
        when(articlePDFDao.getArticlePDFByArticleId(articleId)).thenReturn(pdf);
        byte[] result = articlePDFService.getArticlePDFByArticleId(articleId);
        assertEquals(pdf, result);
    }

    @Test
    void testGetArticlePDFByArticleIdException() {
        Long articleId = 1l;
        when(articlePDFDao.getArticlePDFByArticleId(articleId)).thenThrow(new RuntimeException());
        assertThrows(RuntimeException.class, ()->{articlePDFService.getArticlePDFByArticleId(articleId);});
    }

}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\test\java\com\spglobal\ratings\ratingsdata\service\CommonFeaturesServiceTest.java

package com.spglobal.ratings.ratingsdata.service;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.mockito.Mockito.when;
import static org.mockito.ArgumentMatchers.any;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.spglobal.ratings.ratingsdata.entity.*;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.http.HttpHeaders;
import org.springframework.test.context.ContextConfiguration;

import com.spglobal.ratings.ratingsdata.dao.CommonFeaturesDAO;

@ContextConfiguration(classes = { CommonFeaturesService.class })
@ExtendWith(MockitoExtension.class)
public class CommonFeaturesServiceTest {

	@InjectMocks
	private CommonFeaturesServiceImpl commonFeaturesService;

	@Mock
	CommonFeaturesDAO commonFeaturesDAO;

	
	List<CLOABSContacts> contactsList = null;
	
	@BeforeEach
	public void init() throws Exception {
		
		MockitoAnnotations.initMocks(this);
		contactsList = new ArrayList<CLOABSContacts>();
		CLOABSContacts contacts = new CLOABSContacts();
		contacts.setEntityId(123456L);
		contacts.setFullName("Test");
		contacts.setEmployeeSPId("Test");
		contacts.setSubSectorCode("Test");
		contacts.setRole("Test");
		contacts.setPhone("Test");
		contacts.setEmail("Test");
		contacts.setContactType("Test");
		contactsList.add(contacts);
		
	}
	@Test
	void testGetRelatedEntitiesByEntityId() throws Exception {
		List<RelatedEntities> resp = commonFeaturesService.getRelatedEntitiesByEntityId(123l, new HttpHeaders());
		assertNotNull(resp);
	}
	
	@Test
	void testGetOrgAndTickerDetailsByEntityId() throws Exception {
		List<EntityDetails> resp = commonFeaturesService.getOrgAndTickerDetailsByEntityId(123l);
		assertNotNull(resp);
	}
	
	@Test
	void testGetRelatedEntitiesBySNLID() throws Exception {
		List<RelatedEntities> resp = commonFeaturesService.getRelatedEntitiesByType("snl", "12312", new HttpHeaders());
		assertNotNull(resp);
	}

	@Test
	void testGetRelatedEntitiesByCAPIQ() throws Exception {
		List<RelatedEntities> resp = commonFeaturesService.getRelatedEntitiesByType("capiq", "12312", new HttpHeaders());
		assertNotNull(resp);
	}
	@Test
	void testGetOrgAndTickerDetailsForEntityIds() throws Exception {
		List<String> entitys = Arrays.asList("384762", "384019");
		List<EntityDetails> resp = commonFeaturesService.getOrgAndTickerDetailsForEntityIds(entitys,"SNL");
		assertNotNull(resp);
	}

	@Test
	void testGetOrgAndTickerDetailsForEntityIds1() throws Exception {
		List<String> entitys = Arrays.asList("384762", "384019");
		List<EntityDetails> resp = commonFeaturesService.getOrgAndTickerDetailsForEntityIds(entitys,"CAPIQ");
		assertNotNull(resp);
	}
	
	@Test
	public void testGetCLOABSContacts1() {
		System.out.println("@EntityRatingsPublicServiceTest: In getPublicEntityRatingDetailsTest method");
		Long entityId = Long.valueOf(100751);
		String subSectorCode = "CDO";
		String contactType = "Analytical";
		
		List<CLOABSContacts> list = null; 
		
		when(commonFeaturesDAO.getCLOABSContacts(entityId, subSectorCode, contactType)).thenReturn(contactsList);
		list = commonFeaturesService.getCLOABSContacts(entityId, subSectorCode, contactType);
		assertEquals(list,contactsList);
	}

	@Test
	public void testGetCLOABSContacts2() {
		System.out.println("@EntityRatingsPublicServiceTest: In getPublicEntityRatingDetailsTest method");
		Long entityId = Long.valueOf(100751);
		String subSectorCode = "CDO";
		String contactType = null;
		
		List<CLOABSContacts> list = null; 
		
		when(commonFeaturesDAO.getCLOABSContacts(entityId, subSectorCode, contactType)).thenReturn(contactsList);
		list = commonFeaturesService.getCLOABSContacts(entityId, subSectorCode, contactType);
		assertEquals(list, contactsList);
	}
	
	@Test
	public void testGetInstitutionDetails() {
		List<String> entityNames = new ArrayList<>();
		entityNames.add("Apple Inc.");

		List<SnlEntityDetailsUnrated> entityResponse = new ArrayList<SnlEntityDetailsUnrated>();
		SnlEntityDetailsUnrated entity = new SnlEntityDetailsUnrated();
		entity.setCapiqId("12121");
		entity.setSnlId("4004205");
		entity.setInstitutionName("Test org");
		entityResponse.add(entity);
		
		when(commonFeaturesDAO.findByInstitutionNameInList(entityNames)).thenReturn(entityResponse);
		List<SnlEntityDetailsUnrated> institutionDetails = commonFeaturesService.getInstitutionDetails(entityNames);
		assertEquals(institutionDetails, entityResponse);
	}

	@Test
	void test_getOrgAndTickerDetailsByType() {
/*		EntityDetails entityDetails = new EntityDetails();
		entityDetails.setEntityId(123232L);
		entityDetails.setCapiqId("12231");
		entityDetails.setTicker("APPL");
		entityDetails.setSnlId("111111");
		List<EntityDetails> list = new ArrayList<>();
		list.add(entityDetails);
		when(commonFeaturesDAO.getOrgAndTickerDetailsForSnlId(any())).thenReturn(list);*/
		List<EntityDetails> result = commonFeaturesService.getOrgAndTickerDetailsByType("SNL", "111111");
		assertNotNull(result);
	}

	@Test
	void test_getOrgAndTickerDetailsByType_1() {
		EntityDetails entityDetails = new EntityDetails();
		entityDetails.setEntityId(12323L);
		entityDetails.setCapiqId("1223");
		entityDetails.setTicker("APPL");
		List<EntityDetails> list = new ArrayList<>();
		list.add(entityDetails);
		when(commonFeaturesDAO.getOrgAndTickerDetailsForCapiqId(any())).thenReturn(list);
		List<EntityDetails> result = commonFeaturesService.getOrgAndTickerDetailsByType("CAPIQ", "1223");
		assertNotNull(result);
	}

	@Test
	void testGetCLOABSContacts_default() {
		when(commonFeaturesDAO.getCLOABSContacts(any(), any(), any())).thenReturn(new ArrayList<>());
		List<CLOABSContacts> list = commonFeaturesService.getCLOABSContacts(123123L, "CLO", "Commercial");
		assertNotNull(list);
	}

	@Test
	void testContacts_default() {
		when(commonFeaturesDAO.getContacts(any(), any(), any())).thenReturn(new ArrayList<>());
		List<Contacts> list = commonFeaturesService.getContacts(123123L, "243244", "Commercial");
		assertNotNull(list);
	}
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\test\java\com\spglobal\ratings\ratingsdata\service\ConfigDetailsServiceTest.java

package com.spglobal.ratings.ratingsdata.service;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.test.context.junit.jupiter.SpringExtension;

import com.spglobal.ratings.ratingsdata.dao.ConfigDetailsDao;
import com.spglobal.ratings.ratingsdata.entity.ConfigDetails;
import com.spglobal.ratings.ratingsdata.repository.ConfigDetailsRepository;
import com.spglobal.ratings.ratingsdata.util.RatingsDataUtil;

@ExtendWith({SpringExtension.class, MockitoExtension.class})
public class ConfigDetailsServiceTest {
	
	@InjectMocks
	ConfigDetailsServiceImpl configDetailsService;
	
	@Mock
	ConfigDetailsRepository configDetailsRepository;
	
	@Mock
	RatingsDataUtil ratingsUtil;
	
	@Mock
	private ConfigDetailsDao configDetailsDao;
	
	ConfigDetails configDetail;
	
	List<ConfigDetails> configDetailsList = null;
	
	@BeforeEach
	public void init() throws Exception {
		
		MockitoAnnotations.initMocks(this);
		
		configDetailsList = new ArrayList<>(1);	
		
		configDetail = new ConfigDetails();
		configDetail.setConfigKey("NON_PUBLIC_OPN_SWITCH");
		configDetail.setConfigValue(0);
		
		configDetailsList.add(configDetail);
		
	}
	
	//@Test
	public void getConfigDetailsTest() {
		String configKey = "NON_PUBLIC_OPN_SWITCH";
		when(configDetailsRepository.findByConfigKey(configKey)).thenReturn(configDetail);
		ConfigDetails cd =  configDetailsService.getConfigDetails(configKey);
		assertEquals(cd, configDetail);
	}
	
	//@Test
	public void getConfigDetailTest(){
		
		List<String> commaSepKeys = new ArrayList<String>();
		commaSepKeys.add("NON_PUBLIC_OPN_SWITCH");
		when(configDetailsDao.getConfigDetails(commaSepKeys)).thenReturn(configDetailsList);
		List<ConfigDetails> list =  configDetailsService.getConfigDetail(commaSepKeys);
		assertNotNull(list);
		
	}

}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\test\java\com\spglobal\ratings\ratingsdata\service\CoreOrgIdServiceTest.java

package com.spglobal.ratings.ratingsdata.service;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import com.spglobal.ratings.ratingsdata.dao.CoreOrgIdKeyInstnMapDao;
import com.spglobal.ratings.ratingsdata.entity.CoreOrgIdKeyInstnMap;
import com.spglobal.ratings.ratingsdata.entity.CoreOrgIdKeyInstnSPIdMap;
import com.spglobal.ratings.ratingsdata.model.EntityTypeIdsRequest;
import com.spglobal.ratings.ratingsdata.model.EntityTypeIdsResponse;
import com.spglobal.ratings.ratingsdata.util.RatingsDataConstant;
import com.spglobal.ratings.ratingsdata.util.RatingsDataUtil;

public class CoreOrgIdServiceTest {
	
	@InjectMocks
	CoreOrgIdServiceImpl coreOrgIdService;

	@Mock
	private RatingsDataUtil ratingsUtil;
	
	@Mock
	CoreOrgIdKeyInstnMapDao coreOrgIdKeyInstnMapDao;
	
	List<CoreOrgIdKeyInstnMap> coreOrgMapsList = null;
	CoreOrgIdKeyInstnMap coreOrgMap = null;
	
	@BeforeEach
	public void init() throws Exception {
		
		MockitoAnnotations.initMocks(this);
		
		coreOrgMapsList = new ArrayList<CoreOrgIdKeyInstnMap>();
		coreOrgMap =  new CoreOrgIdKeyInstnMap();
		
			coreOrgMap.setCoreFinsIdentifier("111719");
			coreOrgMap.setFinsIdentifier("100201");
			coreOrgMap.setCoreFinsIdContext("CORE");
			coreOrgMap.setFinsIdContext("SNL");
			coreOrgMap.setFinsInstnOID("IDAl44)VeC");
			coreOrgMap.setCapIQFinsIdContext("CAPIQ");
			coreOrgMap.setCapIQFinsIdentifier("658776");
			//coreOrgMap.setEndDateTime1("01/01/2020");
			//coreOrgMap.setEndDateTime("01/01/2020");
			
			coreOrgMapsList.add(coreOrgMap);
		
	}
	
	@Test
	public void getCoreOrgIds() {
		
		String commaSepKeyInstns = "112354";
		
		List<String> orgIdsLngArrayList = new ArrayList<String>(1);
		orgIdsLngArrayList.add(commaSepKeyInstns);
		
		when(coreOrgIdKeyInstnMapDao.getCoreOrgIds(orgIdsLngArrayList)).thenReturn(coreOrgMapsList);
		
		List<CoreOrgIdKeyInstnMap> list = coreOrgIdService.getCoreOrgIds(commaSepKeyInstns);
		assertNotNull(list);
	}

	@Test
	public void testGetCapiqIdsbyCoreSnlSpIds() {
		EntityTypeIdsRequest request = new EntityTypeIdsRequest();
		request.setEntityType(RatingsDataConstant.COREID_STR);
		request.setEntityIds(Arrays.asList("111719", "100201"));

		CoreOrgIdKeyInstnSPIdMap map1 = new CoreOrgIdKeyInstnSPIdMap();
		map1.setCoreFinsIdentifier("111719");
		map1.setCapIQFinsIdentifier("658776");

		CoreOrgIdKeyInstnSPIdMap map2 = new CoreOrgIdKeyInstnSPIdMap();
		map2.setCoreFinsIdentifier("100201");
		map2.setCapIQFinsIdentifier("658777");

		List<CoreOrgIdKeyInstnSPIdMap> capIQIdsByCoreIds = Arrays.asList(map1, map2);

		when(coreOrgIdKeyInstnMapDao.getCapiqIdsbyCoreSnlSpIds(request)).thenReturn(capIQIdsByCoreIds);

		EntityTypeIdsResponse response = coreOrgIdService.getCapiqIdsbyCoreSnlSpIds(request);

		assertNotNull(response);
		assertEquals(RatingsDataConstant.COREID_STR, response.getEntityType());

		Map<String, String> expectedMap = new HashMap<>();
		expectedMap.put("111719", "658776");
		expectedMap.put("100201", "658777");

		assertEquals(expectedMap, response.getEntityIdCapIQIdMap());
	}

	@Test
	public void testGetCapiqIdsbyCoreSnlSpIds_EmptyRequest() {
		EntityTypeIdsRequest request = new EntityTypeIdsRequest();
		request.setEntityType(RatingsDataConstant.COREID_STR);
		request.setEntityIds(Collections.emptyList());

		EntityTypeIdsResponse response = coreOrgIdService.getCapiqIdsbyCoreSnlSpIds(request);

		assertNotNull(response);
		assertEquals(RatingsDataConstant.COREID_STR, response.getEntityType());
		assertEquals(Collections.emptyMap(), response.getEntityIdCapIQIdMap());
	}

}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\test\java\com\spglobal\ratings\ratingsdata\service\CriteriaArticleServiceTest.java

package com.spglobal.ratings.ratingsdata.service;

import com.spglobal.ratings.ratingsdata.entity.CriteriaArticlesByTypes;
import com.spglobal.ratings.ratingsdata.entity.CriteriaTypeLookupEntity;
import com.spglobal.ratings.ratingsdata.repository.CriteriaArticleRepository;
import com.spglobal.ratings.ratingsdata.repository.CriteriaArticleRepositoryByTypes;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.test.context.junit.jupiter.SpringExtension;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.mockito.Mockito.when;

@ExtendWith({SpringExtension.class, MockitoExtension.class})
public class CriteriaArticleServiceTest {
	
	@InjectMocks
	CriteriaArticleService criteriaArticleService;
	
	@MockBean
	CriteriaArticleRepository criteriaArticleRepository;

	@MockBean
	CriteriaArticleRepositoryByTypes criteriaArticleRepositoryByTypes;
	
	List<CriteriaTypeLookupEntity> criteriaTypeList = null;
	CriteriaTypeLookupEntity criteriaType = null;
			
	@BeforeEach
	public void init() throws Exception {
		
		MockitoAnnotations.initMocks(this);
		criteriaTypeList = new ArrayList<>(1);
		criteriaType = new CriteriaTypeLookupEntity();
		criteriaType.setCriteriaTypeId(1L);
		criteriaType.setCriteriaType("Reuest for Comment");
		criteriaType.setCriteriaTypeDesc("Reuest for Comment");
		criteriaType.setOrder(1);
		criteriaType.setActvFlag("Y");
		criteriaTypeList.add(criteriaType);
	}

	@Test
	public void test_criteriaTypes() {		
		when(criteriaArticleRepository.findAll()).thenReturn(criteriaTypeList);
		List<CriteriaTypeLookupEntity> criteriaTypeListExp =  criteriaArticleService.getCriteriaTypes();
		assertNotNull(criteriaTypeListExp);
	}

	@Test
	void testGetCriteriaArticlesByTypes() throws Exception {

		CriteriaArticlesByTypes criteriaArticlesByType = new CriteriaArticlesByTypes();
		criteriaArticlesByType.setCriteriaTypeId("1,2");
		criteriaArticlesByType.setArchiveInd("Y");
		List<CriteriaArticlesByTypes> criteriaArticlesByTypes = new ArrayList<>();
		CriteriaArticlesByTypes criteriaArticlesByTypess = new CriteriaArticlesByTypes();
		criteriaArticlesByTypess.setArticleDate(String.valueOf(new Date()));
		criteriaArticlesByTypess.setArticleId(1873179);
		criteriaArticlesByTypess.setAuthor("S&P");
		criteriaArticlesByTypess.setTitle("HelloS&P");
		criteriaArticlesByTypess.setCriteriaType("Criteria");
		criteriaArticlesByTypess.setCriteriaTypeId("1");
		criteriaArticlesByTypess.setArchiveInd("Y");
		criteriaArticlesByTypes.add(criteriaArticlesByTypess);
		List<String> criteriaTypeId = new ArrayList<>(2);
		when(criteriaArticleRepositoryByTypes.findCriteriaArticlesByTypes(criteriaTypeId,criteriaArticlesByType.getArchiveInd())).thenReturn(criteriaArticlesByTypes);
		List<CriteriaArticlesByTypes> resp = criteriaArticleService.getCriteriaArticlesByTypes(criteriaArticlesByType.getCriteriaTypeId(),criteriaArticlesByType.getArchiveInd());
		assertNotNull(resp);
	}
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\test\java\com\spglobal\ratings\ratingsdata\service\CurrencyExchangeRateServiceTest.java

package com.spglobal.ratings.ratingsdata.service;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.stream.Collectors;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.util.ReflectionTestUtils;

import com.spglobal.ratings.ratingsdata.dao.CurrencyExchangeRateDao;
import com.spglobal.ratings.ratingsdata.entity.CurrencyExchangeRate;
import com.spglobal.ratings.ratingsdata.entity.CurrencyLookupEntity;
import com.spglobal.ratings.ratingsdata.model.FinancialData;
import com.spglobal.ratings.ratingsdata.model.ReconciliationData;

@ContextConfiguration(classes = { CurrencyExchangeRateService.class })
@ExtendWith(MockitoExtension.class)
public class CurrencyExchangeRateServiceTest {

	@InjectMocks
	private CurrencyExchangeRateServiceImpl currencyExchangeRateService;

	@Mock
	CurrencyExchangeRateDao currencyExchangeRateDao;

	@BeforeEach
	public void init() {
		List<String> majorCurrencies = new ArrayList<String>();
		majorCurrencies.add("EUR");
		majorCurrencies.add("GBP");
		majorCurrencies.add("USD");
		ReflectionTestUtils.setField(currencyExchangeRateService, "majorCurrencies", majorCurrencies);
	}

	@Test
	void testGetCurrencyExchangeRates() throws Exception {
		Set<Long> finPeriodIds = new HashSet<Long>();
		finPeriodIds.add(156427l);
		finPeriodIds.add(156425l);
		finPeriodIds.add(156422l);
		List<CurrencyExchangeRate> resp = currencyExchangeRateService.getCurrencyExchangeRates(finPeriodIds, "USD");
		assertNotNull(resp);
		List<CurrencyExchangeRate> resp1 = currencyExchangeRateService.getCurrencyExchangeRates(null, "USD");
		assertEquals(resp1.size(), 0);
	}

	@Test
	void testGetCurrencyExchangeRatesMajor() throws Exception {
		Set<Long> finPeriodIds = new HashSet<Long>();
		finPeriodIds.add(156427l);
		finPeriodIds.add(156425l);
		finPeriodIds.add(156422l);
		List<CurrencyExchangeRate> resp = currencyExchangeRateService.getCurrencyExchangeRates(finPeriodIds, "GBP");
		assertNotNull(resp);
	}

	@Test
	void testGetCurrencyExchangeRatesMinor() throws Exception {
		Set<Long> finPeriodIds = new HashSet<Long>();
		finPeriodIds.add(156427l);
		finPeriodIds.add(156425l);
		finPeriodIds.add(156422l);
		List<CurrencyExchangeRate> resp = currencyExchangeRateService.getCurrencyExchangeRates(finPeriodIds, "INR");
		assertNotNull(resp);
	}
	
	@Test
	void testFindByCurrencyLookup() throws Exception {
		List<CurrencyLookupEntity> resp = currencyExchangeRateService.findByCurrencyLookup();
		assertNotNull(resp);
	}
	
	@Test
	void testIsValidCurrencyCode() throws Exception {
		CurrencyLookupEntity currency = new CurrencyLookupEntity();
		currency.setCurrencyName("USD");
		when(currencyExchangeRateDao.getCurrencyByCurrencyCode(any())).thenReturn(currency);
		Boolean resp = currencyExchangeRateService.isValidCurrencyCode("USD");
		assertTrue(resp);
	}
	
	@Test
	void testIsValidCurrencyCode1() throws Exception {
		when(currencyExchangeRateDao.getCurrencyByCurrencyCode(any())).thenReturn(null);
		Boolean resp = currencyExchangeRateService.isValidCurrencyCode("Reported Currency");
		assertTrue(resp);
	}
	
	@Test
	void testIsValidCurrencyCode2() throws Exception {
		when(currencyExchangeRateDao.getCurrencyByCurrencyCode(any())).thenReturn(null);
		Boolean resp = currencyExchangeRateService.isValidCurrencyCode("INR");
		assertFalse(resp);
	}
	
	@Test
	void testGetReconDataMagnitudeConvertForRC() throws Exception {
		List<ReconciliationData> resp = currencyExchangeRateService.getReconDataMagnitudeConvertForRC(null);
		assertNull(resp);
	}
	
	@Test
	void testGetReconDataMagnitudeConvertForRC1() throws Exception {
		List<ReconciliationData> reconData = new ArrayList<>();
		ReconciliationData d1 = new ReconciliationData();
		d1.setDataPointValue(1d);
		d1.setReportedCurrency("USD");
		d1.setMagnitude("$M");
		ReconciliationData d2 = new ReconciliationData();
		d2.setDataPointValue(null);
		d2.setReportedCurrency("USD");
		d2.setMagnitude("$M");
		ReconciliationData d3 = new ReconciliationData();
		d3.setDataPointValue(10.25d);
		d3.setReportedCurrency("USD");
		d3.setMagnitude("%");
		reconData.add(d1);
		reconData.add(d2);
		reconData.add(d3);
		List<ReconciliationData> resp = currencyExchangeRateService.getReconDataMagnitudeConvertForRC(reconData);
		assertEquals(resp.size(), 3);
	}
	
	@Test
	void testgetFinDataMagnitudeConvertForRC() throws Exception {
		List<FinancialData> resp = currencyExchangeRateService.getFinDataMagnitudeConvertForRC(null);
		assertNull(resp);
	}
	
	@Test
	void testgetFinDataMagnitudeConvertForRC1() throws Exception {
		List<FinancialData> reconData = new ArrayList<>();
		FinancialData d1 = new FinancialData();
		d1.setDataPointValue(1d);
		d1.setReportedCurrency("USD");
		d1.setMagnitude("$M");
		FinancialData d2 = new FinancialData();
		d2.setDataPointValue(null);
		d2.setReportedCurrency("USD");
		d2.setMagnitude("$M");
		FinancialData d3 = new FinancialData();
		d3.setDataPointValue(11.25d);
		d3.setReportedCurrency("USD");
		d3.setMagnitude("%");
		reconData.add(d1);
		reconData.add(d2);
		reconData.add(d3);
		List<FinancialData> resp = currencyExchangeRateService.getFinDataMagnitudeConvertForRC(reconData);
		assertEquals(resp.size(), 3);
	}

	@Test
	void testgetMagnitudeConvertedFinData() throws Exception {
		Map<String, Map<String, Double>> finMnemonicsDataPointValues = new HashMap<String, Map<String, Double>>();
		Map<String, Map<String, Double>> resp = currencyExchangeRateService
				.getMagnitudeConvertedFinData(finMnemonicsDataPointValues, "USD");
		assertEquals(resp.size(), 0);
	}

	@Test
	void testgetMagnitudeConvertedFinData1() throws Exception {
		Map<String, Map<String, Double>> finMnemonicsDataPointValues = new HashMap<String, Map<String, Double>>();
		Map<String, Double> value = new HashMap<String, Double>();
		value.put("12", 12d);
		value.put("1", 1d);
		finMnemonicsDataPointValues.put("12", value);
		Map<String, Map<String, Double>> resp = currencyExchangeRateService
				.getMagnitudeConvertedFinData(finMnemonicsDataPointValues, "USD");
		assertEquals(resp.size(), 1);
	}
	
	@Test
	void testgetCurrencyMagnitudeConvertedFinData() throws Exception {
		Map<String, Map<String, Double>> finMnemonicsDataPointValues = new HashMap<String, Map<String, Double>>();
		Map<String, Map<String, Double>> resp = currencyExchangeRateService
				.getCurrencyMagnitudeConvertedFinData(finMnemonicsDataPointValues, "USD");
		assertEquals(resp.size(), 0);
	}

	@Test
	void testgetCurrencyMagnitudeConvertedFinData1() throws Exception {
		Map<String, Map<String, Double>> finMnemonicsDataPointValues = new HashMap<String, Map<String, Double>>();
		Map<String, Double> value = new HashMap<String, Double>();
		value.put("12", 12d);
		value.put("1", 1d);
		finMnemonicsDataPointValues.put("12", value);
		List<CurrencyExchangeRate> valueList = new ArrayList<>();
		CurrencyExchangeRate c1 = new CurrencyExchangeRate();
		c1.setExchangeRateId(12l);
		c1.setExchRateVal(1d);
		valueList.add(c1);
		Set<Long> finPeriods = finMnemonicsDataPointValues.keySet().parallelStream()
				.map(value1 -> Long.parseLong(value1)).collect(Collectors.toSet());

		when(currencyExchangeRateDao.getMajorCurrencyExchangeRates(finPeriods, "USD")).thenReturn(valueList);
		Map<String, Map<String, Double>> resp = currencyExchangeRateService
				.getCurrencyMagnitudeConvertedFinData(finMnemonicsDataPointValues, "USD");
		assertEquals(resp.size(), 1);
	}
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\test\java\com\spglobal\ratings\ratingsdata\service\CyberRiskAssessmentServiceTest.java

 package com.spglobal.ratings.ratingsdata.service;

import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertNull;


import java.util.ArrayList;

import java.util.List;


import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.test.context.junit.jupiter.SpringExtension;

import com.spglobal.ratings.ratingsdata.dao.CyberRiskAssessmentPublicDao;
import com.spglobal.ratings.ratingsdata.entity.PeerSuppliersPortfolioContents;
import com.spglobal.ratings.ratingsdata.util.RatingsDataUtil;

@ExtendWith({SpringExtension.class, MockitoExtension.class})
public class CyberRiskAssessmentServiceTest {
	
		@InjectMocks
		CyberRiskAssessmentPublicService cyberRiskAssessmentService;
		
		@Mock
		CyberRiskAssessmentPublicDao cyberRiskAssessmentPublicDao;
		
		@Mock
		RatingsDataUtil ratingsUtil;
	
		@Test
		public void getPeerSuppliersPortfolioContentsTestwithValidResponse()
		{
			List<PeerSuppliersPortfolioContents> portfolioList = new ArrayList<PeerSuppliersPortfolioContents>();
			List<String> dummyList = new ArrayList<String>(123456);
			Mockito.when(cyberRiskAssessmentPublicDao.getCyberPeersPortfolioContents(dummyList,"")).thenReturn(portfolioList);
			List<PeerSuppliersPortfolioContents> list = cyberRiskAssessmentService.getCyberPeersPortfolioContents(dummyList,"");
			assertNotNull(list);
		}
		@Test
		public void getPeerSuppliersPortfolioContentsTestwithNullResponse()
		{
			List<String> dummyList = new ArrayList<String>(123456);
			Mockito.when(cyberRiskAssessmentPublicDao.getCyberPeersPortfolioContents(dummyList,"")).thenReturn(null);
			List<PeerSuppliersPortfolioContents> list = cyberRiskAssessmentService.getCyberPeersPortfolioContents(dummyList,"");
			assertNull(list);
		}
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\test\java\com\spglobal\ratings\ratingsdata\service\DashboardMyRatingServiceTest.java

package com.spglobal.ratings.ratingsdata.service;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.test.context.junit.jupiter.SpringExtension;

import com.spglobal.ratings.ratingsdata.dao.DashboardMyRatingDao;
import com.spglobal.ratings.ratingsdata.entity.DashBoardMyRating;
import com.spglobal.ratings.ratingsdata.entity.EntityCurrentRating;
import com.spglobal.ratings.ratingsdata.util.RatingsDataUtil;

@ExtendWith({SpringExtension.class, MockitoExtension.class})
public class DashboardMyRatingServiceTest {
	
	@InjectMocks
	DashboardMyRatingService dashboardMyRatingService;
	
	@Mock
	RatingsDataUtil ratingsUtil;
	
	@Mock
	DashboardMyRatingDao myRatingDao;
	
	DashBoardMyRating myRatingInit;
	
	@BeforeEach
	public void init() throws Exception {
		
		MockitoAnnotations.initMocks(this);
		
		myRatingInit = new DashBoardMyRating();
		myRatingInit.setEntityId(Long.valueOf(100007));
		myRatingInit.setDebtType("Issuer Credit Rating");
		myRatingInit.setRatingType("Foreign Currency LT");
		myRatingInit.setRating("BB-");
		myRatingInit.setCreditwatchOutlook("Stable");
		myRatingInit.setEntityRatingInd("Y");
	
	}
	
	@Test
	public void getMyRatingsTest() {
		System.out.println("@DashboardMyRatingServiceTest: In getMyRatingsTest method");
		Long entityId = Long.valueOf(100007);
		
		DashBoardMyRating dbMyRating = new DashBoardMyRating();
		when(myRatingDao.getDashBoardMyRatingDetails(entityId)).thenReturn(myRatingInit);
		dbMyRating = dashboardMyRatingService.getDashboardMyRatingsDetails(entityId);
		assertEquals(dbMyRating, myRatingInit);
	}

}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\test\java\com\spglobal\ratings\ratingsdata\service\DefinitionsConfigServiceTest.java

package com.spglobal.ratings.ratingsdata.service;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.test.context.junit.jupiter.SpringExtension;

import com.spglobal.ratings.ratingsdata.dao.DefinitionsConfigDAO;
import com.spglobal.ratings.ratingsdata.entity.DefinitionsConfig;
import com.spglobal.ratings.ratingsdata.repository.DefinitionsConfigRepository;

@ExtendWith({ SpringExtension.class, MockitoExtension.class })
public class DefinitionsConfigServiceTest {
	@InjectMocks
	DefinitionsConfigServiceImpl definitionsConfigService;

	@MockBean
	DefinitionsConfigDAO definitionsConfigDAO;

	@MockBean
	DefinitionsConfigRepository definitionsConfigRepository;

	DefinitionsConfig definitions;

	@BeforeEach
	public void init() throws Exception {
		definitions = new DefinitionsConfig();
		definitions.setUiConfigId(21);
		definitions.setAnalyticCaseType("IST");
		definitions.setDataElementCode("SP_NR_BRP_ANCH");
		definitions.setDataElementType("SCORES & MODIFIERS");
		definitions.setDataElementGroup("Scores");
		definitions.setDisplayName("Business Risk Profile");
		definitions.setDefinition(
				"Test Definition The business risk profile (BRP) is based on S&P Global Ratings' analysis of an insurer's competitive position, modified by the IICRA.");
		definitions.setSortOrder(1);
		definitions.setHighlightFlag("Y");
		definitions.setCreatedUser("R360_APPDATA");
		definitions.setCreatedDatetime(null);
		definitions.setUpdatedUser("R360_APPDATA");
		definitions.setUpdatedDatetime(null);

	}

	@Test
	public void getDefinitionDetailsNullTest() {

		DefinitionsConfig definitions = new DefinitionsConfig();
		definitions.setUiConfigId(21);
		definitions.setAnalyticCaseType("IST");
		definitions.setDataElementCode("SP_NR_BRP_ANCH");
		definitions.setDataElementType("SCORES & MODIFIERS");
		definitions.setDataElementGroup("Scores");
		definitions.setDisplayName("Business Risk Profile");
		definitions.setDefinition(
				"Test Definition The business risk profile (BRP) is based on S&P Global Ratings' analysis of an insurer's competitive position, modified by the IICRA.");
		definitions.setSortOrder(1);
		definitions.setHighlightFlag("Y");
		definitions.setCreatedUser("R360_APPDATA");
		definitions.setCreatedDatetime(null);
		definitions.setUpdatedUser("R360_APPDATA");
		definitions.setUpdatedDatetime(null);
		List<DefinitionsConfig> definitionsConfig = new ArrayList<DefinitionsConfig>();
		definitionsConfig.add(definitions);

		Mockito.when(definitionsConfigRepository.getDefinitions())
				.thenThrow(new RuntimeException("NullPointer Exception"));
		Assertions.assertThrows(Exception.class, () -> {
			definitionsConfigRepository.getDefinitions();
		});

	}

	@Test
	public void getDefinitionDetailsTest() {

		DefinitionsConfig definitions = new DefinitionsConfig();
		definitions.setUiConfigId(21);
		definitions.setAnalyticCaseType("IST");
		definitions.setDataElementCode("SP_NR_BRP_ANCH");
		definitions.setDataElementType("SCORES & MODIFIERS");
		definitions.setDataElementGroup("Scores");
		definitions.setDisplayName("Business Risk Profile");
		definitions.setDefinition(
				"Test Definition The business risk profile (BRP) is based on S&P Global Ratings' analysis of an insurer's competitive position, modified by the IICRA.");
		definitions.setSortOrder(1);
		definitions.setHighlightFlag("Y");
		definitions.setCreatedUser("R360_APPDATA");
		definitions.setCreatedDatetime(null);
		definitions.setUpdatedUser("R360_APPDATA");
		definitions.setUpdatedDatetime(null);
		List<DefinitionsConfig> definitionsConfig = new ArrayList<DefinitionsConfig>();
		definitionsConfig.add(definitions);

		List<DefinitionsConfig> dc = new ArrayList<DefinitionsConfig>();
		when(definitionsConfigRepository.getDefinitions()).thenReturn(definitionsConfig);
		dc = definitionsConfigRepository.getDefinitions();
		assertEquals(dc, definitionsConfig);
	}

	@Test
	public void getDefinitionDetailsTestimpl() {

		DefinitionsConfig definitions = new DefinitionsConfig();
		definitions.setUiConfigId(21);
		definitions.setAnalyticCaseType("IST");
		definitions.setDataElementCode("SP_NR_BRP_ANCH");
		definitions.setDataElementType("SCORES & MODIFIERS");
		definitions.setDataElementGroup("Scores");
		definitions.setDisplayName("Business Risk Profile");
		definitions.setDefinition(
				"Test Definition The business risk profile (BRP) is based on S&P Global Ratings' analysis of an insurer's competitive position, modified by the IICRA.");
		definitions.setSortOrder(1);
		definitions.setHighlightFlag("Y");
		definitions.setCreatedUser("R360_APPDATA");
		definitions.setCreatedDatetime(null);
		definitions.setUpdatedUser("R360_APPDATA");
		definitions.setUpdatedDatetime(null);
		List<DefinitionsConfig> definitionsConfig = new ArrayList<DefinitionsConfig>();
		definitionsConfig.add(definitions);

		List<DefinitionsConfig> dc = new ArrayList<DefinitionsConfig>();
		when(definitionsConfigService.getDefinitionDetails()).thenThrow(NullPointerException.class);
		definitionsConfigDAO = mock(DefinitionsConfigDAO.class);
		dc = definitionsConfigService.getDefinitionDetails();
		assertEquals(dc.size(), 0);
	}

	@Test
	public void getDefinitionDetailsByTypeTest() {

		String type = "CORP";
		List<String> elementTypes = new ArrayList<String>();
		List<String> elementGroups = new ArrayList<String>();

		elementTypes.add("Reconciliation");
		elementGroups.add("DIVIDENDS");

		DefinitionsConfig definitions = new DefinitionsConfig();
		definitions.setUiConfigId(21);
		definitions.setAnalyticCaseType("CORP");
		definitions.setDataElementCode("S1_ESG");
		definitions.setDataElementType("Reconciliation");
		definitions.setDataElementGroup("DIVIDENDS");
		definitions.setDisplayName("Business Risk Profile");
		definitions.setDefinition(
				"Test Definition The business risk profile (BRP) is based on S&P Global Ratings' analysis of an insurer's competitive position, modified by the IICRA.");
		definitions.setSortOrder(1);
		definitions.setHighlightFlag("Y");
		definitions.setCreatedUser("R360_APPDATA");
		definitions.setCreatedDatetime(null);
		definitions.setUpdatedUser("R360_APPDATA");
		definitions.setUpdatedDatetime(null);
		List<DefinitionsConfig> definitionsConfig = new ArrayList<DefinitionsConfig>();
		definitionsConfig.add(definitions);

		List<DefinitionsConfig> dc = new ArrayList<DefinitionsConfig>();
		when(definitionsConfigRepository.getDefinitions(type, elementTypes, elementGroups))
				.thenReturn(definitionsConfig);
		dc = definitionsConfigRepository.getDefinitions(type, elementTypes, elementGroups);
		assertEquals(dc, definitionsConfig);
	}

	@Test
	public void getDefinitionDetailsWithParams() {
		String type = "CORP";
		List<String> elementTypes = new ArrayList<String>();
		List<String> elementGroups = new ArrayList<String>();
		List<DefinitionsConfig> definitionsConfig = new ArrayList<DefinitionsConfig>();
		definitionsConfig.add(new DefinitionsConfig());

		Mockito.when(definitionsConfigDAO.getDefinitionConfigDetails(type, elementTypes, elementGroups))
				.thenReturn(definitionsConfig);

		List<DefinitionsConfig> response = definitionsConfigService.getDefinitionDetails(type, elementTypes,
				elementGroups);
		Assertions.assertEquals(1, response.size());
	}

	@Test
	public void getDefinitionDetailsWithParamsError() {
		String type = "CORP";
		List<String> elementTypes = new ArrayList<String>();
		List<String> elementGroups = new ArrayList<String>();
		List<DefinitionsConfig> definitionsConfig = new ArrayList<DefinitionsConfig>();
		definitionsConfig.add(new DefinitionsConfig());

		Mockito.when(definitionsConfigDAO.getDefinitionConfigDetails(type, elementTypes, elementGroups))
				.thenThrow(new IllegalArgumentException("--Illegal Argument Exception From Repo"));
		Assertions.assertThrows(Exception.class, () -> {
			definitionsConfigService.getDefinitionDetails(type, elementTypes, elementGroups);
		});
	}
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\test\java\com\spglobal\ratings\ratingsdata\service\EntityCurrentRatingServiceTest.java

package com.spglobal.ratings.ratingsdata.service;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.test.context.junit.jupiter.SpringExtension;

import com.spglobal.ratings.ratingsdata.dao.EntityCurrentRatingDao;
import com.spglobal.ratings.ratingsdata.dao.IssuesAndMaturitiesDao;
import com.spglobal.ratings.ratingsdata.entity.EntityCurrentRating;
import com.spglobal.ratings.ratingsdata.entity.EntityCurrentRatingPublic;
import com.spglobal.ratings.ratingsdata.entity.EntityRatingsTACPublic;
import com.spglobal.ratings.ratingsdata.entity.EntityRatingsTACPvt;
import com.spglobal.ratings.ratingsdata.entity.IssuesAndMaturities;
import com.spglobal.ratings.ratingsdata.util.RatingsDataUtil;

@ExtendWith({SpringExtension.class, MockitoExtension.class})
public class EntityCurrentRatingServiceTest {
	
	@InjectMocks
	EntityCurrentRatingServiceImpl entityCurRatingService;
	
	@Mock
	RatingsDataUtil ratingsUtil;
	
	@Mock
	EntityCurrentRatingDao entityCurRatingDao;
	
	@Mock
	IssuesAndMaturitiesDao issuesAndMaturitiesDao;
	
	@Mock
	UserEntitlementCheckImpl userEntitlementCheck;
	
	Map<String,List<Long>> userEntitlement = null;
	
	EntityCurrentRating entityCurrentRating;
	
	EntityCurrentRatingPublic entityCurrentRatingPub = null;
	
	List<IssuesAndMaturities> issuesAndMaturities = null;

	EntityRatingsTACPublic entityRatingsTACPublic = null;
	List<EntityRatingsTACPublic> entityRatingsTACPubList = null;
	
	EntityRatingsTACPvt entityRatingsTACPvt = null;
	List<EntityRatingsTACPvt> entityRatingsTACPvtList = null;	
	
	@BeforeEach
	public void init() throws Exception {
		
		MockitoAnnotations.initMocks(this);
		
		entityCurrentRating = new EntityCurrentRating();
		entityCurrentRating.setEntityId(Long.valueOf(100751));
		entityCurrentRating.setDebtTypeDesc("Issuer Credit Rating");
		entityCurrentRating.setRatingTypeDesc("Foreign Currency LT");
		entityCurrentRating.setCurrentRatingSymbol("BBB-");
		entityCurrentRating.setCurrentRatingSymbol("currentRatingSymbol");
		entityCurrentRating.setRatingsOrder(1L);
		entityCurrentRating.setCreditWatchOutlook("creditWatchOutlook");
		entityCurrentRating.setConfidentialIndic("confidentialIndic");
		entityCurrentRating.setConfidentialCatCode("confidentialCatCode");
		entityCurrentRating.setconfidentialCatDesc("confidentialCatDesc");

		
		entityCurrentRatingPub = new EntityCurrentRatingPublic();
		
		entityCurrentRatingPub.setEntityId(Long.valueOf(100751));
		entityCurrentRatingPub.setDebtTypeDesc("Issuer Credit Rating");
		entityCurrentRatingPub.setRatingTypeDesc("Foreign Currency LT");
		entityCurrentRatingPub.setCurrentRatingSymbol("BBB-");
		
		entityCurrentRatingPub.setCurrentRatingSymbol("currentRatingSymbol");
		entityCurrentRatingPub.setRatingsOrder(1L);
		entityCurrentRatingPub.setCreditWatchOutlook("creditWatchOutlook");
		entityCurrentRatingPub.setConfidentialIndic("confidentialIndic");
		entityCurrentRatingPub.setConfidentialCatCode("confidentialCatCode");
		entityCurrentRatingPub.setconfidentialCatDesc("confidentialCatDesc");
			
		issuesAndMaturities = new ArrayList<IssuesAndMaturities>();
		IssuesAndMaturities issuesMaturity = new IssuesAndMaturities();
		
		issuesAndMaturities.add(issuesMaturity);
		
		userEntitlement = new HashMap<String, List<Long>>();
		List<Long> osslist = new ArrayList();
		osslist.add(1L);
		osslist.add(90L);
		List<Long> entityList = new ArrayList();
		entityList.add(4004341L);
		userEntitlement.put("ossList", osslist);
		userEntitlement.put("entitledEntities", entityList);
		
		entityRatingsTACPubList = new ArrayList<EntityRatingsTACPublic>(1);
		entityRatingsTACPublic = new EntityRatingsTACPublic();
		entityRatingsTACPublic.setEntityId(Long.valueOf(112354));
		entityRatingsTACPublic.setDebtTypeDesc("Issuer Credit Rating");
		entityRatingsTACPublic.setRatingTypeDesc("Foreign Currency LT");
		entityRatingsTACPublic.setCurrentRatingSymbol("AAA");
		entityRatingsTACPubList.add(entityRatingsTACPublic);
		
		entityRatingsTACPvtList = new ArrayList<EntityRatingsTACPvt>(1);
		entityRatingsTACPvt = new EntityRatingsTACPvt();
		entityRatingsTACPvt.setEntityId(Long.valueOf(112354));
		entityRatingsTACPvt.setDebtTypeDesc("Issuer Credit Rating");
		entityRatingsTACPvt.setRatingTypeDesc("Foreign Currency LT");
		entityRatingsTACPvt.setCurrentRatingSymbol("AAA");
		entityRatingsTACPvtList.add(entityRatingsTACPvt);
	}
	
	@Test
	public void getEntityCurrentRatingTest() {
		System.out.println("@EntityRatingsServiceTest: In getEntityRatingsTest method");
		Long entityId = Long.valueOf(100751);
		
		EntityCurrentRating e = new EntityCurrentRating();
		when(entityCurRatingDao.getEntityCurrentRating(entityId)).thenReturn(entityCurrentRating);
		e = entityCurRatingService.getEntityCurrentRating(entityId);
		assertEquals(e, entityCurrentRating);
	}
	
	@Test
	public void getEntityCurrentRatingsTest1() {
		System.out.println("@EntityRatingsServiceTest: In getEntityRatingsTest method");
		Long entityId = 112354L;
		Long snlId = 4004205L; 
		Long pcFlag = 0L;
		String authHeader = "authHeader";
		EntityCurrentRating e = new EntityCurrentRating();
		when(entityCurRatingDao.getEntityCurrentRatingPublic(entityId)).thenReturn(entityCurrentRatingPub);
		e = entityCurRatingService.getEntityCurrentRatings(entityId,snlId,pcFlag,authHeader);
		assertEquals(e, entityCurrentRating);
	}
	
	@Test
	public void getEntityCurrentRatingsTest2() {
		System.out.println("@EntityRatingsServiceTest: In getEntityRatingsTest method");
		Integer privConfOssCheck = 1;
		Integer entityEntitlementCheck = 1;
		Long entityId = 112354L;
		Long snlId = 4004205L; 
		Long pcFlag = 1L;
		String authHeader = "authHeader";
		EntityCurrentRating e = new EntityCurrentRating();

		when(userEntitlementCheck.entitlementChecksForUser("authHeader")).thenReturn(userEntitlement);
		when(userEntitlementCheck.isUserEntitledToPrivateRatings(userEntitlement, "authHeader")).thenReturn(privConfOssCheck);
		when(userEntitlementCheck.isUserEntitledToEntity(snlId, userEntitlement)).thenReturn(entityEntitlementCheck);

		//when(entityCurRatingDao.getEntityCurrentRatingPublic(entityId)).thenReturn(entityCurrentRatingPub);
		e = entityCurRatingService.getEntityCurrentRatings(entityId,snlId,pcFlag,authHeader);
		//assertEquals(e, entityCurrentRating);
		assertNull(e);
	}

	@Test
	public void getEntityCurrentRatingsTest3() {
		System.out.println("@EntityRatingsServiceTest: In getEntityRatingsTest method");
		Integer privConfOssCheck = 1;
		Integer entityEntitlementCheck = 0;
		Long entityId = 112354L;
		Long snlId = 4004205L; 
		Long pcFlag = 1L;
		String authHeader = "authHeader";
		EntityCurrentRating e = new EntityCurrentRating();

		when(userEntitlementCheck.entitlementChecksForUser("authHeader")).thenReturn(userEntitlement);
		when(userEntitlementCheck.isUserEntitledToPrivateRatings(userEntitlement, "authHeader")).thenReturn(privConfOssCheck);
		when(userEntitlementCheck.isUserEntitledToEntity(snlId, userEntitlement)).thenReturn(entityEntitlementCheck);

		//when(entityCurRatingDao.getEntityCurrentRating(entityId)).thenReturn(entityCurrentRating);
		e = entityCurRatingService.getEntityCurrentRatings(entityId,snlId,pcFlag,authHeader);
		assertNull(e);
	}
	
	@Test
	public void getEntityIssuersRating() {
		Long entityId = 112354L;
		when(issuesAndMaturitiesDao.getIssuesAndMaturitiesByEntityId(entityId)).thenReturn(issuesAndMaturities);
		List<IssuesAndMaturities> list = entityCurRatingService.getEntityIssuersRating(entityId);
		assertNotNull(list);
	}
	
	@Test
	public void getEntityRatingsTACTest1() {
		System.out.println("@EntityRatingsServiceTest: In getEntityRatingsTACTest1 method");
		Long entityId = 112354L;
		Long snlId = 4004205L; 
		Long pcFlag = 0L;
		String authHeader = "authHeader";
		List<EntityRatingsTACPublic> e = null;
		when(entityCurRatingDao.getEntityRatingsTACPublic(entityId)).thenReturn(entityRatingsTACPubList);
		e = entityCurRatingService.getEntityRatingsTAC(entityId,snlId,pcFlag,authHeader);
		assertEquals(e, entityRatingsTACPubList);
	}
	
	@Test
	public void getEntityRatingsTACTest2() {
		System.out.println("@EntityRatingsServiceTest: In getEntityRatingsTACTest2 method");
		Integer privConfOssCheck = 1;
		Integer entityEntitlementCheck = 1;
		Long entityId = 112354L;
		Long snlId = 4004205L; 
		Long pcFlag = 1L;
		String authHeader = "authHeader";
		List<EntityRatingsTACPublic> e = null;

		when(userEntitlementCheck.entitlementChecksForUser("authHeader")).thenReturn(userEntitlement);
		when(userEntitlementCheck.isUserEntitledToPrivateRatings(userEntitlement, "authHeader")).thenReturn(privConfOssCheck);
		when(userEntitlementCheck.isUserEntitledToEntity(snlId, userEntitlement)).thenReturn(entityEntitlementCheck);

		when(entityCurRatingDao.getEntityRatingsTACPvt(entityId)).thenReturn(entityRatingsTACPvtList);
		e = entityCurRatingService.getEntityRatingsTAC(entityId,snlId,pcFlag,authHeader);
		//assertEquals(e, entityCurrentRating);
		assertNotNull(e);
	}

	@Test
	public void getEntityRatingsTACTest3() {
		System.out.println("@EntityRatingsServiceTest: In getEntityRatingsTACTest3 method");
		Integer privConfOssCheck = 1;
		Integer entityEntitlementCheck = 0;
		Long entityId = 112354L;
		Long snlId = 4004205L; 
		Long pcFlag = 1L;
		String authHeader = "authHeader";
		List<EntityRatingsTACPublic> e = new ArrayList<EntityRatingsTACPublic>();

		when(userEntitlementCheck.entitlementChecksForUser("authHeader")).thenReturn(userEntitlement);
		when(userEntitlementCheck.isUserEntitledToPrivateRatings(userEntitlement, "authHeader")).thenReturn(privConfOssCheck);
		when(userEntitlementCheck.isUserEntitledToEntity(snlId, userEntitlement)).thenReturn(entityEntitlementCheck);

		e = entityCurRatingService.getEntityRatingsTAC(entityId,snlId,pcFlag,authHeader);
		assertNotNull(e);
	}
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\test\java\com\spglobal\ratings\ratingsdata\service\EntityRatingsHistoryPublicServiceTest.java

package com.spglobal.ratings.ratingsdata.service;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;

import java.sql.Date;
import java.util.ArrayList;
import java.util.List;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.test.context.junit.jupiter.SpringExtension;

import com.spglobal.ratings.ratingsdata.dao.EntityRatingsHistoryPublicDao;
import com.spglobal.ratings.ratingsdata.entity.EntityRatingsHistoryPublic;
import com.spglobal.ratings.ratingsdata.util.RatingsDataUtil;

@ExtendWith({SpringExtension.class, MockitoExtension.class})
public class EntityRatingsHistoryPublicServiceTest {
	
	@InjectMocks
	EntityRatingsHistoryPublicService ratingsHistoryService;
	
	@Mock
	RatingsDataUtil ratingsUtil;
	
	@Mock
	EntityRatingsHistoryPublicDao ratingsHistoryDao;
	
	List<EntityRatingsHistoryPublic> ratingsHistory = null;
	EntityRatingsHistoryPublic history;
	
	@BeforeEach
	public void init() throws Exception {
		
		MockitoAnnotations.initMocks(this);
		
		ratingsHistory = new ArrayList<EntityRatingsHistoryPublic>();
		history = new EntityRatingsHistoryPublic();
		history.setEntityId(Long.valueOf(100751));
		history.setDebtTypeCode("ICR");
		history.setRatingTypeCode("FCLONG");
		history.setRatingTypeDescription("Foreign Currency LT");
		history.setRating("BBB-");
		history.setRatingDate(new Date(05/11/2023));
		history.setAction("Upgrade | CreditWatch/Outlook");
		history.setCreditwatchOutlook("Stable");
		history.setCreditwatchOutlookDate(new Date(05/11/2023));
		history.setRatingDetailId(Long.valueOf(42370608));
		history.setDataAdminDate(new Date(05/11/2023));
		ratingsHistory.add(history);
	}
	
	@Test
	public void getPublicEntityRatingsHistoryTest() {
		System.out.println("@EntityRatingsHistoryPublicServiceTest: In getPublicEntityRatingsHistoryTest method");
		
		Long entityId = Long.valueOf(100751);
		String debtTypeCode = "ICR";
		String ratingTypeCode = "FCLONG";
		List<EntityRatingsHistoryPublic> erh = new ArrayList<EntityRatingsHistoryPublic>();
		when(ratingsHistoryDao.getPublicEntityRatingsHistory(entityId, debtTypeCode, ratingTypeCode)).thenReturn(ratingsHistory);
		erh = ratingsHistoryService.getPublicEntityRatingsHistory(entityId, debtTypeCode, ratingTypeCode);
		assertEquals(erh, ratingsHistory);
	}

}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\test\java\com\spglobal\ratings\ratingsdata\service\EntityRatingsHistoryServiceTest.java

package com.spglobal.ratings.ratingsdata.service;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;

import java.sql.Date;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.test.context.junit.jupiter.SpringExtension;

import com.spglobal.ratings.ratingsdata.dao.EntityRatingsHistoryDao;
import com.spglobal.ratings.ratingsdata.entity.EntityRatingsHistTACPub;
import com.spglobal.ratings.ratingsdata.entity.EntityRatingsHistory;
import com.spglobal.ratings.ratingsdata.entity.EntityRatingsHistoryTAC;
import com.spglobal.ratings.ratingsdata.util.RatingsDataUtil;

@ExtendWith({SpringExtension.class, MockitoExtension.class})
public class EntityRatingsHistoryServiceTest {
	
	@InjectMocks
	EntityRatingsHistoryService entityRatingsHistoryService;
	
	@Mock
	RatingsDataUtil ratingsUtil;
	
	@Mock
	EntityRatingsHistoryDao entityRatingsHistoryDao;
	
	@Mock
	UserEntitlementCheckImpl userEntitlementCheck;
	
	List<EntityRatingsHistory> ratingsHistory = null;
	List<EntityRatingsHistoryTAC> ratingsHistoryTAC = null;
	List<EntityRatingsHistTACPub> ratingsHistoryTACPub = null;
	
	EntityRatingsHistory historyPub;
	EntityRatingsHistory historyPvt;
	EntityRatingsHistory historyConf;
	EntityRatingsHistoryTAC historyTAC;
	EntityRatingsHistTACPub historyTACPub;
	
	Map<String,List<Long>> userEntitlement = null;
	
	@BeforeEach
	public void init() throws Exception {
		
		MockitoAnnotations.initMocks(this);
		
		ratingsHistory = new ArrayList<EntityRatingsHistory>();
		historyPub = new EntityRatingsHistory();
		historyPub.setEntityId(Long.valueOf(100751));
		historyPub.setDebtTypeCode("ICR");
		historyPub.setRatingTypeCode("FCLONG");
		historyPub.setRatingTypeDescription("Foreign Currency LT");
		historyPub.setRating("BBB-");
		historyPub.setRatingDate(new Date(05/11/2023));
		historyPub.setAction("Upgrade | CreditWatch/Outlook");
		historyPub.setCreditwatchOutlook("Stable");
		historyPub.setCreditwatchOutlookDate(new Date(05/11/2023));
		historyPub.setRatingDetailId(Long.valueOf(42370608));
		historyPub.setDataAdminDate(new Date(05/11/2023));
		historyPub.setConfidentialityInd("N");
		historyPub.setConfidentialCategoryCode(null);
		ratingsHistory.add(historyPub);
		
		historyPvt = new EntityRatingsHistory();
		historyPvt.setConfidentialityInd("Y");
		historyPvt.setConfidentialCategoryCode("PVT");
		ratingsHistory.add(historyPvt);
		
		historyConf = new EntityRatingsHistory();
		historyConf.setConfidentialityInd("Y");
		historyConf.setConfidentialCategoryCode("CIR");
		ratingsHistory.add(historyConf);
		
		userEntitlement = new HashMap<String, List<Long>>();
		List<Long> osslist = new ArrayList<Long>();
		osslist.add(1L);
		osslist.add(90L);
		List<Long> entityList = new ArrayList<Long>();
		entityList.add(4004341L);
		userEntitlement.put("ossList", osslist);
		userEntitlement.put("entitledEntities", entityList);
		
		ratingsHistoryTAC = new ArrayList<EntityRatingsHistoryTAC>();
		historyTAC = new EntityRatingsHistoryTAC();
		historyTAC.setEntityId(Long.valueOf(100751));
		historyTAC.setDebtTypeCode("TACASSESS");
		historyTAC.setRatingTypeCode("TACASSESS");
		historyTAC.setRatingTypeDescription("Foreign Currency LT");
		historyTAC.setRating("BBB-");
		historyTAC.setRatingDate(new Date(05/11/2023));
		historyTAC.setAction("Upgrade | CreditWatch/Outlook");
		historyTAC.setCreditwatchOutlook("Stable");
		historyTAC.setCreditwatchOutlookDate(new Date(05/11/2023));
		historyTAC.setRatingDetailId(Long.valueOf(42370608));
		historyTAC.setDataAdminDate(new Date(05/11/2023));
		historyTAC.setConfidentialityInd(null);
		historyTAC.setConfidentialCategoryCode(null);
		ratingsHistoryTAC.add(historyTAC);
		
		ratingsHistoryTACPub = new ArrayList<EntityRatingsHistTACPub>();
		historyTACPub = new EntityRatingsHistTACPub();
		historyTACPub.setEntityId(Long.valueOf(100751));
		historyTACPub.setDebtTypeCode("TACASSESS");
		historyTACPub.setRatingTypeCode("TACASSESS");
		historyTACPub.setRatingTypeDescription("Foreign Currency LT");
		historyTACPub.setRating("BBB-");
		historyTACPub.setRatingDate(new Date(05/11/2023));
		historyTACPub.setAction("Upgrade | CreditWatch/Outlook");
		historyTACPub.setCreditwatchOutlook("Stable");
		historyTACPub.setCreditwatchOutlookDate(new Date(05/11/2023));
		historyTACPub.setRatingDetailId(Long.valueOf(42370608));
		historyTACPub.setDataAdminDate(new Date(05/11/2023));
		ratingsHistoryTACPub.add(historyTACPub);
		
	}
	
	@Test
	public void getEntityRatingsHistoryTest() {
		System.out.println("@EntityRatingsHistoryServiceTest: In getEntityRatingsHistoryTest method");
		
		Long entityId = Long.valueOf(100751);
		String debtTypeCode = "ICR";
		String ratingTypeCode = "FCLONG";
		Long snlId = Long.valueOf(4004341);
		Integer privConfOssCheck = 1;
		Integer entityEntitlementCheck = 1;
		
		List<EntityRatingsHistory> erh = new ArrayList<EntityRatingsHistory>();
		when(userEntitlementCheck.entitlementChecksForUser("authHeader")).thenReturn(userEntitlement);
		when(userEntitlementCheck.isUserEntitledToPrivateRatings(userEntitlement, "authHeader")).thenReturn(privConfOssCheck);
		when(userEntitlementCheck.isUserEntitledToEntity(snlId, userEntitlement)).thenReturn(entityEntitlementCheck);
		when(entityRatingsHistoryDao.getEntityRatingsHistory(entityId, debtTypeCode, ratingTypeCode)).thenReturn(ratingsHistory);
		erh = entityRatingsHistoryService.getEntityRatingsHistory(entityId, debtTypeCode, ratingTypeCode, snlId, "authHeader");
		assertEquals(erh, ratingsHistory);
	}
	
	@Test
	public void getPublicEntityRatingsHistoryTACTest() {
		System.out.println("@EntityRatingsHistoryServiceTest: In getEntityRatingsHistoryTACTest method");
		
		Long entityId = Long.valueOf(100751);
		String debtTypeCode = "TACASSESS";
		String ratingTypeCode = "TACASSESS";
		Long snlId = Long.valueOf(4004341);
		Long pcFlag = 1L;
		Integer privConfOssCheck = 1;
		Integer entityEntitlementCheck = 1;
		
		List<EntityRatingsHistoryTAC> erh = null;
		when(userEntitlementCheck.entitlementChecksForUser("authHeader")).thenReturn(userEntitlement);
		when(userEntitlementCheck.isUserEntitledToPrivateRatings(userEntitlement, "authHeader")).thenReturn(privConfOssCheck);
		when(userEntitlementCheck.isUserEntitledToEntity(snlId, userEntitlement)).thenReturn(entityEntitlementCheck);
		when(entityRatingsHistoryDao.getEntityRatingsHistoryTAC(entityId, debtTypeCode, ratingTypeCode)).thenReturn(ratingsHistoryTAC);
		erh = entityRatingsHistoryService.getEntityRatingsHistoryTAC(entityId, debtTypeCode, ratingTypeCode, snlId,pcFlag,"authHeader");
		assertEquals(erh, ratingsHistoryTAC);
	}

	@Test
	public void getEntityRatingsHistTACPubTest() {
		System.out.println("@EntityRatingsHistoryServiceTest: In getEntityRatingsHistoryTACPubTest method");
		
		Long entityId = Long.valueOf(100751);
		String debtTypeCode = "TACASSESS";
		String ratingTypeCode = "TACASSESS";
		Long snlId = Long.valueOf(4004341);
		Long pcFlag = 0L;
		
		List<EntityRatingsHistoryTAC> erh = null;
		when(entityRatingsHistoryDao.getEntityRatingsHistTACPub(entityId, debtTypeCode, ratingTypeCode)).thenReturn(ratingsHistoryTACPub);
		erh = entityRatingsHistoryService.getEntityRatingsHistoryTAC(entityId, debtTypeCode, ratingTypeCode, snlId,pcFlag,"authHeader");
		
		assertEquals(erh, ratingsHistoryTAC);
	}
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\test\java\com\spglobal\ratings\ratingsdata\service\EntityRatingsPublicServiceTest.java

package com.spglobal.ratings.ratingsdata.service;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;

import java.sql.Date;
import java.util.ArrayList;
import java.util.List;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.test.context.junit.jupiter.SpringExtension;

import com.spglobal.ratings.ratingsdata.dao.EntityRatingsPublicDao;
import com.spglobal.ratings.ratingsdata.entity.CLOABSContacts;
import com.spglobal.ratings.ratingsdata.entity.EntityRatingsPublic;
import com.spglobal.ratings.ratingsdata.util.RatingsDataUtil;

@ExtendWith({SpringExtension.class, MockitoExtension.class})
public class EntityRatingsPublicServiceTest {
	
	@InjectMocks
	EntityRatingsPublicService entityRatingsService;
	
	@Mock
	RatingsDataUtil ratingsUtil;
	
	@Mock
	EntityRatingsPublicDao entityRatingsDao;
	
	List<EntityRatingsPublic> entityRatings = null;
	EntityRatingsPublic er;
	
	@BeforeEach
	public void init() throws Exception {
		
		MockitoAnnotations.initMocks(this);
		List<CLOABSContacts> contactsList = new ArrayList<CLOABSContacts>();
		entityRatings = new ArrayList<EntityRatingsPublic>();
		er = new EntityRatingsPublic();
		er.setEntityId(Long.valueOf(100751));
		er.setDebtTypeCode("ICR");
		er.setDebtTypeDesc("Issuer Credit Rating");
		er.setRatingTypeCode("FCLONG");
		er.setRatingTypeDesc("Foreign Currency LT");
		er.setCurrentRatingSymbol("BBB-");
		er.setRatingDate(new Date(04/28/2023));
		er.setLastReviewDate(new Date(04/28/2023));
		er.setRegulatoryIndicator("EE|UKE");
		er.setAction("Upgrade | CreditWatch/Outlook");
		er.setLatestNonAffirmCWOL("Stable");
		er.setLatestNonAffirmCWOLDate(new Date(04/28/2023));
		er.setSrdCurrInd("Y");
		er.setRatingDetailId(Long.valueOf(42370608));
		er.setDataAdminDate(new Date(04/28/2023));
		er.setDebtTypeSortOrder(3);
		er.setDerivedDebtTypeSortOrder(3);
		er.setLongShortInd("L");
		er.setRatingTypeSortOrder(Long.valueOf(1));
		er.setRating_id(Long.valueOf(100751));
		er.setPrimarySectorCode("GLOBISS");
		er.setPrimarySubSectorCode("CORP");
		entityRatings.add(er);
	}
	
	@Test
	public void getPublicEntityRatingsTest() {
		System.out.println("@EntityRatingsPublicServiceTest: In getPublicEntityRatingsTest method");
		Long entityId = Long.valueOf(100751);
		
		List<EntityRatingsPublic> e = new ArrayList<EntityRatingsPublic>();
		when(entityRatingsDao.getPublicEntityRatings(entityId)).thenReturn(entityRatings);
		e = entityRatingsService.getPublicEntityRatings(entityId);
		assertEquals(e, entityRatings);
	}
	
	@Test
	public void getPublicEntityRatingDetailsTest() {
		System.out.println("@EntityRatingsPublicServiceTest: In getPublicEntityRatingDetailsTest method");
		Long entityId = Long.valueOf(100751);
		Long ratingDetailId = Long.valueOf(42370608);
		
		EntityRatingsPublic e = new EntityRatingsPublic();
		when(entityRatingsDao.getPublicEntityRatingDetails(entityId, ratingDetailId)).thenReturn(er);
		e = entityRatingsService.getPublicEntityRatingDetails(entityId, ratingDetailId);
		assertEquals(e, er);
	}

}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\test\java\com\spglobal\ratings\ratingsdata\service\EntityRatingsServiceTest.java

package com.spglobal.ratings.ratingsdata.service;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;

import java.sql.Date;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.test.context.junit.jupiter.SpringExtension;

import com.spglobal.ratings.ratingsdata.dao.EntityRatingsDao;
import com.spglobal.ratings.ratingsdata.entity.EntityRatings;
import com.spglobal.ratings.ratingsdata.model.RatingsData;
import com.spglobal.ratings.ratingsdata.util.RatingsDataUtil;

@ExtendWith({SpringExtension.class, MockitoExtension.class})
public class EntityRatingsServiceTest {
	
	@InjectMocks
	EntityRatingsService entityRatingsService;
	
	@Mock
	RatingsDataUtil ratingsUtil;
	
	@Mock
	EntityRatingsDao entityRatingsDao;
	
	@Mock
	UserEntitlementCheckImpl userEntitlementCheck;
	
	List<EntityRatings> entityRatings = null;
	EntityRatings erPub;
	EntityRatings erPvt;
	EntityRatings erConf;
	Map<String,List<Long>> userEntitlement = null;
	
	@BeforeEach
	public void init() throws Exception {
		
		MockitoAnnotations.initMocks(this);
		
		entityRatings = new ArrayList<EntityRatings>();
		erPub = new EntityRatings();
		erPvt = new EntityRatings();
		erConf = new EntityRatings();
		erPub.setEntityId(Long.valueOf(100751));
		erPub.setDebtTypeCode("ICR");
		erPub.setDebtTypeDesc("Issuer Credit Rating");
		erPub.setRatingTypeCode("FCLONG");
		erPub.setRatingTypeDesc("Foreign Currency LT");
		erPub.setCurrentRatingSymbol("BBB-");
		erPub.setRatingDate(new Date(04/28/2023));
		erPub.setLastReviewDate(new Date(04/28/2023));
		erPub.setRegulatoryIndicator("EE|UKE");
		erPub.setAction("Upgrade | CreditWatch/Outlook");
		erPub.setLatestNonAffirmCWOL("Stable");
		erPub.setLatestNonAffirmCWOLDate(new Date(04/28/2023));
		erPub.setSrdCurrInd("Y");
		erPub.setRatingDetailId(Long.valueOf(42370608));
		erPub.setDataAdminDate(new Date(04/28/2023));
		erPub.setDebtTypeSortOrder(3);
		erPub.setDerivedDebtTypeSortOrder(3);
		erPub.setLongShortInd("L");
		erPub.setRatingTypeSortOrder(Long.valueOf(1));
		erPub.setRating_id(Long.valueOf(100751));
		erPub.setPrimarySectorCode("GLOBISS");
		erPub.setPrimarySubSectorCode("CORP");
		erPub.setConfidentialityInd("N");
		erPub.setConfidentialCategoryCode(null);
		
		erPvt.setConfidentialityInd("Y");
		erPvt.setConfidentialCategoryCode("PVT");
		
		erConf.setConfidentialityInd("Y");
		erConf.setConfidentialCategoryCode("CIR");
		
		entityRatings.add(erPub);
		entityRatings.add(erPvt);
		entityRatings.add(erConf);
		
		userEntitlement = new HashMap<String, List<Long>>();
		List<Long> osslist = new ArrayList<Long>();
		osslist.add(1L);
		osslist.add(90L);
		List<Long> entityList = new ArrayList<Long>();
		entityList.add(4004341L);
		userEntitlement.put("ossList", osslist);
		userEntitlement.put("entitledEntities", entityList);
	}
	
	@Test
	public void getEntityRatingsTest() {
		System.out.println("@EntityRatingsServiceTest: In getEntityRatingsTest method");
		Long entityId = Long.valueOf(100751);
		Long snlId = Long.valueOf(4004341);
		Integer privConfOssCheck = 1;
		Integer entityEntitlementCheck = 1;
		
//		List<EntityRatings> e = new ArrayList<EntityRatings>();
		RatingsData e = new RatingsData();
		when(userEntitlementCheck.entitlementChecksForUser("authHeader")).thenReturn(userEntitlement);
		when(userEntitlementCheck.isUserEntitledToPrivateRatings(userEntitlement, "authHeader")).thenReturn(privConfOssCheck);
		when(userEntitlementCheck.isUserEntitledToEntity(snlId, userEntitlement)).thenReturn(entityEntitlementCheck);
		when(entityRatingsDao.getEntityRatings(entityId)).thenReturn(entityRatings);
		e = entityRatingsService.getEntityRatings(entityId, snlId, "authHeader");
		assertEquals(e.getEntityRatings(), entityRatings);
	}
	
	@Test
	public void getEntityRatingDetailsPublicTest() {
		System.out.println("@EntityRatingsServiceTest: In getEntityRatingDetailsPublicTest method");
		Long entityId = Long.valueOf(100751);
		Long ratingDetailId = Long.valueOf(42370608);
		Long snlId = Long.valueOf(4004341);
		Integer privConfOssCheck = 1;
		Integer entityEntitlementCheck = 1;
		
		EntityRatings e = new EntityRatings();
		when(entityRatingsDao.getEntityRatingDetails(entityId, ratingDetailId)).thenReturn(erPub);
		when(userEntitlementCheck.entitlementChecksForUser("authHeader")).thenReturn(userEntitlement);
		when(userEntitlementCheck.isUserEntitledToPrivateRatings(userEntitlement, "authHeader")).thenReturn(privConfOssCheck);
		when(userEntitlementCheck.isUserEntitledToEntity(snlId, userEntitlement)).thenReturn(entityEntitlementCheck);
		e = entityRatingsService.getEntityRatingDetails(entityId, ratingDetailId, snlId, "authHeader");
		assertEquals(e, erPub);
	}
	
	@Test
	public void getEntityRatingDetailsPrivateTest() {
		System.out.println("@EntityRatingsServiceTest: In getEntityRatingDetailsPrivateTest method");
		Long entityId = Long.valueOf(100751);
		Long ratingDetailId = Long.valueOf(42370608);
		Long snlId = Long.valueOf(4004341);
		Integer privConfOssCheck = 1;
		Integer entityEntitlementCheck = 1;
		
		EntityRatings e = new EntityRatings();
		when(entityRatingsDao.getEntityRatingDetails(entityId, ratingDetailId)).thenReturn(erPvt);
		when(userEntitlementCheck.entitlementChecksForUser("authHeader")).thenReturn(userEntitlement);
		when(userEntitlementCheck.isUserEntitledToPrivateRatings(userEntitlement, "authHeader")).thenReturn(privConfOssCheck);
		when(userEntitlementCheck.isUserEntitledToEntity(snlId, userEntitlement)).thenReturn(entityEntitlementCheck);
		e = entityRatingsService.getEntityRatingDetails(entityId, ratingDetailId, snlId, "authHeader");
		assertEquals(e, erPvt);
	}
	
	@Test
	public void getEntityRatingDetailsConfidentialTest() {
		System.out.println("@EntityRatingsServiceTest: In getEntityRatingDetailsConfidentialTest method");
		Long entityId = Long.valueOf(100751);
		Long ratingDetailId = Long.valueOf(42370608);
		Long snlId = Long.valueOf(4004341);
		Integer privConfOssCheck = 1;
		Integer entityEntitlementCheck = 1;
		
		EntityRatings e = new EntityRatings();
		when(entityRatingsDao.getEntityRatingDetails(entityId, ratingDetailId)).thenReturn(erConf);
		when(userEntitlementCheck.entitlementChecksForUser("authHeader")).thenReturn(userEntitlement);
		when(userEntitlementCheck.isUserEntitledToPrivateRatings(userEntitlement, "authHeader")).thenReturn(privConfOssCheck);
		when(userEntitlementCheck.isUserEntitledToEntity(snlId, userEntitlement)).thenReturn(entityEntitlementCheck);
		e = entityRatingsService.getEntityRatingDetails(entityId, ratingDetailId, snlId, "authHeader");
		assertEquals(e, erConf);
	}

}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\test\java\com\spglobal\ratings\ratingsdata\service\FinancialRatingServiceTest.java

package com.spglobal.ratings.ratingsdata.service;

import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;

import com.spglobal.ratings.ratingsdata.dao.FinancialRatingDao;
import com.spglobal.ratings.ratingsdata.entity.FinancialCustomRatingEntity;
import com.spglobal.ratings.ratingsdata.entity.FinancialLTMRatingEntity;
import com.spglobal.ratings.ratingsdata.entity.FinancialPeers;
import com.spglobal.ratings.ratingsdata.entity.FinancialQuarterlyRatingEntity;
import com.spglobal.ratings.ratingsdata.entity.MNemonicDetailsEntity;
import com.spglobal.ratings.ratingsdata.entity.PeriodDetailsEntity;
import com.spglobal.ratings.ratingsdata.model.FinancialData;
import com.spglobal.ratings.ratingsdata.repository.ElementMasterRepository;

@ContextConfiguration(classes = { FinancialRatingService.class })
@ExtendWith(MockitoExtension.class)
public class FinancialRatingServiceTest {

	@InjectMocks
	private FinancialRatingServiceImpl financialRatingService;

	@Mock
	FinancialRatingDao financialRatingDao;

	@Mock
	ElementMasterRepository elementMasterRepository;

	@Mock
	CurrencyExchangeRateService currencyExchangeRateService;

	@Test
	void testGetMNemonic() throws Exception {
		List<MNemonicDetailsEntity> resp = financialRatingService.getMNemonic("Corporate.adjusted","EUR");
		assertNotNull(resp);
	}

	@Test
	void testGetFinancialPeriods() throws Exception {
		List<PeriodDetailsEntity> resp = financialRatingService.getFinancialPeriods(123l, Collections.emptyList());
		assertNotNull(resp);
	}

	@Test
	void testGetFinancialRatingDetails() throws Exception {
		Collection<HashMap<String, Object>> resp = financialRatingService.getFinancialRatingDetails(123l,
				"corporate.adjusted", "annual","USD");
		assertNotNull(resp);
	}
	
	@Test
	void testGetFinancialRatingDetailsNonEmpty() throws Exception {
		List<FinancialData>  financialData = new ArrayList<FinancialData>();
		FinancialLTMRatingEntity entity1 = new FinancialLTMRatingEntity();
		entity1.setId(123l);
		entity1.setCoreId(123l);
		entity1.setMagnitude("$M");
		entity1.setFiscalYear("2023");
		entity1.setFinPeriodId("2023");
		entity1.setDataPointValue(123d);
		entity1.setDataElementCd("2023");
		entity1.setReportedCurrency("USD");
		FinancialLTMRatingEntity entity2 = new FinancialLTMRatingEntity();
		entity2.setId(1234l);
		entity2.setCoreId(1234l);
		entity2.setFiscalYear("2023");
		entity2.setMagnitude("$M");
		entity2.setFinPeriodId("2024");
		entity2.setDataPointValue(1234d);
		entity2.setDataElementCd("2024");
		entity2.setReportedCurrency("INR");
		financialData.add(entity1);
		financialData.add(entity2);
		when(financialRatingDao.getFinancialRatingDetails(123l, "corporate.adjusted")).thenReturn(financialData);
		Collection<HashMap<String, Object>> resp = financialRatingService.getFinancialRatingDetails(123l,
				"corporate.adjusted", "annual","USD");
		assertNotNull(resp);
	}

	@Test
	void testGetFinancialRatingDetailsWithEmptyPeroidType() throws Exception {
		Collection<HashMap<String, Object>> resp = financialRatingService.getFinancialRatingDetails(123l,
				"corporate.adjusted", "","USD");
		assertNotNull(resp);
	}

	@Test
	void testGetFinancialRatingDetailsQuarterly() throws Exception {
		Collection<HashMap<String, Object>> resp = financialRatingService.getFinancialRatingDetails(123l,
				"corporate.adjusted", "quarterly","USD");
		assertNotNull(resp);
	}
	
	@Test
	void testGetFinancialRatingDetailsQuarterlyNonNull() throws Exception {
		List<FinancialData>  financialData = new ArrayList<FinancialData>();
		FinancialQuarterlyRatingEntity entity1 = new FinancialQuarterlyRatingEntity();
		entity1.setCoreId(123l);
		entity1.setId(123l);
		entity1.setReportedCurrency("USD");
		entity1.setMagnitude("$M");
		entity1.setFiscalYear("2023");
		entity1.setFinPeriodId("2023");
		entity1.setDataPointValue(123d);
		entity1.setDataElementCd("2023");
		FinancialQuarterlyRatingEntity entity2 = new FinancialQuarterlyRatingEntity();
		entity2.setCoreId(1234l);
		entity2.setId(1234l);
		entity2.setMagnitude("$M");
		entity2.setReportedCurrency("INR");
		entity2.setFinPeriodId("2024");
		entity2.setDataPointValue(1234d);
		entity2.setDataElementCd("2024");

		financialData.add(entity1);
		financialData.add(entity2);
		when(financialRatingDao.getFinancialQuartelyRatingDetails(123l, "corporate.adjusted")).thenReturn(financialData);
		Collection<HashMap<String, Object>> resp = financialRatingService.getFinancialRatingDetails(123l,
				"corporate.adjusted", "quarterly","USD");
		assertNotNull(resp);
	}
	
	@Test
	void testGetCustomFinancialRatingDetails() throws Exception {
		Collection<HashMap<String, Object>> resp = financialRatingService.getCustomFinancialRatingDetails(123l,"corporate.adjusted", Collections.emptyList(),"USD");
		assertNotNull(resp);
	}
	
	@Test
	void testGetFinancialRatingDetailsNonEmptyAnnually() throws Exception {
		List<FinancialData>  financialData = new ArrayList<FinancialData>();
		FinancialData entity1 = new FinancialData();
		entity1.setId(123l);
		entity1.setCoreId(123l);
		entity1.setMagnitude("$M1");
		entity1.setFiscalYear("2023");
		entity1.setFinPeriodId("2023");
		entity1.setDataPointValue(123d);
		entity1.setDataElementCd("2023");
		entity1.setReportedCurrency("USD");
		FinancialData entity2 = new FinancialData();
		entity2.setId(1234l);
		entity2.setCoreId(1234l);
		entity2.setFiscalYear("2024");
		entity2.setMagnitude("$M1");
		entity2.setFinPeriodId("2024");
		entity2.setDataPointValue(1234d);
		entity2.setDataElementCd("2024");
		entity2.setReportedCurrency("INR");
		FinancialData entity3 = new FinancialData();
		entity3.setId(1234l);
		entity3.setCoreId(1234l);
		entity3.setFiscalYear("2022");
		entity3.setMagnitude("$M1");
		entity3.setFinPeriodId("2022");
		entity3.setDataPointValue(12345d);
		entity3.setDataElementCd("2022");
		entity3.setReportedCurrency("INR");
		financialData.add(entity1);
		financialData.add(entity2);
		financialData.add(entity3);
		Map<String, Double> dataElementValue = new HashMap<String, Double>();
		dataElementValue.put("2024", 123d);
		dataElementValue.put("2022", null);
		Map<String, Map<String, Double>> map1 = new HashMap<String, Map<String, Double>>();
		map1.put("2023", null);
		map1.put("2024", dataElementValue);
		map1.put("2022", dataElementValue);
		when(financialRatingDao.getFinancialRatingDetails(123l, "corporate.adjusted")).thenReturn(financialData);
		when(currencyExchangeRateService.getMagnitudeConvertedFinData(Collections.emptyMap(), "USD")).thenReturn(map1);
		Collection<HashMap<String, Object>> resp = financialRatingService.getFinancialRatingDetails(123l,"corporate.adjusted", "annual","USD");
		assertNotNull(resp);
	}
	
	@Test
	void testGetFinancialRatingDetailsNonEmptyQuarterly() throws Exception {
		List<FinancialData>  financialData = new ArrayList<FinancialData>();
		FinancialData entity1 = new FinancialData();
		entity1.setId(123l);
		entity1.setCoreId(123l);
		entity1.setMagnitude("$M1");
		entity1.setFiscalYear("2023");
		entity1.setFinPeriodId("2023");
		entity1.setDataPointValue(123d);
		entity1.setDataElementCd("2023");
		entity1.setReportedCurrency("USD");
		FinancialData entity2 = new FinancialData();
		entity2.setId(1234l);
		entity2.setCoreId(1234l);
		entity2.setFiscalYear("2024");
		entity2.setMagnitude("$M1");
		entity2.setFinPeriodId("2024");
		entity2.setDataPointValue(1234d);
		entity2.setDataElementCd("2024");
		entity2.setReportedCurrency("INR");
		FinancialData entity3 = new FinancialData();
		entity3.setId(1234l);
		entity3.setCoreId(1234l);
		entity3.setFiscalYear("2022");
		entity3.setMagnitude("$M1");
		entity3.setFinPeriodId("2022");
		entity3.setDataPointValue(12345d);
		entity3.setDataElementCd("2022");
		entity3.setReportedCurrency("INR");
		financialData.add(entity1);
		financialData.add(entity2);
		financialData.add(entity3);
		FinancialData entity4 = new FinancialData();
		entity4.setId(2l);
		entity4.setCoreId(1234l);
		entity4.setFiscalYear("2021");
		entity4.setMagnitude("$M");
		entity4.setFinPeriodId("2021");
		entity4.setDataPointValue(12345d);
		entity4.setDataElementCd("");
		entity4.setReportedCurrency("INR");
		financialData.add(entity1);
		financialData.add(entity2);
		financialData.add(entity3);
		financialData.add(entity4);
		Map<String, Double> dataElementValue = new HashMap<String, Double>();
		dataElementValue.put("2024", 123d);
		dataElementValue.put("2022", null);
		Map<String, Map<String, Double>> map1 = new HashMap<String, Map<String, Double>>();
		map1.put("2023", null);
		map1.put("2024", dataElementValue);
		map1.put("2022", dataElementValue);
		when(financialRatingDao.getFinancialQuartelyRatingDetails(123l, "corporate.adjusted")).thenReturn(financialData);
		when(currencyExchangeRateService.getMagnitudeConvertedFinData(Collections.emptyMap(), "USD")).thenReturn(map1);
		Collection<HashMap<String, Object>> resp = financialRatingService.getFinancialRatingDetails(123l,"corporate.adjusted", "quarterly","USD");
		assertNotNull(resp);
	}
	
	@Test
	void testGetFinancialRatingDetailsNonEmptyAnnually1() throws Exception {
		List<FinancialData>  financialData = new ArrayList<FinancialData>();
		FinancialData entity1 = new FinancialData();
		entity1.setId(123l);
		entity1.setCoreId(123l);
		entity1.setMagnitude("$M1");
		entity1.setFiscalYear("2023");
		entity1.setFinPeriodId("2023");
		entity1.setDataPointValue(123d);
		entity1.setDataElementCd("2023");
		entity1.setReportedCurrency("USD");
		FinancialData entity2 = new FinancialData();
		entity2.setId(1234l);
		entity2.setCoreId(1234l);
		entity2.setFiscalYear("2024");
		entity2.setMagnitude("$M1");
		entity2.setFinPeriodId("2024");
		entity2.setDataPointValue(1234d);
		entity2.setDataElementCd("2024");
		entity2.setReportedCurrency("INR");
		FinancialData entity3 = new FinancialData();
		entity3.setId(1234l);
		entity3.setCoreId(1234l);
		entity3.setFiscalYear("2022");
		entity3.setMagnitude("$M1");
		entity3.setFinPeriodId("2022");
		entity3.setDataPointValue(12345d);
		entity3.setDataElementCd("2022");
		entity3.setReportedCurrency("INR");
		financialData.add(entity1);
		financialData.add(entity2);
		financialData.add(entity3);
		Map<String, Double> dataElementValue = new HashMap<String, Double>();
		dataElementValue.put("2024", 123d);
		dataElementValue.put("2022", null);
		Map<String, Map<String, Double>> map1 = new HashMap<String, Map<String, Double>>();
		map1.put("2023", null);
		map1.put("2024", dataElementValue);
		map1.put("2022", dataElementValue);
		when(financialRatingDao.getFinancialQuartelyRatingDetails(123l, "corporate.adjusted")).thenReturn(financialData);
//		when(currencyExchangeRateService.getMagnitudeConvertedFinData(Collections.emptyMap(), "USD")).thenReturn(map1);
		Collection<HashMap<String, Object>> resp = financialRatingService.getFinancialRatingDetails(123l,"corporate.adjusted", "quarterly","Reported Currency");
		assertNotNull(resp);
	}

	@Test
	void testGetCustomFinancialRatingDetailsNotEmpty() throws Exception {
		List<FinancialData>  financialData = new ArrayList<FinancialData>();
		FinancialCustomRatingEntity entity1 = new FinancialCustomRatingEntity();
		entity1.setId(123l);
		entity1.setCoreId(123l);
		entity1.setFiscalYear("2023");
		entity1.setMagnitude("$M");
		entity1.setReportedCurrency("USD");
		entity1.setFinPeriodId("2023");
		entity1.setDataPointValue(123d);
		entity1.setDataElementCd("2023");
		FinancialCustomRatingEntity entity2 = new FinancialCustomRatingEntity();
		entity2.setId(1234l);
		entity2.setCoreId(1234l);
		entity2.setMagnitude("$M");
		entity2.setFiscalYear("2023");
		entity2.setReportedCurrency("INR");
		entity2.setFinPeriodId("2024");
		entity2.setDataPointValue(1234d);
		entity2.setDataElementCd("2024");
		financialData.add(entity1);
		financialData.add(entity2);
		when(financialRatingDao.getCustomFinancialRatingDetails(123l,"corporate.adjusted", Collections.emptyList())).thenReturn(financialData);
		Collection<HashMap<String, Object>> resp = financialRatingService.getCustomFinancialRatingDetails(123l,"corporate.adjusted", Collections.emptyList(),"USD");
		assertNotNull(resp);
	}

	@Test
	void testGetFinancialPeers() throws Exception {
		List<String> entitys = Arrays.asList("379507", "384019");
		String template = "Financial.all";
		String currency = "INR";
		List<FinancialPeers> resp = financialRatingService.getFinancialPeers(entitys, template, currency);
		assertNotNull(resp);
	}
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\test\java\com\spglobal\ratings\ratingsdata\service\InvestorSentimentSectorServiceTest.java

package com.spglobal.ratings.ratingsdata.service;

import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.mockito.ArgumentMatchers.anyLong;
import static org.mockito.ArgumentMatchers.anyString;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.test.context.junit.jupiter.SpringExtension;

import com.spglobal.ratings.ratingsdata.entity.CriteriaTypeLookupEntity;
import com.spglobal.ratings.ratingsdata.entity.InvestorSentimentIndustry;
import com.spglobal.ratings.ratingsdata.entity.InvestorSentimentSectors;
import com.spglobal.ratings.ratingsdata.model.InvestorSentimentSectorResponse;
import com.spglobal.ratings.ratingsdata.repository.InvestorSentimentIndustryRepository;
import com.spglobal.ratings.ratingsdata.repository.InvestorSentimentSectorRepository;

@ExtendWith({SpringExtension.class, MockitoExtension.class})
public class InvestorSentimentSectorServiceTest {

	@InjectMocks
	InvestorSentimentSectorService investorSentimentService;
	
	@MockBean
	InvestorSentimentSectorRepository sectorRepository;
	
	@MockBean
	InvestorSentimentIndustryRepository industryReposiotry;
	
	List<InvestorSentimentSectors> sectorsList = new ArrayList<InvestorSentimentSectors>();
	InvestorSentimentIndustry deafualtIndustry = null;
	
	@BeforeEach
	public void init() throws Exception {
		
		MockitoAnnotations.initMocks(this);
		InvestorSentimentSectors sectors = new InvestorSentimentSectors();
		sectors.setIndustryId(243);
		sectors.setSectorId(0);
		sectors.setParentSectorId(null);
		sectors.setSectorName("Corporates");
		sectors.setParentSectorName(null);
		sectorsList.add(sectors);
		InvestorSentimentSectorResponse response = new InvestorSentimentSectorResponse();
		deafualtIndustry = new InvestorSentimentIndustry();
		deafualtIndustry.setIndustryId(243);
		deafualtIndustry.setSectorId(0);
		deafualtIndustry.setSectorName("Corporates");
		response.setSectorsList(sectorsList);
		response.setSectorDropdwnSelect(deafualtIndustry);
	}

	@Test
	public void test_sectors() throws Exception {		
		when(sectorRepository.findAll()).thenReturn(sectorsList);
		List<InvestorSentimentSectors> sectorsExp =  investorSentimentService.getSectorsList("1",110170L);
		assertNotNull(sectorsExp);
	}
	
		
	@Test
	public void test_getSectorAndIndustry() throws Exception {		
		when(industryReposiotry.findSectorIndustry(123123L)).thenReturn(deafualtIndustry);
		InvestorSentimentSectorResponse invResp = investorSentimentService.getSectorsAndDefaultIndustry("1",110170L);
		assertNotNull(invResp);
	}
	


	@Test
	public void test_getSectorAndIndustry_profile3() throws Exception {		
		InvestorSentimentSectorResponse invResp = investorSentimentService.getSectorsAndDefaultIndustry("6",110170L);
		assertNotNull(invResp);
	}
	
	@Test
	public void test_getSectorAndIndustry_profile() throws Exception {		
		deafualtIndustry = new InvestorSentimentIndustry();
		deafualtIndustry.setIndustryId(243);
		deafualtIndustry.setSectorId(0);
		deafualtIndustry.setSectorName("Corporates");
		when(industryReposiotry.findSectorIndustry(110170L)).thenReturn(deafualtIndustry);
		InvestorSentimentSectorResponse invResp = investorSentimentService.getSectorsAndDefaultIndustry("2",110170L);
		assertNotNull(invResp);
	}

	@Test
	public void test_getSectorAndIndustry_appp() throws Exception {
		deafualtIndustry = new InvestorSentimentIndustry();
		deafualtIndustry.setIndustryId(243);
		deafualtIndustry.setSectorId(0);
		deafualtIndustry.setSectorName("Corporates");
		when(industryReposiotry.findSectorIndustry(110170L)).thenReturn(deafualtIndustry);
		InvestorSentimentSectorResponse invResp = investorSentimentService.getSectorsAndDefaultIndustrByApp("7",110170L);
		assertNotNull(invResp);
	}

	@Test
	public void test_getSectorAndIndustry_apppABS() throws Exception {
		deafualtIndustry = new InvestorSentimentIndustry();
		deafualtIndustry.setIndustryId(243);
		deafualtIndustry.setSectorId(0);
		deafualtIndustry.setSectorName("Corporates");
		when(industryReposiotry.findSectorIndustry(110170L)).thenReturn(deafualtIndustry);
		InvestorSentimentSectorResponse invResp = investorSentimentService.getSectorsAndDefaultIndustrByApp("8",110170L);
		assertNotNull(invResp);
	}
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\test\java\com\spglobal\ratings\ratingsdata\service\InvestorSentimentServiceTest.java

package com.spglobal.ratings.ratingsdata.service;

import com.spglobal.ratings.ratingsdata.dao.InvestorSentimentDAO;
import com.spglobal.ratings.ratingsdata.entity.InvestorSentimentCommentry;
import com.spglobal.ratings.ratingsdata.entity.InvestorSentimentNumbersRecentStudies;
import com.spglobal.ratings.ratingsdata.repository.InvestorSentimentCommentryRepository;
import com.spglobal.ratings.ratingsdata.util.RatingsDataUtil;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import java.util.ArrayList;
import java.util.List;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.when;

public class InvestorSentimentServiceTest {

    @InjectMocks
    private InvestorSentimentServiceImpl investorSentimentService;

    @Mock
    private InvestorSentimentDAO investorSentimentDAO;

    @Mock
    private RatingsDataUtil ratingsDataUtil;

    @BeforeEach
    public void setup() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    void testGetInvestorSentimentNumbersByIndustryIdAndType() throws Exception {
        Long industryId = 1L;
        String type = "NUMBERS";
        List<InvestorSentimentNumbersRecentStudies> expectedInvestorSentimentNumbersRecentStudiesList = new ArrayList<>();
        when(investorSentimentDAO.getInvestorSentimentNumbersByIndustryIdAndType(industryId, type)).thenReturn(expectedInvestorSentimentNumbersRecentStudiesList);
        List<InvestorSentimentNumbersRecentStudies> result = investorSentimentService.getInvestorSentimentNumbersByIndustryIdAndType(industryId, type);
        assertEquals(expectedInvestorSentimentNumbersRecentStudiesList, result);
    }

    @Test
    void testGetInvestorSentimentNumbersByIndustryIdAndTypeException() {
        Long industryId = 1L;
        String type = "NUMBERS";
        when(investorSentimentDAO.getInvestorSentimentNumbersByIndustryIdAndType(any(), any())).thenThrow(new RuntimeException("Exception in DAO"));
        assertThrows(RuntimeException.class, ()->{investorSentimentService.getInvestorSentimentNumbersByIndustryIdAndType(industryId, type);});
    }

    @Test
    void testGetInvestorSentimentCommentryByIndustryId() throws Exception {
        Long industryId = 1L;
        List<InvestorSentimentCommentry> expectedInvestorSentimentCommentryList = new ArrayList<>();
        when(investorSentimentDAO.getInvestorSentimentCommentryByIndustryId(industryId)).thenReturn(expectedInvestorSentimentCommentryList);
        List<InvestorSentimentCommentry> result = investorSentimentService.getInvestorSentimentCommentryByIndustryId(industryId);
        assertEquals(expectedInvestorSentimentCommentryList, result);
    }

    @Test
    void testGetInvestorSentimentCommentryByIndustryIdException() {
        Long industryId = 1L;
        when(investorSentimentDAO.getInvestorSentimentCommentryByIndustryId(any())).thenThrow(new RuntimeException("Exception in DAO"));
        assertThrows(RuntimeException.class, ()->{investorSentimentService.getInvestorSentimentCommentryByIndustryId(industryId);});
    }
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\test\java\com\spglobal\ratings\ratingsdata\service\IssuesAndMaturitiesHistoryPublicServiceTest.java

package com.spglobal.ratings.ratingsdata.service;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;

import java.sql.Date;
import java.util.ArrayList;
import java.util.List;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.test.context.junit.jupiter.SpringExtension;

import com.spglobal.ratings.ratingsdata.dao.IssuesAndMaturitiesHistoryPublicDao;
import com.spglobal.ratings.ratingsdata.entity.IssuesAndMaturitiesHistoryPublic;
import com.spglobal.ratings.ratingsdata.util.RatingsDataUtil;

@ExtendWith({SpringExtension.class, MockitoExtension.class})
public class IssuesAndMaturitiesHistoryPublicServiceTest {
	
	@InjectMocks
	IssuesAndMaturitiesHistoryPublicService issuesAndMaturitiesHistoryPublicService;
	
	@Mock
	RatingsDataUtil ratingsUtil;
	
	@Mock
	IssuesAndMaturitiesHistoryPublicDao issuesAndMaturitiesHistoryPublicDao;
	
	List<IssuesAndMaturitiesHistoryPublic> issuesAndMaturitiesHistory = null;
	IssuesAndMaturitiesHistoryPublic history;
	
	@BeforeEach
	public void init() throws Exception {
		
		MockitoAnnotations.initMocks(this);
		
		issuesAndMaturitiesHistory = new ArrayList<IssuesAndMaturitiesHistoryPublic>();
		history = new IssuesAndMaturitiesHistoryPublic();
		history.setInstrumentId(Long.valueOf(1429537));
		history.setInstrumentDetailId(Long.valueOf(4750402));
		history.setRatingTypeCode("STDLONG");
		history.setRatingTypeDescription("Local Currency LT");
		history.setRating("BB");
		history.setRatingDate(new Date(06/06/2023));
		history.setAction("New Rating | CreditWatch/Outlook");
		history.setCreditwatchOutlook("Watch Pos");
		history.setCreditwatchOutlookDate(new Date(06/06/2023));
		history.setDebtTypeCode("SRUNSEC");
		history.setRatingDetailId(Long.valueOf(41412790));
		history.setDataAdminDate(new Date(06/06/2023));
		issuesAndMaturitiesHistory.add(history);
	}
	
	@Test
	public void getPublicIssuesAndMaturitiesHistoryTest() {
		System.out.println("@IssuesAndMaturitiesHistoryPublicServiceTest: In getPublicIssuesAndMaturitiesHistoryTest method");
		
		Long instrumentId = Long.valueOf(1429537);
		String ratingTypeCode = "STDLONG";
		Long instrumentDetailId = Long.valueOf(4750402);
		List<IssuesAndMaturitiesHistoryPublic> im = new ArrayList<IssuesAndMaturitiesHistoryPublic>();
		when(issuesAndMaturitiesHistoryPublicDao.getPublicIssuesAndMaturitiesHistory(instrumentId, ratingTypeCode, instrumentDetailId)).thenReturn(issuesAndMaturitiesHistory);
		im = issuesAndMaturitiesHistoryPublicService.getPublicIssuesAndMaturitiesHistory(instrumentId, ratingTypeCode, instrumentDetailId);
		assertEquals(im, issuesAndMaturitiesHistory);
	}

}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\test\java\com\spglobal\ratings\ratingsdata\service\IssuesAndMaturitiesHistoryServiceTest.java

package com.spglobal.ratings.ratingsdata.service;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;

import java.sql.Date;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.test.context.junit.jupiter.SpringExtension;

import com.spglobal.ratings.ratingsdata.dao.IssuesAndMaturitiesHistoryDao;
import com.spglobal.ratings.ratingsdata.entity.IssuesAndMaturitiesHistory;
import com.spglobal.ratings.ratingsdata.util.RatingsDataUtil;

@ExtendWith({SpringExtension.class, MockitoExtension.class})
public class IssuesAndMaturitiesHistoryServiceTest {
	
	@InjectMocks
	IssuesAndMaturitiesHistoryService issuesAndMaturtiesHistoryService;
	
	@Mock
	RatingsDataUtil ratingsUtil;
	
	@Mock
	IssuesAndMaturitiesHistoryDao issuesAndMaturitiesHistoryDao;
	
	@Mock
	UserEntitlementCheckImpl userEntitlementCheck;
	
	List<IssuesAndMaturitiesHistory> issuesAndMaturitiesHistory = null;
	IssuesAndMaturitiesHistory historyPub;
	IssuesAndMaturitiesHistory historyPvt;
	IssuesAndMaturitiesHistory historyConf;
	Map<String,List<Long>> userEntitlement = null;
	
	@BeforeEach
	public void init() throws Exception {
		
		MockitoAnnotations.initMocks(this);
		
		issuesAndMaturitiesHistory = new ArrayList<IssuesAndMaturitiesHistory>();
		historyPub = new IssuesAndMaturitiesHistory();
		historyPub.setInstrumentId(Long.valueOf(1429537));
		historyPub.setInstrumentDetailId(Long.valueOf(4750402));
		historyPub.setRatingTypeCode("STDLONG");
		historyPub.setRatingTypeDescription("Local Currency LT");
		historyPub.setRating("BB");
		historyPub.setRatingDate(new Date(06/06/2023));
		historyPub.setAction("New Rating | CreditWatch/Outlook");
		historyPub.setCreditwatchOutlook("Watch Pos");
		historyPub.setCreditwatchOutlookDate(new Date(06/06/2023));
		historyPub.setDebtTypeCode("SRUNSEC");
		historyPub.setRatingDetailId(Long.valueOf(41412790));
		historyPub.setDataAdminDate(new Date(06/06/2023));
		historyPub.setConfidentialityInd("N");
		historyPub.setConfidentialCategoryCode(null);
		issuesAndMaturitiesHistory.add(historyPub);
		
		historyPvt = new IssuesAndMaturitiesHistory();
		historyPvt.setConfidentialityInd("Y");
		historyPvt.setConfidentialCategoryCode("PVT");
		issuesAndMaturitiesHistory.add(historyPvt);
		
		historyConf = new IssuesAndMaturitiesHistory();
		historyConf.setConfidentialityInd("Y");
		historyConf.setConfidentialCategoryCode("CIR");
		issuesAndMaturitiesHistory.add(historyConf);
		
		userEntitlement = new HashMap<String, List<Long>>();
		List<Long> osslist = new ArrayList<Long>();
		osslist.add(1L);
		osslist.add(90L);
		List<Long> entityList = new ArrayList<Long>();
		entityList.add(4004341L);
		userEntitlement.put("ossList", osslist);
		userEntitlement.put("entitledEntities", entityList);
	}
	
	@Test
	public void getIssuesAndMaturitiesHistoryTest() {
		System.out.println("@IssuesAndMaturitiesHistoryServiceTest: In getIssuesAndMaturitiesHistoryTest method");
		
		Long instrumentId = Long.valueOf(1429537);
		String ratingTypeCode = "STDLONG";
		Long instrumentDetailId = Long.valueOf(4750402);
		Long snlId = Long.valueOf(4004341);
		Integer privConfOssCheck = 1;
		Integer entityEntitlementCheck = 1;
		
		List<IssuesAndMaturitiesHistory> im = new ArrayList<IssuesAndMaturitiesHistory>();
		when(userEntitlementCheck.entitlementChecksForUser("authHeader")).thenReturn(userEntitlement);
		when(userEntitlementCheck.isUserEntitledToPrivateRatings(userEntitlement, "authHeader")).thenReturn(privConfOssCheck);
		when(userEntitlementCheck.isUserEntitledToEntity(snlId, userEntitlement)).thenReturn(entityEntitlementCheck);
		when(issuesAndMaturitiesHistoryDao.getIssuesAndMaturitiesHistory(instrumentId, ratingTypeCode, instrumentDetailId)).thenReturn(issuesAndMaturitiesHistory);
		im = issuesAndMaturtiesHistoryService.getIssuesAndMaturitiesHistory(instrumentId, ratingTypeCode, instrumentDetailId, snlId, "authHeader");
		assertEquals(im, issuesAndMaturitiesHistory);
	}

}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\test\java\com\spglobal\ratings\ratingsdata\service\IssuesAndMaturitiesPublicServiceTest.java

package com.spglobal.ratings.ratingsdata.service;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;

import java.sql.Date;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.List;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.test.context.junit.jupiter.SpringExtension;

import com.spglobal.ratings.ratingsdata.dao.IssuesAndMaturitiesDao;
import com.spglobal.ratings.ratingsdata.dao.IssuesAndMaturitiesPublicDao;
import com.spglobal.ratings.ratingsdata.dao.IssuesMaturitiesUSPFPubDao;
import com.spglobal.ratings.ratingsdata.entity.IssuesAndMaturitiesPublic;
import com.spglobal.ratings.ratingsdata.entity.IssuesMaturitiesUSPFPub;
import com.spglobal.ratings.ratingsdata.model.DebtTypes;
import com.spglobal.ratings.ratingsdata.util.RatingsDataUtil;

@ExtendWith({SpringExtension.class, MockitoExtension.class})
public class IssuesAndMaturitiesPublicServiceTest {
	
	@InjectMocks
	IssuesAndMaturitiesPublicService issuesAndMaturitiesService;
	
	@Mock
	RatingsDataUtil ratingsUtil;
	
	@Mock
	IssuesAndMaturitiesPublicDao issuesAndMaturitiesPubDao;
	
	@Mock
	IssuesAndMaturitiesDao issuesAndMaturitiesDao;

	@Mock
	IssuesMaturitiesUSPFPubDao issuesMaturitiesUSPFPubDao;
	
	List<IssuesAndMaturitiesPublic> issuesAndMaturities;
	IssuesAndMaturitiesPublic entity;
	List<DebtTypes> debtTypes = null;
	List<IssuesMaturitiesUSPFPub> detailsListExp = null;
	IssuesMaturitiesUSPFPub issuesMaturitiesUSPFPub = null;

	
	@BeforeEach
	public void init() throws Exception {
		
		MockitoAnnotations.initMocks(this);
		
		issuesAndMaturities = new ArrayList<IssuesAndMaturitiesPublic>();
		entity = new IssuesAndMaturitiesPublic();
		entity.setEntityId(Long.valueOf(121242));
		entity.setInstrumentId(Long.valueOf(1301099));
		entity.setInstrumentDetailId(Long.valueOf(4421612));
		entity.setInstrumentName("US$1.5 bil 5.10% nts due 09/28/2048");
		entity.setDebtTypeCode("SRUNSEC");
		entity.setDescription("Senior Unsecured");
		entity.setMaturityDate(new Date(05/23/2023));
		entity.setMaturityDateDerived(new Timestamp(05/23/2023));
		entity.setCusip("902494BH5");
		entity.setIsin("US902494BH59");
		entity.setRatingTypeCode("STDLONG");
		entity.setRatingTypeDescription("Local Currency LT");
		entity.setCurrentRatingSymbol("BBB+");
		entity.setRatingDate(new Date(05/23/2023));
		entity.setDataAdminDate(new Date(05/23/2023));
		entity.setLastReviewDate(new Date(05/23/2023));
		entity.setRegulatoryIndicator("EE|UKE");
		entity.setIssueProgramType("Notes");
		entity.setCouponRate("5.1%");
		entity.setOriginalPrincipalBalance("USD 1,500,000,000");
		entity.setCurrency("USD");
		entity.setSortOrder(15);
		entity.setPrecedenceNum(1);
		entity.setRatingDetailId(Long.valueOf(39898462));
		issuesAndMaturities.add(entity);
		
		debtTypes = new ArrayList<DebtTypes>();
		DebtTypes types = new DebtTypes();
		types.setDebtTypeCode("SRUNSEC");
		types.setDebtTypeDescription("Senior Unsecured");
		types.setEntityId(Long.valueOf(100751));
		debtTypes.add(types);
		
		detailsListExp = new ArrayList<IssuesMaturitiesUSPFPub>(1);
		issuesMaturitiesUSPFPub = new IssuesMaturitiesUSPFPub();

		issuesMaturitiesUSPFPub.setInstrumentId(1037363L);
		issuesMaturitiesUSPFPub.setRatingDetailId(43111215L);
		issuesMaturitiesUSPFPub.setInstrumentDetailId(3694016L);
		issuesMaturitiesUSPFPub.setIssueName(
				"US$141.445 mil 2nd lien rev rfdg bnds (Chicago Midway Intl Arpt) (Non-amt)  ser 2013B due 01/01/2036");
		issuesMaturitiesUSPFPub.setInstrumentId(1037363L);
		issuesMaturitiesUSPFPub.setRatingDetailId(43111215L);
		issuesMaturitiesUSPFPub.setInstrumentDetailId(3694016L);
		issuesMaturitiesUSPFPub.setInsuranceProvider(null);
		// issuesMaturitiesUSPFPub.setDebtType("Municipal Debt");
		issuesMaturitiesUSPFPub.setMaturityDate(new Date(05 / 23 / 2023));
		issuesMaturitiesUSPFPub.setCusip("167562NE3");
		issuesMaturitiesUSPFPub.setRatingTypeCode("STDLONG");
		issuesMaturitiesUSPFPub.setRatingType("Local Currency LT");
		issuesMaturitiesUSPFPub.setRating("A");
		issuesMaturitiesUSPFPub.setRatingDate(new Date(05 / 23 / 2023));
		issuesMaturitiesUSPFPub.setDataAdminDate(new Date(05 / 23 / 2023));
		issuesMaturitiesUSPFPub.setLastReviewDate(new Date(05 / 23 / 2023));
		issuesMaturitiesUSPFPub.setCouponRate("5.25%");
		// issuesMaturitiesUSPFPub.setCreditwatchOutlook("Stable");
		// issuesMaturitiesUSPFPub.setCreditwatchOutlookDate("1675356721000");
		issuesMaturitiesUSPFPub.setRefunded("N");
		issuesMaturitiesUSPFPub.setRegulatoryIdentifier(null);
		issuesMaturitiesUSPFPub.setAction("Upgrade | CreditWatch/Outlook");
		issuesMaturitiesUSPFPub.setSeries("2013B");
		issuesMaturitiesUSPFPub.setAsId(2857L);

		detailsListExp.add(issuesMaturitiesUSPFPub);

	}
	
	@Test
	public void getPublicIssuesAndMaturitiesTest() {
		System.out.println("@IssuesAndMaturitiesPublicServiceTest: In getPublicIssuesAndMaturitiesTest method");
		
		Long entityId = Long.valueOf(121242);
		
		List<IssuesAndMaturitiesPublic> e = new ArrayList<IssuesAndMaturitiesPublic>();
		when(issuesAndMaturitiesPubDao.getIssuesAndMaturitiesByEntityId(entityId)).thenReturn(issuesAndMaturities);
		e = issuesAndMaturitiesService.getPublicIssuesAndMaturities(entityId);
		assertEquals(e, issuesAndMaturities);
	}
	
	@Test
	public void getPublicIssuesAndMaturitiesByDebtTypeCodeTest() {
		System.out.println("@IssuesAndMaturitiesPublicServiceTest: In getPublicIssuesAndMaturitiesByDebtTypeCodeTest method");
		
		Long entityId = Long.valueOf(121242);
		String debtTypeCode = "SRUNSEC";
		
		List<IssuesAndMaturitiesPublic> e = new ArrayList<IssuesAndMaturitiesPublic>();
		when(issuesAndMaturitiesPubDao.getIssuesAndMaturitiesByEntityIdAndDebtTypeCode(entityId, debtTypeCode)).thenReturn(issuesAndMaturities);
		e = issuesAndMaturitiesService.getPublicIssuesAndMaturitiesByDebtTypeCode(entityId, debtTypeCode);
		assertEquals(e, issuesAndMaturities);
	}
	
	@Test
	public void getPublicIssuesAndMaturitiesDetailsTest() {
		System.out.println("@IssuesAndMaturitiesPublicServiceTest: In getPublicIssuesAndMaturitiesDetailsTest method");
		
		Long entityId = Long.valueOf(121242);
		Long ratingDetailId = Long.valueOf(39898462);
		
		IssuesAndMaturitiesPublic e = new IssuesAndMaturitiesPublic();
		when(issuesAndMaturitiesPubDao.getIssuesAndMaturitiesDetails(entityId, ratingDetailId)).thenReturn(entity);
		e = issuesAndMaturitiesService.getPublicIssuesAndMaturitiesDetails(entityId, ratingDetailId);
		assertEquals(e, entity);
	}

	@Test
	public void getDropdownDebtTypesPublicTest() {
		System.out.println("@IssuesAndMaturitiesServiceTest: In getDropdownDebtTypesPublicTest method");
		Long entityId = Long.valueOf(100751);
		
		List<DebtTypes> e = new ArrayList<DebtTypes>();
		when(issuesAndMaturitiesDao.getDropdownDebtTypes(entityId)).thenReturn(debtTypes);
		e = issuesAndMaturitiesService.getDropdownDebtTypesPublic(entityId);
		assertEquals(e, debtTypes);
	}
	
	
	@Test
	public void getIssuesMaturitiesUSPFPubDetailsTest() {
		System.out.println("@IssuesAndMaturitiesServiceTest: In getIssuesMaturitiesUSPFPubDetailsTest method");
		Long entityId = Long.valueOf(100751);
		Long securityId = Long.valueOf(100751);
		Long ratingDetailId= Long.valueOf(100751);
		Long instrumentId= Long.valueOf(100751);
		Boolean instrusOnly = Boolean.valueOf(true);
		
		List<IssuesMaturitiesUSPFPub> e = null;
		
		//when(issuesMaturitiesUSPFPubDao.getIssuesAndMaturitiesDetails(entityId, securityId,ratingDetailId,instrumentId,instrusOnly)).thenReturn(detailsListExp);
		//e = issuesAndMaturitiesService.getIssuesMaturitiesUSPFPubDetails(entityId,securityId,ratingDetailId,instrumentId,instrusOnly);
		//assertEquals(e, detailsListExp);
	}
	
	
	/*
	 * @Test public void getIandMUSPFPubMinMaxDatesTest() { System.out.
	 * println("@IssuesAndMaturitiesServiceTest: In getIandMUSPFPubMinMaxDatesTest method"
	 * ); Long entityId = Long.valueOf(100751); Long securityId =
	 * Long.valueOf(100751);
	 * 
	 * List<IandMUSPFPubMinMaxDates> e = null;
	 * when(issuesMaturitiesUSPFPubDao.getIandMUSPFPubMinMaxDates(entityId,
	 * securityId)).thenReturn(datesDetailsListExp); e =
	 * issuesAndMaturitiesService.getIandMUSPFPubMinMaxDates(entityId,securityId);
	 * 
	 * assertEquals(e, datesDetailsListExp); }
	 */
	
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\test\java\com\spglobal\ratings\ratingsdata\service\IssuesAndMaturitiesServiceTest.java

package com.spglobal.ratings.ratingsdata.service;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.when;

import java.sql.Date;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.test.context.junit.jupiter.SpringExtension;

import com.spglobal.ratings.ratingsdata.dao.IssuesAndMaturitiesDao;
import com.spglobal.ratings.ratingsdata.entity.IssuesAndMaturities;
import com.spglobal.ratings.ratingsdata.model.DebtTypes;
import com.spglobal.ratings.ratingsdata.model.IssuesAndMaturitiesData;
import com.spglobal.ratings.ratingsdata.util.RatingsDataUtil;

@ExtendWith({SpringExtension.class, MockitoExtension.class})
public class IssuesAndMaturitiesServiceTest {
	
	@InjectMocks
	IssuesAndMaturitiesService issuesAndMaturitiesService;
	
	@Mock
	RatingsDataUtil ratingsUtil;
	
	@Mock
	IssuesAndMaturitiesDao issuesAndMaturitiesDao;
	
	@Mock
	UserEntitlementCheckImpl userEntitlementCheck;
	
	List<IssuesAndMaturities> issuesAndMaturities = null;
	IssuesAndMaturities imPub;
	IssuesAndMaturities imPriv;
	IssuesAndMaturities imCIR;
	Map<String,List<Long>> userEntitlement = null;
	
	List<DebtTypes> debtTypes = null;
	
	@BeforeEach
	public void init() throws Exception {
		
		MockitoAnnotations.initMocks(this);
		
		issuesAndMaturities = new ArrayList<IssuesAndMaturities>();
		imPub = new IssuesAndMaturities();
		imPub.setEntityId(Long.valueOf(100751));
		imPub.setInstrumentId(Long.valueOf(1301099));
		imPub.setInstrumentDetailId(Long.valueOf(4421612));
		imPub.setInstrumentName("US$1.5 bil 5.10% nts due 09/28/2048");
		imPub.setDebtTypeCode("SRUNSEC");
		imPub.setDescription("Senior Unsecured");
		imPub.setMaturityDate(new Date(05/23/2023));
		imPub.setMaturityDateDerived(new Timestamp(05/23/2023));
		imPub.setCusip("902494BH5");
		imPub.setIsin("US902494BH59");
		imPub.setRatingTypeCode("STDLONG");
		imPub.setRatingTypeDescription("Local Currency LT");
		imPub.setCurrentRatingSymbol("BBB+");
		imPub.setRatingDate(new Date(05/23/2023));
		imPub.setDataAdminDate(new Date(05/23/2023));
		imPub.setLastReviewDate(new Date(05/23/2023));
		imPub.setRegulatoryIndicator("EE|UKE");
		imPub.setIssueProgramType("Notes");
		imPub.setCouponRate("5.1%");
		imPub.setOriginalPrincipalBalance("USD 1,500,000,000");
		imPub.setCurrency("USD");
		imPub.setSortOrder(15);
		imPub.setPrecedenceNum(1);
		imPub.setRatingDetailId(Long.valueOf(39898462));
		imPub.setConfidentialityInd("N");
		imPub.setConfidentialCategoryCode(null);
		issuesAndMaturities.add(imPub);
		
		imPriv = new IssuesAndMaturities();;
		imCIR = new IssuesAndMaturities();; 
		imPriv.setConfidentialityInd("Y");
		imPriv.setConfidentialCategoryCode("PVT");
		
		imCIR.setConfidentialityInd("Y");
		imCIR.setConfidentialCategoryCode("CIR");
		
		issuesAndMaturities.add(imPriv);
		issuesAndMaturities.add(imCIR);
		
		userEntitlement = new HashMap<String, List<Long>>();
		List<Long> osslist = new ArrayList<Long>();
		osslist.add(1L);
		osslist.add(90L);
		List<Long> entityList = new ArrayList<Long>();
		entityList.add(4004341L);
		userEntitlement.put("ossList", osslist);
		userEntitlement.put("entitledEntities", entityList);
		
		debtTypes = new ArrayList<DebtTypes>();
		DebtTypes types = new DebtTypes();
		types.setDebtTypeCode("SRUNSEC");
		types.setDebtTypeDescription("Senior Unsecured");
		types.setEntityId(Long.valueOf(100751));
		debtTypes.add(types);
	}
	
	@Test
	public void getIssuesAndMaturitiesTest() {
		System.out.println("@IssuesAndMaturitiesServiceTest: In getIssuesAndMaturitiesTest method");
		Long entityId = Long.valueOf(100751);
		Long snlId = Long.valueOf(4004341);
		Integer privConfOssCheck = 1;
		Integer entityEntitlementCheck = 1;
		
		IssuesAndMaturitiesData e = new IssuesAndMaturitiesData();
		when(userEntitlementCheck.entitlementChecksForUser("authHeader")).thenReturn(userEntitlement);
		when(userEntitlementCheck.isUserEntitledToPrivateRatings(userEntitlement, "authHeader")).thenReturn(privConfOssCheck);
		when(userEntitlementCheck.isUserEntitledToEntity(snlId, userEntitlement)).thenReturn(entityEntitlementCheck);
		when(issuesAndMaturitiesDao.getIssuesAndMaturitiesByEntityId(entityId)).thenReturn(issuesAndMaturities);
		e = issuesAndMaturitiesService.getIssuesAndMaturities(entityId, snlId, "authHeader");
		assertEquals(e.getIssuesAndMaturities(), issuesAndMaturities);
	}
	
	@Test
	public void getIssuesAndMaturitiesByDebtTypeCodeTest() {
		System.out.println("@IssuesAndMaturitiesServiceTest: In getIssuesAndMaturitiesByDebtTypeCodeTest method");
		Long entityId = Long.valueOf(100751);
		String debtTypeCode = "SRUNSEC";
		Long snlId = Long.valueOf(4004341);
		Integer privConfOssCheck = 1;
		Integer entityEntitlementCheck = 1;
		
		//List<IssuesAndMaturities> e = new ArrayList<IssuesAndMaturities>();
		IssuesAndMaturitiesData e =  new IssuesAndMaturitiesData();
		when(userEntitlementCheck.entitlementChecksForUser("authHeader")).thenReturn(userEntitlement);
		when(userEntitlementCheck.isUserEntitledToPrivateRatings(userEntitlement, "authHeader")).thenReturn(privConfOssCheck);
		when(userEntitlementCheck.isUserEntitledToEntity(snlId, userEntitlement)).thenReturn(entityEntitlementCheck);
		when(issuesAndMaturitiesDao.getIssuesAndMaturitiesByEntityIdAndDebtTypeCode(entityId, debtTypeCode)).thenReturn(issuesAndMaturities);
		e = issuesAndMaturitiesService.getIssuesAndMaturitiesByDebtTypeCode(entityId, debtTypeCode, snlId, "authHeader");
		assertEquals(e.getIssuesAndMaturities(), issuesAndMaturities);
	}
	
	@Test
	public void getIssuesAndMaturitiesDetailsPubTest() {
		System.out.println("@IssuesAndMaturitiesServiceTest: In getIssuesAndMaturitiesDetailsTest method");
		Long entityId = Long.valueOf(100751);
		Long ratingDetailId = Long.valueOf(42370608);
		Long snlId = Long.valueOf(4004341);
		Integer privConfOssCheck = 1;
		Integer entityEntitlementCheck = 1;
		
		IssuesAndMaturities e = new IssuesAndMaturities();
		when(userEntitlementCheck.entitlementChecksForUser("authHeader")).thenReturn(userEntitlement);
		when(userEntitlementCheck.isUserEntitledToPrivateRatings(userEntitlement, "authHeader")).thenReturn(privConfOssCheck);
		when(userEntitlementCheck.isUserEntitledToEntity(snlId, userEntitlement)).thenReturn(entityEntitlementCheck);
		when(issuesAndMaturitiesDao.getIssuesAndMaturitiesDetails(entityId, ratingDetailId)).thenReturn(imPub);
		e = issuesAndMaturitiesService.getIssuesAndMaturitiesDetails(entityId, ratingDetailId, snlId, "authHeader");
		assertEquals(e, imPub);
	}
	
	@Test
	public void getIssuesAndMaturitiesDetailsPrivTest() {
		System.out.println("@IssuesAndMaturitiesServiceTest: In getIssuesAndMaturitiesDetailsTest method");
		Long entityId = Long.valueOf(100751);
		Long ratingDetailId = Long.valueOf(42370608);
		Long snlId = Long.valueOf(4004341);
		Integer privConfOssCheck = 1;
		Integer entityEntitlementCheck = 1;
		
		IssuesAndMaturities e = new IssuesAndMaturities();
		when(userEntitlementCheck.entitlementChecksForUser("authHeader")).thenReturn(userEntitlement);
		when(userEntitlementCheck.isUserEntitledToPrivateRatings(userEntitlement, "authHeader")).thenReturn(privConfOssCheck);
		when(userEntitlementCheck.isUserEntitledToEntity(snlId, userEntitlement)).thenReturn(entityEntitlementCheck);
		when(issuesAndMaturitiesDao.getIssuesAndMaturitiesDetails(entityId, ratingDetailId)).thenReturn(imPriv);
		e = issuesAndMaturitiesService.getIssuesAndMaturitiesDetails(entityId, ratingDetailId, snlId, "authHeader");
		assertEquals(e, imPriv);
	}
	
	@Test
	public void getIssuesAndMaturitiesDetailsCIRTest() {
		System.out.println("@IssuesAndMaturitiesServiceTest: In getIssuesAndMaturitiesDetailsTest method");
		Long entityId = Long.valueOf(100751);
		Long ratingDetailId = Long.valueOf(42370608);
		Long snlId = Long.valueOf(4004341);
		Integer privConfOssCheck = 1;
		Integer entityEntitlementCheck = 1;
		
		IssuesAndMaturities e = new IssuesAndMaturities();
		when(userEntitlementCheck.entitlementChecksForUser("authHeader")).thenReturn(userEntitlement);
		when(userEntitlementCheck.isUserEntitledToPrivateRatings(userEntitlement, "authHeader")).thenReturn(privConfOssCheck);
		when(userEntitlementCheck.isUserEntitledToEntity(snlId, userEntitlement)).thenReturn(entityEntitlementCheck);
		when(issuesAndMaturitiesDao.getIssuesAndMaturitiesDetails(entityId, ratingDetailId)).thenReturn(imCIR);
		e = issuesAndMaturitiesService.getIssuesAndMaturitiesDetails(entityId, ratingDetailId, snlId, "authHeader");
		assertEquals(e, imCIR);
	}
	
	@Test
	public void getDropdownDebtTypesTest() {
		System.out.println("@IssuesAndMaturitiesServiceTest: In getDropdownDebtTypesTest method");
		Long entityId = Long.valueOf(100751);
		Long snlId = Long.valueOf(4004341);
		Integer privConfOssCheck = 1;
		Integer entityEntitlementCheck = 1;
		
		List<DebtTypes> e = new ArrayList<DebtTypes>();
		when(userEntitlementCheck.entitlementChecksForUser("authHeader")).thenReturn(userEntitlement);
		when(userEntitlementCheck.isUserEntitledToPrivateRatings(userEntitlement, "authHeader")).thenReturn(privConfOssCheck);
		when(userEntitlementCheck.isUserEntitledToEntity(snlId, userEntitlement)).thenReturn(entityEntitlementCheck);
		when(issuesAndMaturitiesDao.getDropdownDebtTypes(entityId)).thenReturn(debtTypes);
		e = issuesAndMaturitiesService.getDropdownDebtTypes(entityId, snlId, "authHeader");
		assertEquals(e, debtTypes);
	}
	
	

	@Test
	public void getDropdownDebtTypesTest1() {
		System.out.println("@IssuesAndMaturitiesServiceTest: In getDropdownDebtTypesTest1 method");
		Long entityId = Long.valueOf(100751);
		Long snlId = Long.valueOf(4004341);
		Integer privConfOssCheck = 1;
		Integer entityEntitlementCheck = 0;
		
		List<DebtTypes> e = new ArrayList<DebtTypes>();
		when(userEntitlementCheck.entitlementChecksForUser("authHeader")).thenReturn(userEntitlement);
		when(userEntitlementCheck.isUserEntitledToPrivateRatings(userEntitlement, "authHeader")).thenReturn(privConfOssCheck);
		when(userEntitlementCheck.isUserEntitledToEntity(snlId, userEntitlement)).thenReturn(entityEntitlementCheck);
		e = issuesAndMaturitiesService.getDropdownDebtTypes(entityId, snlId, "authHeader");
		assertNull(e);
	}
	
	
	@Test
	public void getIssuesMaturitiesDebtCodeEnttlmentTest() {
		System.out.println("@IssuesAndMaturitiesServiceTest: In getIssuesAndMaturitiesByDebtTypeCodeTest method");
		Long entityId = Long.valueOf(100751);
		String debtTypeCode = "SRUNSEC";
		Long snlId = Long.valueOf(4004341);
		Integer privConfOssCheck = 1;
		Integer entityEntitlementCheck = 0;
		
		IssuesAndMaturitiesData e =  new IssuesAndMaturitiesData();
		when(userEntitlementCheck.entitlementChecksForUser("authHeader")).thenReturn(userEntitlement);
		when(userEntitlementCheck.isUserEntitledToPrivateRatings(userEntitlement, "authHeader")).thenReturn(privConfOssCheck);
		when(userEntitlementCheck.isUserEntitledToEntity(snlId, userEntitlement)).thenReturn(entityEntitlementCheck);
		e = issuesAndMaturitiesService.getIssuesAndMaturitiesByDebtTypeCode(entityId, debtTypeCode, snlId, "authHeader");
		assertNotNull(e);
	}
	
	@Test
	public void getIssuesAndMaturitiesAllTest() {
		System.out.println("@IssuesAndMaturitiesServiceTest: In getIssuesAndMaturitiesTest method");
		Long entityId = 100751L;
		
		List<IssuesAndMaturities> e = null;
		when(issuesAndMaturitiesDao.getIssuesAndMaturitiesByEntityId(entityId)).thenReturn(issuesAndMaturities);
		e = issuesAndMaturitiesService.getIssuesAndMaturities(entityId);
		assertEquals(e, issuesAndMaturities);
	}
	
	@Test
	public void getIssuesAndMaturitiesEntitleTest() {
		System.out.println("@IssuesAndMaturitiesServiceTest: In getIssuesAndMaturitiesEntitleTest method");
		Long entityId = Long.valueOf(100751);
		Long snlId = Long.valueOf(4004341);
		Integer privConfOssCheck = 1;
		Integer entityEntitlementCheck = 0;
		
		IssuesAndMaturitiesData e = new IssuesAndMaturitiesData();
		when(userEntitlementCheck.entitlementChecksForUser("authHeader")).thenReturn(userEntitlement);
		when(userEntitlementCheck.isUserEntitledToPrivateRatings(userEntitlement, "authHeader")).thenReturn(privConfOssCheck);
		when(userEntitlementCheck.isUserEntitledToEntity(snlId, userEntitlement)).thenReturn(entityEntitlementCheck);
		e = issuesAndMaturitiesService.getIssuesAndMaturities(entityId, snlId, "authHeader");
		assertEquals(e.getMessage(),"The User is not entitiled to view issues and maturities for entity");
	}
	
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\test\java\com\spglobal\ratings\ratingsdata\service\MultimediaServiceTest.java

package com.spglobal.ratings.ratingsdata.service;

import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.test.context.junit.jupiter.SpringExtension;

import com.spglobal.ratings.ratingsdata.entity.MultimediaPodcasts;
import com.spglobal.ratings.ratingsdata.entity.MultimediaSector;
import com.spglobal.ratings.ratingsdata.repository.MultimediaPodcastsRepository;
import com.spglobal.ratings.ratingsdata.repository.MultimediaSectorRepository;

@ExtendWith({SpringExtension.class, MockitoExtension.class})
public class MultimediaServiceTest {
	
	@InjectMocks
	MultimediaService multimediaService;
	
	@MockBean
	MultimediaSectorRepository sectorRepo;
	
	@MockBean
	MultimediaPodcastsRepository podcastsRepo;
	
	@Test
	public void test_sectorlist() throws Exception{
		MultimediaSector mmSector = new MultimediaSector();
		mmSector.setSectorTreeKey(1);
		mmSector.setSectorSubSectorName("Corporates");
		mmSector.setParentTreeKey(null);
		List<MultimediaSector> list = new ArrayList<MultimediaSector>();
		list.add(mmSector);
		when(sectorRepo.findAll()).thenReturn(list);
		List<MultimediaSector> resultLt =  multimediaService.getSectorSubSecotrTree();
		assertNotNull(resultLt);
	}
	
	
	@Test
	public void test_videopodcasts() throws Exception{
		MultimediaPodcasts podcasts = new MultimediaPodcasts();
		podcasts.setGuId("1604416");
		podcasts.setPublishDate("9/4/2020 12:00:00 PM");
		podcasts.setDescription("Ep11: US-China relationship special with Invesco ");
		podcasts.setUrlLink("http://cdn.vidyard.com/videos/6jhNb86h52JAzppmX0_99Q/source.mp4?QkF0hcEG8ZTuW-7mjPRFiAlh9npQqW4wn33c-vGCAoHNJnThXbAzgXMhuDSj8ngS9O5nj0xxotidPkcDv50DdGLH-yREwiM-Z-88rOTell9z9w");
		podcasts.setBatchCount(0);
		podcasts.setCreateDate("2/22/2022 8:09:40 AM");
		podcasts.setTitle("Ep11: US-China relationship special with Invesco ");
		podcasts.setFileType("audio");
		podcasts.setPodcastId(172641L);
		podcasts.setAuthor("Joseph Cass,Paul Gruenwald");
		podcasts.setDuration("00:13:44");
		podcasts.setContextVideoUrl("https://www.spglobal.com/ratings/en/research-insights/podcasts/2020-09-04-fixed-income-in-15-episode-11");
		podcasts.setRegion("EMEA");
		podcasts.setSector("Corporates");
		podcasts.setSubSector(null);
		podcasts.setSummary("Kristina Hooper, Chief Market Strategist at Invesco and Shaun Roache, S&P Global Ratings Chief Economist for APAC joined Joe Cass on this edition of Fixed Income in 15. Discussion focused on ESG in fixed income, the relationship between the US and China and how Asia-Pacific as a region has reacted to the Coronavirus pandemic. There was also time to talk about Kristina’s experience of working from home, the resurrection of Shaun’s rugby career and who Kristina thinks should be the next guest on the show.");
		podcasts.setLanguage("English");
		podcasts.setThumbNail("http://play.vidyard.com/4sjNGp42Laju1wAJys8bYF.jpg");

		List<MultimediaPodcasts> list = new ArrayList<MultimediaPodcasts>();
		list.add(podcasts);
		when(podcastsRepo.getMultimediaPodcasts("audio")).thenReturn(list);
		List<MultimediaPodcasts> resultLt =  multimediaService.getVideosAndPodCasts("audio",null);
		assertNotNull(resultLt);
	}
	
	@Test
	public void test_videopodcasts2() throws Exception{
		when(podcastsRepo.getMultimediaPodcasts(Mockito.anyString())).thenReturn(new ArrayList<>());
		List<MultimediaPodcasts> resultLt =  multimediaService.getVideosAndPodCasts("audio",10);
		assertNotNull(resultLt);
	}

}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\test\java\com\spglobal\ratings\ratingsdata\service\PeersEntityRatingsServiceTest.java

package com.spglobal.ratings.ratingsdata.service;

import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.mockito.Mockito.when;

import java.sql.Date;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.test.context.junit.jupiter.SpringExtension;

import com.spglobal.ratings.ratingsdata.dao.PeersEntityRatingsDao;
import com.spglobal.ratings.ratingsdata.entity.PeersEntityRatings;
import com.spglobal.ratings.ratingsdata.entity.PeersEntityRatingsPublic;
import com.spglobal.ratings.ratingsdata.model.RatingHistoryData;
import com.spglobal.ratings.ratingsdata.util.RatingsDataUtil;

@ExtendWith({SpringExtension.class, MockitoExtension.class})
public class PeersEntityRatingsServiceTest {

	@InjectMocks
	PeersEntityRatingsServiceImpl peersEntityRatingsService;
	

	@Mock
	RatingsDataUtil ratingsUtil;
	
	@Mock
	PeersEntityRatingsDao peersEntityRatingsDao;
	
	
	PeersEntityRatingsPublic peersEntityRatingsPublic = null;
	
	List<PeersEntityRatingsPublic> entityPubRatingsList = null;
	
	
	@Mock
	UserEntitlementCheckImpl userEntitlementCheck;
	
	Map<String,List<Long>> userEntitlement = null;

	List<PeersEntityRatings> peersEntityRatingList = null;
	PeersEntityRatings peersEntRatings = null;
	
	
	@BeforeEach
	public void init() throws Exception {
		
		MockitoAnnotations.initMocks(this);
		
		entityPubRatingsList = new ArrayList<PeersEntityRatingsPublic>();
		
		peersEntityRatingsPublic = new PeersEntityRatingsPublic();
		peersEntityRatingsPublic.setEntityId(Long.valueOf(111719));
		peersEntityRatingsPublic.setDebtTypeCode("Issuer Credit Rating");
		peersEntityRatingsPublic.setCurrentRatingSymbol("BB-");
		
		entityPubRatingsList.add(peersEntityRatingsPublic);
		
		
		peersEntityRatingList = new ArrayList<PeersEntityRatings>();
		
		peersEntRatings = new PeersEntityRatings();
		
		peersEntRatings.setEntityId(Long.valueOf(100751));
		peersEntRatings.setDebtTypeCode("ICR");
		peersEntRatings.setDebtTypeCode("Issuer Credit Rating");
		peersEntRatings.setRatingTypeCode("FCLONG");
		peersEntRatings.setCurrentRatingSymbol("BBB-");
		peersEntRatings.setRatingDate(new Date(04/28/2023));
		peersEntRatings.setLastReviewDate(new Date(04/28/2023));
		peersEntRatings.setAction("Upgrade | CreditWatch/Outlook");
		peersEntRatings.setLatestNonAffirmCWOL("Stable");
		peersEntRatings.setLatestNonAffirmCWOLDate(new Date(04/28/2023));
		peersEntRatings.setRatingDetailId(Long.valueOf(42370608));
		peersEntRatings.setDataAdminDate(new Date(04/28/2023));
		peersEntRatings.setConfidentialCategoryCode(null);
		

		peersEntityRatingList.add(peersEntRatings);
		
		
		userEntitlement = new HashMap<String, List<Long>>();
		List<Long> osslist = new ArrayList<Long>();
		osslist.add(1L);
		osslist.add(90L);
		List<Long> entityList = new ArrayList<Long>();
		entityList.add(4004341L);
		userEntitlement.put("ossList", osslist);
		userEntitlement.put("entitledEntities", entityList);
		
		
		peersEntityRatingList = new ArrayList<PeersEntityRatings>(1);
		PeersEntityRatings per = new PeersEntityRatings();
		
		per.setCurrentRatingSymbol("BB+");
		per.setDebtTypeCode("ICR");
		per.setEntityId(486047L);
		//ratingHistoryLastTenYrs.setRatingDate( "2015-06-30 13:08:43");
		per.setRatingDetailId(38641832L);
		per.setRatingTypeCode( "FC");
		//ratingHistoryLastTenYrs.setRatingTypeDesc("Foreign Currency LT");
		per.setConfidentialCategoryCode( "PUB");
		//ratingHistoryLastTenYrs.setConfidentialCategoryDesc( "Public");
		
		
		peersEntityRatingList.add(per);
		
	}
	
	@Test
	public void getPeersEntityRatingsTest1() {
		String commaSep = "111719,112354";
		List<Long> entityIds = new ArrayList<Long>();
		entityIds.add(111719L);
		entityIds.add(112354L);
		
		Integer pcFlag=0;
		RatingHistoryData ratingData = new RatingHistoryData();
		ratingData.setCommaSepOrgIds(commaSep);
		ratingData.setPcFlag(pcFlag);
		ratingData.setKeyInstsn(4004205L);
		
		List<PeersEntityRatingsPublic> list = null;
		
		when(peersEntityRatingsDao.getPeersEntityRatingsPublic(entityIds)).thenReturn(entityPubRatingsList);
		list = peersEntityRatingsService.getPeersEntityRatings(ratingData,"authHeader");
		
		assertNotNull(list);
	}
	
	@Test
	public void getPeersEntityRatingsTest2() {
		Integer privConfOssCheck = 1;
		Integer entityEntitlementCheck = 1;
		Long capiq = 4004205L;
		Long entityId = 112354L;
		String commaSep = "112354,111719";
		List<Long> entityIds = new ArrayList<Long>();
		entityIds.add(111719L);
		
		Integer pcFlag=1;
		RatingHistoryData ratingData = new RatingHistoryData();
		ratingData.setCommaSepOrgIds(commaSep);
		ratingData.setPcFlag(pcFlag);
		ratingData.setKeyInstsn(4004205L);
		ratingData.setCapiqId(capiq);
		
		List<PeersEntityRatingsPublic> list = null;
		
		when(userEntitlementCheck.entitlementChecksForUser("authHeader")).thenReturn(userEntitlement);
		when(userEntitlementCheck.isUserEntitledToPrivateRatings(userEntitlement, "authHeader")).thenReturn(privConfOssCheck);
		when(userEntitlementCheck.isUserEntitledToEntity(capiq, userEntitlement)).thenReturn(entityEntitlementCheck);
		when(peersEntityRatingsDao.getPeersEntityRatingsPubOrPriv(entityId)).thenReturn(peersEntityRatingList);
		when(peersEntityRatingsDao.getPeersEntityRatingsPublic(entityIds)).thenReturn(entityPubRatingsList);
		
		list = peersEntityRatingsService.getPeersEntityRatings(ratingData,"authHeader");
		
		assertNotNull(list);
	}
	
	@Test
	public void getPeersEntityRatingsTest3() {
		Integer privConfOssCheck = 1;
		Integer entityEntitlementCheck = 0;
		Long snlId = 4004205L;
		Long entityId = 112354L;
		String commaSep = "112354,111719";
		List<Long> entityIds = new ArrayList<Long>();
		entityIds.add(111719L);
		
		Integer pcFlag=1;
		RatingHistoryData ratingData = new RatingHistoryData();
		ratingData.setCommaSepOrgIds(commaSep);
		ratingData.setPcFlag(pcFlag);
		ratingData.setKeyInstsn(4004205L);
		
		List<PeersEntityRatingsPublic> list = null;
		
		when(userEntitlementCheck.entitlementChecksForUser("authHeader")).thenReturn(userEntitlement);
		when(userEntitlementCheck.isUserEntitledToPrivateRatings(userEntitlement, "authHeader")).thenReturn(privConfOssCheck);
		when(userEntitlementCheck.isUserEntitledToEntity(snlId, userEntitlement)).thenReturn(entityEntitlementCheck);
		when(peersEntityRatingsDao.getPeersEntityRatingsPubOrPriv(entityId)).thenReturn(peersEntityRatingList);
		when(peersEntityRatingsDao.getPeersEntityRatingsPublic(entityIds)).thenReturn(entityPubRatingsList);
		
		list = peersEntityRatingsService.getPeersEntityRatings(ratingData,"authHeader");
		
		assertNull(list);
	}
	
	@Test
	public void getPeersEntityRatingsTest4() {
		Integer privConfOssCheck = 1;
		Long entityId = 112354L;
		String commaSep = "112354,111719";
		List<Long> entityIds = new ArrayList<Long>();
		entityIds.add(111719L);
		
		Integer pcFlag=1;
		RatingHistoryData ratingData = new RatingHistoryData();
		ratingData.setCommaSepOrgIds(commaSep);
		ratingData.setPcFlag(pcFlag);
		ratingData.setKeyInstsn(null);
		
		List<PeersEntityRatingsPublic> list = null;
		
		when(userEntitlementCheck.entitlementChecksForUser("authHeader")).thenReturn(userEntitlement);
		when(userEntitlementCheck.isUserEntitledToPrivateRatings(userEntitlement, "authHeader")).thenReturn(privConfOssCheck);
		when(peersEntityRatingsDao.getPeersEntityRatingsPubOrPriv(entityId)).thenReturn(peersEntityRatingList);
		when(peersEntityRatingsDao.getPeersEntityRatingsPublic(entityIds)).thenReturn(entityPubRatingsList);
		
		list = peersEntityRatingsService.getPeersEntityRatings(ratingData,"authHeader");
		
		assertNull(list);
	}
	
	@Test
	public void getPeersEntityRatingsTest() {
		Integer pcFlag=1;
		Long entityId = 112354L;
		String commaSep = "112354,111719";
		RatingHistoryData ratingData = new RatingHistoryData();
		ratingData.setCommaSepOrgIds(commaSep);
		ratingData.setPcFlag(pcFlag);
		ratingData.setKeyInstsn(null);
		//when(peersEntityRatingsDao.getPeersEntityRatingsPubOrPriv(entityId)).thenReturn(peersEntityRatingList);
		List<PeersEntityRatingsPublic> list = peersEntityRatingsService.getPeersEntityRatings(ratingData,"authHeader");
		assertNotNull(list);
	}
	
	@Test
	public void getPeersEntityRatingsTestPubExcep() {
		Integer privConfOssCheck = 1;
		Long entityId = 112354L;
		String commaSep = "112354,111719";
		List<Long> entityIds = new ArrayList<Long>();
		entityIds.add(111719L);
		
		Integer pcFlag=1;
		RatingHistoryData ratingData = new RatingHistoryData();
		ratingData.setCommaSepOrgIds(commaSep);
		ratingData.setPcFlag(pcFlag);
		ratingData.setKeyInstsn(null);
		
		List<PeersEntityRatingsPublic> list = null;
		
		when(userEntitlementCheck.entitlementChecksForUser("authHeader")).thenReturn(userEntitlement);
		when(userEntitlementCheck.isUserEntitledToPrivateRatings(userEntitlement, "authHeader")).thenReturn(privConfOssCheck);
		when(peersEntityRatingsDao.getPeersEntityRatingsPubOrPriv(entityId)).thenReturn(peersEntityRatingList);
		when(peersEntityRatingsDao.getPeersEntityRatingsPublic(entityIds)).thenThrow(new IllegalArgumentException());
		
		list = peersEntityRatingsService.getPeersEntityRatings(ratingData,"authHeader");
		
		assertNull(list);
	}

}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\test\java\com\spglobal\ratings\ratingsdata\service\PeersManagementServiceTest.java

package com.spglobal.ratings.ratingsdata.service;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.when;

import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Map;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import com.spglobal.ratings.ratingsdata.dao.PeersManagementDao;
import com.spglobal.ratings.ratingsdata.entity.AnalystPeerInfo;
import com.spglobal.ratings.ratingsdata.entity.UspfPeerPortfolioData;
import com.spglobal.ratings.ratingsdata.model.AnalystPeerVo;

public class PeersManagementServiceTest {

	
	@InjectMocks
	private PeersManagementServiceImpl peerManagementService;
	
	@Mock
	private PeersManagementDao  peerManagementDao;
	
	@BeforeEach
	public void setup() {
		MockitoAnnotations.initMocks(this);
	}

	
	@Test
	void testGetPeerByCoreIdAndKeyInstnId() {
		Long coreId = 1l;
		String keyInstnId = "123";
		List<AnalystPeerInfo> expectedPeers = new ArrayList<>();
		when(peerManagementDao.getPeersById(any(),any(),any())).thenReturn(expectedPeers);
		List<AnalystPeerVo> result = peerManagementService.getPeersById(coreId, keyInstnId,"");
		assertEquals(expectedPeers.size(), result.size());
	}
	
	
	@Test
	void testGetPeerByCoreIdAndKeyInstnIdException() {
		Long coreId = 1l;
		String keyInstnId = "123";
		when(peerManagementDao.getPeersById(any(), any(),any())).thenThrow(new RuntimeException("Test Exception"));
		
		assertThrows(RuntimeException.class, ()->{peerManagementService.getPeersById(coreId, keyInstnId,"");});
	}
	
	@Test
	void TestAnalystPeerInfoToAnalystPeerVo() {
		List<AnalystPeerInfo> analystPeerInfoList = new ArrayList<>();
		analystPeerInfoList.add(new AnalystPeerInfo(1l,"123","12321",1l,"123","111",1l));
		analystPeerInfoList.add(new AnalystPeerInfo(1l,"123","12321",1l,"123","111",1l));
		
		List<AnalystPeerVo> analystPeerVoList =peerManagementService.analystPeerInfoToAnalystPeerVo(analystPeerInfoList);
		
		assertNotNull(analystPeerVoList);
		
		assertEquals(analystPeerInfoList.size(),analystPeerVoList.size());
		
		
	}

	@Test
	void testGetUspfPeerPortfolioContents() {
		List<Long> asIds = new ArrayList<Long>(Arrays.asList(5963L, 1246L));
		List<UspfPeerPortfolioData> expectedPeers = new ArrayList<>();
		expectedPeers.add(
				new UspfPeerPortfolioData(101L, "product caption","dataElement", "element code", 2021, "12.56", new Timestamp(159874L),
						new Timestamp(1598663L), "element definition", "Heading", "sub heading", "USD", 1, 1));
		expectedPeers.add(new UspfPeerPortfolioData(102L, "product caption", "dataElement", "element code", 2021, null, new Timestamp(159874L),
				new Timestamp(1598663L), "element definition", "Heading", null, "USD", 2, 2));
		when(peerManagementDao.getUspfPortfolioData(asIds)).thenReturn(expectedPeers);
		Map<String, Map<String, Map<String, List<UspfPeerPortfolioData>>>> result = peerManagementService
				.getUspfPeerPortfolioContents(asIds);
		assertNotNull(result);
	}

}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\test\java\com\spglobal\ratings\ratingsdata\service\RatingArticlesServiceTest.java

package com.spglobal.ratings.ratingsdata.service;

import java.sql.Timestamp;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.spglobal.ratings.ratingsdata.model.RatingArticlesDetailSearch;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.test.context.junit.jupiter.SpringExtension;

import com.spglobal.ratings.ratingsdata.dao.RatingArticlesDao;
import com.spglobal.ratings.ratingsdata.entity.RatingArticleTypes;
import com.spglobal.ratings.ratingsdata.entity.RatingArticlesCNPublic;
import com.spglobal.ratings.ratingsdata.entity.RatingArticlesPublic;
import com.spglobal.ratings.ratingsdata.model.RatingArticlesSearch;
import com.spglobal.ratings.ratingsdata.util.RatingsDataConstant;

@ExtendWith({SpringExtension.class, MockitoExtension.class})
public class RatingArticlesServiceTest {

	@InjectMocks
	private RatingArticlesService ratingArticlesService;

	@Mock
	private RatingArticlesDao ratingArticlesDao;

	private DateTimeFormatter CUSTOM_DATE_TIME_FORMATTER = DateTimeFormatter
			.ofPattern(RatingsDataConstant.CUSTOM_DATE_TIME_FORMAT);

	@Test
	public void getRatingArticlesTypesSuccessTest1() throws Exception {
		List<Long> articletypeIds = new ArrayList<Long>();
		articletypeIds.add(1L);
		articletypeIds.add(3L);

		List<RatingArticleTypes> ratingArticleTypes = new ArrayList<RatingArticleTypes>();
		ratingArticleTypes.add(new RatingArticleTypes(Long.valueOf(1L), "Bulletin"));
		ratingArticleTypes.add(new RatingArticleTypes(Long.valueOf(3L), "Commentary"));

		Mockito.when(ratingArticlesDao.getRatingArticlesTypes(articletypeIds)).thenReturn(ratingArticleTypes);
		Assertions.assertEquals(ratingArticleTypes, ratingArticlesService.getRatingArticlesTypes(articletypeIds));
	}

	@Test
	public void getRatingArticlesTypesSuccessTest2() throws Exception {
		Assertions.assertEquals(null, ratingArticlesService.getRatingArticlesTypes(new ArrayList<Long>()));
	}

	@Test
	public void getRatingArticlesSuccessTest3() throws Exception {
		List<Long> articletypeIds = new ArrayList<Long>();
		articletypeIds.add(1L);
		articletypeIds.add(3L);

		RatingArticlesDetailSearch ratingArticlesSearch = new RatingArticlesDetailSearch();
		ratingArticlesSearch.setEntityId(Arrays.asList(100751L));
		ratingArticlesSearch.setArticleTypeIds(articletypeIds);
		ratingArticlesSearch.setCount(500);
		ratingArticlesSearch.setCountryCode("US");

		RatingArticlesPublic articles1 = new RatingArticlesPublic();
		articles1.setArticleId(2975957L);
		articles1.setEntityId(100751L);
		articles1.setFullName("Simon Redmond");
		articles1.setArticleTitle("Report Explains How Commodity Price Assumptions Are Formulated And Used; Oil And Gas Price Deck Revised");
		articles1.setArticleType("News");
		articles1.setArticleTypeId(10L);
		articles1.setArticleDate(Timestamp.valueOf(LocalDateTime.parse("2023-04-20T14:11:36")));

		List<RatingArticlesPublic> ratingArticles = new ArrayList<RatingArticlesPublic>();
		ratingArticles.add(articles1);

		Mockito.when(ratingArticlesDao.getPublicRatingArticles(ratingArticlesSearch)).thenAnswer(x -> ratingArticles);
		Assertions.assertEquals(ratingArticles, ratingArticlesService.getRatingArticles(ratingArticlesSearch));
	}

	@Test
	public void getRatingArticlesSuccessTest4() throws Exception {
		List<Long> articletypeIds = new ArrayList<Long>();
		articletypeIds.add(1L);
		articletypeIds.add(3L);

		RatingArticlesDetailSearch ratingArticlesSearch = new RatingArticlesDetailSearch();
		ratingArticlesSearch.setEntityId(Arrays.asList(100751L));
		ratingArticlesSearch.setArticleTypeIds(articletypeIds);
		ratingArticlesSearch.setCount(500);
		ratingArticlesSearch.setCountryCode("CN");

		RatingArticlesCNPublic articles1 = new RatingArticlesCNPublic();
		articles1.setArticleId(2975957L);
		articles1.setEntityId(100751L);
		articles1.setFullName("Simon Redmond");
		articles1.setArticleTitle("Report Explains How Commodity Price Assumptions Are Formulated And Used; Oil And Gas Price Deck Revised");
		articles1.setArticleType("News");
		articles1.setArticleTypeId(10L);
		articles1.setArticleDate(Timestamp.valueOf(LocalDateTime.parse("2023-04-20T14:11:36")));

		List<RatingArticlesCNPublic> ratingArticles = new ArrayList<RatingArticlesCNPublic>();
		ratingArticles.add(articles1);

		Mockito.when(ratingArticlesDao.getPublicRatingArticles(ratingArticlesSearch)).thenAnswer(x -> ratingArticles);
		Assertions.assertEquals(ratingArticles, ratingArticlesService.getRatingArticles(ratingArticlesSearch));
	}

	@Test
	public void getRatingArticlesTypesSuccessTest5() throws Exception {
		List<Long> articletypeIds = new ArrayList<Long>();
		articletypeIds.add(1L);
		articletypeIds.add(3L);

		RatingArticlesDetailSearch ratingArticlesSearch = new RatingArticlesDetailSearch();
		ratingArticlesSearch.setEntityId(Arrays.asList(100751L));
		ratingArticlesSearch.setArticleTypeIds(articletypeIds);
		ratingArticlesSearch.setCount(500);
		ratingArticlesSearch.setCountryCode("US");

		Mockito.when(ratingArticlesDao.getPublicRatingArticles(ratingArticlesSearch)).thenReturn(null);
		Assertions.assertEquals(null, ratingArticlesService.getRatingArticles(ratingArticlesSearch));
	}

	@Test
	public void getRatingArticlesTypesSuccessTest6() throws Exception {
		List<Long> articletypeIds = new ArrayList<Long>();
		articletypeIds.add(1L);
		articletypeIds.add(3L);

		RatingArticlesDetailSearch ratingArticlesSearch = new RatingArticlesDetailSearch();
		ratingArticlesSearch.setEntityId(Arrays.asList(100751L));
		ratingArticlesSearch.setArticleTypeIds(articletypeIds);
		ratingArticlesSearch.setCount(500);
		ratingArticlesSearch.setCountryCode("CN");

		Mockito.when(ratingArticlesDao.getPublicRatingArticles(ratingArticlesSearch)).thenReturn(null);
		Assertions.assertEquals(null, ratingArticlesService.getRatingArticles(ratingArticlesSearch));
	}

	@Test
	public void getRatingArticlesTypesFailureTest1() throws Exception {
		List<Long> articletypeIds = new ArrayList<Long>();
		articletypeIds.add(1L);
		articletypeIds.add(3L);

		Mockito.when(ratingArticlesDao.getRatingArticlesTypes(articletypeIds)).thenThrow(new RuntimeException("NullPointer Exception"));
		Assertions.assertThrows(Exception.class, ()->{ ratingArticlesService.getRatingArticlesTypes(articletypeIds); });
	}

	@Test
	public void getRatingArticlesTypesFailureTest2() throws Exception {
		Assertions.assertThrows(Exception.class, ()->{ ratingArticlesService.getRatingArticlesTypes(null); });
	}

	@Test
	public void getRatingArticlesFailureTest3() throws Exception {
		List<Long> articletypeIds = new ArrayList<Long>();
		articletypeIds.add(1L);
		articletypeIds.add(3L);

		RatingArticlesDetailSearch ratingArticlesSearch = new RatingArticlesDetailSearch();
		ratingArticlesSearch.setEntityId(Arrays.asList(100751L));
		ratingArticlesSearch.setArticleTypeIds(articletypeIds);
		ratingArticlesSearch.setCount(500);

		Mockito.when(ratingArticlesDao.getPublicRatingArticles(ratingArticlesSearch)).thenThrow(new RuntimeException("NullPointer Exception"));
		Assertions.assertThrows(Exception.class, ()->{ ratingArticlesService.getRatingArticles(ratingArticlesSearch); });
	}

	@Test
	public void getRatingArticlesFailureTest4() throws Exception {
		Assertions.assertThrows(Exception.class, ()->{ ratingArticlesService.getRatingArticles(null); });
	}

}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\test\java\com\spglobal\ratings\ratingsdata\service\RatingCriteriaArticlesServiceTest.java

package com.spglobal.ratings.ratingsdata.service;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.anyMap;
import static org.mockito.ArgumentMatchers.anyString;
import static org.mockito.ArgumentMatchers.eq;

import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.spglobal.ratings.ratingsdata.config.AppConfig;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.test.context.TestPropertySource;
import org.springframework.test.context.junit.jupiter.SpringExtension;

import com.spglobal.ratings.ratingsdata.dao.DeriveRatingDao;
import com.spglobal.ratings.ratingsdata.dao.RatingCriteriaArticlesDao;
import com.spglobal.ratings.ratingsdata.entity.DeriveRating;
import com.spglobal.ratings.ratingsdata.entity.RatingCriteriaArticles;
import com.spglobal.ratings.ratingsdata.entity.RatingCriteriaArticlesPrivate;
import com.spglobal.ratings.ratingsdata.entity.RatingCriteriaArticlesPublic;
import com.spglobal.ratings.ratingsdata.model.RPMCriteria;
import com.spglobal.ratings.ratingsdata.util.RestApiUtil;

@ExtendWith({ SpringExtension.class, MockitoExtension.class })
@TestPropertySource(properties = { "rpm.job.generate.criteria.url='abcd'" })
public class RatingCriteriaArticlesServiceTest {

	@InjectMocks
	RatingCriteriaArticlesService ratingCriteriaArticlesService;

	@Mock
	RatingCriteriaArticlesDao ratingCriteriaArticlesDao;

	@Mock
	private DeriveRatingDao deriveRatingDao;

	@Mock
	private RestApiUtil restApiUtil;
	
	@Mock
	private UserEntitlementCheckImpl userEntitlementCheck;

	@Mock
	private AppConfig appConfig;

	@Test
	public void getRatingCriteriaArticlesSuccessTest1() throws Exception {

		RatingCriteriaArticlesPublic articles1 = new RatingCriteriaArticlesPublic();
		articles1.setRatingDetailId(43379480L);
		articles1.setSourceRatingId(926181518L);
		articles1.setPcrRegion("US");
		articles1.setCriteriaArticleId(2803123L);
		articles1.setArticleDate(new Timestamp(1646195262000L));
		articles1.setPreferredTitle("General Criteria: Hybrid Capital: Methodology And Assumptions");
		articles1.setLastName("Lemos-Stein, CFA");
		articles1.setFirstName("Gregg");
		articles1.setFullName("Gregg Lemos-Stein, CFA");

		List<RatingCriteriaArticlesPublic> ratingCriteriaArticles1 = new ArrayList<RatingCriteriaArticlesPublic>();
		ratingCriteriaArticles1.add(articles1);

		Mockito.when(ratingCriteriaArticlesDao.getArticlesByRatingDetailId(43379480L)).thenReturn(ratingCriteriaArticles1);
		Assertions.assertEquals(ratingCriteriaArticles1,
				ratingCriteriaArticlesService.getRatingCriteriaArticles(6330608L, 43379480L, false, new HttpHeaders()));
	}

	@Test
	public void getRatingCriteriaArticlesSuccessTest2() throws Exception {

		RatingCriteriaArticlesPrivate articles1 = new RatingCriteriaArticlesPrivate();
		articles1.setRatingDetailId(43379480L);
		articles1.setSourceRatingId(926181517L);
		articles1.setPcrRegion("US");
		articles1.setCriteriaArticleId(2807236L);
		articles1.setArticleDate(new Timestamp(1646195262000L));
		articles1.setPreferredTitle("General Criteria: Hybrid Capital: Methodology And Assumptions");
		articles1.setLastName("Lemos-Stein, CFA");
		articles1.setFirstName("Gregg");
		articles1.setFullName("Gregg Lemos-Stein, CFA");

		List<RatingCriteriaArticlesPrivate> ratingCriteriaArticles1 = new ArrayList<RatingCriteriaArticlesPrivate>();
		ratingCriteriaArticles1.add(articles1);

		/* --- confidential articles --- */
		
		Mockito.when(restApiUtil.getAuthorizationToken(any())).thenReturn("Bearer <Jwt></Jwt>"); 
		Mockito.when(userEntitlementCheck.isUserEntitledToPrivateRatings(any(), any())).thenReturn(1);
		Mockito.when(userEntitlementCheck.isUserEntitledToEntity(any(), any())).thenReturn(1);
		
		DeriveRating deriveRating = new DeriveRating();
		deriveRating.setWorkObjectId("W-78006");

		Map<String, Object> rpmHeaders = new HashMap<String, Object>();
		rpmHeaders.put(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON);
		rpmHeaders.put("Source", "LINX");
		rpmHeaders.put("Language", "English");
		rpmHeaders.put("PubDate_Format", "Mon.fmDD, YYYY");
		rpmHeaders.put("Application", "RPM");
		rpmHeaders.put("IsCriteriaNonPublic", "true");

		Map<String, Object> rpmParams = new HashMap<String, Object>();
		rpmParams.put("JobIDsInClause", "'" + deriveRating.getWorkObjectId() + "'");

		Mockito.when(deriveRatingDao.getDeriveRatingByRatingDetailId(43379480L)).thenReturn(deriveRating);

		RPMCriteria rpmCriteria1 = new RPMCriteria();
		rpmCriteria1.setLinxId("7554329");
		RPMCriteria rpmCriteria2 = new RPMCriteria();
		rpmCriteria2.setLinxId("100892753");
		RPMCriteria rpmCriteria3 = new RPMCriteria();
		rpmCriteria3.setLinxId("11798296");
		Mockito.when(restApiUtil.<List<RPMCriteria>>fetchApiContent(eq(HttpMethod.POST), anyMap(), any(), anyMap(), any()))
				.thenReturn(new ResponseEntity<List<RPMCriteria>>(
						Arrays.asList(rpmCriteria1, rpmCriteria2, rpmCriteria3), HttpStatus.OK));

		List<Long> sourceObjectIds = Arrays.asList(Long.valueOf(7554329), Long.valueOf(100892753),
				Long.valueOf(11798296));
		Mockito.when(ratingCriteriaArticlesDao.getArticlesBySourceObjectIds(sourceObjectIds))
				.thenReturn(ratingCriteriaArticles1);

		Assertions.assertEquals(ratingCriteriaArticles1,
				ratingCriteriaArticlesService.getRatingCriteriaArticles(6330608L, 43379480L, true, new HttpHeaders()));
	}

	@Test
	public void getRatingCriteriaArticlesFailureTest1() throws Exception {
		Assertions.assertThrows(Exception.class, () -> {
			ratingCriteriaArticlesService.getRatingCriteriaArticles(null, 43379480L, false, new HttpHeaders());
		});
		Assertions.assertThrows(Exception.class, () -> {
			ratingCriteriaArticlesService.getRatingCriteriaArticles(6330608L, null, false, new HttpHeaders());
		});
		Assertions.assertThrows(Exception.class, () -> {
			ratingCriteriaArticlesService.getRatingCriteriaArticles(6330608L, 43379480L, false, null);
		});
	}
	
	@Test
	public void getRatingCriteriaArticlesFailureTest2() throws Exception {
		Assertions.assertThrows(Exception.class, () -> {
			ratingCriteriaArticlesService.getRatingCriteriaArticles(null, 43379480L, true, new HttpHeaders());
		});
		Assertions.assertThrows(Exception.class, () -> {
			ratingCriteriaArticlesService.getRatingCriteriaArticles(6330608L, null, true, new HttpHeaders());
		});
		Assertions.assertThrows(Exception.class, () -> {
			ratingCriteriaArticlesService.getRatingCriteriaArticles(6330608L, 43379480L, true, null);
		});
	}

	@Test
	public void getRatingCriteriaArticlesFailureTest3() throws Exception {
		Mockito.when(ratingCriteriaArticlesDao.getArticlesByRatingDetailId(43379480L))
				.thenThrow(new RuntimeException("NullPointer Exception"));
		Assertions.assertThrows(Exception.class, () -> {
			ratingCriteriaArticlesService.getRatingCriteriaArticles(6330608L, 43379480L, false, new HttpHeaders());
		});
	}

	@Test
	public void getRatingCriteriaArticlesFailureTest4() throws Exception {
		Mockito.when(userEntitlementCheck.isUserEntitledToPrivateRatings(any(), any())).thenReturn(0);
		Mockito.when(userEntitlementCheck.isUserEntitledToEntity(any(), any())).thenReturn(0);
		
		Assertions.assertThrows(Exception.class, () -> {
			ratingCriteriaArticlesService.getRatingCriteriaArticles(6330608L, 43379480L, true, new HttpHeaders());
		});
	}
	
	@Test
	public void getRatingCriteriaArticlesFailureTest5() throws Exception {
		Mockito.when(userEntitlementCheck.isUserEntitledToPrivateRatings(any(), any())).thenReturn(1);
		Mockito.when(userEntitlementCheck.isUserEntitledToEntity(any(), any())).thenReturn(1);
		Mockito.when(deriveRatingDao.getDeriveRatingByRatingDetailId(43379480L))
				.thenThrow(new RuntimeException("NullPointer Exception"));
		
		Assertions.assertThrows(Exception.class, () -> {
			ratingCriteriaArticlesService.getRatingCriteriaArticles(6330608L, 43379480L, true, new HttpHeaders());
		});
	}

}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\test\java\com\spglobal\ratings\ratingsdata\service\RatingHistoryLastTenYrsServiceTest.java

package com.spglobal.ratings.ratingsdata.service;

import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.test.context.junit.jupiter.SpringExtension;

import com.spglobal.ratings.ratingsdata.dao.PeersCurrentRatingsDao;
import com.spglobal.ratings.ratingsdata.dao.RatingHistoryLastTenYrsDao;
import com.spglobal.ratings.ratingsdata.entity.PeersCurrentRatings;
import com.spglobal.ratings.ratingsdata.entity.RatingHistoryLastTenYrs;
import com.spglobal.ratings.ratingsdata.entity.RatingHistoryLastTenYrsPublic;
import com.spglobal.ratings.ratingsdata.model.RatingHistoryData;
import com.spglobal.ratings.ratingsdata.repository.RatingHistoryLastTenYrsRepository;
import com.spglobal.ratings.ratingsdata.util.RatingsDataUtil;

@ExtendWith({SpringExtension.class, MockitoExtension.class})
public class RatingHistoryLastTenYrsServiceTest {

	@InjectMocks
	RatingHistoryLastTenYrsServiceImpl ratingHistoryLastTenYrsService;
	
	@Mock
	RatingHistoryLastTenYrsRepository ratingHistLastTenYrsRepository;
	

	@Mock
	RatingsDataUtil ratingsUtil;
	
	@Mock
	RatingHistoryLastTenYrsDao ratingHistoryLastTenYrsDao;
	
	@Mock
	PeersCurrentRatingsDao peersCurrentRatingsDao;
	
	RatingHistoryLastTenYrsPublic ratingHistLastTenYrsPublic = null;
	
	List<RatingHistoryLastTenYrsPublic> entityPubRatingsList = null;
	
	List<PeersCurrentRatings> peersCurRatingList = null;
	
	PeersCurrentRatings peersCurRating = null; 
	
	@Mock
	UserEntitlementCheckImpl userEntitlementCheck;
	
	Map<String,List<Long>> userEntitlement = null;

	List<RatingHistoryLastTenYrs> ratingHistoryLastTenYrsPubOrPriv = null;
	RatingHistoryLastTenYrs ratingHistoryLastTenYrs = null;
	
	@BeforeEach
	public void init() throws Exception {
		
		MockitoAnnotations.initMocks(this);
		
		entityPubRatingsList = new ArrayList<RatingHistoryLastTenYrsPublic>();
		
		ratingHistLastTenYrsPublic = new RatingHistoryLastTenYrsPublic();
		ratingHistLastTenYrsPublic.setEntityId(Long.valueOf(111719));
		ratingHistLastTenYrsPublic.setDebtTypeDesc("Issuer Credit Rating");
		ratingHistLastTenYrsPublic.setRatingTypeDesc("Foreign Currency LT");
		ratingHistLastTenYrsPublic.setCurrentRatingSymbol("BB-");
		
		entityPubRatingsList.add(ratingHistLastTenYrsPublic);
		
		
		peersCurRatingList = new ArrayList<PeersCurrentRatings>();
		
		peersCurRating = new PeersCurrentRatings();
		peersCurRating.setEntityId(Long.valueOf(111719));
	
		peersCurRating.setActionSTDLong("New Rating | CreditWatch/Outlook");
		peersCurRating.setActionSTDLong("CreditWatch/Outlook");
		peersCurRating.setConfidentialFCLong("Public");
		peersCurRating.setConfidentialSTDLong("Public"); 
		peersCurRating.setCwOLDateFCLong("2023-03-31 17:08:19"); 
		peersCurRating.setCwOLDdateSTDLong("2023-03-31 17:08:19"); 
		peersCurRating.setCwOLDfclong("Stable"); 
		peersCurRating.setCwOLSTDLong("Stable"); 
		peersCurRating.setLastReviewDateFCLong("2015-12-02 18:51:13"); 
		peersCurRating.setLastReviewDateSTDLong("2015-12-02 18:51:13");
		peersCurRating.setRatingDateFCLong("2015-12-02 18:51:13"); 
		peersCurRating.setRatingDateSTDLong("2015-12-02 18:51:13"); 
		peersCurRating.setRatingFCLong("A-") ;
		peersCurRating.setRatingSTDLong("A-");
		peersCurRating.setRatingTypeCodeFCLong("FCLONG");
		peersCurRating.setRatingTypeCodeSTDLong("FCLONG");
		peersCurRating.setEntityLegalName("TEST AHY505");

		peersCurRatingList.add(peersCurRating);


		userEntitlement = new HashMap<String, List<Long>>();
		List<Long> osslist = new ArrayList<Long>();
		osslist.add(1L);
		osslist.add(90L);
		List<Long> entityList = new ArrayList<Long>();
		entityList.add(4004341L);
		userEntitlement.put("ossList", osslist);
		userEntitlement.put("entitledEntities", entityList);
		
		
		ratingHistoryLastTenYrsPubOrPriv = new ArrayList<RatingHistoryLastTenYrs>(1);
		RatingHistoryLastTenYrs ratingHistoryLastTenYrs = new RatingHistoryLastTenYrs();
		
		ratingHistoryLastTenYrs.setCurrentRatingSymbol("BB+");
		ratingHistoryLastTenYrs.setDebtTypeCode("ICR");
		ratingHistoryLastTenYrs.setEntityId(486047L);
		ratingHistoryLastTenYrs.setEntityName("TEST WUA476");
		ratingHistoryLastTenYrs.setRatingDate( "2015-06-30 13:08:43");
		ratingHistoryLastTenYrs.setRatingDetailId(38641832L);
		ratingHistoryLastTenYrs.setRatingTypeCode( "FC");
		ratingHistoryLastTenYrs.setRatingTypeDesc("Foreign Currency LT");
		ratingHistoryLastTenYrs.setConfidentialCategoryCode( "PUB");
		ratingHistoryLastTenYrs.setConfidentialCategoryDesc( "Public");
		
		
		ratingHistoryLastTenYrsPubOrPriv.add(ratingHistoryLastTenYrs);
		
	}
	
	@Test
	public void getRatingHistoryLastTenYrsTest1() {
		String commaSep = "111719,112354";
		List<Long> entityIds = new ArrayList<Long>();
		entityIds.add(111719L);
		entityIds.add(112354L);
		
		Integer pcFlag=0;
		RatingHistoryData ratingData = new RatingHistoryData();
		ratingData.setCommaSepOrgIds(commaSep);
		ratingData.setPcFlag(pcFlag);
		ratingData.setKeyInstsn(4004205L);
		
		List<RatingHistoryLastTenYrsPublic> list = null;
		
		when(ratingHistoryLastTenYrsDao.getRatingHistLastTenYrsPublic(entityIds)).thenReturn(entityPubRatingsList);
		list = ratingHistoryLastTenYrsService.getRatingHistoryLastTenYrs(ratingData,"authHeader");
		
		assertNotNull(list);
	}
	
	@Test
	public void getRatingHistoryLastTenYrsTest2() {
		Integer privConfOssCheck = 1;
		Integer entityEntitlementCheck = 1;
		Long capiq = 4004205L;
		Long entityId = 112354L;
		String commaSep = "112354,111719";
		List<Long> entityIds = new ArrayList<Long>();
		entityIds.add(111719L);
		
		Integer pcFlag=1;
		RatingHistoryData ratingData = new RatingHistoryData();
		ratingData.setCommaSepOrgIds(commaSep);
		ratingData.setPcFlag(pcFlag);
		ratingData.setKeyInstsn(4004205L);
		ratingData.setCapiqId(capiq);


		List<RatingHistoryLastTenYrsPublic> list = null;
		
		when(userEntitlementCheck.entitlementChecksForUser("authHeader")).thenReturn(userEntitlement);
		when(userEntitlementCheck.isUserEntitledToPrivateRatings(userEntitlement, "authHeader")).thenReturn(privConfOssCheck);
		when(userEntitlementCheck.isUserEntitledToEntity(capiq, userEntitlement)).thenReturn(entityEntitlementCheck);
		when(ratingHistoryLastTenYrsDao.getRatingHistLastTenYrsPubOrPriv(entityId)).thenReturn(ratingHistoryLastTenYrsPubOrPriv);
		when(ratingHistoryLastTenYrsDao.getRatingHistLastTenYrsPublic(entityIds)).thenReturn(entityPubRatingsList);
		
		list = ratingHistoryLastTenYrsService.getRatingHistoryLastTenYrs(ratingData,"authHeader");
		
		assertNotNull(list);
	}
	
	@Test
	public void getRatingHistoryLastTenYrsTest3() {
		Integer privConfOssCheck = 1;
		Integer entityEntitlementCheck = 0;
		Long capiqId = 4004205L;
		Long entityId = 112354L;
		String commaSep = "112354,111719";
		List<Long> entityIds = new ArrayList<Long>();
		entityIds.add(111719L);
		
		Integer pcFlag=1;
		RatingHistoryData ratingData = new RatingHistoryData();
		ratingData.setCommaSepOrgIds(commaSep);
		ratingData.setPcFlag(pcFlag);
		ratingData.setKeyInstsn(4004205L);
		ratingData.setCapiqId(capiqId);


		List<RatingHistoryLastTenYrsPublic> list = null;
		
		when(userEntitlementCheck.entitlementChecksForUser("authHeader")).thenReturn(userEntitlement);
		when(userEntitlementCheck.isUserEntitledToPrivateRatings(userEntitlement, "authHeader")).thenReturn(privConfOssCheck);
		when(userEntitlementCheck.isUserEntitledToEntity(capiqId, userEntitlement)).thenReturn(entityEntitlementCheck);
		when(ratingHistoryLastTenYrsDao.getRatingHistLastTenYrsPubOrPriv(entityId)).thenReturn(ratingHistoryLastTenYrsPubOrPriv);
		when(ratingHistoryLastTenYrsDao.getRatingHistLastTenYrsPublic(entityIds)).thenReturn(entityPubRatingsList);
		
		list = ratingHistoryLastTenYrsService.getRatingHistoryLastTenYrs(ratingData,"authHeader");
		
		assertNull(list);
	}
	
	@Test
	public void getRatingHistoryLastTenYrsTest4() {
		Integer privConfOssCheck = 1;
		Long entityId = 112354L;
		String commaSep = "112354,111719";
		List<Long> entityIds = new ArrayList<Long>();
		entityIds.add(111719L);
		
		Integer pcFlag=1;
		RatingHistoryData ratingData = new RatingHistoryData();
		ratingData.setCommaSepOrgIds(commaSep);
		ratingData.setPcFlag(pcFlag);
		ratingData.setKeyInstsn(null);
		
		List<RatingHistoryLastTenYrsPublic> list = null;
		
		when(userEntitlementCheck.entitlementChecksForUser("authHeader")).thenReturn(userEntitlement);
		when(userEntitlementCheck.isUserEntitledToPrivateRatings(userEntitlement, "authHeader")).thenReturn(privConfOssCheck);
		when(ratingHistoryLastTenYrsDao.getRatingHistLastTenYrsPubOrPriv(entityId)).thenReturn(ratingHistoryLastTenYrsPubOrPriv);
		when(ratingHistoryLastTenYrsDao.getRatingHistLastTenYrsPublic(entityIds)).thenReturn(entityPubRatingsList);
		
		list = ratingHistoryLastTenYrsService.getRatingHistoryLastTenYrs(ratingData,"authHeader");
		
		assertNull(list);
	}
	
	@Test
	public void getPeersCurrentRatingsTest() {
		String commaSepOrgIds = "112354";
		when(peersCurrentRatingsDao.getPeersCurrentRatings(commaSepOrgIds)).thenReturn(peersCurRatingList);
		List<PeersCurrentRatings> list = ratingHistoryLastTenYrsService.getPeersCurrentRatings(commaSepOrgIds);
		assertNotNull(list);
	}
	
	@Test
	public void getRatingHistoryLastTenYrsTestPubExcep() {
		Integer privConfOssCheck = 1;
		Long entityId = 112354L;
		String commaSep = "112354,111719";
		List<Long> entityIds = new ArrayList<Long>();
		entityIds.add(111719L);
		
		Integer pcFlag=1;
		RatingHistoryData ratingData = new RatingHistoryData();
		ratingData.setCommaSepOrgIds(commaSep);
		ratingData.setPcFlag(pcFlag);
		ratingData.setKeyInstsn(null);
		
		List<RatingHistoryLastTenYrsPublic> list = null;
		
		when(userEntitlementCheck.entitlementChecksForUser("authHeader")).thenReturn(userEntitlement);
		when(userEntitlementCheck.isUserEntitledToPrivateRatings(userEntitlement, "authHeader")).thenReturn(privConfOssCheck);
		when(ratingHistoryLastTenYrsDao.getRatingHistLastTenYrsPubOrPriv(entityId)).thenReturn(ratingHistoryLastTenYrsPubOrPriv);
		when(ratingHistoryLastTenYrsDao.getRatingHistLastTenYrsPublic(entityIds)).thenThrow(new IllegalArgumentException());
		
		list = ratingHistoryLastTenYrsService.getRatingHistoryLastTenYrs(ratingData,"authHeader");
		
		assertNull(list);
	}

}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\test\java\com\spglobal\ratings\ratingsdata\service\ReconciliationRatingServiceTest.java

package com.spglobal.ratings.ratingsdata.service;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.test.context.ContextConfiguration;

import com.spglobal.ratings.ratingsdata.dao.ReconciliationRatingDao;
import com.spglobal.ratings.ratingsdata.model.ReconciliationData;

@ContextConfiguration(classes = { FinancialRatingService.class })
@ExtendWith(MockitoExtension.class)
public class ReconciliationRatingServiceTest {

	@InjectMocks
	private ReconciliationRatingServiceImpl reconRatingService;

	@Mock
	ReconciliationRatingDao reconcialationRatingDao;
	
	@Mock
	CurrencyExchangeRateService currencyExchangeRateService;
	
	@Test
	void testGetFinancialRatingDetailsNonEmpty() throws Exception {
		List<ReconciliationData>  financialData = new ArrayList<ReconciliationData>();
		ReconciliationData entity1 = new ReconciliationData();
		entity1.setId(123l);
		entity1.setCoreId(123l);
		entity1.setMagnitude("$M");
		entity1.setFiscalYear("2023");
		entity1.setFinPeriodId("2023");
		entity1.setDataPointValue(123d);
		entity1.setDataElementCd("2023");
		entity1.setReportedCurrency("USD");
		ReconciliationData entity2 = new ReconciliationData();
		entity2.setId(1234l);
		entity2.setCoreId(1234l);
		entity2.setFiscalYear("2023");
		entity2.setMagnitude("$M");
		entity2.setFinPeriodId("2024");
		entity2.setDataPointValue(1234d);
		entity2.setDataElementCd("2024");
		entity2.setReportedCurrency("INR");
		financialData.add(entity1);
		financialData.add(entity2);
		when(reconcialationRatingDao.getReconciliationQuartelyRatingDetails(123l)).thenReturn(financialData);
		List<ReconciliationData> resp = reconRatingService.getReconciliationRatingDetails(123l,"quarterly","USD");
		assertNotNull(resp);
	}

	@Test
	void testGetFinancialRatingDetailsNonEmptyAnnually() throws Exception {
		List<ReconciliationData>  financialData = new ArrayList<ReconciliationData>();
		ReconciliationData entity1 = new ReconciliationData();
		entity1.setId(123l);
		entity1.setCoreId(123l);
		entity1.setMagnitude("Millions1");
		entity1.setFiscalYear("2023");
		entity1.setFinPeriodId("2023");
		entity1.setDataPointValue(123d);
		entity1.setDataElementCd("2023");
		entity1.setReportedCurrency("USD");
		ReconciliationData entity2 = new ReconciliationData();
		entity2.setId(1234l);
		entity2.setCoreId(1234l);
		entity2.setFiscalYear("2024");
		entity2.setMagnitude("Millions1");
		entity2.setFinPeriodId("2024");
		entity2.setDataPointValue(1234d);
		entity2.setDataElementCd("2024");
		entity2.setReportedCurrency("INR");
		ReconciliationData entity3 = new ReconciliationData();
		entity3.setId(1234l);
		entity3.setCoreId(1234l);
		entity3.setFiscalYear("2022");
		entity3.setMagnitude("Millions1");
		entity3.setFinPeriodId("2022");
		entity3.setDataPointValue(12345d);
		entity3.setDataElementCd("2022");
		entity3.setReportedCurrency("INR");
		financialData.add(entity1);
		financialData.add(entity2);
		financialData.add(entity3);
		Map<String, Double> dataElementValue = new HashMap<String, Double>();
		dataElementValue.put("2024", 123d);
		dataElementValue.put("2022", null);
		Map<String, Map<String, Double>> map1 = new HashMap<String, Map<String, Double>>();
		map1.put("2023", null);
		map1.put("2024", dataElementValue);
		map1.put("2022", dataElementValue);
		when(reconcialationRatingDao.getReconciliationYearlyRatingDetails(123l)).thenReturn(financialData);
		when(currencyExchangeRateService.getMagnitudeConvertedFinData(Collections.emptyMap(), "USD")).thenReturn(map1);
		List<ReconciliationData> resp = reconRatingService.getReconciliationRatingDetails(123l,"annual","USD");
		assertNotNull(resp);
	}

	@Test
	void testGetFinancialRatingDetailsNonEmptyNoPeriod() throws Exception {
		List<ReconciliationData>  financialData = new ArrayList<ReconciliationData>();
		ReconciliationData entity1 = new ReconciliationData();
		entity1.setId(123l);
		entity1.setCoreId(123l);
		entity1.setMagnitude("$M");
		entity1.setFiscalYear("2023");
		entity1.setFinPeriodId("2023");
		entity1.setDataPointValue(123d);
		entity1.setDataElementCd("2023");
		entity1.setReportedCurrency("USD");
		ReconciliationData entity2 = new ReconciliationData();
		entity2.setId(1234l);
		entity2.setCoreId(1234l);
		entity2.setFiscalYear("2023");
		entity2.setMagnitude("$M");
		entity2.setFinPeriodId("2024");
		entity2.setDataPointValue(1234d);
		entity2.setDataElementCd("2024");
		entity2.setReportedCurrency("INR");
		financialData.add(entity1);
		financialData.add(entity2);
		when(reconcialationRatingDao.getReconciliationYearlyRatingDetails(123l)).thenReturn(financialData);
		List<ReconciliationData> resp = reconRatingService.getReconciliationRatingDetails(123l,"","USD");
		assertNotNull(resp);
	}

	@Test
	void testGetFinancialRatingDetailsNonEmptyCustom() throws Exception {
		List<ReconciliationData>  financialData = new ArrayList<ReconciliationData>();
		ReconciliationData entity1 = new ReconciliationData();
		entity1.setId(123l);
		entity1.setCoreId(123l);
		entity1.setMagnitude("$M");
		entity1.setFiscalYear("2023");
		entity1.setFinPeriodId("2023");
		entity1.setDataPointValue(123d);
		entity1.setDataElementCd("2023");
		entity1.setReportedCurrency("USD");
		ReconciliationData entity2 = new ReconciliationData();
		entity2.setId(1234l);
		entity2.setCoreId(1234l);
		entity2.setFiscalYear("2023");
		entity2.setMagnitude("$M");
		entity2.setFinPeriodId("2024");
		entity2.setDataPointValue(1234d);
		entity2.setDataElementCd("2024");
		entity2.setReportedCurrency("INR");
		financialData.add(entity1);
		financialData.add(entity2);
		ArrayList<String> s3 = new ArrayList<String>();
		when(reconcialationRatingDao.getCustomReconciliationRatingDetails(123l, s3)).thenReturn(financialData);
		List<ReconciliationData> resp = reconRatingService.getCustomReconciliationRatingDetails(123l,s3,"USD");
		assertNotNull(resp);
	}

	@Test
	void testGetFinancialRatingDetailsNonEmpty1() throws Exception {
		List<ReconciliationData>  financialData = new ArrayList<ReconciliationData>();
		ReconciliationData entity1 = new ReconciliationData();
		entity1.setId(123l);
		entity1.setCoreId(123l);
		entity1.setMagnitude("$M");
		entity1.setFiscalYear("2023");
		entity1.setFinPeriodId("2023");
		entity1.setDataPointValue(123d);
		entity1.setDataElementCd("2023");
		entity1.setReportedCurrency("USD");
		ReconciliationData entity2 = new ReconciliationData();
		entity2.setId(1234l);
		entity2.setCoreId(1234l);
		entity2.setFiscalYear("2023");
		entity2.setMagnitude("$M");
		entity2.setFinPeriodId("2024");
		entity2.setDataPointValue(1234d);
		entity2.setDataElementCd("2024");
		entity2.setReportedCurrency("INR");
		financialData.add(entity1);
		financialData.add(entity2);
		when(reconcialationRatingDao.getReconciliationQuartelyRatingDetails(123l)).thenReturn(financialData);
		List<ReconciliationData> resp = reconRatingService.getReconciliationRatingDetails(123l,"quarterly","Reported Currency");
		assertNotNull(resp);
	}

	@Test
	void testGetFinancialRatingDetailsEmpty() throws Exception {
		when(reconcialationRatingDao.getReconciliationQuartelyRatingDetails(123l)).thenReturn(Collections.emptyList());
		List<ReconciliationData> resp = reconRatingService.getReconciliationRatingDetails(123l,"quarterly","USD");
		assertEquals(resp.size(), 0);
	}
//
//	@Test
//	void testGetFinancialRatingDetailsWithEmptyPeroidType() throws Exception {
//		Collection<HashMap<String, Object>> resp = reconRatingService.getFinancialRatingDetails(123l,
//				"corporate.adjusted", "","USD");
//		assertNotNull(resp);
//	}
//
//	@Test
//	void testGetFinancialRatingDetailsQuarterly() throws Exception {
//		Collection<HashMap<String, Object>> resp = reconRatingService.getFinancialRatingDetails(123l,
//				"corporate.adjusted", "quarterly","USD");
//		assertNotNull(resp);
//	}
//	
//	@Test
//	void testGetFinancialRatingDetailsQuarterlyNonNull() throws Exception {
//		List<FinancialData>  financialData = new ArrayList<FinancialData>();
//		FinancialQuarterlyRatingEntity entity1 = new FinancialQuarterlyRatingEntity();
//		entity1.setCoreId(123l);
//		entity1.setId(123l);
//		entity1.setReportedCurrency("USD");
//		entity1.setMagnitude("Millions");
//		entity1.setFiscalYear("2023");
//		entity1.setFinPeriodId("2023");
//		entity1.setDataPointValue(123d);
//		entity1.setDataElementCd("2023");
//		FinancialQuarterlyRatingEntity entity2 = new FinancialQuarterlyRatingEntity();
//		entity2.setCoreId(1234l);
//		entity2.setId(1234l);
//		entity2.setMagnitude("Millions");
//		entity2.setReportedCurrency("INR");
//		entity2.setFinPeriodId("2024");
//		entity2.setDataPointValue(1234d);
//		entity2.setDataElementCd("2024");
//
//		financialData.add(entity1);
//		financialData.add(entity2);
//		when(financialRatingDao.getFinancialQuartelyRatingDetails(123l, "corporate.adjusted")).thenReturn(financialData);
//		Collection<HashMap<String, Object>> resp = reconRatingService.getFinancialRatingDetails(123l,
//				"corporate.adjusted", "quarterly","USD");
//		assertNotNull(resp);
//	}
//	
//	@Test
//	void testGetCustomFinancialRatingDetails() throws Exception {
//		Collection<HashMap<String, Object>> resp = reconRatingService.getCustomFinancialRatingDetails(123l,"corporate.adjusted", Collections.emptyList(),"USD");
//		assertNotNull(resp);
//	}
//	
//	@Test
//	void testGetCustomFinancialRatingDetailsNotEmpty() throws Exception {
//		List<FinancialData>  financialData = new ArrayList<FinancialData>();
//		FinancialCustomRatingEntity entity1 = new FinancialCustomRatingEntity();
//		entity1.setId(123l);
//		entity1.setCoreId(123l);
//		entity1.setFiscalYear("2023");
//		entity1.setMagnitude("Millions");
//		entity1.setReportedCurrency("USD");
//		entity1.setFinPeriodId("2023");
//		entity1.setDataPointValue(123d);
//		entity1.setDataElementCd("2023");
//		FinancialCustomRatingEntity entity2 = new FinancialCustomRatingEntity();
//		entity2.setId(1234l);
//		entity2.setCoreId(1234l);
//		entity2.setMagnitude("Millions");
//		entity2.setFiscalYear("2023");
//		entity2.setReportedCurrency("INR");
//		entity2.setFinPeriodId("2024");
//		entity2.setDataPointValue(1234d);
//		entity2.setDataElementCd("2024");
//		financialData.add(entity1);
//		financialData.add(entity2);
//		when(financialRatingDao.getCustomFinancialRatingDetails(123l,"corporate.adjusted", Collections.emptyList())).thenReturn(financialData);
//		Collection<HashMap<String, Object>> resp = reconRatingService.getCustomFinancialRatingDetails(123l,"corporate.adjusted", Collections.emptyList(),"USD");
//		assertNotNull(resp);
//	}
//
//	@Test
//	void testGetFinancialPeers() throws Exception {
//		List<String> entitys = Arrays.asList("379507", "384019");
//		String template = "Financial.all";
//		List<FinancialPeers> resp = reconRatingService.getFinancialPeers(entitys, template);
//		assertNotNull(resp);
//	}
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\test\java\com\spglobal\ratings\ratingsdata\service\ScoresAndModifiersPublicServiceTest.java

package com.spglobal.ratings.ratingsdata.service;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.when;

import java.sql.Date;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

import com.spglobal.ratings.ratingsdata.model.EntitiesPayload;
import com.spglobal.ratings.ratingsdata.model.UspfFilterData;
import com.spglobal.ratings.ratingsdata.model.UspfFilterDropdownData;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.http.HttpHeaders;
import org.springframework.test.context.junit.jupiter.SpringExtension;

import com.spglobal.ratings.ratingsdata.dao.ScoresAndModifiersPublicDao;
import com.spglobal.ratings.ratingsdata.entity.PeerSuppliersPortfolioContents;
import com.spglobal.ratings.ratingsdata.entity.ScoresAndModifiersPublic;
import com.spglobal.ratings.ratingsdata.entity.UspfPeerSuppliersPortfolioContents;
import com.spglobal.ratings.ratingsdata.util.RatingsDataUtil;

@ExtendWith({SpringExtension.class, MockitoExtension.class})
public class ScoresAndModifiersPublicServiceTest {
	
	@InjectMocks
	ScoresAndModifiersPublicService scoresAndModifiersPublicService;
	
	@Mock
	RatingsDataUtil ratingsUtil;
	
	@Mock
	ScoresAndModifiersPublicDao scoresAndModifiersDao;
	
	List<ScoresAndModifiersPublic> sms;
	ScoresAndModifiersPublic sm;
	
	@BeforeEach
	public void init() throws Exception {
		
		MockitoAnnotations.initMocks(this);

		sms = new ArrayList<ScoresAndModifiersPublic>();
		// sm = new ScoresAndModifiers("CORP", "Business Risk Profile", "Satisfactory", "Scores", "Y", "100004");
        sm = new ScoresAndModifiersPublic();
        sm.setAnalyticCaseType("CORP");
        sm.setScoreName("Business Risk Profile");
        sm.setScoreValue("Satisfactory");
        sm.setScoreValueDesc("Satisfactory");
        sm.setScoreGroup("Scores");
        sm.setHighlightFlag("Y");
        sm.setEntityId("100004");
		sms.add(sm);
	}
	
	@Test
	public void getScoresAndModifiersTest() {
		System.out.println("@ScoresAndModifiersPublicServiceTest: In getScoresAndModifiersTest method");

		String entityId = "100004";
		String subsector = "CORP";

		when(scoresAndModifiersDao.getScoresAndModifiers(entityId, subsector)).thenReturn(sms);
		List<ScoresAndModifiersPublic> e = scoresAndModifiersPublicService.getScoresAndModifiers(entityId, subsector);

		assertEquals(e, sms);
	}

	@Test
	public void getScoresAndModifiersEmptyTest() {
		System.out.println("@ScoresAndModifiersPublicServiceTest: In getScoresAndModifiersEmptyTest method");

		String entityId = "100004";
		String subsector = "CORP";

		when(scoresAndModifiersDao.getScoresAndModifiers(entityId, subsector)).thenReturn(new ArrayList<ScoresAndModifiersPublic>());
		List<ScoresAndModifiersPublic> e = scoresAndModifiersPublicService.getScoresAndModifiers(entityId, subsector);	
		assertNull(e);
	}

	@Test
	public void getScoresAndModifiersNullTest() {
		System.out.println("@ScoresAndModifiersPublicServiceTest: In getScoresAndModifiersNullTest method");

		String entityId = "100004";
		String subsector = "CORP";

		when(scoresAndModifiersDao.getScoresAndModifiers(entityId, subsector)).thenReturn(null);
		List<ScoresAndModifiersPublic> e = scoresAndModifiersPublicService.getScoresAndModifiers(entityId, subsector);	
		assertNull(e);
	}

	@Test
	public void getPeerScoresAndModifiersTest()
	{
		List<ScoresAndModifiersPublic> scoresList = new ArrayList<ScoresAndModifiersPublic>();
		List<String> entites= Arrays.asList("100004");
		EntitiesPayload s = new EntitiesPayload();
		s.setKeyInstns(entites);
		s.setPcFlag(0);
		s.setSubSector("CORP");
		s.setHomeEntity("100369");
		s.setEntityIds(List.of("12323","456456"));
		scoresList = scoresAndModifiersPublicService.getPeerScoresAndModifiers(s);
		assertNotNull(scoresList);
	}
//	@Test
//	public void getRatingCriteriaArticlesFailureTest5() throws Exception {
////		Mockito.when(userEntitlementCheck.isUserEntitledToPrivateRatings(any())).thenReturn(1);
////		Mockito.when(userEntitlementCheck.isUserEntitledToEntity(anyString(), any())).thenReturn(1);
////		Mockito.when(deriveRatingDao.getDeriveRatingByRatingDetailId(43379480L))
////				.thenThrow(new RuntimeException("NullPointer Exception"));
//		List<String> entites= Arrays.asList("100004");
//		Assertions.assertThrows(Exception.class, () -> {
//			scoresAndModifiersPublicService.getPeerScoresAndModifiers(entites);
//		});
	//}
	
	@Test
	public void getPeerSuppliersPortfolioContentsTestwithValidResponse()
	{
		List<PeerSuppliersPortfolioContents> portfolioList = new ArrayList<PeerSuppliersPortfolioContents>();
		List<String> dummyList = new ArrayList<String>(123456);
		Mockito.when(scoresAndModifiersDao.getPeerSuppliersPortfolioContents(any(), any())).thenReturn(portfolioList);
		List<PeerSuppliersPortfolioContents> list = scoresAndModifiersPublicService.getPeerSuppliersPortfolioContents(List.of("112233"),dummyList ,dummyList);
		assertNotNull(list);
	}
	@Test
	public void getPeerSuppliersPortfolioContentsTestwithNullResponse()
	{
		List<String> dummyList = new ArrayList<String>(123456);
		Mockito.when(scoresAndModifiersDao.getPeerSuppliersPortfolioContents(any(),any())).thenReturn(null);
		List<PeerSuppliersPortfolioContents> list = scoresAndModifiersPublicService.getPeerSuppliersPortfolioContents(List.of("112233"),dummyList,dummyList);
		assertNull(list);
	}
	@Test
	public void getUspfPeerSuppliersPortfolioContentsTestwithValidResponse()
	{
		List<UspfPeerSuppliersPortfolioContents> portfolioList = new ArrayList<UspfPeerSuppliersPortfolioContents>();
		UspfFilterData uspfFilterData = new UspfFilterData();
		uspfFilterData.setSector("POOLED");
		uspfFilterData.setSubSector("Transporation");
		uspfFilterData.setGeography(Arrays.asList("AZ", "AL"));
		uspfFilterData.setRatingType("STDLONG");
		uspfFilterData.setRatingScale(Arrays.asList("A+", "A--"));
		Mockito.when(scoresAndModifiersDao.getUspfPeerSuppliersPortfolioContents(uspfFilterData)).thenReturn(portfolioList);
		List<UspfPeerSuppliersPortfolioContents> list = scoresAndModifiersPublicService.getUspfPeerSuppliersPortfolioContents(uspfFilterData);
		assertNotNull(list);
	}
	@Test
	public void getUspfPeersPortfolioDataServiceTestWithResponse()
	{
		List<UspfPeerSuppliersPortfolioContents> portfolioList = new ArrayList<UspfPeerSuppliersPortfolioContents>();
		List<Long> keyRatingInstIds = new ArrayList<>();
    	keyRatingInstIds.add(22685L);
    	keyRatingInstIds.add(29229L);
		Mockito.when(scoresAndModifiersDao.getUspfPeersPortfolioData(keyRatingInstIds)).thenReturn(portfolioList);
		List<UspfPeerSuppliersPortfolioContents> list = scoresAndModifiersPublicService.getUspfPeersPortfolioData(keyRatingInstIds);
		assertNotNull(list);
	}
	@Test
	public void getUspfPeerSuppliersPortfolioContentsTestwithNullResponse()
	{
		UspfFilterData uspfFilterData = new UspfFilterData();
		uspfFilterData.setSector("POOLED");
		uspfFilterData.setSubSector("Transporation");
		uspfFilterData.setGeography(Arrays.asList("AZ", "AL"));
		uspfFilterData.setRatingType("STDLONG");
		uspfFilterData.setRatingScale(Arrays.asList("A+", "A--"));
		Mockito.when(scoresAndModifiersDao.getUspfPeerSuppliersPortfolioContents(uspfFilterData)).thenReturn(null);
		List<UspfPeerSuppliersPortfolioContents> list = scoresAndModifiersPublicService.getUspfPeerSuppliersPortfolioContents(uspfFilterData);
		assertNull(list);
	}
	
	@Test
	public void getuspfPeersFiltersDataTestwithValidResponse() {
		UspfFilterDropdownData uspfFilterDropdownData = new UspfFilterDropdownData();
		Mockito.when(scoresAndModifiersDao.getuspfPeersFiltersData()).thenReturn(uspfFilterDropdownData);
		UspfFilterDropdownData list = scoresAndModifiersPublicService.getuspfPeersFiltersData();
		assertNotNull(list);
	}

	@Test
	public void getuspfPeersFiltersDataTestwithNullResponse() {
		Mockito.when(scoresAndModifiersDao.getuspfPeersFiltersData()).thenReturn(null);
		UspfFilterDropdownData list = scoresAndModifiersPublicService.getuspfPeersFiltersData();
		assertNull(list);
	}
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\test\java\com\spglobal\ratings\ratingsdata\service\ScoresAndModifiersServiceTest.java

package com.spglobal.ratings.ratingsdata.service;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.test.context.junit.jupiter.SpringExtension;

import com.spglobal.ratings.ratingsdata.dao.ScoresAndModifiersDao;
import com.spglobal.ratings.ratingsdata.entity.ScoresAndModifiers;
import com.spglobal.ratings.ratingsdata.util.RatingsDataUtil;

@ExtendWith({SpringExtension.class, MockitoExtension.class})
public class ScoresAndModifiersServiceTest {
	
	@InjectMocks
	ScoresAndModifiersService scoresAndModifiersService;
	
	@Mock
	RatingsDataUtil ratingsUtil;
	
	@Mock
	ScoresAndModifiersDao scoresAndModifiersDao;
	
	@Mock
	UserEntitlementCheckImpl userEntitlementCheck;
	
	List<ScoresAndModifiers> scoresAndModifiers = null;
	ScoresAndModifiers smPub;
	ScoresAndModifiers smPvt;
	ScoresAndModifiers smConf;
	ScoresAndModifiers smSov;
	Map<String,List<Long>> userEntitlement = null;
	
	@BeforeEach
	public void init() throws Exception {
		
		MockitoAnnotations.initMocks(this);
		scoresAndModifiers = new ArrayList<ScoresAndModifiers>();
		smPub = new ScoresAndModifiers();
		smPub.setEntityId("100751");
        smPub.setAnalyticCaseType("CORP");
        smPub.setScoreName("Anchor");
        smPub.setScoreValue("bbb");
        smPub.setScoreValueDesc("bbb");
        smPub.setScoreGroup("Scores");
        smPub.setHighlightFlag("Y");
        smPub.setConfidentialInd("N");
        smPub.setConfidentialCategoryCode(null);
        scoresAndModifiers.add(smPub);
        
        smPvt = new ScoresAndModifiers();
        smPvt.setConfidentialInd("Y");
        smPvt.setConfidentialCategoryCode("PVT");
        scoresAndModifiers.add(smPvt);
        
        smConf = new ScoresAndModifiers();
        smConf.setConfidentialInd("Y");
        smConf.setConfidentialCategoryCode("CIR");
        scoresAndModifiers.add(smConf);
        
        smSov = new ScoresAndModifiers();
        smSov.setAnalyticCaseType("SOV");
        scoresAndModifiers.add(smSov);

		userEntitlement = new HashMap<String, List<Long>>();
		List<Long> osslist = new ArrayList<Long>();
		osslist.add(1L);
		osslist.add(90L);
		List<Long> entityList = new ArrayList<Long>();
		entityList.add(4004341L);
		userEntitlement.put("ossList", osslist);
		userEntitlement.put("entitledEntities", entityList);
	}
	
	@Test
	public void getScoresAndModifiersTest() {
		System.out.println("@ScoresAndModifiersServiceTest:In getScoresAndModifiersTest method");
		
		String entityId = "100751";
		String subSector = "CORP";
		Long snlId = Long.valueOf(4004341);
		Integer privConfOssCheck = 1;
		Integer entityEntitlementCheck = 1;
		
		List<ScoresAndModifiers> scores = new ArrayList<ScoresAndModifiers>();
		when(userEntitlementCheck.entitlementChecksForUser("authHeader")).thenReturn(userEntitlement);
		when(userEntitlementCheck.isUserEntitledToPrivateRatings(userEntitlement, "authHeader")).thenReturn(privConfOssCheck);
		when(userEntitlementCheck.isUserEntitledToEntity(snlId, userEntitlement)).thenReturn(entityEntitlementCheck);
		when(scoresAndModifiersDao.getScoresAndModifiers(entityId, subSector)).thenReturn(scoresAndModifiers);
		scores = scoresAndModifiersService.getScoresAndModifiers(entityId, subSector, snlId, "authHeader");
		assertEquals(scores, scoresAndModifiers);
	}

}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\test\java\com\spglobal\ratings\ratingsdata\service\SectorResearchServiceTest.java

package com.spglobal.ratings.ratingsdata.service;

import com.spglobal.ratings.ratingsdata.entity.SectorsArticleEntity;
import com.spglobal.ratings.ratingsdata.repository.SectorsArticleRepository;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.test.context.junit.jupiter.SpringExtension;

import java.util.ArrayList;
import java.util.List;

import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.mockito.Mockito.when;

@ExtendWith({SpringExtension.class, MockitoExtension.class})
public class SectorResearchServiceTest {

    @InjectMocks
    SectorResearchService sectorResearchService;

    @MockBean
    SectorsArticleRepository sectorsArticleRepository;

    @Test
    void getDashboardSectorResearchArticles() throws Exception {
        when(sectorsArticleRepository.getDashboardSectorArticles(Mockito.anyString(), Mockito.anyInt())).thenReturn(new ArrayList<>());
        List<SectorsArticleEntity> actualResult = sectorResearchService.getDashboardSectorResearchArticles("CORP", 10);
        assertNotNull(actualResult);
    }

    @Test
    void getDashboardSectorResearchArticles_1() throws Exception {
        when(sectorsArticleRepository.getDashboardSectorArticles(Mockito.anyString(), Mockito.anyInt())).thenReturn(new ArrayList<>());
        List<SectorsArticleEntity> actualResult = sectorResearchService.getDashboardSectorResearchArticles("CORP", null);
        assertNotNull(actualResult);
    }
}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\test\java\com\spglobal\ratings\ratingsdata\service\SovereignResearchServiceTest.java

package com.spglobal.ratings.ratingsdata.service;

import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.data.domain.Sort;
import org.springframework.test.context.junit.jupiter.SpringExtension;

import com.spglobal.ratings.ratingsdata.entity.SovereignBICRAScores;
import com.spglobal.ratings.ratingsdata.entity.SovereignCountryEntity;
import com.spglobal.ratings.ratingsdata.entity.SovereignCountrySummary;
import com.spglobal.ratings.ratingsdata.entity.SovereignDashboard;
import com.spglobal.ratings.ratingsdata.entity.SovereignFSIICRA;
import com.spglobal.ratings.ratingsdata.entity.SovereignFSMajorFactors;
import com.spglobal.ratings.ratingsdata.entity.SovereignPeerBICRAScores;
import com.spglobal.ratings.ratingsdata.entity.SovereignRiskEntity;
import com.spglobal.ratings.ratingsdata.entity.SovereignTopFiveFinInst;
import com.spglobal.ratings.ratingsdata.repository.SovereignBICRAScoreRepository;
import com.spglobal.ratings.ratingsdata.repository.SovereignCountryRepository;
import com.spglobal.ratings.ratingsdata.repository.SovereignDashboadRepository;
import com.spglobal.ratings.ratingsdata.repository.SovereignFSIICRARepository;
import com.spglobal.ratings.ratingsdata.repository.SovereignFSMajorFactorsRepository;
import com.spglobal.ratings.ratingsdata.repository.SovereignPeerBICRARepository;
import com.spglobal.ratings.ratingsdata.repository.SovereignRiskRepository;
import com.spglobal.ratings.ratingsdata.repository.SovereignSummaryRepository;
import com.spglobal.ratings.ratingsdata.repository.SovereignTopFiveFinInstnsepo;

@ExtendWith({SpringExtension.class, MockitoExtension.class})
public class SovereignResearchServiceTest {
	
	@InjectMocks
	SovereignResearchService sovereignResearchService;
	
	@MockBean
	SovereignCountryRepository sovCountryRepository;
	
	@MockBean
	SovereignSummaryRepository sovSummaryRepository;
	
	@MockBean
	SovereignRiskRepository riskRepository;
	
	@MockBean
	SovereignTopFiveFinInstnsepo topfiveBICRARepo;
	
	@MockBean
	SovereignBICRAScoreRepository bicraScoreRepo;
	
	@MockBean
	SovereignPeerBICRARepository peerbicraScoreRepo;
	
	@MockBean
	SovereignFSMajorFactorsRepository majorFactorRepo;
	
	@MockBean
	SovereignFSIICRARepository iicraRepo;
	
	@MockBean
	SovereignDashboadRepository dashboardRepo;
	

	@BeforeEach
	public void init() throws Exception {		
		MockitoAnnotations.initMocks(this);		
	}
	
	@Test
	public void test_sov_summary() throws Exception {	
		SovereignCountrySummary summary = new SovereignCountrySummary();
		summary.setCountryCode("US");
		summary.setDisplayOrder(0);
		summary.setSummaryText("TEST TEST");
		summary.setTitle("Regional Spotlight");
		List<SovereignCountrySummary> summaryList = new ArrayList<SovereignCountrySummary>();
		when(sovSummaryRepository.findByCountryCode("US")).thenReturn(summaryList);
		List<SovereignCountrySummary> summaryLt =  sovereignResearchService.getSovereignCountrySummary("US");
		assertNotNull(summaryLt);
	}
	
	@Test
	public void test_sov_country() throws Exception {	
		SovereignCountryEntity country = new SovereignCountryEntity();
		country.setCountryCode("US");
		country.setCountryName("USA");
		country.setEntityId(110170L);
		List<SovereignCountryEntity> countryList = new ArrayList<SovereignCountryEntity>();
		countryList.add(country);
		when(sovCountryRepository.getCountryList()).thenReturn(countryList);
		List<SovereignCountryEntity> summaryLt =  sovereignResearchService.getSovereignCountries();
		assertNotNull(summaryLt);
	}
	
	@Test
	public void test_sov_risk_data() throws Exception {	
		
		SovereignRiskEntity risk = new SovereignRiskEntity();
		risk.setCountryCode("US");
		risk.setDisplayOrder(0);
		risk.setDataGroup("SRI");
		risk.setGridName("Economic Data");
		risk.setScoreName("Nominal GDP (bil. US$)");
		risk.setScoreValue("3568.47");
		risk.setFinancialYear("2023F");
		List<SovereignRiskEntity> riskList = new ArrayList<SovereignRiskEntity>();
		riskList.add(risk);
		when(riskRepository.findByCountryCode("US")).thenReturn(riskList);
		List<SovereignRiskEntity> riskData =  sovereignResearchService.getSovereignRiskIndicatorsData("US");
		assertNotNull(riskData);
	}
	
	@Test
	public void test_topfive_bicra_data() throws Exception {			
		SovereignTopFiveFinInst topFiveBicra = new SovereignTopFiveFinInst();
		topFiveBicra.setCountryCode("US");
		topFiveBicra.setDisplayOrder(0);
		topFiveBicra.setAssetsCurrency("USD");
		topFiveBicra.setAssets(13234332L);
		topFiveBicra.setCreditRating("");
		topFiveBicra.setSysImp("High");
		topFiveBicra.setFinancialInsName("JPMorgan Chase & Co.");	
		List<SovereignTopFiveFinInst> topFiveList = new ArrayList<SovereignTopFiveFinInst>();
		topFiveList.add(topFiveBicra);
		when(topfiveBICRARepo.findByCountryCode("US")).thenReturn(topFiveList);
		List<SovereignTopFiveFinInst> topFiveBicraLt =  sovereignResearchService.getTopFiveFinInsData("US");
		assertNotNull(topFiveBicraLt);
	}
	
	@Test
	public void test_bicra_scores() throws Exception {	
		SovereignBICRAScores bicraScores = new SovereignBICRAScores();
		bicraScores.setCountryCode("US");
		bicraScores.setScoreName("BICRA Group");
		bicraScores.setScoreValue("3");
		bicraScores.setHierarchyLevel(0);
		
		List<SovereignBICRAScores> scoreList = new ArrayList<SovereignBICRAScores>();
		scoreList.add(bicraScores);
		when(bicraScoreRepo.findByCountryCode("US")).thenReturn(scoreList);
		List<SovereignBICRAScores> bicraScoreLt =  sovereignResearchService.getBICRAScores("US");
		assertNotNull(bicraScoreLt);
	}
	
	@Test
	public void test_peer_bicra_scores() throws Exception {	
		SovereignPeerBICRAScores peerbicraScores = new SovereignPeerBICRAScores();
		peerbicraScores.setCountryCode("US");
		peerbicraScores.setScoreName("BICRA Group");
		peerbicraScores.setScoreValue("3");
		peerbicraScores.setPeerCountryName("IN");
		peerbicraScores.setAssessmentDate("2023-09-10 12:22:33");
		
		List<SovereignPeerBICRAScores> scoreList = new ArrayList<SovereignPeerBICRAScores>();
		scoreList.add(peerbicraScores);
		when(peerbicraScoreRepo.findByCountryCode("US")).thenReturn(scoreList);
		List<SovereignPeerBICRAScores> bicraScoreLt =  sovereignResearchService.getPeerBICRAScores("US","");
		assertNotNull(bicraScoreLt);
	}
	
	@Test
	public void test_peer_bicra_scores_cndomain() throws Exception {	
		SovereignPeerBICRAScores peerbicraScores = new SovereignPeerBICRAScores();
		peerbicraScores.setCountryCode("US");
		peerbicraScores.setScoreName("BICRA Group");
		peerbicraScores.setScoreValue("3");
		peerbicraScores.setPeerCountryName("SG");
		peerbicraScores.setAssessmentDate("2023-09-10 12:22:33");
		
		List<SovereignPeerBICRAScores> scoreList = new ArrayList<SovereignPeerBICRAScores>();
		scoreList.add(peerbicraScores);
		when(peerbicraScoreRepo.getPeerBICRAForCNDomain("SG")).thenReturn(scoreList);
		List<SovereignPeerBICRAScores> bicraScoreLt =  sovereignResearchService.getPeerBICRAScores("SG","CN");
		assertNotNull(bicraScoreLt);
	}
	
	@Test
	public void test_fs_majorfactors() throws Exception {	
		SovereignFSMajorFactors majorFactors = new SovereignFSMajorFactors();
		List<SovereignFSMajorFactors> list = new ArrayList<SovereignFSMajorFactors>();
		majorFactors.setCountryCode("US");
		majorFactors.setGridName("Major Factors");
		majorFactors.setDataElementName("Strengths");		
		majorFactors.setDataValue("Banks' sound funding profiles with stable core customer deposits.");
		majorFactors.setDisplayOrder(1);		
		list.add(majorFactors);		
		majorFactors.setCountryCode("US");
		majorFactors.setGridName("Major Factors");
		majorFactors.setDataElementName("Weaknesses");		
		majorFactors.setDataValue("Banks face very high credit risks.");
		majorFactors.setDisplayOrder(1);
		list.add(majorFactors);		

		when(majorFactorRepo.findByCountryCode("US")).thenReturn(list);
		List<SovereignFSMajorFactors> bicraScoreLt =  sovereignResearchService.getMajorFactors("US");
		assertNotNull(bicraScoreLt);
	}
	
	@Test
	public void test_fs_iicra() throws Exception {	
		SovereignFSIICRA iicra = new SovereignFSIICRA();
		List<SovereignFSIICRA> list = new ArrayList<SovereignFSIICRA>();
		iicra.setCountryCode("US");
		iicra.setTitle("LIFE INSURANCE");		
		iicra.setIndicator("Country Risk");
		iicra.setIndicatorValue("Very Low Risk");		
		iicra.setIndicatorOrder(1);
		iicra.setSortOrder(1);
		list.add(iicra);		
		iicra.setCountryCode("US");
		iicra.setTitle("HEALTH INSURANCE");		
		iicra.setIndicator("Industry Risk");
		iicra.setIndicatorValue("Very Low");		
		iicra.setIndicatorOrder(2);
		iicra.setSortOrder(3);
		list.add(iicra);		

		when(iicraRepo.findByCountryCode("US")).thenReturn(list);
		List<SovereignFSIICRA> bicraScoreLt =  sovereignResearchService.getIICRAIndicators("US");
		assertNotNull(bicraScoreLt);
	}
	
	
	@Test
	public void test_dashboard() throws Exception {	
		SovereignDashboard dashboard = new SovereignDashboard();
		List<SovereignDashboard> list = new ArrayList<SovereignDashboard>();
		dashboard.setCountryName("Australia");
		dashboard.setTitle("Summary");		
		dashboard.setScoreName("Test Test");
		dashboard.setScoreValue(null);		
		list.add(dashboard);		

		when(dashboardRepo.getSovDashBoardData(Mockito.anyString())).thenReturn(list);
		List<SovereignDashboard> data =  sovereignResearchService.getSovDashboardData("USA",null);
		assertNotNull(data);
	}
	
	@Test
	public void test_dashboard_entity() throws Exception {	
		SovereignDashboard dashboard = new SovereignDashboard();
		List<SovereignDashboard> list = new ArrayList<SovereignDashboard>();
		dashboard.setCountryName("");
		dashboard.setTitle("Sovereign Risk");		
		dashboard.setScoreName("Foreign Currency LT \\ CreditWatch/Outlook");
		dashboard.setScoreValue("NR \\ NR");		
		list.add(dashboard);		

		when(dashboardRepo.getDashboardDataBasedOnEntity(Mockito.anyLong())).thenReturn(list);
		List<SovereignDashboard> data =  sovereignResearchService.getSovDashboardData("",Optional.of(5039L));
		assertNotNull(data);
	}

}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\test\java\com\spglobal\ratings\ratingsdata\service\UspfRatingsServiceTest.java

package com.spglobal.ratings.ratingsdata.service;

import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Optional;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.test.context.junit.jupiter.SpringExtension;

import com.spglobal.ratings.ratingsdata.dao.IssuesMaturitiesUSPFPubDao;
import com.spglobal.ratings.ratingsdata.entity.IssuesMaturitiesUSPFPub;
import com.spglobal.ratings.ratingsdata.entity.UspfAnalyticalContacts;
import com.spglobal.ratings.ratingsdata.entity.UspfCurrentRatings;
import com.spglobal.ratings.ratingsdata.entity.UspfDashboardRatings;
import com.spglobal.ratings.ratingsdata.entity.UspfNonIssuerBasedRatingHisotry;
import com.spglobal.ratings.ratingsdata.entity.UspfNonIssuerBasedRatings;
import com.spglobal.ratings.ratingsdata.entity.UspfNonIssuerBasedRatingsIssue;
import com.spglobal.ratings.ratingsdata.entity.UspfRatingsRoles;
import com.spglobal.ratings.ratingsdata.entity.UspfRelatedArticles;
import com.spglobal.ratings.ratingsdata.entity.UspfRelatedCriteria;
import com.spglobal.ratings.ratingsdata.model.USPFMinMaxDates;
import com.spglobal.ratings.ratingsdata.model.UspfNonIssuerBasedFilterData;
import com.spglobal.ratings.ratingsdata.repository.UspfAnalyticalContactsRepository;
import com.spglobal.ratings.ratingsdata.repository.UspfCurrentRatingsRepository;
import com.spglobal.ratings.ratingsdata.repository.UspfDashboardRatingsRepository;
import com.spglobal.ratings.ratingsdata.repository.UspfNIBRatingsHistoryRepository;
import com.spglobal.ratings.ratingsdata.repository.UspfNIBRatingsIssueNameRepository;
import com.spglobal.ratings.ratingsdata.repository.UspfNIBRatingsRepository;
import com.spglobal.ratings.ratingsdata.repository.UspfRatingsRoleRepository;
import com.spglobal.ratings.ratingsdata.repository.UspfRelatedArticlesRepository;
import com.spglobal.ratings.ratingsdata.repository.UspfRelatedCriteriaRepository;

@ExtendWith({SpringExtension.class, MockitoExtension.class})
public class UspfRatingsServiceTest {
	
	@InjectMocks
	UspfRatingsService uspfRatingService;
	
	@MockBean
	UspfCurrentRatingsRepository currentRatingsRepo;
	
	@MockBean
	UspfDashboardRatingsRepository dashboardRatingsRepo;
	
	@MockBean
	UspfRatingsRoleRepository ratingsRoleRepo;
	
	@MockBean
	UspfRelatedArticlesRepository artilcesRepo;
	
	@MockBean
	UspfNIBRatingsHistoryRepository nibRatingsHistoryRepo;
	
	@MockBean
	UspfNIBRatingsRepository nibRatingsRepo;
	
	@MockBean
	UspfNIBRatingsIssueNameRepository nibRatingsIssueNameRepo;
	
	@MockBean
	UspfAnalyticalContactsRepository analyticalContactRepo;
	
	@MockBean
	UspfRelatedCriteriaRepository relatedCriteriaRepo;
	
	@MockBean
	IssuesMaturitiesUSPFPubDao iandMUspfDao;
	
	@Test
	public void test_uspf_currentRatings() throws Exception {	
		UspfCurrentRatings uspfCR = new UspfCurrentRatings();
		uspfCR.setEntityId(5039L);
		uspfCR.setSector("Local Government");
		uspfCR.setSubSector("GO Municipalities & Counties");
		uspfCR.setSecurityId(61588L);
		uspfCR.setSecurityName("Rochester MN Unlimited TAx Appropriation");
		uspfCR.setSecurityInstrumentId(1395115L);
		uspfCR.setRatingType("Local Currency LT");
		uspfCR.setRatingDetailId(43260503L);
		uspfCR.setRating("AA+");
		uspfCR.setRatingDate("2020-02-26 00:00:00");
		uspfCR.setLastReviewDate("2023-04-19 09:43:55");
		uspfCR.setAction("New Rating | CreditWatch/Outlook");
		uspfCR.setCreditWatchOutlook("Stable");
		uspfCR.setCreditWatchOutlookDate("2023-04-19 09:43:55");
		uspfCR.setLatestArticleDate("2023-04-19 09:43:55");
		uspfCR.setArticleId(2969165L);
		//uspfCR.setRoleCode("ISSUER");
		List<UspfCurrentRatings> ratingData = new ArrayList<UspfCurrentRatings>();
		ratingData.add(uspfCR);
		when(currentRatingsRepo.getCurrentRatings(5039L,61588L,null)).thenReturn(ratingData);
		List<UspfCurrentRatings> ratingDataLt =  uspfRatingService.getCurrentRatings(5039L,null,61588L,null);
		assertNotNull(ratingDataLt);
	}
	
	@Test
	public void test_uspf_currentRatings_RoleCode() throws Exception {	
		UspfCurrentRatings uspfCR = new UspfCurrentRatings();
		uspfCR.setEntityId(5039L);
		uspfCR.setSector("Local Government");
		uspfCR.setSubSector("GO Municipalities & Counties");
		uspfCR.setSecurityId(61588L);
		uspfCR.setSecurityName("Rochester MN Unlimited TAx Appropriation");
		uspfCR.setSecurityInstrumentId(1395115L);
		uspfCR.setRatingType("Local Currency LT");
		uspfCR.setRatingDetailId(43260503L);
		uspfCR.setRating("AA+");
		uspfCR.setRatingDate("2020-02-26 00:00:00");
		uspfCR.setLastReviewDate("2023-04-19 09:43:55");
		uspfCR.setAction("New Rating | CreditWatch/Outlook");
		uspfCR.setCreditWatchOutlook("Stable");
		uspfCR.setCreditWatchOutlookDate("2023-04-19 09:43:55");
		uspfCR.setLatestArticleDate("2023-04-19 09:43:55");
		uspfCR.setArticleId(2969165L);
		//uspfCR.setRoleCode("ISSUER");
		List<UspfCurrentRatings> ratingData = new ArrayList<UspfCurrentRatings>();
		ratingData.add(uspfCR);
		when(currentRatingsRepo.getCurrentRatingsBasedonRoleCode(5039L,Arrays.asList("ISSUER"))).thenReturn(ratingData);
		List<UspfCurrentRatings> ratingDataLt =  uspfRatingService.getCurrentRatings(5039L,Optional.of(Arrays.asList("ISSUER")),61588L,"STDLONG");
		assertNotNull(ratingDataLt);
	}
	
	@Test
	public void test_uspf_dashboardRatings() throws Exception {	
		UspfDashboardRatings uspfDR = new UspfDashboardRatings();
		uspfDR.setEntityId(5039L);
		uspfDR.setSector("Local Government");
		uspfDR.setSubSector("GO Municipalities & Counties");
		uspfDR.setSecurityId(61588L);
		uspfDR.setSecurityName("Rochester MN Unlimited TAx Appropriation");
		uspfDR.setSecurityInstrumentId(1395115L);
		uspfDR.setRatingType("Local Currency LT");
		uspfDR.setRatingDetailId(43260503L);
		uspfDR.setRating("AA+");
		uspfDR.setCreditWatchOutlook("Stable");
		uspfDR.setRatingTypeInd("L");

		List<UspfDashboardRatings> ratingData = new ArrayList<UspfDashboardRatings>();
		ratingData.add(uspfDR);
		when(dashboardRatingsRepo.findByEntityId(5039L)).thenReturn(ratingData);
		List<UspfDashboardRatings> ratingDataLt =  uspfRatingService.getDashBoardRatings(5039L);
		assertNotNull(ratingDataLt);
	}
	
	@Test
	public void test_uspf_ratingRoles() throws Exception {	
		UspfRatingsRoles role = new UspfRatingsRoles();
		role.setRoleCode("ISSUER");
		role.setRoleDesc("Issuer");
		List<UspfRatingsRoles> ratingData = new ArrayList<UspfRatingsRoles>();
		ratingData.add(role);
		when(ratingsRoleRepo.findByRoleCode()).thenReturn(ratingData);
		List<UspfRatingsRoles> ratingDataLt =  uspfRatingService.getRoles();
		assertNotNull(ratingDataLt);
	}
	
	
	@Test
	public void test_uspf_reletadArticles() throws Exception {	
		UspfRelatedArticles articles = new UspfRelatedArticles();
		articles.setRelateId(1305646L);
		articles.setArticleId(2974886L);
		articles.setArticleType("Full Analysis");
		articles.setAuthor("S&P GLobal Ratings");
		articles.setTitle("Summary: Mayo Clinic, Minnesota; CP; Hospital; System");
		List<UspfRelatedArticles> articleLt = new ArrayList<UspfRelatedArticles>();
		articleLt.add(articles);
		when(artilcesRepo.getRelatedArtciles(Mockito.anyLong(),Mockito.anyString(),Mockito.anyString())).thenReturn(articleLt);
		List<UspfRelatedArticles> ratingDataLt =  uspfRatingService.getRelatedArticles(1305646L,Arrays.asList(),"","");
		assertNotNull(ratingDataLt);
	}
	
	@Test
	public void test_uspf_reletadArticles_witType() throws Exception {	
		UspfRelatedArticles articles = new UspfRelatedArticles();
		articles.setRelateId(1305646L);
		articles.setArticleId(2974886L);
		articles.setArticleType("Full Analysis");
		articles.setAuthor("S&P GLobal Ratings");
		articles.setTitle("Summary: Mayo Clinic, Minnesota; CP; Hospital; System");
		List<UspfRelatedArticles> articleLt = new ArrayList<UspfRelatedArticles>();
		articleLt.add(articles);
		when(artilcesRepo.getRelatedArtcilesWithArticleType(Mockito.anyLong(),Mockito.anyList(),Mockito.anyString(),Mockito.anyString())).thenReturn(articleLt);
		List<UspfRelatedArticles> ratingDataLt =  uspfRatingService.getRelatedArticles(1305646L,Arrays.asList(7,13),"","");
		assertNotNull(ratingDataLt);
	}
	
	@Test
	public void test_uspf_dashboard_ratingArticles() throws Exception {	
		UspfRelatedArticles articles = new UspfRelatedArticles();
		articles.setRelateId(1305646L);
		articles.setArticleId(2974886L);
		articles.setArticleType("Full Analysis");
		articles.setAuthor("S&P GLobal Ratings");
		articles.setTitle("Summary: Mayo Clinic, Minnesota; CP; Hospital; System");
		List<UspfRelatedArticles> articleLt = new ArrayList<UspfRelatedArticles>();
		articleLt.add(articles);
		when(artilcesRepo.getDashboardArticles(1305646L)).thenReturn(articleLt);
		List<UspfRelatedArticles> ratingDataLt =  uspfRatingService.getDashboardArticles(1305646L);
		assertNotNull(ratingDataLt);
	}
	
	@Test
	public void test_uspf_dashboard_ratingPeerArticles() throws Exception {	
		UspfRelatedArticles articles = new UspfRelatedArticles();
		articles.setRelateId(1305646L);
		articles.setArticleId(2974886L);
		articles.setArticleType("Full Analysis");
		articles.setAuthor("S&P GLobal Ratings");
		articles.setTitle("Summary: Mayo Clinic, Minnesota; CP; Hospital; System");
		List<UspfRelatedArticles> articleLt = new ArrayList<UspfRelatedArticles>();
		articleLt.add(articles);
		when(artilcesRepo.getDashboardPeerArticles(Arrays.asList(70008L,123213L))).thenReturn(articleLt);
		List<UspfRelatedArticles> ratingDataLt =  uspfRatingService.getDashboardPeerArticles(Arrays.asList(70008L,123213L));
		assertNotNull(ratingDataLt);
	}
	
	@Test
	public void test_uspf_nib_ratingsHistory() throws Exception {	
		UspfNonIssuerBasedRatingHisotry ratingHistory = new UspfNonIssuerBasedRatingHisotry();
		ratingHistory.setInstrumentId(28078L);
		ratingHistory.setInstrDetailId(42422L);
		ratingHistory.setRatingDetailId(494501L);
		ratingHistory.setRatingTypeCode("STDLONG");
		ratingHistory.setRatingType("Local Currency LT");
		ratingHistory.setRating("AAA");
		ratingHistory.setAction("New Rating");
		List<UspfNonIssuerBasedRatingHisotry> list = new ArrayList<UspfNonIssuerBasedRatingHisotry>();
		list.add(ratingHistory);
		when(nibRatingsHistoryRepo.getRatingHistoryData(28078L,42422L,"STDLONG")).thenReturn(list);
		List<UspfNonIssuerBasedRatingHisotry> ratingDataLt =  uspfRatingService.getNonIssuerBasedRatingHistory(28078L,42422L,"STDLONG");
		assertNotNull(ratingDataLt);
	}
	
	@Test
	public void test_uspf_nib_ratings() throws Exception {	
		UspfNonIssuerBasedRatings ratings = new UspfNonIssuerBasedRatings();
		ratings.setEntityId(5039L);
		//ratings.setRoleCode("ISSUER");
		ratings.setIssueName("US$15.0 mil var rate dem multifam hsg rev bnds (Village Capital Corporation) (Bella Grove Apts) ser 2019A dtd 05/08/2019 due 05/01/2061");
		ratings.setCusip("771594AX6");
		ratings.setCategory("Structured");
		ratings.setMaturityDate("5/1/2061");
		ratings.setInstrumentId(28078L);
		ratings.setInstrDetailId(42422L);
		ratings.setRatingDetailId(494501L);
		ratings.setRatingTypeCode("STDLONG");
		ratings.setRatingType("Local Currency LT");
		ratings.setRating("AA+/A-1+");
		ratings.setAction("New Rating");
		ratings.setCreditWatchOutlook("NM");
		ratings.setRefundedInd("N");
		ratings.setMuncipalSecurity("Letter Of Credit");
		ratings.setSeries("2019A");
		List<UspfNonIssuerBasedRatings> list = new ArrayList<UspfNonIssuerBasedRatings>();
		list.add(ratings);
		when(nibRatingsRepo.getUspfNIBRatingsAll(Mockito.anyLong())).thenReturn(list);
		List<UspfNonIssuerBasedRatings> ratingDataLt =  uspfRatingService.getNonIssuerBasedRatings(5039L);
		assertNotNull(ratingDataLt);
	}
	
	
	@Test
	public void test_uspf_nib_ratingsFilter() throws Exception {
		UspfNonIssuerBasedFilterData filterData = new UspfNonIssuerBasedFilterData();
		filterData.setEntityId(5039L);
		filterData.setIssueNameOnly(false);
		filterData.setKeyword("US$15.0 mil var rate ");
		filterData.setMaturityYearFrom(2023);
		filterData.setMaturityYearTo(2063);
		filterData.setRole(Arrays.asList("ISSUER","OBLIGOR"));
		filterData.setCategory(Arrays.asList("Structured"));
		UspfNonIssuerBasedRatings ratings = new UspfNonIssuerBasedRatings();
		ratings.setEntityId(5039L);
		//ratings.setRoleCode("ISSUER");
		ratings.setIssueName("US$15.0 mil var rate dem multifam hsg rev bnds (Village Capital Corporation) (Bella Grove Apts) ser 2019A dtd 05/08/2019 due 05/01/2061");
		ratings.setCusip("771594AX6");
		ratings.setCategory("Structured");
		ratings.setMaturityDate("5/1/2061");
		ratings.setInstrumentId(28078L);
		ratings.setInstrDetailId(42422L);
		ratings.setRatingDetailId(494501L);
		ratings.setRatingTypeCode("STDLONG");
		ratings.setRatingType("Local Currency LT");
		ratings.setRating("AA+/A-1+");
		ratings.setAction("New Rating");
		ratings.setCreditWatchOutlook("NM");
		ratings.setRefundedInd("N");
		ratings.setMuncipalSecurity("Letter Of Credit");
		ratings.setSeries("2019A");
		List<UspfNonIssuerBasedRatings> list = new ArrayList<UspfNonIssuerBasedRatings>();
		list.add(ratings);
		when(nibRatingsRepo.getUspfNIBRatingsFilterData(filterData.getEntityId(),filterData.getRole(),
				filterData.getCategory(),filterData.getKeyword().toUpperCase(),
				filterData.getMaturityYearFrom(),filterData.getMaturityYearTo())).thenReturn(list);
		List<UspfNonIssuerBasedRatings> result =  (List<UspfNonIssuerBasedRatings>) uspfRatingService.getNIBRatingsFilterData(filterData);
		assertNotNull(result);
	}
	
	@Test
	public void test_uspf_nib_ratingsFilter_IssueName() throws Exception {
		UspfNonIssuerBasedFilterData filterData = new UspfNonIssuerBasedFilterData();
		filterData.setEntityId(5039L);
		filterData.setIssueNameOnly(true);
		filterData.setKeyword("US$15.0 mil var rate ");
		filterData.setMaturityYearFrom(2023);
		filterData.setMaturityYearTo(2063);
		filterData.setRole(Arrays.asList("ISSUER","OBLIGOR"));
		filterData.setCategory(Arrays.asList("Structured"));
		UspfNonIssuerBasedRatingsIssue ratings = new UspfNonIssuerBasedRatingsIssue();
		ratings.setEntityId(5039L);
		//ratings.setRoleCode("ISSUER");
		ratings.setIssueName("US$15.0 mil var rate dem multifam hsg rev bnds (Village Capital Corporation) (Bella Grove Apts) ser 2019A dtd 05/08/2019 due 05/01/2061");
		ratings.setCategory("Structured");
		ratings.setInstrumentId(28078L);
		ratings.setSeries("2019A");
		List<UspfNonIssuerBasedRatingsIssue> list = new ArrayList<UspfNonIssuerBasedRatingsIssue>();
		list.add(ratings);
		when(nibRatingsIssueNameRepo.getUspfNIBRatingsWithIssueNameOnly(filterData.getEntityId(),filterData.getRole(),
				filterData.getCategory(),filterData.getKeyword().toUpperCase()
				)).thenReturn(list);
		List<UspfNonIssuerBasedRatingsIssue> result =  (List<UspfNonIssuerBasedRatingsIssue>) uspfRatingService.getNIBRatingsFilterData(filterData);
		assertNotNull(result);
		
	}
	
	/*
	 * @Test public void test_uspf_nib_ratingsFilter_Null() throws Exception {
	 * 
	 * }
	 */

	@Test
	public void test_analyticalContacts() throws Exception {
		UspfAnalyticalContacts contacts = new UspfAnalyticalContacts();
		contacts.setAnalyticalSecId(10378L);
		contacts.setEmployeeId("P1000012371");
		contacts.setName("Blake E Yocom");
		contacts.setEmail("blake.yocom@spglobal.com");
		contacts.setPhone("+  1 (312) 233 7056");
		contacts.setRole("Analytical Manager");
		contacts.setDisplayOrder(2);
		List<UspfAnalyticalContacts> list = new ArrayList<UspfAnalyticalContacts>();
		list.add(contacts);
		when(analyticalContactRepo.findByAnalyticalSecId(10378L)).thenReturn(list);
		List<UspfAnalyticalContacts> result =  (List<UspfAnalyticalContacts>) uspfRatingService.getUspfAnalyticalContacts(10378L);
		assertNotNull(result);
	}
	
	@Test
	public void test_relatedcriteria() throws Exception {
		UspfRelatedCriteria relatedCriteria = new UspfRelatedCriteria();
		relatedCriteria.setRatingDetailId(42996978L);
		relatedCriteria.setArticleId(2932338L);
		relatedCriteria.setTitle("General Criteria: Environmental, Social, And Governance Principles In Credit Ratings");
		relatedCriteria.setArticleDate("10/10/2021 11:55:32 AM");
		relatedCriteria.setAuthor("Gregg Lemos-Stein");
		List<UspfRelatedCriteria> list = new ArrayList<UspfRelatedCriteria>();
		list.add(relatedCriteria);
		when(relatedCriteriaRepo.findByRatingDetailId(42996978L)).thenReturn(list);
		List<UspfRelatedCriteria> result =  (List<UspfRelatedCriteria>) uspfRatingService.getRelatedCriteriaArticles(42996978L);
		assertNotNull(result);
	}
	
	@Test
	public void test_nib_issueMaturityDetails() throws Exception {
		UspfNonIssuerBasedRatings ratings = new UspfNonIssuerBasedRatings();
		ratings.setEntityId(9563L);
		//ratings.setRoleCode("ISSUER");
		ratings.setIssueName("US$15.0 mil var rate dem multifam hsg rev bnds (Village Capital Corporation) (Bella Grove Apts) ser 2019A dtd 05/08/2019 due 05/01/2061");
		ratings.setCusip("771594AX6");
		ratings.setCategory("Structured");
		ratings.setMaturityDate("5/1/2061");
		ratings.setInstrumentId(350769L);
		ratings.setInstrDetailId(42422L);
		ratings.setRatingDetailId(494501L);
		ratings.setRatingTypeCode("STDLONG");
		ratings.setRatingType("Local Currency LT");
		ratings.setRating("AA+/A-1+");
		ratings.setAction("New Rating");
		ratings.setCreditWatchOutlook("NM");
		ratings.setRefundedInd("N");
		ratings.setMuncipalSecurity("Letter Of Credit");
		ratings.setSeries("2019A");
		List<UspfNonIssuerBasedRatings> list = new ArrayList<UspfNonIssuerBasedRatings>();
		list.add(ratings);
		when(nibRatingsRepo.getIssuerMaturityDetails(Mockito.anyLong(),Mockito.anyLong())).thenReturn(list);
		List<UspfNonIssuerBasedRatings> ratingDataLt =  uspfRatingService.getIssuerMaturityDetails(9563L,350769L);
		assertNotNull(ratingDataLt);
	}
	
	@Test
	void test_IssueAndMaturites() throws Exception {
		Mockito.when(iandMUspfDao.getIssuesAndMaturitiesDetails(Mockito.any(),Mockito.any(),Mockito.any(),Mockito.any())).thenReturn(new ArrayList<>());
		List<IssuesMaturitiesUSPFPub> actual = uspfRatingService.getUspfIssuesMaturities(2030L,null,null,false);
		Assertions.assertNotNull(actual);
	}
	
	@Test
	void test_IssueAndMaturites_minMaxDates() throws Exception {
		Mockito.when(iandMUspfDao.getUSPFMinMaxDates(Mockito.any())).thenReturn(new USPFMinMaxDates());
		USPFMinMaxDates actual = uspfRatingService.getIsseAndMaturitesMinMaxDates(2030L);
		Assertions.assertNotNull(actual);
	}

}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\test\java\com\spglobal\ratings\ratingsdata\util\AspectUtilTest.java

package com.spglobal.ratings.ratingsdata.util;

import static org.mockito.ArgumentMatchers.anyLong;
import static org.mockito.ArgumentMatchers.anyString;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.aop.aspectj.annotation.AspectJProxyFactory;
import org.springframework.test.context.junit.jupiter.SpringExtension;

import com.spglobal.ratings.ratingsdata.entity.EntityRatings;
import com.spglobal.ratings.ratingsdata.entity.EntityRatingsHistory;
import com.spglobal.ratings.ratingsdata.entity.IssuesAndMaturities;
import com.spglobal.ratings.ratingsdata.entity.IssuesAndMaturitiesHistory;
import com.spglobal.ratings.ratingsdata.model.DebtTypes;
import com.spglobal.ratings.ratingsdata.model.IssuesAndMaturitiesData;
import com.spglobal.ratings.ratingsdata.model.RatingsData;
import com.spglobal.ratings.ratingsdata.service.EntityRatingsHistoryService;
import com.spglobal.ratings.ratingsdata.service.EntityRatingsService;
import com.spglobal.ratings.ratingsdata.service.IssuesAndMaturitiesHistoryService;
import com.spglobal.ratings.ratingsdata.service.IssuesAndMaturitiesService;

@ExtendWith({SpringExtension.class, MockitoExtension.class})
public class AspectUtilTest {
	
	private AspectUtil aspectUtilTest;
	private AspectJProxyFactory ratingsServicefactory;
	private AspectJProxyFactory ratingsHistoryServicefactory;
	private AspectJProxyFactory issuesAndMaturitiesServicefactory;
	private AspectJProxyFactory issuesAndMaturitiesHistoryServicefactory;
	private List<EntityRatings> ratingsList;
	private RatingsData ratingsdata;
	private List<EntityRatingsHistory> ratingsHistoryList;
	private IssuesAndMaturitiesData issuesAndMaturitiesData;
	private List<IssuesAndMaturities> issuesAndMaturitiesList;
	private List<IssuesAndMaturitiesHistory> issuesAndMaturitiesHistoryList;
	private EntityRatings ratingsResponse;
	private EntityRatingsHistory ratingsHistoryResponse;
	private IssuesAndMaturities issuesAndMaturitiesRespoonse;
	private IssuesAndMaturitiesHistory issuesAndMaturitiesHistoryResponse;
	private List<DebtTypes> debtTypesList;
	private DebtTypes debtTypes;
	
	@BeforeEach
    public void setup(){
		System.out.println("@AspectUtilTest: In setup");
		MockitoAnnotations.initMocks(this);
		//mock beans to test
		EntityRatingsService ratingsServiceTestBean = mock(EntityRatingsService.class);
		EntityRatingsHistoryService ratingsHistoryServiceTestBean = mock(EntityRatingsHistoryService.class);
		IssuesAndMaturitiesService issuesAndMaturitiesServiceTestBean = mock(IssuesAndMaturitiesService.class);
		IssuesAndMaturitiesHistoryService issuesAndMaturitiesHistoryServiceBean = mock(IssuesAndMaturitiesHistoryService.class);
		
		//aspect factory 
		ratingsServicefactory = new AspectJProxyFactory();
		ratingsHistoryServicefactory = new AspectJProxyFactory();
		issuesAndMaturitiesServicefactory = new AspectJProxyFactory();
		issuesAndMaturitiesHistoryServicefactory = new AspectJProxyFactory();
		
		//set targets for advice  @Around("execution(* com.spglobal.ratings.salesforce.service..*(..)))")
		ratingsServicefactory.setTarget(ratingsServiceTestBean);
		ratingsHistoryServicefactory.setTarget(ratingsHistoryServiceTestBean);
		issuesAndMaturitiesServicefactory.setTarget(issuesAndMaturitiesServiceTestBean);
		issuesAndMaturitiesHistoryServicefactory.setTarget(issuesAndMaturitiesHistoryServiceBean);
		
		//aspect to test
		aspectUtilTest = new AspectUtil();
		ratingsServicefactory.addAspect(aspectUtilTest);
		ratingsHistoryServicefactory.addAspect(aspectUtilTest);
		issuesAndMaturitiesServicefactory.addAspect(aspectUtilTest);
		issuesAndMaturitiesHistoryServicefactory.addAspect(aspectUtilTest);
		
		ratingsResponse = mock(EntityRatings.class);
		ratingsList = new ArrayList<EntityRatings>();
		ratingsdata = new RatingsData();
		ratingsList.add(ratingsResponse);
		ratingsdata.setEntityRatings(ratingsList);
		ratingsHistoryResponse = mock(EntityRatingsHistory.class);
		ratingsHistoryList = new ArrayList<EntityRatingsHistory>();
		ratingsHistoryList.add(ratingsHistoryResponse);
		issuesAndMaturitiesRespoonse = mock(IssuesAndMaturities.class);
		issuesAndMaturitiesList = new ArrayList<IssuesAndMaturities>();
		issuesAndMaturitiesData = new IssuesAndMaturitiesData();
		issuesAndMaturitiesList.add(issuesAndMaturitiesRespoonse);
		issuesAndMaturitiesData.setIssuesAndMaturities(issuesAndMaturitiesList);
		issuesAndMaturitiesHistoryResponse = mock(IssuesAndMaturitiesHistory.class);
		issuesAndMaturitiesHistoryList = new ArrayList<IssuesAndMaturitiesHistory>();
		issuesAndMaturitiesHistoryList.add(issuesAndMaturitiesHistoryResponse);
		debtTypes = mock(DebtTypes.class);
		debtTypesList = new ArrayList<DebtTypes>();
		debtTypesList.add(debtTypes);
	}
	
	@SuppressWarnings("unused")
	@Test
	public void testProfileAllMethodsForEntityRatingsService() throws IllegalStateException, IllegalArgumentException, Exception, Throwable{
		System.out.println("@AspectUtilTest: In testProfileAllMethodsForEntityRatingsService");
		EntityRatingsService ratingsServiceproxy = ratingsServicefactory.getProxy();
		
		when(ratingsServiceproxy.getEntityRatings(anyLong(), anyLong(), anyString())).thenReturn(ratingsdata);
		when(ratingsServiceproxy.getEntityRatingDetails(anyLong(), anyLong(), anyLong(), anyString())).thenReturn(ratingsResponse);
		
//		List<EntityRatings> resp = ratingsServiceproxy.getEntityRatings(Long.valueOf(100751), Long.valueOf(4004341), "authHeader");
		RatingsData resp = ratingsServiceproxy.getEntityRatings(Long.valueOf(100751), Long.valueOf(4004341), "authHeader");
		EntityRatings details = ratingsServiceproxy.getEntityRatingDetails(Long.valueOf(100751), Long.valueOf(42370608), Long.valueOf(4004341), "authHeader");
	}
	
	@SuppressWarnings("unused")
	@Test
	public void testProfileAllMethodsForEntityRatingsHistoryService() throws IllegalStateException, IllegalArgumentException, Exception, Throwable{
		System.out.println("@AspectUtilTest: In testProfileAllMethodsForEntityRatingsHistoryService");
		EntityRatingsHistoryService ratingsHistoryServiceproxy = ratingsHistoryServicefactory.getProxy();
		
		when(ratingsHistoryServiceproxy.getEntityRatingsHistory(anyLong(), anyString(), anyString(), anyLong(), anyString())).thenReturn(ratingsHistoryList);
		
		List<EntityRatingsHistory> resp = ratingsHistoryServiceproxy.getEntityRatingsHistory(Long.valueOf(100751), "ICR", "FCLONG", Long.valueOf(4004341), "authHeader");
	}
	
	@SuppressWarnings("unused")
	@Test
	public void testProfileAllMethodsForIssuesAndMaturitiesService() throws IllegalStateException, IllegalArgumentException, Exception, Throwable{
		System.out.println("@AspectUtilTest: In testProfileAllMethodsForIssuesAndMaturitiesService");
		IssuesAndMaturitiesService issuesAndMaturitiesServiceproxy = issuesAndMaturitiesServicefactory.getProxy();
		
		when(issuesAndMaturitiesServiceproxy.getIssuesAndMaturities(anyLong(), anyLong(), anyString())).thenReturn(issuesAndMaturitiesData);
		when(issuesAndMaturitiesServiceproxy.getIssuesAndMaturitiesByDebtTypeCode(anyLong(), anyString(), anyLong(), anyString())).thenReturn(issuesAndMaturitiesData);
		when(issuesAndMaturitiesServiceproxy.getIssuesAndMaturitiesDetails(anyLong(), anyLong(), anyLong(), anyString())).thenReturn(issuesAndMaturitiesRespoonse);
		when(issuesAndMaturitiesServiceproxy.getDropdownDebtTypes(anyLong(), anyLong(), anyString())).thenReturn(debtTypesList);
		
//		List<IssuesAndMaturities> resp = issuesAndMaturitiesServiceproxy.getIssuesAndMaturities(Long.valueOf(100751), Long.valueOf(4004341), "authHeader");
//		List<IssuesAndMaturities> im = issuesAndMaturitiesServiceproxy.getIssuesAndMaturitiesByDebtTypeCode(Long.valueOf(100751), "SRUNSEC", Long.valueOf(4004341), "authHeader");
		IssuesAndMaturitiesData resp = issuesAndMaturitiesServiceproxy.getIssuesAndMaturities(Long.valueOf(100751), Long.valueOf(4004341), "authHeader");
		IssuesAndMaturitiesData im = issuesAndMaturitiesServiceproxy.getIssuesAndMaturitiesByDebtTypeCode(Long.valueOf(100751), "SRUNSEC", Long.valueOf(4004341), "authHeader");
		IssuesAndMaturities details = issuesAndMaturitiesServiceproxy.getIssuesAndMaturitiesDetails(Long.valueOf(100751), Long.valueOf(39898462), Long.valueOf(4004341), "authHeader");
		List<DebtTypes> types = issuesAndMaturitiesServiceproxy.getDropdownDebtTypes(Long.valueOf(100751), Long.valueOf(4004341), "authHeader");
	}
	
	@SuppressWarnings("unused")
	@Test
	public void testProfileAllMethodsForIssuesAndMaturitiesHistoryService() throws IllegalStateException, IllegalArgumentException, Exception, Throwable{
		System.out.println("@AspectUtilTest: In testProfileAllMethodsForIssuesAndMaturitiesHistoryService");
		IssuesAndMaturitiesHistoryService issuesAndMaturitiesHistoryServiceproxy = issuesAndMaturitiesHistoryServicefactory.getProxy();
		
		when(issuesAndMaturitiesHistoryServiceproxy.getIssuesAndMaturitiesHistory(anyLong(), anyString(), anyLong(), anyLong(), anyString())).thenReturn(issuesAndMaturitiesHistoryList);
		
		List<IssuesAndMaturitiesHistory> resp = issuesAndMaturitiesHistoryServiceproxy.getIssuesAndMaturitiesHistory(Long.valueOf(1301099), "STDLONG", Long.valueOf(4421612), Long.valueOf(4004341), "authHeader");
	}

}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\test\java\com\spglobal\ratings\ratingsdata\util\RatingsDataUtilTest.java

package com.spglobal.ratings.ratingsdata.util;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.invocation.InvocationOnMock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.stubbing.Answer;
import org.springframework.test.context.junit.jupiter.SpringExtension;

import com.fasterxml.jackson.databind.ObjectMapper;

@ExtendWith({SpringExtension.class, MockitoExtension.class})
public class RatingsDataUtilTest {
	
	@InjectMocks
	RatingsDataUtil ratingsUtil;
	
	@Mock
	ObjectMapper mapper;
	
	@Test
	public void tokenHeaderManipulationCheckTest() {
		String input="<jwt0 xmlns=\"http://www.snl.com/security/tokens\">eyJ0eXAiOiJKV0UiLCJhbGciOiJSU0ExXzUiLCJ4NXQiOiI0ODI4OUQzRkY2QjcyOENGRTlENjZDOTc2RTk5ODY5RUE1QzZGMTlGIiwiZW5jIjoiQTI1NkNCQyIsIml2IjoiY0hkdTlDODdVRUtBTTNhVkg3bUpQQSIsInppcCI6IlpJUCJ9.u0E83wuiBYpZ-P6WrIE5aFS4sbfOhs4RQUXAq3yeIZiZWyTJFUBv1g1o68Yo9ckEe0gGILbbnOwsB7RLZiQCBqc10Z3EgEoqjjBgIyI1SMV8zhWqiq_805weXSFWWgV_9K13fb4HZv2n9jyA01srbgxeVm32gGUi7yWe1D9K0_s.TtCnkEqtKU6rAh7p2F-PqcIAqtQdzOb6rOvtmlUM3RimD7WfYJx94T6UdvuuE6L7BAc5QH2i7dq9jdge_C1KaLrp-EG1aBhgAaDZKGG5Hvj2RAtAP7eAZWy7d2iuehS1ZB-ZXGAuzJWqeH2W4HA8fxyT-pvoOstDkDOcPGRIcDOOX0FLc96MyCJKiVw1j95N_WIGi_Cpaq9T9FPPSa3iRaWZ2qC49QNjg_mU1s8QANPrZnEVZ8fhR_hhKE4I5dk5qm6k47meQMgrWRVw4PblRWqIUvf6-uynOZ4zUpeFVvIYv2h9TXvKuyp6GMjOBAoX9tCVXT9Gb_67bZlNRV875beIbMPXgSD0F_4CcMlFVudxaoQdH0Y1YTlmVxjZKn45zoiaO6xiZd5Xn0Fyzsgd7u4tXJeZP09IxFCCjgSEs_2QLCqd3JmFlpL7V8Ol9bhZk6DN0xExbGUySwo--ZaLcBom4EBJZOk4KYC0w76unU3yPNguHDejrNX4CMZZv0oN5li_9qNfPaOjeif6om5cPGRNHkHndRgd1aNCyPeO2512MHPfMTrt_wFjGRV9vWwvU7lhPbduCJjVRTtERmgcdmDgSgXgO0Np22nP0SLpfGGrjcMultzmxtcs7Ywy1GyICpz_eBFYQtq7LpZKN7yqa5Ze6lDFG-hP3O2SDl6P2Vif-cYdoGfP6SFuWoWjWl4yk4LES9IHksnhWKsIsFm-LTDIHywPisoId7fdio5uWw8wV7zV6MoORUQD2Q6dCfavwcy9ShlLYjOg637gykxGXscg1Tizva33Q3vYszch3ibW-E8Ya6y5uGv3ghiD4ZFn</jwt0>";
		RatingsDataUtil util = mock(RatingsDataUtil.class);
		when(util.tokenHeaderManipulationCheck(Mockito.anyString())).thenAnswer(new Answer<String>() {
			@Override
			public String answer(InvocationOnMock invocation)throws Throwable{
				String ip = invocation.getArgument(0);
				return ratingsUtil.tokenHeaderManipulationCheck(ip);
			}
		});
		assertEquals(input, util.tokenHeaderManipulationCheck(input));
	}

	@Test
	public void sanitizeStringTest() {
		RatingsDataUtil util = mock(RatingsDataUtil.class);
		when(util.sanitizeString(Mockito.anyString())).thenAnswer(new Answer<String>() {
			@Override
			public String answer(InvocationOnMock invocation)throws Throwable{
				String ip = invocation.getArgument(0);
				return ratingsUtil.sanitizeString(ip);
			}
		});
		String input="testing";
		assertEquals(input, util.sanitizeString(input));
		assertEquals(null, util.sanitizeString(null));
		
	}

}


C:\Users\nicolae_barz\OneDrive - S&P Global\Desktop\r360-ratingsdata-rest\r360-ratingsdata-rest\src\test\java\com\spglobal\ratings\ratingsdata\util\RestApiUtilTest.java

package com.spglobal.ratings.ratingsdata.util;

import static org.mockito.ArgumentMatchers.any;

import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.spglobal.ratings.ratingsdata.config.AppConfig;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.core.ParameterizedTypeReference;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.test.context.junit.jupiter.SpringExtension;
import org.springframework.web.client.RestTemplate;

import com.spglobal.ratings.ratingsdata.model.RPMCriteria;

@ExtendWith({ SpringExtension.class, MockitoExtension.class })
public class RestApiUtilTest {

	@InjectMocks
	RestApiUtil restApiUtil;

	@Mock
	private RestTemplate restTemplate;

	@SuppressWarnings("unchecked")
	@Mock
	private AppConfig appConfig;

	@Test
	public void getRatingCriteriaArticlesSuccessTest1() throws Exception {
		RPMCriteria rpmCriteria1 = new RPMCriteria();
		rpmCriteria1.setLinxId("7554329");
		RPMCriteria rpmCriteria2 = new RPMCriteria();
		rpmCriteria2.setLinxId("100892753");
		RPMCriteria rpmCriteria3 = new RPMCriteria();
		rpmCriteria3.setLinxId("11798296");
		List<RPMCriteria> rpmCriterias = Arrays.asList(rpmCriteria1, rpmCriteria2, rpmCriteria3);
		Mockito.when(restTemplate.exchange(any(String.class), any(HttpMethod.class), any(HttpEntity.class),
				any(ParameterizedTypeReference.class)))
				.thenReturn(new ResponseEntity<List<RPMCriteria>>(rpmCriterias, HttpStatus.OK));

		Map<String, Object> rpmHeaders = new HashMap<String, Object>();
		rpmHeaders.put(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON);
		rpmHeaders.put("Source", "LINX");
		rpmHeaders.put("Language", "English");
		rpmHeaders.put("PubDate_Format", "Mon.fmDD, YYYY");
		rpmHeaders.put("Application", "RPM");
		rpmHeaders.put("IsCriteriaNonPublic", "true");

		Map<String, Object> rpmParams = new HashMap<String, Object>();
		rpmParams.put("JobIDsInClause", "'W-78009'");

		Assertions.assertEquals(rpmCriterias,
				restApiUtil.<List<RPMCriteria>>fetchApiContent(HttpMethod.POST, rpmHeaders, "", rpmParams, 
						new ParameterizedTypeReference<List<RPMCriteria>>() {}).getBody());
	}

	@Test
	public void getRatingCriteriaArticlesSuccessTest2() throws Exception {
		String token = "Bearer <Jwt></Jwt>";
		HttpHeaders httpHeaders = new HttpHeaders();
		httpHeaders.set("Authorization", token);
		Assertions.assertEquals(token, restApiUtil.getAuthorizationToken(httpHeaders));
	}

	@SuppressWarnings("unchecked")
	@Test
	public void getRatingCriteriaArticlesFailureTest1() throws Exception {
		Mockito.when(restTemplate.exchange(any(String.class), any(HttpMethod.class), any(HttpEntity.class),
				any(ParameterizedTypeReference.class))).thenThrow(new RuntimeException("NullPointer Exception"));
		Assertions.assertThrows(Exception.class, () -> {
			restApiUtil.fetchApiContent(HttpMethod.POST, new HashMap<String, Object>(), "",
					new HashMap<String, Object>(), new ParameterizedTypeReference<List<RPMCriteria>>() {});
		});
	}

	@Test
	public void getRatingCriteriaArticlesFailureTest2() throws Exception {
		Assertions.assertThrows(Exception.class, () -> {
			restApiUtil.getAuthorizationToken(new HttpHeaders());
		});
	}

}


 getDashboardRatingArticles API is failing and getting message as 401


